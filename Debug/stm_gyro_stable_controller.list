
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091ac  080091ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080091ac  080091ac  000191ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091b4  080091b4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091b4  080091b4  000191b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091b8  080091b8  000191b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080091bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000518  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000058c  2000058c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173af  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003222  00000000  00000000  00037453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  0003a678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001070  00000000  00000000  0003b830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242f0  00000000  00000000  0003c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016404  00000000  00000000  00060b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db8e8  00000000  00000000  00076f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015287c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b90  00000000  00000000  001528d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009114 	.word	0x08009114

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08009114 	.word	0x08009114

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96e 	b.w	8000b28 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468c      	mov	ip, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 8083 	bne.w	800097a <__udivmoddi4+0x116>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d947      	bls.n	800090a <__udivmoddi4+0xa6>
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	b142      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 8000880:	f1c2 0020 	rsb	r0, r2, #32
 8000884:	fa24 f000 	lsr.w	r0, r4, r0
 8000888:	4091      	lsls	r1, r2
 800088a:	4097      	lsls	r7, r2
 800088c:	ea40 0c01 	orr.w	ip, r0, r1
 8000890:	4094      	lsls	r4, r2
 8000892:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000896:	0c23      	lsrs	r3, r4, #16
 8000898:	fbbc f6f8 	udiv	r6, ip, r8
 800089c:	fa1f fe87 	uxth.w	lr, r7
 80008a0:	fb08 c116 	mls	r1, r8, r6, ip
 80008a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a8:	fb06 f10e 	mul.w	r1, r6, lr
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x60>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008b6:	f080 8119 	bcs.w	8000aec <__udivmoddi4+0x288>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 8116 	bls.w	8000aec <__udivmoddi4+0x288>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008cc:	fb08 3310 	mls	r3, r8, r0, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d8:	45a6      	cmp	lr, r4
 80008da:	d909      	bls.n	80008f0 <__udivmoddi4+0x8c>
 80008dc:	193c      	adds	r4, r7, r4
 80008de:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e2:	f080 8105 	bcs.w	8000af0 <__udivmoddi4+0x28c>
 80008e6:	45a6      	cmp	lr, r4
 80008e8:	f240 8102 	bls.w	8000af0 <__udivmoddi4+0x28c>
 80008ec:	3802      	subs	r0, #2
 80008ee:	443c      	add	r4, r7
 80008f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f4:	eba4 040e 	sub.w	r4, r4, lr
 80008f8:	2600      	movs	r6, #0
 80008fa:	b11d      	cbz	r5, 8000904 <__udivmoddi4+0xa0>
 80008fc:	40d4      	lsrs	r4, r2
 80008fe:	2300      	movs	r3, #0
 8000900:	e9c5 4300 	strd	r4, r3, [r5]
 8000904:	4631      	mov	r1, r6
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	b902      	cbnz	r2, 800090e <__udivmoddi4+0xaa>
 800090c:	deff      	udf	#255	; 0xff
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	2a00      	cmp	r2, #0
 8000914:	d150      	bne.n	80009b8 <__udivmoddi4+0x154>
 8000916:	1bcb      	subs	r3, r1, r7
 8000918:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800091c:	fa1f f887 	uxth.w	r8, r7
 8000920:	2601      	movs	r6, #1
 8000922:	fbb3 fcfe 	udiv	ip, r3, lr
 8000926:	0c21      	lsrs	r1, r4, #16
 8000928:	fb0e 331c 	mls	r3, lr, ip, r3
 800092c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000930:	fb08 f30c 	mul.w	r3, r8, ip
 8000934:	428b      	cmp	r3, r1
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0xe4>
 8000938:	1879      	adds	r1, r7, r1
 800093a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0xe2>
 8000940:	428b      	cmp	r3, r1
 8000942:	f200 80e9 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 8000946:	4684      	mov	ip, r0
 8000948:	1ac9      	subs	r1, r1, r3
 800094a:	b2a3      	uxth	r3, r4
 800094c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000950:	fb0e 1110 	mls	r1, lr, r0, r1
 8000954:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000958:	fb08 f800 	mul.w	r8, r8, r0
 800095c:	45a0      	cmp	r8, r4
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x10c>
 8000960:	193c      	adds	r4, r7, r4
 8000962:	f100 33ff 	add.w	r3, r0, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x10a>
 8000968:	45a0      	cmp	r8, r4
 800096a:	f200 80d9 	bhi.w	8000b20 <__udivmoddi4+0x2bc>
 800096e:	4618      	mov	r0, r3
 8000970:	eba4 0408 	sub.w	r4, r4, r8
 8000974:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000978:	e7bf      	b.n	80008fa <__udivmoddi4+0x96>
 800097a:	428b      	cmp	r3, r1
 800097c:	d909      	bls.n	8000992 <__udivmoddi4+0x12e>
 800097e:	2d00      	cmp	r5, #0
 8000980:	f000 80b1 	beq.w	8000ae6 <__udivmoddi4+0x282>
 8000984:	2600      	movs	r6, #0
 8000986:	e9c5 0100 	strd	r0, r1, [r5]
 800098a:	4630      	mov	r0, r6
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	fab3 f683 	clz	r6, r3
 8000996:	2e00      	cmp	r6, #0
 8000998:	d14a      	bne.n	8000a30 <__udivmoddi4+0x1cc>
 800099a:	428b      	cmp	r3, r1
 800099c:	d302      	bcc.n	80009a4 <__udivmoddi4+0x140>
 800099e:	4282      	cmp	r2, r0
 80009a0:	f200 80b8 	bhi.w	8000b14 <__udivmoddi4+0x2b0>
 80009a4:	1a84      	subs	r4, r0, r2
 80009a6:	eb61 0103 	sbc.w	r1, r1, r3
 80009aa:	2001      	movs	r0, #1
 80009ac:	468c      	mov	ip, r1
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d0a8      	beq.n	8000904 <__udivmoddi4+0xa0>
 80009b2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0xa0>
 80009b8:	f1c2 0320 	rsb	r3, r2, #32
 80009bc:	fa20 f603 	lsr.w	r6, r0, r3
 80009c0:	4097      	lsls	r7, r2
 80009c2:	fa01 f002 	lsl.w	r0, r1, r2
 80009c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ca:	40d9      	lsrs	r1, r3
 80009cc:	4330      	orrs	r0, r6
 80009ce:	0c03      	lsrs	r3, r0, #16
 80009d0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e0:	fb06 f108 	mul.w	r1, r6, r8
 80009e4:	4299      	cmp	r1, r3
 80009e6:	fa04 f402 	lsl.w	r4, r4, r2
 80009ea:	d909      	bls.n	8000a00 <__udivmoddi4+0x19c>
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80009f2:	f080 808d 	bcs.w	8000b10 <__udivmoddi4+0x2ac>
 80009f6:	4299      	cmp	r1, r3
 80009f8:	f240 808a 	bls.w	8000b10 <__udivmoddi4+0x2ac>
 80009fc:	3e02      	subs	r6, #2
 80009fe:	443b      	add	r3, r7
 8000a00:	1a5b      	subs	r3, r3, r1
 8000a02:	b281      	uxth	r1, r0
 8000a04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a10:	fb00 f308 	mul.w	r3, r0, r8
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x1c4>
 8000a18:	1879      	adds	r1, r7, r1
 8000a1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a1e:	d273      	bcs.n	8000b08 <__udivmoddi4+0x2a4>
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d971      	bls.n	8000b08 <__udivmoddi4+0x2a4>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4439      	add	r1, r7
 8000a28:	1acb      	subs	r3, r1, r3
 8000a2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a2e:	e778      	b.n	8000922 <__udivmoddi4+0xbe>
 8000a30:	f1c6 0c20 	rsb	ip, r6, #32
 8000a34:	fa03 f406 	lsl.w	r4, r3, r6
 8000a38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a3c:	431c      	orrs	r4, r3
 8000a3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a42:	fa01 f306 	lsl.w	r3, r1, r6
 8000a46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a4e:	431f      	orrs	r7, r3
 8000a50:	0c3b      	lsrs	r3, r7, #16
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fa1f f884 	uxth.w	r8, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a62:	fb09 fa08 	mul.w	sl, r9, r8
 8000a66:	458a      	cmp	sl, r1
 8000a68:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x220>
 8000a72:	1861      	adds	r1, r4, r1
 8000a74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a78:	d248      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7a:	458a      	cmp	sl, r1
 8000a7c:	d946      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a82:	4421      	add	r1, r4
 8000a84:	eba1 010a 	sub.w	r1, r1, sl
 8000a88:	b2bf      	uxth	r7, r7
 8000a8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a96:	fb00 f808 	mul.w	r8, r0, r8
 8000a9a:	45b8      	cmp	r8, r7
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x24a>
 8000a9e:	19e7      	adds	r7, r4, r7
 8000aa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa4:	d22e      	bcs.n	8000b04 <__udivmoddi4+0x2a0>
 8000aa6:	45b8      	cmp	r8, r7
 8000aa8:	d92c      	bls.n	8000b04 <__udivmoddi4+0x2a0>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4427      	add	r7, r4
 8000aae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ab2:	eba7 0708 	sub.w	r7, r7, r8
 8000ab6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aba:	454f      	cmp	r7, r9
 8000abc:	46c6      	mov	lr, r8
 8000abe:	4649      	mov	r1, r9
 8000ac0:	d31a      	bcc.n	8000af8 <__udivmoddi4+0x294>
 8000ac2:	d017      	beq.n	8000af4 <__udivmoddi4+0x290>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x27a>
 8000ac6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aca:	eb67 0701 	sbc.w	r7, r7, r1
 8000ace:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ad2:	40f2      	lsrs	r2, r6
 8000ad4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ad8:	40f7      	lsrs	r7, r6
 8000ada:	e9c5 2700 	strd	r2, r7, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	462e      	mov	r6, r5
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e70b      	b.n	8000904 <__udivmoddi4+0xa0>
 8000aec:	4606      	mov	r6, r0
 8000aee:	e6e9      	b.n	80008c4 <__udivmoddi4+0x60>
 8000af0:	4618      	mov	r0, r3
 8000af2:	e6fd      	b.n	80008f0 <__udivmoddi4+0x8c>
 8000af4:	4543      	cmp	r3, r8
 8000af6:	d2e5      	bcs.n	8000ac4 <__udivmoddi4+0x260>
 8000af8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000afc:	eb69 0104 	sbc.w	r1, r9, r4
 8000b00:	3801      	subs	r0, #1
 8000b02:	e7df      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b04:	4608      	mov	r0, r1
 8000b06:	e7d2      	b.n	8000aae <__udivmoddi4+0x24a>
 8000b08:	4660      	mov	r0, ip
 8000b0a:	e78d      	b.n	8000a28 <__udivmoddi4+0x1c4>
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	e7b9      	b.n	8000a84 <__udivmoddi4+0x220>
 8000b10:	4666      	mov	r6, ip
 8000b12:	e775      	b.n	8000a00 <__udivmoddi4+0x19c>
 8000b14:	4630      	mov	r0, r6
 8000b16:	e74a      	b.n	80009ae <__udivmoddi4+0x14a>
 8000b18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b1c:	4439      	add	r1, r7
 8000b1e:	e713      	b.n	8000948 <__udivmoddi4+0xe4>
 8000b20:	3802      	subs	r0, #2
 8000b22:	443c      	add	r4, r7
 8000b24:	e724      	b.n	8000970 <__udivmoddi4+0x10c>
 8000b26:	bf00      	nop

08000b28 <__aeabi_idiv0>:
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f04f 0200 	mov.w	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <FusionAhrsInitialise+0x74>)
 8000b4a:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f04f 0200 	mov.w	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f04f 0200 	mov.w	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f04f 0200 	mov.w	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <FusionAhrsInitialise+0x78>)
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000b92:	bf00      	nop
 8000b94:	372c      	adds	r7, #44	; 0x2c
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	7f7fffff 	.word	0x7f7fffff
 8000ba4:	41200000 	.word	0x41200000

08000ba8 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8000ba8:	b490      	push	{r4, r7}
 8000baa:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb4:	6018      	str	r0, [r3, #0]
 8000bb6:	f107 0120 	add.w	r1, r7, #32
 8000bba:	eeb0 5a61 	vmov.f32	s10, s3
 8000bbe:	eef0 5a42 	vmov.f32	s11, s4
 8000bc2:	eeb0 6a62 	vmov.f32	s12, s5
 8000bc6:	f107 0214 	add.w	r2, r7, #20
 8000bca:	eef0 6a43 	vmov.f32	s13, s6
 8000bce:	eeb0 7a63 	vmov.f32	s14, s7
 8000bd2:	eef0 7a44 	vmov.f32	s15, s8
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	1d38      	adds	r0, r7, #4
 8000bdc:	edc0 4a00 	vstr	s9, [r0]
 8000be0:	ed81 0a00 	vstr	s0, [r1]
 8000be4:	edc1 0a01 	vstr	s1, [r1, #4]
 8000be8:	ed81 1a02 	vstr	s2, [r1, #8]
 8000bec:	ed82 5a00 	vstr	s10, [r2]
 8000bf0:	edc2 5a01 	vstr	s11, [r2, #4]
 8000bf4:	ed82 6a02 	vstr	s12, [r2, #8]
 8000bf8:	edc3 6a00 	vstr	s13, [r3]
 8000bfc:	ed83 7a01 	vstr	s14, [r3, #4]
 8000c00:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8000c04:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000c08:	f04f 0200 	mov.w	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c32:	d112      	bne.n	8000c5a <FusionAhrsUpdate+0xb2>
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c44:	d109      	bne.n	8000c5a <FusionAhrsUpdate+0xb2>
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c56:	f000 8437 	beq.w	80014c8 <FusionAhrsUpdate+0x920>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	ed93 7a04 	vldr	s14, [r3, #16]
 8000c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	edd3 6a03 	vldr	s13, [r3, #12]
 8000c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000c8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000c92:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8000c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	edd3 6a05 	vldr	s13, [r3, #20]
 8000cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	edd3 7a06 	vldr	s15, [r3, #24]
 8000cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000cca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000cce:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8000cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000cee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	edd3 6a06 	vldr	s13, [r3, #24]
 8000cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000d0e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000d12:	edc3 7a02 	vstr	s15, [r3, #8]
 8000d16:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d1a:	f107 0214 	add.w	r2, r7, #20
 8000d1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000d24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d28:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000d2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8000d32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d36:	ed93 7a00 	vldr	s14, [r3]
 8000d3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d52:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d62:	edd3 6a02 	vldr	s13, [r3, #8]
 8000d66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d76:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000d7a:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8000d7e:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000d82:	edd3 7a00 	vldr	s15, [r3]
 8000d86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d8e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000d92:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8000d96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d9a:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8000da2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000dac:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8000dae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	105a      	asrs	r2, r3, #1
 8000db6:	4b9a      	ldr	r3, [pc, #616]	; (8001020 <FusionAhrsUpdate+0x478>)
 8000db8:	1a9b      	subs	r3, r3, r2
 8000dba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000dbe:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8000dc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dca:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8000dcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dd0:	ed93 7a00 	vldr	s14, [r3]
 8000dd4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000de0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000de4:	edd3 7a00 	vldr	s15, [r3]
 8000de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dec:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000df0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000df4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e04:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8000e08:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e0c:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8000e0e:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e18:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e22:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8000e2c:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8000e2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e32:	ed93 7a00 	vldr	s14, [r3]
 8000e36:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000e3a:	edd3 7a00 	vldr	s15, [r3]
 8000e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e46:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8000e4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e52:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e62:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8000e66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e6e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000e72:	edd3 7a00 	vldr	s15, [r3]
 8000e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e7e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8000e82:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8000e86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000e8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e90:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8000e94:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8000e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8000e9e:	bf00      	nop
 8000ea0:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000ea4:	461c      	mov	r4, r3
 8000ea6:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8000eaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000eb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eb6:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ebc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ec0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8000ec8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8000ece:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ed2:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ed6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eda:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ee6:	edd3 6a02 	vldr	s13, [r3, #8]
 8000eea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eee:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000efe:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8000f02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f06:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f0e:	edd3 7a00 	vldr	s15, [r3]
 8000f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f1a:	edd3 6a00 	vldr	s13, [r3]
 8000f1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f22:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f32:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8000f36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f3a:	ed93 7a00 	vldr	s14, [r3]
 8000f3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f42:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f66:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8000f6a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8000f6e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000f72:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000f78:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000f7c:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8000f80:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000f86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f8a:	f107 0208 	add.w	r2, r7, #8
 8000f8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8000f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f98:	ed93 7a00 	vldr	s14, [r3]
 8000f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fac:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fcc:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd4:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 8000fd8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fdc:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 8000fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fea:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fee:	ed93 7a00 	vldr	s14, [r3]
 8000ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	f100 8266 	bmi.w	80014ca <FusionAhrsUpdate+0x922>
 8000ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	edd3 7a02 	vldr	s15, [r3, #8]
 8001008:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800100c:	ed93 7a00 	vldr	s14, [r3]
 8001010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	f300 8257 	bgt.w	80014ca <FusionAhrsUpdate+0x922>
 800101c:	e002      	b.n	8001024 <FusionAhrsUpdate+0x47c>
 800101e:	bf00      	nop
 8001020:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 8001024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	ed93 7a04 	vldr	s14, [r3, #16]
 800102e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	edd3 7a05 	vldr	s15, [r3, #20]
 8001038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	edd3 6a03 	vldr	s13, [r3, #12]
 8001046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001058:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800105c:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	ed93 7a03 	vldr	s14, [r3, #12]
 800106a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	edd3 7a03 	vldr	s15, [r3, #12]
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800107c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	edd3 6a05 	vldr	s13, [r3, #20]
 800108a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	edd3 7a05 	vldr	s15, [r3, #20]
 8001094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001098:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 800109c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80010a0:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 80010a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80010ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80010b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80010c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80010d8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80010dc:	edc3 7a02 	vstr	s15, [r3, #8]
 80010e0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80010e4:	f107 0214 	add.w	r2, r7, #20
 80010e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80010ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010f2:	f107 0208 	add.w	r2, r7, #8
 80010f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80010fc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001100:	ed93 7a01 	vldr	s14, [r3, #4]
 8001104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001108:	edd3 7a02 	vldr	s15, [r3, #8]
 800110c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001110:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001114:	edd3 6a02 	vldr	s13, [r3, #8]
 8001118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800111c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001128:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800112c:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001130:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001134:	ed93 7a02 	vldr	s14, [r3, #8]
 8001138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001144:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001148:	edd3 6a00 	vldr	s13, [r3]
 800114c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001150:	edd3 7a02 	vldr	s15, [r3, #8]
 8001154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001160:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001164:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001168:	ed93 7a00 	vldr	s14, [r3]
 800116c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001170:	edd3 7a01 	vldr	s15, [r3, #4]
 8001174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001178:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800117c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001190:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001194:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001198:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800119c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011a6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80011aa:	461c      	mov	r4, r3
 80011ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011b8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80011bc:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80011c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011ca:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80011ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80011d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011d8:	ed93 7a00 	vldr	s14, [r3]
 80011dc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011e8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80011f0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001200:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001204:	edd3 6a02 	vldr	s13, [r3, #8]
 8001208:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800120c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800121c:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001220:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800122c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001230:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001234:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001238:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800123c:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001244:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800124e:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001250:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	105a      	asrs	r2, r3, #1
 8001258:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <FusionAhrsUpdate+0x918>)
 800125a:	1a9b      	subs	r3, r3, r2
 800125c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001260:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001262:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800126c:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 800126e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001272:	ed93 7a00 	vldr	s14, [r3]
 8001276:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001282:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001292:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001296:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012a6:	edc3 7a00 	vstr	s15, [r3]
    return y;
 80012aa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012ae:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80012b0:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012ba:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80012be:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012c4:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80012ce:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 80012d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012d4:	ed93 7a00 	vldr	s14, [r3]
 80012d8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012e8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80012ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80012f4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001300:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001304:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001308:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800130c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001310:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001320:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001324:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001328:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800132c:	ca07      	ldmia	r2, {r0, r1, r2}
 800132e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001332:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001336:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800133a:	ca07      	ldmia	r2, {r0, r1, r2}
 800133c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001340:	bf00      	nop
 8001342:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8001346:	461c      	mov	r4, r3
 8001348:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800134c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001354:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001358:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 800135c:	ca07      	ldmia	r2, {r0, r1, r2}
 800135e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001362:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001366:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800136a:	ca07      	ldmia	r2, {r0, r1, r2}
 800136c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001370:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001374:	ed93 7a01 	vldr	s14, [r3, #4]
 8001378:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800137c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001380:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001384:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001388:	edd3 6a02 	vldr	s13, [r3, #8]
 800138c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001390:	edd3 7a01 	vldr	s15, [r3, #4]
 8001394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013a0:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 80013a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80013ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013bc:	edd3 6a00 	vldr	s13, [r3]
 80013c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80013c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013d4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80013d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013dc:	ed93 7a00 	vldr	s14, [r3]
 80013e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80013f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001404:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001408:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800140c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001410:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001414:	ca07      	ldmia	r2, {r0, r1, r2}
 8001416:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800141a:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800141e:	461c      	mov	r4, r3
 8001420:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001424:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800142c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001430:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8001434:	ca07      	ldmia	r2, {r0, r1, r2}
 8001436:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800143a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800143e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8001442:	ca07      	ldmia	r2, {r0, r1, r2}
 8001444:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001448:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001460:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001464:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001468:	ed93 7a01 	vldr	s14, [r3, #4]
 800146c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001470:	edd3 7a01 	vldr	s15, [r3, #4]
 8001474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001478:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800147c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001480:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001484:	ed93 7a02 	vldr	s14, [r3, #8]
 8001488:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800148c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001494:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001498:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800149c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80014a0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80014a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014aa:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80014ae:	461c      	mov	r4, r3
 80014b0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80014b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014bc:	e005      	b.n	80014ca <FusionAhrsUpdate+0x922>
 80014be:	bf00      	nop
 80014c0:	5f3759df 	.word	0x5f3759df
 80014c4:	3c8efa35 	.word	0x3c8efa35
            break;
 80014c8:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 80014ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d105      	bne.n	80014ea <FusionAhrsUpdate+0x942>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 80014de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 80014ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f207 4224 	addw	r2, r7, #1060	; 0x424
 80014f6:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 80014f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	dd24      	ble.n	8001560 <FusionAhrsUpdate+0x9b8>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800152e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800153c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001540:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 8001552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800155e:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 8001560:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 80014c4 <FusionAhrsUpdate+0x91c>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 8001564:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001570:	f107 0220 	add.w	r2, r7, #32
 8001574:	ca07      	ldmia	r2, {r0, r1, r2}
 8001576:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800157a:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 800157e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001582:	ed93 7a00 	vldr	s14, [r3]
 8001586:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800158a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001592:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001596:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800159a:	ed93 7a01 	vldr	s14, [r3, #4]
 800159e:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 80015a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a6:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80015aa:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80015ae:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80015b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80015b6:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 80015ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015be:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80015c2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80015c6:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 80015ca:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80015ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80015d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015d4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80015d8:	461c      	mov	r4, r3
 80015da:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80015de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015e6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80015ea:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80015ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80015f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015f4:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 80015fe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001612:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001616:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800161a:	ed93 7a01 	vldr	s14, [r3, #4]
 800161e:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001626:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800162a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800162e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001632:	ed93 7a02 	vldr	s14, [r3, #8]
 8001636:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 800163a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001642:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001646:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800164a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800164e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001650:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001654:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001658:	461c      	mov	r4, r3
 800165a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800165e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001666:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800166a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800166e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001670:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001674:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001678:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 800167c:	ca07      	ldmia	r2, {r0, r1, r2}
 800167e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001682:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001686:	ed93 7a00 	vldr	s14, [r3]
 800168a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800169a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 800169e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80016a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80016a6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80016aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80016b6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80016ba:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80016be:	ed93 7a02 	vldr	s14, [r3, #8]
 80016c2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80016c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ce:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80016d2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80016d6:	f507 7210 	add.w	r2, r7, #576	; 0x240
 80016da:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80016de:	ca07      	ldmia	r2, {r0, r1, r2}
 80016e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016e4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80016e8:	461c      	mov	r4, r3
 80016ea:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80016ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016f6:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80016fa:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80016fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001700:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 800170c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001710:	ed93 7a00 	vldr	s14, [r3]
 8001714:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001720:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001724:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001728:	ed93 7a01 	vldr	s14, [r3, #4]
 800172c:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001734:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001738:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800173c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001740:	ed93 7a02 	vldr	s14, [r3, #8]
 8001744:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001750:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001754:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001758:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800175c:	ca07      	ldmia	r2, {r0, r1, r2}
 800175e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001762:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001766:	461c      	mov	r4, r3
 8001768:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800176c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001774:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4614      	mov	r4, r2
 8001780:	330c      	adds	r3, #12
 8001782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001788:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800178c:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8001790:	ca07      	ldmia	r2, {r0, r1, r2}
 8001792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001796:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800179a:	edd3 7a01 	vldr	s15, [r3, #4]
 800179e:	eeb1 7a67 	vneg.f32	s14, s15
 80017a2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ae:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80017b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80017b6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80017ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80017be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80017ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80017ce:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80017d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80017d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017de:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80017e2:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 80017e6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80017ea:	ed93 7a00 	vldr	s14, [r3]
 80017ee:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017fa:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80017fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8001802:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001806:	edd3 7a02 	vldr	s15, [r3, #8]
 800180a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001812:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001816:	edd3 6a03 	vldr	s13, [r3, #12]
 800181a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800181e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800182e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8001832:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001836:	ed93 7a00 	vldr	s14, [r3]
 800183a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800183e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001846:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800184a:	edd3 6a01 	vldr	s13, [r3, #4]
 800184e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001852:	edd3 7a02 	vldr	s15, [r3, #8]
 8001856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800185a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001862:	edd3 6a03 	vldr	s13, [r3, #12]
 8001866:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001876:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800187a:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 800187e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001882:	ed93 7a00 	vldr	s14, [r3]
 8001886:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800188a:	edd3 7a02 	vldr	s15, [r3, #8]
 800188e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001892:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001896:	edd3 6a01 	vldr	s13, [r3, #4]
 800189a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800189e:	edd3 7a01 	vldr	s15, [r3, #4]
 80018a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018aa:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80018ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80018b2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80018c6:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 80018ca:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80018ce:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 80018d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018d8:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80018dc:	461c      	mov	r4, r3
 80018de:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80018e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018e8:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4614      	mov	r4, r2
 80018f4:	330c      	adds	r3, #12
 80018f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018fc:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8001900:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001904:	4614      	mov	r4, r2
 8001906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 800190c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001910:	ed93 7a00 	vldr	s14, [r3]
 8001914:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001920:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001924:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001928:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800192c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001930:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001934:	edd3 7a01 	vldr	s15, [r3, #4]
 8001938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001940:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001944:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001948:	ed93 7a02 	vldr	s14, [r3, #8]
 800194c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001950:	edd3 7a02 	vldr	s15, [r3, #8]
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001958:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800195c:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001960:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001964:	ed93 7a03 	vldr	s14, [r3, #12]
 8001968:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800196c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001974:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001978:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 800197c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001980:	f507 7466 	add.w	r4, r7, #920	; 0x398
 8001984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800198a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800198e:	461c      	mov	r4, r3
 8001990:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001994:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 800199a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 80019a4:	f103 040c 	add.w	r4, r3, #12
 80019a8:	4613      	mov	r3, r2
 80019aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019b0:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 80019b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4614      	mov	r4, r2
 80019bc:	330c      	adds	r3, #12
 80019be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 80019c4:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019c8:	ed93 7a00 	vldr	s14, [r3]
 80019cc:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80019e0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019f0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80019f8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a08:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001a0c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a10:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001a14:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a20:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 8001a24:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8001a28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a30:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 8001a34:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a38:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8001a3c:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001a3e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001a48:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001a4a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	105a      	asrs	r2, r3, #1
 8001a52:	4b98      	ldr	r3, [pc, #608]	; (8001cb4 <FusionAhrsUpdate+0x110c>)
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8001a5a:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001a5c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a66:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001a68:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a6c:	ed93 7a00 	vldr	s14, [r3]
 8001a70:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8001a74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a84:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001a88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a8c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001aa0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001aa4:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001aa6:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8001aaa:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aba:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001abe:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8001ac2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001ac6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001aca:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001ad6:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8001ada:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001ade:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ae2:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aea:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001aee:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8001af2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001af6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001afa:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b02:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001b06:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 8001b0a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001b0e:	f507 7462 	add.w	r4, r7, #904	; 0x388
 8001b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b18:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001b1c:	461c      	mov	r4, r3
 8001b1e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 8001b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8001b32:	f103 040c 	add.w	r4, r3, #12
 8001b36:	4613      	mov	r3, r2
 8001b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 8001b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b72:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001b76:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001b7a:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001bb6:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001bba:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 8001bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bda:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	edd3 6a06 	vldr	s13, [r3, #24]
 8001be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	edd3 7a06 	vldr	s15, [r3, #24]
 8001bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001bfe:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001c02:	edc3 7a02 	vstr	s15, [r3, #8]
 8001c06:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001c0a:	f107 0214 	add.w	r2, r7, #20
 8001c0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c14:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c18:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8001c1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8001c22:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001c26:	ed93 7a00 	vldr	s14, [r3]
 8001c2a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c36:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8001c3e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001c42:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c46:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c52:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001c56:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8001c5a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001c5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c62:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c66:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001c72:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001c76:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001c7a:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001c7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c84:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c88:	461c      	mov	r4, r3
 8001c8a:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001c8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 8001c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001ca0:	331c      	adds	r3, #28
 8001ca2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ca4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 8001ca8:	bf00      	nop
 8001caa:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc90      	pop	{r4, r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	5f3759df 	.word	0x5f3759df

08001cb8 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 8001cb8:	b490      	push	{r4, r7}
 8001cba:	b096      	sub	sp, #88	; 0x58
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6178      	str	r0, [r7, #20]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001cc6:	330c      	adds	r3, #12
 8001cc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 8001cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd0:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 8001cd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cd6:	eef1 7a67 	vneg.f32	s15, s15
 8001cda:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 8001cde:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ce2:	eef1 7a67 	vneg.f32	s15, s15
 8001ce6:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 8001cea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001cee:	eef1 7a67 	vneg.f32	s15, s15
 8001cf2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 8001cf6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001cfa:	f107 0318 	add.w	r3, r7, #24
 8001cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d04:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001d08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 8001d12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001d14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1a:	ee06 0a10 	vmov	s12, r0
 8001d1e:	ee06 1a90 	vmov	s13, r1
 8001d22:	ee07 2a10 	vmov	s14, r2
 8001d26:	ee07 3a90 	vmov	s15, r3
}
 8001d2a:	eeb0 0a46 	vmov.f32	s0, s12
 8001d2e:	eef0 0a66 	vmov.f32	s1, s13
 8001d32:	eeb0 1a47 	vmov.f32	s2, s14
 8001d36:	eef0 1a67 	vmov.f32	s3, s15
 8001d3a:	3758      	adds	r7, #88	; 0x58
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc90      	pop	{r4, r7}
 8001d40:	4770      	bx	lr
 8001d42:	0000      	movs	r0, r0
 8001d44:	0000      	movs	r0, r0
	...

08001d48 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d54:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fcbb 	bl	80006e4 <__aeabi_f2d>
 8001d6e:	a312      	add	r3, pc, #72	; (adr r3, 8001db8 <FusionBiasInitialise+0x70>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fa28 	bl	80001c8 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe fd08 	bl	8000794 <__aeabi_d2f>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	f3af 8000 	nop.w
 8001db8:	8c0eff43 	.word	0x8c0eff43
 8001dbc:	3fc015bf 	.word	0x3fc015bf

08001dc0 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 8001dc0:	b490      	push	{r4, r7}
 8001dc2:	b0b4      	sub	sp, #208	; 0xd0
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	61f8      	str	r0, [r7, #28]
 8001dc8:	eef0 6a40 	vmov.f32	s13, s0
 8001dcc:	eeb0 7a60 	vmov.f32	s14, s1
 8001dd0:	eef0 7a41 	vmov.f32	s15, s2
 8001dd4:	edc7 6a04 	vstr	s13, [r7, #16]
 8001dd8:	ed87 7a05 	vstr	s14, [r7, #20]
 8001ddc:	edc7 7a06 	vstr	s15, [r7, #24]
 8001de0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001de4:	f107 0210 	add.w	r2, r7, #16
 8001de8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001df4:	3210      	adds	r2, #16
 8001df6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001df8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8001dfc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001e00:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8001e0c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001e10:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e18:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8001e1c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001e20:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e28:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 8001e2c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001e30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e42:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e44:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8001e48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e4c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	dc17      	bgt.n	8001e90 <FusionBiasUpdate+0xd0>
 8001e60:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e64:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	dc0b      	bgt.n	8001e90 <FusionBiasUpdate+0xd0>
 8001e78:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e7c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8e:	dd0b      	ble.n	8001ea8 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8001e98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e9c:	f107 0210 	add.w	r2, r7, #16
 8001ea0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ea2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ea6:	e08f      	b.n	8001fc8 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eae:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eba:	d512      	bpl.n	8001ee2 <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 8001ed2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ed6:	f107 0210 	add.w	r2, r7, #16
 8001eda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001edc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ee0:	e072      	b.n	8001fc8 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	689c      	ldr	r4, [r3, #8]
 8001ee6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001eea:	f107 0210 	add.w	r2, r7, #16
 8001eee:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ef0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ef4:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 8001ef8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001efc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f04:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 8001f08:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001f0c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f14:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 8001f18:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001f1c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f24:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 8001f28:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f2c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001f30:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f3a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f4a:	3210      	adds	r2, #16
 8001f4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f56:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001f5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001f60:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001f64:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001f70:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001f74:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001f80:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001f84:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 8001f90:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f98:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fa2:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001fa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fa8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	3310      	adds	r3, #16
 8001fb0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001fb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 8001fba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001fbe:	f107 0210 	add.w	r2, r7, #16
 8001fc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fc8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001fcc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fd4:	ee06 1a90 	vmov	s13, r1
 8001fd8:	ee07 2a10 	vmov	s14, r2
 8001fdc:	ee07 3a90 	vmov	s15, r3
}
 8001fe0:	eeb0 0a66 	vmov.f32	s0, s13
 8001fe4:	eef0 0a47 	vmov.f32	s1, s14
 8001fe8:	eeb0 1a67 	vmov.f32	s2, s15
 8001fec:	37d0      	adds	r7, #208	; 0xd0
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc90      	pop	{r4, r7}
 8001ff2:	4770      	bx	lr

08001ff4 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8001ff8:	bf00      	nop
 8001ffa:	f000 f9d1 	bl	80023a0 <icm20948_who_am_i>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f083 0301 	eor.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f7      	bne.n	8001ffa <icm20948_init+0x6>

	icm20948_device_reset();
 800200a:	f000 f9ee 	bl	80023ea <icm20948_device_reset>
	icm20948_wakeup();
 800200e:	f000 fa03 	bl	8002418 <icm20948_wakeup>

	icm20948_clock_source(1);
 8002012:	2001      	movs	r0, #1
 8002014:	f000 fa7b 	bl	800250e <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002018:	f000 fa92 	bl	8002540 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 800201c:	f000 fa16 	bl	800244c <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8002020:	2000      	movs	r0, #0
 8002022:	f000 fa96 	bl	8002552 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002026:	2000      	movs	r0, #0
 8002028:	f000 fab0 	bl	800258c <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 800202c:	2000      	movs	r0, #0
 800202e:	f000 faca 	bl	80025c6 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002032:	2000      	movs	r0, #0
 8002034:	f000 fad6 	bl	80025e4 <icm20948_accel_sample_rate_divider>

	//icm20948_gyro_calibration();
	//icm20948_accel_calibration();

	icm20948_gyro_full_scale_select(_2000dps);
 8002038:	2003      	movs	r0, #3
 800203a:	f000 fb03 	bl	8002644 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 800203e:	2003      	movs	r0, #3
 8002040:	f000 fb4a 	bl	80026d8 <icm20948_accel_full_scale_select>
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <ak09916_init>:

void ak09916_init()
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 800204c:	f000 fa15 	bl	800247a <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8002050:	f000 fa2a 	bl	80024a8 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8002054:	2007      	movs	r0, #7
 8002056:	f000 fa41 	bl	80024dc <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 800205a:	bf00      	nop
 800205c:	f000 f9b3 	bl	80023c6 <ak09916_who_am_i>
 8002060:	4603      	mov	r3, r0
 8002062:	f083 0301 	eor.w	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f7      	bne.n	800205c <ak09916_init+0x14>

	ak09916_soft_reset();
 800206c:	f000 f9c9 	bl	8002402 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8002070:	2008      	movs	r0, #8
 8002072:	f000 fad5 	bl	8002620 <ak09916_operation_mode_setting>
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}

0800207a <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8002082:	2206      	movs	r2, #6
 8002084:	2133      	movs	r1, #51	; 0x33
 8002086:	2000      	movs	r0, #0
 8002088:	f000 fbee 	bl	8002868 <read_multiple_icm20948_reg>
 800208c:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	b21a      	sxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3301      	adds	r3, #1
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b21b      	sxth	r3, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3302      	adds	r3, #2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3303      	adds	r3, #3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	4313      	orrs	r3, r2
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3304      	adds	r3, #4
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	b21a      	sxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3305      	adds	r3, #5
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8002108:	2206      	movs	r2, #6
 800210a:	212d      	movs	r1, #45	; 0x2d
 800210c:	2000      	movs	r0, #0
 800210e:	f000 fbab 	bl	8002868 <read_multiple_icm20948_reg>
 8002112:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | (temp[1]));
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21a      	sxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3301      	adds	r3, #1
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b21b      	sxth	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b21b      	sxth	r3, r3
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | (temp[3]));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3302      	adds	r3, #2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	b21a      	sxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3303      	adds	r3, #3
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b21b      	sxth	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b21b      	sxth	r3, r3
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | (temp[5]));
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3304      	adds	r3, #4
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21a      	sxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3305      	adds	r3, #5
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b21b      	sxth	r3, r3
 800216c:	4313      	orrs	r3, r2
 800216e:	b21b      	sxth	r3, r3
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add scale factor because calibraiton function offset gravity acceleration.
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 800218e:	2010      	movs	r0, #16
 8002190:	f000 fb9a 	bl	80028c8 <read_single_ak09916_reg>
 8002194:	4603      	mov	r3, r0
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <ak09916_mag_read+0x20>
 80021a2:	2300      	movs	r3, #0
 80021a4:	e046      	b.n	8002234 <ak09916_mag_read+0xae>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 80021a6:	2106      	movs	r1, #6
 80021a8:	2011      	movs	r0, #17
 80021aa:	f000 fbd0 	bl	800294e <read_multiple_ak09916_reg>
 80021ae:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 80021b0:	2018      	movs	r0, #24
 80021b2:	f000 fb89 	bl	80028c8 <read_single_ak09916_reg>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <ak09916_mag_read+0x42>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e035      	b.n	8002234 <ak09916_mag_read+0xae>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	3301      	adds	r3, #1
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21b      	sxth	r3, r3
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	3303      	adds	r3, #3
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	3302      	adds	r3, #2
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b21b      	sxth	r3, r3
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	3305      	adds	r3, #5
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	b21a      	sxth	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	3304      	adds	r3, #4
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b21b      	sxth	r3, r3
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	edc3 7a02 	vstr	s15, [r3, #8]

	return true;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <icm20948_gyro_read_dps>:

void icm20948_gyro_read_dps(axises* data)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff18 	bl	800207a <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	edd3 6a00 	vldr	s13, [r3]
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <icm20948_gyro_read_dps+0x58>)
 8002252:	ed93 7a00 	vldr	s14, [r3]
 8002256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	edc3 7a00 	vstr	s15, [r3]
	data->y /= gyro_scale_factor;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edd3 6a01 	vldr	s13, [r3, #4]
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <icm20948_gyro_read_dps+0x58>)
 8002268:	ed93 7a00 	vldr	s14, [r3]
 800226c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= gyro_scale_factor;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	edd3 6a02 	vldr	s13, [r3, #8]
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <icm20948_gyro_read_dps+0x58>)
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000090 	.word	0x20000090

08002298 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises* data)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	icm20948_accel_read(data);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff2d 	bl	8002100 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	edd3 6a00 	vldr	s13, [r3]
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <icm20948_accel_read_g+0x58>)
 80022ae:	ed93 7a00 	vldr	s14, [r3]
 80022b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	edc3 7a00 	vstr	s15, [r3]
	data->y /= accel_scale_factor;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	edd3 6a01 	vldr	s13, [r3, #4]
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <icm20948_accel_read_g+0x58>)
 80022c4:	ed93 7a00 	vldr	s14, [r3]
 80022c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= accel_scale_factor;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <icm20948_accel_read_g+0x58>)
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000094 	.word	0x20000094
 80022f4:	00000000 	.word	0x00000000

080022f8 <ak09916_mag_read_uT>:

bool ak09916_mag_read_uT(axises* data)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	axises temp;
	bool new_data = ak09916_mag_read(&temp);
 8002300:	f107 0308 	add.w	r3, r7, #8
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff3e 	bl	8002186 <ak09916_mag_read>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
	if(!new_data)	return false;
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	f083 0301 	eor.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <ak09916_mag_read_uT+0x26>
 800231a:	2300      	movs	r3, #0
 800231c:	e036      	b.n	800238c <ak09916_mag_read_uT+0x94>

	data->x = (float)(temp.x * 0.15);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f9df 	bl	80006e4 <__aeabi_f2d>
 8002326:	a31c      	add	r3, pc, #112	; (adr r3, 8002398 <ak09916_mag_read_uT+0xa0>)
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	f7fd ff4c 	bl	80001c8 <__aeabi_dmul>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f7fe fa2c 	bl	8000794 <__aeabi_d2f>
 800233c:	4602      	mov	r2, r0
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	601a      	str	r2, [r3, #0]
	data->y = (float)(temp.y * 0.15);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f9cd 	bl	80006e4 <__aeabi_f2d>
 800234a:	a313      	add	r3, pc, #76	; (adr r3, 8002398 <ak09916_mag_read_uT+0xa0>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fd ff3a 	bl	80001c8 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fa1a 	bl	8000794 <__aeabi_d2f>
 8002360:	4602      	mov	r2, r0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	605a      	str	r2, [r3, #4]
	data->z = (float)(temp.z * 0.15);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f9bb 	bl	80006e4 <__aeabi_f2d>
 800236e:	a30a      	add	r3, pc, #40	; (adr r3, 8002398 <ak09916_mag_read_uT+0xa0>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fd ff28 	bl	80001c8 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f7fe fa08 	bl	8000794 <__aeabi_d2f>
 8002384:	4602      	mov	r2, r0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	609a      	str	r2, [r3, #8]

	return true;
 800238a:	2301      	movs	r3, #1
}	
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	f3af 8000 	nop.w
 8002398:	33333333 	.word	0x33333333
 800239c:	3fc33333 	.word	0x3fc33333

080023a0 <icm20948_who_am_i>:


/* Sub Functions */
bool icm20948_who_am_i()
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 80023a6:	2100      	movs	r1, #0
 80023a8:	2000      	movs	r0, #0
 80023aa:	f000 fa0d 	bl	80027c8 <read_single_icm20948_reg>
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	2bea      	cmp	r3, #234	; 0xea
 80023b6:	d101      	bne.n	80023bc <icm20948_who_am_i+0x1c>
		return true;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <icm20948_who_am_i+0x1e>
	else
		return false;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f000 fa7b 	bl	80028c8 <read_single_ak09916_reg>
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b09      	cmp	r3, #9
 80023da:	d101      	bne.n	80023e0 <ak09916_who_am_i+0x1a>
		return true;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <ak09916_who_am_i+0x1c>
	else
		return false;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <icm20948_device_reset>:

void icm20948_device_reset()
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 80023ee:	22c1      	movs	r2, #193	; 0xc1
 80023f0:	2106      	movs	r1, #6
 80023f2:	2000      	movs	r0, #0
 80023f4:	f000 fa14 	bl	8002820 <write_single_icm20948_reg>
	HAL_Delay(100);
 80023f8:	2064      	movs	r0, #100	; 0x64
 80023fa:	f002 f97f 	bl	80046fc <HAL_Delay>
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}

08002402 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8002406:	2101      	movs	r1, #1
 8002408:	2032      	movs	r0, #50	; 0x32
 800240a:	f000 fa7e 	bl	800290a <write_single_ak09916_reg>
	HAL_Delay(100);
 800240e:	2064      	movs	r0, #100	; 0x64
 8002410:	f002 f974 	bl	80046fc <HAL_Delay>
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800241e:	2106      	movs	r1, #6
 8002420:	2000      	movs	r0, #0
 8002422:	f000 f9d1 	bl	80027c8 <read_single_icm20948_reg>
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002430:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	461a      	mov	r2, r3
 8002436:	2106      	movs	r1, #6
 8002438:	2000      	movs	r0, #0
 800243a:	f000 f9f1 	bl	8002820 <write_single_icm20948_reg>
	HAL_Delay(100);
 800243e:	2064      	movs	r0, #100	; 0x64
 8002440:	f002 f95c 	bl	80046fc <HAL_Delay>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002452:	2103      	movs	r1, #3
 8002454:	2000      	movs	r0, #0
 8002456:	f000 f9b7 	bl	80027c8 <read_single_icm20948_reg>
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f043 0310 	orr.w	r3, r3, #16
 8002464:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	461a      	mov	r2, r3
 800246a:	2103      	movs	r1, #3
 800246c:	2000      	movs	r0, #0
 800246e:	f000 f9d7 	bl	8002820 <write_single_icm20948_reg>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002480:	2103      	movs	r1, #3
 8002482:	2000      	movs	r0, #0
 8002484:	f000 f9a0 	bl	80027c8 <read_single_icm20948_reg>
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f043 0302 	orr.w	r3, r3, #2
 8002492:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	461a      	mov	r2, r3
 8002498:	2103      	movs	r1, #3
 800249a:	2000      	movs	r0, #0
 800249c:	f000 f9c0 	bl	8002820 <write_single_icm20948_reg>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80024ae:	2103      	movs	r1, #3
 80024b0:	2000      	movs	r0, #0
 80024b2:	f000 f989 	bl	80027c8 <read_single_icm20948_reg>
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	f043 0320 	orr.w	r3, r3, #32
 80024c0:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	461a      	mov	r2, r3
 80024c6:	2103      	movs	r1, #3
 80024c8:	2000      	movs	r0, #0
 80024ca:	f000 f9a9 	bl	8002820 <write_single_icm20948_reg>
	HAL_Delay(100);
 80024ce:	2064      	movs	r0, #100	; 0x64
 80024d0:	f002 f914 	bl	80046fc <HAL_Delay>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 80024e6:	2101      	movs	r1, #1
 80024e8:	2030      	movs	r0, #48	; 0x30
 80024ea:	f000 f96d 	bl	80027c8 <read_single_icm20948_reg>
 80024ee:	4603      	mov	r3, r0
 80024f0:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	461a      	mov	r2, r3
 80024fe:	2101      	movs	r1, #1
 8002500:	2030      	movs	r0, #48	; 0x30
 8002502:	f000 f98d 	bl	8002820 <write_single_icm20948_reg>
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002518:	2106      	movs	r1, #6
 800251a:	2000      	movs	r0, #0
 800251c:	f000 f954 	bl	80027c8 <read_single_icm20948_reg>
 8002520:	4603      	mov	r3, r0
 8002522:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4313      	orrs	r3, r2
 800252a:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	461a      	mov	r2, r3
 8002530:	2106      	movs	r1, #6
 8002532:	2000      	movs	r0, #0
 8002534:	f000 f974 	bl	8002820 <write_single_icm20948_reg>
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8002544:	2201      	movs	r2, #1
 8002546:	2109      	movs	r1, #9
 8002548:	2020      	movs	r0, #32
 800254a:	f000 f969 	bl	8002820 <write_single_icm20948_reg>
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}

08002552 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800255c:	2101      	movs	r1, #1
 800255e:	2020      	movs	r0, #32
 8002560:	f000 f932 	bl	80027c8 <read_single_icm20948_reg>
 8002564:	4603      	mov	r3, r0
 8002566:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	b25a      	sxtb	r2, r3
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	4313      	orrs	r3, r2
 8002574:	b25b      	sxtb	r3, r3
 8002576:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	461a      	mov	r2, r3
 800257c:	2101      	movs	r1, #1
 800257e:	2020      	movs	r0, #32
 8002580:	f000 f94e 	bl	8002820 <write_single_icm20948_reg>
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002596:	2114      	movs	r1, #20
 8002598:	2020      	movs	r0, #32
 800259a:	f000 f915 	bl	80027c8 <read_single_icm20948_reg>
 800259e:	4603      	mov	r3, r0
 80025a0:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	b25a      	sxtb	r2, r3
 80025a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	461a      	mov	r2, r3
 80025b6:	2101      	movs	r1, #1
 80025b8:	2020      	movs	r0, #32
 80025ba:	f000 f931 	bl	8002820 <write_single_icm20948_reg>
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	461a      	mov	r2, r3
 80025d4:	2100      	movs	r1, #0
 80025d6:	2020      	movs	r0, #32
 80025d8:	f000 f922 	bl	8002820 <write_single_icm20948_reg>
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	461a      	mov	r2, r3
 8002604:	2110      	movs	r1, #16
 8002606:	2020      	movs	r0, #32
 8002608:	f000 f90a 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 800260c:	7bbb      	ldrb	r3, [r7, #14]
 800260e:	461a      	mov	r2, r3
 8002610:	2111      	movs	r1, #17
 8002612:	2020      	movs	r0, #32
 8002614:	f000 f904 	bl	8002820 <write_single_icm20948_reg>
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	4619      	mov	r1, r3
 800262e:	2031      	movs	r0, #49	; 0x31
 8002630:	f000 f96b 	bl	800290a <write_single_ak09916_reg>
	HAL_Delay(100);
 8002634:	2064      	movs	r0, #100	; 0x64
 8002636:	f002 f861 	bl	80046fc <HAL_Delay>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <icm20948_gyro_full_scale_select>:
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
}

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800264e:	2101      	movs	r1, #1
 8002650:	2020      	movs	r0, #32
 8002652:	f000 f8b9 	bl	80027c8 <read_single_icm20948_reg>
 8002656:	4603      	mov	r3, r0
 8002658:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d827      	bhi.n	80026b0 <icm20948_gyro_full_scale_select+0x6c>
 8002660:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <icm20948_gyro_full_scale_select+0x24>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	08002679 	.word	0x08002679
 800266c:	08002681 	.word	0x08002681
 8002670:	08002691 	.word	0x08002691
 8002674:	080026a1 	.word	0x080026a1
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <icm20948_gyro_full_scale_select+0x80>)
 800267a:	4a13      	ldr	r2, [pc, #76]	; (80026c8 <icm20948_gyro_full_scale_select+0x84>)
 800267c:	601a      	str	r2, [r3, #0]
			break;
 800267e:	e017      	b.n	80026b0 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <icm20948_gyro_full_scale_select+0x80>)
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <icm20948_gyro_full_scale_select+0x88>)
 800268c:	601a      	str	r2, [r3, #0]
			break;
 800268e:	e00f      	b.n	80026b0 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <icm20948_gyro_full_scale_select+0x80>)
 800269a:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <icm20948_gyro_full_scale_select+0x8c>)
 800269c:	601a      	str	r2, [r3, #0]
			break;
 800269e:	e007      	b.n	80026b0 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	f043 0306 	orr.w	r3, r3, #6
 80026a6:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <icm20948_gyro_full_scale_select+0x80>)
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <icm20948_gyro_full_scale_select+0x90>)
 80026ac:	601a      	str	r2, [r3, #0]
			break;
 80026ae:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	461a      	mov	r2, r3
 80026b4:	2101      	movs	r1, #1
 80026b6:	2020      	movs	r0, #32
 80026b8:	f000 f8b2 	bl	8002820 <write_single_icm20948_reg>
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000090 	.word	0x20000090
 80026c8:	43030000 	.word	0x43030000
 80026cc:	42830000 	.word	0x42830000
 80026d0:	42033333 	.word	0x42033333
 80026d4:	41833333 	.word	0x41833333

080026d8 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80026e2:	2114      	movs	r1, #20
 80026e4:	2020      	movs	r0, #32
 80026e6:	f000 f86f 	bl	80027c8 <read_single_icm20948_reg>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d82b      	bhi.n	800274c <icm20948_accel_full_scale_select+0x74>
 80026f4:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <icm20948_accel_full_scale_select+0x24>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	08002717 	.word	0x08002717
 8002704:	08002729 	.word	0x08002729
 8002708:	0800273b 	.word	0x0800273b
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <icm20948_accel_full_scale_select+0x88>)
 800270e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8002712:	601a      	str	r2, [r3, #0]
			break;
 8002714:	e01a      	b.n	800274c <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <icm20948_accel_full_scale_select+0x88>)
 8002720:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002724:	601a      	str	r2, [r3, #0]
			break;
 8002726:	e011      	b.n	800274c <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <icm20948_accel_full_scale_select+0x88>)
 8002732:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002736:	601a      	str	r2, [r3, #0]
			break;
 8002738:	e008      	b.n	800274c <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	f043 0306 	orr.w	r3, r3, #6
 8002740:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <icm20948_accel_full_scale_select+0x88>)
 8002744:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002748:	601a      	str	r2, [r3, #0]
			break;
 800274a:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	461a      	mov	r2, r3
 8002750:	2114      	movs	r1, #20
 8002752:	2020      	movs	r0, #32
 8002754:	f000 f864 	bl	8002820 <write_single_icm20948_reg>
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000094 	.word	0x20000094

08002764 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8002768:	2201      	movs	r2, #1
 800276a:	2104      	movs	r1, #4
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <cs_high+0x14>)
 800276e:	f003 f8fb 	bl	8005968 <HAL_GPIO_WritePin>
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000

0800277c <cs_low>:

static void cs_low()
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	2104      	movs	r1, #4
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <cs_low+0x14>)
 8002786:	f003 f8ef 	bl	8005968 <HAL_GPIO_WritePin>
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000

08002794 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 800279e:	237f      	movs	r3, #127	; 0x7f
 80027a0:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	737b      	strb	r3, [r7, #13]

	cs_low();
 80027a6:	f7ff ffe9 	bl	800277c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80027aa:	f107 010c 	add.w	r1, r7, #12
 80027ae:	230a      	movs	r3, #10
 80027b0:	2202      	movs	r2, #2
 80027b2:	4804      	ldr	r0, [pc, #16]	; (80027c4 <select_user_bank+0x30>)
 80027b4:	f003 fdef 	bl	8006396 <HAL_SPI_Transmit>
	cs_high();
 80027b8:	f7ff ffd4 	bl	8002764 <cs_high>
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000208 	.word	0x20000208

080027c8 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	460a      	mov	r2, r1
 80027d2:	71fb      	strb	r3, [r7, #7]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 80027d8:	79bb      	ldrb	r3, [r7, #6]
 80027da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ffd5 	bl	8002794 <select_user_bank>

	cs_low();
 80027ea:	f7ff ffc7 	bl	800277c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80027ee:	f107 010f 	add.w	r1, r7, #15
 80027f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f6:	2201      	movs	r2, #1
 80027f8:	4808      	ldr	r0, [pc, #32]	; (800281c <read_single_icm20948_reg+0x54>)
 80027fa:	f003 fdcc 	bl	8006396 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80027fe:	f107 010e 	add.w	r1, r7, #14
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	2201      	movs	r2, #1
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <read_single_icm20948_reg+0x54>)
 800280a:	f003 ff00 	bl	800660e <HAL_SPI_Receive>
	cs_high();
 800280e:	f7ff ffa9 	bl	8002764 <cs_high>

	return reg_val;
 8002812:	7bbb      	ldrb	r3, [r7, #14]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000208 	.word	0x20000208

08002820 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
 800282a:	460b      	mov	r3, r1
 800282c:	71bb      	strb	r3, [r7, #6]
 800282e:	4613      	mov	r3, r2
 8002830:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8002832:	79bb      	ldrb	r3, [r7, #6]
 8002834:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8002836:	797b      	ldrb	r3, [r7, #5]
 8002838:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ffa9 	bl	8002794 <select_user_bank>

	cs_low();
 8002842:	f7ff ff9b 	bl	800277c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8002846:	f107 010c 	add.w	r1, r7, #12
 800284a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284e:	2202      	movs	r2, #2
 8002850:	4804      	ldr	r0, [pc, #16]	; (8002864 <write_single_icm20948_reg+0x44>)
 8002852:	f003 fda0 	bl	8006396 <HAL_SPI_Transmit>
	cs_high();
 8002856:	f7ff ff85 	bl	8002764 <cs_high>
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000208 	.word	0x20000208

08002868 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
 8002872:	460b      	mov	r3, r1
 8002874:	71bb      	strb	r3, [r7, #6]
 8002876:	4613      	mov	r3, r2
 8002878:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 800287a:	79bb      	ldrb	r3, [r7, #6]
 800287c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002880:	b2db      	uxtb	r3, r3
 8002882:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff84 	bl	8002794 <select_user_bank>

	cs_low();
 800288c:	f7ff ff76 	bl	800277c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002890:	f107 010f 	add.w	r1, r7, #15
 8002894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002898:	2201      	movs	r2, #1
 800289a:	4809      	ldr	r0, [pc, #36]	; (80028c0 <read_multiple_icm20948_reg+0x58>)
 800289c:	f003 fd7b 	bl	8006396 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80028a0:	797b      	ldrb	r3, [r7, #5]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a8:	4906      	ldr	r1, [pc, #24]	; (80028c4 <read_multiple_icm20948_reg+0x5c>)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <read_multiple_icm20948_reg+0x58>)
 80028ac:	f003 feaf 	bl	800660e <HAL_SPI_Receive>
	cs_high();
 80028b0:	f7ff ff58 	bl	8002764 <cs_high>

	return reg_val;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <read_multiple_icm20948_reg+0x5c>)
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000208 	.word	0x20000208
 80028c4:	20000098 	.word	0x20000098

080028c8 <read_single_ak09916_reg>:
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
	cs_high();
}

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80028d2:	228c      	movs	r2, #140	; 0x8c
 80028d4:	2103      	movs	r1, #3
 80028d6:	2030      	movs	r0, #48	; 0x30
 80028d8:	f7ff ffa2 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	461a      	mov	r2, r3
 80028e0:	2104      	movs	r1, #4
 80028e2:	2030      	movs	r0, #48	; 0x30
 80028e4:	f7ff ff9c 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80028e8:	2281      	movs	r2, #129	; 0x81
 80028ea:	2105      	movs	r1, #5
 80028ec:	2030      	movs	r0, #48	; 0x30
 80028ee:	f7ff ff97 	bl	8002820 <write_single_icm20948_reg>

	HAL_Delay(1);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f001 ff02 	bl	80046fc <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 80028f8:	213b      	movs	r1, #59	; 0x3b
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7ff ff64 	bl	80027c8 <read_single_icm20948_reg>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	4603      	mov	r3, r0
 8002912:	460a      	mov	r2, r1
 8002914:	71fb      	strb	r3, [r7, #7]
 8002916:	4613      	mov	r3, r2
 8002918:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 800291a:	220c      	movs	r2, #12
 800291c:	2103      	movs	r1, #3
 800291e:	2030      	movs	r0, #48	; 0x30
 8002920:	f7ff ff7e 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	461a      	mov	r2, r3
 8002928:	2104      	movs	r1, #4
 800292a:	2030      	movs	r0, #48	; 0x30
 800292c:	f7ff ff78 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	461a      	mov	r2, r3
 8002934:	2106      	movs	r1, #6
 8002936:	2030      	movs	r0, #48	; 0x30
 8002938:	f7ff ff72 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 800293c:	2281      	movs	r2, #129	; 0x81
 800293e:	2105      	movs	r1, #5
 8002940:	2030      	movs	r0, #48	; 0x30
 8002942:	f7ff ff6d 	bl	8002820 <write_single_icm20948_reg>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	460a      	mov	r2, r1
 8002958:	71fb      	strb	r3, [r7, #7]
 800295a:	4613      	mov	r3, r2
 800295c:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 800295e:	228c      	movs	r2, #140	; 0x8c
 8002960:	2103      	movs	r1, #3
 8002962:	2030      	movs	r0, #48	; 0x30
 8002964:	f7ff ff5c 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	461a      	mov	r2, r3
 800296c:	2104      	movs	r1, #4
 800296e:	2030      	movs	r0, #48	; 0x30
 8002970:	f7ff ff56 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8002974:	79bb      	ldrb	r3, [r7, #6]
 8002976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	2105      	movs	r1, #5
 8002980:	2030      	movs	r0, #48	; 0x30
 8002982:	f7ff ff4d 	bl	8002820 <write_single_icm20948_reg>

	HAL_Delay(1);
 8002986:	2001      	movs	r0, #1
 8002988:	f001 feb8 	bl	80046fc <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	461a      	mov	r2, r3
 8002990:	213b      	movs	r1, #59	; 0x3b
 8002992:	2000      	movs	r0, #0
 8002994:	f7ff ff68 	bl	8002868 <read_multiple_icm20948_reg>
 8002998:	4603      	mov	r3, r0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029aa:	463b      	mov	r3, r7
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029b6:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029b8:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <MX_ADC1_Init+0x9c>)
 80029ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029bc:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029de:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029e6:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <MX_ADC1_Init+0xa0>)
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029ea:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <MX_ADC1_Init+0x98>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a04:	480d      	ldr	r0, [pc, #52]	; (8002a3c <MX_ADC1_Init+0x98>)
 8002a06:	f001 fe9d 	bl	8004744 <HAL_ADC_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002a10:	f001 f8d2 	bl	8003bb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002a14:	2302      	movs	r3, #2
 8002a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a20:	463b      	mov	r3, r7
 8002a22:	4619      	mov	r1, r3
 8002a24:	4805      	ldr	r0, [pc, #20]	; (8002a3c <MX_ADC1_Init+0x98>)
 8002a26:	f001 fed1 	bl	80047cc <HAL_ADC_ConfigChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a30:	f001 f8c2 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200000a0 	.word	0x200000a0
 8002a40:	40012000 	.word	0x40012000
 8002a44:	0f000001 	.word	0x0f000001

08002a48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	; 0x30
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a31      	ldr	r2, [pc, #196]	; (8002b2c <HAL_ADC_MspInit+0xe4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d15b      	bne.n	8002b22 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a2f      	ldr	r2, [pc, #188]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a28      	ldr	r2, [pc, #160]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a21      	ldr	r2, [pc, #132]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_AMP_36V_Pin|ADC_VOLT_BAT_Pin|ADC_VOLT_PWR_ST_Pin;
 8002ada:	230d      	movs	r3, #13
 8002adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4619      	mov	r1, r3
 8002aec:	4811      	ldr	r0, [pc, #68]	; (8002b34 <HAL_ADC_MspInit+0xec>)
 8002aee:	f002 fd9f 	bl	8005630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IK_CENTER_Pin|ADC_IK_BACK_LEFT_Pin|ADC_IK_BACK_RIGHT_Pin|ADC_IK_FRONT_LEFT_Pin
 8002af2:	237c      	movs	r3, #124	; 0x7c
 8002af4:	61fb      	str	r3, [r7, #28]
                          |ADC_IK_FRONT_RIGHT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af6:	2303      	movs	r3, #3
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f107 031c 	add.w	r3, r7, #28
 8002b02:	4619      	mov	r1, r3
 8002b04:	480c      	ldr	r0, [pc, #48]	; (8002b38 <HAL_ADC_MspInit+0xf0>)
 8002b06:	f002 fd93 	bl	8005630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_AMP_5V_Pin|ADC_AMP_12V_Pin;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4807      	ldr	r0, [pc, #28]	; (8002b3c <HAL_ADC_MspInit+0xf4>)
 8002b1e:	f002 fd87 	bl	8005630 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002b22:	bf00      	nop
 8002b24:	3730      	adds	r7, #48	; 0x30
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40012000 	.word	0x40012000
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020800 	.word	0x40020800
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40020400 	.word	0x40020400

08002b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <MX_DMA_Init+0x6c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <MX_DMA_Init+0x6c>)
 8002b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <MX_DMA_Init+0x6c>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2100      	movs	r1, #0
 8002b66:	200d      	movs	r0, #13
 8002b68:	f002 f929 	bl	8004dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002b6c:	200d      	movs	r0, #13
 8002b6e:	f002 f942 	bl	8004df6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	200f      	movs	r0, #15
 8002b78:	f002 f921 	bl	8004dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002b7c:	200f      	movs	r0, #15
 8002b7e:	f002 f93a 	bl	8004df6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	2010      	movs	r0, #16
 8002b88:	f002 f919 	bl	8004dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b8c:	2010      	movs	r0, #16
 8002b8e:	f002 f932 	bl	8004df6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	2011      	movs	r0, #17
 8002b98:	f002 f911 	bl	8004dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b9c:	2011      	movs	r0, #17
 8002b9e:	f002 f92a 	bl	8004df6 <HAL_NVIC_EnableIRQ>

}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	f107 031c 	add.w	r3, r7, #28
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	4b48      	ldr	r3, [pc, #288]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a47      	ldr	r2, [pc, #284]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b45      	ldr	r3, [pc, #276]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	4b41      	ldr	r3, [pc, #260]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a40      	ldr	r2, [pc, #256]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a39      	ldr	r2, [pc, #228]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	4b33      	ldr	r3, [pc, #204]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a32      	ldr	r2, [pc, #200]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b30      	ldr	r3, [pc, #192]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	4b2c      	ldr	r3, [pc, #176]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a2b      	ldr	r2, [pc, #172]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b29      	ldr	r3, [pc, #164]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	4b25      	ldr	r3, [pc, #148]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a24      	ldr	r2, [pc, #144]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c5c:	f043 0308 	orr.w	r3, r3, #8
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b22      	ldr	r3, [pc, #136]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2104      	movs	r1, #4
 8002c72:	481f      	ldr	r0, [pc, #124]	; (8002cf0 <MX_GPIO_Init+0x140>)
 8002c74:	f002 fe78 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2130      	movs	r1, #48	; 0x30
 8002c7c:	481d      	ldr	r0, [pc, #116]	; (8002cf4 <MX_GPIO_Init+0x144>)
 8002c7e:	f002 fe73 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8002c82:	2200      	movs	r2, #0
 8002c84:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002c88:	481b      	ldr	r0, [pc, #108]	; (8002cf8 <MX_GPIO_Init+0x148>)
 8002c8a:	f002 fe6d 	bl	8005968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c92:	2301      	movs	r3, #1
 8002c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8002c9e:	f107 031c 	add.w	r3, r7, #28
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4812      	ldr	r0, [pc, #72]	; (8002cf0 <MX_GPIO_Init+0x140>)
 8002ca6:	f002 fcc3 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin;
 8002caa:	2330      	movs	r3, #48	; 0x30
 8002cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cba:	f107 031c 	add.w	r3, r7, #28
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <MX_GPIO_Init+0x144>)
 8002cc2:	f002 fcb5 	bl	8005630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8002cc6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <MX_GPIO_Init+0x148>)
 8002ce0:	f002 fca6 	bl	8005630 <HAL_GPIO_Init>

}
 8002ce4:	bf00      	nop
 8002ce6:	3730      	adds	r7, #48	; 0x30
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40020800 	.word	0x40020800
 8002cf8:	40020c00 	.word	0x40020c00

08002cfc <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	if (UartHandle->Instance == UART4){ // Jetson commutation
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a71      	ldr	r2, [pc, #452]	; (8002ed0 <HAL_UART_RxCpltCallback+0x1d4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d16b      	bne.n	8002de6 <HAL_UART_RxCpltCallback+0xea>
		if (USART1ReceiveState == 0){
 8002d0e:	4b71      	ldr	r3, [pc, #452]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d11f      	bne.n	8002d58 <HAL_UART_RxCpltCallback+0x5c>
			if ((SerialOnBoardRequest.CR != 13) || (SerialOnBoardRequest.LF != 10)){
 8002d18:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002d1a:	7a1b      	ldrb	r3, [r3, #8]
 8002d1c:	2b0d      	cmp	r3, #13
 8002d1e:	d103      	bne.n	8002d28 <HAL_UART_RxCpltCallback+0x2c>
 8002d20:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002d22:	7a5b      	ldrb	r3, [r3, #9]
 8002d24:	2b0a      	cmp	r3, #10
 8002d26:	d00c      	beq.n	8002d42 <HAL_UART_RxCpltCallback+0x46>
				Res = HAL_UART_Receive_DMA(&huart4, LostByte, 1);
 8002d28:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	4619      	mov	r1, r3
 8002d30:	486b      	ldr	r0, [pc, #428]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002d32:	f004 feb3 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002d36:	4603      	mov	r3, r0
 8002d38:	73fb      	strb	r3, [r7, #15]
				USART1ReceiveState = 1;
 8002d3a:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e042      	b.n	8002dc8 <HAL_UART_RxCpltCallback+0xcc>
			}
			else{
 				USART1ReceiveState = 10;
 8002d42:	4b64      	ldr	r3, [pc, #400]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d44:	220a      	movs	r2, #10
 8002d46:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8002d48:	220a      	movs	r2, #10
 8002d4a:	4963      	ldr	r1, [pc, #396]	; (8002ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002d4c:	4864      	ldr	r0, [pc, #400]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002d4e:	f004 fea5 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002d52:	4603      	mov	r3, r0
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	e037      	b.n	8002dc8 <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else{
			if(USART1ReceiveState == 1){
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d111      	bne.n	8002d86 <HAL_UART_RxCpltCallback+0x8a>
				if (LostByte[0] == 13){
 8002d62:	4b5e      	ldr	r3, [pc, #376]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b0d      	cmp	r3, #13
 8002d6a:	d102      	bne.n	8002d72 <HAL_UART_RxCpltCallback+0x76>
					USART1ReceiveState = 2;
 8002d6c:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d6e:	2202      	movs	r2, #2
 8002d70:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)LostByte, 1);
 8002d72:	4b5a      	ldr	r3, [pc, #360]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4859      	ldr	r0, [pc, #356]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002d7c:	f004 fe8e 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002d80:	4603      	mov	r3, r0
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e020      	b.n	8002dc8 <HAL_UART_RxCpltCallback+0xcc>
			}
			else{
				if (USART1ReceiveState == 2){
 8002d86:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_UART_RxCpltCallback+0xcc>
					if (LostByte[0] == 10){
 8002d90:	4b52      	ldr	r3, [pc, #328]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b0a      	cmp	r3, #10
 8002d98:	d10a      	bne.n	8002db0 <HAL_UART_RxCpltCallback+0xb4>
						USART1ReceiveState = 0;
 8002d9a:	4b4e      	ldr	r3, [pc, #312]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8002da0:	220a      	movs	r2, #10
 8002da2:	494d      	ldr	r1, [pc, #308]	; (8002ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002da4:	484e      	ldr	r0, [pc, #312]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002da6:	f004 fe79 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	e00b      	b.n	8002dc8 <HAL_UART_RxCpltCallback+0xcc>
					}
					else{
						USART1ReceiveState = 1;
 8002db0:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)LostByte, 1);
 8002db6:	4b49      	ldr	r3, [pc, #292]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4848      	ldr	r0, [pc, #288]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002dc0:	f004 fe6c 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}
		if (Res != HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_UART_RxCpltCallback+0xea>
		{
			MX_UART4_Init();
 8002dce:	f001 fa49 	bl	8004264 <MX_UART4_Init>
			USART1ReceiveState = 0;
 8002dd2:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8002dd8:	220a      	movs	r2, #10
 8002dda:	493f      	ldr	r1, [pc, #252]	; (8002ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002ddc:	4840      	ldr	r0, [pc, #256]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002dde:	f004 fe5d 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002de2:	4603      	mov	r3, r0
 8002de4:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == USART2)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a3e      	ldr	r2, [pc, #248]	; (8002ee4 <HAL_UART_RxCpltCallback+0x1e8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d16b      	bne.n	8002ec8 <HAL_UART_RxCpltCallback+0x1cc>
	{
		if (USART2ReceiveState == 0)
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11f      	bne.n	8002e3a <HAL_UART_RxCpltCallback+0x13e>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 8002dfa:	4b3c      	ldr	r3, [pc, #240]	; (8002eec <HAL_UART_RxCpltCallback+0x1f0>)
 8002dfc:	7b9b      	ldrb	r3, [r3, #14]
 8002dfe:	2b0d      	cmp	r3, #13
 8002e00:	d103      	bne.n	8002e0a <HAL_UART_RxCpltCallback+0x10e>
 8002e02:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <HAL_UART_RxCpltCallback+0x1f0>)
 8002e04:	7bdb      	ldrb	r3, [r3, #15]
 8002e06:	2b0a      	cmp	r3, #10
 8002e08:	d00c      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x128>
			{
				Res = HAL_UART_Receive_DMA(&huart2, LostByte, 1);
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4619      	mov	r1, r3
 8002e12:	4837      	ldr	r0, [pc, #220]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002e14:	f004 fe42 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	73fb      	strb	r3, [r7, #15]
				USART2ReceiveState = 1;
 8002e1c:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	e042      	b.n	8002eaa <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				USART2ReceiveState = 10;
 8002e24:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e26:	220a      	movs	r2, #10
 8002e28:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	492f      	ldr	r1, [pc, #188]	; (8002eec <HAL_UART_RxCpltCallback+0x1f0>)
 8002e2e:	4830      	ldr	r0, [pc, #192]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002e30:	f004 fe34 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002e34:	4603      	mov	r3, r0
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e037      	b.n	8002eaa <HAL_UART_RxCpltCallback+0x1ae>
			}
		}
		else
		{
			if(USART2ReceiveState == 1)
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d111      	bne.n	8002e68 <HAL_UART_RxCpltCallback+0x16c>
			{
				if (LostByte[0] == 13)
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b0d      	cmp	r3, #13
 8002e4c:	d102      	bne.n	8002e54 <HAL_UART_RxCpltCallback+0x158>
				{
					USART2ReceiveState = 2;
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e50:	2202      	movs	r2, #2
 8002e52:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8002e54:	4b21      	ldr	r3, [pc, #132]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4824      	ldr	r0, [pc, #144]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002e5e:	f004 fe1d 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002e62:	4603      	mov	r3, r0
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e020      	b.n	8002eaa <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				if (USART2ReceiveState == 2)
 8002e68:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d11b      	bne.n	8002eaa <HAL_UART_RxCpltCallback+0x1ae>
				{
					if (LostByte[0] == 10)
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b0a      	cmp	r3, #10
 8002e7a:	d10a      	bne.n	8002e92 <HAL_UART_RxCpltCallback+0x196>
					{
						USART2ReceiveState = 0;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002e82:	2210      	movs	r2, #16
 8002e84:	4919      	ldr	r1, [pc, #100]	; (8002eec <HAL_UART_RxCpltCallback+0x1f0>)
 8002e86:	481a      	ldr	r0, [pc, #104]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002e88:	f004 fe08 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	e00b      	b.n	8002eaa <HAL_UART_RxCpltCallback+0x1ae>
					}
					else
					{
						USART2ReceiveState = 1;
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4813      	ldr	r0, [pc, #76]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002ea2:	f004 fdfb 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <HAL_UART_RxCpltCallback+0x1cc>
		{
			MX_USART2_UART_Init();
 8002eb0:	f001 fa02 	bl	80042b8 <MX_USART2_UART_Init>
			USART2ReceiveState = 0;
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002eba:	2210      	movs	r2, #16
 8002ebc:	490b      	ldr	r1, [pc, #44]	; (8002eec <HAL_UART_RxCpltCallback+0x1f0>)
 8002ebe:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002ec0:	f004 fdec 	bl	8007a9c <HAL_UART_Receive_DMA>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 8002ec8:	bf00      	nop
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40004c00 	.word	0x40004c00
 8002ed4:	2000009e 	.word	0x2000009e
 8002ed8:	20000188 	.word	0x20000188
 8002edc:	20000204 	.word	0x20000204
 8002ee0:	200004a0 	.word	0x200004a0
 8002ee4:	40004400 	.word	0x40004400
 8002ee8:	2000009f 	.word	0x2000009f
 8002eec:	200000f8 	.word	0x200000f8
 8002ef0:	200004e4 	.word	0x200004e4

08002ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ef4:	b5b0      	push	{r4, r5, r7, lr}
 8002ef6:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002efc:	f001 fb8c 	bl	8004618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f00:	f000 fdf0 	bl	8003ae4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  gyroscopeSensitivity.axis.x = 1.0f;
 8002f04:	4bc3      	ldr	r3, [pc, #780]	; (8003214 <main+0x320>)
 8002f06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f0a:	601a      	str	r2, [r3, #0]
  gyroscopeSensitivity.axis.y = 1.0f;
 8002f0c:	4bc1      	ldr	r3, [pc, #772]	; (8003214 <main+0x320>)
 8002f0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f12:	605a      	str	r2, [r3, #4]
  gyroscopeSensitivity.axis.z = 1.0f;
 8002f14:	4bbf      	ldr	r3, [pc, #764]	; (8003214 <main+0x320>)
 8002f16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f1a:	609a      	str	r2, [r3, #8]

  accelerometerSensitivity.axis.x = 1.0f;
 8002f1c:	4bbe      	ldr	r3, [pc, #760]	; (8003218 <main+0x324>)
 8002f1e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f22:	601a      	str	r2, [r3, #0]
  accelerometerSensitivity.axis.y = 1.0f;
 8002f24:	4bbc      	ldr	r3, [pc, #752]	; (8003218 <main+0x324>)
 8002f26:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f2a:	605a      	str	r2, [r3, #4]
  accelerometerSensitivity.axis.z = 1.0f;
 8002f2c:	4bba      	ldr	r3, [pc, #744]	; (8003218 <main+0x324>)
 8002f2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f32:	609a      	str	r2, [r3, #8]

  hardIronBias.axis.x = 0.0f;
 8002f34:	4bb9      	ldr	r3, [pc, #740]	; (800321c <main+0x328>)
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
  hardIronBias.axis.y = 0.0f;
 8002f3c:	4bb7      	ldr	r3, [pc, #732]	; (800321c <main+0x328>)
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	605a      	str	r2, [r3, #4]
  hardIronBias.axis.z = 0.0f;
 8002f44:	4bb5      	ldr	r3, [pc, #724]	; (800321c <main+0x328>)
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]

  FusionBiasInitialise(&fusionBias, 0.5f, samplePeriod);
 8002f4c:	4bb4      	ldr	r3, [pc, #720]	; (8003220 <main+0x32c>)
 8002f4e:	edd3 7a00 	vldr	s15, [r3]
 8002f52:	eef0 0a67 	vmov.f32	s1, s15
 8002f56:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002f5a:	48b2      	ldr	r0, [pc, #712]	; (8003224 <main+0x330>)
 8002f5c:	f7fe fef4 	bl	8001d48 <FusionBiasInitialise>
  FusionAhrsInitialise(&fusionAhrs, 0.5f);
 8002f60:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002f64:	48b0      	ldr	r0, [pc, #704]	; (8003228 <main+0x334>)
 8002f66:	f7fd fde1 	bl	8000b2c <FusionAhrsInitialise>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f6a:	f7ff fe21 	bl	8002bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f6e:	f7ff fde7 	bl	8002b40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002f72:	f001 f9a1 	bl	80042b8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002f76:	f7ff fd15 	bl	80029a4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002f7a:	f000 ff41 	bl	8003e00 <MX_TIM2_Init>
  MX_TIM6_Init();
 8002f7e:	f000 ffd5 	bl	8003f2c <MX_TIM6_Init>
  MX_TIM7_Init();
 8002f82:	f001 f809 	bl	8003f98 <MX_TIM7_Init>
  MX_TIM14_Init();
 8002f86:	f001 f83d 	bl	8004004 <MX_TIM14_Init>
  MX_UART4_Init();
 8002f8a:	f001 f96b 	bl	8004264 <MX_UART4_Init>
  MX_SPI2_Init();
 8002f8e:	f000 fe19 	bl	8003bc4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  icm20948_init();
 8002f92:	f7ff f82f 	bl	8001ff4 <icm20948_init>
  ak09916_init ();
 8002f96:	f7ff f857 	bl	8002048 <ak09916_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GetTick() - PackageLastTimeReset_Motherboard > 100) // UART2 RECEIVE FEEDBACK
 8002f9a:	f001 fba3 	bl	80046e4 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	4ba2      	ldr	r3, [pc, #648]	; (800322c <main+0x338>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d90e      	bls.n	8002fc8 <main+0xd4>
	  {
		  MX_USART2_UART_Init();
 8002faa:	f001 f985 	bl	80042b8 <MX_USART2_UART_Init>
		  USART2ReceiveState = 0;
 8002fae:	4ba0      	ldr	r3, [pc, #640]	; (8003230 <main+0x33c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	499f      	ldr	r1, [pc, #636]	; (8003234 <main+0x340>)
 8002fb8:	489f      	ldr	r0, [pc, #636]	; (8003238 <main+0x344>)
 8002fba:	f004 fd6f 	bl	8007a9c <HAL_UART_Receive_DMA>
		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 8002fbe:	f001 fb91 	bl	80046e4 <HAL_GetTick>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4a99      	ldr	r2, [pc, #612]	; (800322c <main+0x338>)
 8002fc6:	6013      	str	r3, [r2, #0]
	  }

	  WheelLeftStepsLocal = SerialControlWheelsResponce.WheelLeftSteps;
 8002fc8:	4b9a      	ldr	r3, [pc, #616]	; (8003234 <main+0x340>)
 8002fca:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002fce:	4a9b      	ldr	r2, [pc, #620]	; (800323c <main+0x348>)
 8002fd0:	6013      	str	r3, [r2, #0]
	  WheelRightStepsLocal = SerialControlWheelsResponce.WheelRightSteps;
 8002fd2:	4b98      	ldr	r3, [pc, #608]	; (8003234 <main+0x340>)
 8002fd4:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8002fd8:	4a99      	ldr	r2, [pc, #612]	; (8003240 <main+0x34c>)
 8002fda:	6013      	str	r3, [r2, #0]

	  WheelLeftStepsLocal *= 1;
 8002fdc:	4b97      	ldr	r3, [pc, #604]	; (800323c <main+0x348>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a96      	ldr	r2, [pc, #600]	; (800323c <main+0x348>)
 8002fe2:	6013      	str	r3, [r2, #0]
	  WheelRightStepsLocal *= 1;
 8002fe4:	4b96      	ldr	r3, [pc, #600]	; (8003240 <main+0x34c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a95      	ldr	r2, [pc, #596]	; (8003240 <main+0x34c>)
 8002fea:	6013      	str	r3, [r2, #0]
	  		  USART1ReceiveState = 0;
	  		  HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
	  		  PackageLastTimeReset_OnBoardPC = HAL_GetTick();
	  }*/

	  icm20948_gyro_read_dps(&my_gyro);
 8002fec:	4895      	ldr	r0, [pc, #596]	; (8003244 <main+0x350>)
 8002fee:	f7ff f925 	bl	800223c <icm20948_gyro_read_dps>
	  icm20948_accel_read_g(&my_accel);
 8002ff2:	4895      	ldr	r0, [pc, #596]	; (8003248 <main+0x354>)
 8002ff4:	f7ff f950 	bl	8002298 <icm20948_accel_read_g>
	  ak09916_mag_read_uT(&my_mag);
 8002ff8:	4894      	ldr	r0, [pc, #592]	; (800324c <main+0x358>)
 8002ffa:	f7ff f97d 	bl	80022f8 <ak09916_mag_read_uT>

	  uncalibratedGyroscope.axis.x = my_gyro.x;
 8002ffe:	4b91      	ldr	r3, [pc, #580]	; (8003244 <main+0x350>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a93      	ldr	r2, [pc, #588]	; (8003250 <main+0x35c>)
 8003004:	6013      	str	r3, [r2, #0]
	  uncalibratedGyroscope.axis.y = my_gyro.y;
 8003006:	4b8f      	ldr	r3, [pc, #572]	; (8003244 <main+0x350>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4a91      	ldr	r2, [pc, #580]	; (8003250 <main+0x35c>)
 800300c:	6053      	str	r3, [r2, #4]
	  uncalibratedGyroscope.axis.z = my_gyro.z;
 800300e:	4b8d      	ldr	r3, [pc, #564]	; (8003244 <main+0x350>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	4a8f      	ldr	r2, [pc, #572]	; (8003250 <main+0x35c>)
 8003014:	6093      	str	r3, [r2, #8]

	  uncalibratedAccelerometer.axis.x = my_accel.x;
 8003016:	4b8c      	ldr	r3, [pc, #560]	; (8003248 <main+0x354>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a8e      	ldr	r2, [pc, #568]	; (8003254 <main+0x360>)
 800301c:	6013      	str	r3, [r2, #0]
	  uncalibratedAccelerometer.axis.y = my_accel.y;
 800301e:	4b8a      	ldr	r3, [pc, #552]	; (8003248 <main+0x354>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a8c      	ldr	r2, [pc, #560]	; (8003254 <main+0x360>)
 8003024:	6053      	str	r3, [r2, #4]
	  uncalibratedAccelerometer.axis.z = my_accel.z;
 8003026:	4b88      	ldr	r3, [pc, #544]	; (8003248 <main+0x354>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	4a8a      	ldr	r2, [pc, #552]	; (8003254 <main+0x360>)
 800302c:	6093      	str	r3, [r2, #8]

	  uncalibratedMagnetometer.axis.x = my_mag.x;
 800302e:	4b87      	ldr	r3, [pc, #540]	; (800324c <main+0x358>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a89      	ldr	r2, [pc, #548]	; (8003258 <main+0x364>)
 8003034:	6013      	str	r3, [r2, #0]
	  uncalibratedMagnetometer.axis.y = my_mag.y;
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <main+0x358>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4a87      	ldr	r2, [pc, #540]	; (8003258 <main+0x364>)
 800303c:	6053      	str	r3, [r2, #4]
	  uncalibratedMagnetometer.axis.z = my_mag.z;
 800303e:	4b83      	ldr	r3, [pc, #524]	; (800324c <main+0x358>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4a85      	ldr	r2, [pc, #532]	; (8003258 <main+0x364>)
 8003044:	6093      	str	r3, [r2, #8]

	  FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8003046:	463b      	mov	r3, r7
 8003048:	4a84      	ldr	r2, [pc, #528]	; (800325c <main+0x368>)
 800304a:	461c      	mov	r4, r3
 800304c:	4615      	mov	r5, r2
 800304e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003056:	682b      	ldr	r3, [r5, #0]
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800307c:	4a74      	ldr	r2, [pc, #464]	; (8003250 <main+0x35c>)
 800307e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003080:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003084:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003088:	463b      	mov	r3, r7
 800308a:	4614      	mov	r4, r2
 800308c:	461d      	mov	r5, r3
 800308e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003096:	682b      	ldr	r3, [r5, #0]
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800309e:	4a5d      	ldr	r2, [pc, #372]	; (8003214 <main+0x320>)
 80030a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80030a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030a6:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80030aa:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80030ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80030b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030b4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80030b8:	f507 7205 	add.w	r2, r7, #532	; 0x214
 80030bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80030be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c6:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80030ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80030cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80030d0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80030d4:	ed93 7a00 	vldr	s14, [r3]
 80030d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80030e8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80030ec:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80030f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80030f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80030fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003100:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003104:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8003108:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800310c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003114:	edd3 7a02 	vldr	s15, [r3, #8]
 8003118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003120:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003124:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8003128:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800312c:	ca07      	ldmia	r2, {r0, r1, r2}
 800312e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003132:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003136:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800313a:	ca07      	ldmia	r2, {r0, r1, r2}
 800313c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003140:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003144:	461c      	mov	r4, r3
 8003146:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800314a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800314e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003152:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8003156:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800315a:	ca07      	ldmia	r2, {r0, r1, r2}
 800315c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8003160:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003164:	ed93 7a00 	vldr	s14, [r3]
 8003168:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800316c:	edd3 7a00 	vldr	s15, [r3]
 8003170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003174:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8003178:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800317c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003180:	ed93 7a01 	vldr	s14, [r3, #4]
 8003184:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8003188:	edd3 7a01 	vldr	s15, [r3, #4]
 800318c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003190:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8003194:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8003198:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800319c:	ed93 7a02 	vldr	s14, [r3, #8]
 80031a0:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80031a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80031a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ac:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80031b0:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80031b4:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 80031b8:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80031bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80031be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031c2:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80031c6:	f507 7245 	add.w	r2, r7, #788	; 0x314
 80031ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80031cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031d0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80031d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031d8:	4614      	mov	r4, r2
 80031da:	461d      	mov	r5, r3
 80031dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e4:	682b      	ldr	r3, [r5, #0]
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80031ec:	461c      	mov	r4, r3
 80031ee:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80031f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 80031fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031fe:	ed93 7a00 	vldr	s14, [r3]
 8003202:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800320e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003212:	e025      	b.n	8003260 <main+0x36c>
 8003214:	200001a0 	.word	0x200001a0
 8003218:	200001e4 	.word	0x200001e4
 800321c:	200001b4 	.word	0x200001b4
 8003220:	20000000 	.word	0x20000000
 8003224:	20000154 	.word	0x20000154
 8003228:	20000124 	.word	0x20000124
 800322c:	200001ac 	.word	0x200001ac
 8003230:	2000009f 	.word	0x2000009f
 8003234:	200000f8 	.word	0x200000f8
 8003238:	200004e4 	.word	0x200004e4
 800323c:	20000118 	.word	0x20000118
 8003240:	200001b0 	.word	0x200001b0
 8003244:	200001f4 	.word	0x200001f4
 8003248:	20000194 	.word	0x20000194
 800324c:	200001c0 	.word	0x200001c0
 8003250:	200001d8 	.word	0x200001d8
 8003254:	2000017c 	.word	0x2000017c
 8003258:	200001cc 	.word	0x200001cc
 800325c:	0800912c 	.word	0x0800912c
 8003260:	edd3 6a01 	vldr	s13, [r3, #4]
 8003264:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003268:	edd3 7a01 	vldr	s15, [r3, #4]
 800326c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003274:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003278:	edd3 6a02 	vldr	s13, [r3, #8]
 800327c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003280:	edd3 7a02 	vldr	s15, [r3, #8]
 8003284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8003290:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8003294:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003298:	ed93 7a03 	vldr	s14, [r3, #12]
 800329c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032ac:	edd3 6a04 	vldr	s13, [r3, #16]
 80032b0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80032b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80032b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032c4:	edd3 6a05 	vldr	s13, [r3, #20]
 80032c8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80032cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80032d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d8:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80032dc:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 80032e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032e4:	ed93 7a06 	vldr	s14, [r3, #24]
 80032e8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80032f8:	edd3 6a07 	vldr	s13, [r3, #28]
 80032fc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003300:	edd3 7a01 	vldr	s15, [r3, #4]
 8003304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003310:	edd3 6a08 	vldr	s13, [r3, #32]
 8003314:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003318:	edd3 7a02 	vldr	s15, [r3, #8]
 800331c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003324:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8003328:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800332c:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003330:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003334:	ca07      	ldmia	r2, {r0, r1, r2}
 8003336:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800333a:	f507 7351 	add.w	r3, r7, #836	; 0x344
 800333e:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8003342:	ca07      	ldmia	r2, {r0, r1, r2}
 8003344:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 8003348:	bf00      	nop
 800334a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800334e:	f507 7251 	add.w	r2, r7, #836	; 0x344
 8003352:	ca07      	ldmia	r2, {r0, r1, r2}
 8003354:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 8003358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800335c:	4ae0      	ldr	r2, [pc, #896]	; (80036e0 <main+0x7ec>)
 800335e:	461c      	mov	r4, r3
 8003360:	4615      	mov	r5, r2
 8003362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800336a:	682b      	ldr	r3, [r5, #0]
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003390:	4ad4      	ldr	r2, [pc, #848]	; (80036e4 <main+0x7f0>)
 8003392:	ca07      	ldmia	r2, {r0, r1, r2}
 8003394:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003398:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800339c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a0:	4614      	mov	r4, r2
 80033a2:	461d      	mov	r5, r3
 80033a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	6023      	str	r3, [r4, #0]
 80033b0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80033b4:	4acc      	ldr	r2, [pc, #816]	; (80036e8 <main+0x7f4>)
 80033b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80033b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033bc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80033c0:	f507 7211 	add.w	r2, r7, #580	; 0x244
 80033c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80033c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033ca:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80033ce:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80033d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80033d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033d8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80033dc:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80033e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80033e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80033e6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80033ea:	ed93 7a00 	vldr	s14, [r3]
 80033ee:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fa:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80033fe:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8003402:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003406:	ed93 7a01 	vldr	s14, [r3, #4]
 800340a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800340e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003416:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800341a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800341e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003422:	ed93 7a02 	vldr	s14, [r3, #8]
 8003426:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800342a:	edd3 7a02 	vldr	s15, [r3, #8]
 800342e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003432:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003436:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800343a:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 800343e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003442:	ca07      	ldmia	r2, {r0, r1, r2}
 8003444:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003448:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800344c:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8003450:	ca07      	ldmia	r2, {r0, r1, r2}
 8003452:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003456:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800345a:	461c      	mov	r4, r3
 800345c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003460:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003464:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003468:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800346c:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8003470:	ca07      	ldmia	r2, {r0, r1, r2}
 8003472:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8003476:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800347a:	ed93 7a00 	vldr	s14, [r3]
 800347e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003482:	edd3 7a00 	vldr	s15, [r3]
 8003486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800348e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8003492:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003496:	ed93 7a01 	vldr	s14, [r3, #4]
 800349a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800349e:	edd3 7a01 	vldr	s15, [r3, #4]
 80034a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80034aa:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 80034ae:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80034b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80034b6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80034ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80034be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80034c6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80034ca:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80034ce:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80034d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80034d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034d8:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80034dc:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 80034e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80034e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034e6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80034ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034ee:	4614      	mov	r4, r2
 80034f0:	461d      	mov	r5, r3
 80034f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034fa:	682b      	ldr	r3, [r5, #0]
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003502:	461c      	mov	r4, r3
 8003504:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8003508:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800350c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8003510:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003514:	ed93 7a00 	vldr	s14, [r3]
 8003518:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003524:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003528:	edd3 6a01 	vldr	s13, [r3, #4]
 800352c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003530:	edd3 7a01 	vldr	s15, [r3, #4]
 8003534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003538:	ee37 7a27 	vadd.f32	s14, s14, s15
 800353c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003540:	edd3 6a02 	vldr	s13, [r3, #8]
 8003544:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003548:	edd3 7a02 	vldr	s15, [r3, #8]
 800354c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003558:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800355c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003560:	ed93 7a03 	vldr	s14, [r3, #12]
 8003564:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003568:	edd3 7a00 	vldr	s15, [r3]
 800356c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003570:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003574:	edd3 6a04 	vldr	s13, [r3, #16]
 8003578:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800357c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003588:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800358c:	edd3 6a05 	vldr	s13, [r3, #20]
 8003590:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003594:	edd3 7a02 	vldr	s15, [r3, #8]
 8003598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800359c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035a4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 80035a8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035ac:	ed93 7a06 	vldr	s14, [r3, #24]
 80035b0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80035b4:	edd3 7a00 	vldr	s15, [r3]
 80035b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035c0:	edd3 6a07 	vldr	s13, [r3, #28]
 80035c4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80035c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80035cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80035d8:	edd3 6a08 	vldr	s13, [r3, #32]
 80035dc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80035e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80035e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80035f0:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80035f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80035f8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80035fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80035fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003602:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8003606:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 800360a:	ca07      	ldmia	r2, {r0, r1, r2}
 800360c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003610:	bf00      	nop
 8003612:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003616:	461c      	mov	r4, r3
 8003618:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 800361c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  FusionVector3 calibratedMagnetometer = FusionCalibrationMagnetic(uncalibratedMagnetometer, FUSION_ROTATION_MATRIX_IDENTITY, hardIronBias);
 8003624:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003628:	4a2d      	ldr	r2, [pc, #180]	; (80036e0 <main+0x7ec>)
 800362a:	461c      	mov	r4, r3
 800362c:	4615      	mov	r5, r2
 800362e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003636:	682b      	ldr	r3, [r5, #0]
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800363e:	4a2b      	ldr	r2, [pc, #172]	; (80036ec <main+0x7f8>)
 8003640:	ca07      	ldmia	r2, {r0, r1, r2}
 8003642:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003646:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800364a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800364e:	4614      	mov	r4, r2
 8003650:	461d      	mov	r5, r3
 8003652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800365a:	682b      	ldr	r3, [r5, #0]
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003662:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <main+0x7fc>)
 8003664:	ca07      	ldmia	r2, {r0, r1, r2}
 8003666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800366a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800366e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003672:	4614      	mov	r4, r2
 8003674:	461d      	mov	r5, r3
 8003676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800367a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800367c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800367e:	682b      	ldr	r3, [r5, #0]
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003686:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800368a:	ca07      	ldmia	r2, {r0, r1, r2}
 800368c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8003690:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003694:	ed93 7a00 	vldr	s14, [r3]
 8003698:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800369c:	edd3 7a00 	vldr	s15, [r3]
 80036a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80036ac:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80036b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80036b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80036c4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80036c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80036cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80036d8:	edc3 7a00 	vstr	s15, [r3]
 80036dc:	e00a      	b.n	80036f4 <main+0x800>
 80036de:	bf00      	nop
 80036e0:	0800912c 	.word	0x0800912c
 80036e4:	2000017c 	.word	0x2000017c
 80036e8:	200001e4 	.word	0x200001e4
 80036ec:	200001cc 	.word	0x200001cc
 80036f0:	200001b4 	.word	0x200001b4
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80036f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80036fc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003700:	edd3 7a00 	vldr	s15, [r3]
 8003704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003708:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800370c:	edd3 6a04 	vldr	s13, [r3, #16]
 8003710:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003714:	edd3 7a01 	vldr	s15, [r3, #4]
 8003718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800371c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003720:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003724:	edd3 6a05 	vldr	s13, [r3, #20]
 8003728:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800372c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003738:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800373c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003740:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003744:	ed93 7a06 	vldr	s14, [r3, #24]
 8003748:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800374c:	edd3 7a00 	vldr	s15, [r3]
 8003750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003754:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003758:	edd3 6a07 	vldr	s13, [r3, #28]
 800375c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003760:	edd3 7a01 	vldr	s15, [r3, #4]
 8003764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800376c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003770:	edd3 6a08 	vldr	s13, [r3, #32]
 8003774:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003778:	edd3 7a02 	vldr	s15, [r3, #8]
 800377c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003784:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003788:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800378c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8003790:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003794:	ca07      	ldmia	r2, {r0, r1, r2}
 8003796:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800379a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800379e:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80037a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80037a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037a8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80037ac:	461c      	mov	r4, r3
 80037ae:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80037b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037ba:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80037be:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80037c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80037c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80037c8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80037cc:	ed93 7a00 	vldr	s14, [r3]
 80037d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037e0:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80037e4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80037e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80037ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80037f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80037f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037fc:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8003800:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003804:	ed93 7a02 	vldr	s14, [r3, #8]
 8003808:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800380c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003814:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003818:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800381c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8003820:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8003824:	ca07      	ldmia	r2, {r0, r1, r2}
 8003826:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800382a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800382e:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8003832:	ca07      	ldmia	r2, {r0, r1, r2}
 8003834:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param softIronMatrix Soft-iron matrix (may not be a true rotation matrix).
 * @param hardIronBias Hard-iron bias in uT.
 * @return Calibrated magnetometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationMagnetic(const FusionVector3 uncalibrated, const FusionRotationMatrix softIronMatrix, const FusionVector3 hardIronBias) {
    return FusionVectorSubtract(FusionRotationMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronBias);
 8003838:	bf00      	nop
 800383a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800383e:	461c      	mov	r4, r3
 8003840:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8003844:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003848:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  calibratedGyroscope = FusionBiasUpdate(&fusionBias, calibratedGyroscope);
 800384c:	edd7 6a9a 	vldr	s13, [r7, #616]	; 0x268
 8003850:	ed97 7a9b 	vldr	s14, [r7, #620]	; 0x26c
 8003854:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8003858:	eeb0 0a66 	vmov.f32	s0, s13
 800385c:	eef0 0a47 	vmov.f32	s1, s14
 8003860:	eeb0 1a67 	vmov.f32	s2, s15
 8003864:	4898      	ldr	r0, [pc, #608]	; (8003ac8 <main+0xbd4>)
 8003866:	f7fe faab 	bl	8001dc0 <FusionBiasUpdate>
 800386a:	eef0 6a40 	vmov.f32	s13, s0
 800386e:	eeb0 7a60 	vmov.f32	s14, s1
 8003872:	eef0 7a41 	vmov.f32	s15, s2
 8003876:	edc7 6a9a 	vstr	s13, [r7, #616]	; 0x268
 800387a:	ed87 7a9b 	vstr	s14, [r7, #620]	; 0x26c
 800387e:	edc7 7a9c 	vstr	s15, [r7, #624]	; 0x270
	  FusionAhrsUpdate(&fusionAhrs, calibratedGyroscope, calibratedAccelerometer, calibratedMagnetometer, samplePeriod);
 8003882:	4b92      	ldr	r3, [pc, #584]	; (8003acc <main+0xbd8>)
 8003884:	edd3 4a00 	vldr	s9, [r3]
 8003888:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800388c:	ed93 3a00 	vldr	s6, [r3]
 8003890:	edd3 3a01 	vldr	s7, [r3, #4]
 8003894:	ed93 4a02 	vldr	s8, [r3, #8]
 8003898:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800389c:	ed93 5a00 	vldr	s10, [r3]
 80038a0:	edd3 5a01 	vldr	s11, [r3, #4]
 80038a4:	ed93 6a02 	vldr	s12, [r3, #8]
 80038a8:	edd7 6a9a 	vldr	s13, [r7, #616]	; 0x268
 80038ac:	ed97 7a9b 	vldr	s14, [r7, #620]	; 0x26c
 80038b0:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 80038b4:	eef0 1a45 	vmov.f32	s3, s10
 80038b8:	eeb0 2a65 	vmov.f32	s4, s11
 80038bc:	eef0 2a46 	vmov.f32	s5, s12
 80038c0:	eeb0 0a66 	vmov.f32	s0, s13
 80038c4:	eef0 0a47 	vmov.f32	s1, s14
 80038c8:	eeb0 1a67 	vmov.f32	s2, s15
 80038cc:	4880      	ldr	r0, [pc, #512]	; (8003ad0 <main+0xbdc>)
 80038ce:	f7fd f96b 	bl	8000ba8 <FusionAhrsUpdate>
	  eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(&fusionAhrs));
 80038d2:	487f      	ldr	r0, [pc, #508]	; (8003ad0 <main+0xbdc>)
 80038d4:	f7fe f9f0 	bl	8001cb8 <FusionAhrsGetQuaternion>
 80038d8:	eeb0 6a40 	vmov.f32	s12, s0
 80038dc:	eef0 6a60 	vmov.f32	s13, s1
 80038e0:	eeb0 7a41 	vmov.f32	s14, s2
 80038e4:	eef0 7a61 	vmov.f32	s15, s3
 80038e8:	ed87 6a9d 	vstr	s12, [r7, #628]	; 0x274
 80038ec:	edc7 6a9e 	vstr	s13, [r7, #632]	; 0x278
 80038f0:	ed87 7a9f 	vstr	s14, [r7, #636]	; 0x27c
 80038f4:	edc7 7aa0 	vstr	s15, [r7, #640]	; 0x280
 80038f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038fc:	461c      	mov	r4, r3
 80038fe:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8003902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 8003908:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800390c:	ed93 7a00 	vldr	s14, [r3]
 8003910:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800391c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003920:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003924:	edc7 7ad7 	vstr	s15, [r7, #860]	; 0x35c
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003928:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800392c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003930:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003934:	edd3 7a03 	vldr	s15, [r3, #12]
 8003938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800393c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003940:	edd3 6a00 	vldr	s13, [r3]
 8003944:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003948:	edd3 7a01 	vldr	s15, [r3, #4]
 800394c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003950:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003954:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003958:	ed93 7a03 	vldr	s14, [r3, #12]
 800395c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003960:	edd3 7a03 	vldr	s15, [r3, #12]
 8003964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003968:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 800396c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003970:	eef0 0a67 	vmov.f32	s1, s15
 8003974:	eeb0 0a66 	vmov.f32	s0, s13
 8003978:	f005 f92c 	bl	8008bd4 <atan2f>
 800397c:	eef0 7a40 	vmov.f32	s15, s0
 8003980:	edc7 7ad6 	vstr	s15, [r7, #856]	; 0x358
    return radians * (180.0f / (float) M_PI);
 8003984:	edd7 7ad6 	vldr	s15, [r7, #856]	; 0x358
 8003988:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8003ad4 <main+0xbe0>
 800398c:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003990:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003994:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003998:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800399c:	ed93 7a01 	vldr	s14, [r3, #4]
 80039a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80039a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039b0:	edd3 6a00 	vldr	s13, [r3]
 80039b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80039bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80039c8:	eeb0 0a67 	vmov.f32	s0, s15
 80039cc:	f005 f8d0 	bl	8008b70 <asinf>
 80039d0:	eef0 7a40 	vmov.f32	s15, s0
 80039d4:	eef1 7a67 	vneg.f32	s15, s15
 80039d8:	edc7 7ad5 	vstr	s15, [r7, #852]	; 0x354
    return radians * (180.0f / (float) M_PI);
 80039dc:	edd7 7ad5 	vldr	s15, [r7, #852]	; 0x354
 80039e0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003ad4 <main+0xbe0>
 80039e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 80039e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80039ec:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 80039f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80039f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80039fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a08:	edd3 6a00 	vldr	s13, [r3]
 8003a0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a10:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a18:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003a1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a20:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a28:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a30:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 8003a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a38:	eef0 0a67 	vmov.f32	s1, s15
 8003a3c:	eeb0 0a66 	vmov.f32	s0, s13
 8003a40:	f005 f8c8 	bl	8008bd4 <atan2f>
 8003a44:	eef0 7a40 	vmov.f32	s15, s0
 8003a48:	edc7 7ad4 	vstr	s15, [r7, #848]	; 0x350
    return radians * (180.0f / (float) M_PI);
 8003a4c:	edd7 7ad4 	vldr	s15, [r7, #848]	; 0x350
 8003a50:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003ad4 <main+0xbe0>
 8003a54:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003a58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a5c:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 8003a60:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8003a64:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8003a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003a72:	461c      	mov	r4, r3
 8003a74:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8003a78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a80:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <main+0xbe4>)
 8003a82:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8003a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 		  HAL_UART_Transmit_DMA(&huart4, (uint8_t*)SerialOnBoardResponce.Buffer, ON_BOARD_CONTROL_RESPONCE_SIZE);

		  PackageLastTimeReset_OnBoardPC = HAL_GetTick();
	  }*/

	  SerialControlWheelsRequest.ControlMode = 0;
 8003a8c:	4b13      	ldr	r3, [pc, #76]	; (8003adc <main+0xbe8>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
	  SerialControlWheelsRequest.ParameterNumber = 0;
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <main+0xbe8>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	705a      	strb	r2, [r3, #1]
	  SerialControlWheelsRequest.WheelLeft = 0.0;
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <main+0xbe8>)
 8003a9a:	3306      	adds	r3, #6
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
	  SerialControlWheelsRequest.WheelRight = 0.0;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <main+0xbe8>)
 8003aa4:	330a      	adds	r3, #10
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
	  SerialControlWheelsRequest.CR=13;
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <main+0xbe8>)
 8003aae:	220d      	movs	r2, #13
 8003ab0:	739a      	strb	r2, [r3, #14]
	  SerialControlWheelsRequest.LF=10;
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <main+0xbe8>)
 8003ab4:	220a      	movs	r2, #10
 8003ab6:	73da      	strb	r2, [r3, #15]

	  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)SerialControlWheelsRequest.Buffer, WHEELS_REQUEST_SIZE);
 8003ab8:	2210      	movs	r2, #16
 8003aba:	4908      	ldr	r1, [pc, #32]	; (8003adc <main+0xbe8>)
 8003abc:	4808      	ldr	r0, [pc, #32]	; (8003ae0 <main+0xbec>)
 8003abe:	f003 ff6f 	bl	80079a0 <HAL_UART_Transmit_DMA>
  {
 8003ac2:	f7ff ba6a 	b.w	8002f9a <main+0xa6>
 8003ac6:	bf00      	nop
 8003ac8:	20000154 	.word	0x20000154
 8003acc:	20000000 	.word	0x20000000
 8003ad0:	20000124 	.word	0x20000124
 8003ad4:	42652ee0 	.word	0x42652ee0
 8003ad8:	200000ec 	.word	0x200000ec
 8003adc:	20000108 	.word	0x20000108
 8003ae0:	200004e4 	.word	0x200004e4

08003ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b094      	sub	sp, #80	; 0x50
 8003ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aea:	f107 0320 	add.w	r3, r7, #32
 8003aee:	2230      	movs	r2, #48	; 0x30
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f005 fb06 	bl	8009104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003af8:	f107 030c 	add.w	r3, r7, #12
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
 8003b0c:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <SystemClock_Config+0xcc>)
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	4a27      	ldr	r2, [pc, #156]	; (8003bb0 <SystemClock_Config+0xcc>)
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b16:	6413      	str	r3, [r2, #64]	; 0x40
 8003b18:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <SystemClock_Config+0xcc>)
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b24:	2300      	movs	r3, #0
 8003b26:	607b      	str	r3, [r7, #4]
 8003b28:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <SystemClock_Config+0xd0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <SystemClock_Config+0xd0>)
 8003b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b1f      	ldr	r3, [pc, #124]	; (8003bb4 <SystemClock_Config+0xd0>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003b54:	2304      	movs	r3, #4
 8003b56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003b58:	23a8      	movs	r3, #168	; 0xa8
 8003b5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b60:	2304      	movs	r3, #4
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b64:	f107 0320 	add.w	r3, r7, #32
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 ff17 	bl	800599c <HAL_RCC_OscConfig>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003b74:	f000 f820 	bl	8003bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b78:	230f      	movs	r3, #15
 8003b7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b90:	f107 030c 	add.w	r3, r7, #12
 8003b94:	2105      	movs	r1, #5
 8003b96:	4618      	mov	r0, r3
 8003b98:	f002 f978 	bl	8005e8c <HAL_RCC_ClockConfig>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003ba2:	f000 f809 	bl	8003bb8 <Error_Handler>
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3750      	adds	r7, #80	; 0x50
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40007000 	.word	0x40007000

08003bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bbc:	b672      	cpsid	i
}
 8003bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bc0:	e7fe      	b.n	8003bc0 <Error_Handler+0x8>
	...

08003bc4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003bc8:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <MX_SPI2_Init+0x68>)
 8003bcc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003bd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003bd6:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003be2:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003be4:	2202      	movs	r2, #2
 8003be6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003c10:	220a      	movs	r2, #10
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003c14:	4804      	ldr	r0, [pc, #16]	; (8003c28 <MX_SPI2_Init+0x64>)
 8003c16:	f002 fb35 	bl	8006284 <HAL_SPI_Init>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003c20:	f7ff ffca 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003c24:	bf00      	nop
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000208 	.word	0x20000208
 8003c2c:	40003800 	.word	0x40003800

08003c30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	; 0x28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c38:	f107 0314 	add.w	r3, r7, #20
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a19      	ldr	r2, [pc, #100]	; (8003cb4 <HAL_SPI_MspInit+0x84>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d12c      	bne.n	8003cac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <HAL_SPI_MspInit+0x88>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <HAL_SPI_MspInit+0x88>)
 8003c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c60:	6413      	str	r3, [r2, #64]	; 0x40
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_SPI_MspInit+0x88>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <HAL_SPI_MspInit+0x88>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4a10      	ldr	r2, [pc, #64]	; (8003cb8 <HAL_SPI_MspInit+0x88>)
 8003c78:	f043 0302 	orr.w	r3, r3, #2
 8003c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <HAL_SPI_MspInit+0x88>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 8003c8a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	2302      	movs	r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c9c:	2305      	movs	r3, #5
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca0:	f107 0314 	add.w	r3, r7, #20
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4805      	ldr	r0, [pc, #20]	; (8003cbc <HAL_SPI_MspInit+0x8c>)
 8003ca8:	f001 fcc2 	bl	8005630 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003cac:	bf00      	nop
 8003cae:	3728      	adds	r7, #40	; 0x28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40003800 	.word	0x40003800
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40020400 	.word	0x40020400

08003cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_MspInit+0x4c>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <HAL_MspInit+0x4c>)
 8003cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <HAL_MspInit+0x4c>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <HAL_MspInit+0x4c>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <HAL_MspInit+0x4c>)
 8003cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_MspInit+0x4c>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800

08003d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d14:	e7fe      	b.n	8003d14 <NMI_Handler+0x4>

08003d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d1a:	e7fe      	b.n	8003d1a <HardFault_Handler+0x4>

08003d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d20:	e7fe      	b.n	8003d20 <MemManage_Handler+0x4>

08003d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d22:	b480      	push	{r7}
 8003d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d26:	e7fe      	b.n	8003d26 <BusFault_Handler+0x4>

08003d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d2c:	e7fe      	b.n	8003d2c <UsageFault_Handler+0x4>

08003d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d5c:	f000 fcae 	bl	80046bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d60:	bf00      	nop
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <DMA1_Stream2_IRQHandler+0x10>)
 8003d6a:	f001 f9f7 	bl	800515c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000380 	.word	0x20000380

08003d78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003d7c:	4802      	ldr	r0, [pc, #8]	; (8003d88 <DMA1_Stream4_IRQHandler+0x10>)
 8003d7e:	f001 f9ed 	bl	800515c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000528 	.word	0x20000528

08003d8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003d90:	4802      	ldr	r0, [pc, #8]	; (8003d9c <DMA1_Stream5_IRQHandler+0x10>)
 8003d92:	f001 f9e3 	bl	800515c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200003e0 	.word	0x200003e0

08003da0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003da4:	4802      	ldr	r0, [pc, #8]	; (8003db0 <DMA1_Stream6_IRQHandler+0x10>)
 8003da6:	f001 f9d9 	bl	800515c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000440 	.word	0x20000440

08003db4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003db8:	4802      	ldr	r0, [pc, #8]	; (8003dc4 <USART2_IRQHandler+0x10>)
 8003dba:	f003 fe9f 	bl	8007afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200004e4 	.word	0x200004e4

08003dc8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <UART4_IRQHandler+0x10>)
 8003dce:	f003 fe95 	bl	8007afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200004a0 	.word	0x200004a0

08003ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <SystemInit+0x20>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <SystemInit+0x20>)
 8003de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08e      	sub	sp, #56	; 0x38
 8003e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e14:	f107 0320 	add.w	r3, r7, #32
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	611a      	str	r2, [r3, #16]
 8003e2c:	615a      	str	r2, [r3, #20]
 8003e2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e30:	4b3d      	ldr	r3, [pc, #244]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003e38:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3e:	4b3a      	ldr	r3, [pc, #232]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8003e44:	4b38      	ldr	r3, [pc, #224]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003e46:	2259      	movs	r2, #89	; 0x59
 8003e48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e4a:	4b37      	ldr	r3, [pc, #220]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e50:	4b35      	ldr	r3, [pc, #212]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e56:	4834      	ldr	r0, [pc, #208]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003e58:	f002 ffbc 	bl	8006dd4 <HAL_TIM_Base_Init>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8003e62:	f7ff fea9 	bl	8003bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e70:	4619      	mov	r1, r3
 8003e72:	482d      	ldr	r0, [pc, #180]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003e74:	f003 f918 	bl	80070a8 <HAL_TIM_ConfigClockSource>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8003e7e:	f7ff fe9b 	bl	8003bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e82:	4829      	ldr	r0, [pc, #164]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003e84:	f002 fff5 	bl	8006e72 <HAL_TIM_PWM_Init>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8003e8e:	f7ff fe93 	bl	8003bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e9a:	f107 0320 	add.w	r3, r7, #32
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4821      	ldr	r0, [pc, #132]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003ea2:	f003 fcb3 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003eac:	f7ff fe84 	bl	8003bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003eb0:	2360      	movs	r3, #96	; 0x60
 8003eb2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4818      	ldr	r0, [pc, #96]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003ec8:	f003 f82c 	bl	8006f24 <HAL_TIM_PWM_ConfigChannel>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8003ed2:	f7ff fe71 	bl	8003bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	2204      	movs	r2, #4
 8003eda:	4619      	mov	r1, r3
 8003edc:	4812      	ldr	r0, [pc, #72]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003ede:	f003 f821 	bl	8006f24 <HAL_TIM_PWM_ConfigChannel>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8003ee8:	f7ff fe66 	bl	8003bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003eec:	1d3b      	adds	r3, r7, #4
 8003eee:	2208      	movs	r2, #8
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	480d      	ldr	r0, [pc, #52]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003ef4:	f003 f816 	bl	8006f24 <HAL_TIM_PWM_ConfigChannel>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8003efe:	f7ff fe5b 	bl	8003bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003f02:	1d3b      	adds	r3, r7, #4
 8003f04:	220c      	movs	r2, #12
 8003f06:	4619      	mov	r1, r3
 8003f08:	4807      	ldr	r0, [pc, #28]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003f0a:	f003 f80b 	bl	8006f24 <HAL_TIM_PWM_ConfigChannel>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8003f14:	f7ff fe50 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003f18:	4803      	ldr	r0, [pc, #12]	; (8003f28 <MX_TIM2_Init+0x128>)
 8003f1a:	f000 f923 	bl	8004164 <HAL_TIM_MspPostInit>

}
 8003f1e:	bf00      	nop
 8003f20:	3738      	adds	r7, #56	; 0x38
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200002a8 	.word	0x200002a8

08003f2c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f32:	463b      	mov	r3, r7
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <MX_TIM6_Init+0x64>)
 8003f3c:	4a15      	ldr	r2, [pc, #84]	; (8003f94 <MX_TIM6_Init+0x68>)
 8003f3e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <MX_TIM6_Init+0x64>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <MX_TIM6_Init+0x64>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003f4c:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <MX_TIM6_Init+0x64>)
 8003f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f52:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f54:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <MX_TIM6_Init+0x64>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f5a:	480d      	ldr	r0, [pc, #52]	; (8003f90 <MX_TIM6_Init+0x64>)
 8003f5c:	f002 ff3a 	bl	8006dd4 <HAL_TIM_Base_Init>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003f66:	f7ff fe27 	bl	8003bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f72:	463b      	mov	r3, r7
 8003f74:	4619      	mov	r1, r3
 8003f76:	4806      	ldr	r0, [pc, #24]	; (8003f90 <MX_TIM6_Init+0x64>)
 8003f78:	f003 fc48 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003f82:	f7ff fe19 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000260 	.word	0x20000260
 8003f94:	40001000 	.word	0x40001000

08003f98 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f9e:	463b      	mov	r3, r7
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <MX_TIM7_Init+0x64>)
 8003fa8:	4a15      	ldr	r2, [pc, #84]	; (8004000 <MX_TIM7_Init+0x68>)
 8003faa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <MX_TIM7_Init+0x64>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <MX_TIM7_Init+0x64>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <MX_TIM7_Init+0x64>)
 8003fba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fbe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <MX_TIM7_Init+0x64>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003fc6:	480d      	ldr	r0, [pc, #52]	; (8003ffc <MX_TIM7_Init+0x64>)
 8003fc8:	f002 ff04 	bl	8006dd4 <HAL_TIM_Base_Init>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003fd2:	f7ff fdf1 	bl	8003bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003fde:	463b      	mov	r3, r7
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4806      	ldr	r0, [pc, #24]	; (8003ffc <MX_TIM7_Init+0x64>)
 8003fe4:	f003 fc12 	bl	800780c <HAL_TIMEx_MasterConfigSynchronization>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003fee:	f7ff fde3 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000338 	.word	0x20000338
 8004000:	40001400 	.word	0x40001400

08004004 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	611a      	str	r2, [r3, #16]
 8004018:	615a      	str	r2, [r3, #20]
 800401a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800401c:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <MX_TIM14_Init+0x94>)
 800401e:	4a1f      	ldr	r2, [pc, #124]	; (800409c <MX_TIM14_Init+0x98>)
 8004020:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 720;
 8004022:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <MX_TIM14_Init+0x94>)
 8004024:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8004028:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <MX_TIM14_Init+0x94>)
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <MX_TIM14_Init+0x94>)
 8004032:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004036:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004038:	4b17      	ldr	r3, [pc, #92]	; (8004098 <MX_TIM14_Init+0x94>)
 800403a:	2200      	movs	r2, #0
 800403c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800403e:	4b16      	ldr	r3, [pc, #88]	; (8004098 <MX_TIM14_Init+0x94>)
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004044:	4814      	ldr	r0, [pc, #80]	; (8004098 <MX_TIM14_Init+0x94>)
 8004046:	f002 fec5 	bl	8006dd4 <HAL_TIM_Base_Init>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8004050:	f7ff fdb2 	bl	8003bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004054:	4810      	ldr	r0, [pc, #64]	; (8004098 <MX_TIM14_Init+0x94>)
 8004056:	f002 ff0c 	bl	8006e72 <HAL_TIM_PWM_Init>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8004060:	f7ff fdaa 	bl	8003bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004064:	2360      	movs	r3, #96	; 0x60
 8004066:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8004068:	2332      	movs	r3, #50	; 0x32
 800406a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004074:	1d3b      	adds	r3, r7, #4
 8004076:	2200      	movs	r2, #0
 8004078:	4619      	mov	r1, r3
 800407a:	4807      	ldr	r0, [pc, #28]	; (8004098 <MX_TIM14_Init+0x94>)
 800407c:	f002 ff52 	bl	8006f24 <HAL_TIM_PWM_ConfigChannel>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8004086:	f7ff fd97 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800408a:	4803      	ldr	r0, [pc, #12]	; (8004098 <MX_TIM14_Init+0x94>)
 800408c:	f000 f86a 	bl	8004164 <HAL_TIM_MspPostInit>

}
 8004090:	bf00      	nop
 8004092:	3720      	adds	r7, #32
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	200002f0 	.word	0x200002f0
 800409c:	40002000 	.word	0x40002000

080040a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d10e      	bne.n	80040d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	4b27      	ldr	r3, [pc, #156]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	4a26      	ldr	r2, [pc, #152]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6413      	str	r3, [r2, #64]	; 0x40
 80040c2:	4b24      	ldr	r3, [pc, #144]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80040ce:	e03a      	b.n	8004146 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM6)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a20      	ldr	r2, [pc, #128]	; (8004158 <HAL_TIM_Base_MspInit+0xb8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	4a1c      	ldr	r2, [pc, #112]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 80040e4:	f043 0310 	orr.w	r3, r3, #16
 80040e8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ea:	4b1a      	ldr	r3, [pc, #104]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
}
 80040f6:	e026      	b.n	8004146 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM7)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a17      	ldr	r2, [pc, #92]	; (800415c <HAL_TIM_Base_MspInit+0xbc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d10e      	bne.n	8004120 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	4b13      	ldr	r3, [pc, #76]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a12      	ldr	r2, [pc, #72]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 800410c:	f043 0320 	orr.w	r3, r3, #32
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	68fb      	ldr	r3, [r7, #12]
}
 800411e:	e012      	b.n	8004146 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM14)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a0e      	ldr	r2, [pc, #56]	; (8004160 <HAL_TIM_Base_MspInit+0xc0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d10d      	bne.n	8004146 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	4a08      	ldr	r2, [pc, #32]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004138:	6413      	str	r3, [r2, #64]	; 0x40
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_TIM_Base_MspInit+0xb4>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800
 8004158:	40001000 	.word	0x40001000
 800415c:	40001400 	.word	0x40001400
 8004160:	40002000 	.word	0x40002000

08004164 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800416c:	f107 0314 	add.w	r3, r7, #20
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	60da      	str	r2, [r3, #12]
 800417a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d13e      	bne.n	8004204 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	4b32      	ldr	r3, [pc, #200]	; (8004254 <HAL_TIM_MspPostInit+0xf0>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	4a31      	ldr	r2, [pc, #196]	; (8004254 <HAL_TIM_MspPostInit+0xf0>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	6313      	str	r3, [r2, #48]	; 0x30
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <HAL_TIM_MspPostInit+0xf0>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <HAL_TIM_MspPostInit+0xf0>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <HAL_TIM_MspPostInit+0xf0>)
 80041ac:	f043 0302 	orr.w	r3, r3, #2
 80041b0:	6313      	str	r3, [r2, #48]	; 0x30
 80041b2:	4b28      	ldr	r3, [pc, #160]	; (8004254 <HAL_TIM_MspPostInit+0xf0>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_2_Pin|LED_PWM_1_Pin;
 80041be:	f248 0302 	movw	r3, #32770	; 0x8002
 80041c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c4:	2302      	movs	r3, #2
 80041c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041cc:	2300      	movs	r3, #0
 80041ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041d0:	2301      	movs	r3, #1
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d4:	f107 0314 	add.w	r3, r7, #20
 80041d8:	4619      	mov	r1, r3
 80041da:	481f      	ldr	r0, [pc, #124]	; (8004258 <HAL_TIM_MspPostInit+0xf4>)
 80041dc:	f001 fa28 	bl	8005630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_PWM_3_Pin|LED_PWM_4_Pin;
 80041e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e6:	2302      	movs	r3, #2
 80041e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ee:	2300      	movs	r3, #0
 80041f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041f2:	2301      	movs	r3, #1
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f6:	f107 0314 	add.w	r3, r7, #20
 80041fa:	4619      	mov	r1, r3
 80041fc:	4817      	ldr	r0, [pc, #92]	; (800425c <HAL_TIM_MspPostInit+0xf8>)
 80041fe:	f001 fa17 	bl	8005630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004202:	e022      	b.n	800424a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM14)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a15      	ldr	r2, [pc, #84]	; (8004260 <HAL_TIM_MspPostInit+0xfc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d11d      	bne.n	800424a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <HAL_TIM_MspPostInit+0xf0>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	4a0f      	ldr	r2, [pc, #60]	; (8004254 <HAL_TIM_MspPostInit+0xf0>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6313      	str	r3, [r2, #48]	; 0x30
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <HAL_TIM_MspPostInit+0xf0>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422e:	2302      	movs	r3, #2
 8004230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004236:	2300      	movs	r3, #0
 8004238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800423a:	2309      	movs	r3, #9
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 800423e:	f107 0314 	add.w	r3, r7, #20
 8004242:	4619      	mov	r1, r3
 8004244:	4804      	ldr	r0, [pc, #16]	; (8004258 <HAL_TIM_MspPostInit+0xf4>)
 8004246:	f001 f9f3 	bl	8005630 <HAL_GPIO_Init>
}
 800424a:	bf00      	nop
 800424c:	3728      	adds	r7, #40	; 0x28
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800
 8004258:	40020000 	.word	0x40020000
 800425c:	40020400 	.word	0x40020400
 8004260:	40002000 	.word	0x40002000

08004264 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004268:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <MX_UART4_Init+0x4c>)
 800426a:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <MX_UART4_Init+0x50>)
 800426c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <MX_UART4_Init+0x4c>)
 8004270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004274:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004276:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <MX_UART4_Init+0x4c>)
 8004278:	2200      	movs	r2, #0
 800427a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <MX_UART4_Init+0x4c>)
 800427e:	2200      	movs	r2, #0
 8004280:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <MX_UART4_Init+0x4c>)
 8004284:	2200      	movs	r2, #0
 8004286:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <MX_UART4_Init+0x4c>)
 800428a:	220c      	movs	r2, #12
 800428c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <MX_UART4_Init+0x4c>)
 8004290:	2200      	movs	r2, #0
 8004292:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <MX_UART4_Init+0x4c>)
 8004296:	2200      	movs	r2, #0
 8004298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800429a:	4805      	ldr	r0, [pc, #20]	; (80042b0 <MX_UART4_Init+0x4c>)
 800429c:	f003 fb32 	bl	8007904 <HAL_UART_Init>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80042a6:	f7ff fc87 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	200004a0 	.word	0x200004a0
 80042b4:	40004c00 	.word	0x40004c00

080042b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042bc:	4b11      	ldr	r3, [pc, #68]	; (8004304 <MX_USART2_UART_Init+0x4c>)
 80042be:	4a12      	ldr	r2, [pc, #72]	; (8004308 <MX_USART2_UART_Init+0x50>)
 80042c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <MX_USART2_UART_Init+0x4c>)
 80042c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80042c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042ca:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <MX_USART2_UART_Init+0x4c>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <MX_USART2_UART_Init+0x4c>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <MX_USART2_UART_Init+0x4c>)
 80042d8:	2200      	movs	r2, #0
 80042da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <MX_USART2_UART_Init+0x4c>)
 80042de:	220c      	movs	r2, #12
 80042e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <MX_USART2_UART_Init+0x4c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <MX_USART2_UART_Init+0x4c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042ee:	4805      	ldr	r0, [pc, #20]	; (8004304 <MX_USART2_UART_Init+0x4c>)
 80042f0:	f003 fb08 	bl	8007904 <HAL_UART_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80042fa:	f7ff fc5d 	bl	8003bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200004e4 	.word	0x200004e4
 8004308:	40004400 	.word	0x40004400

0800430c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08c      	sub	sp, #48	; 0x30
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	f107 031c 	add.w	r3, r7, #28
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
 8004322:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a99      	ldr	r2, [pc, #612]	; (8004590 <HAL_UART_MspInit+0x284>)
 800432a:	4293      	cmp	r3, r2
 800432c:	f040 8094 	bne.w	8004458 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004330:	2300      	movs	r3, #0
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	4b97      	ldr	r3, [pc, #604]	; (8004594 <HAL_UART_MspInit+0x288>)
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	4a96      	ldr	r2, [pc, #600]	; (8004594 <HAL_UART_MspInit+0x288>)
 800433a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800433e:	6413      	str	r3, [r2, #64]	; 0x40
 8004340:	4b94      	ldr	r3, [pc, #592]	; (8004594 <HAL_UART_MspInit+0x288>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	4b90      	ldr	r3, [pc, #576]	; (8004594 <HAL_UART_MspInit+0x288>)
 8004352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004354:	4a8f      	ldr	r2, [pc, #572]	; (8004594 <HAL_UART_MspInit+0x288>)
 8004356:	f043 0304 	orr.w	r3, r3, #4
 800435a:	6313      	str	r3, [r2, #48]	; 0x30
 800435c:	4b8d      	ldr	r3, [pc, #564]	; (8004594 <HAL_UART_MspInit+0x288>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = JETSON_TX_Pin|JETSON_RX_Pin;
 8004368:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800436c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436e:	2302      	movs	r3, #2
 8004370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004376:	2303      	movs	r3, #3
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800437a:	2308      	movs	r3, #8
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800437e:	f107 031c 	add.w	r3, r7, #28
 8004382:	4619      	mov	r1, r3
 8004384:	4884      	ldr	r0, [pc, #528]	; (8004598 <HAL_UART_MspInit+0x28c>)
 8004386:	f001 f953 	bl	8005630 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800438a:	4b84      	ldr	r3, [pc, #528]	; (800459c <HAL_UART_MspInit+0x290>)
 800438c:	4a84      	ldr	r2, [pc, #528]	; (80045a0 <HAL_UART_MspInit+0x294>)
 800438e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004390:	4b82      	ldr	r3, [pc, #520]	; (800459c <HAL_UART_MspInit+0x290>)
 8004392:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004396:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004398:	4b80      	ldr	r3, [pc, #512]	; (800459c <HAL_UART_MspInit+0x290>)
 800439a:	2200      	movs	r2, #0
 800439c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800439e:	4b7f      	ldr	r3, [pc, #508]	; (800459c <HAL_UART_MspInit+0x290>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043a4:	4b7d      	ldr	r3, [pc, #500]	; (800459c <HAL_UART_MspInit+0x290>)
 80043a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043aa:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043ac:	4b7b      	ldr	r3, [pc, #492]	; (800459c <HAL_UART_MspInit+0x290>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043b2:	4b7a      	ldr	r3, [pc, #488]	; (800459c <HAL_UART_MspInit+0x290>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80043b8:	4b78      	ldr	r3, [pc, #480]	; (800459c <HAL_UART_MspInit+0x290>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80043be:	4b77      	ldr	r3, [pc, #476]	; (800459c <HAL_UART_MspInit+0x290>)
 80043c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043c4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043c6:	4b75      	ldr	r3, [pc, #468]	; (800459c <HAL_UART_MspInit+0x290>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80043cc:	4873      	ldr	r0, [pc, #460]	; (800459c <HAL_UART_MspInit+0x290>)
 80043ce:	f000 fd2d 	bl	8004e2c <HAL_DMA_Init>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80043d8:	f7ff fbee 	bl	8003bb8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a6f      	ldr	r2, [pc, #444]	; (800459c <HAL_UART_MspInit+0x290>)
 80043e0:	639a      	str	r2, [r3, #56]	; 0x38
 80043e2:	4a6e      	ldr	r2, [pc, #440]	; (800459c <HAL_UART_MspInit+0x290>)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80043e8:	4b6e      	ldr	r3, [pc, #440]	; (80045a4 <HAL_UART_MspInit+0x298>)
 80043ea:	4a6f      	ldr	r2, [pc, #444]	; (80045a8 <HAL_UART_MspInit+0x29c>)
 80043ec:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80043ee:	4b6d      	ldr	r3, [pc, #436]	; (80045a4 <HAL_UART_MspInit+0x298>)
 80043f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043f4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043f6:	4b6b      	ldr	r3, [pc, #428]	; (80045a4 <HAL_UART_MspInit+0x298>)
 80043f8:	2240      	movs	r2, #64	; 0x40
 80043fa:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043fc:	4b69      	ldr	r3, [pc, #420]	; (80045a4 <HAL_UART_MspInit+0x298>)
 80043fe:	2200      	movs	r2, #0
 8004400:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004402:	4b68      	ldr	r3, [pc, #416]	; (80045a4 <HAL_UART_MspInit+0x298>)
 8004404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004408:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800440a:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <HAL_UART_MspInit+0x298>)
 800440c:	2200      	movs	r2, #0
 800440e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004410:	4b64      	ldr	r3, [pc, #400]	; (80045a4 <HAL_UART_MspInit+0x298>)
 8004412:	2200      	movs	r2, #0
 8004414:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004416:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <HAL_UART_MspInit+0x298>)
 8004418:	2200      	movs	r2, #0
 800441a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800441c:	4b61      	ldr	r3, [pc, #388]	; (80045a4 <HAL_UART_MspInit+0x298>)
 800441e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004422:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004424:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <HAL_UART_MspInit+0x298>)
 8004426:	2200      	movs	r2, #0
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800442a:	485e      	ldr	r0, [pc, #376]	; (80045a4 <HAL_UART_MspInit+0x298>)
 800442c:	f000 fcfe 	bl	8004e2c <HAL_DMA_Init>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004436:	f7ff fbbf 	bl	8003bb8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a59      	ldr	r2, [pc, #356]	; (80045a4 <HAL_UART_MspInit+0x298>)
 800443e:	635a      	str	r2, [r3, #52]	; 0x34
 8004440:	4a58      	ldr	r2, [pc, #352]	; (80045a4 <HAL_UART_MspInit+0x298>)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004446:	2200      	movs	r2, #0
 8004448:	2100      	movs	r1, #0
 800444a:	2034      	movs	r0, #52	; 0x34
 800444c:	f000 fcb7 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004450:	2034      	movs	r0, #52	; 0x34
 8004452:	f000 fcd0 	bl	8004df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004456:	e097      	b.n	8004588 <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART2)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a53      	ldr	r2, [pc, #332]	; (80045ac <HAL_UART_MspInit+0x2a0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	f040 8092 	bne.w	8004588 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004464:	2300      	movs	r3, #0
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	4b4a      	ldr	r3, [pc, #296]	; (8004594 <HAL_UART_MspInit+0x288>)
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	4a49      	ldr	r2, [pc, #292]	; (8004594 <HAL_UART_MspInit+0x288>)
 800446e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004472:	6413      	str	r3, [r2, #64]	; 0x40
 8004474:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_UART_MspInit+0x288>)
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	4b43      	ldr	r3, [pc, #268]	; (8004594 <HAL_UART_MspInit+0x288>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	4a42      	ldr	r2, [pc, #264]	; (8004594 <HAL_UART_MspInit+0x288>)
 800448a:	f043 0308 	orr.w	r3, r3, #8
 800448e:	6313      	str	r3, [r2, #48]	; 0x30
 8004490:	4b40      	ldr	r3, [pc, #256]	; (8004594 <HAL_UART_MspInit+0x288>)
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYROSCOOTER_TX_Pin|GYROSCOOTER_RX_Pin;
 800449c:	2360      	movs	r3, #96	; 0x60
 800449e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a0:	2302      	movs	r3, #2
 80044a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a8:	2303      	movs	r3, #3
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044ac:	2307      	movs	r3, #7
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044b0:	f107 031c 	add.w	r3, r7, #28
 80044b4:	4619      	mov	r1, r3
 80044b6:	483e      	ldr	r0, [pc, #248]	; (80045b0 <HAL_UART_MspInit+0x2a4>)
 80044b8:	f001 f8ba 	bl	8005630 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80044bc:	4b3d      	ldr	r3, [pc, #244]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 80044be:	4a3e      	ldr	r2, [pc, #248]	; (80045b8 <HAL_UART_MspInit+0x2ac>)
 80044c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80044c2:	4b3c      	ldr	r3, [pc, #240]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 80044c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044ca:	4b3a      	ldr	r3, [pc, #232]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044d0:	4b38      	ldr	r3, [pc, #224]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 80044d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044de:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044e4:	4b33      	ldr	r3, [pc, #204]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80044ea:	4b32      	ldr	r3, [pc, #200]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80044f0:	4b30      	ldr	r3, [pc, #192]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 80044f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044f6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044f8:	4b2e      	ldr	r3, [pc, #184]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80044fe:	482d      	ldr	r0, [pc, #180]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 8004500:	f000 fc94 	bl	8004e2c <HAL_DMA_Init>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_UART_MspInit+0x202>
      Error_Handler();
 800450a:	f7ff fb55 	bl	8003bb8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a28      	ldr	r2, [pc, #160]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
 8004514:	4a27      	ldr	r2, [pc, #156]	; (80045b4 <HAL_UART_MspInit+0x2a8>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800451a:	4b28      	ldr	r3, [pc, #160]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 800451c:	4a28      	ldr	r2, [pc, #160]	; (80045c0 <HAL_UART_MspInit+0x2b4>)
 800451e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004520:	4b26      	ldr	r3, [pc, #152]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 8004522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004526:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004528:	4b24      	ldr	r3, [pc, #144]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 800452a:	2240      	movs	r2, #64	; 0x40
 800452c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800452e:	4b23      	ldr	r3, [pc, #140]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 8004530:	2200      	movs	r2, #0
 8004532:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004534:	4b21      	ldr	r3, [pc, #132]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 8004536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800453a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800453c:	4b1f      	ldr	r3, [pc, #124]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 800453e:	2200      	movs	r2, #0
 8004540:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004542:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 8004544:	2200      	movs	r2, #0
 8004546:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 800454a:	2200      	movs	r2, #0
 800454c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800454e:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 8004550:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004554:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004556:	4b19      	ldr	r3, [pc, #100]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 8004558:	2200      	movs	r2, #0
 800455a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800455c:	4817      	ldr	r0, [pc, #92]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 800455e:	f000 fc65 	bl	8004e2c <HAL_DMA_Init>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <HAL_UART_MspInit+0x260>
      Error_Handler();
 8004568:	f7ff fb26 	bl	8003bb8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a13      	ldr	r2, [pc, #76]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 8004570:	635a      	str	r2, [r3, #52]	; 0x34
 8004572:	4a12      	ldr	r2, [pc, #72]	; (80045bc <HAL_UART_MspInit+0x2b0>)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004578:	2200      	movs	r2, #0
 800457a:	2100      	movs	r1, #0
 800457c:	2026      	movs	r0, #38	; 0x26
 800457e:	f000 fc1e 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004582:	2026      	movs	r0, #38	; 0x26
 8004584:	f000 fc37 	bl	8004df6 <HAL_NVIC_EnableIRQ>
}
 8004588:	bf00      	nop
 800458a:	3730      	adds	r7, #48	; 0x30
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40004c00 	.word	0x40004c00
 8004594:	40023800 	.word	0x40023800
 8004598:	40020800 	.word	0x40020800
 800459c:	20000380 	.word	0x20000380
 80045a0:	40026040 	.word	0x40026040
 80045a4:	20000528 	.word	0x20000528
 80045a8:	40026070 	.word	0x40026070
 80045ac:	40004400 	.word	0x40004400
 80045b0:	40020c00 	.word	0x40020c00
 80045b4:	200003e0 	.word	0x200003e0
 80045b8:	40026088 	.word	0x40026088
 80045bc:	20000440 	.word	0x20000440
 80045c0:	400260a0 	.word	0x400260a0

080045c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80045c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045c8:	480d      	ldr	r0, [pc, #52]	; (8004600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80045ca:	490e      	ldr	r1, [pc, #56]	; (8004604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80045cc:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045d0:	e002      	b.n	80045d8 <LoopCopyDataInit>

080045d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045d6:	3304      	adds	r3, #4

080045d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045dc:	d3f9      	bcc.n	80045d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045de:	4a0b      	ldr	r2, [pc, #44]	; (800460c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045e0:	4c0b      	ldr	r4, [pc, #44]	; (8004610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80045e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045e4:	e001      	b.n	80045ea <LoopFillZerobss>

080045e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045e8:	3204      	adds	r2, #4

080045ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045ec:	d3fb      	bcc.n	80045e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045ee:	f7ff fbf5 	bl	8003ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045f2:	f004 fd63 	bl	80090bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045f6:	f7fe fc7d 	bl	8002ef4 <main>
  bx  lr    
 80045fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80045fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004604:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004608:	080091bc 	.word	0x080091bc
  ldr r2, =_sbss
 800460c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004610:	2000058c 	.word	0x2000058c

08004614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004614:	e7fe      	b.n	8004614 <ADC_IRQHandler>
	...

08004618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <HAL_Init+0x40>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0d      	ldr	r2, [pc, #52]	; (8004658 <HAL_Init+0x40>)
 8004622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_Init+0x40>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <HAL_Init+0x40>)
 800462e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004634:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_Init+0x40>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a07      	ldr	r2, [pc, #28]	; (8004658 <HAL_Init+0x40>)
 800463a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004640:	2003      	movs	r0, #3
 8004642:	f000 fbb1 	bl	8004da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004646:	200f      	movs	r0, #15
 8004648:	f000 f808 	bl	800465c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800464c:	f7ff fb38 	bl	8003cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40023c00 	.word	0x40023c00

0800465c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004664:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_InitTick+0x54>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_InitTick+0x58>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	4619      	mov	r1, r3
 800466e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004672:	fbb3 f3f1 	udiv	r3, r3, r1
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fbc9 	bl	8004e12 <HAL_SYSTICK_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e00e      	b.n	80046a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b0f      	cmp	r3, #15
 800468e:	d80a      	bhi.n	80046a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004690:	2200      	movs	r2, #0
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	f000 fb91 	bl	8004dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800469c:	4a06      	ldr	r2, [pc, #24]	; (80046b8 <HAL_InitTick+0x5c>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e000      	b.n	80046a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000004 	.word	0x20000004
 80046b4:	2000000c 	.word	0x2000000c
 80046b8:	20000008 	.word	0x20000008

080046bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_IncTick+0x20>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_IncTick+0x24>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4413      	add	r3, r2
 80046cc:	4a04      	ldr	r2, [pc, #16]	; (80046e0 <HAL_IncTick+0x24>)
 80046ce:	6013      	str	r3, [r2, #0]
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	2000000c 	.word	0x2000000c
 80046e0:	20000588 	.word	0x20000588

080046e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return uwTick;
 80046e8:	4b03      	ldr	r3, [pc, #12]	; (80046f8 <HAL_GetTick+0x14>)
 80046ea:	681b      	ldr	r3, [r3, #0]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000588 	.word	0x20000588

080046fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff ffee 	bl	80046e4 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d005      	beq.n	8004722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_Delay+0x44>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004722:	bf00      	nop
 8004724:	f7ff ffde 	bl	80046e4 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	429a      	cmp	r2, r3
 8004732:	d8f7      	bhi.n	8004724 <HAL_Delay+0x28>
  {
  }
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	2000000c 	.word	0x2000000c

08004744 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e033      	b.n	80047c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fe f970 	bl	8002a48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b00      	cmp	r3, #0
 8004780:	d118      	bne.n	80047b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800478a:	f023 0302 	bic.w	r3, r3, #2
 800478e:	f043 0202 	orr.w	r2, r3, #2
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f93a 	bl	8004a10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f023 0303 	bic.w	r3, r3, #3
 80047aa:	f043 0201 	orr.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	641a      	str	r2, [r3, #64]	; 0x40
 80047b2:	e001      	b.n	80047b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x1c>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e105      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x228>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b09      	cmp	r3, #9
 80047f6:	d925      	bls.n	8004844 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68d9      	ldr	r1, [r3, #12]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	4613      	mov	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	4413      	add	r3, r2
 800480c:	3b1e      	subs	r3, #30
 800480e:	2207      	movs	r2, #7
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43da      	mvns	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	400a      	ands	r2, r1
 800481c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68d9      	ldr	r1, [r3, #12]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	4618      	mov	r0, r3
 8004830:	4603      	mov	r3, r0
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4403      	add	r3, r0
 8004836:	3b1e      	subs	r3, #30
 8004838:	409a      	lsls	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	60da      	str	r2, [r3, #12]
 8004842:	e022      	b.n	800488a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6919      	ldr	r1, [r3, #16]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	2207      	movs	r2, #7
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43da      	mvns	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	400a      	ands	r2, r1
 8004866:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6919      	ldr	r1, [r3, #16]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	4618      	mov	r0, r3
 800487a:	4603      	mov	r3, r0
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	4403      	add	r3, r0
 8004880:	409a      	lsls	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b06      	cmp	r3, #6
 8004890:	d824      	bhi.n	80048dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	3b05      	subs	r3, #5
 80048a4:	221f      	movs	r2, #31
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43da      	mvns	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	400a      	ands	r2, r1
 80048b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	4618      	mov	r0, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	3b05      	subs	r3, #5
 80048ce:	fa00 f203 	lsl.w	r2, r0, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	635a      	str	r2, [r3, #52]	; 0x34
 80048da:	e04c      	b.n	8004976 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b0c      	cmp	r3, #12
 80048e2:	d824      	bhi.n	800492e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	3b23      	subs	r3, #35	; 0x23
 80048f6:	221f      	movs	r2, #31
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43da      	mvns	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	400a      	ands	r2, r1
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	4618      	mov	r0, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	3b23      	subs	r3, #35	; 0x23
 8004920:	fa00 f203 	lsl.w	r2, r0, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
 800492c:	e023      	b.n	8004976 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	3b41      	subs	r3, #65	; 0x41
 8004940:	221f      	movs	r2, #31
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	43da      	mvns	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	400a      	ands	r2, r1
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	4618      	mov	r0, r3
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	3b41      	subs	r3, #65	; 0x41
 800496a:	fa00 f203 	lsl.w	r2, r0, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004976:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <HAL_ADC_ConfigChannel+0x234>)
 8004978:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <HAL_ADC_ConfigChannel+0x238>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d109      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x1cc>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b12      	cmp	r3, #18
 800498a:	d105      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a19      	ldr	r2, [pc, #100]	; (8004a04 <HAL_ADC_ConfigChannel+0x238>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d123      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x21e>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d003      	beq.n	80049b2 <HAL_ADC_ConfigChannel+0x1e6>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b11      	cmp	r3, #17
 80049b0:	d11b      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d111      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049c6:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <HAL_ADC_ConfigChannel+0x23c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <HAL_ADC_ConfigChannel+0x240>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	0c9a      	lsrs	r2, r3, #18
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049dc:	e002      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f9      	bne.n	80049de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40012300 	.word	0x40012300
 8004a04:	40012000 	.word	0x40012000
 8004a08:	20000004 	.word	0x20000004
 8004a0c:	431bde83 	.word	0x431bde83

08004a10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a18:	4b79      	ldr	r3, [pc, #484]	; (8004c00 <ADC_Init+0x1f0>)
 8004a1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6859      	ldr	r1, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	021a      	lsls	r2, r3, #8
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6859      	ldr	r1, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6899      	ldr	r1, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	4a58      	ldr	r2, [pc, #352]	; (8004c04 <ADC_Init+0x1f4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d022      	beq.n	8004aee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ab6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6899      	ldr	r1, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6899      	ldr	r1, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	e00f      	b.n	8004b0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0202 	bic.w	r2, r2, #2
 8004b1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6899      	ldr	r1, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	7e1b      	ldrb	r3, [r3, #24]
 8004b28:	005a      	lsls	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01b      	beq.n	8004b74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6859      	ldr	r1, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	3b01      	subs	r3, #1
 8004b68:	035a      	lsls	r2, r3, #13
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
 8004b72:	e007      	b.n	8004b84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	051a      	lsls	r2, r3, #20
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6899      	ldr	r1, [r3, #8]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bc6:	025a      	lsls	r2, r3, #9
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6899      	ldr	r1, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	029a      	lsls	r2, r3, #10
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	40012300 	.word	0x40012300
 8004c04:	0f000001 	.word	0x0f000001

08004c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c18:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <__NVIC_SetPriorityGrouping+0x44>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c24:	4013      	ands	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c3a:	4a04      	ldr	r2, [pc, #16]	; (8004c4c <__NVIC_SetPriorityGrouping+0x44>)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	60d3      	str	r3, [r2, #12]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	e000ed00 	.word	0xe000ed00

08004c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c54:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <__NVIC_GetPriorityGrouping+0x18>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	f003 0307 	and.w	r3, r3, #7
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	e000ed00 	.word	0xe000ed00

08004c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	db0b      	blt.n	8004c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	f003 021f 	and.w	r2, r3, #31
 8004c84:	4907      	ldr	r1, [pc, #28]	; (8004ca4 <__NVIC_EnableIRQ+0x38>)
 8004c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	2001      	movs	r0, #1
 8004c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	e000e100 	.word	0xe000e100

08004ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	6039      	str	r1, [r7, #0]
 8004cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	db0a      	blt.n	8004cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	490c      	ldr	r1, [pc, #48]	; (8004cf4 <__NVIC_SetPriority+0x4c>)
 8004cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc6:	0112      	lsls	r2, r2, #4
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	440b      	add	r3, r1
 8004ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cd0:	e00a      	b.n	8004ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	4908      	ldr	r1, [pc, #32]	; (8004cf8 <__NVIC_SetPriority+0x50>)
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	3b04      	subs	r3, #4
 8004ce0:	0112      	lsls	r2, r2, #4
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	761a      	strb	r2, [r3, #24]
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	e000e100 	.word	0xe000e100
 8004cf8:	e000ed00 	.word	0xe000ed00

08004cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b089      	sub	sp, #36	; 0x24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f1c3 0307 	rsb	r3, r3, #7
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	bf28      	it	cs
 8004d1a:	2304      	movcs	r3, #4
 8004d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	3304      	adds	r3, #4
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d902      	bls.n	8004d2c <NVIC_EncodePriority+0x30>
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	3b03      	subs	r3, #3
 8004d2a:	e000      	b.n	8004d2e <NVIC_EncodePriority+0x32>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d30:	f04f 32ff 	mov.w	r2, #4294967295
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43da      	mvns	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	401a      	ands	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d44:	f04f 31ff 	mov.w	r1, #4294967295
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4e:	43d9      	mvns	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d54:	4313      	orrs	r3, r2
         );
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3724      	adds	r7, #36	; 0x24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d74:	d301      	bcc.n	8004d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d76:	2301      	movs	r3, #1
 8004d78:	e00f      	b.n	8004d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <SysTick_Config+0x40>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d82:	210f      	movs	r1, #15
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295
 8004d88:	f7ff ff8e 	bl	8004ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <SysTick_Config+0x40>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d92:	4b04      	ldr	r3, [pc, #16]	; (8004da4 <SysTick_Config+0x40>)
 8004d94:	2207      	movs	r2, #7
 8004d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	e000e010 	.word	0xe000e010

08004da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff29 	bl	8004c08 <__NVIC_SetPriorityGrouping>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b086      	sub	sp, #24
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dd0:	f7ff ff3e 	bl	8004c50 <__NVIC_GetPriorityGrouping>
 8004dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	6978      	ldr	r0, [r7, #20]
 8004ddc:	f7ff ff8e 	bl	8004cfc <NVIC_EncodePriority>
 8004de0:	4602      	mov	r2, r0
 8004de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff5d 	bl	8004ca8 <__NVIC_SetPriority>
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff31 	bl	8004c6c <__NVIC_EnableIRQ>
}
 8004e0a:	bf00      	nop
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff ffa2 	bl	8004d64 <SysTick_Config>
 8004e20:	4603      	mov	r3, r0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e38:	f7ff fc54 	bl	80046e4 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e099      	b.n	8004f7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e68:	e00f      	b.n	8004e8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e6a:	f7ff fc3b 	bl	80046e4 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b05      	cmp	r3, #5
 8004e76:	d908      	bls.n	8004e8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2203      	movs	r2, #3
 8004e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e078      	b.n	8004f7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e8      	bne.n	8004e6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4b38      	ldr	r3, [pc, #224]	; (8004f84 <HAL_DMA_Init+0x158>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d107      	bne.n	8004ef4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	4313      	orrs	r3, r2
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0307 	bic.w	r3, r3, #7
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d117      	bne.n	8004f4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00e      	beq.n	8004f4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fb01 	bl	8005538 <DMA_CheckFifoParam>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2240      	movs	r2, #64	; 0x40
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e016      	b.n	8004f7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fab8 	bl	80054cc <DMA_CalcBaseAndBitshift>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f64:	223f      	movs	r2, #63	; 0x3f
 8004f66:	409a      	lsls	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	f010803f 	.word	0xf010803f

08004f88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_DMA_Start_IT+0x26>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e040      	b.n	8005030 <HAL_DMA_Start_IT+0xa8>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d12f      	bne.n	8005022 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 fa4a 	bl	8005470 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe0:	223f      	movs	r2, #63	; 0x3f
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0216 	orr.w	r2, r2, #22
 8004ff6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0208 	orr.w	r2, r2, #8
 800500e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0201 	orr.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e005      	b.n	800502e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800502a:	2302      	movs	r3, #2
 800502c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800502e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005046:	f7ff fb4d 	bl	80046e4 <HAL_GetTick>
 800504a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d008      	beq.n	800506a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2280      	movs	r2, #128	; 0x80
 800505c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e052      	b.n	8005110 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0216 	bic.w	r2, r2, #22
 8005078:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005088:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <HAL_DMA_Abort+0x62>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0208 	bic.w	r2, r2, #8
 80050a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ba:	e013      	b.n	80050e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050bc:	f7ff fb12 	bl	80046e4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b05      	cmp	r3, #5
 80050c8:	d90c      	bls.n	80050e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2203      	movs	r2, #3
 80050d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e015      	b.n	8005110 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e4      	bne.n	80050bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f6:	223f      	movs	r2, #63	; 0x3f
 80050f8:	409a      	lsls	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d004      	beq.n	8005136 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2280      	movs	r2, #128	; 0x80
 8005130:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e00c      	b.n	8005150 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2205      	movs	r2, #5
 800513a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005168:	4b92      	ldr	r3, [pc, #584]	; (80053b4 <HAL_DMA_IRQHandler+0x258>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a92      	ldr	r2, [pc, #584]	; (80053b8 <HAL_DMA_IRQHandler+0x25c>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	0a9b      	lsrs	r3, r3, #10
 8005174:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005186:	2208      	movs	r2, #8
 8005188:	409a      	lsls	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01a      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	d013      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0204 	bic.w	r2, r2, #4
 80051ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b4:	2208      	movs	r2, #8
 80051b6:	409a      	lsls	r2, r3
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	f043 0201 	orr.w	r2, r3, #1
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051cc:	2201      	movs	r2, #1
 80051ce:	409a      	lsls	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d012      	beq.n	80051fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00b      	beq.n	80051fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ea:	2201      	movs	r2, #1
 80051ec:	409a      	lsls	r2, r3
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f6:	f043 0202 	orr.w	r2, r3, #2
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005202:	2204      	movs	r2, #4
 8005204:	409a      	lsls	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4013      	ands	r3, r2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d012      	beq.n	8005234 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00b      	beq.n	8005234 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005220:	2204      	movs	r2, #4
 8005222:	409a      	lsls	r2, r3
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522c:	f043 0204 	orr.w	r2, r3, #4
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005238:	2210      	movs	r2, #16
 800523a:	409a      	lsls	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4013      	ands	r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d043      	beq.n	80052cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d03c      	beq.n	80052cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005256:	2210      	movs	r2, #16
 8005258:	409a      	lsls	r2, r3
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d018      	beq.n	800529e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d108      	bne.n	800528c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d024      	beq.n	80052cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
 800528a:	e01f      	b.n	80052cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01b      	beq.n	80052cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	4798      	blx	r3
 800529c:	e016      	b.n	80052cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d107      	bne.n	80052bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0208 	bic.w	r2, r2, #8
 80052ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	2220      	movs	r2, #32
 80052d2:	409a      	lsls	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 808e 	beq.w	80053fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8086 	beq.w	80053fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f2:	2220      	movs	r2, #32
 80052f4:	409a      	lsls	r2, r3
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b05      	cmp	r3, #5
 8005304:	d136      	bne.n	8005374 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0216 	bic.w	r2, r2, #22
 8005314:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695a      	ldr	r2, [r3, #20]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005324:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d103      	bne.n	8005336 <HAL_DMA_IRQHandler+0x1da>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0208 	bic.w	r2, r2, #8
 8005344:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534a:	223f      	movs	r2, #63	; 0x3f
 800534c:	409a      	lsls	r2, r3
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005366:	2b00      	cmp	r3, #0
 8005368:	d07d      	beq.n	8005466 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	4798      	blx	r3
        }
        return;
 8005372:	e078      	b.n	8005466 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01c      	beq.n	80053bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d108      	bne.n	80053a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005394:	2b00      	cmp	r3, #0
 8005396:	d030      	beq.n	80053fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	4798      	blx	r3
 80053a0:	e02b      	b.n	80053fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d027      	beq.n	80053fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
 80053b2:	e022      	b.n	80053fa <HAL_DMA_IRQHandler+0x29e>
 80053b4:	20000004 	.word	0x20000004
 80053b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10f      	bne.n	80053ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0210 	bic.w	r2, r2, #16
 80053d8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d032      	beq.n	8005468 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d022      	beq.n	8005454 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2205      	movs	r2, #5
 8005412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	3301      	adds	r3, #1
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	429a      	cmp	r2, r3
 8005430:	d307      	bcc.n	8005442 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1f2      	bne.n	8005426 <HAL_DMA_IRQHandler+0x2ca>
 8005440:	e000      	b.n	8005444 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005442:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	4798      	blx	r3
 8005464:	e000      	b.n	8005468 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005466:	bf00      	nop
    }
  }
}
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop

08005470 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800548c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d108      	bne.n	80054b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054ae:	e007      	b.n	80054c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	60da      	str	r2, [r3, #12]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	3b10      	subs	r3, #16
 80054dc:	4a14      	ldr	r2, [pc, #80]	; (8005530 <DMA_CalcBaseAndBitshift+0x64>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	091b      	lsrs	r3, r3, #4
 80054e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054e6:	4a13      	ldr	r2, [pc, #76]	; (8005534 <DMA_CalcBaseAndBitshift+0x68>)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d909      	bls.n	800550e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005502:	f023 0303 	bic.w	r3, r3, #3
 8005506:	1d1a      	adds	r2, r3, #4
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	659a      	str	r2, [r3, #88]	; 0x58
 800550c:	e007      	b.n	800551e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	aaaaaaab 	.word	0xaaaaaaab
 8005534:	08009168 	.word	0x08009168

08005538 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d11f      	bne.n	8005592 <DMA_CheckFifoParam+0x5a>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d856      	bhi.n	8005606 <DMA_CheckFifoParam+0xce>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <DMA_CheckFifoParam+0x28>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	08005571 	.word	0x08005571
 8005564:	08005583 	.word	0x08005583
 8005568:	08005571 	.word	0x08005571
 800556c:	08005607 	.word	0x08005607
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d046      	beq.n	800560a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005580:	e043      	b.n	800560a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800558a:	d140      	bne.n	800560e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005590:	e03d      	b.n	800560e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800559a:	d121      	bne.n	80055e0 <DMA_CheckFifoParam+0xa8>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d837      	bhi.n	8005612 <DMA_CheckFifoParam+0xda>
 80055a2:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <DMA_CheckFifoParam+0x70>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	080055b9 	.word	0x080055b9
 80055ac:	080055bf 	.word	0x080055bf
 80055b0:	080055b9 	.word	0x080055b9
 80055b4:	080055d1 	.word	0x080055d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
      break;
 80055bc:	e030      	b.n	8005620 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d025      	beq.n	8005616 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ce:	e022      	b.n	8005616 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055d8:	d11f      	bne.n	800561a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80055de:	e01c      	b.n	800561a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d903      	bls.n	80055ee <DMA_CheckFifoParam+0xb6>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d003      	beq.n	80055f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055ec:	e018      	b.n	8005620 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
      break;
 80055f2:	e015      	b.n	8005620 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00e      	beq.n	800561e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
      break;
 8005604:	e00b      	b.n	800561e <DMA_CheckFifoParam+0xe6>
      break;
 8005606:	bf00      	nop
 8005608:	e00a      	b.n	8005620 <DMA_CheckFifoParam+0xe8>
      break;
 800560a:	bf00      	nop
 800560c:	e008      	b.n	8005620 <DMA_CheckFifoParam+0xe8>
      break;
 800560e:	bf00      	nop
 8005610:	e006      	b.n	8005620 <DMA_CheckFifoParam+0xe8>
      break;
 8005612:	bf00      	nop
 8005614:	e004      	b.n	8005620 <DMA_CheckFifoParam+0xe8>
      break;
 8005616:	bf00      	nop
 8005618:	e002      	b.n	8005620 <DMA_CheckFifoParam+0xe8>
      break;   
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <DMA_CheckFifoParam+0xe8>
      break;
 800561e:	bf00      	nop
    }
  } 
  
  return status; 
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop

08005630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005630:	b480      	push	{r7}
 8005632:	b089      	sub	sp, #36	; 0x24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	e16b      	b.n	8005924 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800564c:	2201      	movs	r2, #1
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4013      	ands	r3, r2
 800565e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	429a      	cmp	r2, r3
 8005666:	f040 815a 	bne.w	800591e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d005      	beq.n	8005682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800567e:	2b02      	cmp	r3, #2
 8005680:	d130      	bne.n	80056e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	2203      	movs	r2, #3
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	43db      	mvns	r3, r3
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	4013      	ands	r3, r2
 8005698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	fa02 f303 	lsl.w	r3, r2, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056b8:	2201      	movs	r2, #1
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	f003 0201 	and.w	r2, r3, #1
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4313      	orrs	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d017      	beq.n	8005720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	2203      	movs	r2, #3
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	43db      	mvns	r3, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	4013      	ands	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	fa02 f303 	lsl.w	r3, r2, r3
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	4313      	orrs	r3, r2
 8005718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 0303 	and.w	r3, r3, #3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d123      	bne.n	8005774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	08da      	lsrs	r2, r3, #3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3208      	adds	r2, #8
 8005734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	f003 0307 	and.w	r3, r3, #7
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	220f      	movs	r2, #15
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	08da      	lsrs	r2, r3, #3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3208      	adds	r2, #8
 800576e:	69b9      	ldr	r1, [r7, #24]
 8005770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	2203      	movs	r2, #3
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 0203 	and.w	r2, r3, #3
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 80b4 	beq.w	800591e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	4b60      	ldr	r3, [pc, #384]	; (800593c <HAL_GPIO_Init+0x30c>)
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	4a5f      	ldr	r2, [pc, #380]	; (800593c <HAL_GPIO_Init+0x30c>)
 80057c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057c4:	6453      	str	r3, [r2, #68]	; 0x44
 80057c6:	4b5d      	ldr	r3, [pc, #372]	; (800593c <HAL_GPIO_Init+0x30c>)
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057d2:	4a5b      	ldr	r2, [pc, #364]	; (8005940 <HAL_GPIO_Init+0x310>)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	089b      	lsrs	r3, r3, #2
 80057d8:	3302      	adds	r3, #2
 80057da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	220f      	movs	r2, #15
 80057ea:	fa02 f303 	lsl.w	r3, r2, r3
 80057ee:	43db      	mvns	r3, r3
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4013      	ands	r3, r2
 80057f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a52      	ldr	r2, [pc, #328]	; (8005944 <HAL_GPIO_Init+0x314>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d02b      	beq.n	8005856 <HAL_GPIO_Init+0x226>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a51      	ldr	r2, [pc, #324]	; (8005948 <HAL_GPIO_Init+0x318>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d025      	beq.n	8005852 <HAL_GPIO_Init+0x222>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a50      	ldr	r2, [pc, #320]	; (800594c <HAL_GPIO_Init+0x31c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d01f      	beq.n	800584e <HAL_GPIO_Init+0x21e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a4f      	ldr	r2, [pc, #316]	; (8005950 <HAL_GPIO_Init+0x320>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d019      	beq.n	800584a <HAL_GPIO_Init+0x21a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a4e      	ldr	r2, [pc, #312]	; (8005954 <HAL_GPIO_Init+0x324>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <HAL_GPIO_Init+0x216>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a4d      	ldr	r2, [pc, #308]	; (8005958 <HAL_GPIO_Init+0x328>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00d      	beq.n	8005842 <HAL_GPIO_Init+0x212>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a4c      	ldr	r2, [pc, #304]	; (800595c <HAL_GPIO_Init+0x32c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d007      	beq.n	800583e <HAL_GPIO_Init+0x20e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a4b      	ldr	r2, [pc, #300]	; (8005960 <HAL_GPIO_Init+0x330>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d101      	bne.n	800583a <HAL_GPIO_Init+0x20a>
 8005836:	2307      	movs	r3, #7
 8005838:	e00e      	b.n	8005858 <HAL_GPIO_Init+0x228>
 800583a:	2308      	movs	r3, #8
 800583c:	e00c      	b.n	8005858 <HAL_GPIO_Init+0x228>
 800583e:	2306      	movs	r3, #6
 8005840:	e00a      	b.n	8005858 <HAL_GPIO_Init+0x228>
 8005842:	2305      	movs	r3, #5
 8005844:	e008      	b.n	8005858 <HAL_GPIO_Init+0x228>
 8005846:	2304      	movs	r3, #4
 8005848:	e006      	b.n	8005858 <HAL_GPIO_Init+0x228>
 800584a:	2303      	movs	r3, #3
 800584c:	e004      	b.n	8005858 <HAL_GPIO_Init+0x228>
 800584e:	2302      	movs	r3, #2
 8005850:	e002      	b.n	8005858 <HAL_GPIO_Init+0x228>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <HAL_GPIO_Init+0x228>
 8005856:	2300      	movs	r3, #0
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	f002 0203 	and.w	r2, r2, #3
 800585e:	0092      	lsls	r2, r2, #2
 8005860:	4093      	lsls	r3, r2
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4313      	orrs	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005868:	4935      	ldr	r1, [pc, #212]	; (8005940 <HAL_GPIO_Init+0x310>)
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	089b      	lsrs	r3, r3, #2
 800586e:	3302      	adds	r3, #2
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005876:	4b3b      	ldr	r3, [pc, #236]	; (8005964 <HAL_GPIO_Init+0x334>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	43db      	mvns	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800589a:	4a32      	ldr	r2, [pc, #200]	; (8005964 <HAL_GPIO_Init+0x334>)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80058a0:	4b30      	ldr	r3, [pc, #192]	; (8005964 <HAL_GPIO_Init+0x334>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4013      	ands	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058c4:	4a27      	ldr	r2, [pc, #156]	; (8005964 <HAL_GPIO_Init+0x334>)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058ca:	4b26      	ldr	r3, [pc, #152]	; (8005964 <HAL_GPIO_Init+0x334>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	43db      	mvns	r3, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4013      	ands	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058ee:	4a1d      	ldr	r2, [pc, #116]	; (8005964 <HAL_GPIO_Init+0x334>)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <HAL_GPIO_Init+0x334>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005918:	4a12      	ldr	r2, [pc, #72]	; (8005964 <HAL_GPIO_Init+0x334>)
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	3301      	adds	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b0f      	cmp	r3, #15
 8005928:	f67f ae90 	bls.w	800564c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	3724      	adds	r7, #36	; 0x24
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40023800 	.word	0x40023800
 8005940:	40013800 	.word	0x40013800
 8005944:	40020000 	.word	0x40020000
 8005948:	40020400 	.word	0x40020400
 800594c:	40020800 	.word	0x40020800
 8005950:	40020c00 	.word	0x40020c00
 8005954:	40021000 	.word	0x40021000
 8005958:	40021400 	.word	0x40021400
 800595c:	40021800 	.word	0x40021800
 8005960:	40021c00 	.word	0x40021c00
 8005964:	40013c00 	.word	0x40013c00

08005968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	807b      	strh	r3, [r7, #2]
 8005974:	4613      	mov	r3, r2
 8005976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005978:	787b      	ldrb	r3, [r7, #1]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800597e:	887a      	ldrh	r2, [r7, #2]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005984:	e003      	b.n	800598e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005986:	887b      	ldrh	r3, [r7, #2]
 8005988:	041a      	lsls	r2, r3, #16
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	619a      	str	r2, [r3, #24]
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e264      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d075      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ba:	4ba3      	ldr	r3, [pc, #652]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d00c      	beq.n	80059e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059c6:	4ba0      	ldr	r3, [pc, #640]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d112      	bne.n	80059f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059d2:	4b9d      	ldr	r3, [pc, #628]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059de:	d10b      	bne.n	80059f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e0:	4b99      	ldr	r3, [pc, #612]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d05b      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x108>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d157      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e23f      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a00:	d106      	bne.n	8005a10 <HAL_RCC_OscConfig+0x74>
 8005a02:	4b91      	ldr	r3, [pc, #580]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a90      	ldr	r2, [pc, #576]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e01d      	b.n	8005a4c <HAL_RCC_OscConfig+0xb0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a18:	d10c      	bne.n	8005a34 <HAL_RCC_OscConfig+0x98>
 8005a1a:	4b8b      	ldr	r3, [pc, #556]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a8a      	ldr	r2, [pc, #552]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b88      	ldr	r3, [pc, #544]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a87      	ldr	r2, [pc, #540]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e00b      	b.n	8005a4c <HAL_RCC_OscConfig+0xb0>
 8005a34:	4b84      	ldr	r3, [pc, #528]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a83      	ldr	r2, [pc, #524]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	4b81      	ldr	r3, [pc, #516]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a80      	ldr	r2, [pc, #512]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d013      	beq.n	8005a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a54:	f7fe fe46 	bl	80046e4 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a5c:	f7fe fe42 	bl	80046e4 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b64      	cmp	r3, #100	; 0x64
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e204      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a6e:	4b76      	ldr	r3, [pc, #472]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0f0      	beq.n	8005a5c <HAL_RCC_OscConfig+0xc0>
 8005a7a:	e014      	b.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7c:	f7fe fe32 	bl	80046e4 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a84:	f7fe fe2e 	bl	80046e4 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b64      	cmp	r3, #100	; 0x64
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e1f0      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a96:	4b6c      	ldr	r3, [pc, #432]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0xe8>
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d063      	beq.n	8005b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ab2:	4b65      	ldr	r3, [pc, #404]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005abe:	4b62      	ldr	r3, [pc, #392]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d11c      	bne.n	8005b04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aca:	4b5f      	ldr	r3, [pc, #380]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d116      	bne.n	8005b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ad6:	4b5c      	ldr	r3, [pc, #368]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_RCC_OscConfig+0x152>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d001      	beq.n	8005aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e1c4      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aee:	4b56      	ldr	r3, [pc, #344]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4952      	ldr	r1, [pc, #328]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b02:	e03a      	b.n	8005b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d020      	beq.n	8005b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b0c:	4b4f      	ldr	r3, [pc, #316]	; (8005c4c <HAL_RCC_OscConfig+0x2b0>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b12:	f7fe fde7 	bl	80046e4 <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b1a:	f7fe fde3 	bl	80046e4 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e1a5      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b2c:	4b46      	ldr	r3, [pc, #280]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0f0      	beq.n	8005b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b38:	4b43      	ldr	r3, [pc, #268]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4940      	ldr	r1, [pc, #256]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	600b      	str	r3, [r1, #0]
 8005b4c:	e015      	b.n	8005b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b4e:	4b3f      	ldr	r3, [pc, #252]	; (8005c4c <HAL_RCC_OscConfig+0x2b0>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7fe fdc6 	bl	80046e4 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b5c:	f7fe fdc2 	bl	80046e4 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e184      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b6e:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d030      	beq.n	8005be8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d016      	beq.n	8005bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b8e:	4b30      	ldr	r3, [pc, #192]	; (8005c50 <HAL_RCC_OscConfig+0x2b4>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b94:	f7fe fda6 	bl	80046e4 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b9c:	f7fe fda2 	bl	80046e4 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e164      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bae:	4b26      	ldr	r3, [pc, #152]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x200>
 8005bba:	e015      	b.n	8005be8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bbc:	4b24      	ldr	r3, [pc, #144]	; (8005c50 <HAL_RCC_OscConfig+0x2b4>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc2:	f7fe fd8f 	bl	80046e4 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bca:	f7fe fd8b 	bl	80046e4 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e14d      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f0      	bne.n	8005bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80a0 	beq.w	8005d36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bfa:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10f      	bne.n	8005c26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	4a0e      	ldr	r2, [pc, #56]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c14:	6413      	str	r3, [r2, #64]	; 0x40
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <HAL_RCC_OscConfig+0x2ac>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c22:	2301      	movs	r3, #1
 8005c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c26:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <HAL_RCC_OscConfig+0x2b8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d121      	bne.n	8005c76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c32:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <HAL_RCC_OscConfig+0x2b8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a07      	ldr	r2, [pc, #28]	; (8005c54 <HAL_RCC_OscConfig+0x2b8>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c3e:	f7fe fd51 	bl	80046e4 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c44:	e011      	b.n	8005c6a <HAL_RCC_OscConfig+0x2ce>
 8005c46:	bf00      	nop
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	42470000 	.word	0x42470000
 8005c50:	42470e80 	.word	0x42470e80
 8005c54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c58:	f7fe fd44 	bl	80046e4 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e106      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6a:	4b85      	ldr	r3, [pc, #532]	; (8005e80 <HAL_RCC_OscConfig+0x4e4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d106      	bne.n	8005c8c <HAL_RCC_OscConfig+0x2f0>
 8005c7e:	4b81      	ldr	r3, [pc, #516]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	4a80      	ldr	r2, [pc, #512]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005c84:	f043 0301 	orr.w	r3, r3, #1
 8005c88:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8a:	e01c      	b.n	8005cc6 <HAL_RCC_OscConfig+0x32a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d10c      	bne.n	8005cae <HAL_RCC_OscConfig+0x312>
 8005c94:	4b7b      	ldr	r3, [pc, #492]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c98:	4a7a      	ldr	r2, [pc, #488]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005c9a:	f043 0304 	orr.w	r3, r3, #4
 8005c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca0:	4b78      	ldr	r3, [pc, #480]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca4:	4a77      	ldr	r2, [pc, #476]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	6713      	str	r3, [r2, #112]	; 0x70
 8005cac:	e00b      	b.n	8005cc6 <HAL_RCC_OscConfig+0x32a>
 8005cae:	4b75      	ldr	r3, [pc, #468]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb2:	4a74      	ldr	r2, [pc, #464]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cba:	4b72      	ldr	r3, [pc, #456]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbe:	4a71      	ldr	r2, [pc, #452]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005cc0:	f023 0304 	bic.w	r3, r3, #4
 8005cc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d015      	beq.n	8005cfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cce:	f7fe fd09 	bl	80046e4 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd4:	e00a      	b.n	8005cec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cd6:	f7fe fd05 	bl	80046e4 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e0c5      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cec:	4b65      	ldr	r3, [pc, #404]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0ee      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x33a>
 8005cf8:	e014      	b.n	8005d24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfa:	f7fe fcf3 	bl	80046e4 <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d00:	e00a      	b.n	8005d18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d02:	f7fe fcef 	bl	80046e4 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e0af      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d18:	4b5a      	ldr	r3, [pc, #360]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1ee      	bne.n	8005d02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d105      	bne.n	8005d36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d2a:	4b56      	ldr	r3, [pc, #344]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	4a55      	ldr	r2, [pc, #340]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 809b 	beq.w	8005e76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d40:	4b50      	ldr	r3, [pc, #320]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 030c 	and.w	r3, r3, #12
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d05c      	beq.n	8005e06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d141      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d54:	4b4c      	ldr	r3, [pc, #304]	; (8005e88 <HAL_RCC_OscConfig+0x4ec>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5a:	f7fe fcc3 	bl	80046e4 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d62:	f7fe fcbf 	bl	80046e4 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e081      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d74:	4b43      	ldr	r3, [pc, #268]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1f0      	bne.n	8005d62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	019b      	lsls	r3, r3, #6
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	061b      	lsls	r3, r3, #24
 8005da4:	4937      	ldr	r1, [pc, #220]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005daa:	4b37      	ldr	r3, [pc, #220]	; (8005e88 <HAL_RCC_OscConfig+0x4ec>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db0:	f7fe fc98 	bl	80046e4 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db8:	f7fe fc94 	bl	80046e4 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e056      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dca:	4b2e      	ldr	r3, [pc, #184]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0x41c>
 8005dd6:	e04e      	b.n	8005e76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd8:	4b2b      	ldr	r3, [pc, #172]	; (8005e88 <HAL_RCC_OscConfig+0x4ec>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dde:	f7fe fc81 	bl	80046e4 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de6:	f7fe fc7d 	bl	80046e4 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e03f      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df8:	4b22      	ldr	r3, [pc, #136]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f0      	bne.n	8005de6 <HAL_RCC_OscConfig+0x44a>
 8005e04:	e037      	b.n	8005e76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e032      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e12:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <HAL_RCC_OscConfig+0x4e8>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d028      	beq.n	8005e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d121      	bne.n	8005e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d11a      	bne.n	8005e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e42:	4013      	ands	r3, r2
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d111      	bne.n	8005e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	085b      	lsrs	r3, r3, #1
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d107      	bne.n	8005e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d001      	beq.n	8005e76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40007000 	.word	0x40007000
 8005e84:	40023800 	.word	0x40023800
 8005e88:	42470060 	.word	0x42470060

08005e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0cc      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ea0:	4b68      	ldr	r3, [pc, #416]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d90c      	bls.n	8005ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eae:	4b65      	ldr	r3, [pc, #404]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb6:	4b63      	ldr	r3, [pc, #396]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0b8      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d020      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ee0:	4b59      	ldr	r3, [pc, #356]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	4a58      	ldr	r2, [pc, #352]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ef8:	4b53      	ldr	r3, [pc, #332]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	4a52      	ldr	r2, [pc, #328]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f04:	4b50      	ldr	r3, [pc, #320]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	494d      	ldr	r1, [pc, #308]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d044      	beq.n	8005fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d107      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2a:	4b47      	ldr	r3, [pc, #284]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d119      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e07f      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d003      	beq.n	8005f4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d107      	bne.n	8005f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f4a:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e06f      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f5a:	4b3b      	ldr	r3, [pc, #236]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e067      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f6a:	4b37      	ldr	r3, [pc, #220]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f023 0203 	bic.w	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4934      	ldr	r1, [pc, #208]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f7c:	f7fe fbb2 	bl	80046e4 <HAL_GetTick>
 8005f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f82:	e00a      	b.n	8005f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f84:	f7fe fbae 	bl	80046e4 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e04f      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9a:	4b2b      	ldr	r3, [pc, #172]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 020c 	and.w	r2, r3, #12
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d1eb      	bne.n	8005f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fac:	4b25      	ldr	r3, [pc, #148]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d20c      	bcs.n	8005fd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fba:	4b22      	ldr	r3, [pc, #136]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b20      	ldr	r3, [pc, #128]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e032      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fe0:	4b19      	ldr	r3, [pc, #100]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4916      	ldr	r1, [pc, #88]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	490e      	ldr	r1, [pc, #56]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	4313      	orrs	r3, r2
 8006010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006012:	f000 f821 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 8006016:	4602      	mov	r2, r0
 8006018:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	490a      	ldr	r1, [pc, #40]	; (800604c <HAL_RCC_ClockConfig+0x1c0>)
 8006024:	5ccb      	ldrb	r3, [r1, r3]
 8006026:	fa22 f303 	lsr.w	r3, r2, r3
 800602a:	4a09      	ldr	r2, [pc, #36]	; (8006050 <HAL_RCC_ClockConfig+0x1c4>)
 800602c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800602e:	4b09      	ldr	r3, [pc, #36]	; (8006054 <HAL_RCC_ClockConfig+0x1c8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe fb12 	bl	800465c <HAL_InitTick>

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40023c00 	.word	0x40023c00
 8006048:	40023800 	.word	0x40023800
 800604c:	08009150 	.word	0x08009150
 8006050:	20000004 	.word	0x20000004
 8006054:	20000008 	.word	0x20000008

08006058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006058:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	2300      	movs	r3, #0
 800606a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006070:	4b67      	ldr	r3, [pc, #412]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 030c 	and.w	r3, r3, #12
 8006078:	2b08      	cmp	r3, #8
 800607a:	d00d      	beq.n	8006098 <HAL_RCC_GetSysClockFreq+0x40>
 800607c:	2b08      	cmp	r3, #8
 800607e:	f200 80bd 	bhi.w	80061fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_RCC_GetSysClockFreq+0x34>
 8006086:	2b04      	cmp	r3, #4
 8006088:	d003      	beq.n	8006092 <HAL_RCC_GetSysClockFreq+0x3a>
 800608a:	e0b7      	b.n	80061fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800608c:	4b61      	ldr	r3, [pc, #388]	; (8006214 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800608e:	60bb      	str	r3, [r7, #8]
       break;
 8006090:	e0b7      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006092:	4b61      	ldr	r3, [pc, #388]	; (8006218 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006094:	60bb      	str	r3, [r7, #8]
      break;
 8006096:	e0b4      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006098:	4b5d      	ldr	r3, [pc, #372]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060a2:	4b5b      	ldr	r3, [pc, #364]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d04d      	beq.n	800614a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ae:	4b58      	ldr	r3, [pc, #352]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	099b      	lsrs	r3, r3, #6
 80060b4:	461a      	mov	r2, r3
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060be:	f04f 0100 	mov.w	r1, #0
 80060c2:	ea02 0800 	and.w	r8, r2, r0
 80060c6:	ea03 0901 	and.w	r9, r3, r1
 80060ca:	4640      	mov	r0, r8
 80060cc:	4649      	mov	r1, r9
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	014b      	lsls	r3, r1, #5
 80060d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80060dc:	0142      	lsls	r2, r0, #5
 80060de:	4610      	mov	r0, r2
 80060e0:	4619      	mov	r1, r3
 80060e2:	ebb0 0008 	subs.w	r0, r0, r8
 80060e6:	eb61 0109 	sbc.w	r1, r1, r9
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	018b      	lsls	r3, r1, #6
 80060f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80060f8:	0182      	lsls	r2, r0, #6
 80060fa:	1a12      	subs	r2, r2, r0
 80060fc:	eb63 0301 	sbc.w	r3, r3, r1
 8006100:	f04f 0000 	mov.w	r0, #0
 8006104:	f04f 0100 	mov.w	r1, #0
 8006108:	00d9      	lsls	r1, r3, #3
 800610a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800610e:	00d0      	lsls	r0, r2, #3
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	eb12 0208 	adds.w	r2, r2, r8
 8006118:	eb43 0309 	adc.w	r3, r3, r9
 800611c:	f04f 0000 	mov.w	r0, #0
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	0259      	lsls	r1, r3, #9
 8006126:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800612a:	0250      	lsls	r0, r2, #9
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4610      	mov	r0, r2
 8006132:	4619      	mov	r1, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	461a      	mov	r2, r3
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	f7fa fb7a 	bl	8000834 <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4613      	mov	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e04a      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	099b      	lsrs	r3, r3, #6
 8006150:	461a      	mov	r2, r3
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	f240 10ff 	movw	r0, #511	; 0x1ff
 800615a:	f04f 0100 	mov.w	r1, #0
 800615e:	ea02 0400 	and.w	r4, r2, r0
 8006162:	ea03 0501 	and.w	r5, r3, r1
 8006166:	4620      	mov	r0, r4
 8006168:	4629      	mov	r1, r5
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	014b      	lsls	r3, r1, #5
 8006174:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006178:	0142      	lsls	r2, r0, #5
 800617a:	4610      	mov	r0, r2
 800617c:	4619      	mov	r1, r3
 800617e:	1b00      	subs	r0, r0, r4
 8006180:	eb61 0105 	sbc.w	r1, r1, r5
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	018b      	lsls	r3, r1, #6
 800618e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006192:	0182      	lsls	r2, r0, #6
 8006194:	1a12      	subs	r2, r2, r0
 8006196:	eb63 0301 	sbc.w	r3, r3, r1
 800619a:	f04f 0000 	mov.w	r0, #0
 800619e:	f04f 0100 	mov.w	r1, #0
 80061a2:	00d9      	lsls	r1, r3, #3
 80061a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061a8:	00d0      	lsls	r0, r2, #3
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	1912      	adds	r2, r2, r4
 80061b0:	eb45 0303 	adc.w	r3, r5, r3
 80061b4:	f04f 0000 	mov.w	r0, #0
 80061b8:	f04f 0100 	mov.w	r1, #0
 80061bc:	0299      	lsls	r1, r3, #10
 80061be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80061c2:	0290      	lsls	r0, r2, #10
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4610      	mov	r0, r2
 80061ca:	4619      	mov	r1, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	f7fa fb2e 	bl	8000834 <__aeabi_uldivmod>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4613      	mov	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	0c1b      	lsrs	r3, r3, #16
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	3301      	adds	r3, #1
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	60bb      	str	r3, [r7, #8]
      break;
 80061fa:	e002      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061fe:	60bb      	str	r3, [r7, #8]
      break;
 8006200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006202:	68bb      	ldr	r3, [r7, #8]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800620e:	bf00      	nop
 8006210:	40023800 	.word	0x40023800
 8006214:	00f42400 	.word	0x00f42400
 8006218:	007a1200 	.word	0x007a1200

0800621c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006220:	4b03      	ldr	r3, [pc, #12]	; (8006230 <HAL_RCC_GetHCLKFreq+0x14>)
 8006222:	681b      	ldr	r3, [r3, #0]
}
 8006224:	4618      	mov	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000004 	.word	0x20000004

08006234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006238:	f7ff fff0 	bl	800621c <HAL_RCC_GetHCLKFreq>
 800623c:	4602      	mov	r2, r0
 800623e:	4b05      	ldr	r3, [pc, #20]	; (8006254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	0a9b      	lsrs	r3, r3, #10
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	4903      	ldr	r1, [pc, #12]	; (8006258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800624a:	5ccb      	ldrb	r3, [r1, r3]
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006250:	4618      	mov	r0, r3
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40023800 	.word	0x40023800
 8006258:	08009160 	.word	0x08009160

0800625c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006260:	f7ff ffdc 	bl	800621c <HAL_RCC_GetHCLKFreq>
 8006264:	4602      	mov	r2, r0
 8006266:	4b05      	ldr	r3, [pc, #20]	; (800627c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	0b5b      	lsrs	r3, r3, #13
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	4903      	ldr	r1, [pc, #12]	; (8006280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006272:	5ccb      	ldrb	r3, [r1, r3]
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006278:	4618      	mov	r0, r3
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40023800 	.word	0x40023800
 8006280:	08009160 	.word	0x08009160

08006284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e07b      	b.n	800638e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d108      	bne.n	80062b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a6:	d009      	beq.n	80062bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	61da      	str	r2, [r3, #28]
 80062ae:	e005      	b.n	80062bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fd fcaa 	bl	8003c30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006340:	ea42 0103 	orr.w	r1, r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	0c1b      	lsrs	r3, r3, #16
 800635a:	f003 0104 	and.w	r1, r3, #4
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	f003 0210 	and.w	r2, r3, #16
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69da      	ldr	r2, [r3, #28]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800637c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b088      	sub	sp, #32
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_SPI_Transmit+0x22>
 80063b4:	2302      	movs	r3, #2
 80063b6:	e126      	b.n	8006606 <HAL_SPI_Transmit+0x270>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c0:	f7fe f990 	bl	80046e4 <HAL_GetTick>
 80063c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d002      	beq.n	80063dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
 80063d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063da:	e10b      	b.n	80065f4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_SPI_Transmit+0x52>
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ec:	e102      	b.n	80065f4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2203      	movs	r2, #3
 80063f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	88fa      	ldrh	r2, [r7, #6]
 800640c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006434:	d10f      	bne.n	8006456 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006454:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d007      	beq.n	8006474 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006472:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647c:	d14b      	bne.n	8006516 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_SPI_Transmit+0xf6>
 8006486:	8afb      	ldrh	r3, [r7, #22]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d13e      	bne.n	800650a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	881a      	ldrh	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	1c9a      	adds	r2, r3, #2
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	3b01      	subs	r3, #1
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064b0:	e02b      	b.n	800650a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d112      	bne.n	80064e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	881a      	ldrh	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d0:	1c9a      	adds	r2, r3, #2
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80064e4:	e011      	b.n	800650a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e6:	f7fe f8fd 	bl	80046e4 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d803      	bhi.n	80064fe <HAL_SPI_Transmit+0x168>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_Transmit+0x16e>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006508:	e074      	b.n	80065f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1ce      	bne.n	80064b2 <HAL_SPI_Transmit+0x11c>
 8006514:	e04c      	b.n	80065b0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_SPI_Transmit+0x18e>
 800651e:	8afb      	ldrh	r3, [r7, #22]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d140      	bne.n	80065a6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800654a:	e02c      	b.n	80065a6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b02      	cmp	r3, #2
 8006558:	d113      	bne.n	8006582 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	330c      	adds	r3, #12
 8006564:	7812      	ldrb	r2, [r2, #0]
 8006566:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006580:	e011      	b.n	80065a6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006582:	f7fe f8af 	bl	80046e4 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d803      	bhi.n	800659a <HAL_SPI_Transmit+0x204>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d102      	bne.n	80065a0 <HAL_SPI_Transmit+0x20a>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d102      	bne.n	80065a6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065a4:	e026      	b.n	80065f4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1cd      	bne.n	800654c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fbcb 	bl	8006d50 <SPI_EndRxTxTransaction>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2220      	movs	r2, #32
 80065c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e000      	b.n	80065f4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80065f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006604:	7ffb      	ldrb	r3, [r7, #31]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3720      	adds	r7, #32
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b088      	sub	sp, #32
 8006612:	af02      	add	r7, sp, #8
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800662a:	d112      	bne.n	8006652 <HAL_SPI_Receive+0x44>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10e      	bne.n	8006652 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2204      	movs	r2, #4
 8006638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800663c:	88fa      	ldrh	r2, [r7, #6]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	4613      	mov	r3, r2
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f8f1 	bl	8006830 <HAL_SPI_TransmitReceive>
 800664e:	4603      	mov	r3, r0
 8006650:	e0ea      	b.n	8006828 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <HAL_SPI_Receive+0x52>
 800665c:	2302      	movs	r3, #2
 800665e:	e0e3      	b.n	8006828 <HAL_SPI_Receive+0x21a>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006668:	f7fe f83c 	bl	80046e4 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b01      	cmp	r3, #1
 8006678:	d002      	beq.n	8006680 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800667a:	2302      	movs	r3, #2
 800667c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800667e:	e0ca      	b.n	8006816 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_SPI_Receive+0x7e>
 8006686:	88fb      	ldrh	r3, [r7, #6]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006690:	e0c1      	b.n	8006816 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2204      	movs	r2, #4
 8006696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	88fa      	ldrh	r2, [r7, #6]
 80066aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d8:	d10f      	bne.n	80066fa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d007      	beq.n	8006718 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006716:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d162      	bne.n	80067e6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006720:	e02e      	b.n	8006780 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b01      	cmp	r3, #1
 800672e:	d115      	bne.n	800675c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f103 020c 	add.w	r2, r3, #12
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	7812      	ldrb	r2, [r2, #0]
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	87da      	strh	r2, [r3, #62]	; 0x3e
 800675a:	e011      	b.n	8006780 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800675c:	f7fd ffc2 	bl	80046e4 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d803      	bhi.n	8006774 <HAL_SPI_Receive+0x166>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d102      	bne.n	800677a <HAL_SPI_Receive+0x16c>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800677e:	e04a      	b.n	8006816 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1cb      	bne.n	8006722 <HAL_SPI_Receive+0x114>
 800678a:	e031      	b.n	80067f0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b01      	cmp	r3, #1
 8006798:	d113      	bne.n	80067c2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	b292      	uxth	r2, r2
 80067a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	1c9a      	adds	r2, r3, #2
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067c0:	e011      	b.n	80067e6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067c2:	f7fd ff8f 	bl	80046e4 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d803      	bhi.n	80067da <HAL_SPI_Receive+0x1cc>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d102      	bne.n	80067e0 <HAL_SPI_Receive+0x1d2>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d102      	bne.n	80067e6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067e4:	e017      	b.n	8006816 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1cd      	bne.n	800678c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 fa45 	bl	8006c84 <SPI_EndRxTransaction>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2220      	movs	r2, #32
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
 8006812:	e000      	b.n	8006816 <HAL_SPI_Receive+0x208>
  }

error :
 8006814:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08c      	sub	sp, #48	; 0x30
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
 800683c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800683e:	2301      	movs	r3, #1
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <HAL_SPI_TransmitReceive+0x26>
 8006852:	2302      	movs	r3, #2
 8006854:	e18a      	b.n	8006b6c <HAL_SPI_TransmitReceive+0x33c>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800685e:	f7fd ff41 	bl	80046e4 <HAL_GetTick>
 8006862:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006874:	887b      	ldrh	r3, [r7, #2]
 8006876:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800687c:	2b01      	cmp	r3, #1
 800687e:	d00f      	beq.n	80068a0 <HAL_SPI_TransmitReceive+0x70>
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006886:	d107      	bne.n	8006898 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d103      	bne.n	8006898 <HAL_SPI_TransmitReceive+0x68>
 8006890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006894:	2b04      	cmp	r3, #4
 8006896:	d003      	beq.n	80068a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006898:	2302      	movs	r3, #2
 800689a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800689e:	e15b      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x82>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x82>
 80068ac:	887b      	ldrh	r3, [r7, #2]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d103      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068b8:	e14e      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d003      	beq.n	80068ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2205      	movs	r2, #5
 80068ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	887a      	ldrh	r2, [r7, #2]
 80068de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	887a      	ldrh	r2, [r7, #2]
 80068e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	887a      	ldrh	r2, [r7, #2]
 80068f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	887a      	ldrh	r2, [r7, #2]
 80068f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690e:	2b40      	cmp	r3, #64	; 0x40
 8006910:	d007      	beq.n	8006922 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800692a:	d178      	bne.n	8006a1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_SPI_TransmitReceive+0x10a>
 8006934:	8b7b      	ldrh	r3, [r7, #26]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d166      	bne.n	8006a08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	881a      	ldrh	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	1c9a      	adds	r2, r3, #2
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800695e:	e053      	b.n	8006a08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b02      	cmp	r3, #2
 800696c:	d11b      	bne.n	80069a6 <HAL_SPI_TransmitReceive+0x176>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006972:	b29b      	uxth	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d016      	beq.n	80069a6 <HAL_SPI_TransmitReceive+0x176>
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	2b01      	cmp	r3, #1
 800697c:	d113      	bne.n	80069a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	881a      	ldrh	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	1c9a      	adds	r2, r3, #2
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d119      	bne.n	80069e8 <HAL_SPI_TransmitReceive+0x1b8>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d014      	beq.n	80069e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	b292      	uxth	r2, r2
 80069ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	1c9a      	adds	r2, r3, #2
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069da:	b29b      	uxth	r3, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069e4:	2301      	movs	r3, #1
 80069e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069e8:	f7fd fe7c 	bl	80046e4 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d807      	bhi.n	8006a08 <HAL_SPI_TransmitReceive+0x1d8>
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d003      	beq.n	8006a08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a06:	e0a7      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1a6      	bne.n	8006960 <HAL_SPI_TransmitReceive+0x130>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1a1      	bne.n	8006960 <HAL_SPI_TransmitReceive+0x130>
 8006a1c:	e07c      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <HAL_SPI_TransmitReceive+0x1fc>
 8006a26:	8b7b      	ldrh	r3, [r7, #26]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d16b      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	7812      	ldrb	r2, [r2, #0]
 8006a38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a52:	e057      	b.n	8006b04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d11c      	bne.n	8006a9c <HAL_SPI_TransmitReceive+0x26c>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d017      	beq.n	8006a9c <HAL_SPI_TransmitReceive+0x26c>
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d114      	bne.n	8006a9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	330c      	adds	r3, #12
 8006a7c:	7812      	ldrb	r2, [r2, #0]
 8006a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d119      	bne.n	8006ade <HAL_SPI_TransmitReceive+0x2ae>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d014      	beq.n	8006ade <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ada:	2301      	movs	r3, #1
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ade:	f7fd fe01 	bl	80046e4 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d803      	bhi.n	8006af6 <HAL_SPI_TransmitReceive+0x2c6>
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af4:	d102      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x2cc>
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d103      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b02:	e029      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1a2      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x224>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d19d      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f917 	bl	8006d50 <SPI_EndRxTxTransaction>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d006      	beq.n	8006b36 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2220      	movs	r2, #32
 8006b32:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b34:	e010      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10b      	bne.n	8006b56 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	e000      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3730      	adds	r7, #48	; 0x30
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	4613      	mov	r3, r2
 8006b82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b84:	f7fd fdae 	bl	80046e4 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	1a9b      	subs	r3, r3, r2
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	4413      	add	r3, r2
 8006b92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b94:	f7fd fda6 	bl	80046e4 <HAL_GetTick>
 8006b98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b9a:	4b39      	ldr	r3, [pc, #228]	; (8006c80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	015b      	lsls	r3, r3, #5
 8006ba0:	0d1b      	lsrs	r3, r3, #20
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	fb02 f303 	mul.w	r3, r2, r3
 8006ba8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006baa:	e054      	b.n	8006c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb2:	d050      	beq.n	8006c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bb4:	f7fd fd96 	bl	80046e4 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d902      	bls.n	8006bca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d13d      	bne.n	8006c46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006be2:	d111      	bne.n	8006c08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bec:	d004      	beq.n	8006bf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf6:	d107      	bne.n	8006c08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c10:	d10f      	bne.n	8006c32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e017      	b.n	8006c76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	bf0c      	ite	eq
 8006c66:	2301      	moveq	r3, #1
 8006c68:	2300      	movne	r3, #0
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d19b      	bne.n	8006bac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3720      	adds	r7, #32
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000004 	.word	0x20000004

08006c84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c98:	d111      	bne.n	8006cbe <SPI_EndRxTransaction+0x3a>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca2:	d004      	beq.n	8006cae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cac:	d107      	bne.n	8006cbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc6:	d12a      	bne.n	8006d1e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd0:	d012      	beq.n	8006cf8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2180      	movs	r1, #128	; 0x80
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7ff ff49 	bl	8006b74 <SPI_WaitFlagStateUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d02d      	beq.n	8006d44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cec:	f043 0220 	orr.w	r2, r3, #32
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e026      	b.n	8006d46 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2101      	movs	r1, #1
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7ff ff36 	bl	8006b74 <SPI_WaitFlagStateUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01a      	beq.n	8006d44 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d12:	f043 0220 	orr.w	r2, r3, #32
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e013      	b.n	8006d46 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2200      	movs	r2, #0
 8006d26:	2101      	movs	r1, #1
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7ff ff23 	bl	8006b74 <SPI_WaitFlagStateUntilTimeout>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d38:	f043 0220 	orr.w	r2, r3, #32
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e000      	b.n	8006d46 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <SPI_EndRxTxTransaction+0x7c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1b      	ldr	r2, [pc, #108]	; (8006dd0 <SPI_EndRxTxTransaction+0x80>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	0d5b      	lsrs	r3, r3, #21
 8006d68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d6c:	fb02 f303 	mul.w	r3, r2, r3
 8006d70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d7a:	d112      	bne.n	8006da2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2200      	movs	r2, #0
 8006d84:	2180      	movs	r1, #128	; 0x80
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fef4 	bl	8006b74 <SPI_WaitFlagStateUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	f043 0220 	orr.w	r2, r3, #32
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e00f      	b.n	8006dc2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	d0f2      	beq.n	8006da2 <SPI_EndRxTxTransaction+0x52>
 8006dbc:	e000      	b.n	8006dc0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006dbe:	bf00      	nop
  }

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000004 	.word	0x20000004
 8006dd0:	165e9f81 	.word	0x165e9f81

08006dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e041      	b.n	8006e6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fd f950 	bl	80040a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3304      	adds	r3, #4
 8006e10:	4619      	mov	r1, r3
 8006e12:	4610      	mov	r0, r2
 8006e14:	f000 fa10 	bl	8007238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e041      	b.n	8006f08 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d106      	bne.n	8006e9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f839 	bl	8006f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f000 f9c1 	bl	8007238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d101      	bne.n	8006f42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e0ae      	b.n	80070a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b0c      	cmp	r3, #12
 8006f4e:	f200 809f 	bhi.w	8007090 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006f8d 	.word	0x08006f8d
 8006f5c:	08007091 	.word	0x08007091
 8006f60:	08007091 	.word	0x08007091
 8006f64:	08007091 	.word	0x08007091
 8006f68:	08006fcd 	.word	0x08006fcd
 8006f6c:	08007091 	.word	0x08007091
 8006f70:	08007091 	.word	0x08007091
 8006f74:	08007091 	.word	0x08007091
 8006f78:	0800700f 	.word	0x0800700f
 8006f7c:	08007091 	.word	0x08007091
 8006f80:	08007091 	.word	0x08007091
 8006f84:	08007091 	.word	0x08007091
 8006f88:	0800704f 	.word	0x0800704f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f9f0 	bl	8007378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0208 	orr.w	r2, r2, #8
 8006fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0204 	bic.w	r2, r2, #4
 8006fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6999      	ldr	r1, [r3, #24]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	691a      	ldr	r2, [r3, #16]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	619a      	str	r2, [r3, #24]
      break;
 8006fca:	e064      	b.n	8007096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fa40 	bl	8007458 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699a      	ldr	r2, [r3, #24]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6999      	ldr	r1, [r3, #24]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	021a      	lsls	r2, r3, #8
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	619a      	str	r2, [r3, #24]
      break;
 800700c:	e043      	b.n	8007096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fa95 	bl	8007544 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69da      	ldr	r2, [r3, #28]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0208 	orr.w	r2, r2, #8
 8007028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0204 	bic.w	r2, r2, #4
 8007038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69d9      	ldr	r1, [r3, #28]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	691a      	ldr	r2, [r3, #16]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	61da      	str	r2, [r3, #28]
      break;
 800704c:	e023      	b.n	8007096 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68b9      	ldr	r1, [r7, #8]
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fae9 	bl	800762c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69d9      	ldr	r1, [r3, #28]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	021a      	lsls	r2, r3, #8
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	61da      	str	r2, [r3, #28]
      break;
 800708e:	e002      	b.n	8007096 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	75fb      	strb	r3, [r7, #23]
      break;
 8007094:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_TIM_ConfigClockSource+0x1c>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e0b4      	b.n	800722e <HAL_TIM_ConfigClockSource+0x186>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fc:	d03e      	beq.n	800717c <HAL_TIM_ConfigClockSource+0xd4>
 80070fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007102:	f200 8087 	bhi.w	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 8007106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710a:	f000 8086 	beq.w	800721a <HAL_TIM_ConfigClockSource+0x172>
 800710e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007112:	d87f      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 8007114:	2b70      	cmp	r3, #112	; 0x70
 8007116:	d01a      	beq.n	800714e <HAL_TIM_ConfigClockSource+0xa6>
 8007118:	2b70      	cmp	r3, #112	; 0x70
 800711a:	d87b      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 800711c:	2b60      	cmp	r3, #96	; 0x60
 800711e:	d050      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x11a>
 8007120:	2b60      	cmp	r3, #96	; 0x60
 8007122:	d877      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 8007124:	2b50      	cmp	r3, #80	; 0x50
 8007126:	d03c      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0xfa>
 8007128:	2b50      	cmp	r3, #80	; 0x50
 800712a:	d873      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d058      	beq.n	80071e2 <HAL_TIM_ConfigClockSource+0x13a>
 8007130:	2b40      	cmp	r3, #64	; 0x40
 8007132:	d86f      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 8007134:	2b30      	cmp	r3, #48	; 0x30
 8007136:	d064      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0x15a>
 8007138:	2b30      	cmp	r3, #48	; 0x30
 800713a:	d86b      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 800713c:	2b20      	cmp	r3, #32
 800713e:	d060      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0x15a>
 8007140:	2b20      	cmp	r3, #32
 8007142:	d867      	bhi.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
 8007144:	2b00      	cmp	r3, #0
 8007146:	d05c      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0x15a>
 8007148:	2b10      	cmp	r3, #16
 800714a:	d05a      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0x15a>
 800714c:	e062      	b.n	8007214 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6899      	ldr	r1, [r3, #8]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f000 fb35 	bl	80077cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007170:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	609a      	str	r2, [r3, #8]
      break;
 800717a:	e04f      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6818      	ldr	r0, [r3, #0]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	6899      	ldr	r1, [r3, #8]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f000 fb1e 	bl	80077cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800719e:	609a      	str	r2, [r3, #8]
      break;
 80071a0:	e03c      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6859      	ldr	r1, [r3, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f000 fa92 	bl	80076d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2150      	movs	r1, #80	; 0x50
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 faeb 	bl	8007796 <TIM_ITRx_SetConfig>
      break;
 80071c0:	e02c      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6859      	ldr	r1, [r3, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f000 fab1 	bl	8007736 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2160      	movs	r1, #96	; 0x60
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fadb 	bl	8007796 <TIM_ITRx_SetConfig>
      break;
 80071e0:	e01c      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	6859      	ldr	r1, [r3, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	461a      	mov	r2, r3
 80071f0:	f000 fa72 	bl	80076d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2140      	movs	r1, #64	; 0x40
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 facb 	bl	8007796 <TIM_ITRx_SetConfig>
      break;
 8007200:	e00c      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f000 fac2 	bl	8007796 <TIM_ITRx_SetConfig>
      break;
 8007212:	e003      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
      break;
 8007218:	e000      	b.n	800721c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800721a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800722c:	7bfb      	ldrb	r3, [r7, #15]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a40      	ldr	r2, [pc, #256]	; (800734c <TIM_Base_SetConfig+0x114>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d013      	beq.n	8007278 <TIM_Base_SetConfig+0x40>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007256:	d00f      	beq.n	8007278 <TIM_Base_SetConfig+0x40>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a3d      	ldr	r2, [pc, #244]	; (8007350 <TIM_Base_SetConfig+0x118>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00b      	beq.n	8007278 <TIM_Base_SetConfig+0x40>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a3c      	ldr	r2, [pc, #240]	; (8007354 <TIM_Base_SetConfig+0x11c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d007      	beq.n	8007278 <TIM_Base_SetConfig+0x40>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a3b      	ldr	r2, [pc, #236]	; (8007358 <TIM_Base_SetConfig+0x120>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d003      	beq.n	8007278 <TIM_Base_SetConfig+0x40>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a3a      	ldr	r2, [pc, #232]	; (800735c <TIM_Base_SetConfig+0x124>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d108      	bne.n	800728a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a2f      	ldr	r2, [pc, #188]	; (800734c <TIM_Base_SetConfig+0x114>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d02b      	beq.n	80072ea <TIM_Base_SetConfig+0xb2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007298:	d027      	beq.n	80072ea <TIM_Base_SetConfig+0xb2>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a2c      	ldr	r2, [pc, #176]	; (8007350 <TIM_Base_SetConfig+0x118>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d023      	beq.n	80072ea <TIM_Base_SetConfig+0xb2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a2b      	ldr	r2, [pc, #172]	; (8007354 <TIM_Base_SetConfig+0x11c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01f      	beq.n	80072ea <TIM_Base_SetConfig+0xb2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a2a      	ldr	r2, [pc, #168]	; (8007358 <TIM_Base_SetConfig+0x120>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d01b      	beq.n	80072ea <TIM_Base_SetConfig+0xb2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a29      	ldr	r2, [pc, #164]	; (800735c <TIM_Base_SetConfig+0x124>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d017      	beq.n	80072ea <TIM_Base_SetConfig+0xb2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a28      	ldr	r2, [pc, #160]	; (8007360 <TIM_Base_SetConfig+0x128>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <TIM_Base_SetConfig+0xb2>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a27      	ldr	r2, [pc, #156]	; (8007364 <TIM_Base_SetConfig+0x12c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00f      	beq.n	80072ea <TIM_Base_SetConfig+0xb2>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a26      	ldr	r2, [pc, #152]	; (8007368 <TIM_Base_SetConfig+0x130>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00b      	beq.n	80072ea <TIM_Base_SetConfig+0xb2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a25      	ldr	r2, [pc, #148]	; (800736c <TIM_Base_SetConfig+0x134>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d007      	beq.n	80072ea <TIM_Base_SetConfig+0xb2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a24      	ldr	r2, [pc, #144]	; (8007370 <TIM_Base_SetConfig+0x138>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d003      	beq.n	80072ea <TIM_Base_SetConfig+0xb2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a23      	ldr	r2, [pc, #140]	; (8007374 <TIM_Base_SetConfig+0x13c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d108      	bne.n	80072fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a0a      	ldr	r2, [pc, #40]	; (800734c <TIM_Base_SetConfig+0x114>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d003      	beq.n	8007330 <TIM_Base_SetConfig+0xf8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a0c      	ldr	r2, [pc, #48]	; (800735c <TIM_Base_SetConfig+0x124>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d103      	bne.n	8007338 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	691a      	ldr	r2, [r3, #16]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	615a      	str	r2, [r3, #20]
}
 800733e:	bf00      	nop
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40010000 	.word	0x40010000
 8007350:	40000400 	.word	0x40000400
 8007354:	40000800 	.word	0x40000800
 8007358:	40000c00 	.word	0x40000c00
 800735c:	40010400 	.word	0x40010400
 8007360:	40014000 	.word	0x40014000
 8007364:	40014400 	.word	0x40014400
 8007368:	40014800 	.word	0x40014800
 800736c:	40001800 	.word	0x40001800
 8007370:	40001c00 	.word	0x40001c00
 8007374:	40002000 	.word	0x40002000

08007378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	f023 0201 	bic.w	r2, r3, #1
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0303 	bic.w	r3, r3, #3
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f023 0302 	bic.w	r3, r3, #2
 80073c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a20      	ldr	r2, [pc, #128]	; (8007450 <TIM_OC1_SetConfig+0xd8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d003      	beq.n	80073dc <TIM_OC1_SetConfig+0x64>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a1f      	ldr	r2, [pc, #124]	; (8007454 <TIM_OC1_SetConfig+0xdc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d10c      	bne.n	80073f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f023 0308 	bic.w	r3, r3, #8
 80073e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f023 0304 	bic.w	r3, r3, #4
 80073f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a15      	ldr	r2, [pc, #84]	; (8007450 <TIM_OC1_SetConfig+0xd8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d003      	beq.n	8007406 <TIM_OC1_SetConfig+0x8e>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a14      	ldr	r2, [pc, #80]	; (8007454 <TIM_OC1_SetConfig+0xdc>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d111      	bne.n	800742a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800740c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4313      	orrs	r3, r2
 8007428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	621a      	str	r2, [r3, #32]
}
 8007444:	bf00      	nop
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	40010000 	.word	0x40010000
 8007454:	40010400 	.word	0x40010400

08007458 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	f023 0210 	bic.w	r2, r3, #16
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800748e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	4313      	orrs	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f023 0320 	bic.w	r3, r3, #32
 80074a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a22      	ldr	r2, [pc, #136]	; (800753c <TIM_OC2_SetConfig+0xe4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d003      	beq.n	80074c0 <TIM_OC2_SetConfig+0x68>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a21      	ldr	r2, [pc, #132]	; (8007540 <TIM_OC2_SetConfig+0xe8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d10d      	bne.n	80074dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	011b      	lsls	r3, r3, #4
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a17      	ldr	r2, [pc, #92]	; (800753c <TIM_OC2_SetConfig+0xe4>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d003      	beq.n	80074ec <TIM_OC2_SetConfig+0x94>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a16      	ldr	r2, [pc, #88]	; (8007540 <TIM_OC2_SetConfig+0xe8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d113      	bne.n	8007514 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	4313      	orrs	r3, r2
 8007506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	4313      	orrs	r3, r2
 8007512:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40010000 	.word	0x40010000
 8007540:	40010400 	.word	0x40010400

08007544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0303 	bic.w	r3, r3, #3
 800757a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800758c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	021b      	lsls	r3, r3, #8
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	4313      	orrs	r3, r2
 8007598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a21      	ldr	r2, [pc, #132]	; (8007624 <TIM_OC3_SetConfig+0xe0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d003      	beq.n	80075aa <TIM_OC3_SetConfig+0x66>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a20      	ldr	r2, [pc, #128]	; (8007628 <TIM_OC3_SetConfig+0xe4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d10d      	bne.n	80075c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	021b      	lsls	r3, r3, #8
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a16      	ldr	r2, [pc, #88]	; (8007624 <TIM_OC3_SetConfig+0xe0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d003      	beq.n	80075d6 <TIM_OC3_SetConfig+0x92>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a15      	ldr	r2, [pc, #84]	; (8007628 <TIM_OC3_SetConfig+0xe4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d113      	bne.n	80075fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	621a      	str	r2, [r3, #32]
}
 8007618:	bf00      	nop
 800761a:	371c      	adds	r7, #28
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	40010000 	.word	0x40010000
 8007628:	40010400 	.word	0x40010400

0800762c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	021b      	lsls	r3, r3, #8
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	031b      	lsls	r3, r3, #12
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a12      	ldr	r2, [pc, #72]	; (80076d0 <TIM_OC4_SetConfig+0xa4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_OC4_SetConfig+0x68>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a11      	ldr	r2, [pc, #68]	; (80076d4 <TIM_OC4_SetConfig+0xa8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d109      	bne.n	80076a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800769a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	019b      	lsls	r3, r3, #6
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	621a      	str	r2, [r3, #32]
}
 80076c2:	bf00      	nop
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	40010000 	.word	0x40010000
 80076d4:	40010400 	.word	0x40010400

080076d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f023 0201 	bic.w	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	4313      	orrs	r3, r2
 800770c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f023 030a 	bic.w	r3, r3, #10
 8007714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007736:	b480      	push	{r7}
 8007738:	b087      	sub	sp, #28
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	f023 0210 	bic.w	r2, r3, #16
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	031b      	lsls	r3, r3, #12
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007772:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	4313      	orrs	r3, r2
 800777c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	621a      	str	r2, [r3, #32]
}
 800778a:	bf00      	nop
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007796:	b480      	push	{r7}
 8007798:	b085      	sub	sp, #20
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	f043 0307 	orr.w	r3, r3, #7
 80077b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	609a      	str	r2, [r3, #8]
}
 80077c0:	bf00      	nop
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	021a      	lsls	r2, r3, #8
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	431a      	orrs	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	609a      	str	r2, [r3, #8]
}
 8007800:	bf00      	nop
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007820:	2302      	movs	r3, #2
 8007822:	e05a      	b.n	80078da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2202      	movs	r2, #2
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a21      	ldr	r2, [pc, #132]	; (80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d022      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007870:	d01d      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a1d      	ldr	r2, [pc, #116]	; (80078ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d018      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a1b      	ldr	r2, [pc, #108]	; (80078f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a1a      	ldr	r2, [pc, #104]	; (80078f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00e      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a18      	ldr	r2, [pc, #96]	; (80078f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d009      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a17      	ldr	r2, [pc, #92]	; (80078fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d004      	beq.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a15      	ldr	r2, [pc, #84]	; (8007900 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d10c      	bne.n	80078c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	40010000 	.word	0x40010000
 80078ec:	40000400 	.word	0x40000400
 80078f0:	40000800 	.word	0x40000800
 80078f4:	40000c00 	.word	0x40000c00
 80078f8:	40010400 	.word	0x40010400
 80078fc:	40014000 	.word	0x40014000
 8007900:	40001800 	.word	0x40001800

08007904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e03f      	b.n	8007996 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fc fcee 	bl	800430c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2224      	movs	r2, #36	; 0x24
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 ff49 	bl	80087e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800795c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695a      	ldr	r2, [r3, #20]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800796c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800797c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2220      	movs	r2, #32
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08c      	sub	sp, #48	; 0x30
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	4613      	mov	r3, r2
 80079ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	d165      	bne.n	8007a86 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_UART_Transmit_DMA+0x26>
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e05e      	b.n	8007a88 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_UART_Transmit_DMA+0x38>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e057      	b.n	8007a88 <HAL_UART_Transmit_DMA+0xe8>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	88fa      	ldrh	r2, [r7, #6]
 80079ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	88fa      	ldrh	r2, [r7, #6]
 80079f0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2221      	movs	r2, #33	; 0x21
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a04:	4a22      	ldr	r2, [pc, #136]	; (8007a90 <HAL_UART_Transmit_DMA+0xf0>)
 8007a06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0c:	4a21      	ldr	r2, [pc, #132]	; (8007a94 <HAL_UART_Transmit_DMA+0xf4>)
 8007a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a14:	4a20      	ldr	r2, [pc, #128]	; (8007a98 <HAL_UART_Transmit_DMA+0xf8>)
 8007a16:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007a20:	f107 0308 	add.w	r3, r7, #8
 8007a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	6819      	ldr	r1, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3304      	adds	r3, #4
 8007a34:	461a      	mov	r2, r3
 8007a36:	88fb      	ldrh	r3, [r7, #6]
 8007a38:	f7fd faa6 	bl	8004f88 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a44:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3314      	adds	r3, #20
 8007a54:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3314      	adds	r3, #20
 8007a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a6e:	627a      	str	r2, [r7, #36]	; 0x24
 8007a70:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6a39      	ldr	r1, [r7, #32]
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e5      	bne.n	8007a4e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	e000      	b.n	8007a88 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007a86:	2302      	movs	r3, #2
  }
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3730      	adds	r7, #48	; 0x30
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	08008081 	.word	0x08008081
 8007a94:	0800811b 	.word	0x0800811b
 8007a98:	08008293 	.word	0x08008293

08007a9c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d11d      	bne.n	8007af2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_UART_Receive_DMA+0x26>
 8007abc:	88fb      	ldrh	r3, [r7, #6]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e016      	b.n	8007af4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_UART_Receive_DMA+0x38>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e00f      	b.n	8007af4 <HAL_UART_Receive_DMA+0x58>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007ae2:	88fb      	ldrh	r3, [r7, #6]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 fc1d 	bl	8008328 <UART_Start_Receive_DMA>
 8007aee:	4603      	mov	r3, r0
 8007af0:	e000      	b.n	8007af4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007af2:	2302      	movs	r3, #2
  }
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b0ba      	sub	sp, #232	; 0xe8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10f      	bne.n	8007b62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d009      	beq.n	8007b62 <HAL_UART_IRQHandler+0x66>
 8007b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fd85 	bl	800866a <UART_Receive_IT>
      return;
 8007b60:	e256      	b.n	8008010 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 80de 	beq.w	8007d28 <HAL_UART_IRQHandler+0x22c>
 8007b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d106      	bne.n	8007b86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 80d1 	beq.w	8007d28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00b      	beq.n	8007baa <HAL_UART_IRQHandler+0xae>
 8007b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	f043 0201 	orr.w	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00b      	beq.n	8007bce <HAL_UART_IRQHandler+0xd2>
 8007bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d005      	beq.n	8007bce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	f043 0202 	orr.w	r2, r3, #2
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00b      	beq.n	8007bf2 <HAL_UART_IRQHandler+0xf6>
 8007bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f043 0204 	orr.w	r2, r3, #4
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d011      	beq.n	8007c22 <HAL_UART_IRQHandler+0x126>
 8007bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d105      	bne.n	8007c16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d005      	beq.n	8007c22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	f043 0208 	orr.w	r2, r3, #8
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 81ed 	beq.w	8008006 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c30:	f003 0320 	and.w	r3, r3, #32
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d008      	beq.n	8007c4a <HAL_UART_IRQHandler+0x14e>
 8007c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fd10 	bl	800866a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c54:	2b40      	cmp	r3, #64	; 0x40
 8007c56:	bf0c      	ite	eq
 8007c58:	2301      	moveq	r3, #1
 8007c5a:	2300      	movne	r3, #0
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	f003 0308 	and.w	r3, r3, #8
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d103      	bne.n	8007c76 <HAL_UART_IRQHandler+0x17a>
 8007c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d04f      	beq.n	8007d16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fc18 	bl	80084ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c86:	2b40      	cmp	r3, #64	; 0x40
 8007c88:	d141      	bne.n	8007d0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3314      	adds	r3, #20
 8007c90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3314      	adds	r3, #20
 8007cb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1d9      	bne.n	8007c8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d013      	beq.n	8007d06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	4a7d      	ldr	r2, [pc, #500]	; (8007ed8 <HAL_UART_IRQHandler+0x3dc>)
 8007ce4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fd fa14 	bl	8005118 <HAL_DMA_Abort_IT>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d016      	beq.n	8007d24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d04:	e00e      	b.n	8007d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f9a4 	bl	8008054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0c:	e00a      	b.n	8007d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f9a0 	bl	8008054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d14:	e006      	b.n	8007d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f99c 	bl	8008054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d22:	e170      	b.n	8008006 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d24:	bf00      	nop
    return;
 8007d26:	e16e      	b.n	8008006 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	f040 814a 	bne.w	8007fc6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d36:	f003 0310 	and.w	r3, r3, #16
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 8143 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	f003 0310 	and.w	r3, r3, #16
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 813c 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60bb      	str	r3, [r7, #8]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	60bb      	str	r3, [r7, #8]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	60bb      	str	r3, [r7, #8]
 8007d62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6e:	2b40      	cmp	r3, #64	; 0x40
 8007d70:	f040 80b4 	bne.w	8007edc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 8140 	beq.w	800800a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d92:	429a      	cmp	r2, r3
 8007d94:	f080 8139 	bcs.w	800800a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007daa:	f000 8088 	beq.w	8007ebe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	330c      	adds	r3, #12
 8007db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007dda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007de6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1d9      	bne.n	8007dae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3314      	adds	r3, #20
 8007e00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e0c:	f023 0301 	bic.w	r3, r3, #1
 8007e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3314      	adds	r3, #20
 8007e1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e1      	bne.n	8007dfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3314      	adds	r3, #20
 8007e3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3314      	adds	r3, #20
 8007e56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e3      	bne.n	8007e36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	330c      	adds	r3, #12
 8007e82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e8e:	f023 0310 	bic.w	r3, r3, #16
 8007e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ea0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ea2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ea6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e3      	bne.n	8007e7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fd f8bd 	bl	8005038 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	4619      	mov	r1, r3
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f8ca 	bl	8008068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ed4:	e099      	b.n	800800a <HAL_UART_IRQHandler+0x50e>
 8007ed6:	bf00      	nop
 8007ed8:	08008573 	.word	0x08008573
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 808b 	beq.w	800800e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ef8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8086 	beq.w	800800e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	330c      	adds	r3, #12
 8007f08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	330c      	adds	r3, #12
 8007f22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f26:	647a      	str	r2, [r7, #68]	; 0x44
 8007f28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e3      	bne.n	8007f02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3314      	adds	r3, #20
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	623b      	str	r3, [r7, #32]
   return(result);
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	f023 0301 	bic.w	r3, r3, #1
 8007f50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3314      	adds	r3, #20
 8007f5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f5e:	633a      	str	r2, [r7, #48]	; 0x30
 8007f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e3      	bne.n	8007f3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	330c      	adds	r3, #12
 8007f86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0310 	bic.w	r3, r3, #16
 8007f96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	330c      	adds	r3, #12
 8007fa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007fa4:	61fa      	str	r2, [r7, #28]
 8007fa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	69b9      	ldr	r1, [r7, #24]
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e3      	bne.n	8007f80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f852 	bl	8008068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fc4:	e023      	b.n	800800e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x4ea>
 8007fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fadb 	bl	800859a <UART_Transmit_IT>
    return;
 8007fe4:	e014      	b.n	8008010 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00e      	beq.n	8008010 <HAL_UART_IRQHandler+0x514>
 8007ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fb1b 	bl	800863a <UART_EndTransmit_IT>
    return;
 8008004:	e004      	b.n	8008010 <HAL_UART_IRQHandler+0x514>
    return;
 8008006:	bf00      	nop
 8008008:	e002      	b.n	8008010 <HAL_UART_IRQHandler+0x514>
      return;
 800800a:	bf00      	nop
 800800c:	e000      	b.n	8008010 <HAL_UART_IRQHandler+0x514>
      return;
 800800e:	bf00      	nop
  }
}
 8008010:	37e8      	adds	r7, #232	; 0xe8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop

08008018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b090      	sub	sp, #64	; 0x40
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d137      	bne.n	800810c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800809c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809e:	2200      	movs	r2, #0
 80080a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3314      	adds	r3, #20
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	623b      	str	r3, [r7, #32]
   return(result);
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3314      	adds	r3, #20
 80080c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080c2:	633a      	str	r2, [r7, #48]	; 0x30
 80080c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ca:	e841 2300 	strex	r3, r2, [r1]
 80080ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1e5      	bne.n	80080a2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	330c      	adds	r3, #12
 80080dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
 80080ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	330c      	adds	r3, #12
 80080f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080f6:	61fa      	str	r2, [r7, #28]
 80080f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	69b9      	ldr	r1, [r7, #24]
 80080fc:	69fa      	ldr	r2, [r7, #28]
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	617b      	str	r3, [r7, #20]
   return(result);
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e5      	bne.n	80080d6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800810a:	e002      	b.n	8008112 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800810c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800810e:	f7ff ff83 	bl	8008018 <HAL_UART_TxCpltCallback>
}
 8008112:	bf00      	nop
 8008114:	3740      	adds	r7, #64	; 0x40
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b084      	sub	sp, #16
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f7ff ff7f 	bl	800802c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800812e:	bf00      	nop
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b09c      	sub	sp, #112	; 0x70
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814e:	2b00      	cmp	r3, #0
 8008150:	d172      	bne.n	8008238 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008154:	2200      	movs	r2, #0
 8008156:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	330c      	adds	r3, #12
 800815e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800816a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800816e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	330c      	adds	r3, #12
 8008176:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008178:	65ba      	str	r2, [r7, #88]	; 0x58
 800817a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800817e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e5      	bne.n	8008158 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3314      	adds	r3, #20
 8008192:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008196:	e853 3f00 	ldrex	r3, [r3]
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800819c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819e:	f023 0301 	bic.w	r3, r3, #1
 80081a2:	667b      	str	r3, [r7, #100]	; 0x64
 80081a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3314      	adds	r3, #20
 80081aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081ac:	647a      	str	r2, [r7, #68]	; 0x44
 80081ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081b4:	e841 2300 	strex	r3, r2, [r1]
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1e5      	bne.n	800818c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3314      	adds	r3, #20
 80081c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	623b      	str	r3, [r7, #32]
   return(result);
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081d6:	663b      	str	r3, [r7, #96]	; 0x60
 80081d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3314      	adds	r3, #20
 80081de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081e0:	633a      	str	r2, [r7, #48]	; 0x30
 80081e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e8:	e841 2300 	strex	r3, r2, [r1]
 80081ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e5      	bne.n	80081c0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008200:	2b01      	cmp	r3, #1
 8008202:	d119      	bne.n	8008238 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	330c      	adds	r3, #12
 800820a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	60fb      	str	r3, [r7, #12]
   return(result);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0310 	bic.w	r3, r3, #16
 800821a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800821c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	330c      	adds	r3, #12
 8008222:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008224:	61fa      	str	r2, [r7, #28]
 8008226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	69b9      	ldr	r1, [r7, #24]
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	617b      	str	r3, [r7, #20]
   return(result);
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e5      	bne.n	8008204 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823c:	2b01      	cmp	r3, #1
 800823e:	d106      	bne.n	800824e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008242:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008244:	4619      	mov	r1, r3
 8008246:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008248:	f7ff ff0e 	bl	8008068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800824c:	e002      	b.n	8008254 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800824e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008250:	f7fa fd54 	bl	8002cfc <HAL_UART_RxCpltCallback>
}
 8008254:	bf00      	nop
 8008256:	3770      	adds	r7, #112	; 0x70
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826e:	2b01      	cmp	r3, #1
 8008270:	d108      	bne.n	8008284 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008276:	085b      	lsrs	r3, r3, #1
 8008278:	b29b      	uxth	r3, r3
 800827a:	4619      	mov	r1, r3
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f7ff fef3 	bl	8008068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008282:	e002      	b.n	800828a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f7ff fedb 	bl	8008040 <HAL_UART_RxHalfCpltCallback>
}
 800828a:	bf00      	nop
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ae:	2b80      	cmp	r3, #128	; 0x80
 80082b0:	bf0c      	ite	eq
 80082b2:	2301      	moveq	r3, #1
 80082b4:	2300      	movne	r3, #0
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b21      	cmp	r3, #33	; 0x21
 80082c4:	d108      	bne.n	80082d8 <UART_DMAError+0x46>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d005      	beq.n	80082d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2200      	movs	r2, #0
 80082d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80082d2:	68b8      	ldr	r0, [r7, #8]
 80082d4:	f000 f8c2 	bl	800845c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e2:	2b40      	cmp	r3, #64	; 0x40
 80082e4:	bf0c      	ite	eq
 80082e6:	2301      	moveq	r3, #1
 80082e8:	2300      	movne	r3, #0
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b22      	cmp	r3, #34	; 0x22
 80082f8:	d108      	bne.n	800830c <UART_DMAError+0x7a>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d005      	beq.n	800830c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2200      	movs	r2, #0
 8008304:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008306:	68b8      	ldr	r0, [r7, #8]
 8008308:	f000 f8d0 	bl	80084ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008310:	f043 0210 	orr.w	r2, r3, #16
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008318:	68b8      	ldr	r0, [r7, #8]
 800831a:	f7ff fe9b 	bl	8008054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b098      	sub	sp, #96	; 0x60
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	4613      	mov	r3, r2
 8008334:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	88fa      	ldrh	r2, [r7, #6]
 8008340:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2222      	movs	r2, #34	; 0x22
 800834c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	4a3e      	ldr	r2, [pc, #248]	; (8008450 <UART_Start_Receive_DMA+0x128>)
 8008356:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835c:	4a3d      	ldr	r2, [pc, #244]	; (8008454 <UART_Start_Receive_DMA+0x12c>)
 800835e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008364:	4a3c      	ldr	r2, [pc, #240]	; (8008458 <UART_Start_Receive_DMA+0x130>)
 8008366:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836c:	2200      	movs	r2, #0
 800836e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008370:	f107 0308 	add.w	r3, r7, #8
 8008374:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3304      	adds	r3, #4
 8008380:	4619      	mov	r1, r3
 8008382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	88fb      	ldrh	r3, [r7, #6]
 8008388:	f7fc fdfe 	bl	8004f88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800838c:	2300      	movs	r3, #0
 800838e:	613b      	str	r3, [r7, #16]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	613b      	str	r3, [r7, #16]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	613b      	str	r3, [r7, #16]
 80083a0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	330c      	adds	r3, #12
 80083b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	330c      	adds	r3, #12
 80083c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80083cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80083d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80083d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e5      	bne.n	80083aa <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3314      	adds	r3, #20
 80083e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	f043 0301 	orr.w	r3, r3, #1
 80083f4:	657b      	str	r3, [r7, #84]	; 0x54
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3314      	adds	r3, #20
 80083fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e5      	bne.n	80083de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3314      	adds	r3, #20
 8008418:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	617b      	str	r3, [r7, #20]
   return(result);
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008428:	653b      	str	r3, [r7, #80]	; 0x50
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3314      	adds	r3, #20
 8008430:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008432:	627a      	str	r2, [r7, #36]	; 0x24
 8008434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6a39      	ldr	r1, [r7, #32]
 8008438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e5      	bne.n	8008412 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3760      	adds	r7, #96	; 0x60
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	08008137 	.word	0x08008137
 8008454:	0800825d 	.word	0x0800825d
 8008458:	08008293 	.word	0x08008293

0800845c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800845c:	b480      	push	{r7}
 800845e:	b089      	sub	sp, #36	; 0x24
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	330c      	adds	r3, #12
 800846a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	60bb      	str	r3, [r7, #8]
   return(result);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800847a:	61fb      	str	r3, [r7, #28]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	330c      	adds	r3, #12
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	61ba      	str	r2, [r7, #24]
 8008486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6979      	ldr	r1, [r7, #20]
 800848a:	69ba      	ldr	r2, [r7, #24]
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	613b      	str	r3, [r7, #16]
   return(result);
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e5      	bne.n	8008464 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80084a0:	bf00      	nop
 80084a2:	3724      	adds	r7, #36	; 0x24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b095      	sub	sp, #84	; 0x54
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	330c      	adds	r3, #12
 80084ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	330c      	adds	r3, #12
 80084d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084d4:	643a      	str	r2, [r7, #64]	; 0x40
 80084d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e5      	bne.n	80084b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3314      	adds	r3, #20
 80084ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	e853 3f00 	ldrex	r3, [r3]
 80084f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	f023 0301 	bic.w	r3, r3, #1
 80084fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3314      	adds	r3, #20
 8008506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800850a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800850e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008510:	e841 2300 	strex	r3, r2, [r1]
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e5      	bne.n	80084e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008520:	2b01      	cmp	r3, #1
 8008522:	d119      	bne.n	8008558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	330c      	adds	r3, #12
 800852a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	60bb      	str	r3, [r7, #8]
   return(result);
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f023 0310 	bic.w	r3, r3, #16
 800853a:	647b      	str	r3, [r7, #68]	; 0x44
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	330c      	adds	r3, #12
 8008542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008544:	61ba      	str	r2, [r7, #24]
 8008546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6979      	ldr	r1, [r7, #20]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	613b      	str	r3, [r7, #16]
   return(result);
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e5      	bne.n	8008524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2220      	movs	r2, #32
 800855c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008566:	bf00      	nop
 8008568:	3754      	adds	r7, #84	; 0x54
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f7ff fd61 	bl	8008054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008592:	bf00      	nop
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800859a:	b480      	push	{r7}
 800859c:	b085      	sub	sp, #20
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b21      	cmp	r3, #33	; 0x21
 80085ac:	d13e      	bne.n	800862c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b6:	d114      	bne.n	80085e2 <UART_Transmit_IT+0x48>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d110      	bne.n	80085e2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	1c9a      	adds	r2, r3, #2
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	621a      	str	r2, [r3, #32]
 80085e0:	e008      	b.n	80085f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	1c59      	adds	r1, r3, #1
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	6211      	str	r1, [r2, #32]
 80085ec:	781a      	ldrb	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	3b01      	subs	r3, #1
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	4619      	mov	r1, r3
 8008602:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10f      	bne.n	8008628 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008616:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008626:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	e000      	b.n	800862e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800862c:	2302      	movs	r3, #2
  }
}
 800862e:	4618      	mov	r0, r3
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b082      	sub	sp, #8
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68da      	ldr	r2, [r3, #12]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008650:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2220      	movs	r2, #32
 8008656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff fcdc 	bl	8008018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b08c      	sub	sp, #48	; 0x30
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b22      	cmp	r3, #34	; 0x22
 800867c:	f040 80ab 	bne.w	80087d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008688:	d117      	bne.n	80086ba <UART_Receive_IT+0x50>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d113      	bne.n	80086ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008692:	2300      	movs	r3, #0
 8008694:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	1c9a      	adds	r2, r3, #2
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	629a      	str	r2, [r3, #40]	; 0x28
 80086b8:	e026      	b.n	8008708 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80086c0:	2300      	movs	r3, #0
 80086c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086cc:	d007      	beq.n	80086de <UART_Receive_IT+0x74>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <UART_Receive_IT+0x82>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d106      	bne.n	80086ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	e008      	b.n	80086fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800870c:	b29b      	uxth	r3, r3
 800870e:	3b01      	subs	r3, #1
 8008710:	b29b      	uxth	r3, r3
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	4619      	mov	r1, r3
 8008716:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008718:	2b00      	cmp	r3, #0
 800871a:	d15a      	bne.n	80087d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0220 	bic.w	r2, r2, #32
 800872a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800873a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	695a      	ldr	r2, [r3, #20]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 0201 	bic.w	r2, r2, #1
 800874a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2220      	movs	r2, #32
 8008750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008758:	2b01      	cmp	r3, #1
 800875a:	d135      	bne.n	80087c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	330c      	adds	r3, #12
 8008768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	e853 3f00 	ldrex	r3, [r3]
 8008770:	613b      	str	r3, [r7, #16]
   return(result);
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f023 0310 	bic.w	r3, r3, #16
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	330c      	adds	r3, #12
 8008780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008782:	623a      	str	r2, [r7, #32]
 8008784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	69f9      	ldr	r1, [r7, #28]
 8008788:	6a3a      	ldr	r2, [r7, #32]
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e5      	bne.n	8008762 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	2b10      	cmp	r3, #16
 80087a2:	d10a      	bne.n	80087ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff fc51 	bl	8008068 <HAL_UARTEx_RxEventCallback>
 80087c6:	e002      	b.n	80087ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7fa fa97 	bl	8002cfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	e002      	b.n	80087d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	e000      	b.n	80087d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80087d6:	2302      	movs	r3, #2
  }
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3730      	adds	r7, #48	; 0x30
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	b09f      	sub	sp, #124	; 0x7c
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f6:	68d9      	ldr	r1, [r3, #12]
 80087f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	ea40 0301 	orr.w	r3, r0, r1
 8008800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	431a      	orrs	r2, r3
 800880c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	431a      	orrs	r2, r3
 8008812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	4313      	orrs	r3, r2
 8008818:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800881a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008824:	f021 010c 	bic.w	r1, r1, #12
 8008828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800882e:	430b      	orrs	r3, r1
 8008830:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800883c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800883e:	6999      	ldr	r1, [r3, #24]
 8008840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	ea40 0301 	orr.w	r3, r0, r1
 8008848:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800884a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	4bc5      	ldr	r3, [pc, #788]	; (8008b64 <UART_SetConfig+0x384>)
 8008850:	429a      	cmp	r2, r3
 8008852:	d004      	beq.n	800885e <UART_SetConfig+0x7e>
 8008854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	4bc3      	ldr	r3, [pc, #780]	; (8008b68 <UART_SetConfig+0x388>)
 800885a:	429a      	cmp	r2, r3
 800885c:	d103      	bne.n	8008866 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800885e:	f7fd fcfd 	bl	800625c <HAL_RCC_GetPCLK2Freq>
 8008862:	6778      	str	r0, [r7, #116]	; 0x74
 8008864:	e002      	b.n	800886c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008866:	f7fd fce5 	bl	8006234 <HAL_RCC_GetPCLK1Freq>
 800886a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800886c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008874:	f040 80b6 	bne.w	80089e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800887a:	461c      	mov	r4, r3
 800887c:	f04f 0500 	mov.w	r5, #0
 8008880:	4622      	mov	r2, r4
 8008882:	462b      	mov	r3, r5
 8008884:	1891      	adds	r1, r2, r2
 8008886:	6439      	str	r1, [r7, #64]	; 0x40
 8008888:	415b      	adcs	r3, r3
 800888a:	647b      	str	r3, [r7, #68]	; 0x44
 800888c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008890:	1912      	adds	r2, r2, r4
 8008892:	eb45 0303 	adc.w	r3, r5, r3
 8008896:	f04f 0000 	mov.w	r0, #0
 800889a:	f04f 0100 	mov.w	r1, #0
 800889e:	00d9      	lsls	r1, r3, #3
 80088a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088a4:	00d0      	lsls	r0, r2, #3
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	1911      	adds	r1, r2, r4
 80088ac:	6639      	str	r1, [r7, #96]	; 0x60
 80088ae:	416b      	adcs	r3, r5
 80088b0:	667b      	str	r3, [r7, #100]	; 0x64
 80088b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	461a      	mov	r2, r3
 80088b8:	f04f 0300 	mov.w	r3, #0
 80088bc:	1891      	adds	r1, r2, r2
 80088be:	63b9      	str	r1, [r7, #56]	; 0x38
 80088c0:	415b      	adcs	r3, r3
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80088cc:	f7f7 ffb2 	bl	8000834 <__aeabi_uldivmod>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4ba5      	ldr	r3, [pc, #660]	; (8008b6c <UART_SetConfig+0x38c>)
 80088d6:	fba3 2302 	umull	r2, r3, r3, r2
 80088da:	095b      	lsrs	r3, r3, #5
 80088dc:	011e      	lsls	r6, r3, #4
 80088de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088e0:	461c      	mov	r4, r3
 80088e2:	f04f 0500 	mov.w	r5, #0
 80088e6:	4622      	mov	r2, r4
 80088e8:	462b      	mov	r3, r5
 80088ea:	1891      	adds	r1, r2, r2
 80088ec:	6339      	str	r1, [r7, #48]	; 0x30
 80088ee:	415b      	adcs	r3, r3
 80088f0:	637b      	str	r3, [r7, #52]	; 0x34
 80088f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088f6:	1912      	adds	r2, r2, r4
 80088f8:	eb45 0303 	adc.w	r3, r5, r3
 80088fc:	f04f 0000 	mov.w	r0, #0
 8008900:	f04f 0100 	mov.w	r1, #0
 8008904:	00d9      	lsls	r1, r3, #3
 8008906:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800890a:	00d0      	lsls	r0, r2, #3
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	1911      	adds	r1, r2, r4
 8008912:	65b9      	str	r1, [r7, #88]	; 0x58
 8008914:	416b      	adcs	r3, r5
 8008916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	461a      	mov	r2, r3
 800891e:	f04f 0300 	mov.w	r3, #0
 8008922:	1891      	adds	r1, r2, r2
 8008924:	62b9      	str	r1, [r7, #40]	; 0x28
 8008926:	415b      	adcs	r3, r3
 8008928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800892a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800892e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008932:	f7f7 ff7f 	bl	8000834 <__aeabi_uldivmod>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	4b8c      	ldr	r3, [pc, #560]	; (8008b6c <UART_SetConfig+0x38c>)
 800893c:	fba3 1302 	umull	r1, r3, r3, r2
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	2164      	movs	r1, #100	; 0x64
 8008944:	fb01 f303 	mul.w	r3, r1, r3
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	3332      	adds	r3, #50	; 0x32
 800894e:	4a87      	ldr	r2, [pc, #540]	; (8008b6c <UART_SetConfig+0x38c>)
 8008950:	fba2 2303 	umull	r2, r3, r2, r3
 8008954:	095b      	lsrs	r3, r3, #5
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800895c:	441e      	add	r6, r3
 800895e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008960:	4618      	mov	r0, r3
 8008962:	f04f 0100 	mov.w	r1, #0
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	1894      	adds	r4, r2, r2
 800896c:	623c      	str	r4, [r7, #32]
 800896e:	415b      	adcs	r3, r3
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
 8008972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008976:	1812      	adds	r2, r2, r0
 8008978:	eb41 0303 	adc.w	r3, r1, r3
 800897c:	f04f 0400 	mov.w	r4, #0
 8008980:	f04f 0500 	mov.w	r5, #0
 8008984:	00dd      	lsls	r5, r3, #3
 8008986:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800898a:	00d4      	lsls	r4, r2, #3
 800898c:	4622      	mov	r2, r4
 800898e:	462b      	mov	r3, r5
 8008990:	1814      	adds	r4, r2, r0
 8008992:	653c      	str	r4, [r7, #80]	; 0x50
 8008994:	414b      	adcs	r3, r1
 8008996:	657b      	str	r3, [r7, #84]	; 0x54
 8008998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	461a      	mov	r2, r3
 800899e:	f04f 0300 	mov.w	r3, #0
 80089a2:	1891      	adds	r1, r2, r2
 80089a4:	61b9      	str	r1, [r7, #24]
 80089a6:	415b      	adcs	r3, r3
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80089b2:	f7f7 ff3f 	bl	8000834 <__aeabi_uldivmod>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4b6c      	ldr	r3, [pc, #432]	; (8008b6c <UART_SetConfig+0x38c>)
 80089bc:	fba3 1302 	umull	r1, r3, r3, r2
 80089c0:	095b      	lsrs	r3, r3, #5
 80089c2:	2164      	movs	r1, #100	; 0x64
 80089c4:	fb01 f303 	mul.w	r3, r1, r3
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	3332      	adds	r3, #50	; 0x32
 80089ce:	4a67      	ldr	r2, [pc, #412]	; (8008b6c <UART_SetConfig+0x38c>)
 80089d0:	fba2 2303 	umull	r2, r3, r2, r3
 80089d4:	095b      	lsrs	r3, r3, #5
 80089d6:	f003 0207 	and.w	r2, r3, #7
 80089da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4432      	add	r2, r6
 80089e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089e2:	e0b9      	b.n	8008b58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089e6:	461c      	mov	r4, r3
 80089e8:	f04f 0500 	mov.w	r5, #0
 80089ec:	4622      	mov	r2, r4
 80089ee:	462b      	mov	r3, r5
 80089f0:	1891      	adds	r1, r2, r2
 80089f2:	6139      	str	r1, [r7, #16]
 80089f4:	415b      	adcs	r3, r3
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089fc:	1912      	adds	r2, r2, r4
 80089fe:	eb45 0303 	adc.w	r3, r5, r3
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f04f 0100 	mov.w	r1, #0
 8008a0a:	00d9      	lsls	r1, r3, #3
 8008a0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a10:	00d0      	lsls	r0, r2, #3
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	eb12 0804 	adds.w	r8, r2, r4
 8008a1a:	eb43 0905 	adc.w	r9, r3, r5
 8008a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f04f 0100 	mov.w	r1, #0
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	008b      	lsls	r3, r1, #2
 8008a32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a36:	0082      	lsls	r2, r0, #2
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	f7f7 fefa 	bl	8000834 <__aeabi_uldivmod>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4b49      	ldr	r3, [pc, #292]	; (8008b6c <UART_SetConfig+0x38c>)
 8008a46:	fba3 2302 	umull	r2, r3, r3, r2
 8008a4a:	095b      	lsrs	r3, r3, #5
 8008a4c:	011e      	lsls	r6, r3, #4
 8008a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a50:	4618      	mov	r0, r3
 8008a52:	f04f 0100 	mov.w	r1, #0
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	1894      	adds	r4, r2, r2
 8008a5c:	60bc      	str	r4, [r7, #8]
 8008a5e:	415b      	adcs	r3, r3
 8008a60:	60fb      	str	r3, [r7, #12]
 8008a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a66:	1812      	adds	r2, r2, r0
 8008a68:	eb41 0303 	adc.w	r3, r1, r3
 8008a6c:	f04f 0400 	mov.w	r4, #0
 8008a70:	f04f 0500 	mov.w	r5, #0
 8008a74:	00dd      	lsls	r5, r3, #3
 8008a76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a7a:	00d4      	lsls	r4, r2, #3
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	462b      	mov	r3, r5
 8008a80:	1814      	adds	r4, r2, r0
 8008a82:	64bc      	str	r4, [r7, #72]	; 0x48
 8008a84:	414b      	adcs	r3, r1
 8008a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f04f 0100 	mov.w	r1, #0
 8008a92:	f04f 0200 	mov.w	r2, #0
 8008a96:	f04f 0300 	mov.w	r3, #0
 8008a9a:	008b      	lsls	r3, r1, #2
 8008a9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008aa0:	0082      	lsls	r2, r0, #2
 8008aa2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008aa6:	f7f7 fec5 	bl	8000834 <__aeabi_uldivmod>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4b2f      	ldr	r3, [pc, #188]	; (8008b6c <UART_SetConfig+0x38c>)
 8008ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	2164      	movs	r1, #100	; 0x64
 8008ab8:	fb01 f303 	mul.w	r3, r1, r3
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	3332      	adds	r3, #50	; 0x32
 8008ac2:	4a2a      	ldr	r2, [pc, #168]	; (8008b6c <UART_SetConfig+0x38c>)
 8008ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac8:	095b      	lsrs	r3, r3, #5
 8008aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ace:	441e      	add	r6, r3
 8008ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f04f 0100 	mov.w	r1, #0
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	1894      	adds	r4, r2, r2
 8008ade:	603c      	str	r4, [r7, #0]
 8008ae0:	415b      	adcs	r3, r3
 8008ae2:	607b      	str	r3, [r7, #4]
 8008ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae8:	1812      	adds	r2, r2, r0
 8008aea:	eb41 0303 	adc.w	r3, r1, r3
 8008aee:	f04f 0400 	mov.w	r4, #0
 8008af2:	f04f 0500 	mov.w	r5, #0
 8008af6:	00dd      	lsls	r5, r3, #3
 8008af8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008afc:	00d4      	lsls	r4, r2, #3
 8008afe:	4622      	mov	r2, r4
 8008b00:	462b      	mov	r3, r5
 8008b02:	eb12 0a00 	adds.w	sl, r2, r0
 8008b06:	eb43 0b01 	adc.w	fp, r3, r1
 8008b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f04f 0100 	mov.w	r1, #0
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	f04f 0300 	mov.w	r3, #0
 8008b1c:	008b      	lsls	r3, r1, #2
 8008b1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b22:	0082      	lsls	r2, r0, #2
 8008b24:	4650      	mov	r0, sl
 8008b26:	4659      	mov	r1, fp
 8008b28:	f7f7 fe84 	bl	8000834 <__aeabi_uldivmod>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <UART_SetConfig+0x38c>)
 8008b32:	fba3 1302 	umull	r1, r3, r3, r2
 8008b36:	095b      	lsrs	r3, r3, #5
 8008b38:	2164      	movs	r1, #100	; 0x64
 8008b3a:	fb01 f303 	mul.w	r3, r1, r3
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	011b      	lsls	r3, r3, #4
 8008b42:	3332      	adds	r3, #50	; 0x32
 8008b44:	4a09      	ldr	r2, [pc, #36]	; (8008b6c <UART_SetConfig+0x38c>)
 8008b46:	fba2 2303 	umull	r2, r3, r2, r3
 8008b4a:	095b      	lsrs	r3, r3, #5
 8008b4c:	f003 020f 	and.w	r2, r3, #15
 8008b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4432      	add	r2, r6
 8008b56:	609a      	str	r2, [r3, #8]
}
 8008b58:	bf00      	nop
 8008b5a:	377c      	adds	r7, #124	; 0x7c
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b62:	bf00      	nop
 8008b64:	40011000 	.word	0x40011000
 8008b68:	40011400 	.word	0x40011400
 8008b6c:	51eb851f 	.word	0x51eb851f

08008b70 <asinf>:
 8008b70:	b508      	push	{r3, lr}
 8008b72:	ed2d 8b02 	vpush	{d8}
 8008b76:	eeb0 8a40 	vmov.f32	s16, s0
 8008b7a:	f000 f82d 	bl	8008bd8 <__ieee754_asinf>
 8008b7e:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <asinf+0x5c>)
 8008b80:	f993 3000 	ldrsb.w	r3, [r3]
 8008b84:	3301      	adds	r3, #1
 8008b86:	eef0 8a40 	vmov.f32	s17, s0
 8008b8a:	d01a      	beq.n	8008bc2 <asinf+0x52>
 8008b8c:	eeb4 8a48 	vcmp.f32	s16, s16
 8008b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b94:	d615      	bvs.n	8008bc2 <asinf+0x52>
 8008b96:	eeb0 0a48 	vmov.f32	s0, s16
 8008b9a:	f000 fa7b 	bl	8009094 <fabsf>
 8008b9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008ba2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008baa:	dd0a      	ble.n	8008bc2 <asinf+0x52>
 8008bac:	f000 fa80 	bl	80090b0 <__errno>
 8008bb0:	ecbd 8b02 	vpop	{d8}
 8008bb4:	2321      	movs	r3, #33	; 0x21
 8008bb6:	6003      	str	r3, [r0, #0]
 8008bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008bbc:	4804      	ldr	r0, [pc, #16]	; (8008bd0 <asinf+0x60>)
 8008bbe:	f000 ba71 	b.w	80090a4 <nanf>
 8008bc2:	eeb0 0a68 	vmov.f32	s0, s17
 8008bc6:	ecbd 8b02 	vpop	{d8}
 8008bca:	bd08      	pop	{r3, pc}
 8008bcc:	2000000d 	.word	0x2000000d
 8008bd0:	08009170 	.word	0x08009170

08008bd4 <atan2f>:
 8008bd4:	f000 b8e6 	b.w	8008da4 <__ieee754_atan2f>

08008bd8 <__ieee754_asinf>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	ee10 5a10 	vmov	r5, s0
 8008bde:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008be2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008be6:	ed2d 8b04 	vpush	{d8-d9}
 8008bea:	d10c      	bne.n	8008c06 <__ieee754_asinf+0x2e>
 8008bec:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8008d64 <__ieee754_asinf+0x18c>
 8008bf0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8008d68 <__ieee754_asinf+0x190>
 8008bf4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008bf8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8008c00:	ecbd 8b04 	vpop	{d8-d9}
 8008c04:	bd38      	pop	{r3, r4, r5, pc}
 8008c06:	dd04      	ble.n	8008c12 <__ieee754_asinf+0x3a>
 8008c08:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008c0c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008c10:	e7f6      	b.n	8008c00 <__ieee754_asinf+0x28>
 8008c12:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008c16:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8008c1a:	da0b      	bge.n	8008c34 <__ieee754_asinf+0x5c>
 8008c1c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8008c20:	da52      	bge.n	8008cc8 <__ieee754_asinf+0xf0>
 8008c22:	eddf 7a52 	vldr	s15, [pc, #328]	; 8008d6c <__ieee754_asinf+0x194>
 8008c26:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008c2a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c32:	dce5      	bgt.n	8008c00 <__ieee754_asinf+0x28>
 8008c34:	f000 fa2e 	bl	8009094 <fabsf>
 8008c38:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8008c3c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008c40:	ee20 8a08 	vmul.f32	s16, s0, s16
 8008c44:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8008d70 <__ieee754_asinf+0x198>
 8008c48:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8008d74 <__ieee754_asinf+0x19c>
 8008c4c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8008d78 <__ieee754_asinf+0x1a0>
 8008c50:	eea8 7a27 	vfma.f32	s14, s16, s15
 8008c54:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008d7c <__ieee754_asinf+0x1a4>
 8008c58:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008c5c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8008d80 <__ieee754_asinf+0x1a8>
 8008c60:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008c64:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008d84 <__ieee754_asinf+0x1ac>
 8008c68:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008c6c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008d88 <__ieee754_asinf+0x1b0>
 8008c70:	eea7 9a88 	vfma.f32	s18, s15, s16
 8008c74:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008d8c <__ieee754_asinf+0x1b4>
 8008c78:	eee8 7a07 	vfma.f32	s15, s16, s14
 8008c7c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008d90 <__ieee754_asinf+0x1b8>
 8008c80:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008c84:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008d94 <__ieee754_asinf+0x1bc>
 8008c88:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008c8c:	eeb0 0a48 	vmov.f32	s0, s16
 8008c90:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008c94:	f000 f926 	bl	8008ee4 <__ieee754_sqrtf>
 8008c98:	4b3f      	ldr	r3, [pc, #252]	; (8008d98 <__ieee754_asinf+0x1c0>)
 8008c9a:	ee29 9a08 	vmul.f32	s18, s18, s16
 8008c9e:	429c      	cmp	r4, r3
 8008ca0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008ca4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ca8:	dd3d      	ble.n	8008d26 <__ieee754_asinf+0x14e>
 8008caa:	eea0 0a06 	vfma.f32	s0, s0, s12
 8008cae:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8008d9c <__ieee754_asinf+0x1c4>
 8008cb2:	eee0 7a26 	vfma.f32	s15, s0, s13
 8008cb6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8008d68 <__ieee754_asinf+0x190>
 8008cba:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008cbe:	2d00      	cmp	r5, #0
 8008cc0:	bfd8      	it	le
 8008cc2:	eeb1 0a40 	vnegle.f32	s0, s0
 8008cc6:	e79b      	b.n	8008c00 <__ieee754_asinf+0x28>
 8008cc8:	ee60 7a00 	vmul.f32	s15, s0, s0
 8008ccc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8008d70 <__ieee754_asinf+0x198>
 8008cd0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008d74 <__ieee754_asinf+0x19c>
 8008cd4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8008d88 <__ieee754_asinf+0x1b0>
 8008cd8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008cdc:	eddf 6a27 	vldr	s13, [pc, #156]	; 8008d7c <__ieee754_asinf+0x1a4>
 8008ce0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008ce4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008d80 <__ieee754_asinf+0x1a8>
 8008ce8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008cec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008d84 <__ieee754_asinf+0x1ac>
 8008cf0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008cf4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008d78 <__ieee754_asinf+0x1a0>
 8008cf8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008cfc:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008d8c <__ieee754_asinf+0x1b4>
 8008d00:	eee7 6a86 	vfma.f32	s13, s15, s12
 8008d04:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8008d90 <__ieee754_asinf+0x1b8>
 8008d08:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8008d0c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008d94 <__ieee754_asinf+0x1bc>
 8008d10:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d18:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8008d1c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8008d20:	eea0 0a27 	vfma.f32	s0, s0, s15
 8008d24:	e76c      	b.n	8008c00 <__ieee754_asinf+0x28>
 8008d26:	ee10 3a10 	vmov	r3, s0
 8008d2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008d2e:	f023 030f 	bic.w	r3, r3, #15
 8008d32:	ee07 3a10 	vmov	s14, r3
 8008d36:	eea7 8a47 	vfms.f32	s16, s14, s14
 8008d3a:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008d3e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008d42:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8008d46:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008d64 <__ieee754_asinf+0x18c>
 8008d4a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8008d4e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8008d52:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8008da0 <__ieee754_asinf+0x1c8>
 8008d56:	eeb0 6a40 	vmov.f32	s12, s0
 8008d5a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008d5e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008d62:	e7aa      	b.n	8008cba <__ieee754_asinf+0xe2>
 8008d64:	b33bbd2e 	.word	0xb33bbd2e
 8008d68:	3fc90fdb 	.word	0x3fc90fdb
 8008d6c:	7149f2ca 	.word	0x7149f2ca
 8008d70:	3811ef08 	.word	0x3811ef08
 8008d74:	3a4f7f04 	.word	0x3a4f7f04
 8008d78:	3e2aaaab 	.word	0x3e2aaaab
 8008d7c:	bd241146 	.word	0xbd241146
 8008d80:	3e4e0aa8 	.word	0x3e4e0aa8
 8008d84:	bea6b090 	.word	0xbea6b090
 8008d88:	3d9dc62e 	.word	0x3d9dc62e
 8008d8c:	bf303361 	.word	0xbf303361
 8008d90:	4001572d 	.word	0x4001572d
 8008d94:	c019d139 	.word	0xc019d139
 8008d98:	3f799999 	.word	0x3f799999
 8008d9c:	333bbd2e 	.word	0x333bbd2e
 8008da0:	3f490fdb 	.word	0x3f490fdb

08008da4 <__ieee754_atan2f>:
 8008da4:	ee10 2a90 	vmov	r2, s1
 8008da8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008dac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008db0:	b510      	push	{r4, lr}
 8008db2:	eef0 7a40 	vmov.f32	s15, s0
 8008db6:	dc06      	bgt.n	8008dc6 <__ieee754_atan2f+0x22>
 8008db8:	ee10 0a10 	vmov	r0, s0
 8008dbc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008dc0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008dc4:	dd04      	ble.n	8008dd0 <__ieee754_atan2f+0x2c>
 8008dc6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008dca:	eeb0 0a67 	vmov.f32	s0, s15
 8008dce:	bd10      	pop	{r4, pc}
 8008dd0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008dd4:	d103      	bne.n	8008dde <__ieee754_atan2f+0x3a>
 8008dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dda:	f000 b887 	b.w	8008eec <atanf>
 8008dde:	1794      	asrs	r4, r2, #30
 8008de0:	f004 0402 	and.w	r4, r4, #2
 8008de4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008de8:	b943      	cbnz	r3, 8008dfc <__ieee754_atan2f+0x58>
 8008dea:	2c02      	cmp	r4, #2
 8008dec:	d05e      	beq.n	8008eac <__ieee754_atan2f+0x108>
 8008dee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008ec0 <__ieee754_atan2f+0x11c>
 8008df2:	2c03      	cmp	r4, #3
 8008df4:	bf08      	it	eq
 8008df6:	eef0 7a47 	vmoveq.f32	s15, s14
 8008dfa:	e7e6      	b.n	8008dca <__ieee754_atan2f+0x26>
 8008dfc:	b941      	cbnz	r1, 8008e10 <__ieee754_atan2f+0x6c>
 8008dfe:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008ec4 <__ieee754_atan2f+0x120>
 8008e02:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008ec8 <__ieee754_atan2f+0x124>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	bfb8      	it	lt
 8008e0a:	eef0 7a40 	vmovlt.f32	s15, s0
 8008e0e:	e7dc      	b.n	8008dca <__ieee754_atan2f+0x26>
 8008e10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008e14:	d110      	bne.n	8008e38 <__ieee754_atan2f+0x94>
 8008e16:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008e1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e1e:	d107      	bne.n	8008e30 <__ieee754_atan2f+0x8c>
 8008e20:	2c02      	cmp	r4, #2
 8008e22:	d846      	bhi.n	8008eb2 <__ieee754_atan2f+0x10e>
 8008e24:	4b29      	ldr	r3, [pc, #164]	; (8008ecc <__ieee754_atan2f+0x128>)
 8008e26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e2a:	edd4 7a00 	vldr	s15, [r4]
 8008e2e:	e7cc      	b.n	8008dca <__ieee754_atan2f+0x26>
 8008e30:	2c02      	cmp	r4, #2
 8008e32:	d841      	bhi.n	8008eb8 <__ieee754_atan2f+0x114>
 8008e34:	4b26      	ldr	r3, [pc, #152]	; (8008ed0 <__ieee754_atan2f+0x12c>)
 8008e36:	e7f6      	b.n	8008e26 <__ieee754_atan2f+0x82>
 8008e38:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008e3c:	d0df      	beq.n	8008dfe <__ieee754_atan2f+0x5a>
 8008e3e:	1a5b      	subs	r3, r3, r1
 8008e40:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008e44:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008e48:	da1a      	bge.n	8008e80 <__ieee754_atan2f+0xdc>
 8008e4a:	2a00      	cmp	r2, #0
 8008e4c:	da01      	bge.n	8008e52 <__ieee754_atan2f+0xae>
 8008e4e:	313c      	adds	r1, #60	; 0x3c
 8008e50:	db19      	blt.n	8008e86 <__ieee754_atan2f+0xe2>
 8008e52:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008e56:	f000 f91d 	bl	8009094 <fabsf>
 8008e5a:	f000 f847 	bl	8008eec <atanf>
 8008e5e:	eef0 7a40 	vmov.f32	s15, s0
 8008e62:	2c01      	cmp	r4, #1
 8008e64:	d012      	beq.n	8008e8c <__ieee754_atan2f+0xe8>
 8008e66:	2c02      	cmp	r4, #2
 8008e68:	d017      	beq.n	8008e9a <__ieee754_atan2f+0xf6>
 8008e6a:	2c00      	cmp	r4, #0
 8008e6c:	d0ad      	beq.n	8008dca <__ieee754_atan2f+0x26>
 8008e6e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008ed4 <__ieee754_atan2f+0x130>
 8008e72:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008e76:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008ed8 <__ieee754_atan2f+0x134>
 8008e7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008e7e:	e7a4      	b.n	8008dca <__ieee754_atan2f+0x26>
 8008e80:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008ec4 <__ieee754_atan2f+0x120>
 8008e84:	e7ed      	b.n	8008e62 <__ieee754_atan2f+0xbe>
 8008e86:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008edc <__ieee754_atan2f+0x138>
 8008e8a:	e7ea      	b.n	8008e62 <__ieee754_atan2f+0xbe>
 8008e8c:	ee17 3a90 	vmov	r3, s15
 8008e90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e94:	ee07 3a90 	vmov	s15, r3
 8008e98:	e797      	b.n	8008dca <__ieee754_atan2f+0x26>
 8008e9a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008ed4 <__ieee754_atan2f+0x130>
 8008e9e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008ea2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008ed8 <__ieee754_atan2f+0x134>
 8008ea6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008eaa:	e78e      	b.n	8008dca <__ieee754_atan2f+0x26>
 8008eac:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008ed8 <__ieee754_atan2f+0x134>
 8008eb0:	e78b      	b.n	8008dca <__ieee754_atan2f+0x26>
 8008eb2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008ee0 <__ieee754_atan2f+0x13c>
 8008eb6:	e788      	b.n	8008dca <__ieee754_atan2f+0x26>
 8008eb8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008edc <__ieee754_atan2f+0x138>
 8008ebc:	e785      	b.n	8008dca <__ieee754_atan2f+0x26>
 8008ebe:	bf00      	nop
 8008ec0:	c0490fdb 	.word	0xc0490fdb
 8008ec4:	3fc90fdb 	.word	0x3fc90fdb
 8008ec8:	bfc90fdb 	.word	0xbfc90fdb
 8008ecc:	08009174 	.word	0x08009174
 8008ed0:	08009180 	.word	0x08009180
 8008ed4:	33bbbd2e 	.word	0x33bbbd2e
 8008ed8:	40490fdb 	.word	0x40490fdb
 8008edc:	00000000 	.word	0x00000000
 8008ee0:	3f490fdb 	.word	0x3f490fdb

08008ee4 <__ieee754_sqrtf>:
 8008ee4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008ee8:	4770      	bx	lr
	...

08008eec <atanf>:
 8008eec:	b538      	push	{r3, r4, r5, lr}
 8008eee:	ee10 5a10 	vmov	r5, s0
 8008ef2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008ef6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008efa:	eef0 7a40 	vmov.f32	s15, s0
 8008efe:	db10      	blt.n	8008f22 <atanf+0x36>
 8008f00:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008f04:	dd04      	ble.n	8008f10 <atanf+0x24>
 8008f06:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009048 <atanf+0x15c>
 8008f14:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800904c <atanf+0x160>
 8008f18:	2d00      	cmp	r5, #0
 8008f1a:	bfd8      	it	le
 8008f1c:	eef0 7a40 	vmovle.f32	s15, s0
 8008f20:	e7f3      	b.n	8008f0a <atanf+0x1e>
 8008f22:	4b4b      	ldr	r3, [pc, #300]	; (8009050 <atanf+0x164>)
 8008f24:	429c      	cmp	r4, r3
 8008f26:	dc10      	bgt.n	8008f4a <atanf+0x5e>
 8008f28:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008f2c:	da0a      	bge.n	8008f44 <atanf+0x58>
 8008f2e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009054 <atanf+0x168>
 8008f32:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f3a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f42:	dce2      	bgt.n	8008f0a <atanf+0x1e>
 8008f44:	f04f 33ff 	mov.w	r3, #4294967295
 8008f48:	e013      	b.n	8008f72 <atanf+0x86>
 8008f4a:	f000 f8a3 	bl	8009094 <fabsf>
 8008f4e:	4b42      	ldr	r3, [pc, #264]	; (8009058 <atanf+0x16c>)
 8008f50:	429c      	cmp	r4, r3
 8008f52:	dc4f      	bgt.n	8008ff4 <atanf+0x108>
 8008f54:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008f58:	429c      	cmp	r4, r3
 8008f5a:	dc41      	bgt.n	8008fe0 <atanf+0xf4>
 8008f5c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008f60:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008f64:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008f68:	2300      	movs	r3, #0
 8008f6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008f6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8008f78:	eddf 5a38 	vldr	s11, [pc, #224]	; 800905c <atanf+0x170>
 8008f7c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8009060 <atanf+0x174>
 8008f80:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009064 <atanf+0x178>
 8008f84:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8009068 <atanf+0x17c>
 8008f88:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008f8c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8008f90:	eddf 5a36 	vldr	s11, [pc, #216]	; 800906c <atanf+0x180>
 8008f94:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008f98:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8009070 <atanf+0x184>
 8008f9c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008fa0:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009074 <atanf+0x188>
 8008fa4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008fa8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8009078 <atanf+0x18c>
 8008fac:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008fb0:	eddf 5a32 	vldr	s11, [pc, #200]	; 800907c <atanf+0x190>
 8008fb4:	eee7 5a05 	vfma.f32	s11, s14, s10
 8008fb8:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8009080 <atanf+0x194>
 8008fbc:	eea5 5a87 	vfma.f32	s10, s11, s14
 8008fc0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8009084 <atanf+0x198>
 8008fc4:	eee5 5a07 	vfma.f32	s11, s10, s14
 8008fc8:	eea5 0a87 	vfma.f32	s0, s11, s14
 8008fcc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008fd0:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008fd4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008fd8:	d121      	bne.n	800901e <atanf+0x132>
 8008fda:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008fde:	e794      	b.n	8008f0a <atanf+0x1e>
 8008fe0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008fe4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008fe8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008fec:	2301      	movs	r3, #1
 8008fee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008ff2:	e7be      	b.n	8008f72 <atanf+0x86>
 8008ff4:	4b24      	ldr	r3, [pc, #144]	; (8009088 <atanf+0x19c>)
 8008ff6:	429c      	cmp	r4, r3
 8008ff8:	dc0b      	bgt.n	8009012 <atanf+0x126>
 8008ffa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8008ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009002:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009006:	2302      	movs	r3, #2
 8009008:	ee70 6a67 	vsub.f32	s13, s0, s15
 800900c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009010:	e7af      	b.n	8008f72 <atanf+0x86>
 8009012:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009016:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800901a:	2303      	movs	r3, #3
 800901c:	e7a9      	b.n	8008f72 <atanf+0x86>
 800901e:	4a1b      	ldr	r2, [pc, #108]	; (800908c <atanf+0x1a0>)
 8009020:	491b      	ldr	r1, [pc, #108]	; (8009090 <atanf+0x1a4>)
 8009022:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009026:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800902a:	ed93 7a00 	vldr	s14, [r3]
 800902e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009032:	2d00      	cmp	r5, #0
 8009034:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009038:	ed92 0a00 	vldr	s0, [r2]
 800903c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009040:	bfb8      	it	lt
 8009042:	eef1 7a67 	vneglt.f32	s15, s15
 8009046:	e760      	b.n	8008f0a <atanf+0x1e>
 8009048:	3fc90fdb 	.word	0x3fc90fdb
 800904c:	bfc90fdb 	.word	0xbfc90fdb
 8009050:	3edfffff 	.word	0x3edfffff
 8009054:	7149f2ca 	.word	0x7149f2ca
 8009058:	3f97ffff 	.word	0x3f97ffff
 800905c:	3c8569d7 	.word	0x3c8569d7
 8009060:	3d4bda59 	.word	0x3d4bda59
 8009064:	bd15a221 	.word	0xbd15a221
 8009068:	be4ccccd 	.word	0xbe4ccccd
 800906c:	3d886b35 	.word	0x3d886b35
 8009070:	3dba2e6e 	.word	0x3dba2e6e
 8009074:	3e124925 	.word	0x3e124925
 8009078:	3eaaaaab 	.word	0x3eaaaaab
 800907c:	bd6ef16b 	.word	0xbd6ef16b
 8009080:	bd9d8795 	.word	0xbd9d8795
 8009084:	bde38e38 	.word	0xbde38e38
 8009088:	401bffff 	.word	0x401bffff
 800908c:	0800918c 	.word	0x0800918c
 8009090:	0800919c 	.word	0x0800919c

08009094 <fabsf>:
 8009094:	ee10 3a10 	vmov	r3, s0
 8009098:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800909c:	ee00 3a10 	vmov	s0, r3
 80090a0:	4770      	bx	lr
	...

080090a4 <nanf>:
 80090a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80090ac <nanf+0x8>
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	7fc00000 	.word	0x7fc00000

080090b0 <__errno>:
 80090b0:	4b01      	ldr	r3, [pc, #4]	; (80090b8 <__errno+0x8>)
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	20000010 	.word	0x20000010

080090bc <__libc_init_array>:
 80090bc:	b570      	push	{r4, r5, r6, lr}
 80090be:	4d0d      	ldr	r5, [pc, #52]	; (80090f4 <__libc_init_array+0x38>)
 80090c0:	4c0d      	ldr	r4, [pc, #52]	; (80090f8 <__libc_init_array+0x3c>)
 80090c2:	1b64      	subs	r4, r4, r5
 80090c4:	10a4      	asrs	r4, r4, #2
 80090c6:	2600      	movs	r6, #0
 80090c8:	42a6      	cmp	r6, r4
 80090ca:	d109      	bne.n	80090e0 <__libc_init_array+0x24>
 80090cc:	4d0b      	ldr	r5, [pc, #44]	; (80090fc <__libc_init_array+0x40>)
 80090ce:	4c0c      	ldr	r4, [pc, #48]	; (8009100 <__libc_init_array+0x44>)
 80090d0:	f000 f820 	bl	8009114 <_init>
 80090d4:	1b64      	subs	r4, r4, r5
 80090d6:	10a4      	asrs	r4, r4, #2
 80090d8:	2600      	movs	r6, #0
 80090da:	42a6      	cmp	r6, r4
 80090dc:	d105      	bne.n	80090ea <__libc_init_array+0x2e>
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e4:	4798      	blx	r3
 80090e6:	3601      	adds	r6, #1
 80090e8:	e7ee      	b.n	80090c8 <__libc_init_array+0xc>
 80090ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ee:	4798      	blx	r3
 80090f0:	3601      	adds	r6, #1
 80090f2:	e7f2      	b.n	80090da <__libc_init_array+0x1e>
 80090f4:	080091b4 	.word	0x080091b4
 80090f8:	080091b4 	.word	0x080091b4
 80090fc:	080091b4 	.word	0x080091b4
 8009100:	080091b8 	.word	0x080091b8

08009104 <memset>:
 8009104:	4402      	add	r2, r0
 8009106:	4603      	mov	r3, r0
 8009108:	4293      	cmp	r3, r2
 800910a:	d100      	bne.n	800910e <memset+0xa>
 800910c:	4770      	bx	lr
 800910e:	f803 1b01 	strb.w	r1, [r3], #1
 8009112:	e7f9      	b.n	8009108 <memset+0x4>

08009114 <_init>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	bf00      	nop
 8009118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911a:	bc08      	pop	{r3}
 800911c:	469e      	mov	lr, r3
 800911e:	4770      	bx	lr

08009120 <_fini>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	bf00      	nop
 8009124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009126:	bc08      	pop	{r3}
 8009128:	469e      	mov	lr, r3
 800912a:	4770      	bx	lr
