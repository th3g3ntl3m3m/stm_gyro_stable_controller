
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800d270  0800d270  0001d270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d808  0800d808  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d808  0800d808  0001d808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d810  0800d810  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d810  0800d810  0001d810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d814  0800d814  0001d814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800d818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          00001318  200000b0  200000b0  000200b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200013c8  200013c8  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198b1  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003712  00000000  00000000  00039991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  0003d0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e8  00000000  00000000  0003e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002539e  00000000  00000000  0003f5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ab6  00000000  00000000  00064966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de777  00000000  00000000  0007c41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015ab93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005da4  00000000  00000000  0015abe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d258 	.word	0x0800d258

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800d258 	.word	0x0800d258

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b96e 	b.w	8000f00 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468c      	mov	ip, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8083 	bne.w	8000d52 <__udivmoddi4+0x116>
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	d947      	bls.n	8000ce2 <__udivmoddi4+0xa6>
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	b142      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c58:	f1c2 0020 	rsb	r0, r2, #32
 8000c5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c60:	4091      	lsls	r1, r2
 8000c62:	4097      	lsls	r7, r2
 8000c64:	ea40 0c01 	orr.w	ip, r0, r1
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fbbc f6f8 	udiv	r6, ip, r8
 8000c74:	fa1f fe87 	uxth.w	lr, r7
 8000c78:	fb08 c116 	mls	r1, r8, r6, ip
 8000c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c80:	fb06 f10e 	mul.w	r1, r6, lr
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x60>
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 8119 	bcs.w	8000ec4 <__udivmoddi4+0x288>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 8116 	bls.w	8000ec4 <__udivmoddi4+0x288>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	443b      	add	r3, r7
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x8c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 8105 	bcs.w	8000ec8 <__udivmoddi4+0x28c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f240 8102 	bls.w	8000ec8 <__udivmoddi4+0x28c>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa0>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	b902      	cbnz	r2, 8000ce6 <__udivmoddi4+0xaa>
 8000ce4:	deff      	udf	#255	; 0xff
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d150      	bne.n	8000d90 <__udivmoddi4+0x154>
 8000cee:	1bcb      	subs	r3, r1, r7
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	fa1f f887 	uxth.w	r8, r7
 8000cf8:	2601      	movs	r6, #1
 8000cfa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfe:	0c21      	lsrs	r1, r4, #16
 8000d00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb08 f30c 	mul.w	r3, r8, ip
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0xe4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0xe2>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	f200 80e9 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d1e:	4684      	mov	ip, r0
 8000d20:	1ac9      	subs	r1, r1, r3
 8000d22:	b2a3      	uxth	r3, r4
 8000d24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d30:	fb08 f800 	mul.w	r8, r8, r0
 8000d34:	45a0      	cmp	r8, r4
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x10c>
 8000d38:	193c      	adds	r4, r7, r4
 8000d3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x10a>
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	f200 80d9 	bhi.w	8000ef8 <__udivmoddi4+0x2bc>
 8000d46:	4618      	mov	r0, r3
 8000d48:	eba4 0408 	sub.w	r4, r4, r8
 8000d4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d50:	e7bf      	b.n	8000cd2 <__udivmoddi4+0x96>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x12e>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80b1 	beq.w	8000ebe <__udivmoddi4+0x282>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x1cc>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0x140>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80b8 	bhi.w	8000eec <__udivmoddi4+0x2b0>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	468c      	mov	ip, r1
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0a8      	beq.n	8000cdc <__udivmoddi4+0xa0>
 8000d8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8e:	e7a5      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000d90:	f1c2 0320 	rsb	r3, r2, #32
 8000d94:	fa20 f603 	lsr.w	r6, r0, r3
 8000d98:	4097      	lsls	r7, r2
 8000d9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da2:	40d9      	lsrs	r1, r3
 8000da4:	4330      	orrs	r0, r6
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dac:	fa1f f887 	uxth.w	r8, r7
 8000db0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f108 	mul.w	r1, r6, r8
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x19c>
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dca:	f080 808d 	bcs.w	8000ee8 <__udivmoddi4+0x2ac>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 808a 	bls.w	8000ee8 <__udivmoddi4+0x2ac>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	443b      	add	r3, r7
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b281      	uxth	r1, r0
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb00 f308 	mul.w	r3, r0, r8
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x1c4>
 8000df0:	1879      	adds	r1, r7, r1
 8000df2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df6:	d273      	bcs.n	8000ee0 <__udivmoddi4+0x2a4>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d971      	bls.n	8000ee0 <__udivmoddi4+0x2a4>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4439      	add	r1, r7
 8000e00:	1acb      	subs	r3, r1, r3
 8000e02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e06:	e778      	b.n	8000cfa <__udivmoddi4+0xbe>
 8000e08:	f1c6 0c20 	rsb	ip, r6, #32
 8000e0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e14:	431c      	orrs	r4, r3
 8000e16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e26:	431f      	orrs	r7, r3
 8000e28:	0c3b      	lsrs	r3, r7, #16
 8000e2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2e:	fa1f f884 	uxth.w	r8, r4
 8000e32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	fa02 f206 	lsl.w	r2, r2, r6
 8000e44:	fa00 f306 	lsl.w	r3, r0, r6
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x220>
 8000e4a:	1861      	adds	r1, r4, r1
 8000e4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e50:	d248      	bcs.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e52:	458a      	cmp	sl, r1
 8000e54:	d946      	bls.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e56:	f1a9 0902 	sub.w	r9, r9, #2
 8000e5a:	4421      	add	r1, r4
 8000e5c:	eba1 010a 	sub.w	r1, r1, sl
 8000e60:	b2bf      	uxth	r7, r7
 8000e62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6e:	fb00 f808 	mul.w	r8, r0, r8
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x24a>
 8000e76:	19e7      	adds	r7, r4, r7
 8000e78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e7c:	d22e      	bcs.n	8000edc <__udivmoddi4+0x2a0>
 8000e7e:	45b8      	cmp	r8, r7
 8000e80:	d92c      	bls.n	8000edc <__udivmoddi4+0x2a0>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4427      	add	r7, r4
 8000e86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8a:	eba7 0708 	sub.w	r7, r7, r8
 8000e8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e92:	454f      	cmp	r7, r9
 8000e94:	46c6      	mov	lr, r8
 8000e96:	4649      	mov	r1, r9
 8000e98:	d31a      	bcc.n	8000ed0 <__udivmoddi4+0x294>
 8000e9a:	d017      	beq.n	8000ecc <__udivmoddi4+0x290>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x27a>
 8000e9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ea2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eaa:	40f2      	lsrs	r2, r6
 8000eac:	ea4c 0202 	orr.w	r2, ip, r2
 8000eb0:	40f7      	lsrs	r7, r6
 8000eb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	462e      	mov	r6, r5
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	e70b      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	e6e9      	b.n	8000c9c <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fd      	b.n	8000cc8 <__udivmoddi4+0x8c>
 8000ecc:	4543      	cmp	r3, r8
 8000ece:	d2e5      	bcs.n	8000e9c <__udivmoddi4+0x260>
 8000ed0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed8:	3801      	subs	r0, #1
 8000eda:	e7df      	b.n	8000e9c <__udivmoddi4+0x260>
 8000edc:	4608      	mov	r0, r1
 8000ede:	e7d2      	b.n	8000e86 <__udivmoddi4+0x24a>
 8000ee0:	4660      	mov	r0, ip
 8000ee2:	e78d      	b.n	8000e00 <__udivmoddi4+0x1c4>
 8000ee4:	4681      	mov	r9, r0
 8000ee6:	e7b9      	b.n	8000e5c <__udivmoddi4+0x220>
 8000ee8:	4666      	mov	r6, ip
 8000eea:	e775      	b.n	8000dd8 <__udivmoddi4+0x19c>
 8000eec:	4630      	mov	r0, r6
 8000eee:	e74a      	b.n	8000d86 <__udivmoddi4+0x14a>
 8000ef0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef4:	4439      	add	r1, r7
 8000ef6:	e713      	b.n	8000d20 <__udivmoddi4+0xe4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	443c      	add	r4, r7
 8000efc:	e724      	b.n	8000d48 <__udivmoddi4+0x10c>
 8000efe:	bf00      	nop

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8000f04:	b480      	push	{r7}
 8000f06:	b08b      	sub	sp, #44	; 0x2c
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <FusionAhrsInitialise+0x74>)
 8000f22:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <FusionAhrsInitialise+0x78>)
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000f6a:	bf00      	nop
 8000f6c:	372c      	adds	r7, #44	; 0x2c
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	7f7fffff 	.word	0x7f7fffff
 8000f7c:	41200000 	.word	0x41200000

08000f80 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8000f80:	b490      	push	{r4, r7}
 8000f82:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8c:	6018      	str	r0, [r3, #0]
 8000f8e:	f107 0120 	add.w	r1, r7, #32
 8000f92:	eeb0 5a61 	vmov.f32	s10, s3
 8000f96:	eef0 5a42 	vmov.f32	s11, s4
 8000f9a:	eeb0 6a62 	vmov.f32	s12, s5
 8000f9e:	f107 0214 	add.w	r2, r7, #20
 8000fa2:	eef0 6a43 	vmov.f32	s13, s6
 8000fa6:	eeb0 7a63 	vmov.f32	s14, s7
 8000faa:	eef0 7a44 	vmov.f32	s15, s8
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	1d38      	adds	r0, r7, #4
 8000fb4:	edc0 4a00 	vstr	s9, [r0]
 8000fb8:	ed81 0a00 	vstr	s0, [r1]
 8000fbc:	edc1 0a01 	vstr	s1, [r1, #4]
 8000fc0:	ed81 1a02 	vstr	s2, [r1, #8]
 8000fc4:	ed82 5a00 	vstr	s10, [r2]
 8000fc8:	edc2 5a01 	vstr	s11, [r2, #4]
 8000fcc:	ed82 6a02 	vstr	s12, [r2, #8]
 8000fd0:	edc3 6a00 	vstr	s13, [r3]
 8000fd4:	ed83 7a01 	vstr	s14, [r3, #4]
 8000fd8:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8000fdc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	d112      	bne.n	8001032 <FusionAhrsUpdate+0xb2>
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	edd3 7a01 	vldr	s15, [r3, #4]
 8001014:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	d109      	bne.n	8001032 <FusionAhrsUpdate+0xb2>
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	edd3 7a02 	vldr	s15, [r3, #8]
 8001026:	eef5 7a40 	vcmp.f32	s15, #0.0
 800102a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102e:	f000 8437 	beq.w	80018a0 <FusionAhrsUpdate+0x920>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8001032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	ed93 7a04 	vldr	s14, [r3, #16]
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	edd3 7a06 	vldr	s15, [r3, #24]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	edd3 6a03 	vldr	s13, [r3, #12]
 8001054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	edd3 7a05 	vldr	s15, [r3, #20]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8001066:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800106a:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 800106e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	ed93 7a03 	vldr	s14, [r3, #12]
 8001078:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001082:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	edd3 7a06 	vldr	s15, [r3, #24]
 800109a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109e:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 80010a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80010a6:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 80010aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80010b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80010ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	edd3 6a06 	vldr	s13, [r3, #24]
 80010d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	edd3 7a06 	vldr	s15, [r3, #24]
 80010de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e2:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 80010e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80010ea:	edc3 7a02 	vstr	s15, [r3, #8]
 80010ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010f2:	f107 0214 	add.w	r2, r7, #20
 80010f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001100:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001104:	ca07      	ldmia	r2, {r0, r1, r2}
 8001106:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 800110a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001116:	edd3 7a00 	vldr	s15, [r3]
 800111a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001122:	edd3 6a01 	vldr	s13, [r3, #4]
 8001126:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800112a:	edd3 7a01 	vldr	s15, [r3, #4]
 800112e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001136:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800113a:	edd3 6a02 	vldr	s13, [r3, #8]
 800113e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001142:	edd3 7a02 	vldr	s15, [r3, #8]
 8001146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114e:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8001152:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001156:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800115a:	edd3 7a00 	vldr	s15, [r3]
 800115e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001166:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800116a:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 800116e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001172:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 800117a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001184:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001186:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	105a      	asrs	r2, r3, #1
 800118e:	4b9a      	ldr	r3, [pc, #616]	; (80013f8 <FusionAhrsUpdate+0x478>)
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001196:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001198:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011a2:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80011a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011a8:	ed93 7a00 	vldr	s14, [r3]
 80011ac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80011c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011dc:	edc3 7a00 	vstr	s15, [r3]
    return y;
 80011e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011e4:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80011e6:	f207 4214 	addw	r2, r7, #1044	; 0x414
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011f0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011fa:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001204:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001206:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800121e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001222:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001226:	ed93 7a01 	vldr	s14, [r3, #4]
 800122a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001236:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800123a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800123e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001242:	ed93 7a02 	vldr	s14, [r3, #8]
 8001246:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001252:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001256:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800125a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800125e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001262:	ca07      	ldmia	r2, {r0, r1, r2}
 8001264:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001268:	f507 724a 	add.w	r2, r7, #808	; 0x328
 800126c:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8001270:	ca07      	ldmia	r2, {r0, r1, r2}
 8001272:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001276:	bf00      	nop
 8001278:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800127c:	461c      	mov	r4, r3
 800127e:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8001282:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800128a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800128e:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8001292:	ca07      	ldmia	r2, {r0, r1, r2}
 8001294:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001298:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800129c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80012a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80012a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80012ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80012b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012be:	edd3 6a02 	vldr	s13, [r3, #8]
 80012c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012d6:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 80012da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012de:	ed93 7a02 	vldr	s14, [r3, #8]
 80012e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f2:	edd3 6a00 	vldr	s13, [r3]
 80012f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80012fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001306:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800130a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 800130e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001312:	ed93 7a00 	vldr	s14, [r3]
 8001316:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800131a:	edd3 7a01 	vldr	s15, [r3, #4]
 800131e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001322:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001326:	edd3 6a01 	vldr	s13, [r3, #4]
 800132a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800133e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001342:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8001346:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800134a:	ca07      	ldmia	r2, {r0, r1, r2}
 800134c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001350:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001354:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8001358:	ca07      	ldmia	r2, {r0, r1, r2}
 800135a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800135e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001362:	f107 0208 	add.w	r2, r7, #8
 8001366:	ca07      	ldmia	r2, {r0, r1, r2}
 8001368:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 800136c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001370:	ed93 7a00 	vldr	s14, [r3]
 8001374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001384:	edd3 6a01 	vldr	s13, [r3, #4]
 8001388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800138c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139c:	edd3 6a02 	vldr	s13, [r3, #8]
 80013a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80013a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ac:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 80013b0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80013b4:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 80013b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	edd3 7a01 	vldr	s15, [r3, #4]
 80013c2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80013c6:	ed93 7a00 	vldr	s14, [r3]
 80013ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	f100 8266 	bmi.w	80018a2 <FusionAhrsUpdate+0x922>
 80013d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80013e0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80013e4:	ed93 7a00 	vldr	s14, [r3]
 80013e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f0:	f300 8257 	bgt.w	80018a2 <FusionAhrsUpdate+0x922>
 80013f4:	e002      	b.n	80013fc <FusionAhrsUpdate+0x47c>
 80013f6:	bf00      	nop
 80013f8:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 80013fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	ed93 7a04 	vldr	s14, [r3, #16]
 8001406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	edd3 6a03 	vldr	s13, [r3, #12]
 800141e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	edd3 7a06 	vldr	s15, [r3, #24]
 8001428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142c:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001430:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001434:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	edd3 7a03 	vldr	s15, [r3, #12]
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001454:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	edd3 7a05 	vldr	s15, [r3, #20]
 800146c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001470:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001474:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001478:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 800147c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	ed93 7a05 	vldr	s14, [r3, #20]
 8001486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001490:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	edd3 6a03 	vldr	s13, [r3, #12]
 800149e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80014a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ac:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80014b0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80014b4:	edc3 7a02 	vstr	s15, [r3, #8]
 80014b8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80014bc:	f107 0214 	add.w	r2, r7, #20
 80014c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014ca:	f107 0208 	add.w	r2, r7, #8
 80014ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80014d4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80014d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80014dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80014e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80014ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80014f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001500:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001504:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001508:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800150c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800151c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001520:	edd3 6a00 	vldr	s13, [r3]
 8001524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001528:	edd3 7a02 	vldr	s15, [r3, #8]
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001534:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001538:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 800153c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001548:	edd3 7a01 	vldr	s15, [r3, #4]
 800154c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001550:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001554:	edd3 6a01 	vldr	s13, [r3, #4]
 8001558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001568:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800156c:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001570:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001574:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001578:	ca07      	ldmia	r2, {r0, r1, r2}
 800157a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800157e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001582:	461c      	mov	r4, r3
 8001584:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001588:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800158c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001590:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001594:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8001598:	ca07      	ldmia	r2, {r0, r1, r2}
 800159a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800159e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015a2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80015a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80015a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80015ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015b0:	ed93 7a00 	vldr	s14, [r3]
 80015b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80015c8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80015e0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80015e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80015f4:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 80015f8:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001608:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800160c:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001610:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001614:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 800161c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001626:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001628:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	105a      	asrs	r2, r3, #1
 8001630:	4b99      	ldr	r3, [pc, #612]	; (8001898 <FusionAhrsUpdate+0x918>)
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001638:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 800163a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001644:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001646:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001666:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800166a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800166e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800167e:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001682:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001686:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001688:	f207 4204 	addw	r2, r7, #1028	; 0x404
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001692:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001696:	ca07      	ldmia	r2, {r0, r1, r2}
 8001698:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800169c:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80016a6:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 80016a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016ac:	ed93 7a00 	vldr	s14, [r3]
 80016b0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016bc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016c0:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80016c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80016cc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016dc:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80016e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80016e8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016f8:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80016fc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001700:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001704:	ca07      	ldmia	r2, {r0, r1, r2}
 8001706:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800170a:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800170e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8001712:	ca07      	ldmia	r2, {r0, r1, r2}
 8001714:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001718:	bf00      	nop
 800171a:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 800171e:	461c      	mov	r4, r3
 8001720:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001724:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800172c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001730:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8001734:	ca07      	ldmia	r2, {r0, r1, r2}
 8001736:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800173a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800173e:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001742:	ca07      	ldmia	r2, {r0, r1, r2}
 8001744:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001748:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800174c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001750:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001754:	edd3 7a02 	vldr	s15, [r3, #8]
 8001758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001760:	edd3 6a02 	vldr	s13, [r3, #8]
 8001764:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001768:	edd3 7a01 	vldr	s15, [r3, #4]
 800176c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001774:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001778:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 800177c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001780:	ed93 7a02 	vldr	s14, [r3, #8]
 8001784:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001790:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001794:	edd3 6a00 	vldr	s13, [r3]
 8001798:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800179c:	edd3 7a02 	vldr	s15, [r3, #8]
 80017a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017ac:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80017b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80017c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80017cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017e0:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80017e4:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80017e8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80017ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017f2:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80017f6:	461c      	mov	r4, r3
 80017f8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80017fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001800:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001804:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001808:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800180c:	ca07      	ldmia	r2, {r0, r1, r2}
 800180e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001812:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001816:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800181a:	ca07      	ldmia	r2, {r0, r1, r2}
 800181c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001820:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001838:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 800183c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001840:	ed93 7a01 	vldr	s14, [r3, #4]
 8001844:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001848:	edd3 7a01 	vldr	s15, [r3, #4]
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001854:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001858:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800185c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001860:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001864:	edd3 7a02 	vldr	s15, [r3, #8]
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001870:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001874:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001878:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800187c:	ca07      	ldmia	r2, {r0, r1, r2}
 800187e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001882:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001886:	461c      	mov	r4, r3
 8001888:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800188c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001894:	e005      	b.n	80018a2 <FusionAhrsUpdate+0x922>
 8001896:	bf00      	nop
 8001898:	5f3759df 	.word	0x5f3759df
 800189c:	3c8efa35 	.word	0x3c8efa35
            break;
 80018a0:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 80018a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	d105      	bne.n	80018c2 <FusionAhrsUpdate+0x942>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 80018b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 80018c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f207 4224 	addw	r2, r7, #1060	; 0x424
 80018ce:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 80018d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	dd24      	ble.n	8001938 <FusionAhrsUpdate+0x9b8>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 80018ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80018f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001906:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001914:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001918:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800191c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 800192a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8001936:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 8001938:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 800189c <FusionAhrsUpdate+0x91c>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 800193c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001944:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001948:	f107 0220 	add.w	r2, r7, #32
 800194c:	ca07      	ldmia	r2, {r0, r1, r2}
 800194e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001952:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 8001956:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800195a:	ed93 7a00 	vldr	s14, [r3]
 800195e:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001966:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800196a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800196e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001972:	ed93 7a01 	vldr	s14, [r3, #4]
 8001976:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800197a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001982:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001986:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800198a:	ed93 7a02 	vldr	s14, [r3, #8]
 800198e:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001996:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800199a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800199e:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 80019a2:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80019a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019ac:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80019b0:	461c      	mov	r4, r3
 80019b2:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80019b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019be:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80019c2:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80019c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019cc:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 80019d6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80019da:	ed93 7a00 	vldr	s14, [r3]
 80019de:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80019ea:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80019ee:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80019f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f6:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 80019fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fe:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001a02:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001a06:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001a0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a0e:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a16:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001a1a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001a1e:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8001a22:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001a26:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a2c:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001a30:	461c      	mov	r4, r3
 8001a32:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8001a36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a3e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001a42:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8001a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a4c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a50:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 8001a54:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001a5a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001a5e:	ed93 7a00 	vldr	s14, [r3]
 8001a62:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001a72:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001a76:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001a7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a7e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001a8e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001a92:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001a96:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a9a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001aaa:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001aae:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8001ab2:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001ab6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ab8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001abc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001ac0:	461c      	mov	r4, r3
 8001ac2:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001ac6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ace:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001ad2:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8001ad6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 8001ae4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001ae8:	ed93 7a00 	vldr	s14, [r3]
 8001aec:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001af8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001afc:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001b00:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b04:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001b10:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001b14:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001b18:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b1c:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b24:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001b28:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001b2c:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001b30:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001b34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b3a:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001b3e:	461c      	mov	r4, r3
 8001b40:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001b44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001b4c:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4614      	mov	r4, r2
 8001b58:	330c      	adds	r3, #12
 8001b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b60:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b64:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8001b68:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001b6e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b72:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b76:	eeb1 7a67 	vneg.f32	s14, s15
 8001b7a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b86:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b8e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b92:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b9e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001ba2:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ba6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001baa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001bba:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 8001bbe:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bc2:	ed93 7a00 	vldr	s14, [r3]
 8001bc6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bd6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bda:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001bde:	edd3 7a02 	vldr	s15, [r3, #8]
 8001be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bea:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bee:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bf2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001bf6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c02:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001c06:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8001c0a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c0e:	ed93 7a00 	vldr	s14, [r3]
 8001c12:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001c16:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c22:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c26:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001c2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c36:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c3a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c3e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001c52:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 8001c56:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001c62:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c6e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c72:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001c76:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c82:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c86:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c8a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001c9e:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001ca2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001ca6:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8001caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cb0:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001cb4:	461c      	mov	r4, r3
 8001cb6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cc0:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8001cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4614      	mov	r4, r2
 8001ccc:	330c      	adds	r3, #12
 8001cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cd4:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8001cd8:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001cdc:	4614      	mov	r4, r2
 8001cde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8001ce4:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001d00:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001d04:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d08:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001d0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001d18:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001d1c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001d20:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d24:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001d28:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d30:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001d34:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001d38:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001d3c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d40:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001d44:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001d50:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001d54:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001d58:	f507 7466 	add.w	r4, r7, #920	; 0x398
 8001d5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d62:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001d66:	461c      	mov	r4, r3
 8001d68:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 8001d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8001d7c:	f103 040c 	add.w	r4, r3, #12
 8001d80:	4613      	mov	r3, r2
 8001d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d88:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4614      	mov	r4, r2
 8001d94:	330c      	adds	r3, #12
 8001d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001d9c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001da0:	ed93 7a00 	vldr	s14, [r3]
 8001da4:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001db4:	edd3 6a01 	vldr	s13, [r3, #4]
 8001db8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001dbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001dcc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001dd0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001dd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ddc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001de4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001de8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001dec:	edd3 7a03 	vldr	s15, [r3, #12]
 8001df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df8:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 8001dfc:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8001e00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e08:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 8001e0c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e10:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8001e14:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001e16:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001e20:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001e22:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	105a      	asrs	r2, r3, #1
 8001e2a:	4b98      	ldr	r3, [pc, #608]	; (800208c <FusionAhrsUpdate+0x110c>)
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8001e32:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001e34:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e3e:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001e40:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e44:	ed93 7a00 	vldr	s14, [r3]
 8001e48:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8001e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e50:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e64:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e70:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e74:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001e78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e7c:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001e7e:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8001e82:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e86:	ed93 7a00 	vldr	s14, [r3]
 8001e8a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e96:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8001e9a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ea2:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eaa:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001eae:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8001eb2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001eb6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001eba:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001ec6:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8001eca:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001ece:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ed2:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001ede:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 8001ee2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001ee6:	f507 7462 	add.w	r4, r7, #904	; 0x388
 8001eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ef0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001ef4:	461c      	mov	r4, r3
 8001ef6:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 8001f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8001f0a:	f103 040c 	add.w	r4, r3, #12
 8001f0e:	4613      	mov	r3, r2
 8001f10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 8001f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001f4e:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001f52:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8001f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	edd3 6a05 	vldr	s13, [r3, #20]
 8001f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001f8e:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001f92:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 8001f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fb2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	edd3 6a06 	vldr	s13, [r3, #24]
 8001fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001fd6:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001fda:	edc3 7a02 	vstr	s15, [r3, #8]
 8001fde:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001fe2:	f107 0214 	add.w	r2, r7, #20
 8001fe6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fe8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fec:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001ff0:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8001ff4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ff6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8001ffa:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001ffe:	ed93 7a00 	vldr	s14, [r3]
 8002002:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8002012:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002016:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800201a:	ed93 7a01 	vldr	s14, [r3, #4]
 800201e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002022:	edd3 7a01 	vldr	s15, [r3, #4]
 8002026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800202a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800202e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002032:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8002036:	ed93 7a02 	vldr	s14, [r3, #8]
 800203a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800203e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002046:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800204a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800204e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8002052:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002056:	ca07      	ldmia	r2, {r0, r1, r2}
 8002058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800205c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002060:	461c      	mov	r4, r3
 8002062:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002066:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800206a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 800206e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002078:	331c      	adds	r3, #28
 800207a:	ca07      	ldmia	r2, {r0, r1, r2}
 800207c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 8002080:	bf00      	nop
 8002082:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8002086:	46bd      	mov	sp, r7
 8002088:	bc90      	pop	{r4, r7}
 800208a:	4770      	bx	lr
 800208c:	5f3759df 	.word	0x5f3759df

08002090 <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af00      	add	r7, sp, #0
 8002096:	61f8      	str	r0, [r7, #28]
 8002098:	eeb0 5a40 	vmov.f32	s10, s0
 800209c:	eef0 5a60 	vmov.f32	s11, s1
 80020a0:	eeb0 6a41 	vmov.f32	s12, s2
 80020a4:	eef0 6a61 	vmov.f32	s13, s3
 80020a8:	eeb0 7a42 	vmov.f32	s14, s4
 80020ac:	eef0 7a62 	vmov.f32	s15, s5
 80020b0:	ed87 3a00 	vstr	s6, [r7]
 80020b4:	ed87 5a04 	vstr	s10, [r7, #16]
 80020b8:	edc7 5a05 	vstr	s11, [r7, #20]
 80020bc:	ed87 6a06 	vstr	s12, [r7, #24]
 80020c0:	edc7 6a01 	vstr	s13, [r7, #4]
 80020c4:	ed87 7a02 	vstr	s14, [r7, #8]
 80020c8:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020de:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 80020e2:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 80020e6:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 80020ea:	ed97 5a01 	vldr	s10, [r7, #4]
 80020ee:	edd7 5a02 	vldr	s11, [r7, #8]
 80020f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80020f6:	edd7 6a04 	vldr	s13, [r7, #16]
 80020fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80020fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002102:	edd7 4a00 	vldr	s9, [r7]
 8002106:	eef0 1a45 	vmov.f32	s3, s10
 800210a:	eeb0 2a65 	vmov.f32	s4, s11
 800210e:	eef0 2a46 	vmov.f32	s5, s12
 8002112:	eeb0 0a66 	vmov.f32	s0, s13
 8002116:	eef0 0a47 	vmov.f32	s1, s14
 800211a:	eeb0 1a67 	vmov.f32	s2, s15
 800211e:	69f8      	ldr	r0, [r7, #28]
 8002120:	f7fe ff2e 	bl	8000f80 <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 8002124:	69f8      	ldr	r0, [r7, #28]
 8002126:	f000 f862 	bl	80021ee <FusionAhrsIsInitialising>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d004      	beq.n	800213a <FusionAhrsUpdateWithoutMagnetometer+0xaa>
        fusionAhrs->zeroYawPending = true;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 8002138:	e00d      	b.n	8002156 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
        if (fusionAhrs->zeroYawPending == true) {
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 8002144:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002160 <FusionAhrsUpdateWithoutMagnetometer+0xd0>
 8002148:	69f8      	ldr	r0, [r7, #28]
 800214a:	f000 f869 	bl	8002220 <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8002156:	bf00      	nop
 8002158:	3730      	adds	r7, #48	; 0x30
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	00000000 	.word	0x00000000

08002164 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 8002164:	b490      	push	{r4, r7}
 8002166:	b096      	sub	sp, #88	; 0x58
 8002168:	af00      	add	r7, sp, #0
 800216a:	6178      	str	r0, [r7, #20]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002172:	330c      	adds	r3, #12
 8002174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 800217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217c:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 800217e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002182:	eef1 7a67 	vneg.f32	s15, s15
 8002186:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 800218a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800218e:	eef1 7a67 	vneg.f32	s15, s15
 8002192:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 8002196:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800219a:	eef1 7a67 	vneg.f32	s15, s15
 800219e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 80021a2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80021a6:	f107 0318 	add.w	r3, r7, #24
 80021aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021b0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80021b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 80021be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80021c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c6:	ee06 0a10 	vmov	s12, r0
 80021ca:	ee06 1a90 	vmov	s13, r1
 80021ce:	ee07 2a10 	vmov	s14, r2
 80021d2:	ee07 3a90 	vmov	s15, r3
}
 80021d6:	eeb0 0a46 	vmov.f32	s0, s12
 80021da:	eef0 0a66 	vmov.f32	s1, s13
 80021de:	eeb0 1a47 	vmov.f32	s2, s14
 80021e2:	eef0 1a67 	vmov.f32	s3, s15
 80021e6:	3758      	adds	r7, #88	; 0x58
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc90      	pop	{r4, r7}
 80021ec:	4770      	bx	lr

080021ee <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	bfcc      	ite	gt
 800220c:	2301      	movgt	r3, #1
 800220e:	2300      	movle	r3, #0
 8002210:	b2db      	uxtb	r3, r3
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b0af      	sub	sp, #188	; 0xbc
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	ed87 0a00 	vstr	s0, [r7]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002232:	330c      	adds	r3, #12
 8002234:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002236:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 800223a:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800223e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002246:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800224a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800224e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002252:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002256:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800225a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800225e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002262:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002266:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800226a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800226e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002276:	eeb0 0a67 	vmov.f32	s0, s15
 800227a:	f009 f805 	bl	800b288 <sqrtf>
 800227e:	eeb0 7a40 	vmov.f32	s14, s0
 8002282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 800228e:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002292:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 800229e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80022a2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 80022ae:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80022b2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80022b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 80022be:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80022c2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return normalisedQuaternion;
 80022ce:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80022d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80022dc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80022e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f103 040c 	add.w	r4, r3, #12
 80022f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	edd3 7a05 	vldr	s15, [r3, #20]
 8002306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	edd3 7a06 	vldr	s15, [r3, #24]
 8002316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	ed93 7a03 	vldr	s14, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	edd3 7a03 	vldr	s15, [r3, #12]
 800232a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002332:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	edd3 6a04 	vldr	s13, [r3, #16]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234a:	eef0 0a67 	vmov.f32	s1, s15
 800234e:	eeb0 0a46 	vmov.f32	s0, s12
 8002352:	f008 ff97 	bl	800b284 <atan2f>
 8002356:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return degrees * ((float) M_PI / 180.0f);
 8002360:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002364:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002504 <FusionAhrsSetYaw+0x2e4>
 8002368:	ee67 7a87 	vmul.f32	s15, s15, s14
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 800236c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 8002380:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8002384:	f008 feca 	bl	800b11c <cosf>
 8002388:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion inverseYawQuaternion = {
 800238c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 800239e:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80023a2:	f008 fefb 	bl	800b19c <sinf>
 80023a6:	eef0 7a40 	vmov.f32	s15, s0
 80023aa:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion inverseYawQuaternion = {
 80023ae:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 80023b2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80023b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80023c6:	330c      	adds	r3, #12
 80023c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 80023ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80023d2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023da:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80023de:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023ea:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80023ee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023fa:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80023fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240a:	edc7 7a02 	vstr	s15, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 800240e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002412:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800241e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002426:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800242e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800243e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244a:	edc7 7a03 	vstr	s15, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 800244e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002452:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800245e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002466:	ee37 7a67 	vsub.f32	s14, s14, s15
 800246a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800246e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002476:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800247e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248a:	edc7 7a04 	vstr	s15, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 800248e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002492:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800249a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800249e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80024a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024aa:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80024ae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024ba:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80024be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80024c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ca:	edc7 7a05 	vstr	s15, [r7, #20]
    return result;
 80024ce:	f107 0488 	add.w	r4, r7, #136	; 0x88
 80024d2:	f107 0308 	add.w	r3, r7, #8
 80024d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024dc:	f107 0418 	add.w	r4, r7, #24
 80024e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80024e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f103 040c 	add.w	r4, r3, #12
 80024f0:	f107 0318 	add.w	r3, r7, #24
 80024f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 80024fa:	bf00      	nop
 80024fc:	37bc      	adds	r7, #188	; 0xbc
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd90      	pop	{r4, r7, pc}
 8002502:	bf00      	nop
 8002504:	3c8efa35 	.word	0x3c8efa35

08002508 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	ed87 0a02 	vstr	s0, [r7, #8]
 8002514:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe f805 	bl	8000538 <__aeabi_f2d>
 800252e:	a312      	add	r3, pc, #72	; (adr r3, 8002578 <FusionBiasInitialise+0x70>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f7fe f858 	bl	80005e8 <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe fb14 	bl	8000b6c <__aeabi_d2f>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	615a      	str	r2, [r3, #20]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
}
 800256a:	bf00      	nop
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	f3af 8000 	nop.w
 8002578:	8c0eff43 	.word	0x8c0eff43
 800257c:	3fc015bf 	.word	0x3fc015bf

08002580 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 8002580:	b490      	push	{r4, r7}
 8002582:	b0b4      	sub	sp, #208	; 0xd0
 8002584:	af00      	add	r7, sp, #0
 8002586:	61f8      	str	r0, [r7, #28]
 8002588:	eef0 6a40 	vmov.f32	s13, s0
 800258c:	eeb0 7a60 	vmov.f32	s14, s1
 8002590:	eef0 7a41 	vmov.f32	s15, s2
 8002594:	edc7 6a04 	vstr	s13, [r7, #16]
 8002598:	ed87 7a05 	vstr	s14, [r7, #20]
 800259c:	edc7 7a06 	vstr	s15, [r7, #24]
 80025a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025a4:	f107 0210 	add.w	r2, r7, #16
 80025a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80025aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025b4:	3210      	adds	r2, #16
 80025b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80025b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80025bc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80025c0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80025c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80025cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80025d0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80025d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80025dc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80025e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 80025ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80025f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80025f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80025fa:	f107 0310 	add.w	r3, r7, #16
 80025fe:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002602:	ca07      	ldmia	r2, {r0, r1, r2}
 8002604:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002608:	edd7 7a04 	vldr	s15, [r7, #16]
 800260c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800261a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261e:	dc17      	bgt.n	8002650 <FusionBiasUpdate+0xd0>
 8002620:	edd7 7a05 	vldr	s15, [r7, #20]
 8002624:	eeb0 7ae7 	vabs.f32	s14, s15
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002636:	dc0b      	bgt.n	8002650 <FusionBiasUpdate+0xd0>
 8002638:	edd7 7a06 	vldr	s15, [r7, #24]
 800263c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264e:	dd0b      	ble.n	8002668 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8002658:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800265c:	f107 0210 	add.w	r2, r7, #16
 8002660:	ca07      	ldmia	r2, {r0, r1, r2}
 8002662:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002666:	e08f      	b.n	8002788 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	edd3 7a03 	vldr	s15, [r3, #12]
 800266e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	d512      	bpl.n	80026a2 <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	edd3 7a01 	vldr	s15, [r3, #4]
 8002688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 8002692:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002696:	f107 0210 	add.w	r2, r7, #16
 800269a:	ca07      	ldmia	r2, {r0, r1, r2}
 800269c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026a0:	e072      	b.n	8002788 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	689c      	ldr	r4, [r3, #8]
 80026a6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026aa:	f107 0210 	add.w	r2, r7, #16
 80026ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80026b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026b4:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 80026b8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80026bc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80026c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 80026c8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80026cc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80026d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 80026d8:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80026dc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80026e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 80026e8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026ec:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80026f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026fa:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80026fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002700:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800270a:	3210      	adds	r2, #16
 800270c:	ca07      	ldmia	r2, {r0, r1, r2}
 800270e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002712:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002716:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800271a:	ca07      	ldmia	r2, {r0, r1, r2}
 800271c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8002720:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002724:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8002730:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002734:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8002740:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002744:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 8002750:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002754:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002758:	ca07      	ldmia	r2, {r0, r1, r2}
 800275a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800275e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002762:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002766:	ca07      	ldmia	r2, {r0, r1, r2}
 8002768:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3310      	adds	r3, #16
 8002770:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002774:	ca07      	ldmia	r2, {r0, r1, r2}
 8002776:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 800277a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800277e:	f107 0210 	add.w	r2, r7, #16
 8002782:	ca07      	ldmia	r2, {r0, r1, r2}
 8002784:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002788:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800278c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002794:	ee06 1a90 	vmov	s13, r1
 8002798:	ee07 2a10 	vmov	s14, r2
 800279c:	ee07 3a90 	vmov	s15, r3
}
 80027a0:	eeb0 0a66 	vmov.f32	s0, s13
 80027a4:	eef0 0a47 	vmov.f32	s1, s14
 80027a8:	eeb0 1a67 	vmov.f32	s2, s15
 80027ac:	37d0      	adds	r7, #208	; 0xd0
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc90      	pop	{r4, r7}
 80027b2:	4770      	bx	lr

080027b4 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 80027b8:	bf00      	nop
 80027ba:	f000 f921 	bl	8002a00 <icm20948_who_am_i>
 80027be:	4603      	mov	r3, r0
 80027c0:	f083 0301 	eor.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f7      	bne.n	80027ba <icm20948_init+0x6>

	icm20948_device_reset();
 80027ca:	f000 f93e 	bl	8002a4a <icm20948_device_reset>
	icm20948_wakeup();
 80027ce:	f000 f953 	bl	8002a78 <icm20948_wakeup>

	icm20948_clock_source(1);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f000 f9cb 	bl	8002b6e <icm20948_clock_source>
	icm20948_odr_align_enable();
 80027d8:	f000 f9e2 	bl	8002ba0 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 80027dc:	f000 f966 	bl	8002aac <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f000 f9e6 	bl	8002bb2 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f000 fa00 	bl	8002bec <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f000 fa1a 	bl	8002c26 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f000 fa26 	bl	8002c44 <icm20948_accel_sample_rate_divider>

	//icm20948_gyro_calibration();
	//icm20948_accel_calibration();

	icm20948_gyro_full_scale_select(_2000dps);
 80027f8:	2003      	movs	r0, #3
 80027fa:	f000 fa53 	bl	8002ca4 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 80027fe:	2003      	movs	r0, #3
 8002800:	f000 fa9a 	bl	8002d38 <icm20948_accel_full_scale_select>
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <ak09916_init>:

void ak09916_init()
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 800280c:	f000 f965 	bl	8002ada <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8002810:	f000 f97a 	bl	8002b08 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8002814:	2007      	movs	r0, #7
 8002816:	f000 f991 	bl	8002b3c <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 800281a:	bf00      	nop
 800281c:	f000 f903 	bl	8002a26 <ak09916_who_am_i>
 8002820:	4603      	mov	r3, r0
 8002822:	f083 0301 	eor.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f7      	bne.n	800281c <ak09916_init+0x14>

	ak09916_soft_reset();
 800282c:	f000 f919 	bl	8002a62 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8002830:	2008      	movs	r0, #8
 8002832:	f000 fa25 	bl	8002c80 <ak09916_operation_mode_setting>
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}

0800283a <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8002842:	2206      	movs	r2, #6
 8002844:	2133      	movs	r1, #51	; 0x33
 8002846:	2000      	movs	r0, #0
 8002848:	f000 fb3e 	bl	8002ec8 <read_multiple_icm20948_reg>
 800284c:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	b21a      	sxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3301      	adds	r3, #1
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b21b      	sxth	r3, r3
 800285e:	4313      	orrs	r3, r2
 8002860:	b21b      	sxth	r3, r3
 8002862:	ee07 3a90 	vmov	s15, r3
 8002866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3302      	adds	r3, #2
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	b21a      	sxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	3303      	adds	r3, #3
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b21b      	sxth	r3, r3
 8002882:	4313      	orrs	r3, r2
 8002884:	b21b      	sxth	r3, r3
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	3304      	adds	r3, #4
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	b21a      	sxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3305      	adds	r3, #5
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b21b      	sxth	r3, r3
 80028a6:	4313      	orrs	r3, r2
 80028a8:	b21b      	sxth	r3, r3
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 80028c8:	2206      	movs	r2, #6
 80028ca:	212d      	movs	r1, #45	; 0x2d
 80028cc:	2000      	movs	r0, #0
 80028ce:	f000 fafb 	bl	8002ec8 <read_multiple_icm20948_reg>
 80028d2:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | (temp[1]));
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	021b      	lsls	r3, r3, #8
 80028da:	b21a      	sxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3301      	adds	r3, #1
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b21b      	sxth	r3, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | (temp[3]));
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3302      	adds	r3, #2
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	b21a      	sxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3303      	adds	r3, #3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b21b      	sxth	r3, r3
 8002908:	4313      	orrs	r3, r2
 800290a:	b21b      	sxth	r3, r3
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | (temp[5]));
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3304      	adds	r3, #4
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	b21a      	sxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3305      	adds	r3, #5
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	b21b      	sxth	r3, r3
 800292c:	4313      	orrs	r3, r2
 800292e:	b21b      	sxth	r3, r3
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add scale factor because calibraiton function offset gravity acceleration.
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <icm20948_gyro_read_dps>:

	return true;
}

void icm20948_gyro_read_dps(axises* data)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff72 	bl	800283a <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	edd3 6a00 	vldr	s13, [r3]
 800295c:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <icm20948_gyro_read_dps+0x58>)
 800295e:	ed93 7a00 	vldr	s14, [r3]
 8002962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	edc3 7a00 	vstr	s15, [r3]
	data->y /= gyro_scale_factor;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <icm20948_gyro_read_dps+0x58>)
 8002974:	ed93 7a00 	vldr	s14, [r3]
 8002978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= gyro_scale_factor;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	edd3 6a02 	vldr	s13, [r3, #8]
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <icm20948_gyro_read_dps+0x58>)
 800298a:	ed93 7a00 	vldr	s14, [r3]
 800298e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200000cc 	.word	0x200000cc

080029a4 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises* data)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	icm20948_accel_read(data);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff87 	bl	80028c0 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	edd3 6a00 	vldr	s13, [r3]
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <icm20948_accel_read_g+0x58>)
 80029ba:	ed93 7a00 	vldr	s14, [r3]
 80029be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	edc3 7a00 	vstr	s15, [r3]
	data->y /= accel_scale_factor;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <icm20948_accel_read_g+0x58>)
 80029d0:	ed93 7a00 	vldr	s14, [r3]
 80029d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= accel_scale_factor;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <icm20948_accel_read_g+0x58>)
 80029e6:	ed93 7a00 	vldr	s14, [r3]
 80029ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200000d0 	.word	0x200000d0

08002a00 <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8002a06:	2100      	movs	r1, #0
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f000 fa0d 	bl	8002e28 <read_single_icm20948_reg>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	2bea      	cmp	r3, #234	; 0xea
 8002a16:	d101      	bne.n	8002a1c <icm20948_who_am_i+0x1c>
		return true;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <icm20948_who_am_i+0x1e>
	else
		return false;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f000 fa7b 	bl	8002f28 <read_single_ak09916_reg>
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	2b09      	cmp	r3, #9
 8002a3a:	d101      	bne.n	8002a40 <ak09916_who_am_i+0x1a>
		return true;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <ak09916_who_am_i+0x1c>
	else
		return false;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <icm20948_device_reset>:

void icm20948_device_reset()
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8002a4e:	22c1      	movs	r2, #193	; 0xc1
 8002a50:	2106      	movs	r1, #6
 8002a52:	2000      	movs	r0, #0
 8002a54:	f000 fa14 	bl	8002e80 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002a58:	2064      	movs	r0, #100	; 0x64
 8002a5a:	f003 fc91 	bl	8006380 <HAL_Delay>
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8002a66:	2101      	movs	r1, #1
 8002a68:	2032      	movs	r0, #50	; 0x32
 8002a6a:	f000 fa7e 	bl	8002f6a <write_single_ak09916_reg>
	HAL_Delay(100);
 8002a6e:	2064      	movs	r0, #100	; 0x64
 8002a70:	f003 fc86 	bl	8006380 <HAL_Delay>
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002a7e:	2106      	movs	r1, #6
 8002a80:	2000      	movs	r0, #0
 8002a82:	f000 f9d1 	bl	8002e28 <read_single_icm20948_reg>
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a90:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	461a      	mov	r2, r3
 8002a96:	2106      	movs	r1, #6
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f000 f9f1 	bl	8002e80 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002a9e:	2064      	movs	r0, #100	; 0x64
 8002aa0:	f003 fc6e 	bl	8006380 <HAL_Delay>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f000 f9b7 	bl	8002e28 <read_single_icm20948_reg>
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	f043 0310 	orr.w	r3, r3, #16
 8002ac4:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2103      	movs	r1, #3
 8002acc:	2000      	movs	r0, #0
 8002ace:	f000 f9d7 	bl	8002e80 <write_single_icm20948_reg>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002ae0:	2103      	movs	r1, #3
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f000 f9a0 	bl	8002e28 <read_single_icm20948_reg>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	461a      	mov	r2, r3
 8002af8:	2103      	movs	r1, #3
 8002afa:	2000      	movs	r0, #0
 8002afc:	f000 f9c0 	bl	8002e80 <write_single_icm20948_reg>
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002b0e:	2103      	movs	r1, #3
 8002b10:	2000      	movs	r0, #0
 8002b12:	f000 f989 	bl	8002e28 <read_single_icm20948_reg>
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f043 0320 	orr.w	r3, r3, #32
 8002b20:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	461a      	mov	r2, r3
 8002b26:	2103      	movs	r1, #3
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f000 f9a9 	bl	8002e80 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002b2e:	2064      	movs	r0, #100	; 0x64
 8002b30:	f003 fc26 	bl	8006380 <HAL_Delay>
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8002b46:	2101      	movs	r1, #1
 8002b48:	2030      	movs	r0, #48	; 0x30
 8002b4a:	f000 f96d 	bl	8002e28 <read_single_icm20948_reg>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2101      	movs	r1, #1
 8002b60:	2030      	movs	r0, #48	; 0x30
 8002b62:	f000 f98d 	bl	8002e80 <write_single_icm20948_reg>
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002b78:	2106      	movs	r1, #6
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f000 f954 	bl	8002e28 <read_single_icm20948_reg>
 8002b80:	4603      	mov	r3, r0
 8002b82:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2106      	movs	r1, #6
 8002b92:	2000      	movs	r0, #0
 8002b94:	f000 f974 	bl	8002e80 <write_single_icm20948_reg>
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2109      	movs	r1, #9
 8002ba8:	2020      	movs	r0, #32
 8002baa:	f000 f969 	bl	8002e80 <write_single_icm20948_reg>
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	2020      	movs	r0, #32
 8002bc0:	f000 f932 	bl	8002e28 <read_single_icm20948_reg>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	b25a      	sxtb	r2, r3
 8002bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	b25b      	sxtb	r3, r3
 8002bd6:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2101      	movs	r1, #1
 8002bde:	2020      	movs	r0, #32
 8002be0:	f000 f94e 	bl	8002e80 <write_single_icm20948_reg>
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002bf6:	2114      	movs	r1, #20
 8002bf8:	2020      	movs	r0, #32
 8002bfa:	f000 f915 	bl	8002e28 <read_single_icm20948_reg>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	b25a      	sxtb	r2, r3
 8002c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	b25b      	sxtb	r3, r3
 8002c10:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	461a      	mov	r2, r3
 8002c16:	2101      	movs	r1, #1
 8002c18:	2020      	movs	r0, #32
 8002c1a:	f000 f931 	bl	8002e80 <write_single_icm20948_reg>
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	461a      	mov	r2, r3
 8002c34:	2100      	movs	r1, #0
 8002c36:	2020      	movs	r0, #32
 8002c38:	f000 f922 	bl	8002e80 <write_single_icm20948_reg>
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	461a      	mov	r2, r3
 8002c64:	2110      	movs	r1, #16
 8002c66:	2020      	movs	r0, #32
 8002c68:	f000 f90a 	bl	8002e80 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8002c6c:	7bbb      	ldrb	r3, [r7, #14]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2111      	movs	r1, #17
 8002c72:	2020      	movs	r0, #32
 8002c74:	f000 f904 	bl	8002e80 <write_single_icm20948_reg>
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	2031      	movs	r0, #49	; 0x31
 8002c90:	f000 f96b 	bl	8002f6a <write_single_ak09916_reg>
	HAL_Delay(100);
 8002c94:	2064      	movs	r0, #100	; 0x64
 8002c96:	f003 fb73 	bl	8006380 <HAL_Delay>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <icm20948_gyro_full_scale_select>:
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
}

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8002cae:	2101      	movs	r1, #1
 8002cb0:	2020      	movs	r0, #32
 8002cb2:	f000 f8b9 	bl	8002e28 <read_single_icm20948_reg>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d827      	bhi.n	8002d10 <icm20948_gyro_full_scale_select+0x6c>
 8002cc0:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <icm20948_gyro_full_scale_select+0x24>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	08002cd9 	.word	0x08002cd9
 8002ccc:	08002ce1 	.word	0x08002ce1
 8002cd0:	08002cf1 	.word	0x08002cf1
 8002cd4:	08002d01 	.word	0x08002d01
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <icm20948_gyro_full_scale_select+0x80>)
 8002cda:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <icm20948_gyro_full_scale_select+0x84>)
 8002cdc:	601a      	str	r2, [r3, #0]
			break;
 8002cde:	e017      	b.n	8002d10 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	f043 0302 	orr.w	r3, r3, #2
 8002ce6:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <icm20948_gyro_full_scale_select+0x80>)
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <icm20948_gyro_full_scale_select+0x88>)
 8002cec:	601a      	str	r2, [r3, #0]
			break;
 8002cee:	e00f      	b.n	8002d10 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <icm20948_gyro_full_scale_select+0x80>)
 8002cfa:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <icm20948_gyro_full_scale_select+0x8c>)
 8002cfc:	601a      	str	r2, [r3, #0]
			break;
 8002cfe:	e007      	b.n	8002d10 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	f043 0306 	orr.w	r3, r3, #6
 8002d06:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <icm20948_gyro_full_scale_select+0x80>)
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <icm20948_gyro_full_scale_select+0x90>)
 8002d0c:	601a      	str	r2, [r3, #0]
			break;
 8002d0e:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	461a      	mov	r2, r3
 8002d14:	2101      	movs	r1, #1
 8002d16:	2020      	movs	r0, #32
 8002d18:	f000 f8b2 	bl	8002e80 <write_single_icm20948_reg>
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200000cc 	.word	0x200000cc
 8002d28:	43030000 	.word	0x43030000
 8002d2c:	42830000 	.word	0x42830000
 8002d30:	42033333 	.word	0x42033333
 8002d34:	41833333 	.word	0x41833333

08002d38 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002d42:	2114      	movs	r1, #20
 8002d44:	2020      	movs	r0, #32
 8002d46:	f000 f86f 	bl	8002e28 <read_single_icm20948_reg>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d82b      	bhi.n	8002dac <icm20948_accel_full_scale_select+0x74>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <icm20948_accel_full_scale_select+0x24>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d77 	.word	0x08002d77
 8002d64:	08002d89 	.word	0x08002d89
 8002d68:	08002d9b 	.word	0x08002d9b
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <icm20948_accel_full_scale_select+0x88>)
 8002d6e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8002d72:	601a      	str	r2, [r3, #0]
			break;
 8002d74:	e01a      	b.n	8002dac <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <icm20948_accel_full_scale_select+0x88>)
 8002d80:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002d84:	601a      	str	r2, [r3, #0]
			break;
 8002d86:	e011      	b.n	8002dac <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	f043 0304 	orr.w	r3, r3, #4
 8002d8e:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <icm20948_accel_full_scale_select+0x88>)
 8002d92:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002d96:	601a      	str	r2, [r3, #0]
			break;
 8002d98:	e008      	b.n	8002dac <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	f043 0306 	orr.w	r3, r3, #6
 8002da0:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <icm20948_accel_full_scale_select+0x88>)
 8002da4:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002da8:	601a      	str	r2, [r3, #0]
			break;
 8002daa:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	461a      	mov	r2, r3
 8002db0:	2114      	movs	r1, #20
 8002db2:	2020      	movs	r0, #32
 8002db4:	f000 f864 	bl	8002e80 <write_single_icm20948_reg>
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	200000d0 	.word	0x200000d0

08002dc4 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8002dc8:	2201      	movs	r2, #1
 8002dca:	2104      	movs	r1, #4
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <cs_high+0x14>)
 8002dce:	f004 fdab 	bl	8007928 <HAL_GPIO_WritePin>
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000

08002ddc <cs_low>:

static void cs_low()
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8002de0:	2200      	movs	r2, #0
 8002de2:	2104      	movs	r1, #4
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <cs_low+0x14>)
 8002de6:	f004 fd9f 	bl	8007928 <HAL_GPIO_WritePin>
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000

08002df4 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8002dfe:	237f      	movs	r3, #127	; 0x7f
 8002e00:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	737b      	strb	r3, [r7, #13]

	cs_low();
 8002e06:	f7ff ffe9 	bl	8002ddc <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8002e0a:	f107 010c 	add.w	r1, r7, #12
 8002e0e:	230a      	movs	r3, #10
 8002e10:	2202      	movs	r2, #2
 8002e12:	4804      	ldr	r0, [pc, #16]	; (8002e24 <select_user_bank+0x30>)
 8002e14:	f005 fab9 	bl	800838a <HAL_SPI_Transmit>
	cs_high();
 8002e18:	f7ff ffd4 	bl	8002dc4 <cs_high>
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20001034 	.word	0x20001034

08002e28 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	460a      	mov	r2, r1
 8002e32:	71fb      	strb	r3, [r7, #7]
 8002e34:	4613      	mov	r3, r2
 8002e36:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8002e38:	79bb      	ldrb	r3, [r7, #6]
 8002e3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ffd5 	bl	8002df4 <select_user_bank>

	cs_low();
 8002e4a:	f7ff ffc7 	bl	8002ddc <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002e4e:	f107 010f 	add.w	r1, r7, #15
 8002e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e56:	2201      	movs	r2, #1
 8002e58:	4808      	ldr	r0, [pc, #32]	; (8002e7c <read_single_icm20948_reg+0x54>)
 8002e5a:	f005 fa96 	bl	800838a <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8002e5e:	f107 010e 	add.w	r1, r7, #14
 8002e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e66:	2201      	movs	r2, #1
 8002e68:	4804      	ldr	r0, [pc, #16]	; (8002e7c <read_single_icm20948_reg+0x54>)
 8002e6a:	f005 fbca 	bl	8008602 <HAL_SPI_Receive>
	cs_high();
 8002e6e:	f7ff ffa9 	bl	8002dc4 <cs_high>

	return reg_val;
 8002e72:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20001034 	.word	0x20001034

08002e80 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	71bb      	strb	r3, [r7, #6]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8002e96:	797b      	ldrb	r3, [r7, #5]
 8002e98:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ffa9 	bl	8002df4 <select_user_bank>

	cs_low();
 8002ea2:	f7ff ff9b 	bl	8002ddc <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8002ea6:	f107 010c 	add.w	r1, r7, #12
 8002eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eae:	2202      	movs	r2, #2
 8002eb0:	4804      	ldr	r0, [pc, #16]	; (8002ec4 <write_single_icm20948_reg+0x44>)
 8002eb2:	f005 fa6a 	bl	800838a <HAL_SPI_Transmit>
	cs_high();
 8002eb6:	f7ff ff85 	bl	8002dc4 <cs_high>
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20001034 	.word	0x20001034

08002ec8 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	71bb      	strb	r3, [r7, #6]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 8002eda:	79bb      	ldrb	r3, [r7, #6]
 8002edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff ff84 	bl	8002df4 <select_user_bank>

	cs_low();
 8002eec:	f7ff ff76 	bl	8002ddc <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002ef0:	f107 010f 	add.w	r1, r7, #15
 8002ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4809      	ldr	r0, [pc, #36]	; (8002f20 <read_multiple_icm20948_reg+0x58>)
 8002efc:	f005 fa45 	bl	800838a <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8002f00:	797b      	ldrb	r3, [r7, #5]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f08:	4906      	ldr	r1, [pc, #24]	; (8002f24 <read_multiple_icm20948_reg+0x5c>)
 8002f0a:	4805      	ldr	r0, [pc, #20]	; (8002f20 <read_multiple_icm20948_reg+0x58>)
 8002f0c:	f005 fb79 	bl	8008602 <HAL_SPI_Receive>
	cs_high();
 8002f10:	f7ff ff58 	bl	8002dc4 <cs_high>

	return reg_val;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <read_multiple_icm20948_reg+0x5c>)
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20001034 	.word	0x20001034
 8002f24:	200000d4 	.word	0x200000d4

08002f28 <read_single_ak09916_reg>:
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
	cs_high();
}

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8002f32:	228c      	movs	r2, #140	; 0x8c
 8002f34:	2103      	movs	r1, #3
 8002f36:	2030      	movs	r0, #48	; 0x30
 8002f38:	f7ff ffa2 	bl	8002e80 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2104      	movs	r1, #4
 8002f42:	2030      	movs	r0, #48	; 0x30
 8002f44:	f7ff ff9c 	bl	8002e80 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8002f48:	2281      	movs	r2, #129	; 0x81
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	2030      	movs	r0, #48	; 0x30
 8002f4e:	f7ff ff97 	bl	8002e80 <write_single_icm20948_reg>

	HAL_Delay(1);
 8002f52:	2001      	movs	r0, #1
 8002f54:	f003 fa14 	bl	8006380 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8002f58:	213b      	movs	r1, #59	; 0x3b
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7ff ff64 	bl	8002e28 <read_single_icm20948_reg>
 8002f60:	4603      	mov	r3, r0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	460a      	mov	r2, r1
 8002f74:	71fb      	strb	r3, [r7, #7]
 8002f76:	4613      	mov	r3, r2
 8002f78:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	2103      	movs	r1, #3
 8002f7e:	2030      	movs	r0, #48	; 0x30
 8002f80:	f7ff ff7e 	bl	8002e80 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	461a      	mov	r2, r3
 8002f88:	2104      	movs	r1, #4
 8002f8a:	2030      	movs	r0, #48	; 0x30
 8002f8c:	f7ff ff78 	bl	8002e80 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8002f90:	79bb      	ldrb	r3, [r7, #6]
 8002f92:	461a      	mov	r2, r3
 8002f94:	2106      	movs	r1, #6
 8002f96:	2030      	movs	r0, #48	; 0x30
 8002f98:	f7ff ff72 	bl	8002e80 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8002f9c:	2281      	movs	r2, #129	; 0x81
 8002f9e:	2105      	movs	r1, #5
 8002fa0:	2030      	movs	r0, #48	; 0x30
 8002fa2:	f7ff ff6d 	bl	8002e80 <write_single_icm20948_reg>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fb6:	463b      	mov	r3, r7
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002fc2:	4b21      	ldr	r3, [pc, #132]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fc4:	4a21      	ldr	r2, [pc, #132]	; (800304c <MX_ADC1_Init+0x9c>)
 8002fc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <MX_ADC1_Init+0x98>)
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <MX_ADC1_Init+0xa0>)
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <MX_ADC1_Init+0x98>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <MX_ADC1_Init+0x98>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <MX_ADC1_Init+0x98>)
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <MX_ADC1_Init+0x98>)
 800300c:	2201      	movs	r2, #1
 800300e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003010:	480d      	ldr	r0, [pc, #52]	; (8003048 <MX_ADC1_Init+0x98>)
 8003012:	f003 f9d9 	bl	80063c8 <HAL_ADC_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800301c:	f002 fb48 	bl	80056b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003020:	2302      	movs	r3, #2
 8003022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003024:	2301      	movs	r3, #1
 8003026:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800302c:	463b      	mov	r3, r7
 800302e:	4619      	mov	r1, r3
 8003030:	4805      	ldr	r0, [pc, #20]	; (8003048 <MX_ADC1_Init+0x98>)
 8003032:	f003 fbab 	bl	800678c <HAL_ADC_ConfigChannel>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800303c:	f002 fb38 	bl	80056b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000e18 	.word	0x20000e18
 800304c:	40012000 	.word	0x40012000
 8003050:	0f000001 	.word	0x0f000001

08003054 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	; 0x30
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 031c 	add.w	r3, r7, #28
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a31      	ldr	r2, [pc, #196]	; (8003138 <HAL_ADC_MspInit+0xe4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d15b      	bne.n	800312e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	4b30      	ldr	r3, [pc, #192]	; (800313c <HAL_ADC_MspInit+0xe8>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a2f      	ldr	r2, [pc, #188]	; (800313c <HAL_ADC_MspInit+0xe8>)
 8003080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_ADC_MspInit+0xe8>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	4b29      	ldr	r3, [pc, #164]	; (800313c <HAL_ADC_MspInit+0xe8>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a28      	ldr	r2, [pc, #160]	; (800313c <HAL_ADC_MspInit+0xe8>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	4b22      	ldr	r3, [pc, #136]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a21      	ldr	r2, [pc, #132]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b1f      	ldr	r3, [pc, #124]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a1a      	ldr	r2, [pc, #104]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_AMP_36V_Pin|ADC_VOLT_BAT_Pin|ADC_VOLT_PWR_ST_Pin;
 80030e6:	230d      	movs	r3, #13
 80030e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ea:	2303      	movs	r3, #3
 80030ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f2:	f107 031c 	add.w	r3, r7, #28
 80030f6:	4619      	mov	r1, r3
 80030f8:	4811      	ldr	r0, [pc, #68]	; (8003140 <HAL_ADC_MspInit+0xec>)
 80030fa:	f004 fa79 	bl	80075f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IK_CENTER_Pin|ADC_IK_BACK_LEFT_Pin|ADC_IK_BACK_RIGHT_Pin|ADC_IK_FRONT_LEFT_Pin
 80030fe:	237c      	movs	r3, #124	; 0x7c
 8003100:	61fb      	str	r3, [r7, #28]
                          |ADC_IK_FRONT_RIGHT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003102:	2303      	movs	r3, #3
 8003104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310a:	f107 031c 	add.w	r3, r7, #28
 800310e:	4619      	mov	r1, r3
 8003110:	480c      	ldr	r0, [pc, #48]	; (8003144 <HAL_ADC_MspInit+0xf0>)
 8003112:	f004 fa6d 	bl	80075f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_AMP_5V_Pin|ADC_AMP_12V_Pin;
 8003116:	2303      	movs	r3, #3
 8003118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800311a:	2303      	movs	r3, #3
 800311c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003122:	f107 031c 	add.w	r3, r7, #28
 8003126:	4619      	mov	r1, r3
 8003128:	4807      	ldr	r0, [pc, #28]	; (8003148 <HAL_ADC_MspInit+0xf4>)
 800312a:	f004 fa61 	bl	80075f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800312e:	bf00      	nop
 8003130:	3730      	adds	r7, #48	; 0x30
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40012000 	.word	0x40012000
 800313c:	40023800 	.word	0x40023800
 8003140:	40020800 	.word	0x40020800
 8003144:	40020000 	.word	0x40020000
 8003148:	40020400 	.word	0x40020400

0800314c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <MX_DMA_Init+0x6c>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <MX_DMA_Init+0x6c>)
 800315c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <MX_DMA_Init+0x6c>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	200d      	movs	r0, #13
 8003174:	f003 fe03 	bl	8006d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003178:	200d      	movs	r0, #13
 800317a:	f003 fe1c 	bl	8006db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	200f      	movs	r0, #15
 8003184:	f003 fdfb 	bl	8006d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003188:	200f      	movs	r0, #15
 800318a:	f003 fe14 	bl	8006db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	2010      	movs	r0, #16
 8003194:	f003 fdf3 	bl	8006d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003198:	2010      	movs	r0, #16
 800319a:	f003 fe0c 	bl	8006db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	2100      	movs	r1, #0
 80031a2:	2011      	movs	r0, #17
 80031a4:	f003 fdeb 	bl	8006d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80031a8:	2011      	movs	r0, #17
 80031aa:	f003 fe04 	bl	8006db6 <HAL_NVIC_EnableIRQ>

}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800

080031bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	; 0x30
 80031c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c2:	f107 031c 	add.w	r3, r7, #28
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	4b48      	ldr	r3, [pc, #288]	; (80032f8 <MX_GPIO_Init+0x13c>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a47      	ldr	r2, [pc, #284]	; (80032f8 <MX_GPIO_Init+0x13c>)
 80031dc:	f043 0310 	orr.w	r3, r3, #16
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b45      	ldr	r3, [pc, #276]	; (80032f8 <MX_GPIO_Init+0x13c>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <MX_GPIO_Init+0x13c>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a40      	ldr	r2, [pc, #256]	; (80032f8 <MX_GPIO_Init+0x13c>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <MX_GPIO_Init+0x13c>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	4b3a      	ldr	r3, [pc, #232]	; (80032f8 <MX_GPIO_Init+0x13c>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a39      	ldr	r2, [pc, #228]	; (80032f8 <MX_GPIO_Init+0x13c>)
 8003214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b37      	ldr	r3, [pc, #220]	; (80032f8 <MX_GPIO_Init+0x13c>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	4b33      	ldr	r3, [pc, #204]	; (80032f8 <MX_GPIO_Init+0x13c>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a32      	ldr	r2, [pc, #200]	; (80032f8 <MX_GPIO_Init+0x13c>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6313      	str	r3, [r2, #48]	; 0x30
 8003236:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <MX_GPIO_Init+0x13c>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	4b2c      	ldr	r3, [pc, #176]	; (80032f8 <MX_GPIO_Init+0x13c>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <MX_GPIO_Init+0x13c>)
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <MX_GPIO_Init+0x13c>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <MX_GPIO_Init+0x13c>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <MX_GPIO_Init+0x13c>)
 8003268:	f043 0308 	orr.w	r3, r3, #8
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <MX_GPIO_Init+0x13c>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 800327a:	2200      	movs	r2, #0
 800327c:	2104      	movs	r1, #4
 800327e:	481f      	ldr	r0, [pc, #124]	; (80032fc <MX_GPIO_Init+0x140>)
 8003280:	f004 fb52 	bl	8007928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 8003284:	2200      	movs	r2, #0
 8003286:	2130      	movs	r1, #48	; 0x30
 8003288:	481d      	ldr	r0, [pc, #116]	; (8003300 <MX_GPIO_Init+0x144>)
 800328a:	f004 fb4d 	bl	8007928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 800328e:	2200      	movs	r2, #0
 8003290:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003294:	481b      	ldr	r0, [pc, #108]	; (8003304 <MX_GPIO_Init+0x148>)
 8003296:	f004 fb47 	bl	8007928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 800329a:	2304      	movs	r3, #4
 800329c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329e:	2301      	movs	r3, #1
 80032a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 80032aa:	f107 031c 	add.w	r3, r7, #28
 80032ae:	4619      	mov	r1, r3
 80032b0:	4812      	ldr	r0, [pc, #72]	; (80032fc <MX_GPIO_Init+0x140>)
 80032b2:	f004 f99d 	bl	80075f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin;
 80032b6:	2330      	movs	r3, #48	; 0x30
 80032b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ba:	2301      	movs	r3, #1
 80032bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c2:	2300      	movs	r3, #0
 80032c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c6:	f107 031c 	add.w	r3, r7, #28
 80032ca:	4619      	mov	r1, r3
 80032cc:	480c      	ldr	r0, [pc, #48]	; (8003300 <MX_GPIO_Init+0x144>)
 80032ce:	f004 f98f 	bl	80075f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80032d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80032d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d8:	2301      	movs	r3, #1
 80032da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032e4:	f107 031c 	add.w	r3, r7, #28
 80032e8:	4619      	mov	r1, r3
 80032ea:	4806      	ldr	r0, [pc, #24]	; (8003304 <MX_GPIO_Init+0x148>)
 80032ec:	f004 f980 	bl	80075f0 <HAL_GPIO_Init>

}
 80032f0:	bf00      	nop
 80032f2:	3730      	adds	r7, #48	; 0x30
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40021000 	.word	0x40021000
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00

08003308 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	if (UartHandle->Instance == UART4){ // Jetson commutation
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a71      	ldr	r2, [pc, #452]	; (80034dc <HAL_UART_RxCpltCallback+0x1d4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d16b      	bne.n	80033f2 <HAL_UART_RxCpltCallback+0xea>
		if (USART1ReceiveState == 0){
 800331a:	4b71      	ldr	r3, [pc, #452]	; (80034e0 <HAL_UART_RxCpltCallback+0x1d8>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11f      	bne.n	8003364 <HAL_UART_RxCpltCallback+0x5c>
			if ((SerialOnBoardRequest.CR != 13) || (SerialOnBoardRequest.LF != 10)){
 8003324:	4b6f      	ldr	r3, [pc, #444]	; (80034e4 <HAL_UART_RxCpltCallback+0x1dc>)
 8003326:	7a1b      	ldrb	r3, [r3, #8]
 8003328:	2b0d      	cmp	r3, #13
 800332a:	d103      	bne.n	8003334 <HAL_UART_RxCpltCallback+0x2c>
 800332c:	4b6d      	ldr	r3, [pc, #436]	; (80034e4 <HAL_UART_RxCpltCallback+0x1dc>)
 800332e:	7a5b      	ldrb	r3, [r3, #9]
 8003330:	2b0a      	cmp	r3, #10
 8003332:	d00c      	beq.n	800334e <HAL_UART_RxCpltCallback+0x46>
				Res = HAL_UART_Receive_DMA(&huart4, LostByte, 1);
 8003334:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <HAL_UART_RxCpltCallback+0x1e0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	4619      	mov	r1, r3
 800333c:	486b      	ldr	r0, [pc, #428]	; (80034ec <HAL_UART_RxCpltCallback+0x1e4>)
 800333e:	f006 fe83 	bl	800a048 <HAL_UART_Receive_DMA>
 8003342:	4603      	mov	r3, r0
 8003344:	73fb      	strb	r3, [r7, #15]
				USART1ReceiveState = 1;
 8003346:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_UART_RxCpltCallback+0x1d8>)
 8003348:	2201      	movs	r2, #1
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	e042      	b.n	80033d4 <HAL_UART_RxCpltCallback+0xcc>
			}
			else{
 				USART1ReceiveState = 10;
 800334e:	4b64      	ldr	r3, [pc, #400]	; (80034e0 <HAL_UART_RxCpltCallback+0x1d8>)
 8003350:	220a      	movs	r2, #10
 8003352:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8003354:	220a      	movs	r2, #10
 8003356:	4963      	ldr	r1, [pc, #396]	; (80034e4 <HAL_UART_RxCpltCallback+0x1dc>)
 8003358:	4864      	ldr	r0, [pc, #400]	; (80034ec <HAL_UART_RxCpltCallback+0x1e4>)
 800335a:	f006 fe75 	bl	800a048 <HAL_UART_Receive_DMA>
 800335e:	4603      	mov	r3, r0
 8003360:	73fb      	strb	r3, [r7, #15]
 8003362:	e037      	b.n	80033d4 <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else{
			if(USART1ReceiveState == 1){
 8003364:	4b5e      	ldr	r3, [pc, #376]	; (80034e0 <HAL_UART_RxCpltCallback+0x1d8>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d111      	bne.n	8003392 <HAL_UART_RxCpltCallback+0x8a>
				if (LostByte[0] == 13){
 800336e:	4b5e      	ldr	r3, [pc, #376]	; (80034e8 <HAL_UART_RxCpltCallback+0x1e0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b0d      	cmp	r3, #13
 8003376:	d102      	bne.n	800337e <HAL_UART_RxCpltCallback+0x76>
					USART1ReceiveState = 2;
 8003378:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_UART_RxCpltCallback+0x1d8>)
 800337a:	2202      	movs	r2, #2
 800337c:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)LostByte, 1);
 800337e:	4b5a      	ldr	r3, [pc, #360]	; (80034e8 <HAL_UART_RxCpltCallback+0x1e0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2201      	movs	r2, #1
 8003384:	4619      	mov	r1, r3
 8003386:	4859      	ldr	r0, [pc, #356]	; (80034ec <HAL_UART_RxCpltCallback+0x1e4>)
 8003388:	f006 fe5e 	bl	800a048 <HAL_UART_Receive_DMA>
 800338c:	4603      	mov	r3, r0
 800338e:	73fb      	strb	r3, [r7, #15]
 8003390:	e020      	b.n	80033d4 <HAL_UART_RxCpltCallback+0xcc>
			}
			else{
				if (USART1ReceiveState == 2){
 8003392:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_UART_RxCpltCallback+0x1d8>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d11b      	bne.n	80033d4 <HAL_UART_RxCpltCallback+0xcc>
					if (LostByte[0] == 10){
 800339c:	4b52      	ldr	r3, [pc, #328]	; (80034e8 <HAL_UART_RxCpltCallback+0x1e0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b0a      	cmp	r3, #10
 80033a4:	d10a      	bne.n	80033bc <HAL_UART_RxCpltCallback+0xb4>
						USART1ReceiveState = 0;
 80033a6:	4b4e      	ldr	r3, [pc, #312]	; (80034e0 <HAL_UART_RxCpltCallback+0x1d8>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 80033ac:	220a      	movs	r2, #10
 80033ae:	494d      	ldr	r1, [pc, #308]	; (80034e4 <HAL_UART_RxCpltCallback+0x1dc>)
 80033b0:	484e      	ldr	r0, [pc, #312]	; (80034ec <HAL_UART_RxCpltCallback+0x1e4>)
 80033b2:	f006 fe49 	bl	800a048 <HAL_UART_Receive_DMA>
 80033b6:	4603      	mov	r3, r0
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	e00b      	b.n	80033d4 <HAL_UART_RxCpltCallback+0xcc>
					}
					else{
						USART1ReceiveState = 1;
 80033bc:	4b48      	ldr	r3, [pc, #288]	; (80034e0 <HAL_UART_RxCpltCallback+0x1d8>)
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)LostByte, 1);
 80033c2:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <HAL_UART_RxCpltCallback+0x1e0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2201      	movs	r2, #1
 80033c8:	4619      	mov	r1, r3
 80033ca:	4848      	ldr	r0, [pc, #288]	; (80034ec <HAL_UART_RxCpltCallback+0x1e4>)
 80033cc:	f006 fe3c 	bl	800a048 <HAL_UART_Receive_DMA>
 80033d0:	4603      	mov	r3, r0
 80033d2:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}
		if (Res != HAL_OK)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_UART_RxCpltCallback+0xea>
		{
			MX_UART4_Init();
 80033da:	f002 fd85 	bl	8005ee8 <MX_UART4_Init>
			USART1ReceiveState = 0;
 80033de:	4b40      	ldr	r3, [pc, #256]	; (80034e0 <HAL_UART_RxCpltCallback+0x1d8>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 80033e4:	220a      	movs	r2, #10
 80033e6:	493f      	ldr	r1, [pc, #252]	; (80034e4 <HAL_UART_RxCpltCallback+0x1dc>)
 80033e8:	4840      	ldr	r0, [pc, #256]	; (80034ec <HAL_UART_RxCpltCallback+0x1e4>)
 80033ea:	f006 fe2d 	bl	800a048 <HAL_UART_Receive_DMA>
 80033ee:	4603      	mov	r3, r0
 80033f0:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == USART2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a3e      	ldr	r2, [pc, #248]	; (80034f0 <HAL_UART_RxCpltCallback+0x1e8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d16b      	bne.n	80034d4 <HAL_UART_RxCpltCallback+0x1cc>
	{
		if (USART2ReceiveState == 0)
 80033fc:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_UART_RxCpltCallback+0x1ec>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11f      	bne.n	8003446 <HAL_UART_RxCpltCallback+0x13e>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 8003406:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <HAL_UART_RxCpltCallback+0x1f0>)
 8003408:	7b9b      	ldrb	r3, [r3, #14]
 800340a:	2b0d      	cmp	r3, #13
 800340c:	d103      	bne.n	8003416 <HAL_UART_RxCpltCallback+0x10e>
 800340e:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_UART_RxCpltCallback+0x1f0>)
 8003410:	7bdb      	ldrb	r3, [r3, #15]
 8003412:	2b0a      	cmp	r3, #10
 8003414:	d00c      	beq.n	8003430 <HAL_UART_RxCpltCallback+0x128>
			{
				Res = HAL_UART_Receive_DMA(&huart2, LostByte, 1);
 8003416:	4b34      	ldr	r3, [pc, #208]	; (80034e8 <HAL_UART_RxCpltCallback+0x1e0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2201      	movs	r2, #1
 800341c:	4619      	mov	r1, r3
 800341e:	4837      	ldr	r0, [pc, #220]	; (80034fc <HAL_UART_RxCpltCallback+0x1f4>)
 8003420:	f006 fe12 	bl	800a048 <HAL_UART_Receive_DMA>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
				USART2ReceiveState = 1;
 8003428:	4b32      	ldr	r3, [pc, #200]	; (80034f4 <HAL_UART_RxCpltCallback+0x1ec>)
 800342a:	2201      	movs	r2, #1
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	e042      	b.n	80034b6 <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				USART2ReceiveState = 10;
 8003430:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_UART_RxCpltCallback+0x1ec>)
 8003432:	220a      	movs	r2, #10
 8003434:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8003436:	2210      	movs	r2, #16
 8003438:	492f      	ldr	r1, [pc, #188]	; (80034f8 <HAL_UART_RxCpltCallback+0x1f0>)
 800343a:	4830      	ldr	r0, [pc, #192]	; (80034fc <HAL_UART_RxCpltCallback+0x1f4>)
 800343c:	f006 fe04 	bl	800a048 <HAL_UART_Receive_DMA>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	e037      	b.n	80034b6 <HAL_UART_RxCpltCallback+0x1ae>
			}
		}
		else
		{
			if(USART2ReceiveState == 1)
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <HAL_UART_RxCpltCallback+0x1ec>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d111      	bne.n	8003474 <HAL_UART_RxCpltCallback+0x16c>
			{
				if (LostByte[0] == 13)
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <HAL_UART_RxCpltCallback+0x1e0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b0d      	cmp	r3, #13
 8003458:	d102      	bne.n	8003460 <HAL_UART_RxCpltCallback+0x158>
				{
					USART2ReceiveState = 2;
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <HAL_UART_RxCpltCallback+0x1ec>)
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8003460:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <HAL_UART_RxCpltCallback+0x1e0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2201      	movs	r2, #1
 8003466:	4619      	mov	r1, r3
 8003468:	4824      	ldr	r0, [pc, #144]	; (80034fc <HAL_UART_RxCpltCallback+0x1f4>)
 800346a:	f006 fded 	bl	800a048 <HAL_UART_Receive_DMA>
 800346e:	4603      	mov	r3, r0
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e020      	b.n	80034b6 <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				if (USART2ReceiveState == 2)
 8003474:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <HAL_UART_RxCpltCallback+0x1ec>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d11b      	bne.n	80034b6 <HAL_UART_RxCpltCallback+0x1ae>
				{
					if (LostByte[0] == 10)
 800347e:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_UART_RxCpltCallback+0x1e0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b0a      	cmp	r3, #10
 8003486:	d10a      	bne.n	800349e <HAL_UART_RxCpltCallback+0x196>
					{
						USART2ReceiveState = 0;
 8003488:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <HAL_UART_RxCpltCallback+0x1ec>)
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 800348e:	2210      	movs	r2, #16
 8003490:	4919      	ldr	r1, [pc, #100]	; (80034f8 <HAL_UART_RxCpltCallback+0x1f0>)
 8003492:	481a      	ldr	r0, [pc, #104]	; (80034fc <HAL_UART_RxCpltCallback+0x1f4>)
 8003494:	f006 fdd8 	bl	800a048 <HAL_UART_Receive_DMA>
 8003498:	4603      	mov	r3, r0
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	e00b      	b.n	80034b6 <HAL_UART_RxCpltCallback+0x1ae>
					}
					else
					{
						USART2ReceiveState = 1;
 800349e:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_UART_RxCpltCallback+0x1ec>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_UART_RxCpltCallback+0x1e0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	4619      	mov	r1, r3
 80034ac:	4813      	ldr	r0, [pc, #76]	; (80034fc <HAL_UART_RxCpltCallback+0x1f4>)
 80034ae:	f006 fdcb 	bl	800a048 <HAL_UART_Receive_DMA>
 80034b2:	4603      	mov	r3, r0
 80034b4:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00b      	beq.n	80034d4 <HAL_UART_RxCpltCallback+0x1cc>
		{
			MX_USART2_UART_Init();
 80034bc:	f002 fd3e 	bl	8005f3c <MX_USART2_UART_Init>
			USART2ReceiveState = 0;
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_UART_RxCpltCallback+0x1ec>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 80034c6:	2210      	movs	r2, #16
 80034c8:	490b      	ldr	r1, [pc, #44]	; (80034f8 <HAL_UART_RxCpltCallback+0x1f0>)
 80034ca:	480c      	ldr	r0, [pc, #48]	; (80034fc <HAL_UART_RxCpltCallback+0x1f4>)
 80034cc:	f006 fdbc 	bl	800a048 <HAL_UART_Receive_DMA>
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40004c00 	.word	0x40004c00
 80034e0:	20000d9c 	.word	0x20000d9c
 80034e4:	20000f80 	.word	0x20000f80
 80034e8:	20001020 	.word	0x20001020
 80034ec:	200012cc 	.word	0x200012cc
 80034f0:	40004400 	.word	0x40004400
 80034f4:	20000d9d 	.word	0x20000d9d
 80034f8:	20000e98 	.word	0x20000e98
 80034fc:	20001310 	.word	0x20001310

08003500 <HallActualize>:
int HallActualize(float NewStep, float LastStep, float difference)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	ed87 0a03 	vstr	s0, [r7, #12]
 800350a:	edc7 0a02 	vstr	s1, [r7, #8]
 800350e:	ed87 1a01 	vstr	s2, [r7, #4]
	float MIN_VAL = LastStep - difference;
 8003512:	ed97 7a02 	vldr	s14, [r7, #8]
 8003516:	edd7 7a01 	vldr	s15, [r7, #4]
 800351a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351e:	edc7 7a05 	vstr	s15, [r7, #20]
	float MAX_VAL = LastStep + difference;
 8003522:	ed97 7a02 	vldr	s14, [r7, #8]
 8003526:	edd7 7a01 	vldr	s15, [r7, #4]
 800352a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352e:	edc7 7a04 	vstr	s15, [r7, #16]

	if ((NewStep < MAX_VAL) && (NewStep > MIN_VAL))
 8003532:	ed97 7a03 	vldr	s14, [r7, #12]
 8003536:	edd7 7a04 	vldr	s15, [r7, #16]
 800353a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800353e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003542:	d50a      	bpl.n	800355a <HallActualize+0x5a>
 8003544:	ed97 7a03 	vldr	s14, [r7, #12]
 8003548:	edd7 7a05 	vldr	s15, [r7, #20]
 800354c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003554:	dd01      	ble.n	800355a <HallActualize+0x5a>
	{
		return 1;
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HallActualize+0x5c>
	}
	return 0;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <IMU_INIT>:
void IMU_INIT()
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
	gyroscopeSensitivity.axis.x = 1.0f;
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <IMU_INIT+0x70>)
 800356e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003572:	601a      	str	r2, [r3, #0]
	gyroscopeSensitivity.axis.y = 1.0f;
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <IMU_INIT+0x70>)
 8003576:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800357a:	605a      	str	r2, [r3, #4]
	gyroscopeSensitivity.axis.z = 1.0f;
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <IMU_INIT+0x70>)
 800357e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003582:	609a      	str	r2, [r3, #8]

	accelerometerSensitivity.axis.x = 1.0f;
 8003584:	4b15      	ldr	r3, [pc, #84]	; (80035dc <IMU_INIT+0x74>)
 8003586:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800358a:	601a      	str	r2, [r3, #0]
	accelerometerSensitivity.axis.y = 1.0f;
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <IMU_INIT+0x74>)
 800358e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003592:	605a      	str	r2, [r3, #4]
	accelerometerSensitivity.axis.z = 1.0f;
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <IMU_INIT+0x74>)
 8003596:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800359a:	609a      	str	r2, [r3, #8]

	hardIronBias.axis.x = 0.0f;
 800359c:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <IMU_INIT+0x78>)
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
	hardIronBias.axis.y = 0.0f;
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <IMU_INIT+0x78>)
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	605a      	str	r2, [r3, #4]
	hardIronBias.axis.z = 0.0f;
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <IMU_INIT+0x78>)
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	609a      	str	r2, [r3, #8]

	FusionBiasInitialise(&fusionBias, 0.5f, samplePeriod);
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <IMU_INIT+0x7c>)
 80035b6:	edd3 7a00 	vldr	s15, [r3]
 80035ba:	eef0 0a67 	vmov.f32	s1, s15
 80035be:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80035c2:	4809      	ldr	r0, [pc, #36]	; (80035e8 <IMU_INIT+0x80>)
 80035c4:	f7fe ffa0 	bl	8002508 <FusionBiasInitialise>
	FusionAhrsInitialise(&fusionAhrs, 0.5f);
 80035c8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80035cc:	4807      	ldr	r0, [pc, #28]	; (80035ec <IMU_INIT+0x84>)
 80035ce:	f7fd fc99 	bl	8000f04 <FusionAhrsInitialise>
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000f9c 	.word	0x20000f9c
 80035dc:	20000ff8 	.word	0x20000ff8
 80035e0:	20000fb4 	.word	0x20000fb4
 80035e4:	20000030 	.word	0x20000030
 80035e8:	20000f20 	.word	0x20000f20
 80035ec:	20000ee4 	.word	0x20000ee4

080035f0 <IMU_UPDATE>:
void IMU_UPDATE()
{
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 80035f6:	af00      	add	r7, sp, #0
	icm20948_gyro_read_dps(&my_gyro);
 80035f8:	48d6      	ldr	r0, [pc, #856]	; (8003954 <IMU_UPDATE+0x364>)
 80035fa:	f7ff f9a5 	bl	8002948 <icm20948_gyro_read_dps>
	icm20948_accel_read_g(&my_accel);
 80035fe:	48d6      	ldr	r0, [pc, #856]	; (8003958 <IMU_UPDATE+0x368>)
 8003600:	f7ff f9d0 	bl	80029a4 <icm20948_accel_read_g>
	//ak09916_mag_read_uT(&my_mag);

	uncalibratedGyroscope.axis.x = my_gyro.x;
 8003604:	4bd3      	ldr	r3, [pc, #844]	; (8003954 <IMU_UPDATE+0x364>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4ad4      	ldr	r2, [pc, #848]	; (800395c <IMU_UPDATE+0x36c>)
 800360a:	6013      	str	r3, [r2, #0]
	uncalibratedGyroscope.axis.y = my_gyro.y;
 800360c:	4bd1      	ldr	r3, [pc, #836]	; (8003954 <IMU_UPDATE+0x364>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4ad2      	ldr	r2, [pc, #840]	; (800395c <IMU_UPDATE+0x36c>)
 8003612:	6053      	str	r3, [r2, #4]
	uncalibratedGyroscope.axis.z = my_gyro.z;
 8003614:	4bcf      	ldr	r3, [pc, #828]	; (8003954 <IMU_UPDATE+0x364>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4ad0      	ldr	r2, [pc, #832]	; (800395c <IMU_UPDATE+0x36c>)
 800361a:	6093      	str	r3, [r2, #8]

	uncalibratedAccelerometer.axis.x = my_accel.x;
 800361c:	4bce      	ldr	r3, [pc, #824]	; (8003958 <IMU_UPDATE+0x368>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4acf      	ldr	r2, [pc, #828]	; (8003960 <IMU_UPDATE+0x370>)
 8003622:	6013      	str	r3, [r2, #0]
	uncalibratedAccelerometer.axis.y = my_accel.y;
 8003624:	4bcc      	ldr	r3, [pc, #816]	; (8003958 <IMU_UPDATE+0x368>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4acd      	ldr	r2, [pc, #820]	; (8003960 <IMU_UPDATE+0x370>)
 800362a:	6053      	str	r3, [r2, #4]
	uncalibratedAccelerometer.axis.z = my_accel.z;
 800362c:	4bca      	ldr	r3, [pc, #808]	; (8003958 <IMU_UPDATE+0x368>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4acb      	ldr	r2, [pc, #812]	; (8003960 <IMU_UPDATE+0x370>)
 8003632:	6093      	str	r3, [r2, #8]

	//uncalibratedMagnetometer.axis.x = my_mag.x;
	//uncalibratedMagnetometer.axis.y = my_mag.y;
	//uncalibratedMagnetometer.axis.z = my_mag.z;

	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8003634:	4bcb      	ldr	r3, [pc, #812]	; (8003964 <IMU_UPDATE+0x374>)
 8003636:	f507 74e2 	add.w	r4, r7, #452	; 0x1c4
 800363a:	461d      	mov	r5, r3
 800363c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800363e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	6023      	str	r3, [r4, #0]
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003660:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003664:	4abd      	ldr	r2, [pc, #756]	; (800395c <IMU_UPDATE+0x36c>)
 8003666:	ca07      	ldmia	r2, {r0, r1, r2}
 8003668:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	461d      	mov	r5, r3
 8003670:	f507 74e2 	add.w	r4, r7, #452	; 0x1c4
 8003674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800367a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	602b      	str	r3, [r5, #0]
 8003680:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8003684:	4ab8      	ldr	r2, [pc, #736]	; (8003968 <IMU_UPDATE+0x378>)
 8003686:	ca07      	ldmia	r2, {r0, r1, r2}
 8003688:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800368c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003690:	461c      	mov	r4, r3
 8003692:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003696:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800369a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800369e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80036a2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80036a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80036a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036ac:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80036b0:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80036b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80036b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80036ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80036be:	ed93 7a00 	vldr	s14, [r3]
 80036c2:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ce:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80036d2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80036d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80036da:	ed93 7a01 	vldr	s14, [r3, #4]
 80036de:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80036e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80036e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ea:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80036ee:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80036f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80036f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80036fa:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80036fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8003702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003706:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800370a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800370e:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8003712:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8003716:	ca07      	ldmia	r2, {r0, r1, r2}
 8003718:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800371c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003720:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8003724:	ca07      	ldmia	r2, {r0, r1, r2}
 8003726:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800372a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800372e:	461c      	mov	r4, r3
 8003730:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003734:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800373c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003740:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8003744:	ca07      	ldmia	r2, {r0, r1, r2}
 8003746:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800374a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800374e:	ed93 7a00 	vldr	s14, [r3]
 8003752:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003756:	edd3 7a00 	vldr	s15, [r3]
 800375a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003762:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8003766:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800376a:	ed93 7a01 	vldr	s14, [r3, #4]
 800376e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003772:	edd3 7a01 	vldr	s15, [r3, #4]
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800377e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8003782:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003786:	ed93 7a02 	vldr	s14, [r3, #8]
 800378a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800378e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003796:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800379a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800379e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80037a2:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80037a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80037a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037ac:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80037b0:	f507 7219 	add.w	r2, r7, #612	; 0x264
 80037b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80037b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	4614      	mov	r4, r2
 80037c2:	461d      	mov	r5, r3
 80037c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	6023      	str	r3, [r4, #0]
 80037d0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80037d4:	461c      	mov	r4, r3
 80037d6:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80037da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 80037e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037e6:	ed93 7a00 	vldr	s14, [r3]
 80037ea:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80037fe:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003802:	edd3 7a01 	vldr	s15, [r3, #4]
 8003806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800380a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800380e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003812:	edd3 6a02 	vldr	s13, [r3, #8]
 8003816:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800381a:	edd3 7a02 	vldr	s15, [r3, #8]
 800381e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003826:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800382a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800382e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003832:	ed93 7a03 	vldr	s14, [r3, #12]
 8003836:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800383a:	edd3 7a00 	vldr	s15, [r3]
 800383e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003846:	edd3 6a04 	vldr	s13, [r3, #16]
 800384a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800384e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800385a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800385e:	edd3 6a05 	vldr	s13, [r3, #20]
 8003862:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003866:	edd3 7a02 	vldr	s15, [r3, #8]
 800386a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800386e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003872:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003876:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800387a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800387e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003882:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800388e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003892:	edd3 6a07 	vldr	s13, [r3, #28]
 8003896:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800389a:	edd3 7a01 	vldr	s15, [r3, #4]
 800389e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038aa:	edd3 6a08 	vldr	s13, [r3, #32]
 80038ae:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80038b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80038b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80038c2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80038c6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80038ca:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80038ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80038d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038d4:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80038d8:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80038dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80038de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 80038e2:	bf00      	nop
 80038e4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80038e8:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80038ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80038ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 80038f2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80038f6:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <IMU_UPDATE+0x374>)
 80038f8:	461c      	mov	r4, r3
 80038fa:	4615      	mov	r5, r2
 80038fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	6023      	str	r3, [r4, #0]
 8003908:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800392a:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <IMU_UPDATE+0x370>)
 800392c:	ca07      	ldmia	r2, {r0, r1, r2}
 800392e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003932:	1d3a      	adds	r2, r7, #4
 8003934:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003938:	4614      	mov	r4, r2
 800393a:	461d      	mov	r5, r3
 800393c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800393e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	6023      	str	r3, [r4, #0]
 8003948:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800394c:	4a07      	ldr	r2, [pc, #28]	; (800396c <IMU_UPDATE+0x37c>)
 800394e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003950:	e00e      	b.n	8003970 <IMU_UPDATE+0x380>
 8003952:	bf00      	nop
 8003954:	20001008 	.word	0x20001008
 8003958:	20000f8c 	.word	0x20000f8c
 800395c:	20000fec 	.word	0x20000fec
 8003960:	20000f64 	.word	0x20000f64
 8003964:	0800d270 	.word	0x0800d270
 8003968:	20000f9c 	.word	0x20000f9c
 800396c:	20000ff8 	.word	0x20000ff8
 8003970:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003974:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003978:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800397c:	ca07      	ldmia	r2, {r0, r1, r2}
 800397e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003982:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003986:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800398a:	ca07      	ldmia	r2, {r0, r1, r2}
 800398c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003990:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003994:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8003998:	ca07      	ldmia	r2, {r0, r1, r2}
 800399a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 800399e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80039a2:	ed93 7a00 	vldr	s14, [r3]
 80039a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80039aa:	edd3 7a00 	vldr	s15, [r3]
 80039ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80039b6:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80039ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80039be:	ed93 7a01 	vldr	s14, [r3, #4]
 80039c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80039c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80039ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80039d2:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80039d6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80039da:	ed93 7a02 	vldr	s14, [r3, #8]
 80039de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80039e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80039e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ea:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80039ee:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80039f2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80039f6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80039fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80039fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a00:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003a04:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8003a08:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a0e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003a12:	461c      	mov	r4, r3
 8003a14:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8003a18:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a24:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003a28:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8003a2e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003a32:	ed93 7a00 	vldr	s14, [r3]
 8003a36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a42:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003a46:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8003a4a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003a4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a56:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003a62:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8003a66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003a6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a72:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003a7e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003a82:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003a86:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8003a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a90:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8003a94:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8003a98:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	461d      	mov	r5, r3
 8003aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ab8:	461c      	mov	r4, r3
 8003aba:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8003abe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8003ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aca:	ed93 7a00 	vldr	s14, [r3]
 8003ace:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ad2:	edd3 7a00 	vldr	s15, [r3]
 8003ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ade:	edd3 6a01 	vldr	s13, [r3, #4]
 8003ae2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ae6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003af6:	edd3 6a02 	vldr	s13, [r3, #8]
 8003afa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003afe:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b0e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8003b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b16:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003b1e:	edd3 7a00 	vldr	s15, [r3]
 8003b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b2a:	edd3 6a04 	vldr	s13, [r3, #16]
 8003b2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003b32:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b42:	edd3 6a05 	vldr	s13, [r3, #20]
 8003b46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003b4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b56:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b5a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b62:	ed93 7a06 	vldr	s14, [r3, #24]
 8003b66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003b6a:	edd3 7a00 	vldr	s15, [r3]
 8003b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b76:	edd3 6a07 	vldr	s13, [r3, #28]
 8003b7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003b7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b8e:	edd3 6a08 	vldr	s13, [r3, #32]
 8003b92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003b96:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003ba6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003baa:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8003bae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003bb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003bb8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8003bbc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8003bc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003bc6:	bf00      	nop
 8003bc8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8003bcc:	461c      	mov	r4, r3
 8003bce:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8003bd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//FusionVector3 calibratedMagnetometer = FusionCalibrationMagnetic(uncalibratedMagnetometer, FUSION_ROTATION_MATRIX_IDENTITY, hardIronBias);

	calibratedGyroscope = FusionBiasUpdate(&fusionBias, calibratedGyroscope);
 8003bda:	edd7 6a7a 	vldr	s13, [r7, #488]	; 0x1e8
 8003bde:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 8003be2:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 8003be6:	eeb0 0a66 	vmov.f32	s0, s13
 8003bea:	eef0 0a47 	vmov.f32	s1, s14
 8003bee:	eeb0 1a67 	vmov.f32	s2, s15
 8003bf2:	4889      	ldr	r0, [pc, #548]	; (8003e18 <IMU_UPDATE+0x828>)
 8003bf4:	f7fe fcc4 	bl	8002580 <FusionBiasUpdate>
 8003bf8:	eef0 6a40 	vmov.f32	s13, s0
 8003bfc:	eeb0 7a60 	vmov.f32	s14, s1
 8003c00:	eef0 7a41 	vmov.f32	s15, s2
 8003c04:	edc7 6a7a 	vstr	s13, [r7, #488]	; 0x1e8
 8003c08:	ed87 7a7b 	vstr	s14, [r7, #492]	; 0x1ec
 8003c0c:	edc7 7a7c 	vstr	s15, [r7, #496]	; 0x1f0
	FusionAhrsUpdateWithoutMagnetometer(&fusionAhrs, calibratedGyroscope, calibratedAccelerometer, samplePeriod);
 8003c10:	4b82      	ldr	r3, [pc, #520]	; (8003e1c <IMU_UPDATE+0x82c>)
 8003c12:	edd3 4a00 	vldr	s9, [r3]
 8003c16:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8003c1a:	ed93 5a00 	vldr	s10, [r3]
 8003c1e:	edd3 5a01 	vldr	s11, [r3, #4]
 8003c22:	ed93 6a02 	vldr	s12, [r3, #8]
 8003c26:	edd7 6a7a 	vldr	s13, [r7, #488]	; 0x1e8
 8003c2a:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 8003c2e:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 8003c32:	eeb0 3a64 	vmov.f32	s6, s9
 8003c36:	eef0 1a45 	vmov.f32	s3, s10
 8003c3a:	eeb0 2a65 	vmov.f32	s4, s11
 8003c3e:	eef0 2a46 	vmov.f32	s5, s12
 8003c42:	eeb0 0a66 	vmov.f32	s0, s13
 8003c46:	eef0 0a47 	vmov.f32	s1, s14
 8003c4a:	eeb0 1a67 	vmov.f32	s2, s15
 8003c4e:	4874      	ldr	r0, [pc, #464]	; (8003e20 <IMU_UPDATE+0x830>)
 8003c50:	f7fe fa1e 	bl	8002090 <FusionAhrsUpdateWithoutMagnetometer>
	//FusionAhrsUpdate(&fusionAhrs, calibratedGyroscope, calibratedAccelerometer, calibratedMagnetometer, samplePeriod);
	eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(&fusionAhrs));
 8003c54:	4872      	ldr	r0, [pc, #456]	; (8003e20 <IMU_UPDATE+0x830>)
 8003c56:	f7fe fa85 	bl	8002164 <FusionAhrsGetQuaternion>
 8003c5a:	eeb0 6a40 	vmov.f32	s12, s0
 8003c5e:	eef0 6a60 	vmov.f32	s13, s1
 8003c62:	eeb0 7a41 	vmov.f32	s14, s2
 8003c66:	eef0 7a61 	vmov.f32	s15, s3
 8003c6a:	ed87 6a7d 	vstr	s12, [r7, #500]	; 0x1f4
 8003c6e:	edc7 6a7e 	vstr	s13, [r7, #504]	; 0x1f8
 8003c72:	ed87 7a7f 	vstr	s14, [r7, #508]	; 0x1fc
 8003c76:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
 8003c7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c7e:	461c      	mov	r4, r3
 8003c80:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8003c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 8003c8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c8e:	ed93 7a00 	vldr	s14, [r3]
 8003c92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ca2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ca6:	edc7 7aab 	vstr	s15, [r7, #684]	; 0x2ac
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003caa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003cae:	ed93 7a02 	vldr	s14, [r3, #8]
 8003cb2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003cb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003cc2:	edd3 6a00 	vldr	s13, [r3]
 8003cc6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003cca:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cd2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003cd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003cda:	ed93 7a03 	vldr	s14, [r3, #12]
 8003cde:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ce2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cea:	edd7 7aab 	vldr	s15, [r7, #684]	; 0x2ac
 8003cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf2:	eef0 0a67 	vmov.f32	s1, s15
 8003cf6:	eeb0 0a66 	vmov.f32	s0, s13
 8003cfa:	f007 fac3 	bl	800b284 <atan2f>
 8003cfe:	eef0 7a40 	vmov.f32	s15, s0
 8003d02:	edc7 7aaa 	vstr	s15, [r7, #680]	; 0x2a8
    return radians * (180.0f / (float) M_PI);
 8003d06:	edd7 7aaa 	vldr	s15, [r7, #680]	; 0x2a8
 8003d0a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003e24 <IMU_UPDATE+0x834>
 8003d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003d12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d16:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003d1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d1e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d26:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d32:	edd3 6a00 	vldr	s13, [r3]
 8003d36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d4e:	f007 fa67 	bl	800b220 <asinf>
 8003d52:	eef0 7a40 	vmov.f32	s15, s0
 8003d56:	eef1 7a67 	vneg.f32	s15, s15
 8003d5a:	edc7 7aa9 	vstr	s15, [r7, #676]	; 0x2a4
    return radians * (180.0f / (float) M_PI);
 8003d5e:	edd7 7aa9 	vldr	s15, [r7, #676]	; 0x2a4
 8003d62:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003e24 <IMU_UPDATE+0x834>
 8003d66:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003d6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d6e:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003d72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d76:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d86:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d8a:	edd3 6a00 	vldr	s13, [r3]
 8003d8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d92:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d9a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003d9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003da2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003da6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003daa:	edd3 7a01 	vldr	s15, [r3, #4]
 8003dae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003db2:	edd7 7aab 	vldr	s15, [r7, #684]	; 0x2ac
 8003db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dba:	eef0 0a67 	vmov.f32	s1, s15
 8003dbe:	eeb0 0a66 	vmov.f32	s0, s13
 8003dc2:	f007 fa5f 	bl	800b284 <atan2f>
 8003dc6:	eef0 7a40 	vmov.f32	s15, s0
 8003dca:	edc7 7aa8 	vstr	s15, [r7, #672]	; 0x2a0
    return radians * (180.0f / (float) M_PI);
 8003dce:	edd7 7aa8 	vldr	s15, [r7, #672]	; 0x2a0
 8003dd2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003e24 <IMU_UPDATE+0x834>
 8003dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003dda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dde:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 8003de2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003de6:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8003dea:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003df0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003df4:	461c      	mov	r4, r3
 8003df6:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8003dfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003dfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <IMU_UPDATE+0x838>)
 8003e04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003e0e:	bf00      	nop
 8003e10:	f507 772c 	add.w	r7, r7, #688	; 0x2b0
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bdb0      	pop	{r4, r5, r7, pc}
 8003e18:	20000f20 	.word	0x20000f20
 8003e1c:	20000030 	.word	0x20000030
 8003e20:	20000ee4 	.word	0x20000ee4
 8003e24:	42652ee0 	.word	0x42652ee0
 8003e28:	20000e84 	.word	0x20000e84

08003e2c <SERIAL_CONTROL_LOOP>:
void SERIAL_CONTROL_LOOP()
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
	SerialControlWheelsRequest.ControlMode = 0;
 8003e30:	4b0e      	ldr	r3, [pc, #56]	; (8003e6c <SERIAL_CONTROL_LOOP+0x40>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
	SerialControlWheelsRequest.ParameterNumber = 0;
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <SERIAL_CONTROL_LOOP+0x40>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	705a      	strb	r2, [r3, #1]
	SerialControlWheelsRequest.WheelLeft = BTFront;
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <SERIAL_CONTROL_LOOP+0x44>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <SERIAL_CONTROL_LOOP+0x40>)
 8003e42:	3306      	adds	r3, #6
 8003e44:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight = BTTurn;
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <SERIAL_CONTROL_LOOP+0x48>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <SERIAL_CONTROL_LOOP+0x40>)
 8003e4c:	330a      	adds	r3, #10
 8003e4e:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.CR=13;
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <SERIAL_CONTROL_LOOP+0x40>)
 8003e52:	220d      	movs	r2, #13
 8003e54:	739a      	strb	r2, [r3, #14]
	SerialControlWheelsRequest.LF=10;
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <SERIAL_CONTROL_LOOP+0x40>)
 8003e58:	220a      	movs	r2, #10
 8003e5a:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)SerialControlWheelsRequest.Buffer, WHEELS_REQUEST_SIZE);
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	4903      	ldr	r1, [pc, #12]	; (8003e6c <SERIAL_CONTROL_LOOP+0x40>)
 8003e60:	4805      	ldr	r0, [pc, #20]	; (8003e78 <SERIAL_CONTROL_LOOP+0x4c>)
 8003e62:	f006 f873 	bl	8009f4c <HAL_UART_Transmit_DMA>
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000eb0 	.word	0x20000eb0
 8003e70:	20000dd8 	.word	0x20000dd8
 8003e74:	20000ddc 	.word	0x20000ddc
 8003e78:	20001310 	.word	0x20001310
 8003e7c:	00000000 	.word	0x00000000

08003e80 <BALANCE_Prepare>:
void BALANCE_Prepare()
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
	Front = BTFront;
 8003e84:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <BALANCE_Prepare+0xc0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2e      	ldr	r2, [pc, #184]	; (8003f44 <BALANCE_Prepare+0xc4>)
 8003e8a:	6013      	str	r3, [r2, #0]
	Turn = BTTurn;
 8003e8c:	4b2e      	ldr	r3, [pc, #184]	; (8003f48 <BALANCE_Prepare+0xc8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2e      	ldr	r2, [pc, #184]	; (8003f4c <BALANCE_Prepare+0xcc>)
 8003e92:	6013      	str	r3, [r2, #0]
		{
			BalanceActiveDemand = false;
		}
	}*/

	Turn = (Turn > 90) ? 90 : Turn;
 8003e94:	4b2d      	ldr	r3, [pc, #180]	; (8003f4c <BALANCE_Prepare+0xcc>)
 8003e96:	edd3 7a00 	vldr	s15, [r3]
 8003e9a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003f50 <BALANCE_Prepare+0xd0>
 8003e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea6:	dd01      	ble.n	8003eac <BALANCE_Prepare+0x2c>
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <BALANCE_Prepare+0xd4>)
 8003eaa:	e001      	b.n	8003eb0 <BALANCE_Prepare+0x30>
 8003eac:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <BALANCE_Prepare+0xcc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <BALANCE_Prepare+0xcc>)
 8003eb2:	6013      	str	r3, [r2, #0]
	Turn = (Turn < -90) ? -90 : Turn;
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <BALANCE_Prepare+0xcc>)
 8003eb6:	edd3 7a00 	vldr	s15, [r3]
 8003eba:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003f58 <BALANCE_Prepare+0xd8>
 8003ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec6:	d501      	bpl.n	8003ecc <BALANCE_Prepare+0x4c>
 8003ec8:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <BALANCE_Prepare+0xdc>)
 8003eca:	e001      	b.n	8003ed0 <BALANCE_Prepare+0x50>
 8003ecc:	4b1f      	ldr	r3, [pc, #124]	; (8003f4c <BALANCE_Prepare+0xcc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <BALANCE_Prepare+0xcc>)
 8003ed2:	6013      	str	r3, [r2, #0]
	Front = (Front > 2) ? 2 : Front;
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <BALANCE_Prepare+0xc4>)
 8003ed6:	edd3 7a00 	vldr	s15, [r3]
 8003eda:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee6:	dd02      	ble.n	8003eee <BALANCE_Prepare+0x6e>
 8003ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003eec:	e001      	b.n	8003ef2 <BALANCE_Prepare+0x72>
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <BALANCE_Prepare+0xc4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <BALANCE_Prepare+0xc4>)
 8003ef4:	6013      	str	r3, [r2, #0]
	Front = (Front < -0.4) ? -0.4 : Front;
 8003ef6:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <BALANCE_Prepare+0xc4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc fb1c 	bl	8000538 <__aeabi_f2d>
 8003f00:	a30d      	add	r3, pc, #52	; (adr r3, 8003f38 <BALANCE_Prepare+0xb8>)
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	f7fc fde1 	bl	8000acc <__aeabi_dcmplt>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <BALANCE_Prepare+0x94>
 8003f10:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <BALANCE_Prepare+0xe0>)
 8003f12:	e001      	b.n	8003f18 <BALANCE_Prepare+0x98>
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <BALANCE_Prepare+0xc4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <BALANCE_Prepare+0xc4>)
 8003f1a:	6013      	str	r3, [r2, #0]

	// Point to add IK sensor

	// Point to add ParkingMode

	BalanceActiveDemand = BTBalanceActive;
 8003f1c:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <BALANCE_Prepare+0xe4>)
 8003f1e:	781a      	ldrb	r2, [r3, #0]
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <BALANCE_Prepare+0xe8>)
 8003f22:	701a      	strb	r2, [r3, #0]
	BalanceActive = BTBalanceActive;
 8003f24:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <BALANCE_Prepare+0xe4>)
 8003f26:	781a      	ldrb	r2, [r3, #0]
 8003f28:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <BALANCE_Prepare+0xec>)
 8003f2a:	701a      	strb	r2, [r3, #0]
	PositionLinearDemand = PositionLinear;
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <BALANCE_Prepare+0xf0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <BALANCE_Prepare+0xf4>)
 8003f32:	6013      	str	r3, [r2, #0]
}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	9999999a 	.word	0x9999999a
 8003f3c:	bfd99999 	.word	0xbfd99999
 8003f40:	20000dd8 	.word	0x20000dd8
 8003f44:	20000de0 	.word	0x20000de0
 8003f48:	20000ddc 	.word	0x20000ddc
 8003f4c:	20000de4 	.word	0x20000de4
 8003f50:	42b40000 	.word	0x42b40000
 8003f54:	42b40000 	.word	0x42b40000
 8003f58:	c2b40000 	.word	0xc2b40000
 8003f5c:	c2b40000 	.word	0xc2b40000
 8003f60:	becccccd 	.word	0xbecccccd
 8003f64:	20000f48 	.word	0x20000f48
 8003f68:	20000eac 	.word	0x20000eac
 8003f6c:	20000f3c 	.word	0x20000f3c
 8003f70:	20000ed8 	.word	0x20000ed8
 8003f74:	20000ec8 	.word	0x20000ec8

08003f78 <BALANCE_Calculate_Speeds>:
void BALANCE_Calculate_Speeds()
{
 8003f78:	b5b0      	push	{r4, r5, r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
	//LEFT
	TimeS = (HAL_GetTick() - StepsLeftPreviousTime) / 1000.0;
 8003f7c:	f002 f9f4 	bl	8006368 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b8d      	ldr	r3, [pc, #564]	; (80041b8 <BALANCE_Calculate_Speeds+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fc fab3 	bl	80004f4 <__aeabi_ui2d>
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	4b8a      	ldr	r3, [pc, #552]	; (80041bc <BALANCE_Calculate_Speeds+0x244>)
 8003f94:	f7fc fc52 	bl	800083c <__aeabi_ddiv>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	f7fc fde4 	bl	8000b6c <__aeabi_d2f>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4a86      	ldr	r2, [pc, #536]	; (80041c0 <BALANCE_Calculate_Speeds+0x248>)
 8003fa8:	6013      	str	r3, [r2, #0]
	if (TimeS > SPEED_STEPS_MAX_TIME)
 8003faa:	4b85      	ldr	r3, [pc, #532]	; (80041c0 <BALANCE_Calculate_Speeds+0x248>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc fac2 	bl	8000538 <__aeabi_f2d>
 8003fb4:	a37c      	add	r3, pc, #496	; (adr r3, 80041a8 <BALANCE_Calculate_Speeds+0x230>)
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f7fc fda5 	bl	8000b08 <__aeabi_dcmpgt>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <BALANCE_Calculate_Speeds+0x5a>
	{
		TimeS = SPEED_STEPS_MAX_TIME;
 8003fc4:	4b7e      	ldr	r3, [pc, #504]	; (80041c0 <BALANCE_Calculate_Speeds+0x248>)
 8003fc6:	4a7f      	ldr	r2, [pc, #508]	; (80041c4 <BALANCE_Calculate_Speeds+0x24c>)
 8003fc8:	601a      	str	r2, [r3, #0]
	    LeftSpeed = 0;
 8003fca:	4b7f      	ldr	r3, [pc, #508]	; (80041c8 <BALANCE_Calculate_Speeds+0x250>)
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
	}
	if (HallLeftStep != StepsLeftPrevious)
 8003fd2:	4b7e      	ldr	r3, [pc, #504]	; (80041cc <BALANCE_Calculate_Speeds+0x254>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fde:	4b7c      	ldr	r3, [pc, #496]	; (80041d0 <BALANCE_Calculate_Speeds+0x258>)
 8003fe0:	edd3 7a00 	vldr	s15, [r3]
 8003fe4:	eeb4 7a67 	vcmp.f32	s14, s15
 8003fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fec:	d039      	beq.n	8004062 <BALANCE_Calculate_Speeds+0xea>
	{
		LeftSpeed = ((HallLeftStep - StepsLeftPrevious) * STEPS_TO_METERS) / TimeS;
 8003fee:	4b78      	ldr	r3, [pc, #480]	; (80041d0 <BALANCE_Calculate_Speeds+0x258>)
 8003ff0:	ed93 7a00 	vldr	s14, [r3]
 8003ff4:	4b75      	ldr	r3, [pc, #468]	; (80041cc <BALANCE_Calculate_Speeds+0x254>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004004:	ee17 0a90 	vmov	r0, s15
 8004008:	f7fc fa96 	bl	8000538 <__aeabi_f2d>
 800400c:	a368      	add	r3, pc, #416	; (adr r3, 80041b0 <BALANCE_Calculate_Speeds+0x238>)
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f7fc fae9 	bl	80005e8 <__aeabi_dmul>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4614      	mov	r4, r2
 800401c:	461d      	mov	r5, r3
 800401e:	4b68      	ldr	r3, [pc, #416]	; (80041c0 <BALANCE_Calculate_Speeds+0x248>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc fa88 	bl	8000538 <__aeabi_f2d>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4620      	mov	r0, r4
 800402e:	4629      	mov	r1, r5
 8004030:	f7fc fc04 	bl	800083c <__aeabi_ddiv>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	f7fc fd96 	bl	8000b6c <__aeabi_d2f>
 8004040:	4603      	mov	r3, r0
 8004042:	4a61      	ldr	r2, [pc, #388]	; (80041c8 <BALANCE_Calculate_Speeds+0x250>)
 8004044:	6013      	str	r3, [r2, #0]
	    StepsLeftPrevious = HallLeftStep;
 8004046:	4b62      	ldr	r3, [pc, #392]	; (80041d0 <BALANCE_Calculate_Speeds+0x258>)
 8004048:	edd3 7a00 	vldr	s15, [r3]
 800404c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004050:	ee17 2a90 	vmov	r2, s15
 8004054:	4b5d      	ldr	r3, [pc, #372]	; (80041cc <BALANCE_Calculate_Speeds+0x254>)
 8004056:	601a      	str	r2, [r3, #0]
	    StepsLeftPreviousTime = HAL_GetTick();
 8004058:	f002 f986 	bl	8006368 <HAL_GetTick>
 800405c:	4603      	mov	r3, r0
 800405e:	4a56      	ldr	r2, [pc, #344]	; (80041b8 <BALANCE_Calculate_Speeds+0x240>)
 8004060:	6013      	str	r3, [r2, #0]
	}

	//RIGHT
	TimeS = (HAL_GetTick() - StepsRightPreviousTime) / 1000.0;
 8004062:	f002 f981 	bl	8006368 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	4b5a      	ldr	r3, [pc, #360]	; (80041d4 <BALANCE_Calculate_Speeds+0x25c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	4618      	mov	r0, r3
 8004070:	f7fc fa40 	bl	80004f4 <__aeabi_ui2d>
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	4b50      	ldr	r3, [pc, #320]	; (80041bc <BALANCE_Calculate_Speeds+0x244>)
 800407a:	f7fc fbdf 	bl	800083c <__aeabi_ddiv>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	f7fc fd71 	bl	8000b6c <__aeabi_d2f>
 800408a:	4603      	mov	r3, r0
 800408c:	4a4c      	ldr	r2, [pc, #304]	; (80041c0 <BALANCE_Calculate_Speeds+0x248>)
 800408e:	6013      	str	r3, [r2, #0]
	if (TimeS > SPEED_STEPS_MAX_TIME)
 8004090:	4b4b      	ldr	r3, [pc, #300]	; (80041c0 <BALANCE_Calculate_Speeds+0x248>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7fc fa4f 	bl	8000538 <__aeabi_f2d>
 800409a:	a343      	add	r3, pc, #268	; (adr r3, 80041a8 <BALANCE_Calculate_Speeds+0x230>)
 800409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a0:	f7fc fd32 	bl	8000b08 <__aeabi_dcmpgt>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <BALANCE_Calculate_Speeds+0x140>
	{
		TimeS = SPEED_STEPS_MAX_TIME;
 80040aa:	4b45      	ldr	r3, [pc, #276]	; (80041c0 <BALANCE_Calculate_Speeds+0x248>)
 80040ac:	4a45      	ldr	r2, [pc, #276]	; (80041c4 <BALANCE_Calculate_Speeds+0x24c>)
 80040ae:	601a      	str	r2, [r3, #0]
	    RightSpeed = 0;
 80040b0:	4b49      	ldr	r3, [pc, #292]	; (80041d8 <BALANCE_Calculate_Speeds+0x260>)
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
	}
	if (HallRightStep != StepsRightPrevious)
 80040b8:	4b48      	ldr	r3, [pc, #288]	; (80041dc <BALANCE_Calculate_Speeds+0x264>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c4:	4b46      	ldr	r3, [pc, #280]	; (80041e0 <BALANCE_Calculate_Speeds+0x268>)
 80040c6:	edd3 7a00 	vldr	s15, [r3]
 80040ca:	eeb4 7a67 	vcmp.f32	s14, s15
 80040ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d2:	d039      	beq.n	8004148 <BALANCE_Calculate_Speeds+0x1d0>
	{
		RightSpeed = ((HallRightStep - StepsRightPrevious) * STEPS_TO_METERS) / TimeS;
 80040d4:	4b42      	ldr	r3, [pc, #264]	; (80041e0 <BALANCE_Calculate_Speeds+0x268>)
 80040d6:	ed93 7a00 	vldr	s14, [r3]
 80040da:	4b40      	ldr	r3, [pc, #256]	; (80041dc <BALANCE_Calculate_Speeds+0x264>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040ea:	ee17 0a90 	vmov	r0, s15
 80040ee:	f7fc fa23 	bl	8000538 <__aeabi_f2d>
 80040f2:	a32f      	add	r3, pc, #188	; (adr r3, 80041b0 <BALANCE_Calculate_Speeds+0x238>)
 80040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f8:	f7fc fa76 	bl	80005e8 <__aeabi_dmul>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4614      	mov	r4, r2
 8004102:	461d      	mov	r5, r3
 8004104:	4b2e      	ldr	r3, [pc, #184]	; (80041c0 <BALANCE_Calculate_Speeds+0x248>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc fa15 	bl	8000538 <__aeabi_f2d>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4620      	mov	r0, r4
 8004114:	4629      	mov	r1, r5
 8004116:	f7fc fb91 	bl	800083c <__aeabi_ddiv>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f7fc fd23 	bl	8000b6c <__aeabi_d2f>
 8004126:	4603      	mov	r3, r0
 8004128:	4a2b      	ldr	r2, [pc, #172]	; (80041d8 <BALANCE_Calculate_Speeds+0x260>)
 800412a:	6013      	str	r3, [r2, #0]
	    StepsRightPrevious = HallRightStep;
 800412c:	4b2c      	ldr	r3, [pc, #176]	; (80041e0 <BALANCE_Calculate_Speeds+0x268>)
 800412e:	edd3 7a00 	vldr	s15, [r3]
 8004132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004136:	ee17 2a90 	vmov	r2, s15
 800413a:	4b28      	ldr	r3, [pc, #160]	; (80041dc <BALANCE_Calculate_Speeds+0x264>)
 800413c:	601a      	str	r2, [r3, #0]
	    StepsRightPreviousTime = HAL_GetTick();
 800413e:	f002 f913 	bl	8006368 <HAL_GetTick>
 8004142:	4603      	mov	r3, r0
 8004144:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <BALANCE_Calculate_Speeds+0x25c>)
 8004146:	6013      	str	r3, [r2, #0]
	}

	PositionLinear = ((HallLeftStep + HallRightStep) / 2) * STEPS_TO_METERS;
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <BALANCE_Calculate_Speeds+0x258>)
 800414a:	ed93 7a00 	vldr	s14, [r3]
 800414e:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <BALANCE_Calculate_Speeds+0x268>)
 8004150:	edd3 7a00 	vldr	s15, [r3]
 8004154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004158:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800415c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004160:	ee16 0a90 	vmov	r0, s13
 8004164:	f7fc f9e8 	bl	8000538 <__aeabi_f2d>
 8004168:	a311      	add	r3, pc, #68	; (adr r3, 80041b0 <BALANCE_Calculate_Speeds+0x238>)
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f7fc fa3b 	bl	80005e8 <__aeabi_dmul>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4610      	mov	r0, r2
 8004178:	4619      	mov	r1, r3
 800417a:	f7fc fcf7 	bl	8000b6c <__aeabi_d2f>
 800417e:	4603      	mov	r3, r0
 8004180:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <BALANCE_Calculate_Speeds+0x26c>)
 8004182:	6013      	str	r3, [r2, #0]
	SpeedLinear = (LeftSpeed + RightSpeed) / 2.0;
 8004184:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <BALANCE_Calculate_Speeds+0x250>)
 8004186:	ed93 7a00 	vldr	s14, [r3]
 800418a:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <BALANCE_Calculate_Speeds+0x260>)
 800418c:	edd3 7a00 	vldr	s15, [r3]
 8004190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004194:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <BALANCE_Calculate_Speeds+0x270>)
 800419e:	edc3 7a00 	vstr	s15, [r3]
}
 80041a2:	bf00      	nop
 80041a4:	bdb0      	pop	{r4, r5, r7, pc}
 80041a6:	bf00      	nop
 80041a8:	9999999a 	.word	0x9999999a
 80041ac:	3fc99999 	.word	0x3fc99999
 80041b0:	8121fb7c 	.word	0x8121fb7c
 80041b4:	3f821fb7 	.word	0x3f821fb7
 80041b8:	20000fe8 	.word	0x20000fe8
 80041bc:	408f4000 	.word	0x408f4000
 80041c0:	20000f18 	.word	0x20000f18
 80041c4:	3e4ccccd 	.word	0x3e4ccccd
 80041c8:	20000f1c 	.word	0x20000f1c
 80041cc:	20000f5c 	.word	0x20000f5c
 80041d0:	20000e94 	.word	0x20000e94
 80041d4:	20000fc0 	.word	0x20000fc0
 80041d8:	20000e6c 	.word	0x20000e6c
 80041dc:	20000e60 	.word	0x20000e60
 80041e0:	20000f78 	.word	0x20000f78
 80041e4:	20000ed8 	.word	0x20000ed8
 80041e8:	20000ecc 	.word	0x20000ecc
 80041ec:	00000000 	.word	0x00000000

080041f0 <BALANCE_Position_Linear_Control>:
void BALANCE_Position_Linear_Control()
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
	if (fabsf(Front) > 0.001)
 80041f6:	4b48      	ldr	r3, [pc, #288]	; (8004318 <BALANCE_Position_Linear_Control+0x128>)
 80041f8:	edd3 7a00 	vldr	s15, [r3]
 80041fc:	eef0 7ae7 	vabs.f32	s15, s15
 8004200:	ee17 0a90 	vmov	r0, s15
 8004204:	f7fc f998 	bl	8000538 <__aeabi_f2d>
 8004208:	a33f      	add	r3, pc, #252	; (adr r3, 8004308 <BALANCE_Position_Linear_Control+0x118>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc fc7b 	bl	8000b08 <__aeabi_dcmpgt>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <BALANCE_Position_Linear_Control+0x30>
	{
		PositionLinearControlSwitch = 0;
 8004218:	4b40      	ldr	r3, [pc, #256]	; (800431c <BALANCE_Position_Linear_Control+0x12c>)
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
 800421e:	e013      	b.n	8004248 <BALANCE_Position_Linear_Control+0x58>
	}
	else if (fabsf(SpeedLinear) < 0.02)
 8004220:	4b3f      	ldr	r3, [pc, #252]	; (8004320 <BALANCE_Position_Linear_Control+0x130>)
 8004222:	edd3 7a00 	vldr	s15, [r3]
 8004226:	eef0 7ae7 	vabs.f32	s15, s15
 800422a:	ee17 0a90 	vmov	r0, s15
 800422e:	f7fc f983 	bl	8000538 <__aeabi_f2d>
 8004232:	a337      	add	r3, pc, #220	; (adr r3, 8004310 <BALANCE_Position_Linear_Control+0x120>)
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f7fc fc48 	bl	8000acc <__aeabi_dcmplt>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <BALANCE_Position_Linear_Control+0x58>
	{
		PositionLinearControlSwitch = 1;
 8004242:	4b36      	ldr	r3, [pc, #216]	; (800431c <BALANCE_Position_Linear_Control+0x12c>)
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
	}

	if (BalanceActive)
 8004248:	4b36      	ldr	r3, [pc, #216]	; (8004324 <BALANCE_Position_Linear_Control+0x134>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d04c      	beq.n	80042ea <BALANCE_Position_Linear_Control+0xfa>
	{
		float Error = PositionLinearDemand - PositionLinear;
 8004250:	4b35      	ldr	r3, [pc, #212]	; (8004328 <BALANCE_Position_Linear_Control+0x138>)
 8004252:	ed93 7a00 	vldr	s14, [r3]
 8004256:	4b35      	ldr	r3, [pc, #212]	; (800432c <BALANCE_Position_Linear_Control+0x13c>)
 8004258:	edd3 7a00 	vldr	s15, [r3]
 800425c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004260:	edc7 7a01 	vstr	s15, [r7, #4]
	    if (Error > 0)
 8004264:	edd7 7a01 	vldr	s15, [r7, #4]
 8004268:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800426c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004270:	dd0b      	ble.n	800428a <BALANCE_Position_Linear_Control+0x9a>
	    {
	    	PositionIValue += PositionI;
 8004272:	4b2f      	ldr	r3, [pc, #188]	; (8004330 <BALANCE_Position_Linear_Control+0x140>)
 8004274:	ed93 7a00 	vldr	s14, [r3]
 8004278:	4b2e      	ldr	r3, [pc, #184]	; (8004334 <BALANCE_Position_Linear_Control+0x144>)
 800427a:	edd3 7a00 	vldr	s15, [r3]
 800427e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004282:	4b2b      	ldr	r3, [pc, #172]	; (8004330 <BALANCE_Position_Linear_Control+0x140>)
 8004284:	edc3 7a00 	vstr	s15, [r3]
 8004288:	e00a      	b.n	80042a0 <BALANCE_Position_Linear_Control+0xb0>
	    }
	    else
	    {
	    	PositionIValue -= PositionI;
 800428a:	4b29      	ldr	r3, [pc, #164]	; (8004330 <BALANCE_Position_Linear_Control+0x140>)
 800428c:	ed93 7a00 	vldr	s14, [r3]
 8004290:	4b28      	ldr	r3, [pc, #160]	; (8004334 <BALANCE_Position_Linear_Control+0x144>)
 8004292:	edd3 7a00 	vldr	s15, [r3]
 8004296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800429a:	4b25      	ldr	r3, [pc, #148]	; (8004330 <BALANCE_Position_Linear_Control+0x140>)
 800429c:	edc3 7a00 	vstr	s15, [r3]
	    }

	    PositionPID = Error * PositionP + PositionIValue;
 80042a0:	4b25      	ldr	r3, [pc, #148]	; (8004338 <BALANCE_Position_Linear_Control+0x148>)
 80042a2:	ed93 7a00 	vldr	s14, [r3]
 80042a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80042aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ae:	4b20      	ldr	r3, [pc, #128]	; (8004330 <BALANCE_Position_Linear_Control+0x140>)
 80042b0:	edd3 7a00 	vldr	s15, [r3]
 80042b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b8:	4b20      	ldr	r3, [pc, #128]	; (800433c <BALANCE_Position_Linear_Control+0x14c>)
 80042ba:	edc3 7a00 	vstr	s15, [r3]
	    if (PositionLinearControlSwitch)
 80042be:	4b17      	ldr	r3, [pc, #92]	; (800431c <BALANCE_Position_Linear_Control+0x12c>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <BALANCE_Position_Linear_Control+0xe0>
	    {
	    	SpeedLinearDemand = PositionPID;
 80042c6:	4b1d      	ldr	r3, [pc, #116]	; (800433c <BALANCE_Position_Linear_Control+0x14c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <BALANCE_Position_Linear_Control+0x150>)
 80042cc:	6013      	str	r3, [r2, #0]
	else
	{
		PositionLinearDemand = PositionLinear;
	    PositionIValue = 0;
	}
}
 80042ce:	e014      	b.n	80042fa <BALANCE_Position_Linear_Control+0x10a>
	        SpeedLinearDemand = Front;
 80042d0:	4b11      	ldr	r3, [pc, #68]	; (8004318 <BALANCE_Position_Linear_Control+0x128>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1a      	ldr	r2, [pc, #104]	; (8004340 <BALANCE_Position_Linear_Control+0x150>)
 80042d6:	6013      	str	r3, [r2, #0]
	        PositionLinearDemand = PositionLinear;
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <BALANCE_Position_Linear_Control+0x13c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a12      	ldr	r2, [pc, #72]	; (8004328 <BALANCE_Position_Linear_Control+0x138>)
 80042de:	6013      	str	r3, [r2, #0]
	        PositionIValue = 0;
 80042e0:	4b13      	ldr	r3, [pc, #76]	; (8004330 <BALANCE_Position_Linear_Control+0x140>)
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
}
 80042e8:	e007      	b.n	80042fa <BALANCE_Position_Linear_Control+0x10a>
		PositionLinearDemand = PositionLinear;
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <BALANCE_Position_Linear_Control+0x13c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <BALANCE_Position_Linear_Control+0x138>)
 80042f0:	6013      	str	r3, [r2, #0]
	    PositionIValue = 0;
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <BALANCE_Position_Linear_Control+0x140>)
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
}
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	f3af 8000 	nop.w
 8004308:	d2f1a9fc 	.word	0xd2f1a9fc
 800430c:	3f50624d 	.word	0x3f50624d
 8004310:	47ae147b 	.word	0x47ae147b
 8004314:	3f947ae1 	.word	0x3f947ae1
 8004318:	20000de0 	.word	0x20000de0
 800431c:	20000f3d 	.word	0x20000f3d
 8004320:	20000ecc 	.word	0x20000ecc
 8004324:	20000f3c 	.word	0x20000f3c
 8004328:	20000ec8 	.word	0x20000ec8
 800432c:	20000ed8 	.word	0x20000ed8
 8004330:	2000102c 	.word	0x2000102c
 8004334:	20000da4 	.word	0x20000da4
 8004338:	20000000 	.word	0x20000000
 800433c:	20001018 	.word	0x20001018
 8004340:	20000f7c 	.word	0x20000f7c
 8004344:	00000000 	.word	0x00000000

08004348 <BALANCE_Speed_LinearControl>:
void BALANCE_Speed_LinearControl()
{
 8004348:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
	float deltaTime = (HAL_GetTick() - linearTime) / 1000000.0;
 8004350:	f002 f80a 	bl	8006368 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	4bc0      	ldr	r3, [pc, #768]	; (8004658 <BALANCE_Speed_LinearControl+0x310>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	4618      	mov	r0, r3
 800435e:	f7fc f8c9 	bl	80004f4 <__aeabi_ui2d>
 8004362:	a3bb      	add	r3, pc, #748	; (adr r3, 8004650 <BALANCE_Speed_LinearControl+0x308>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f7fc fa68 	bl	800083c <__aeabi_ddiv>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	f7fc fbfa 	bl	8000b6c <__aeabi_d2f>
 8004378:	4603      	mov	r3, r0
 800437a:	617b      	str	r3, [r7, #20]
	linearTime = HAL_GetTick();
 800437c:	f001 fff4 	bl	8006368 <HAL_GetTick>
 8004380:	4603      	mov	r3, r0
 8004382:	4ab5      	ldr	r2, [pc, #724]	; (8004658 <BALANCE_Speed_LinearControl+0x310>)
 8004384:	6013      	str	r3, [r2, #0]

	if (deltaTime < 0)
 8004386:	edd7 7a05 	vldr	s15, [r7, #20]
 800438a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004392:	d502      	bpl.n	800439a <BALANCE_Speed_LinearControl+0x52>
	{
		deltaTime = linearDeltaTimePrev;
 8004394:	4bb1      	ldr	r3, [pc, #708]	; (800465c <BALANCE_Speed_LinearControl+0x314>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	617b      	str	r3, [r7, #20]
	}
	linearDeltaTimePrev = deltaTime;
 800439a:	4ab0      	ldr	r2, [pc, #704]	; (800465c <BALANCE_Speed_LinearControl+0x314>)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	6013      	str	r3, [r2, #0]

	SpeedLinearDemand = SpeedLinearDemand > PLATFORM_Y_MAX ? PLATFORM_Y_MAX : SpeedLinearDemand;
 80043a0:	4baf      	ldr	r3, [pc, #700]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 80043a2:	edd3 7a00 	vldr	s15, [r3]
 80043a6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80043aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b2:	dd01      	ble.n	80043b8 <BALANCE_Speed_LinearControl+0x70>
 80043b4:	4bab      	ldr	r3, [pc, #684]	; (8004664 <BALANCE_Speed_LinearControl+0x31c>)
 80043b6:	e001      	b.n	80043bc <BALANCE_Speed_LinearControl+0x74>
 80043b8:	4ba9      	ldr	r3, [pc, #676]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4aa8      	ldr	r2, [pc, #672]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 80043be:	6013      	str	r3, [r2, #0]
	SpeedLinearDemand = SpeedLinearDemand < -PLATFORM_Y_MAX ? -PLATFORM_Y_MAX : SpeedLinearDemand;
 80043c0:	4ba7      	ldr	r3, [pc, #668]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 80043c2:	edd3 7a00 	vldr	s15, [r3]
 80043c6:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80043ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d2:	d501      	bpl.n	80043d8 <BALANCE_Speed_LinearControl+0x90>
 80043d4:	4ba4      	ldr	r3, [pc, #656]	; (8004668 <BALANCE_Speed_LinearControl+0x320>)
 80043d6:	e001      	b.n	80043dc <BALANCE_Speed_LinearControl+0x94>
 80043d8:	4ba1      	ldr	r3, [pc, #644]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4aa0      	ldr	r2, [pc, #640]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 80043de:	6013      	str	r3, [r2, #0]

	if (BalanceActive)
 80043e0:	4ba2      	ldr	r3, [pc, #648]	; (800466c <BALANCE_Speed_LinearControl+0x324>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8124 	beq.w	8004632 <BALANCE_Speed_LinearControl+0x2ea>
	{
	    float linearError = SpeedLinearDemand - SpeedLinear;
 80043ea:	4b9d      	ldr	r3, [pc, #628]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 80043ec:	ed93 7a00 	vldr	s14, [r3]
 80043f0:	4b9f      	ldr	r3, [pc, #636]	; (8004670 <BALANCE_Speed_LinearControl+0x328>)
 80043f2:	edd3 7a00 	vldr	s15, [r3]
 80043f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043fa:	edc7 7a04 	vstr	s15, [r7, #16]

	    if ((SpeedLinearDemand * linearIntegral > 0) && (abs(SpeedLinear) > abs(SpeedLinearDemand * 1.5)))
 80043fe:	4b98      	ldr	r3, [pc, #608]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 8004400:	ed93 7a00 	vldr	s14, [r3]
 8004404:	4b9b      	ldr	r3, [pc, #620]	; (8004674 <BALANCE_Speed_LinearControl+0x32c>)
 8004406:	edd3 7a00 	vldr	s15, [r3]
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004416:	dd26      	ble.n	8004466 <BALANCE_Speed_LinearControl+0x11e>
 8004418:	4b95      	ldr	r3, [pc, #596]	; (8004670 <BALANCE_Speed_LinearControl+0x328>)
 800441a:	edd3 7a00 	vldr	s15, [r3]
 800441e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004422:	ee17 3a90 	vmov	r3, s15
 8004426:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800442a:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800442e:	4b8c      	ldr	r3, [pc, #560]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc f880 	bl	8000538 <__aeabi_f2d>
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	4b8e      	ldr	r3, [pc, #568]	; (8004678 <BALANCE_Speed_LinearControl+0x330>)
 800443e:	f7fc f8d3 	bl	80005e8 <__aeabi_dmul>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	f7fc fb67 	bl	8000b1c <__aeabi_d2iz>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	bfb8      	it	lt
 8004454:	425b      	neglt	r3, r3
 8004456:	429c      	cmp	r4, r3
 8004458:	dd05      	ble.n	8004466 <BALANCE_Speed_LinearControl+0x11e>
	    {
	        linearIntegralerrorCoun++;
 800445a:	4b88      	ldr	r3, [pc, #544]	; (800467c <BALANCE_Speed_LinearControl+0x334>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	4a86      	ldr	r2, [pc, #536]	; (800467c <BALANCE_Speed_LinearControl+0x334>)
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	e002      	b.n	800446c <BALANCE_Speed_LinearControl+0x124>
	    }
	    else
	    {
	        linearIntegralerrorCoun = 0;
 8004466:	4b85      	ldr	r3, [pc, #532]	; (800467c <BALANCE_Speed_LinearControl+0x334>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
	    }
	    float diff = (linearError - linearLastError) / deltaTime;
 800446c:	4b84      	ldr	r3, [pc, #528]	; (8004680 <BALANCE_Speed_LinearControl+0x338>)
 800446e:	edd3 7a00 	vldr	s15, [r3]
 8004472:	ed97 7a04 	vldr	s14, [r7, #16]
 8004476:	ee77 6a67 	vsub.f32	s13, s14, s15
 800447a:	ed97 7a05 	vldr	s14, [r7, #20]
 800447e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004482:	edc7 7a03 	vstr	s15, [r7, #12]
	    linearLastError = linearError;
 8004486:	4a7e      	ldr	r2, [pc, #504]	; (8004680 <BALANCE_Speed_LinearControl+0x338>)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6013      	str	r3, [r2, #0]
	    float RC = 1.0f / linearFcutDiff;
 800448c:	4b7d      	ldr	r3, [pc, #500]	; (8004684 <BALANCE_Speed_LinearControl+0x33c>)
 800448e:	ed93 7a00 	vldr	s14, [r3]
 8004492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800449a:	edc7 7a02 	vstr	s15, [r7, #8]
	    float kExp = deltaTime / (RC + deltaTime);
 800449e:	ed97 7a02 	vldr	s14, [r7, #8]
 80044a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80044a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044aa:	edd7 6a05 	vldr	s13, [r7, #20]
 80044ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b2:	edc7 7a01 	vstr	s15, [r7, #4]
	    linearSmoothDiff = (1.0f - kExp) * linearSmoothDiff + kExp * diff;
 80044b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80044be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044c2:	4b71      	ldr	r3, [pc, #452]	; (8004688 <BALANCE_Speed_LinearControl+0x340>)
 80044c4:	edd3 7a00 	vldr	s15, [r3]
 80044c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044cc:	edd7 6a01 	vldr	s13, [r7, #4]
 80044d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80044d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044dc:	4b6a      	ldr	r3, [pc, #424]	; (8004688 <BALANCE_Speed_LinearControl+0x340>)
 80044de:	edc3 7a00 	vstr	s15, [r3]

	    linearIntegral += linearError * deltaTime;
 80044e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80044e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80044ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044ee:	4b61      	ldr	r3, [pc, #388]	; (8004674 <BALANCE_Speed_LinearControl+0x32c>)
 80044f0:	edd3 7a00 	vldr	s15, [r3]
 80044f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044f8:	4b5e      	ldr	r3, [pc, #376]	; (8004674 <BALANCE_Speed_LinearControl+0x32c>)
 80044fa:	edc3 7a00 	vstr	s15, [r3]
	    if ((SpeedLinearDemand < minLinearValue) && (SpeedLinearDemand > -minLinearValue))
 80044fe:	4b58      	ldr	r3, [pc, #352]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 8004500:	ed93 7a00 	vldr	s14, [r3]
 8004504:	4b61      	ldr	r3, [pc, #388]	; (800468c <BALANCE_Speed_LinearControl+0x344>)
 8004506:	edd3 7a00 	vldr	s15, [r3]
 800450a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004512:	d510      	bpl.n	8004536 <BALANCE_Speed_LinearControl+0x1ee>
 8004514:	4b5d      	ldr	r3, [pc, #372]	; (800468c <BALANCE_Speed_LinearControl+0x344>)
 8004516:	edd3 7a00 	vldr	s15, [r3]
 800451a:	eeb1 7a67 	vneg.f32	s14, s15
 800451e:	4b50      	ldr	r3, [pc, #320]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 8004520:	edd3 7a00 	vldr	s15, [r3]
 8004524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	d503      	bpl.n	8004536 <BALANCE_Speed_LinearControl+0x1ee>
	    {
	        linearIntegral = 0;
 800452e:	4b51      	ldr	r3, [pc, #324]	; (8004674 <BALANCE_Speed_LinearControl+0x32c>)
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
	    }

	    if (linearIntegralerrorCoun > 3)
 8004536:	4b51      	ldr	r3, [pc, #324]	; (800467c <BALANCE_Speed_LinearControl+0x334>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b03      	cmp	r3, #3
 800453c:	dd03      	ble.n	8004546 <BALANCE_Speed_LinearControl+0x1fe>
	    {
	        linearIntegral = 0;
 800453e:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <BALANCE_Speed_LinearControl+0x32c>)
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
	    }
	    SpeedPID = linearError * SpeedPNew + linearIntegral * SpeedINew + linearSmoothDiff * SpeedDNew;
 8004546:	4b52      	ldr	r3, [pc, #328]	; (8004690 <BALANCE_Speed_LinearControl+0x348>)
 8004548:	ed93 7a00 	vldr	s14, [r3]
 800454c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004554:	4b47      	ldr	r3, [pc, #284]	; (8004674 <BALANCE_Speed_LinearControl+0x32c>)
 8004556:	edd3 6a00 	vldr	s13, [r3]
 800455a:	4b4e      	ldr	r3, [pc, #312]	; (8004694 <BALANCE_Speed_LinearControl+0x34c>)
 800455c:	edd3 7a00 	vldr	s15, [r3]
 8004560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004564:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004568:	4b47      	ldr	r3, [pc, #284]	; (8004688 <BALANCE_Speed_LinearControl+0x340>)
 800456a:	edd3 6a00 	vldr	s13, [r3]
 800456e:	4b4a      	ldr	r3, [pc, #296]	; (8004698 <BALANCE_Speed_LinearControl+0x350>)
 8004570:	edd3 7a00 	vldr	s15, [r3]
 8004574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800457c:	4b47      	ldr	r3, [pc, #284]	; (800469c <BALANCE_Speed_LinearControl+0x354>)
 800457e:	edc3 7a00 	vstr	s15, [r3]

	    PlatformYDemand += ((SpeedPID / 1.0) - PlatformYDemand) * SpeedFilter;
 8004582:	4b47      	ldr	r3, [pc, #284]	; (80046a0 <BALANCE_Speed_LinearControl+0x358>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fb ffd6 	bl	8000538 <__aeabi_f2d>
 800458c:	4604      	mov	r4, r0
 800458e:	460d      	mov	r5, r1
 8004590:	4b42      	ldr	r3, [pc, #264]	; (800469c <BALANCE_Speed_LinearControl+0x354>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7fb ffcf 	bl	8000538 <__aeabi_f2d>
 800459a:	4680      	mov	r8, r0
 800459c:	4689      	mov	r9, r1
 800459e:	4b40      	ldr	r3, [pc, #256]	; (80046a0 <BALANCE_Speed_LinearControl+0x358>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fb ffc8 	bl	8000538 <__aeabi_f2d>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4640      	mov	r0, r8
 80045ae:	4649      	mov	r1, r9
 80045b0:	f7fb fe62 	bl	8000278 <__aeabi_dsub>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4690      	mov	r8, r2
 80045ba:	4699      	mov	r9, r3
 80045bc:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <BALANCE_Speed_LinearControl+0x35c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fb ffb9 	bl	8000538 <__aeabi_f2d>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4640      	mov	r0, r8
 80045cc:	4649      	mov	r1, r9
 80045ce:	f7fc f80b 	bl	80005e8 <__aeabi_dmul>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fb fe4f 	bl	800027c <__adddf3>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	f7fc fac1 	bl	8000b6c <__aeabi_d2f>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4a2c      	ldr	r2, [pc, #176]	; (80046a0 <BALANCE_Speed_LinearControl+0x358>)
 80045ee:	6013      	str	r3, [r2, #0]

	    PlatformYDemand = (PlatformYDemand > PLATFORM_Y_MAX) ? PLATFORM_Y_MAX : PlatformYDemand;
 80045f0:	4b2b      	ldr	r3, [pc, #172]	; (80046a0 <BALANCE_Speed_LinearControl+0x358>)
 80045f2:	edd3 7a00 	vldr	s15, [r3]
 80045f6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80045fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004602:	dd01      	ble.n	8004608 <BALANCE_Speed_LinearControl+0x2c0>
 8004604:	4b17      	ldr	r3, [pc, #92]	; (8004664 <BALANCE_Speed_LinearControl+0x31c>)
 8004606:	e001      	b.n	800460c <BALANCE_Speed_LinearControl+0x2c4>
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <BALANCE_Speed_LinearControl+0x358>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a24      	ldr	r2, [pc, #144]	; (80046a0 <BALANCE_Speed_LinearControl+0x358>)
 800460e:	6013      	str	r3, [r2, #0]
	    PlatformYDemand = (PlatformYDemand < -PLATFORM_Y_MAX) ? -PLATFORM_Y_MAX : PlatformYDemand;
 8004610:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <BALANCE_Speed_LinearControl+0x358>)
 8004612:	edd3 7a00 	vldr	s15, [r3]
 8004616:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800461a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004622:	d501      	bpl.n	8004628 <BALANCE_Speed_LinearControl+0x2e0>
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <BALANCE_Speed_LinearControl+0x320>)
 8004626:	e001      	b.n	800462c <BALANCE_Speed_LinearControl+0x2e4>
 8004628:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <BALANCE_Speed_LinearControl+0x358>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1c      	ldr	r2, [pc, #112]	; (80046a0 <BALANCE_Speed_LinearControl+0x358>)
 800462e:	6013      	str	r3, [r2, #0]
	else
	{
	    SpeedLinearDemand = 0;
	    linearIntegral = 0;
	}
}
 8004630:	e007      	b.n	8004642 <BALANCE_Speed_LinearControl+0x2fa>
	    SpeedLinearDemand = 0;
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <BALANCE_Speed_LinearControl+0x318>)
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
	    linearIntegral = 0;
 800463a:	4b0e      	ldr	r3, [pc, #56]	; (8004674 <BALANCE_Speed_LinearControl+0x32c>)
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
}
 8004642:	bf00      	nop
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800464c:	f3af 8000 	nop.w
 8004650:	00000000 	.word	0x00000000
 8004654:	412e8480 	.word	0x412e8480
 8004658:	20000dc0 	.word	0x20000dc0
 800465c:	20000dc4 	.word	0x20000dc4
 8004660:	20000f7c 	.word	0x20000f7c
 8004664:	40a00000 	.word	0x40a00000
 8004668:	c0a00000 	.word	0xc0a00000
 800466c:	20000f3c 	.word	0x20000f3c
 8004670:	20000ecc 	.word	0x20000ecc
 8004674:	20000db4 	.word	0x20000db4
 8004678:	3ff80000 	.word	0x3ff80000
 800467c:	20000dc8 	.word	0x20000dc8
 8004680:	20000db8 	.word	0x20000db8
 8004684:	20000028 	.word	0x20000028
 8004688:	20000dbc 	.word	0x20000dbc
 800468c:	2000002c 	.word	0x2000002c
 8004690:	2000000c 	.word	0x2000000c
 8004694:	20000010 	.word	0x20000010
 8004698:	20000014 	.word	0x20000014
 800469c:	20000ea8 	.word	0x20000ea8
 80046a0:	20000da0 	.word	0x20000da0
 80046a4:	20000024 	.word	0x20000024

080046a8 <BALANCE_Position_Angular_Control>:
void BALANCE_Position_Angular_Control()
{
 80046a8:	b5b0      	push	{r4, r5, r7, lr}
 80046aa:	af00      	add	r7, sp, #0
	GyroZSpeed = eulerAngles.angle.yaw - GyroZPrevious;
 80046ac:	4b44      	ldr	r3, [pc, #272]	; (80047c0 <BALANCE_Position_Angular_Control+0x118>)
 80046ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80046b2:	4b44      	ldr	r3, [pc, #272]	; (80047c4 <BALANCE_Position_Angular_Control+0x11c>)
 80046b4:	edd3 7a00 	vldr	s15, [r3]
 80046b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046bc:	4b42      	ldr	r3, [pc, #264]	; (80047c8 <BALANCE_Position_Angular_Control+0x120>)
 80046be:	edc3 7a00 	vstr	s15, [r3]
	GyroZPrevious = eulerAngles.angle.yaw;
 80046c2:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <BALANCE_Position_Angular_Control+0x118>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	4a3f      	ldr	r2, [pc, #252]	; (80047c4 <BALANCE_Position_Angular_Control+0x11c>)
 80046c8:	6013      	str	r3, [r2, #0]
	if (BalanceActive)
 80046ca:	4b40      	ldr	r3, [pc, #256]	; (80047cc <BALANCE_Position_Angular_Control+0x124>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d03e      	beq.n	8004750 <BALANCE_Position_Angular_Control+0xa8>
	{
	    PositionAngularDemand -= Turn / 100.0;
 80046d2:	4b3f      	ldr	r3, [pc, #252]	; (80047d0 <BALANCE_Position_Angular_Control+0x128>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fb ff2e 	bl	8000538 <__aeabi_f2d>
 80046dc:	4604      	mov	r4, r0
 80046de:	460d      	mov	r5, r1
 80046e0:	4b3c      	ldr	r3, [pc, #240]	; (80047d4 <BALANCE_Position_Angular_Control+0x12c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fb ff27 	bl	8000538 <__aeabi_f2d>
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	4b3a      	ldr	r3, [pc, #232]	; (80047d8 <BALANCE_Position_Angular_Control+0x130>)
 80046f0:	f7fc f8a4 	bl	800083c <__aeabi_ddiv>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4620      	mov	r0, r4
 80046fa:	4629      	mov	r1, r5
 80046fc:	f7fb fdbc 	bl	8000278 <__aeabi_dsub>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	f7fc fa30 	bl	8000b6c <__aeabi_d2f>
 800470c:	4603      	mov	r3, r0
 800470e:	4a30      	ldr	r2, [pc, #192]	; (80047d0 <BALANCE_Position_Angular_Control+0x128>)
 8004710:	6013      	str	r3, [r2, #0]

	    RotationPID = (eulerAngles.angle.yaw - PositionAngularDemand) * RotationP + GyroZSpeed * RotationD;
 8004712:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <BALANCE_Position_Angular_Control+0x118>)
 8004714:	ed93 7a02 	vldr	s14, [r3, #8]
 8004718:	4b2d      	ldr	r3, [pc, #180]	; (80047d0 <BALANCE_Position_Angular_Control+0x128>)
 800471a:	edd3 7a00 	vldr	s15, [r3]
 800471e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004722:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <BALANCE_Position_Angular_Control+0x134>)
 8004724:	edd3 7a00 	vldr	s15, [r3]
 8004728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800472c:	4b26      	ldr	r3, [pc, #152]	; (80047c8 <BALANCE_Position_Angular_Control+0x120>)
 800472e:	edd3 6a00 	vldr	s13, [r3]
 8004732:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <BALANCE_Position_Angular_Control+0x138>)
 8004734:	edd3 7a00 	vldr	s15, [r3]
 8004738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800473c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004740:	4b28      	ldr	r3, [pc, #160]	; (80047e4 <BALANCE_Position_Angular_Control+0x13c>)
 8004742:	edc3 7a00 	vstr	s15, [r3]
	    DutyTurn = RotationPID;
 8004746:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <BALANCE_Position_Angular_Control+0x13c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a27      	ldr	r2, [pc, #156]	; (80047e8 <BALANCE_Position_Angular_Control+0x140>)
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e007      	b.n	8004760 <BALANCE_Position_Angular_Control+0xb8>
	}
	else
	{
	    PositionAngularDemand = eulerAngles.angle.yaw;
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <BALANCE_Position_Angular_Control+0x118>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a1e      	ldr	r2, [pc, #120]	; (80047d0 <BALANCE_Position_Angular_Control+0x128>)
 8004756:	6013      	str	r3, [r2, #0]
	    DutyTurn = 0;
 8004758:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <BALANCE_Position_Angular_Control+0x140>)
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
	}
	DutyTurn = (DutyTurn > DUTY_MAX_ANGULAR) ? DUTY_MAX_ANGULAR : DutyTurn;
 8004760:	4b21      	ldr	r3, [pc, #132]	; (80047e8 <BALANCE_Position_Angular_Control+0x140>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f7fb fee7 	bl	8000538 <__aeabi_f2d>
 800476a:	a311      	add	r3, pc, #68	; (adr r3, 80047b0 <BALANCE_Position_Angular_Control+0x108>)
 800476c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004770:	f7fc f9ca 	bl	8000b08 <__aeabi_dcmpgt>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <BALANCE_Position_Angular_Control+0xd6>
 800477a:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <BALANCE_Position_Angular_Control+0x144>)
 800477c:	e001      	b.n	8004782 <BALANCE_Position_Angular_Control+0xda>
 800477e:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <BALANCE_Position_Angular_Control+0x140>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a19      	ldr	r2, [pc, #100]	; (80047e8 <BALANCE_Position_Angular_Control+0x140>)
 8004784:	6013      	str	r3, [r2, #0]
	DutyTurn = (DutyTurn < -DUTY_MAX_ANGULAR) ? -DUTY_MAX_ANGULAR : DutyTurn;
 8004786:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <BALANCE_Position_Angular_Control+0x140>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fb fed4 	bl	8000538 <__aeabi_f2d>
 8004790:	a309      	add	r3, pc, #36	; (adr r3, 80047b8 <BALANCE_Position_Angular_Control+0x110>)
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	f7fc f999 	bl	8000acc <__aeabi_dcmplt>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <BALANCE_Position_Angular_Control+0xfc>
 80047a0:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <BALANCE_Position_Angular_Control+0x148>)
 80047a2:	e001      	b.n	80047a8 <BALANCE_Position_Angular_Control+0x100>
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <BALANCE_Position_Angular_Control+0x140>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a0f      	ldr	r2, [pc, #60]	; (80047e8 <BALANCE_Position_Angular_Control+0x140>)
 80047aa:	6013      	str	r3, [r2, #0]
}
 80047ac:	bf00      	nop
 80047ae:	bdb0      	pop	{r4, r5, r7, pc}
 80047b0:	9999999a 	.word	0x9999999a
 80047b4:	3fb99999 	.word	0x3fb99999
 80047b8:	9999999a 	.word	0x9999999a
 80047bc:	bfb99999 	.word	0xbfb99999
 80047c0:	20000e84 	.word	0x20000e84
 80047c4:	20000ed4 	.word	0x20000ed4
 80047c8:	20001014 	.word	0x20001014
 80047cc:	20000f3c 	.word	0x20000f3c
 80047d0:	20001028 	.word	0x20001028
 80047d4:	20000de4 	.word	0x20000de4
 80047d8:	40590000 	.word	0x40590000
 80047dc:	20000004 	.word	0x20000004
 80047e0:	20000008 	.word	0x20000008
 80047e4:	20000e74 	.word	0x20000e74
 80047e8:	20000ec0 	.word	0x20000ec0
 80047ec:	3dcccccd 	.word	0x3dcccccd
 80047f0:	bdcccccd 	.word	0xbdcccccd
 80047f4:	00000000 	.word	0x00000000

080047f8 <BALANCE_LOOP>:
void BALANCE_LOOP()
{
 80047f8:	b5b0      	push	{r4, r5, r7, lr}
 80047fa:	af00      	add	r7, sp, #0
	GyroY = (eulerAngles.angle.pitch * -1) + PlatformYDemand + AngleCorrection - ParkingAngle;
 80047fc:	4b4e      	ldr	r3, [pc, #312]	; (8004938 <BALANCE_LOOP+0x140>)
 80047fe:	ed93 7a00 	vldr	s14, [r3]
 8004802:	4b4e      	ldr	r3, [pc, #312]	; (800493c <BALANCE_LOOP+0x144>)
 8004804:	edd3 7a01 	vldr	s15, [r3, #4]
 8004808:	ee37 7a67 	vsub.f32	s14, s14, s15
 800480c:	4b4c      	ldr	r3, [pc, #304]	; (8004940 <BALANCE_LOOP+0x148>)
 800480e:	edd3 7a00 	vldr	s15, [r3]
 8004812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004816:	4b4b      	ldr	r3, [pc, #300]	; (8004944 <BALANCE_LOOP+0x14c>)
 8004818:	edd3 7a00 	vldr	s15, [r3]
 800481c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004820:	4b49      	ldr	r3, [pc, #292]	; (8004948 <BALANCE_LOOP+0x150>)
 8004822:	edc3 7a00 	vstr	s15, [r3]

	GyroYSpeed = GyroY - GyroYPrevious;
 8004826:	4b48      	ldr	r3, [pc, #288]	; (8004948 <BALANCE_LOOP+0x150>)
 8004828:	ed93 7a00 	vldr	s14, [r3]
 800482c:	4b47      	ldr	r3, [pc, #284]	; (800494c <BALANCE_LOOP+0x154>)
 800482e:	edd3 7a00 	vldr	s15, [r3]
 8004832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004836:	4b46      	ldr	r3, [pc, #280]	; (8004950 <BALANCE_LOOP+0x158>)
 8004838:	edc3 7a00 	vstr	s15, [r3]
	GyroYPrevious = GyroY;
 800483c:	4b42      	ldr	r3, [pc, #264]	; (8004948 <BALANCE_LOOP+0x150>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a42      	ldr	r2, [pc, #264]	; (800494c <BALANCE_LOOP+0x154>)
 8004842:	6013      	str	r3, [r2, #0]

	if (BalanceActive)
 8004844:	4b43      	ldr	r3, [pc, #268]	; (8004954 <BALANCE_LOOP+0x15c>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d05d      	beq.n	8004908 <BALANCE_LOOP+0x110>
	{
	    BalancePID = -GyroY * (float)BalanceP - GyroYSpeed * (float)BalanceD;
 800484c:	4b3e      	ldr	r3, [pc, #248]	; (8004948 <BALANCE_LOOP+0x150>)
 800484e:	edd3 7a00 	vldr	s15, [r3]
 8004852:	eeb1 7a67 	vneg.f32	s14, s15
 8004856:	4b40      	ldr	r3, [pc, #256]	; (8004958 <BALANCE_LOOP+0x160>)
 8004858:	edd3 7a00 	vldr	s15, [r3]
 800485c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004860:	4b3b      	ldr	r3, [pc, #236]	; (8004950 <BALANCE_LOOP+0x158>)
 8004862:	edd3 6a00 	vldr	s13, [r3]
 8004866:	4b3d      	ldr	r3, [pc, #244]	; (800495c <BALANCE_LOOP+0x164>)
 8004868:	edd3 7a00 	vldr	s15, [r3]
 800486c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004874:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <BALANCE_LOOP+0x168>)
 8004876:	edc3 7a00 	vstr	s15, [r3]

	    DutyFront += BalancePID * 0.000001;
 800487a:	4b3a      	ldr	r3, [pc, #232]	; (8004964 <BALANCE_LOOP+0x16c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fb fe5a 	bl	8000538 <__aeabi_f2d>
 8004884:	4604      	mov	r4, r0
 8004886:	460d      	mov	r5, r1
 8004888:	4b35      	ldr	r3, [pc, #212]	; (8004960 <BALANCE_LOOP+0x168>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fb fe53 	bl	8000538 <__aeabi_f2d>
 8004892:	a323      	add	r3, pc, #140	; (adr r3, 8004920 <BALANCE_LOOP+0x128>)
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	f7fb fea6 	bl	80005e8 <__aeabi_dmul>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4620      	mov	r0, r4
 80048a2:	4629      	mov	r1, r5
 80048a4:	f7fb fcea 	bl	800027c <__adddf3>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7fc f95c 	bl	8000b6c <__aeabi_d2f>
 80048b4:	4603      	mov	r3, r0
 80048b6:	4a2b      	ldr	r2, [pc, #172]	; (8004964 <BALANCE_LOOP+0x16c>)
 80048b8:	6013      	str	r3, [r2, #0]

	    DutyFront = (DutyFront > DUTY_MAX_LINEAR) ? DUTY_MAX_LINEAR : DutyFront;
 80048ba:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <BALANCE_LOOP+0x16c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fb fe3a 	bl	8000538 <__aeabi_f2d>
 80048c4:	a318      	add	r3, pc, #96	; (adr r3, 8004928 <BALANCE_LOOP+0x130>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f7fc f91d 	bl	8000b08 <__aeabi_dcmpgt>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <BALANCE_LOOP+0xe0>
 80048d4:	4b24      	ldr	r3, [pc, #144]	; (8004968 <BALANCE_LOOP+0x170>)
 80048d6:	e001      	b.n	80048dc <BALANCE_LOOP+0xe4>
 80048d8:	4b22      	ldr	r3, [pc, #136]	; (8004964 <BALANCE_LOOP+0x16c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a21      	ldr	r2, [pc, #132]	; (8004964 <BALANCE_LOOP+0x16c>)
 80048de:	6013      	str	r3, [r2, #0]
	    DutyFront = (DutyFront < -DUTY_MAX_LINEAR) ? -DUTY_MAX_LINEAR : DutyFront;
 80048e0:	4b20      	ldr	r3, [pc, #128]	; (8004964 <BALANCE_LOOP+0x16c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fb fe27 	bl	8000538 <__aeabi_f2d>
 80048ea:	a311      	add	r3, pc, #68	; (adr r3, 8004930 <BALANCE_LOOP+0x138>)
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f7fc f8ec 	bl	8000acc <__aeabi_dcmplt>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <BALANCE_LOOP+0x106>
 80048fa:	4b1c      	ldr	r3, [pc, #112]	; (800496c <BALANCE_LOOP+0x174>)
 80048fc:	e001      	b.n	8004902 <BALANCE_LOOP+0x10a>
 80048fe:	4b19      	ldr	r3, [pc, #100]	; (8004964 <BALANCE_LOOP+0x16c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a18      	ldr	r2, [pc, #96]	; (8004964 <BALANCE_LOOP+0x16c>)
 8004904:	6013      	str	r3, [r2, #0]
	else
	{
	    PlatformYDemand = 0;
	    DutyFront = 0;
	}
}
 8004906:	e007      	b.n	8004918 <BALANCE_LOOP+0x120>
	    PlatformYDemand = 0;
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <BALANCE_LOOP+0x140>)
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
	    DutyFront = 0;
 8004910:	4b14      	ldr	r3, [pc, #80]	; (8004964 <BALANCE_LOOP+0x16c>)
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
}
 8004918:	bf00      	nop
 800491a:	bdb0      	pop	{r4, r5, r7, pc}
 800491c:	f3af 8000 	nop.w
 8004920:	a0b5ed8d 	.word	0xa0b5ed8d
 8004924:	3eb0c6f7 	.word	0x3eb0c6f7
 8004928:	33333333 	.word	0x33333333
 800492c:	3fc33333 	.word	0x3fc33333
 8004930:	33333333 	.word	0x33333333
 8004934:	bfc33333 	.word	0xbfc33333
 8004938:	20000da0 	.word	0x20000da0
 800493c:	20000e84 	.word	0x20000e84
 8004940:	20000da8 	.word	0x20000da8
 8004944:	20000edc 	.word	0x20000edc
 8004948:	20000f74 	.word	0x20000f74
 800494c:	20000e78 	.word	0x20000e78
 8004950:	20000f4c 	.word	0x20000f4c
 8004954:	20000f3c 	.word	0x20000f3c
 8004958:	20000018 	.word	0x20000018
 800495c:	2000001c 	.word	0x2000001c
 8004960:	20000e68 	.word	0x20000e68
 8004964:	20000e64 	.word	0x20000e64
 8004968:	3e19999a 	.word	0x3e19999a
 800496c:	be19999a 	.word	0xbe19999a

08004970 <BALANCE_Result_Loop>:
void BALANCE_Result_Loop()
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
	ResultLeft += ((DutyFront + DutyTurn) - ResultLeft) * BalanceFilter;
 8004974:	4b55      	ldr	r3, [pc, #340]	; (8004acc <BALANCE_Result_Loop+0x15c>)
 8004976:	ed93 7a00 	vldr	s14, [r3]
 800497a:	4b55      	ldr	r3, [pc, #340]	; (8004ad0 <BALANCE_Result_Loop+0x160>)
 800497c:	edd3 7a00 	vldr	s15, [r3]
 8004980:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004984:	4b53      	ldr	r3, [pc, #332]	; (8004ad4 <BALANCE_Result_Loop+0x164>)
 8004986:	edd3 7a00 	vldr	s15, [r3]
 800498a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800498e:	4b52      	ldr	r3, [pc, #328]	; (8004ad8 <BALANCE_Result_Loop+0x168>)
 8004990:	edd3 7a00 	vldr	s15, [r3]
 8004994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004998:	4b4e      	ldr	r3, [pc, #312]	; (8004ad4 <BALANCE_Result_Loop+0x164>)
 800499a:	edd3 7a00 	vldr	s15, [r3]
 800499e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049a2:	4b4c      	ldr	r3, [pc, #304]	; (8004ad4 <BALANCE_Result_Loop+0x164>)
 80049a4:	edc3 7a00 	vstr	s15, [r3]
	ResultRight += ((DutyFront - DutyTurn) - ResultRight) * BalanceFilter;
 80049a8:	4b48      	ldr	r3, [pc, #288]	; (8004acc <BALANCE_Result_Loop+0x15c>)
 80049aa:	ed93 7a00 	vldr	s14, [r3]
 80049ae:	4b48      	ldr	r3, [pc, #288]	; (8004ad0 <BALANCE_Result_Loop+0x160>)
 80049b0:	edd3 7a00 	vldr	s15, [r3]
 80049b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049b8:	4b48      	ldr	r3, [pc, #288]	; (8004adc <BALANCE_Result_Loop+0x16c>)
 80049ba:	edd3 7a00 	vldr	s15, [r3]
 80049be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049c2:	4b45      	ldr	r3, [pc, #276]	; (8004ad8 <BALANCE_Result_Loop+0x168>)
 80049c4:	edd3 7a00 	vldr	s15, [r3]
 80049c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049cc:	4b43      	ldr	r3, [pc, #268]	; (8004adc <BALANCE_Result_Loop+0x16c>)
 80049ce:	edd3 7a00 	vldr	s15, [r3]
 80049d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d6:	4b41      	ldr	r3, [pc, #260]	; (8004adc <BALANCE_Result_Loop+0x16c>)
 80049d8:	edc3 7a00 	vstr	s15, [r3]

	SerialControlWheelsRequest.WheelLeft = ResultLeft;
 80049dc:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <BALANCE_Result_Loop+0x164>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 80049e2:	3306      	adds	r3, #6
 80049e4:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight = ResultRight;
 80049e6:	4b3d      	ldr	r3, [pc, #244]	; (8004adc <BALANCE_Result_Loop+0x16c>)
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b3d      	ldr	r3, [pc, #244]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 80049ec:	330a      	adds	r3, #10
 80049ee:	601a      	str	r2, [r3, #0]

	SerialControlWheelsRequest.WheelLeft += RotationI * (BTFront);
 80049f0:	4b3b      	ldr	r3, [pc, #236]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 80049f2:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80049f6:	4613      	mov	r3, r2
 80049f8:	461a      	mov	r2, r3
 80049fa:	4b3a      	ldr	r3, [pc, #232]	; (8004ae4 <BALANCE_Result_Loop+0x174>)
 80049fc:	ed93 7a00 	vldr	s14, [r3]
 8004a00:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <BALANCE_Result_Loop+0x178>)
 8004a02:	edd3 7a00 	vldr	s15, [r3]
 8004a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0a:	ee07 2a10 	vmov	s14, r2
 8004a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a12:	4b33      	ldr	r3, [pc, #204]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 8004a14:	3306      	adds	r3, #6
 8004a16:	ee17 2a90 	vmov	r2, s15
 8004a1a:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight += RotationI * (BTFront);
 8004a1c:	4b30      	ldr	r3, [pc, #192]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 8004a1e:	f8d3 200a 	ldr.w	r2, [r3, #10]
 8004a22:	4613      	mov	r3, r2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <BALANCE_Result_Loop+0x174>)
 8004a28:	ed93 7a00 	vldr	s14, [r3]
 8004a2c:	4b2e      	ldr	r3, [pc, #184]	; (8004ae8 <BALANCE_Result_Loop+0x178>)
 8004a2e:	edd3 7a00 	vldr	s15, [r3]
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	ee07 2a10 	vmov	s14, r2
 8004a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a3e:	4b28      	ldr	r3, [pc, #160]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 8004a40:	330a      	adds	r3, #10
 8004a42:	ee17 2a90 	vmov	r2, s15
 8004a46:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelLeft += ManualDrive;
 8004a48:	4b25      	ldr	r3, [pc, #148]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 8004a4a:	f8d3 2006 	ldr.w	r2, [r3, #6]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b26      	ldr	r3, [pc, #152]	; (8004aec <BALANCE_Result_Loop+0x17c>)
 8004a54:	edd3 7a00 	vldr	s15, [r3]
 8004a58:	ee07 2a10 	vmov	s14, r2
 8004a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a60:	4b1f      	ldr	r3, [pc, #124]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 8004a62:	3306      	adds	r3, #6
 8004a64:	ee17 2a90 	vmov	r2, s15
 8004a68:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight += ManualDrive;
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 8004a6c:	f8d3 200a 	ldr.w	r2, [r3, #10]
 8004a70:	4613      	mov	r3, r2
 8004a72:	461a      	mov	r2, r3
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <BALANCE_Result_Loop+0x17c>)
 8004a76:	edd3 7a00 	vldr	s15, [r3]
 8004a7a:	ee07 2a10 	vmov	s14, r2
 8004a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a82:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 8004a84:	330a      	adds	r3, #10
 8004a86:	ee17 2a90 	vmov	r2, s15
 8004a8a:	601a      	str	r2, [r3, #0]

	if (eulerAngles.angle.pitch + AngleCorrection > 20)
 8004a8c:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <BALANCE_Result_Loop+0x180>)
 8004a8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a92:	4b18      	ldr	r3, [pc, #96]	; (8004af4 <BALANCE_Result_Loop+0x184>)
 8004a94:	edd3 7a00 	vldr	s15, [r3]
 8004a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a9c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa8:	dc00      	bgt.n	8004aac <BALANCE_Result_Loop+0x13c>
	{
	    SerialControlWheelsRequest.WheelLeft = 0;
	    SerialControlWheelsRequest.WheelRight = 0;
	}
}
 8004aaa:	e009      	b.n	8004ac0 <BALANCE_Result_Loop+0x150>
	    SerialControlWheelsRequest.WheelLeft = 0;
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 8004aae:	3306      	adds	r3, #6
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
	    SerialControlWheelsRequest.WheelRight = 0;
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <BALANCE_Result_Loop+0x170>)
 8004ab8:	330a      	adds	r3, #10
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	20000e64 	.word	0x20000e64
 8004ad0:	20000ec0 	.word	0x20000ec0
 8004ad4:	20000f14 	.word	0x20000f14
 8004ad8:	20000020 	.word	0x20000020
 8004adc:	20000fc4 	.word	0x20000fc4
 8004ae0:	20000eb0 	.word	0x20000eb0
 8004ae4:	20000db0 	.word	0x20000db0
 8004ae8:	20000dd8 	.word	0x20000dd8
 8004aec:	20000dac 	.word	0x20000dac
 8004af0:	20000e84 	.word	0x20000e84
 8004af4:	20000da8 	.word	0x20000da8

08004af8 <Interpolation>:
float Interpolation(float Value, float Min, float Max)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	ed87 0a03 	vstr	s0, [r7, #12]
 8004b02:	edc7 0a02 	vstr	s1, [r7, #8]
 8004b06:	ed87 1a01 	vstr	s2, [r7, #4]
    float Result = (Value - Min) / (Max - Min);
 8004b0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b12:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004b16:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b26:	edc7 7a05 	vstr	s15, [r7, #20]
    if (Result > 1)
 8004b2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3a:	dd02      	ble.n	8004b42 <Interpolation+0x4a>
    {
        return 1;
 8004b3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004b40:	e00a      	b.n	8004b58 <Interpolation+0x60>
    }
    if (Result < 0)
 8004b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4e:	d502      	bpl.n	8004b56 <Interpolation+0x5e>
    {
        return 0;
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e000      	b.n	8004b58 <Interpolation+0x60>
    }
    return Result;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	ee07 3a90 	vmov	s15, r3
}
 8004b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <ADC_Select_CH>:
void ADC_Select_CH(uint8_t ChanelNum)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 8004b76:	f107 0308 	add.w	r3, r7, #8
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	605a      	str	r2, [r3, #4]
 8004b80:	609a      	str	r2, [r3, #8]
 8004b82:	60da      	str	r2, [r3, #12]

	switch(ChanelNum)
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	2b09      	cmp	r3, #9
 8004b88:	d834      	bhi.n	8004bf4 <ADC_Select_CH+0x88>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <ADC_Select_CH+0x24>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	08004bbf 	.word	0x08004bbf
 8004b98:	08004bc5 	.word	0x08004bc5
 8004b9c:	08004bcb 	.word	0x08004bcb
 8004ba0:	08004bd1 	.word	0x08004bd1
 8004ba4:	08004bd7 	.word	0x08004bd7
 8004ba8:	08004bdd 	.word	0x08004bdd
 8004bac:	08004be3 	.word	0x08004be3
 8004bb0:	08004be9 	.word	0x08004be9
 8004bb4:	08004bef 	.word	0x08004bef
	{
	case 0:
		sConfig.Channel = ADC_CHANNEL_2;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	60bb      	str	r3, [r7, #8]
		break;
 8004bbc:	e01a      	b.n	8004bf4 <ADC_Select_CH+0x88>
	case 1:
		sConfig.Channel = ADC_CHANNEL_3;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	60bb      	str	r3, [r7, #8]
		break;
 8004bc2:	e017      	b.n	8004bf4 <ADC_Select_CH+0x88>
	case 2:
		sConfig.Channel = ADC_CHANNEL_4;
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	60bb      	str	r3, [r7, #8]
		break;
 8004bc8:	e014      	b.n	8004bf4 <ADC_Select_CH+0x88>
	case 3:
		sConfig.Channel = ADC_CHANNEL_5;
 8004bca:	2305      	movs	r3, #5
 8004bcc:	60bb      	str	r3, [r7, #8]
		break;
 8004bce:	e011      	b.n	8004bf4 <ADC_Select_CH+0x88>
	case 4:
		sConfig.Channel = ADC_CHANNEL_6;
 8004bd0:	2306      	movs	r3, #6
 8004bd2:	60bb      	str	r3, [r7, #8]
		break;
 8004bd4:	e00e      	b.n	8004bf4 <ADC_Select_CH+0x88>
	case 5:
		sConfig.Channel = ADC_CHANNEL_8;
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	60bb      	str	r3, [r7, #8]
		break;
 8004bda:	e00b      	b.n	8004bf4 <ADC_Select_CH+0x88>
	case 6:
		sConfig.Channel = ADC_CHANNEL_9;
 8004bdc:	2309      	movs	r3, #9
 8004bde:	60bb      	str	r3, [r7, #8]
		break;
 8004be0:	e008      	b.n	8004bf4 <ADC_Select_CH+0x88>
	case 7:
		sConfig.Channel = ADC_CHANNEL_10;
 8004be2:	230a      	movs	r3, #10
 8004be4:	60bb      	str	r3, [r7, #8]
		break;
 8004be6:	e005      	b.n	8004bf4 <ADC_Select_CH+0x88>
	case 8:
		sConfig.Channel = ADC_CHANNEL_12;
 8004be8:	230c      	movs	r3, #12
 8004bea:	60bb      	str	r3, [r7, #8]
		break;
 8004bec:	e002      	b.n	8004bf4 <ADC_Select_CH+0x88>
	case 9:
		sConfig.Channel = ADC_CHANNEL_13;
 8004bee:	230d      	movs	r3, #13
 8004bf0:	60bb      	str	r3, [r7, #8]
		break;
 8004bf2:	bf00      	nop
	}

	sConfig.Rank = 1;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bfc:	f107 0308 	add.w	r3, r7, #8
 8004c00:	4619      	mov	r1, r3
 8004c02:	4806      	ldr	r0, [pc, #24]	; (8004c1c <ADC_Select_CH+0xb0>)
 8004c04:	f001 fdc2 	bl	800678c <HAL_ADC_ConfigChannel>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <ADC_Select_CH+0xa6>
	{
		Error_Handler();
 8004c0e:	f000 fd4f 	bl	80056b0 <Error_Handler>
	}
}
 8004c12:	bf00      	nop
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000e18 	.word	0x20000e18

08004c20 <ADC_Update>:
void ADC_Update()
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
	for (int i = 0; i < ADC_CH_COUNT; i++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	607b      	str	r3, [r7, #4]
 8004c2a:	e01b      	b.n	8004c64 <ADC_Update+0x44>
	{
		ADC_Select_CH(i);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff ff9b 	bl	8004b6c <ADC_Select_CH>
		HAL_ADC_Start(&hadc1);
 8004c36:	480f      	ldr	r0, [pc, #60]	; (8004c74 <ADC_Update+0x54>)
 8004c38:	f001 fc0a 	bl	8006450 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8004c3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c40:	480c      	ldr	r0, [pc, #48]	; (8004c74 <ADC_Update+0x54>)
 8004c42:	f001 fd0a 	bl	800665a <HAL_ADC_PollForConversion>
		ADC_VAL[i] = HAL_ADC_GetValue(&hadc1);
 8004c46:	480b      	ldr	r0, [pc, #44]	; (8004c74 <ADC_Update+0x54>)
 8004c48:	f001 fd92 	bl	8006770 <HAL_ADC_GetValue>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	b299      	uxth	r1, r3
 8004c50:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <ADC_Update+0x58>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		HAL_ADC_Stop(&hadc1);
 8004c58:	4806      	ldr	r0, [pc, #24]	; (8004c74 <ADC_Update+0x54>)
 8004c5a:	f001 fccb 	bl	80065f4 <HAL_ADC_Stop>
	for (int i = 0; i < ADC_CH_COUNT; i++)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3301      	adds	r3, #1
 8004c62:	607b      	str	r3, [r7, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b09      	cmp	r3, #9
 8004c68:	dde0      	ble.n	8004c2c <ADC_Update+0xc>
	}
}
 8004c6a:	bf00      	nop
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000e18 	.word	0x20000e18
 8004c78:	20000de8 	.word	0x20000de8

08004c7c <StepControl>:
void StepControl(uint8_t dir, uint32_t period, uint32_t steps)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i <= steps; i++)
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e018      	b.n	8004cc2 <StepControl+0x46>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, dir);
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	461a      	mov	r2, r3
 8004c94:	2120      	movs	r1, #32
 8004c96:	480f      	ldr	r0, [pc, #60]	; (8004cd4 <StepControl+0x58>)
 8004c98:	f002 fe46 	bl	8007928 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	2110      	movs	r1, #16
 8004ca0:	480c      	ldr	r0, [pc, #48]	; (8004cd4 <StepControl+0x58>)
 8004ca2:	f002 fe41 	bl	8007928 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f001 fb6a 	bl	8006380 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 8004cac:	2200      	movs	r2, #0
 8004cae:	2110      	movs	r1, #16
 8004cb0:	4808      	ldr	r0, [pc, #32]	; (8004cd4 <StepControl+0x58>)
 8004cb2:	f002 fe39 	bl	8007928 <HAL_GPIO_WritePin>
		HAL_Delay(period);
 8004cb6:	68b8      	ldr	r0, [r7, #8]
 8004cb8:	f001 fb62 	bl	8006380 <HAL_Delay>
	for(int i = 0; i <= steps; i++)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d2e2      	bcs.n	8004c90 <StepControl+0x14>
	}
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40020800 	.word	0x40020800

08004cd8 <WS2812_PIXEL_RGB_TO_BUF_DMA>:
//-----Animation3
uint8_t Pos1=0;
uint8_t Pos2=LED_COUNT-1;
uint8_t Fl_Top1 = 0;
uint8_t Fl_Top2 = 1;
void WS2812_PIXEL_RGB_TO_BUF_DMA(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX){
 8004cd8:	b490      	push	{r4, r7}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	4604      	mov	r4, r0
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4623      	mov	r3, r4
 8004ce8:	71fb      	strb	r3, [r7, #7]
 8004cea:	4603      	mov	r3, r0
 8004cec:	71bb      	strb	r3, [r7, #6]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	717b      	strb	r3, [r7, #5]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	807b      	strh	r3, [r7, #2]
  for(uint8_t i=0;i<8;i++){
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e078      	b.n	8004dee <WS2812_PIXEL_RGB_TO_BUF_DMA+0x116>
    if (BitIsSet(Rpixel,(7-i)) == 1){
 8004cfc:	79fa      	ldrb	r2, [r7, #7]
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	f1c3 0307 	rsb	r3, r3, #7
 8004d04:	fa42 f303 	asr.w	r3, r2, r3
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00e      	beq.n	8004d30 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x58>
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	4613      	mov	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4413      	add	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	4413      	add	r3, r2
 8004d24:	3308      	adds	r3, #8
 8004d26:	4a36      	ldr	r2, [pc, #216]	; (8004e00 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8004d28:	2144      	movs	r1, #68	; 0x44
 8004d2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004d2e:	e00d      	b.n	8004d4c <WS2812_PIXEL_RGB_TO_BUF_DMA+0x74>
    }else{
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 8004d30:	887a      	ldrh	r2, [r7, #2]
 8004d32:	4613      	mov	r3, r2
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	4413      	add	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	4413      	add	r3, r2
 8004d42:	3308      	adds	r3, #8
 8004d44:	4a2e      	ldr	r2, [pc, #184]	; (8004e00 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8004d46:	2118      	movs	r1, #24
 8004d48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1){
 8004d4c:	79ba      	ldrb	r2, [r7, #6]
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	f1c3 0307 	rsb	r3, r3, #7
 8004d54:	fa42 f303 	asr.w	r3, r2, r3
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <WS2812_PIXEL_RGB_TO_BUF_DMA+0xa6>
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 8004d62:	887a      	ldrh	r2, [r7, #2]
 8004d64:	4613      	mov	r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4413      	add	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	4413      	add	r3, r2
 8004d74:	4a22      	ldr	r2, [pc, #136]	; (8004e00 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8004d76:	2144      	movs	r1, #68	; 0x44
 8004d78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004d7c:	e00c      	b.n	8004d98 <WS2812_PIXEL_RGB_TO_BUF_DMA+0xc0>
    }else{
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	4613      	mov	r3, r2
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	4413      	add	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	4413      	add	r3, r2
 8004d90:	4a1b      	ldr	r2, [pc, #108]	; (8004e00 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8004d92:	2118      	movs	r1, #24
 8004d94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1){
 8004d98:	797a      	ldrb	r2, [r7, #5]
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	f1c3 0307 	rsb	r3, r3, #7
 8004da0:	fa42 f303 	asr.w	r3, r2, r3
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00e      	beq.n	8004dcc <WS2812_PIXEL_RGB_TO_BUF_DMA+0xf4>
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 8004dae:	887a      	ldrh	r2, [r7, #2]
 8004db0:	4613      	mov	r3, r2
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	4413      	add	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3310      	adds	r3, #16
 8004dc2:	4a0f      	ldr	r2, [pc, #60]	; (8004e00 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8004dc4:	2144      	movs	r1, #68	; 0x44
 8004dc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004dca:	e00d      	b.n	8004de8 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x110>
    }else{
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 8004dcc:	887a      	ldrh	r2, [r7, #2]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	4413      	add	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	4413      	add	r3, r2
 8004dde:	3310      	adds	r3, #16
 8004de0:	4a07      	ldr	r2, [pc, #28]	; (8004e00 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8004de2:	2118      	movs	r1, #24
 8004de4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(uint8_t i=0;i<8;i++){
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	3301      	adds	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b07      	cmp	r3, #7
 8004df2:	d983      	bls.n	8004cfc <WS2812_PIXEL_RGB_TO_BUF_DMA+0x24>
    }
  }
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc90      	pop	{r4, r7}
 8004dfe:	4770      	bx	lr
 8004e00:	200000dc 	.word	0x200000dc

08004e04 <WS2812_LIGHT>:
void WS2812_LIGHT(void){
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 8004e08:	f44f 734c 	mov.w	r3, #816	; 0x330
 8004e0c:	4a03      	ldr	r2, [pc, #12]	; (8004e1c <WS2812_LIGHT+0x18>)
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4803      	ldr	r0, [pc, #12]	; (8004e20 <WS2812_LIGHT+0x1c>)
 8004e12:	f004 f881 	bl	8008f18 <HAL_TIM_PWM_Start_DMA>
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	200000dc 	.word	0x200000dc
 8004e20:	200010d4 	.word	0x200010d4

08004e24 <WS2812_Init>:
void WS2812_CLEAR(void){
	for (uint8_t i = 0; i < LED_COUNT; ++i){WS2812_PIXEL_RGB_TO_BUF_DMA(0, 0, 0, i);}
}
void WS2812_Init(void){
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
	for (uint16_t i = DELAY_LEN; i < ARRAY_LEN; i++)BUF_DMA[i] = LOW;
 8004e2a:	2330      	movs	r3, #48	; 0x30
 8004e2c:	80fb      	strh	r3, [r7, #6]
 8004e2e:	e007      	b.n	8004e40 <WS2812_Init+0x1c>
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <WS2812_Init+0x38>)
 8004e34:	2118      	movs	r1, #24
 8004e36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	80fb      	strh	r3, [r7, #6]
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	f5b3 7f4c 	cmp.w	r3, #816	; 0x330
 8004e46:	d3f3      	bcc.n	8004e30 <WS2812_Init+0xc>
	//WS2812_CLEAR();
	WS2812_LIGHT();
 8004e48:	f7ff ffdc 	bl	8004e04 <WS2812_LIGHT>
	HAL_Delay(1);
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f001 fa97 	bl	8006380 <HAL_Delay>
}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	200000dc 	.word	0x200000dc

08004e60 <WS2812_ANIMATION_1>:
void WS2812_ANIMATION_1(void){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
	//WS2812_CLEAR();
	WS2812_PIXEL_RGB_TO_BUF_DMA(128, 0, 0, Pos);
 8004e64:	4b2e      	ldr	r3, [pc, #184]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004e66:	f993 3000 	ldrsb.w	r3, [r3]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	2080      	movs	r0, #128	; 0x80
 8004e72:	f7ff ff31 	bl	8004cd8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
    if(Pos<(LED_COUNT-1)){WS2812_PIXEL_RGB_TO_BUF_DMA(0, 0, 128, Pos+1);}
 8004e76:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004e78:	f993 3000 	ldrsb.w	r3, [r3]
 8004e7c:	2b1e      	cmp	r3, #30
 8004e7e:	dc0a      	bgt.n	8004e96 <WS2812_ANIMATION_1+0x36>
 8004e80:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004e82:	f993 3000 	ldrsb.w	r3, [r3]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	2100      	movs	r1, #0
 8004e90:	2000      	movs	r0, #0
 8004e92:	f7ff ff21 	bl	8004cd8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
    if(Pos<(LED_COUNT-2)){WS2812_PIXEL_RGB_TO_BUF_DMA(0, 128, 0, Pos+2);}
 8004e96:	4b22      	ldr	r3, [pc, #136]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004e98:	f993 3000 	ldrsb.w	r3, [r3]
 8004e9c:	2b1d      	cmp	r3, #29
 8004e9e:	dc0a      	bgt.n	8004eb6 <WS2812_ANIMATION_1+0x56>
 8004ea0:	4b1f      	ldr	r3, [pc, #124]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004ea2:	f993 3000 	ldrsb.w	r3, [r3]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2200      	movs	r2, #0
 8004eae:	2180      	movs	r1, #128	; 0x80
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	f7ff ff11 	bl	8004cd8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
	WS2812_LIGHT();
 8004eb6:	f7ff ffa5 	bl	8004e04 <WS2812_LIGHT>
	if(Fl_Top==0){
 8004eba:	4b1a      	ldr	r3, [pc, #104]	; (8004f24 <WS2812_ANIMATION_1+0xc4>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d114      	bne.n	8004eec <WS2812_ANIMATION_1+0x8c>
		Pos++;
 8004ec2:	4b17      	ldr	r3, [pc, #92]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	3301      	adds	r3, #1
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	b25a      	sxtb	r2, r3
 8004ed0:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004ed2:	701a      	strb	r2, [r3, #0]
		if(Pos==LED_COUNT-2){Fl_Top=1;Pos=LED_COUNT-4;}
 8004ed4:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8004eda:	2b1e      	cmp	r3, #30
 8004edc:	d11e      	bne.n	8004f1c <WS2812_ANIMATION_1+0xbc>
 8004ede:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <WS2812_ANIMATION_1+0xc4>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004ee6:	221c      	movs	r2, #28
 8004ee8:	701a      	strb	r2, [r3, #0]
	}else if (Fl_Top==1) {
		Pos--;
		if(Pos==0){Fl_Top=0;Pos=0;}
	}
}
 8004eea:	e017      	b.n	8004f1c <WS2812_ANIMATION_1+0xbc>
	}else if (Fl_Top==1) {
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <WS2812_ANIMATION_1+0xc4>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d113      	bne.n	8004f1c <WS2812_ANIMATION_1+0xbc>
		Pos--;
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004ef6:	f993 3000 	ldrsb.w	r3, [r3]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	b25a      	sxtb	r2, r3
 8004f02:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004f04:	701a      	strb	r2, [r3, #0]
		if(Pos==0){Fl_Top=0;Pos=0;}
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004f08:	f993 3000 	ldrsb.w	r3, [r3]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d105      	bne.n	8004f1c <WS2812_ANIMATION_1+0xbc>
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <WS2812_ANIMATION_1+0xc4>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	4b02      	ldr	r3, [pc, #8]	; (8004f20 <WS2812_ANIMATION_1+0xc0>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20000e00 	.word	0x20000e00
 8004f24:	20000e01 	.word	0x20000e01

08004f28 <WS2812_ANIMATION_2>:
void WS2812_ANIMATION_2(void) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < LED_COUNT; i++) {
 8004f2e:	2300      	movs	r3, #0
 8004f30:	71fb      	strb	r3, [r7, #7]
 8004f32:	e030      	b.n	8004f96 <WS2812_ANIMATION_2+0x6e>
		WS2812_PIXEL_RGB_TO_BUF_DMA(ColorRed * BRIGHTNESS / 100,	ColorGreen * BRIGHTNESS / 100, ColorBlue * BRIGHTNESS / 100, i);
 8004f34:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <WS2812_ANIMATION_2+0x138>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	4b4a      	ldr	r3, [pc, #296]	; (8005064 <WS2812_ANIMATION_2+0x13c>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	fb03 f302 	mul.w	r3, r3, r2
 8004f42:	4a49      	ldr	r2, [pc, #292]	; (8005068 <WS2812_ANIMATION_2+0x140>)
 8004f44:	fb82 1203 	smull	r1, r2, r2, r3
 8004f48:	1152      	asrs	r2, r2, #5
 8004f4a:	17db      	asrs	r3, r3, #31
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	b2d8      	uxtb	r0, r3
 8004f50:	4b46      	ldr	r3, [pc, #280]	; (800506c <WS2812_ANIMATION_2+0x144>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	4b43      	ldr	r3, [pc, #268]	; (8005064 <WS2812_ANIMATION_2+0x13c>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	fb03 f302 	mul.w	r3, r3, r2
 8004f5e:	4a42      	ldr	r2, [pc, #264]	; (8005068 <WS2812_ANIMATION_2+0x140>)
 8004f60:	fb82 1203 	smull	r1, r2, r2, r3
 8004f64:	1152      	asrs	r2, r2, #5
 8004f66:	17db      	asrs	r3, r3, #31
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	b2d9      	uxtb	r1, r3
 8004f6c:	4b40      	ldr	r3, [pc, #256]	; (8005070 <WS2812_ANIMATION_2+0x148>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	4b3c      	ldr	r3, [pc, #240]	; (8005064 <WS2812_ANIMATION_2+0x13c>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	fb03 f302 	mul.w	r3, r3, r2
 8004f7a:	4a3b      	ldr	r2, [pc, #236]	; (8005068 <WS2812_ANIMATION_2+0x140>)
 8004f7c:	fb82 c203 	smull	ip, r2, r2, r3
 8004f80:	1152      	asrs	r2, r2, #5
 8004f82:	17db      	asrs	r3, r3, #31
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f7ff fea4 	bl	8004cd8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
	for (uint8_t i = 0; i < LED_COUNT; i++) {
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	3301      	adds	r3, #1
 8004f94:	71fb      	strb	r3, [r7, #7]
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	2b1f      	cmp	r3, #31
 8004f9a:	d9cb      	bls.n	8004f34 <WS2812_ANIMATION_2+0xc>
	}
	WS2812_LIGHT();
 8004f9c:	f7ff ff32 	bl	8004e04 <WS2812_LIGHT>
	if (FL_BRIGHTNESS == 0) {
 8004fa0:	4b34      	ldr	r3, [pc, #208]	; (8005074 <WS2812_ANIMATION_2+0x14c>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d110      	bne.n	8004fca <WS2812_ANIMATION_2+0xa2>
		BRIGHTNESS++;
 8004fa8:	4b2e      	ldr	r3, [pc, #184]	; (8005064 <WS2812_ANIMATION_2+0x13c>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	4b2c      	ldr	r3, [pc, #176]	; (8005064 <WS2812_ANIMATION_2+0x13c>)
 8004fb2:	701a      	strb	r2, [r3, #0]
	if(BRIGHTNESS == MAX_BRIGHTNESS) {
 8004fb4:	4b2b      	ldr	r3, [pc, #172]	; (8005064 <WS2812_ANIMATION_2+0x13c>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b32      	cmp	r3, #50	; 0x32
 8004fba:	d14d      	bne.n	8005058 <WS2812_ANIMATION_2+0x130>
		FL_BRIGHTNESS=1;
 8004fbc:	4b2d      	ldr	r3, [pc, #180]	; (8005074 <WS2812_ANIMATION_2+0x14c>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
		BRIGHTNESS=MAX_BRIGHTNESS;
 8004fc2:	4b28      	ldr	r3, [pc, #160]	; (8005064 <WS2812_ANIMATION_2+0x13c>)
 8004fc4:	2232      	movs	r2, #50	; 0x32
 8004fc6:	701a      	strb	r2, [r3, #0]
		ColorRed = rand()%255;
		ColorGreen = rand()%255;
		ColorBlue = rand()%255;
	}
}
}
 8004fc8:	e046      	b.n	8005058 <WS2812_ANIMATION_2+0x130>
} else if (FL_BRIGHTNESS == 1) {
 8004fca:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <WS2812_ANIMATION_2+0x14c>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d142      	bne.n	8005058 <WS2812_ANIMATION_2+0x130>
	BRIGHTNESS--;
 8004fd2:	4b24      	ldr	r3, [pc, #144]	; (8005064 <WS2812_ANIMATION_2+0x13c>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	4b22      	ldr	r3, [pc, #136]	; (8005064 <WS2812_ANIMATION_2+0x13c>)
 8004fdc:	701a      	strb	r2, [r3, #0]
	if (BRIGHTNESS == 0) {
 8004fde:	4b21      	ldr	r3, [pc, #132]	; (8005064 <WS2812_ANIMATION_2+0x13c>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d138      	bne.n	8005058 <WS2812_ANIMATION_2+0x130>
		FL_BRIGHTNESS = 0;
 8004fe6:	4b23      	ldr	r3, [pc, #140]	; (8005074 <WS2812_ANIMATION_2+0x14c>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
		BRIGHTNESS = 0;
 8004fec:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <WS2812_ANIMATION_2+0x13c>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
		ColorRed = rand()%255;
 8004ff2:	f007 f92f 	bl	800c254 <rand>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	4b1f      	ldr	r3, [pc, #124]	; (8005078 <WS2812_ANIMATION_2+0x150>)
 8004ffa:	fb83 1302 	smull	r1, r3, r3, r2
 8004ffe:	4413      	add	r3, r2
 8005000:	11d9      	asrs	r1, r3, #7
 8005002:	17d3      	asrs	r3, r2, #31
 8005004:	1ac9      	subs	r1, r1, r3
 8005006:	460b      	mov	r3, r1
 8005008:	021b      	lsls	r3, r3, #8
 800500a:	1a5b      	subs	r3, r3, r1
 800500c:	1ad1      	subs	r1, r2, r3
 800500e:	b2ca      	uxtb	r2, r1
 8005010:	4b13      	ldr	r3, [pc, #76]	; (8005060 <WS2812_ANIMATION_2+0x138>)
 8005012:	701a      	strb	r2, [r3, #0]
		ColorGreen = rand()%255;
 8005014:	f007 f91e 	bl	800c254 <rand>
 8005018:	4602      	mov	r2, r0
 800501a:	4b17      	ldr	r3, [pc, #92]	; (8005078 <WS2812_ANIMATION_2+0x150>)
 800501c:	fb83 1302 	smull	r1, r3, r3, r2
 8005020:	4413      	add	r3, r2
 8005022:	11d9      	asrs	r1, r3, #7
 8005024:	17d3      	asrs	r3, r2, #31
 8005026:	1ac9      	subs	r1, r1, r3
 8005028:	460b      	mov	r3, r1
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	1a5b      	subs	r3, r3, r1
 800502e:	1ad1      	subs	r1, r2, r3
 8005030:	b2ca      	uxtb	r2, r1
 8005032:	4b0e      	ldr	r3, [pc, #56]	; (800506c <WS2812_ANIMATION_2+0x144>)
 8005034:	701a      	strb	r2, [r3, #0]
		ColorBlue = rand()%255;
 8005036:	f007 f90d 	bl	800c254 <rand>
 800503a:	4602      	mov	r2, r0
 800503c:	4b0e      	ldr	r3, [pc, #56]	; (8005078 <WS2812_ANIMATION_2+0x150>)
 800503e:	fb83 1302 	smull	r1, r3, r3, r2
 8005042:	4413      	add	r3, r2
 8005044:	11d9      	asrs	r1, r3, #7
 8005046:	17d3      	asrs	r3, r2, #31
 8005048:	1ac9      	subs	r1, r1, r3
 800504a:	460b      	mov	r3, r1
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	1a5b      	subs	r3, r3, r1
 8005050:	1ad1      	subs	r1, r2, r3
 8005052:	b2ca      	uxtb	r2, r1
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <WS2812_ANIMATION_2+0x148>)
 8005056:	701a      	strb	r2, [r3, #0]
}
 8005058:	bf00      	nop
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000e04 	.word	0x20000e04
 8005064:	20000e02 	.word	0x20000e02
 8005068:	51eb851f 	.word	0x51eb851f
 800506c:	20000e05 	.word	0x20000e05
 8005070:	20000e06 	.word	0x20000e06
 8005074:	20000e03 	.word	0x20000e03
 8005078:	80808081 	.word	0x80808081

0800507c <WS2812_ANIMATION_3>:
void WS2812_ANIMATION_3(void){
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
	//WS2812_CLEAR();
	WS2812_PIXEL_RGB_TO_BUF_DMA(128, 0, 0, Pos1);
 8005080:	4b32      	ldr	r3, [pc, #200]	; (800514c <WS2812_ANIMATION_3+0xd0>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	2200      	movs	r2, #0
 8005088:	2100      	movs	r1, #0
 800508a:	2080      	movs	r0, #128	; 0x80
 800508c:	f7ff fe24 	bl	8004cd8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
	WS2812_PIXEL_RGB_TO_BUF_DMA(0, 0, 128, Pos2);
 8005090:	4b2f      	ldr	r3, [pc, #188]	; (8005150 <WS2812_ANIMATION_3+0xd4>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	2100      	movs	r1, #0
 800509a:	2000      	movs	r0, #0
 800509c:	f7ff fe1c 	bl	8004cd8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
	WS2812_LIGHT();
 80050a0:	f7ff feb0 	bl	8004e04 <WS2812_LIGHT>
	//--LED1
	if (Fl_Top1 == 0) {
 80050a4:	4b2b      	ldr	r3, [pc, #172]	; (8005154 <WS2812_ANIMATION_3+0xd8>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d110      	bne.n	80050ce <WS2812_ANIMATION_3+0x52>
		Pos1++;
 80050ac:	4b27      	ldr	r3, [pc, #156]	; (800514c <WS2812_ANIMATION_3+0xd0>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	4b25      	ldr	r3, [pc, #148]	; (800514c <WS2812_ANIMATION_3+0xd0>)
 80050b6:	701a      	strb	r2, [r3, #0]
		if (Pos1 == LED_COUNT) {Fl_Top1 = 1;Pos1 = LED_COUNT - 2;}
 80050b8:	4b24      	ldr	r3, [pc, #144]	; (800514c <WS2812_ANIMATION_3+0xd0>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d11a      	bne.n	80050f6 <WS2812_ANIMATION_3+0x7a>
 80050c0:	4b24      	ldr	r3, [pc, #144]	; (8005154 <WS2812_ANIMATION_3+0xd8>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	4b21      	ldr	r3, [pc, #132]	; (800514c <WS2812_ANIMATION_3+0xd0>)
 80050c8:	221e      	movs	r2, #30
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	e013      	b.n	80050f6 <WS2812_ANIMATION_3+0x7a>
	} else if (Fl_Top1 == 1) {
 80050ce:	4b21      	ldr	r3, [pc, #132]	; (8005154 <WS2812_ANIMATION_3+0xd8>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d10f      	bne.n	80050f6 <WS2812_ANIMATION_3+0x7a>
		Pos1--;
 80050d6:	4b1d      	ldr	r3, [pc, #116]	; (800514c <WS2812_ANIMATION_3+0xd0>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	3b01      	subs	r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b1b      	ldr	r3, [pc, #108]	; (800514c <WS2812_ANIMATION_3+0xd0>)
 80050e0:	701a      	strb	r2, [r3, #0]
		if (Pos1 == 0) {Fl_Top1 = 0;Pos1 = 0;
 80050e2:	4b1a      	ldr	r3, [pc, #104]	; (800514c <WS2812_ANIMATION_3+0xd0>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d105      	bne.n	80050f6 <WS2812_ANIMATION_3+0x7a>
 80050ea:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <WS2812_ANIMATION_3+0xd8>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	4b16      	ldr	r3, [pc, #88]	; (800514c <WS2812_ANIMATION_3+0xd0>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]
		}
	}
	//--LED2
	if (Fl_Top2 == 0) {
 80050f6:	4b18      	ldr	r3, [pc, #96]	; (8005158 <WS2812_ANIMATION_3+0xdc>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d110      	bne.n	8005120 <WS2812_ANIMATION_3+0xa4>
		Pos2++;
 80050fe:	4b14      	ldr	r3, [pc, #80]	; (8005150 <WS2812_ANIMATION_3+0xd4>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	3301      	adds	r3, #1
 8005104:	b2da      	uxtb	r2, r3
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <WS2812_ANIMATION_3+0xd4>)
 8005108:	701a      	strb	r2, [r3, #0]
		if (Pos2 == LED_COUNT) {Fl_Top2 = 1;Pos2 = LED_COUNT - 2;
 800510a:	4b11      	ldr	r3, [pc, #68]	; (8005150 <WS2812_ANIMATION_3+0xd4>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	2b20      	cmp	r3, #32
 8005110:	d11a      	bne.n	8005148 <WS2812_ANIMATION_3+0xcc>
 8005112:	4b11      	ldr	r3, [pc, #68]	; (8005158 <WS2812_ANIMATION_3+0xdc>)
 8005114:	2201      	movs	r2, #1
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <WS2812_ANIMATION_3+0xd4>)
 800511a:	221e      	movs	r2, #30
 800511c:	701a      	strb	r2, [r3, #0]
		}
	} else if (Fl_Top2 == 1) {Pos2--;
	if (Pos2 == 0) {Fl_Top2 = 0;Pos2 = 0;
		}
	}
}
 800511e:	e013      	b.n	8005148 <WS2812_ANIMATION_3+0xcc>
	} else if (Fl_Top2 == 1) {Pos2--;
 8005120:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <WS2812_ANIMATION_3+0xdc>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d10f      	bne.n	8005148 <WS2812_ANIMATION_3+0xcc>
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <WS2812_ANIMATION_3+0xd4>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	3b01      	subs	r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <WS2812_ANIMATION_3+0xd4>)
 8005132:	701a      	strb	r2, [r3, #0]
	if (Pos2 == 0) {Fl_Top2 = 0;Pos2 = 0;
 8005134:	4b06      	ldr	r3, [pc, #24]	; (8005150 <WS2812_ANIMATION_3+0xd4>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <WS2812_ANIMATION_3+0xcc>
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <WS2812_ANIMATION_3+0xdc>)
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	4b03      	ldr	r3, [pc, #12]	; (8005150 <WS2812_ANIMATION_3+0xd4>)
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
}
 8005148:	bf00      	nop
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000e07 	.word	0x20000e07
 8005150:	2000003d 	.word	0x2000003d
 8005154:	20000e08 	.word	0x20000e08
 8005158:	2000003e 	.word	0x2000003e

0800515c <WS2812_UPDATE>:
void WS2812_UPDATE(void){
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
	if (debug_led_en==0) {
 8005160:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <WS2812_UPDATE+0x84>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d123      	bne.n	80051b0 <WS2812_UPDATE+0x54>
		Mode = 0;
 8005168:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <WS2812_UPDATE+0x88>)
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
		//if(Mode>2)Mode=0;
		Pos = 0;
 800516e:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <WS2812_UPDATE+0x8c>)
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
		Fl_Top = 0;
 8005174:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <WS2812_UPDATE+0x90>)
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
		BRIGHTNESS=0;
 800517a:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <WS2812_UPDATE+0x94>)
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
		FL_BRIGHTNESS=0;
 8005180:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <WS2812_UPDATE+0x98>)
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
		ColorRed=128;
 8005186:	4b1c      	ldr	r3, [pc, #112]	; (80051f8 <WS2812_UPDATE+0x9c>)
 8005188:	2280      	movs	r2, #128	; 0x80
 800518a:	701a      	strb	r2, [r3, #0]
		ColorGreen=70;
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <WS2812_UPDATE+0xa0>)
 800518e:	2246      	movs	r2, #70	; 0x46
 8005190:	701a      	strb	r2, [r3, #0]
		ColorBlue=30;
 8005192:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <WS2812_UPDATE+0xa4>)
 8005194:	221e      	movs	r2, #30
 8005196:	701a      	strb	r2, [r3, #0]
		Pos1=0;
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <WS2812_UPDATE+0xa8>)
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
		Pos2=LED_COUNT-1;
 800519e:	4b1a      	ldr	r3, [pc, #104]	; (8005208 <WS2812_UPDATE+0xac>)
 80051a0:	221f      	movs	r2, #31
 80051a2:	701a      	strb	r2, [r3, #0]
		Fl_Top1 = 0;
 80051a4:	4b19      	ldr	r3, [pc, #100]	; (800520c <WS2812_UPDATE+0xb0>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
		Fl_Top2 = 1;
 80051aa:	4b19      	ldr	r3, [pc, #100]	; (8005210 <WS2812_UPDATE+0xb4>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	701a      	strb	r2, [r3, #0]
	}
	switch (Mode) {
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <WS2812_UPDATE+0x88>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d00c      	beq.n	80051d2 <WS2812_UPDATE+0x76>
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	dc0c      	bgt.n	80051d6 <WS2812_UPDATE+0x7a>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <WS2812_UPDATE+0x6a>
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d003      	beq.n	80051cc <WS2812_UPDATE+0x70>
 80051c4:	e007      	b.n	80051d6 <WS2812_UPDATE+0x7a>
	case 0:
		WS2812_ANIMATION_1();
 80051c6:	f7ff fe4b 	bl	8004e60 <WS2812_ANIMATION_1>
		break;
 80051ca:	e004      	b.n	80051d6 <WS2812_UPDATE+0x7a>
	case 1:
		WS2812_ANIMATION_2();
 80051cc:	f7ff feac 	bl	8004f28 <WS2812_ANIMATION_2>
		break;
 80051d0:	e001      	b.n	80051d6 <WS2812_UPDATE+0x7a>
	case 2:
		WS2812_ANIMATION_3();
 80051d2:	f7ff ff53 	bl	800507c <WS2812_ANIMATION_3>
	}
	Fl_Update = 0;
 80051d6:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <WS2812_UPDATE+0xb8>)
 80051d8:	2200      	movs	r2, #0
 80051da:	701a      	strb	r2, [r3, #0]
}
 80051dc:	bf00      	nop
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000dfe 	.word	0x20000dfe
 80051e4:	2000003c 	.word	0x2000003c
 80051e8:	20000e00 	.word	0x20000e00
 80051ec:	20000e01 	.word	0x20000e01
 80051f0:	20000e02 	.word	0x20000e02
 80051f4:	20000e03 	.word	0x20000e03
 80051f8:	20000e04 	.word	0x20000e04
 80051fc:	20000e05 	.word	0x20000e05
 8005200:	20000e06 	.word	0x20000e06
 8005204:	20000e07 	.word	0x20000e07
 8005208:	2000003d 	.word	0x2000003d
 800520c:	20000e08 	.word	0x20000e08
 8005210:	2000003e 	.word	0x2000003e
 8005214:	20000dff 	.word	0x20000dff

08005218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005218:	b5b0      	push	{r4, r5, r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800521c:	f001 f83e 	bl	800629c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005220:	f000 f9dc 	bl	80055dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005224:	f7fd ffca 	bl	80031bc <MX_GPIO_Init>
  MX_DMA_Init();
 8005228:	f7fd ff90 	bl	800314c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800522c:	f000 fe86 	bl	8005f3c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8005230:	f7fd febe 	bl	8002fb0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8005234:	f000 fc26 	bl	8005a84 <MX_TIM2_Init>
  MX_TIM6_Init();
 8005238:	f000 fcba 	bl	8005bb0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800523c:	f000 fcee 	bl	8005c1c <MX_TIM7_Init>
  MX_TIM14_Init();
 8005240:	f000 fd22 	bl	8005c88 <MX_TIM14_Init>
  MX_UART4_Init();
 8005244:	f000 fe50 	bl	8005ee8 <MX_UART4_Init>
  MX_SPI2_Init();
 8005248:	f000 fa38 	bl	80056bc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  icm20948_init();
 800524c:	f7fd fab2 	bl	80027b4 <icm20948_init>
  ak09916_init();
 8005250:	f7fd fada 	bl	8002808 <ak09916_init>
  IMU_INIT();
 8005254:	f7fe f988 	bl	8003568 <IMU_INIT>
  WS2812_Init();
 8005258:	f7ff fde4 	bl	8004e24 <WS2812_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GetTick() - LastUpdateIMU > 1)
 800525c:	f001 f884 	bl	8006368 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	4ba7      	ldr	r3, [pc, #668]	; (8005500 <main+0x2e8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d906      	bls.n	800527a <main+0x62>
	  {
		  IMU_UPDATE();
 800526c:	f7fe f9c0 	bl	80035f0 <IMU_UPDATE>
		  LastUpdateIMU = HAL_GetTick();
 8005270:	f001 f87a 	bl	8006368 <HAL_GetTick>
 8005274:	4603      	mov	r3, r0
 8005276:	4aa2      	ldr	r2, [pc, #648]	; (8005500 <main+0x2e8>)
 8005278:	6013      	str	r3, [r2, #0]
	  }

	  if (HAL_GetTick() - LastUpdateADC > 10)
 800527a:	f001 f875 	bl	8006368 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	4ba0      	ldr	r3, [pc, #640]	; (8005504 <main+0x2ec>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b0a      	cmp	r3, #10
 8005288:	d906      	bls.n	8005298 <main+0x80>
	  {
		  ADC_Update();
 800528a:	f7ff fcc9 	bl	8004c20 <ADC_Update>
		  LastUpdateADC = HAL_GetTick();
 800528e:	f001 f86b 	bl	8006368 <HAL_GetTick>
 8005292:	4603      	mov	r3, r0
 8005294:	4a9b      	ldr	r2, [pc, #620]	; (8005504 <main+0x2ec>)
 8005296:	6013      	str	r3, [r2, #0]
	  }

	  if (HAL_GetTick() - PackageLastTimeReset_Motherboard > 100) // UART2 RECEIVE FEEDBACK
 8005298:	f001 f866 	bl	8006368 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	4b9a      	ldr	r3, [pc, #616]	; (8005508 <main+0x2f0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b64      	cmp	r3, #100	; 0x64
 80052a6:	d90e      	bls.n	80052c6 <main+0xae>
	  {
		  MX_USART2_UART_Init();
 80052a8:	f000 fe48 	bl	8005f3c <MX_USART2_UART_Init>
		  USART2ReceiveState = 0;
 80052ac:	4b97      	ldr	r3, [pc, #604]	; (800550c <main+0x2f4>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 80052b2:	2210      	movs	r2, #16
 80052b4:	4996      	ldr	r1, [pc, #600]	; (8005510 <main+0x2f8>)
 80052b6:	4897      	ldr	r0, [pc, #604]	; (8005514 <main+0x2fc>)
 80052b8:	f004 fec6 	bl	800a048 <HAL_UART_Receive_DMA>
		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 80052bc:	f001 f854 	bl	8006368 <HAL_GetTick>
 80052c0:	4603      	mov	r3, r0
 80052c2:	4a91      	ldr	r2, [pc, #580]	; (8005508 <main+0x2f0>)
 80052c4:	6013      	str	r3, [r2, #0]
	  }

	  if ((USART2ReceiveState == 10) && (SerialControlWheelsResponce.CR == 13) && (SerialControlWheelsResponce.LF == 10))
 80052c6:	4b91      	ldr	r3, [pc, #580]	; (800550c <main+0x2f4>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b0a      	cmp	r3, #10
 80052ce:	f040 8147 	bne.w	8005560 <main+0x348>
 80052d2:	4b8f      	ldr	r3, [pc, #572]	; (8005510 <main+0x2f8>)
 80052d4:	7b9b      	ldrb	r3, [r3, #14]
 80052d6:	2b0d      	cmp	r3, #13
 80052d8:	f040 8142 	bne.w	8005560 <main+0x348>
 80052dc:	4b8c      	ldr	r3, [pc, #560]	; (8005510 <main+0x2f8>)
 80052de:	7bdb      	ldrb	r3, [r3, #15]
 80052e0:	2b0a      	cmp	r3, #10
 80052e2:	f040 813d 	bne.w	8005560 <main+0x348>
	  {
		  USART2ReceiveState = 0;
 80052e6:	4b89      	ldr	r3, [pc, #548]	; (800550c <main+0x2f4>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80052ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052f0:	4889      	ldr	r0, [pc, #548]	; (8005518 <main+0x300>)
 80052f2:	f002 fb32 	bl	800795a <HAL_GPIO_TogglePin>

		  if(InititionHall == 0)
 80052f6:	4b89      	ldr	r3, [pc, #548]	; (800551c <main+0x304>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d116      	bne.n	800532c <main+0x114>
		  {
			  HallLeftStepPast = SerialControlWheelsResponce.WheelLeftSteps;
 80052fe:	4b84      	ldr	r3, [pc, #528]	; (8005510 <main+0x2f8>)
 8005300:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8005304:	ee07 3a90 	vmov	s15, r3
 8005308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800530c:	4b84      	ldr	r3, [pc, #528]	; (8005520 <main+0x308>)
 800530e:	edc3 7a00 	vstr	s15, [r3]
			  HallRightStepPast = SerialControlWheelsResponce.WheelRightSteps;
 8005312:	4b7f      	ldr	r3, [pc, #508]	; (8005510 <main+0x2f8>)
 8005314:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8005318:	ee07 3a90 	vmov	s15, r3
 800531c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005320:	4b80      	ldr	r3, [pc, #512]	; (8005524 <main+0x30c>)
 8005322:	edc3 7a00 	vstr	s15, [r3]
			  InititionHall = 1;
 8005326:	4b7d      	ldr	r3, [pc, #500]	; (800551c <main+0x304>)
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
		  }

		  if (HallActualize(SerialControlWheelsResponce.WheelLeftSteps, HallLeftStepPast, MOTHERBOARD_DIFF))
 800532c:	4b78      	ldr	r3, [pc, #480]	; (8005510 <main+0x2f8>)
 800532e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800533a:	4b79      	ldr	r3, [pc, #484]	; (8005520 <main+0x308>)
 800533c:	ed93 7a00 	vldr	s14, [r3]
 8005340:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8005528 <main+0x310>
 8005344:	eef0 0a47 	vmov.f32	s1, s14
 8005348:	eeb0 0a67 	vmov.f32	s0, s15
 800534c:	f7fe f8d8 	bl	8003500 <HallActualize>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00e      	beq.n	8005374 <main+0x15c>
		  {
			  HallLeftStep = SerialControlWheelsResponce.WheelLeftSteps;
 8005356:	4b6e      	ldr	r3, [pc, #440]	; (8005510 <main+0x2f8>)
 8005358:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005364:	4b71      	ldr	r3, [pc, #452]	; (800552c <main+0x314>)
 8005366:	edc3 7a00 	vstr	s15, [r3]
			  HallLeftStepPast = HallLeftStep;
 800536a:	4b70      	ldr	r3, [pc, #448]	; (800552c <main+0x314>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a6c      	ldr	r2, [pc, #432]	; (8005520 <main+0x308>)
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e003      	b.n	800537c <main+0x164>
		  }
		  else
		  {
			  HallLeftStep = HallLeftStepPast;
 8005374:	4b6a      	ldr	r3, [pc, #424]	; (8005520 <main+0x308>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a6c      	ldr	r2, [pc, #432]	; (800552c <main+0x314>)
 800537a:	6013      	str	r3, [r2, #0]
		  }

		  if (HallActualize(SerialControlWheelsResponce.WheelRightSteps, HallRightStepPast, MOTHERBOARD_DIFF))
 800537c:	4b64      	ldr	r3, [pc, #400]	; (8005510 <main+0x2f8>)
 800537e:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800538a:	4b66      	ldr	r3, [pc, #408]	; (8005524 <main+0x30c>)
 800538c:	ed93 7a00 	vldr	s14, [r3]
 8005390:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8005528 <main+0x310>
 8005394:	eef0 0a47 	vmov.f32	s1, s14
 8005398:	eeb0 0a67 	vmov.f32	s0, s15
 800539c:	f7fe f8b0 	bl	8003500 <HallActualize>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00e      	beq.n	80053c4 <main+0x1ac>
		  {
			  HallRightStep = SerialControlWheelsResponce.WheelRightSteps;
 80053a6:	4b5a      	ldr	r3, [pc, #360]	; (8005510 <main+0x2f8>)
 80053a8:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053b4:	4b5e      	ldr	r3, [pc, #376]	; (8005530 <main+0x318>)
 80053b6:	edc3 7a00 	vstr	s15, [r3]
			  HallRightStepPast = HallRightStep;
 80053ba:	4b5d      	ldr	r3, [pc, #372]	; (8005530 <main+0x318>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a59      	ldr	r2, [pc, #356]	; (8005524 <main+0x30c>)
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e003      	b.n	80053cc <main+0x1b4>
		  }
		  else
		  {
			  HallRightStep = HallRightStepPast;
 80053c4:	4b57      	ldr	r3, [pc, #348]	; (8005524 <main+0x30c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a59      	ldr	r2, [pc, #356]	; (8005530 <main+0x318>)
 80053ca:	6013      	str	r3, [r2, #0]
		  }

		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 80053cc:	f000 ffcc 	bl	8006368 <HAL_GetTick>
 80053d0:	4603      	mov	r3, r0
 80053d2:	4a4d      	ldr	r2, [pc, #308]	; (8005508 <main+0x2f0>)
 80053d4:	6013      	str	r3, [r2, #0]

		  switch (SerialControlWheelsResponce.ParameterNumber)
 80053d6:	4b4e      	ldr	r3, [pc, #312]	; (8005510 <main+0x2f8>)
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b07      	cmp	r3, #7
 80053dc:	f200 80c1 	bhi.w	8005562 <main+0x34a>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <main+0x1d0>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	08005409 	.word	0x08005409
 80053ec:	0800549f 	.word	0x0800549f
 80053f0:	080054ab 	.word	0x080054ab
 80053f4:	080054b7 	.word	0x080054b7
 80053f8:	080054c3 	.word	0x080054c3
 80053fc:	080054cf 	.word	0x080054cf
 8005400:	080054db 	.word	0x080054db
 8005404:	080054e7 	.word	0x080054e7
		  {
		  case 0:
			  Voltage = SerialControlWheelsResponce.ParameterValue;
 8005408:	4b41      	ldr	r3, [pc, #260]	; (8005510 <main+0x2f8>)
 800540a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800540e:	4a49      	ldr	r2, [pc, #292]	; (8005534 <main+0x31c>)
 8005410:	6013      	str	r3, [r2, #0]
			  Battery += ((Interpolation(Voltage, 28, 41) * 100.0) - Battery) * 0.01;
 8005412:	4b48      	ldr	r3, [pc, #288]	; (8005534 <main+0x31c>)
 8005414:	edd3 7a00 	vldr	s15, [r3]
 8005418:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8005538 <main+0x320>
 800541c:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 8005420:	eeb0 0a67 	vmov.f32	s0, s15
 8005424:	f7ff fb68 	bl	8004af8 <Interpolation>
 8005428:	ee10 3a10 	vmov	r3, s0
 800542c:	4618      	mov	r0, r3
 800542e:	f7fb f883 	bl	8000538 <__aeabi_f2d>
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	4b41      	ldr	r3, [pc, #260]	; (800553c <main+0x324>)
 8005438:	f7fb f8d6 	bl	80005e8 <__aeabi_dmul>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4614      	mov	r4, r2
 8005442:	461d      	mov	r5, r3
 8005444:	4b3e      	ldr	r3, [pc, #248]	; (8005540 <main+0x328>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f7fb f875 	bl	8000538 <__aeabi_f2d>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4620      	mov	r0, r4
 8005454:	4629      	mov	r1, r5
 8005456:	f7fa ff0f 	bl	8000278 <__aeabi_dsub>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4610      	mov	r0, r2
 8005460:	4619      	mov	r1, r3
 8005462:	a325      	add	r3, pc, #148	; (adr r3, 80054f8 <main+0x2e0>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f7fb f8be 	bl	80005e8 <__aeabi_dmul>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4614      	mov	r4, r2
 8005472:	461d      	mov	r5, r3
 8005474:	4b32      	ldr	r3, [pc, #200]	; (8005540 <main+0x328>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f7fb f85d 	bl	8000538 <__aeabi_f2d>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4620      	mov	r0, r4
 8005484:	4629      	mov	r1, r5
 8005486:	f7fa fef9 	bl	800027c <__adddf3>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4610      	mov	r0, r2
 8005490:	4619      	mov	r1, r3
 8005492:	f7fb fb6b 	bl	8000b6c <__aeabi_d2f>
 8005496:	4603      	mov	r3, r0
 8005498:	4a29      	ldr	r2, [pc, #164]	; (8005540 <main+0x328>)
 800549a:	6013      	str	r3, [r2, #0]
			  break;
 800549c:	e061      	b.n	8005562 <main+0x34a>
		  case 1:
			  CurrentLeft = SerialControlWheelsResponce.ParameterValue;
 800549e:	4b1c      	ldr	r3, [pc, #112]	; (8005510 <main+0x2f8>)
 80054a0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80054a4:	4a27      	ldr	r2, [pc, #156]	; (8005544 <main+0x32c>)
 80054a6:	6013      	str	r3, [r2, #0]
		      break;
 80054a8:	e05b      	b.n	8005562 <main+0x34a>
		  case 2:
		      CurrentRight = SerialControlWheelsResponce.ParameterValue;
 80054aa:	4b19      	ldr	r3, [pc, #100]	; (8005510 <main+0x2f8>)
 80054ac:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80054b0:	4a25      	ldr	r2, [pc, #148]	; (8005548 <main+0x330>)
 80054b2:	6013      	str	r3, [r2, #0]
		      break;
 80054b4:	e055      	b.n	8005562 <main+0x34a>
		  case 3:
		      RPSLeft = SerialControlWheelsResponce.ParameterValue;
 80054b6:	4b16      	ldr	r3, [pc, #88]	; (8005510 <main+0x2f8>)
 80054b8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80054bc:	4a23      	ldr	r2, [pc, #140]	; (800554c <main+0x334>)
 80054be:	6013      	str	r3, [r2, #0]
		      break;
 80054c0:	e04f      	b.n	8005562 <main+0x34a>
		  case 4:
		      RPSRight = SerialControlWheelsResponce.ParameterValue;
 80054c2:	4b13      	ldr	r3, [pc, #76]	; (8005510 <main+0x2f8>)
 80054c4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80054c8:	4a21      	ldr	r2, [pc, #132]	; (8005550 <main+0x338>)
 80054ca:	6013      	str	r3, [r2, #0]
		      break;
 80054cc:	e049      	b.n	8005562 <main+0x34a>
		  case 5:
		      OverCurrCount = SerialControlWheelsResponce.ParameterValue;
 80054ce:	4b10      	ldr	r3, [pc, #64]	; (8005510 <main+0x2f8>)
 80054d0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80054d4:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <main+0x33c>)
 80054d6:	6013      	str	r3, [r2, #0]
		      break;
 80054d8:	e043      	b.n	8005562 <main+0x34a>
		  case 6:
		      ConnErrCount = SerialControlWheelsResponce.ParameterValue;
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <main+0x2f8>)
 80054dc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80054e0:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <main+0x340>)
 80054e2:	6013      	str	r3, [r2, #0]
		      break;
 80054e4:	e03d      	b.n	8005562 <main+0x34a>
		  case 7:
		      CommTime = SerialControlWheelsResponce.ParameterValue;
 80054e6:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <main+0x2f8>)
 80054e8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80054ec:	4a1b      	ldr	r2, [pc, #108]	; (800555c <main+0x344>)
 80054ee:	6013      	str	r3, [r2, #0]
		      break;
 80054f0:	e037      	b.n	8005562 <main+0x34a>
 80054f2:	bf00      	nop
 80054f4:	f3af 8000 	nop.w
 80054f8:	47ae147b 	.word	0x47ae147b
 80054fc:	3f847ae1 	.word	0x3f847ae1
 8005500:	20000e90 	.word	0x20000e90
 8005504:	20000f98 	.word	0x20000f98
 8005508:	20000fac 	.word	0x20000fac
 800550c:	20000d9d 	.word	0x20000d9d
 8005510:	20000e98 	.word	0x20000e98
 8005514:	20001310 	.word	0x20001310
 8005518:	40020c00 	.word	0x40020c00
 800551c:	20000dcc 	.word	0x20000dcc
 8005520:	20000dd0 	.word	0x20000dd0
 8005524:	20000dd4 	.word	0x20000dd4
 8005528:	42c80000 	.word	0x42c80000
 800552c:	20000e94 	.word	0x20000e94
 8005530:	20000f78 	.word	0x20000f78
 8005534:	20000ec4 	.word	0x20000ec4
 8005538:	42240000 	.word	0x42240000
 800553c:	40590000 	.word	0x40590000
 8005540:	20000f44 	.word	0x20000f44
 8005544:	20000e70 	.word	0x20000e70
 8005548:	20000f40 	.word	0x20000f40
 800554c:	20000fe0 	.word	0x20000fe0
 8005550:	20000fb0 	.word	0x20000fb0
 8005554:	20000e80 	.word	0x20000e80
 8005558:	20000fa8 	.word	0x20000fa8
 800555c:	20000fe4 	.word	0x20000fe4
		  }
	  }
 8005560:	bf00      	nop
 		  HAL_UART_Transmit_DMA(&huart4, (uint8_t*)SerialOnBoardResponce.Buffer, ON_BOARD_CONTROL_RESPONCE_SIZE);

		  PackageLastTimeReset_OnBoardPC = HAL_GetTick();
	  }*/

	  if (HAL_GetTick() - LastUpdateLogic > 10)
 8005562:	f000 ff01 	bl	8006368 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <main+0x3ac>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b0a      	cmp	r3, #10
 8005570:	d912      	bls.n	8005598 <main+0x380>

	  {
		  BALANCE_Prepare();
 8005572:	f7fe fc85 	bl	8003e80 <BALANCE_Prepare>
		  BALANCE_Calculate_Speeds();
 8005576:	f7fe fcff 	bl	8003f78 <BALANCE_Calculate_Speeds>
		  BALANCE_Position_Linear_Control();
 800557a:	f7fe fe39 	bl	80041f0 <BALANCE_Position_Linear_Control>
		  BALANCE_Speed_LinearControl();
 800557e:	f7fe fee3 	bl	8004348 <BALANCE_Speed_LinearControl>
		  BALANCE_Position_Angular_Control();
 8005582:	f7ff f891 	bl	80046a8 <BALANCE_Position_Angular_Control>
		  BALANCE_LOOP();
 8005586:	f7ff f937 	bl	80047f8 <BALANCE_LOOP>
		  BALANCE_Result_Loop();
 800558a:	f7ff f9f1 	bl	8004970 <BALANCE_Result_Loop>
		  LastUpdateLogic = HAL_GetTick();
 800558e:	f000 feeb 	bl	8006368 <HAL_GetTick>
 8005592:	4603      	mov	r3, r0
 8005594:	4a0b      	ldr	r2, [pc, #44]	; (80055c4 <main+0x3ac>)
 8005596:	6013      	str	r3, [r2, #0]
	  }

	  if (debug_led_en == 1)
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <main+0x3b0>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <main+0x38c>
	  {
		  WS2812_UPDATE();
 80055a0:	f7ff fddc 	bl	800515c <WS2812_UPDATE>
	  }

	  if (debug_driver_en == 1)
 80055a4:	4b09      	ldr	r3, [pc, #36]	; (80055cc <main+0x3b4>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d108      	bne.n	80055be <main+0x3a6>
	  {
		  StepControl(debug_direction, debug_period, debug_steps);
 80055ac:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <main+0x3b8>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <main+0x3bc>)
 80055b2:	6811      	ldr	r1, [r2, #0]
 80055b4:	4a08      	ldr	r2, [pc, #32]	; (80055d8 <main+0x3c0>)
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff fb5f 	bl	8004c7c <StepControl>
	  }

	  SERIAL_CONTROL_LOOP();
 80055be:	f7fe fc35 	bl	8003e2c <SERIAL_CONTROL_LOOP>
	  if (HAL_GetTick() - LastUpdateIMU > 1)
 80055c2:	e64b      	b.n	800525c <main+0x44>
 80055c4:	20000ed0 	.word	0x20000ed0
 80055c8:	20000dfe 	.word	0x20000dfe
 80055cc:	20000dfc 	.word	0x20000dfc
 80055d0:	20000dfd 	.word	0x20000dfd
 80055d4:	20000038 	.word	0x20000038
 80055d8:	20000034 	.word	0x20000034

080055dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b094      	sub	sp, #80	; 0x50
 80055e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80055e2:	f107 0320 	add.w	r3, r7, #32
 80055e6:	2230      	movs	r2, #48	; 0x30
 80055e8:	2100      	movs	r1, #0
 80055ea:	4618      	mov	r0, r3
 80055ec:	f006 fe2a 	bl	800c244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055f0:	f107 030c 	add.w	r3, r7, #12
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	605a      	str	r2, [r3, #4]
 80055fa:	609a      	str	r2, [r3, #8]
 80055fc:	60da      	str	r2, [r3, #12]
 80055fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005600:	2300      	movs	r3, #0
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	4b28      	ldr	r3, [pc, #160]	; (80056a8 <SystemClock_Config+0xcc>)
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <SystemClock_Config+0xcc>)
 800560a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560e:	6413      	str	r3, [r2, #64]	; 0x40
 8005610:	4b25      	ldr	r3, [pc, #148]	; (80056a8 <SystemClock_Config+0xcc>)
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800561c:	2300      	movs	r3, #0
 800561e:	607b      	str	r3, [r7, #4]
 8005620:	4b22      	ldr	r3, [pc, #136]	; (80056ac <SystemClock_Config+0xd0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a21      	ldr	r2, [pc, #132]	; (80056ac <SystemClock_Config+0xd0>)
 8005626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	4b1f      	ldr	r3, [pc, #124]	; (80056ac <SystemClock_Config+0xd0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005638:	2301      	movs	r3, #1
 800563a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800563c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005642:	2302      	movs	r3, #2
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800564c:	2304      	movs	r3, #4
 800564e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005650:	23a8      	movs	r3, #168	; 0xa8
 8005652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005654:	2302      	movs	r3, #2
 8005656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005658:	2304      	movs	r3, #4
 800565a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800565c:	f107 0320 	add.w	r3, r7, #32
 8005660:	4618      	mov	r0, r3
 8005662:	f002 f995 	bl	8007990 <HAL_RCC_OscConfig>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800566c:	f000 f820 	bl	80056b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005670:	230f      	movs	r3, #15
 8005672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005674:	2302      	movs	r3, #2
 8005676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800567c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005688:	f107 030c 	add.w	r3, r7, #12
 800568c:	2105      	movs	r1, #5
 800568e:	4618      	mov	r0, r3
 8005690:	f002 fbf6 	bl	8007e80 <HAL_RCC_ClockConfig>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800569a:	f000 f809 	bl	80056b0 <Error_Handler>
  }
}
 800569e:	bf00      	nop
 80056a0:	3750      	adds	r7, #80	; 0x50
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40023800 	.word	0x40023800
 80056ac:	40007000 	.word	0x40007000

080056b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056b4:	b672      	cpsid	i
}
 80056b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80056b8:	e7fe      	b.n	80056b8 <Error_Handler+0x8>
	...

080056bc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80056c0:	4b17      	ldr	r3, [pc, #92]	; (8005720 <MX_SPI2_Init+0x64>)
 80056c2:	4a18      	ldr	r2, [pc, #96]	; (8005724 <MX_SPI2_Init+0x68>)
 80056c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80056c6:	4b16      	ldr	r3, [pc, #88]	; (8005720 <MX_SPI2_Init+0x64>)
 80056c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80056cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80056ce:	4b14      	ldr	r3, [pc, #80]	; (8005720 <MX_SPI2_Init+0x64>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80056d4:	4b12      	ldr	r3, [pc, #72]	; (8005720 <MX_SPI2_Init+0x64>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80056da:	4b11      	ldr	r3, [pc, #68]	; (8005720 <MX_SPI2_Init+0x64>)
 80056dc:	2202      	movs	r2, #2
 80056de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80056e0:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <MX_SPI2_Init+0x64>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80056e6:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <MX_SPI2_Init+0x64>)
 80056e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80056ee:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <MX_SPI2_Init+0x64>)
 80056f0:	2210      	movs	r2, #16
 80056f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80056f4:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <MX_SPI2_Init+0x64>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <MX_SPI2_Init+0x64>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005700:	4b07      	ldr	r3, [pc, #28]	; (8005720 <MX_SPI2_Init+0x64>)
 8005702:	2200      	movs	r2, #0
 8005704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <MX_SPI2_Init+0x64>)
 8005708:	220a      	movs	r2, #10
 800570a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800570c:	4804      	ldr	r0, [pc, #16]	; (8005720 <MX_SPI2_Init+0x64>)
 800570e:	f002 fdb3 	bl	8008278 <HAL_SPI_Init>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005718:	f7ff ffca 	bl	80056b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800571c:	bf00      	nop
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20001034 	.word	0x20001034
 8005724:	40003800 	.word	0x40003800

08005728 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	; 0x28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005730:	f107 0314 	add.w	r3, r7, #20
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	609a      	str	r2, [r3, #8]
 800573c:	60da      	str	r2, [r3, #12]
 800573e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a19      	ldr	r2, [pc, #100]	; (80057ac <HAL_SPI_MspInit+0x84>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d12c      	bne.n	80057a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	4b18      	ldr	r3, [pc, #96]	; (80057b0 <HAL_SPI_MspInit+0x88>)
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	4a17      	ldr	r2, [pc, #92]	; (80057b0 <HAL_SPI_MspInit+0x88>)
 8005754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005758:	6413      	str	r3, [r2, #64]	; 0x40
 800575a:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <HAL_SPI_MspInit+0x88>)
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <HAL_SPI_MspInit+0x88>)
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <HAL_SPI_MspInit+0x88>)
 8005770:	f043 0302 	orr.w	r3, r3, #2
 8005774:	6313      	str	r3, [r2, #48]	; 0x30
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <HAL_SPI_MspInit+0x88>)
 8005778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 8005782:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005788:	2302      	movs	r3, #2
 800578a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578c:	2300      	movs	r3, #0
 800578e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005790:	2303      	movs	r3, #3
 8005792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005794:	2305      	movs	r3, #5
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005798:	f107 0314 	add.w	r3, r7, #20
 800579c:	4619      	mov	r1, r3
 800579e:	4805      	ldr	r0, [pc, #20]	; (80057b4 <HAL_SPI_MspInit+0x8c>)
 80057a0:	f001 ff26 	bl	80075f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80057a4:	bf00      	nop
 80057a6:	3728      	adds	r7, #40	; 0x28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40003800 	.word	0x40003800
 80057b0:	40023800 	.word	0x40023800
 80057b4:	40020400 	.word	0x40020400

080057b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057be:	2300      	movs	r3, #0
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	4b10      	ldr	r3, [pc, #64]	; (8005804 <HAL_MspInit+0x4c>)
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	4a0f      	ldr	r2, [pc, #60]	; (8005804 <HAL_MspInit+0x4c>)
 80057c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057cc:	6453      	str	r3, [r2, #68]	; 0x44
 80057ce:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <HAL_MspInit+0x4c>)
 80057d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d6:	607b      	str	r3, [r7, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057da:	2300      	movs	r3, #0
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	4b09      	ldr	r3, [pc, #36]	; (8005804 <HAL_MspInit+0x4c>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	4a08      	ldr	r2, [pc, #32]	; (8005804 <HAL_MspInit+0x4c>)
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <HAL_MspInit+0x4c>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	603b      	str	r3, [r7, #0]
 80057f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40023800 	.word	0x40023800

08005808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800580c:	e7fe      	b.n	800580c <NMI_Handler+0x4>

0800580e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800580e:	b480      	push	{r7}
 8005810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005812:	e7fe      	b.n	8005812 <HardFault_Handler+0x4>

08005814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005818:	e7fe      	b.n	8005818 <MemManage_Handler+0x4>

0800581a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800581a:	b480      	push	{r7}
 800581c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800581e:	e7fe      	b.n	800581e <BusFault_Handler+0x4>

08005820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005824:	e7fe      	b.n	8005824 <UsageFault_Handler+0x4>

08005826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005826:	b480      	push	{r7}
 8005828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800582a:	bf00      	nop
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005838:	bf00      	nop
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005842:	b480      	push	{r7}
 8005844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005846:	bf00      	nop
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005854:	f000 fd74 	bl	8006340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005858:	bf00      	nop
 800585a:	bd80      	pop	{r7, pc}

0800585c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005860:	4802      	ldr	r0, [pc, #8]	; (800586c <DMA1_Stream2_IRQHandler+0x10>)
 8005862:	f001 fc5b 	bl	800711c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	200011ac 	.word	0x200011ac

08005870 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005874:	4802      	ldr	r0, [pc, #8]	; (8005880 <DMA1_Stream4_IRQHandler+0x10>)
 8005876:	f001 fc51 	bl	800711c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800587a:	bf00      	nop
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20001354 	.word	0x20001354

08005884 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005888:	4802      	ldr	r0, [pc, #8]	; (8005894 <DMA1_Stream5_IRQHandler+0x10>)
 800588a:	f001 fc47 	bl	800711c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800588e:	bf00      	nop
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	2000120c 	.word	0x2000120c

08005898 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800589c:	4802      	ldr	r0, [pc, #8]	; (80058a8 <DMA1_Stream6_IRQHandler+0x10>)
 800589e:	f001 fc3d 	bl	800711c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80058a2:	bf00      	nop
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	2000126c 	.word	0x2000126c

080058ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058b0:	4802      	ldr	r0, [pc, #8]	; (80058bc <USART2_IRQHandler+0x10>)
 80058b2:	f004 fbf9 	bl	800a0a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20001310 	.word	0x20001310

080058c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80058c4:	4802      	ldr	r0, [pc, #8]	; (80058d0 <UART4_IRQHandler+0x10>)
 80058c6:	f004 fbef 	bl	800a0a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80058ca:	bf00      	nop
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	200012cc 	.word	0x200012cc

080058d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
	return 1;
 80058d8:	2301      	movs	r3, #1
}
 80058da:	4618      	mov	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <_kill>:

int _kill(int pid, int sig)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80058ee:	f006 fc7f 	bl	800c1f0 <__errno>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2216      	movs	r2, #22
 80058f6:	601a      	str	r2, [r3, #0]
	return -1;
 80058f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <_exit>:

void _exit (int status)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800590c:	f04f 31ff 	mov.w	r1, #4294967295
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff ffe7 	bl	80058e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005916:	e7fe      	b.n	8005916 <_exit+0x12>

08005918 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e00a      	b.n	8005940 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800592a:	f3af 8000 	nop.w
 800592e:	4601      	mov	r1, r0
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	60ba      	str	r2, [r7, #8]
 8005936:	b2ca      	uxtb	r2, r1
 8005938:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	3301      	adds	r3, #1
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	429a      	cmp	r2, r3
 8005946:	dbf0      	blt.n	800592a <_read+0x12>
	}

return len;
 8005948:	687b      	ldr	r3, [r7, #4]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b086      	sub	sp, #24
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	e009      	b.n	8005978 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	60ba      	str	r2, [r7, #8]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	3301      	adds	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	dbf1      	blt.n	8005964 <_write+0x12>
	}
	return len;
 8005980:	687b      	ldr	r3, [r7, #4]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <_close>:

int _close(int file)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
	return -1;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059b2:	605a      	str	r2, [r3, #4]
	return 0;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <_isatty>:

int _isatty(int file)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
	return 1;
 80059ca:	2301      	movs	r3, #1
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
	return 0;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059fc:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <_sbrk+0x5c>)
 80059fe:	4b15      	ldr	r3, [pc, #84]	; (8005a54 <_sbrk+0x60>)
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a08:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <_sbrk+0x64>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a10:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <_sbrk+0x64>)
 8005a12:	4a12      	ldr	r2, [pc, #72]	; (8005a5c <_sbrk+0x68>)
 8005a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a16:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <_sbrk+0x64>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d207      	bcs.n	8005a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a24:	f006 fbe4 	bl	800c1f0 <__errno>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	220c      	movs	r2, #12
 8005a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a32:	e009      	b.n	8005a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a34:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <_sbrk+0x64>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a3a:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <_sbrk+0x64>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4413      	add	r3, r2
 8005a42:	4a05      	ldr	r2, [pc, #20]	; (8005a58 <_sbrk+0x64>)
 8005a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a46:	68fb      	ldr	r3, [r7, #12]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20020000 	.word	0x20020000
 8005a54:	00000400 	.word	0x00000400
 8005a58:	20000e0c 	.word	0x20000e0c
 8005a5c:	200013c8 	.word	0x200013c8

08005a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <SystemInit+0x20>)
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6a:	4a05      	ldr	r2, [pc, #20]	; (8005a80 <SystemInit+0x20>)
 8005a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08e      	sub	sp, #56	; 0x38
 8005a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	605a      	str	r2, [r3, #4]
 8005a94:	609a      	str	r2, [r3, #8]
 8005a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a98:	f107 0320 	add.w	r3, r7, #32
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	605a      	str	r2, [r3, #4]
 8005aaa:	609a      	str	r2, [r3, #8]
 8005aac:	60da      	str	r2, [r3, #12]
 8005aae:	611a      	str	r2, [r3, #16]
 8005ab0:	615a      	str	r2, [r3, #20]
 8005ab2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005ab4:	4b3d      	ldr	r3, [pc, #244]	; (8005bac <MX_TIM2_Init+0x128>)
 8005ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005aba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005abc:	4b3b      	ldr	r3, [pc, #236]	; (8005bac <MX_TIM2_Init+0x128>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ac2:	4b3a      	ldr	r3, [pc, #232]	; (8005bac <MX_TIM2_Init+0x128>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 209;
 8005ac8:	4b38      	ldr	r3, [pc, #224]	; (8005bac <MX_TIM2_Init+0x128>)
 8005aca:	22d1      	movs	r2, #209	; 0xd1
 8005acc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ace:	4b37      	ldr	r3, [pc, #220]	; (8005bac <MX_TIM2_Init+0x128>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ad4:	4b35      	ldr	r3, [pc, #212]	; (8005bac <MX_TIM2_Init+0x128>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005ada:	4834      	ldr	r0, [pc, #208]	; (8005bac <MX_TIM2_Init+0x128>)
 8005adc:	f003 f974 	bl	8008dc8 <HAL_TIM_Base_Init>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8005ae6:	f7ff fde3 	bl	80056b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005af4:	4619      	mov	r1, r3
 8005af6:	482d      	ldr	r0, [pc, #180]	; (8005bac <MX_TIM2_Init+0x128>)
 8005af8:	f003 fc98 	bl	800942c <HAL_TIM_ConfigClockSource>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8005b02:	f7ff fdd5 	bl	80056b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005b06:	4829      	ldr	r0, [pc, #164]	; (8005bac <MX_TIM2_Init+0x128>)
 8005b08:	f003 f9ad 	bl	8008e66 <HAL_TIM_PWM_Init>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8005b12:	f7ff fdcd 	bl	80056b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b16:	2300      	movs	r3, #0
 8005b18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b1e:	f107 0320 	add.w	r3, r7, #32
 8005b22:	4619      	mov	r1, r3
 8005b24:	4821      	ldr	r0, [pc, #132]	; (8005bac <MX_TIM2_Init+0x128>)
 8005b26:	f004 f947 	bl	8009db8 <HAL_TIMEx_MasterConfigSynchronization>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8005b30:	f7ff fdbe 	bl	80056b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b34:	2360      	movs	r3, #96	; 0x60
 8005b36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b44:	1d3b      	adds	r3, r7, #4
 8005b46:	2200      	movs	r2, #0
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4818      	ldr	r0, [pc, #96]	; (8005bac <MX_TIM2_Init+0x128>)
 8005b4c:	f003 fbac 	bl	80092a8 <HAL_TIM_PWM_ConfigChannel>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8005b56:	f7ff fdab 	bl	80056b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4812      	ldr	r0, [pc, #72]	; (8005bac <MX_TIM2_Init+0x128>)
 8005b62:	f003 fba1 	bl	80092a8 <HAL_TIM_PWM_ConfigChannel>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8005b6c:	f7ff fda0 	bl	80056b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	2208      	movs	r2, #8
 8005b74:	4619      	mov	r1, r3
 8005b76:	480d      	ldr	r0, [pc, #52]	; (8005bac <MX_TIM2_Init+0x128>)
 8005b78:	f003 fb96 	bl	80092a8 <HAL_TIM_PWM_ConfigChannel>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8005b82:	f7ff fd95 	bl	80056b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005b86:	1d3b      	adds	r3, r7, #4
 8005b88:	220c      	movs	r2, #12
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4807      	ldr	r0, [pc, #28]	; (8005bac <MX_TIM2_Init+0x128>)
 8005b8e:	f003 fb8b 	bl	80092a8 <HAL_TIM_PWM_ConfigChannel>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8005b98:	f7ff fd8a 	bl	80056b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005b9c:	4803      	ldr	r0, [pc, #12]	; (8005bac <MX_TIM2_Init+0x128>)
 8005b9e:	f000 f923 	bl	8005de8 <HAL_TIM_MspPostInit>

}
 8005ba2:	bf00      	nop
 8005ba4:	3738      	adds	r7, #56	; 0x38
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	200010d4 	.word	0x200010d4

08005bb0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005bbe:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <MX_TIM6_Init+0x64>)
 8005bc0:	4a15      	ldr	r2, [pc, #84]	; (8005c18 <MX_TIM6_Init+0x68>)
 8005bc2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8005bc4:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <MX_TIM6_Init+0x64>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bca:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <MX_TIM6_Init+0x64>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8005bd0:	4b10      	ldr	r3, [pc, #64]	; (8005c14 <MX_TIM6_Init+0x64>)
 8005bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bd6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bd8:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <MX_TIM6_Init+0x64>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005bde:	480d      	ldr	r0, [pc, #52]	; (8005c14 <MX_TIM6_Init+0x64>)
 8005be0:	f003 f8f2 	bl	8008dc8 <HAL_TIM_Base_Init>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005bea:	f7ff fd61 	bl	80056b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4806      	ldr	r0, [pc, #24]	; (8005c14 <MX_TIM6_Init+0x64>)
 8005bfc:	f004 f8dc 	bl	8009db8 <HAL_TIMEx_MasterConfigSynchronization>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005c06:	f7ff fd53 	bl	80056b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	2000108c 	.word	0x2000108c
 8005c18:	40001000 	.word	0x40001000

08005c1c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c22:	463b      	mov	r3, r7
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005c2a:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c2c:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <MX_TIM7_Init+0x68>)
 8005c2e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8005c30:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c36:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c42:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005c4a:	480d      	ldr	r0, [pc, #52]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c4c:	f003 f8bc 	bl	8008dc8 <HAL_TIM_Base_Init>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8005c56:	f7ff fd2b 	bl	80056b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005c62:	463b      	mov	r3, r7
 8005c64:	4619      	mov	r1, r3
 8005c66:	4806      	ldr	r0, [pc, #24]	; (8005c80 <MX_TIM7_Init+0x64>)
 8005c68:	f004 f8a6 	bl	8009db8 <HAL_TIMEx_MasterConfigSynchronization>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8005c72:	f7ff fd1d 	bl	80056b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20001164 	.word	0x20001164
 8005c84:	40001400 	.word	0x40001400

08005c88 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c8e:	1d3b      	adds	r3, r7, #4
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	60da      	str	r2, [r3, #12]
 8005c9a:	611a      	str	r2, [r3, #16]
 8005c9c:	615a      	str	r2, [r3, #20]
 8005c9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005ca0:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <MX_TIM14_Init+0x94>)
 8005ca2:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <MX_TIM14_Init+0x98>)
 8005ca4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 720;
 8005ca6:	4b1d      	ldr	r3, [pc, #116]	; (8005d1c <MX_TIM14_Init+0x94>)
 8005ca8:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8005cac:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cae:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <MX_TIM14_Init+0x94>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 8005cb4:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <MX_TIM14_Init+0x94>)
 8005cb6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005cba:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cbc:	4b17      	ldr	r3, [pc, #92]	; (8005d1c <MX_TIM14_Init+0x94>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cc2:	4b16      	ldr	r3, [pc, #88]	; (8005d1c <MX_TIM14_Init+0x94>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005cc8:	4814      	ldr	r0, [pc, #80]	; (8005d1c <MX_TIM14_Init+0x94>)
 8005cca:	f003 f87d 	bl	8008dc8 <HAL_TIM_Base_Init>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8005cd4:	f7ff fcec 	bl	80056b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8005cd8:	4810      	ldr	r0, [pc, #64]	; (8005d1c <MX_TIM14_Init+0x94>)
 8005cda:	f003 f8c4 	bl	8008e66 <HAL_TIM_PWM_Init>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8005ce4:	f7ff fce4 	bl	80056b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ce8:	2360      	movs	r3, #96	; 0x60
 8005cea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8005cec:	2332      	movs	r3, #50	; 0x32
 8005cee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4807      	ldr	r0, [pc, #28]	; (8005d1c <MX_TIM14_Init+0x94>)
 8005d00:	f003 fad2 	bl	80092a8 <HAL_TIM_PWM_ConfigChannel>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8005d0a:	f7ff fcd1 	bl	80056b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8005d0e:	4803      	ldr	r0, [pc, #12]	; (8005d1c <MX_TIM14_Init+0x94>)
 8005d10:	f000 f86a 	bl	8005de8 <HAL_TIM_MspPostInit>

}
 8005d14:	bf00      	nop
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	2000111c 	.word	0x2000111c
 8005d20:	40002000 	.word	0x40002000

08005d24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d34:	d10e      	bne.n	8005d54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	4b27      	ldr	r3, [pc, #156]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	4a26      	ldr	r2, [pc, #152]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005d40:	f043 0301 	orr.w	r3, r3, #1
 8005d44:	6413      	str	r3, [r2, #64]	; 0x40
 8005d46:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8005d52:	e03a      	b.n	8005dca <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM6)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a20      	ldr	r2, [pc, #128]	; (8005ddc <HAL_TIM_Base_MspInit+0xb8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d10e      	bne.n	8005d7c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005d5e:	2300      	movs	r3, #0
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	4a1c      	ldr	r2, [pc, #112]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005d68:	f043 0310 	orr.w	r3, r3, #16
 8005d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	693b      	ldr	r3, [r7, #16]
}
 8005d7a:	e026      	b.n	8005dca <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM7)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <HAL_TIM_Base_MspInit+0xbc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d10e      	bne.n	8005da4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005d86:	2300      	movs	r3, #0
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	4b13      	ldr	r3, [pc, #76]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	4a12      	ldr	r2, [pc, #72]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005d90:	f043 0320 	orr.w	r3, r3, #32
 8005d94:	6413      	str	r3, [r2, #64]	; 0x40
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	e012      	b.n	8005dca <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM14)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a0e      	ldr	r2, [pc, #56]	; (8005de4 <HAL_TIM_Base_MspInit+0xc0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d10d      	bne.n	8005dca <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005dae:	2300      	movs	r3, #0
 8005db0:	60bb      	str	r3, [r7, #8]
 8005db2:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	4a08      	ldr	r2, [pc, #32]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <HAL_TIM_Base_MspInit+0xb4>)
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	60bb      	str	r3, [r7, #8]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	40001000 	.word	0x40001000
 8005de0:	40001400 	.word	0x40001400
 8005de4:	40002000 	.word	0x40002000

08005de8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	; 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df0:	f107 0314 	add.w	r3, r7, #20
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e08:	d13e      	bne.n	8005e88 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	4b32      	ldr	r3, [pc, #200]	; (8005ed8 <HAL_TIM_MspPostInit+0xf0>)
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	4a31      	ldr	r2, [pc, #196]	; (8005ed8 <HAL_TIM_MspPostInit+0xf0>)
 8005e14:	f043 0301 	orr.w	r3, r3, #1
 8005e18:	6313      	str	r3, [r2, #48]	; 0x30
 8005e1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <HAL_TIM_MspPostInit+0xf0>)
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <HAL_TIM_MspPostInit+0xf0>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	4a2a      	ldr	r2, [pc, #168]	; (8005ed8 <HAL_TIM_MspPostInit+0xf0>)
 8005e30:	f043 0302 	orr.w	r3, r3, #2
 8005e34:	6313      	str	r3, [r2, #48]	; 0x30
 8005e36:	4b28      	ldr	r3, [pc, #160]	; (8005ed8 <HAL_TIM_MspPostInit+0xf0>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_2_Pin|LED_PWM_1_Pin;
 8005e42:	f248 0302 	movw	r3, #32770	; 0x8002
 8005e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e48:	2302      	movs	r3, #2
 8005e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e50:	2300      	movs	r3, #0
 8005e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e54:	2301      	movs	r3, #1
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e58:	f107 0314 	add.w	r3, r7, #20
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	481f      	ldr	r0, [pc, #124]	; (8005edc <HAL_TIM_MspPostInit+0xf4>)
 8005e60:	f001 fbc6 	bl	80075f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_PWM_3_Pin|LED_PWM_4_Pin;
 8005e64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e72:	2300      	movs	r3, #0
 8005e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e76:	2301      	movs	r3, #1
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e7a:	f107 0314 	add.w	r3, r7, #20
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4817      	ldr	r0, [pc, #92]	; (8005ee0 <HAL_TIM_MspPostInit+0xf8>)
 8005e82:	f001 fbb5 	bl	80075f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8005e86:	e022      	b.n	8005ece <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM14)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a15      	ldr	r2, [pc, #84]	; (8005ee4 <HAL_TIM_MspPostInit+0xfc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d11d      	bne.n	8005ece <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e92:	2300      	movs	r3, #0
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	4b10      	ldr	r3, [pc, #64]	; (8005ed8 <HAL_TIM_MspPostInit+0xf0>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	4a0f      	ldr	r2, [pc, #60]	; (8005ed8 <HAL_TIM_MspPostInit+0xf0>)
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <HAL_TIM_MspPostInit+0xf0>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8005eae:	2380      	movs	r3, #128	; 0x80
 8005eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8005ebe:	2309      	movs	r3, #9
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8005ec2:	f107 0314 	add.w	r3, r7, #20
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4804      	ldr	r0, [pc, #16]	; (8005edc <HAL_TIM_MspPostInit+0xf4>)
 8005eca:	f001 fb91 	bl	80075f0 <HAL_GPIO_Init>
}
 8005ece:	bf00      	nop
 8005ed0:	3728      	adds	r7, #40	; 0x28
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	40020000 	.word	0x40020000
 8005ee0:	40020400 	.word	0x40020400
 8005ee4:	40002000 	.word	0x40002000

08005ee8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005eec:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <MX_UART4_Init+0x4c>)
 8005eee:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <MX_UART4_Init+0x50>)
 8005ef0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005ef2:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <MX_UART4_Init+0x4c>)
 8005ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ef8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005efa:	4b0e      	ldr	r3, [pc, #56]	; (8005f34 <MX_UART4_Init+0x4c>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005f00:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <MX_UART4_Init+0x4c>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005f06:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <MX_UART4_Init+0x4c>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <MX_UART4_Init+0x4c>)
 8005f0e:	220c      	movs	r2, #12
 8005f10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f12:	4b08      	ldr	r3, [pc, #32]	; (8005f34 <MX_UART4_Init+0x4c>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f18:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <MX_UART4_Init+0x4c>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005f1e:	4805      	ldr	r0, [pc, #20]	; (8005f34 <MX_UART4_Init+0x4c>)
 8005f20:	f003 ffc6 	bl	8009eb0 <HAL_UART_Init>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8005f2a:	f7ff fbc1 	bl	80056b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005f2e:	bf00      	nop
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	200012cc 	.word	0x200012cc
 8005f38:	40004c00 	.word	0x40004c00

08005f3c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <MX_USART2_UART_Init+0x4c>)
 8005f42:	4a12      	ldr	r2, [pc, #72]	; (8005f8c <MX_USART2_UART_Init+0x50>)
 8005f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8005f46:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <MX_USART2_UART_Init+0x4c>)
 8005f48:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f4e:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <MX_USART2_UART_Init+0x4c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <MX_USART2_UART_Init+0x4c>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <MX_USART2_UART_Init+0x4c>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f60:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <MX_USART2_UART_Init+0x4c>)
 8005f62:	220c      	movs	r2, #12
 8005f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f66:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <MX_USART2_UART_Init+0x4c>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <MX_USART2_UART_Init+0x4c>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f72:	4805      	ldr	r0, [pc, #20]	; (8005f88 <MX_USART2_UART_Init+0x4c>)
 8005f74:	f003 ff9c 	bl	8009eb0 <HAL_UART_Init>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005f7e:	f7ff fb97 	bl	80056b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005f82:	bf00      	nop
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20001310 	.word	0x20001310
 8005f8c:	40004400 	.word	0x40004400

08005f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08c      	sub	sp, #48	; 0x30
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f98:	f107 031c 	add.w	r3, r7, #28
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	609a      	str	r2, [r3, #8]
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a99      	ldr	r2, [pc, #612]	; (8006214 <HAL_UART_MspInit+0x284>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	f040 8094 	bne.w	80060dc <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61bb      	str	r3, [r7, #24]
 8005fb8:	4b97      	ldr	r3, [pc, #604]	; (8006218 <HAL_UART_MspInit+0x288>)
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	4a96      	ldr	r2, [pc, #600]	; (8006218 <HAL_UART_MspInit+0x288>)
 8005fbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8005fc4:	4b94      	ldr	r3, [pc, #592]	; (8006218 <HAL_UART_MspInit+0x288>)
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	4b90      	ldr	r3, [pc, #576]	; (8006218 <HAL_UART_MspInit+0x288>)
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	4a8f      	ldr	r2, [pc, #572]	; (8006218 <HAL_UART_MspInit+0x288>)
 8005fda:	f043 0304 	orr.w	r3, r3, #4
 8005fde:	6313      	str	r3, [r2, #48]	; 0x30
 8005fe0:	4b8d      	ldr	r3, [pc, #564]	; (8006218 <HAL_UART_MspInit+0x288>)
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = JETSON_TX_Pin|JETSON_RX_Pin;
 8005fec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005ffe:	2308      	movs	r3, #8
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006002:	f107 031c 	add.w	r3, r7, #28
 8006006:	4619      	mov	r1, r3
 8006008:	4884      	ldr	r0, [pc, #528]	; (800621c <HAL_UART_MspInit+0x28c>)
 800600a:	f001 faf1 	bl	80075f0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800600e:	4b84      	ldr	r3, [pc, #528]	; (8006220 <HAL_UART_MspInit+0x290>)
 8006010:	4a84      	ldr	r2, [pc, #528]	; (8006224 <HAL_UART_MspInit+0x294>)
 8006012:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8006014:	4b82      	ldr	r3, [pc, #520]	; (8006220 <HAL_UART_MspInit+0x290>)
 8006016:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800601a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800601c:	4b80      	ldr	r3, [pc, #512]	; (8006220 <HAL_UART_MspInit+0x290>)
 800601e:	2200      	movs	r2, #0
 8006020:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006022:	4b7f      	ldr	r3, [pc, #508]	; (8006220 <HAL_UART_MspInit+0x290>)
 8006024:	2200      	movs	r2, #0
 8006026:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006028:	4b7d      	ldr	r3, [pc, #500]	; (8006220 <HAL_UART_MspInit+0x290>)
 800602a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800602e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006030:	4b7b      	ldr	r3, [pc, #492]	; (8006220 <HAL_UART_MspInit+0x290>)
 8006032:	2200      	movs	r2, #0
 8006034:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006036:	4b7a      	ldr	r3, [pc, #488]	; (8006220 <HAL_UART_MspInit+0x290>)
 8006038:	2200      	movs	r2, #0
 800603a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800603c:	4b78      	ldr	r3, [pc, #480]	; (8006220 <HAL_UART_MspInit+0x290>)
 800603e:	2200      	movs	r2, #0
 8006040:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006042:	4b77      	ldr	r3, [pc, #476]	; (8006220 <HAL_UART_MspInit+0x290>)
 8006044:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006048:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800604a:	4b75      	ldr	r3, [pc, #468]	; (8006220 <HAL_UART_MspInit+0x290>)
 800604c:	2200      	movs	r2, #0
 800604e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006050:	4873      	ldr	r0, [pc, #460]	; (8006220 <HAL_UART_MspInit+0x290>)
 8006052:	f000 fecb 	bl	8006dec <HAL_DMA_Init>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800605c:	f7ff fb28 	bl	80056b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a6f      	ldr	r2, [pc, #444]	; (8006220 <HAL_UART_MspInit+0x290>)
 8006064:	639a      	str	r2, [r3, #56]	; 0x38
 8006066:	4a6e      	ldr	r2, [pc, #440]	; (8006220 <HAL_UART_MspInit+0x290>)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800606c:	4b6e      	ldr	r3, [pc, #440]	; (8006228 <HAL_UART_MspInit+0x298>)
 800606e:	4a6f      	ldr	r2, [pc, #444]	; (800622c <HAL_UART_MspInit+0x29c>)
 8006070:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8006072:	4b6d      	ldr	r3, [pc, #436]	; (8006228 <HAL_UART_MspInit+0x298>)
 8006074:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006078:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800607a:	4b6b      	ldr	r3, [pc, #428]	; (8006228 <HAL_UART_MspInit+0x298>)
 800607c:	2240      	movs	r2, #64	; 0x40
 800607e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006080:	4b69      	ldr	r3, [pc, #420]	; (8006228 <HAL_UART_MspInit+0x298>)
 8006082:	2200      	movs	r2, #0
 8006084:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006086:	4b68      	ldr	r3, [pc, #416]	; (8006228 <HAL_UART_MspInit+0x298>)
 8006088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800608c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800608e:	4b66      	ldr	r3, [pc, #408]	; (8006228 <HAL_UART_MspInit+0x298>)
 8006090:	2200      	movs	r2, #0
 8006092:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006094:	4b64      	ldr	r3, [pc, #400]	; (8006228 <HAL_UART_MspInit+0x298>)
 8006096:	2200      	movs	r2, #0
 8006098:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800609a:	4b63      	ldr	r3, [pc, #396]	; (8006228 <HAL_UART_MspInit+0x298>)
 800609c:	2200      	movs	r2, #0
 800609e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80060a0:	4b61      	ldr	r3, [pc, #388]	; (8006228 <HAL_UART_MspInit+0x298>)
 80060a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060a6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80060a8:	4b5f      	ldr	r3, [pc, #380]	; (8006228 <HAL_UART_MspInit+0x298>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80060ae:	485e      	ldr	r0, [pc, #376]	; (8006228 <HAL_UART_MspInit+0x298>)
 80060b0:	f000 fe9c 	bl	8006dec <HAL_DMA_Init>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80060ba:	f7ff faf9 	bl	80056b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a59      	ldr	r2, [pc, #356]	; (8006228 <HAL_UART_MspInit+0x298>)
 80060c2:	635a      	str	r2, [r3, #52]	; 0x34
 80060c4:	4a58      	ldr	r2, [pc, #352]	; (8006228 <HAL_UART_MspInit+0x298>)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80060ca:	2200      	movs	r2, #0
 80060cc:	2100      	movs	r1, #0
 80060ce:	2034      	movs	r0, #52	; 0x34
 80060d0:	f000 fe55 	bl	8006d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80060d4:	2034      	movs	r0, #52	; 0x34
 80060d6:	f000 fe6e 	bl	8006db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80060da:	e097      	b.n	800620c <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART2)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a53      	ldr	r2, [pc, #332]	; (8006230 <HAL_UART_MspInit+0x2a0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	f040 8092 	bne.w	800620c <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80060e8:	2300      	movs	r3, #0
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	4b4a      	ldr	r3, [pc, #296]	; (8006218 <HAL_UART_MspInit+0x288>)
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	4a49      	ldr	r2, [pc, #292]	; (8006218 <HAL_UART_MspInit+0x288>)
 80060f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f6:	6413      	str	r3, [r2, #64]	; 0x40
 80060f8:	4b47      	ldr	r3, [pc, #284]	; (8006218 <HAL_UART_MspInit+0x288>)
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006104:	2300      	movs	r3, #0
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	4b43      	ldr	r3, [pc, #268]	; (8006218 <HAL_UART_MspInit+0x288>)
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	4a42      	ldr	r2, [pc, #264]	; (8006218 <HAL_UART_MspInit+0x288>)
 800610e:	f043 0308 	orr.w	r3, r3, #8
 8006112:	6313      	str	r3, [r2, #48]	; 0x30
 8006114:	4b40      	ldr	r3, [pc, #256]	; (8006218 <HAL_UART_MspInit+0x288>)
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYROSCOOTER_TX_Pin|GYROSCOOTER_RX_Pin;
 8006120:	2360      	movs	r3, #96	; 0x60
 8006122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006124:	2302      	movs	r3, #2
 8006126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006128:	2300      	movs	r3, #0
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800612c:	2303      	movs	r3, #3
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006130:	2307      	movs	r3, #7
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006134:	f107 031c 	add.w	r3, r7, #28
 8006138:	4619      	mov	r1, r3
 800613a:	483e      	ldr	r0, [pc, #248]	; (8006234 <HAL_UART_MspInit+0x2a4>)
 800613c:	f001 fa58 	bl	80075f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006140:	4b3d      	ldr	r3, [pc, #244]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 8006142:	4a3e      	ldr	r2, [pc, #248]	; (800623c <HAL_UART_MspInit+0x2ac>)
 8006144:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006146:	4b3c      	ldr	r3, [pc, #240]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 8006148:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800614c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800614e:	4b3a      	ldr	r3, [pc, #232]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 8006150:	2200      	movs	r2, #0
 8006152:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006154:	4b38      	ldr	r3, [pc, #224]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 8006156:	2200      	movs	r2, #0
 8006158:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800615a:	4b37      	ldr	r3, [pc, #220]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 800615c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006160:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006162:	4b35      	ldr	r3, [pc, #212]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 8006164:	2200      	movs	r2, #0
 8006166:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006168:	4b33      	ldr	r3, [pc, #204]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 800616a:	2200      	movs	r2, #0
 800616c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800616e:	4b32      	ldr	r3, [pc, #200]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 8006170:	2200      	movs	r2, #0
 8006172:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006174:	4b30      	ldr	r3, [pc, #192]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 8006176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800617a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800617c:	4b2e      	ldr	r3, [pc, #184]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 800617e:	2200      	movs	r2, #0
 8006180:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006182:	482d      	ldr	r0, [pc, #180]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 8006184:	f000 fe32 	bl	8006dec <HAL_DMA_Init>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_UART_MspInit+0x202>
      Error_Handler();
 800618e:	f7ff fa8f 	bl	80056b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a28      	ldr	r2, [pc, #160]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 8006196:	639a      	str	r2, [r3, #56]	; 0x38
 8006198:	4a27      	ldr	r2, [pc, #156]	; (8006238 <HAL_UART_MspInit+0x2a8>)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800619e:	4b28      	ldr	r3, [pc, #160]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061a0:	4a28      	ldr	r2, [pc, #160]	; (8006244 <HAL_UART_MspInit+0x2b4>)
 80061a2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80061a4:	4b26      	ldr	r3, [pc, #152]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061ac:	4b24      	ldr	r3, [pc, #144]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061ae:	2240      	movs	r2, #64	; 0x40
 80061b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061b2:	4b23      	ldr	r3, [pc, #140]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061b8:	4b21      	ldr	r3, [pc, #132]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061be:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061c0:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061c6:	4b1e      	ldr	r3, [pc, #120]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80061cc:	4b1c      	ldr	r3, [pc, #112]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80061d2:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061d8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061da:	4b19      	ldr	r3, [pc, #100]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061dc:	2200      	movs	r2, #0
 80061de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80061e0:	4817      	ldr	r0, [pc, #92]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061e2:	f000 fe03 	bl	8006dec <HAL_DMA_Init>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_UART_MspInit+0x260>
      Error_Handler();
 80061ec:	f7ff fa60 	bl	80056b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a13      	ldr	r2, [pc, #76]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061f4:	635a      	str	r2, [r3, #52]	; 0x34
 80061f6:	4a12      	ldr	r2, [pc, #72]	; (8006240 <HAL_UART_MspInit+0x2b0>)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061fc:	2200      	movs	r2, #0
 80061fe:	2100      	movs	r1, #0
 8006200:	2026      	movs	r0, #38	; 0x26
 8006202:	f000 fdbc 	bl	8006d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006206:	2026      	movs	r0, #38	; 0x26
 8006208:	f000 fdd5 	bl	8006db6 <HAL_NVIC_EnableIRQ>
}
 800620c:	bf00      	nop
 800620e:	3730      	adds	r7, #48	; 0x30
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40004c00 	.word	0x40004c00
 8006218:	40023800 	.word	0x40023800
 800621c:	40020800 	.word	0x40020800
 8006220:	200011ac 	.word	0x200011ac
 8006224:	40026040 	.word	0x40026040
 8006228:	20001354 	.word	0x20001354
 800622c:	40026070 	.word	0x40026070
 8006230:	40004400 	.word	0x40004400
 8006234:	40020c00 	.word	0x40020c00
 8006238:	2000120c 	.word	0x2000120c
 800623c:	40026088 	.word	0x40026088
 8006240:	2000126c 	.word	0x2000126c
 8006244:	400260a0 	.word	0x400260a0

08006248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800624c:	480d      	ldr	r0, [pc, #52]	; (8006284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800624e:	490e      	ldr	r1, [pc, #56]	; (8006288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006250:	4a0e      	ldr	r2, [pc, #56]	; (800628c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006254:	e002      	b.n	800625c <LoopCopyDataInit>

08006256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800625a:	3304      	adds	r3, #4

0800625c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800625c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800625e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006260:	d3f9      	bcc.n	8006256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006262:	4a0b      	ldr	r2, [pc, #44]	; (8006290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006264:	4c0b      	ldr	r4, [pc, #44]	; (8006294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006268:	e001      	b.n	800626e <LoopFillZerobss>

0800626a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800626a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800626c:	3204      	adds	r2, #4

0800626e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800626e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006270:	d3fb      	bcc.n	800626a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006272:	f7ff fbf5 	bl	8005a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006276:	f005 ffc1 	bl	800c1fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800627a:	f7fe ffcd 	bl	8005218 <main>
  bx  lr    
 800627e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006288:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800628c:	0800d818 	.word	0x0800d818
  ldr r2, =_sbss
 8006290:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8006294:	200013c8 	.word	0x200013c8

08006298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006298:	e7fe      	b.n	8006298 <ADC_IRQHandler>
	...

0800629c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80062a0:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <HAL_Init+0x40>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a0d      	ldr	r2, [pc, #52]	; (80062dc <HAL_Init+0x40>)
 80062a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <HAL_Init+0x40>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <HAL_Init+0x40>)
 80062b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062b8:	4b08      	ldr	r3, [pc, #32]	; (80062dc <HAL_Init+0x40>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a07      	ldr	r2, [pc, #28]	; (80062dc <HAL_Init+0x40>)
 80062be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062c4:	2003      	movs	r0, #3
 80062c6:	f000 fd4f 	bl	8006d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062ca:	200f      	movs	r0, #15
 80062cc:	f000 f808 	bl	80062e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80062d0:	f7ff fa72 	bl	80057b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	40023c00 	.word	0x40023c00

080062e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062e8:	4b12      	ldr	r3, [pc, #72]	; (8006334 <HAL_InitTick+0x54>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	4b12      	ldr	r3, [pc, #72]	; (8006338 <HAL_InitTick+0x58>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	4619      	mov	r1, r3
 80062f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80062fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fd67 	bl	8006dd2 <HAL_SYSTICK_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e00e      	b.n	800632c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b0f      	cmp	r3, #15
 8006312:	d80a      	bhi.n	800632a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006314:	2200      	movs	r2, #0
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	f04f 30ff 	mov.w	r0, #4294967295
 800631c:	f000 fd2f 	bl	8006d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006320:	4a06      	ldr	r2, [pc, #24]	; (800633c <HAL_InitTick+0x5c>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	e000      	b.n	800632c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20000040 	.word	0x20000040
 8006338:	20000048 	.word	0x20000048
 800633c:	20000044 	.word	0x20000044

08006340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <HAL_IncTick+0x20>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	4b06      	ldr	r3, [pc, #24]	; (8006364 <HAL_IncTick+0x24>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4413      	add	r3, r2
 8006350:	4a04      	ldr	r2, [pc, #16]	; (8006364 <HAL_IncTick+0x24>)
 8006352:	6013      	str	r3, [r2, #0]
}
 8006354:	bf00      	nop
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000048 	.word	0x20000048
 8006364:	200013b4 	.word	0x200013b4

08006368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  return uwTick;
 800636c:	4b03      	ldr	r3, [pc, #12]	; (800637c <HAL_GetTick+0x14>)
 800636e:	681b      	ldr	r3, [r3, #0]
}
 8006370:	4618      	mov	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	200013b4 	.word	0x200013b4

08006380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006388:	f7ff ffee 	bl	8006368 <HAL_GetTick>
 800638c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d005      	beq.n	80063a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800639a:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <HAL_Delay+0x44>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80063a6:	bf00      	nop
 80063a8:	f7ff ffde 	bl	8006368 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d8f7      	bhi.n	80063a8 <HAL_Delay+0x28>
  {
  }
}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20000048 	.word	0x20000048

080063c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e033      	b.n	8006446 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fc fe34 	bl	8003054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	2b00      	cmp	r3, #0
 8006404:	d118      	bne.n	8006438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800640e:	f023 0302 	bic.w	r3, r3, #2
 8006412:	f043 0202 	orr.w	r2, r3, #2
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fad8 	bl	80069d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f023 0303 	bic.w	r3, r3, #3
 800642e:	f043 0201 	orr.w	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	641a      	str	r2, [r3, #64]	; 0x40
 8006436:	e001      	b.n	800643c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_ADC_Start+0x1a>
 8006466:	2302      	movs	r3, #2
 8006468:	e0b2      	b.n	80065d0 <HAL_ADC_Start+0x180>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b01      	cmp	r3, #1
 800647e:	d018      	beq.n	80064b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006490:	4b52      	ldr	r3, [pc, #328]	; (80065dc <HAL_ADC_Start+0x18c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a52      	ldr	r2, [pc, #328]	; (80065e0 <HAL_ADC_Start+0x190>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	0c9a      	lsrs	r2, r3, #18
 800649c:	4613      	mov	r3, r2
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4413      	add	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80064a4:	e002      	b.n	80064ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f9      	bne.n	80064a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d17a      	bne.n	80065b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80064ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fe:	d106      	bne.n	800650e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006504:	f023 0206 	bic.w	r2, r3, #6
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	645a      	str	r2, [r3, #68]	; 0x44
 800650c:	e002      	b.n	8006514 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800651c:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <HAL_ADC_Start+0x194>)
 800651e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006528:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2b00      	cmp	r3, #0
 8006534:	d12a      	bne.n	800658c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2b      	ldr	r2, [pc, #172]	; (80065e8 <HAL_ADC_Start+0x198>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d015      	beq.n	800656c <HAL_ADC_Start+0x11c>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a29      	ldr	r2, [pc, #164]	; (80065ec <HAL_ADC_Start+0x19c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d105      	bne.n	8006556 <HAL_ADC_Start+0x106>
 800654a:	4b26      	ldr	r3, [pc, #152]	; (80065e4 <HAL_ADC_Start+0x194>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f003 031f 	and.w	r3, r3, #31
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a25      	ldr	r2, [pc, #148]	; (80065f0 <HAL_ADC_Start+0x1a0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d136      	bne.n	80065ce <HAL_ADC_Start+0x17e>
 8006560:	4b20      	ldr	r3, [pc, #128]	; (80065e4 <HAL_ADC_Start+0x194>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	d130      	bne.n	80065ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d129      	bne.n	80065ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006588:	609a      	str	r2, [r3, #8]
 800658a:	e020      	b.n	80065ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <HAL_ADC_Start+0x198>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d11b      	bne.n	80065ce <HAL_ADC_Start+0x17e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d114      	bne.n	80065ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80065b2:	609a      	str	r2, [r3, #8]
 80065b4:	e00b      	b.n	80065ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f043 0210 	orr.w	r2, r3, #16
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	f043 0201 	orr.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	20000040 	.word	0x20000040
 80065e0:	431bde83 	.word	0x431bde83
 80065e4:	40012300 	.word	0x40012300
 80065e8:	40012000 	.word	0x40012000
 80065ec:	40012100 	.word	0x40012100
 80065f0:	40012200 	.word	0x40012200

080065f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006602:	2b01      	cmp	r3, #1
 8006604:	d101      	bne.n	800660a <HAL_ADC_Stop+0x16>
 8006606:	2302      	movs	r3, #2
 8006608:	e021      	b.n	800664e <HAL_ADC_Stop+0x5a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0201 	bic.w	r2, r2, #1
 8006620:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d109      	bne.n	8006644 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006638:	f023 0301 	bic.w	r3, r3, #1
 800663c:	f043 0201 	orr.w	r2, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006676:	d113      	bne.n	80066a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006686:	d10b      	bne.n	80066a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	f043 0220 	orr.w	r2, r3, #32
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e063      	b.n	8006768 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80066a0:	f7ff fe62 	bl	8006368 <HAL_GetTick>
 80066a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80066a6:	e021      	b.n	80066ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d01d      	beq.n	80066ec <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <HAL_ADC_PollForConversion+0x6c>
 80066b6:	f7ff fe57 	bl	8006368 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d212      	bcs.n	80066ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d00b      	beq.n	80066ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	f043 0204 	orr.w	r2, r3, #4
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e03d      	b.n	8006768 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d1d6      	bne.n	80066a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f06f 0212 	mvn.w	r2, #18
 8006702:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d123      	bne.n	8006766 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006722:	2b00      	cmp	r3, #0
 8006724:	d11f      	bne.n	8006766 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800673e:	2b00      	cmp	r3, #0
 8006740:	d111      	bne.n	8006766 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	f043 0201 	orr.w	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_ADC_ConfigChannel+0x1c>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e105      	b.n	80069b4 <HAL_ADC_ConfigChannel+0x228>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b09      	cmp	r3, #9
 80067b6:	d925      	bls.n	8006804 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68d9      	ldr	r1, [r3, #12]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	4613      	mov	r3, r2
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	4413      	add	r3, r2
 80067cc:	3b1e      	subs	r3, #30
 80067ce:	2207      	movs	r2, #7
 80067d0:	fa02 f303 	lsl.w	r3, r2, r3
 80067d4:	43da      	mvns	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	400a      	ands	r2, r1
 80067dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68d9      	ldr	r1, [r3, #12]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	4618      	mov	r0, r3
 80067f0:	4603      	mov	r3, r0
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	4403      	add	r3, r0
 80067f6:	3b1e      	subs	r3, #30
 80067f8:	409a      	lsls	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	60da      	str	r2, [r3, #12]
 8006802:	e022      	b.n	800684a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6919      	ldr	r1, [r3, #16]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	4613      	mov	r3, r2
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	4413      	add	r3, r2
 8006818:	2207      	movs	r2, #7
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	43da      	mvns	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	400a      	ands	r2, r1
 8006826:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6919      	ldr	r1, [r3, #16]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	4618      	mov	r0, r3
 800683a:	4603      	mov	r3, r0
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	4403      	add	r3, r0
 8006840:	409a      	lsls	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b06      	cmp	r3, #6
 8006850:	d824      	bhi.n	800689c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	4613      	mov	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	3b05      	subs	r3, #5
 8006864:	221f      	movs	r2, #31
 8006866:	fa02 f303 	lsl.w	r3, r2, r3
 800686a:	43da      	mvns	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	400a      	ands	r2, r1
 8006872:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	b29b      	uxth	r3, r3
 8006880:	4618      	mov	r0, r3
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	3b05      	subs	r3, #5
 800688e:	fa00 f203 	lsl.w	r2, r0, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	635a      	str	r2, [r3, #52]	; 0x34
 800689a:	e04c      	b.n	8006936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b0c      	cmp	r3, #12
 80068a2:	d824      	bhi.n	80068ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	3b23      	subs	r3, #35	; 0x23
 80068b6:	221f      	movs	r2, #31
 80068b8:	fa02 f303 	lsl.w	r3, r2, r3
 80068bc:	43da      	mvns	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	400a      	ands	r2, r1
 80068c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	4618      	mov	r0, r3
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	3b23      	subs	r3, #35	; 0x23
 80068e0:	fa00 f203 	lsl.w	r2, r0, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
 80068ec:	e023      	b.n	8006936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	4613      	mov	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	3b41      	subs	r3, #65	; 0x41
 8006900:	221f      	movs	r2, #31
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	43da      	mvns	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	400a      	ands	r2, r1
 800690e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	b29b      	uxth	r3, r3
 800691c:	4618      	mov	r0, r3
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	3b41      	subs	r3, #65	; 0x41
 800692a:	fa00 f203 	lsl.w	r2, r0, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006936:	4b22      	ldr	r3, [pc, #136]	; (80069c0 <HAL_ADC_ConfigChannel+0x234>)
 8006938:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a21      	ldr	r2, [pc, #132]	; (80069c4 <HAL_ADC_ConfigChannel+0x238>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d109      	bne.n	8006958 <HAL_ADC_ConfigChannel+0x1cc>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b12      	cmp	r3, #18
 800694a:	d105      	bne.n	8006958 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <HAL_ADC_ConfigChannel+0x238>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d123      	bne.n	80069aa <HAL_ADC_ConfigChannel+0x21e>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b10      	cmp	r3, #16
 8006968:	d003      	beq.n	8006972 <HAL_ADC_ConfigChannel+0x1e6>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b11      	cmp	r3, #17
 8006970:	d11b      	bne.n	80069aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b10      	cmp	r3, #16
 8006984:	d111      	bne.n	80069aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006986:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <HAL_ADC_ConfigChannel+0x23c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a10      	ldr	r2, [pc, #64]	; (80069cc <HAL_ADC_ConfigChannel+0x240>)
 800698c:	fba2 2303 	umull	r2, r3, r2, r3
 8006990:	0c9a      	lsrs	r2, r3, #18
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800699c:	e002      	b.n	80069a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1f9      	bne.n	800699e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	40012300 	.word	0x40012300
 80069c4:	40012000 	.word	0x40012000
 80069c8:	20000040 	.word	0x20000040
 80069cc:	431bde83 	.word	0x431bde83

080069d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069d8:	4b79      	ldr	r3, [pc, #484]	; (8006bc0 <ADC_Init+0x1f0>)
 80069da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	431a      	orrs	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6859      	ldr	r1, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	021a      	lsls	r2, r3, #8
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6859      	ldr	r1, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6899      	ldr	r1, [r3, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a62:	4a58      	ldr	r2, [pc, #352]	; (8006bc4 <ADC_Init+0x1f4>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d022      	beq.n	8006aae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6899      	ldr	r1, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6899      	ldr	r1, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	609a      	str	r2, [r3, #8]
 8006aac:	e00f      	b.n	8006ace <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0202 	bic.w	r2, r2, #2
 8006adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6899      	ldr	r1, [r3, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7e1b      	ldrb	r3, [r3, #24]
 8006ae8:	005a      	lsls	r2, r3, #1
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01b      	beq.n	8006b34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006b1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6859      	ldr	r1, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	3b01      	subs	r3, #1
 8006b28:	035a      	lsls	r2, r3, #13
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
 8006b32:	e007      	b.n	8006b44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	051a      	lsls	r2, r3, #20
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6899      	ldr	r1, [r3, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b86:	025a      	lsls	r2, r3, #9
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6899      	ldr	r1, [r3, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	029a      	lsls	r2, r3, #10
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	609a      	str	r2, [r3, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40012300 	.word	0x40012300
 8006bc4:	0f000001 	.word	0x0f000001

08006bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bd8:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <__NVIC_SetPriorityGrouping+0x44>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006be4:	4013      	ands	r3, r2
 8006be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bfa:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <__NVIC_SetPriorityGrouping+0x44>)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	60d3      	str	r3, [r2, #12]
}
 8006c00:	bf00      	nop
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	e000ed00 	.word	0xe000ed00

08006c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c14:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <__NVIC_GetPriorityGrouping+0x18>)
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	0a1b      	lsrs	r3, r3, #8
 8006c1a:	f003 0307 	and.w	r3, r3, #7
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	e000ed00 	.word	0xe000ed00

08006c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4603      	mov	r3, r0
 8006c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	db0b      	blt.n	8006c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	f003 021f 	and.w	r2, r3, #31
 8006c44:	4907      	ldr	r1, [pc, #28]	; (8006c64 <__NVIC_EnableIRQ+0x38>)
 8006c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c4a:	095b      	lsrs	r3, r3, #5
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8006c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	e000e100 	.word	0xe000e100

08006c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	6039      	str	r1, [r7, #0]
 8006c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	db0a      	blt.n	8006c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	490c      	ldr	r1, [pc, #48]	; (8006cb4 <__NVIC_SetPriority+0x4c>)
 8006c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c86:	0112      	lsls	r2, r2, #4
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c90:	e00a      	b.n	8006ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	4908      	ldr	r1, [pc, #32]	; (8006cb8 <__NVIC_SetPriority+0x50>)
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	3b04      	subs	r3, #4
 8006ca0:	0112      	lsls	r2, r2, #4
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	761a      	strb	r2, [r3, #24]
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	e000e100 	.word	0xe000e100
 8006cb8:	e000ed00 	.word	0xe000ed00

08006cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b089      	sub	sp, #36	; 0x24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f003 0307 	and.w	r3, r3, #7
 8006cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f1c3 0307 	rsb	r3, r3, #7
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	bf28      	it	cs
 8006cda:	2304      	movcs	r3, #4
 8006cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	2b06      	cmp	r3, #6
 8006ce4:	d902      	bls.n	8006cec <NVIC_EncodePriority+0x30>
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	3b03      	subs	r3, #3
 8006cea:	e000      	b.n	8006cee <NVIC_EncodePriority+0x32>
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	43da      	mvns	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	401a      	ands	r2, r3
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d04:	f04f 31ff 	mov.w	r1, #4294967295
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0e:	43d9      	mvns	r1, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d14:	4313      	orrs	r3, r2
         );
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3724      	adds	r7, #36	; 0x24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
	...

08006d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d34:	d301      	bcc.n	8006d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d36:	2301      	movs	r3, #1
 8006d38:	e00f      	b.n	8006d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d3a:	4a0a      	ldr	r2, [pc, #40]	; (8006d64 <SysTick_Config+0x40>)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d42:	210f      	movs	r1, #15
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	f7ff ff8e 	bl	8006c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <SysTick_Config+0x40>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d52:	4b04      	ldr	r3, [pc, #16]	; (8006d64 <SysTick_Config+0x40>)
 8006d54:	2207      	movs	r2, #7
 8006d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	e000e010 	.word	0xe000e010

08006d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff ff29 	bl	8006bc8 <__NVIC_SetPriorityGrouping>
}
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	4603      	mov	r3, r0
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
 8006d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d90:	f7ff ff3e 	bl	8006c10 <__NVIC_GetPriorityGrouping>
 8006d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	6978      	ldr	r0, [r7, #20]
 8006d9c:	f7ff ff8e 	bl	8006cbc <NVIC_EncodePriority>
 8006da0:	4602      	mov	r2, r0
 8006da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006da6:	4611      	mov	r1, r2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff ff5d 	bl	8006c68 <__NVIC_SetPriority>
}
 8006dae:	bf00      	nop
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7ff ff31 	bl	8006c2c <__NVIC_EnableIRQ>
}
 8006dca:	bf00      	nop
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff ffa2 	bl	8006d24 <SysTick_Config>
 8006de0:	4603      	mov	r3, r0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006df8:	f7ff fab6 	bl	8006368 <HAL_GetTick>
 8006dfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e099      	b.n	8006f3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e28:	e00f      	b.n	8006e4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e2a:	f7ff fa9d 	bl	8006368 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b05      	cmp	r3, #5
 8006e36:	d908      	bls.n	8006e4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2203      	movs	r2, #3
 8006e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e078      	b.n	8006f3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e8      	bne.n	8006e2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	4b38      	ldr	r3, [pc, #224]	; (8006f44 <HAL_DMA_Init+0x158>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d107      	bne.n	8006eb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eac:	4313      	orrs	r3, r2
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f023 0307 	bic.w	r3, r3, #7
 8006eca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d117      	bne.n	8006f0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00e      	beq.n	8006f0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fb01 	bl	80074f8 <DMA_CheckFifoParam>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d008      	beq.n	8006f0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2240      	movs	r2, #64	; 0x40
 8006f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e016      	b.n	8006f3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fab8 	bl	800748c <DMA_CalcBaseAndBitshift>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f24:	223f      	movs	r2, #63	; 0x3f
 8006f26:	409a      	lsls	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	f010803f 	.word	0xf010803f

08006f48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d101      	bne.n	8006f6e <HAL_DMA_Start_IT+0x26>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e040      	b.n	8006ff0 <HAL_DMA_Start_IT+0xa8>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d12f      	bne.n	8006fe2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2202      	movs	r2, #2
 8006f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	68b9      	ldr	r1, [r7, #8]
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 fa4a 	bl	8007430 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa0:	223f      	movs	r2, #63	; 0x3f
 8006fa2:	409a      	lsls	r2, r3
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0216 	orr.w	r2, r2, #22
 8006fb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d007      	beq.n	8006fd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0208 	orr.w	r2, r2, #8
 8006fce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f042 0201 	orr.w	r2, r2, #1
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	e005      	b.n	8006fee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006fea:	2302      	movs	r3, #2
 8006fec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007004:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007006:	f7ff f9af 	bl	8006368 <HAL_GetTick>
 800700a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d008      	beq.n	800702a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2280      	movs	r2, #128	; 0x80
 800701c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e052      	b.n	80070d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0216 	bic.w	r2, r2, #22
 8007038:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	695a      	ldr	r2, [r3, #20]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007048:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d103      	bne.n	800705a <HAL_DMA_Abort+0x62>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0208 	bic.w	r2, r2, #8
 8007068:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0201 	bic.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800707a:	e013      	b.n	80070a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800707c:	f7ff f974 	bl	8006368 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b05      	cmp	r3, #5
 8007088:	d90c      	bls.n	80070a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2203      	movs	r2, #3
 8007094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e015      	b.n	80070d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e4      	bne.n	800707c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b6:	223f      	movs	r2, #63	; 0x3f
 80070b8:	409a      	lsls	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d004      	beq.n	80070f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2280      	movs	r2, #128	; 0x80
 80070f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e00c      	b.n	8007110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2205      	movs	r2, #5
 80070fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0201 	bic.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007128:	4b92      	ldr	r3, [pc, #584]	; (8007374 <HAL_DMA_IRQHandler+0x258>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a92      	ldr	r2, [pc, #584]	; (8007378 <HAL_DMA_IRQHandler+0x25c>)
 800712e:	fba2 2303 	umull	r2, r3, r2, r3
 8007132:	0a9b      	lsrs	r3, r3, #10
 8007134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007146:	2208      	movs	r2, #8
 8007148:	409a      	lsls	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4013      	ands	r3, r2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01a      	beq.n	8007188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d013      	beq.n	8007188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0204 	bic.w	r2, r2, #4
 800716e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007174:	2208      	movs	r2, #8
 8007176:	409a      	lsls	r2, r3
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007180:	f043 0201 	orr.w	r2, r3, #1
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718c:	2201      	movs	r2, #1
 800718e:	409a      	lsls	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4013      	ands	r3, r2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d012      	beq.n	80071be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071aa:	2201      	movs	r2, #1
 80071ac:	409a      	lsls	r2, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b6:	f043 0202 	orr.w	r2, r3, #2
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c2:	2204      	movs	r2, #4
 80071c4:	409a      	lsls	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4013      	ands	r3, r2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d012      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e0:	2204      	movs	r2, #4
 80071e2:	409a      	lsls	r2, r3
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ec:	f043 0204 	orr.w	r2, r3, #4
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f8:	2210      	movs	r2, #16
 80071fa:	409a      	lsls	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4013      	ands	r3, r2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d043      	beq.n	800728c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0308 	and.w	r3, r3, #8
 800720e:	2b00      	cmp	r3, #0
 8007210:	d03c      	beq.n	800728c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007216:	2210      	movs	r2, #16
 8007218:	409a      	lsls	r2, r3
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d018      	beq.n	800725e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d108      	bne.n	800724c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d024      	beq.n	800728c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	4798      	blx	r3
 800724a:	e01f      	b.n	800728c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01b      	beq.n	800728c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	4798      	blx	r3
 800725c:	e016      	b.n	800728c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007268:	2b00      	cmp	r3, #0
 800726a:	d107      	bne.n	800727c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0208 	bic.w	r2, r2, #8
 800727a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007290:	2220      	movs	r2, #32
 8007292:	409a      	lsls	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4013      	ands	r3, r2
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 808e 	beq.w	80073ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0310 	and.w	r3, r3, #16
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8086 	beq.w	80073ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b2:	2220      	movs	r2, #32
 80072b4:	409a      	lsls	r2, r3
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d136      	bne.n	8007334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0216 	bic.w	r2, r2, #22
 80072d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695a      	ldr	r2, [r3, #20]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <HAL_DMA_IRQHandler+0x1da>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d007      	beq.n	8007306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0208 	bic.w	r2, r2, #8
 8007304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800730a:	223f      	movs	r2, #63	; 0x3f
 800730c:	409a      	lsls	r2, r3
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007326:	2b00      	cmp	r3, #0
 8007328:	d07d      	beq.n	8007426 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
        }
        return;
 8007332:	e078      	b.n	8007426 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d01c      	beq.n	800737c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d108      	bne.n	8007362 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007354:	2b00      	cmp	r3, #0
 8007356:	d030      	beq.n	80073ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
 8007360:	e02b      	b.n	80073ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d027      	beq.n	80073ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	4798      	blx	r3
 8007372:	e022      	b.n	80073ba <HAL_DMA_IRQHandler+0x29e>
 8007374:	20000040 	.word	0x20000040
 8007378:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10f      	bne.n	80073aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0210 	bic.w	r2, r2, #16
 8007398:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d032      	beq.n	8007428 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d022      	beq.n	8007414 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2205      	movs	r2, #5
 80073d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0201 	bic.w	r2, r2, #1
 80073e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	3301      	adds	r3, #1
 80073ea:	60bb      	str	r3, [r7, #8]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d307      	bcc.n	8007402 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f2      	bne.n	80073e6 <HAL_DMA_IRQHandler+0x2ca>
 8007400:	e000      	b.n	8007404 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007402:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d005      	beq.n	8007428 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	4798      	blx	r3
 8007424:	e000      	b.n	8007428 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007426:	bf00      	nop
    }
  }
}
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop

08007430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800744c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	2b40      	cmp	r3, #64	; 0x40
 800745c:	d108      	bne.n	8007470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800746e:	e007      	b.n	8007480 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	60da      	str	r2, [r3, #12]
}
 8007480:	bf00      	nop
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	3b10      	subs	r3, #16
 800749c:	4a14      	ldr	r2, [pc, #80]	; (80074f0 <DMA_CalcBaseAndBitshift+0x64>)
 800749e:	fba2 2303 	umull	r2, r3, r2, r3
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80074a6:	4a13      	ldr	r2, [pc, #76]	; (80074f4 <DMA_CalcBaseAndBitshift+0x68>)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d909      	bls.n	80074ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074c2:	f023 0303 	bic.w	r3, r3, #3
 80074c6:	1d1a      	adds	r2, r3, #4
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	659a      	str	r2, [r3, #88]	; 0x58
 80074cc:	e007      	b.n	80074de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074d6:	f023 0303 	bic.w	r3, r3, #3
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	aaaaaaab 	.word	0xaaaaaaab
 80074f4:	0800d2ac 	.word	0x0800d2ac

080074f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007508:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d11f      	bne.n	8007552 <DMA_CheckFifoParam+0x5a>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b03      	cmp	r3, #3
 8007516:	d856      	bhi.n	80075c6 <DMA_CheckFifoParam+0xce>
 8007518:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <DMA_CheckFifoParam+0x28>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007531 	.word	0x08007531
 8007524:	08007543 	.word	0x08007543
 8007528:	08007531 	.word	0x08007531
 800752c:	080075c7 	.word	0x080075c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d046      	beq.n	80075ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007540:	e043      	b.n	80075ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007546:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800754a:	d140      	bne.n	80075ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007550:	e03d      	b.n	80075ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800755a:	d121      	bne.n	80075a0 <DMA_CheckFifoParam+0xa8>
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b03      	cmp	r3, #3
 8007560:	d837      	bhi.n	80075d2 <DMA_CheckFifoParam+0xda>
 8007562:	a201      	add	r2, pc, #4	; (adr r2, 8007568 <DMA_CheckFifoParam+0x70>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	08007579 	.word	0x08007579
 800756c:	0800757f 	.word	0x0800757f
 8007570:	08007579 	.word	0x08007579
 8007574:	08007591 	.word	0x08007591
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
      break;
 800757c:	e030      	b.n	80075e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d025      	beq.n	80075d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800758e:	e022      	b.n	80075d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007598:	d11f      	bne.n	80075da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800759e:	e01c      	b.n	80075da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d903      	bls.n	80075ae <DMA_CheckFifoParam+0xb6>
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d003      	beq.n	80075b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80075ac:	e018      	b.n	80075e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]
      break;
 80075b2:	e015      	b.n	80075e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00e      	beq.n	80075de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	73fb      	strb	r3, [r7, #15]
      break;
 80075c4:	e00b      	b.n	80075de <DMA_CheckFifoParam+0xe6>
      break;
 80075c6:	bf00      	nop
 80075c8:	e00a      	b.n	80075e0 <DMA_CheckFifoParam+0xe8>
      break;
 80075ca:	bf00      	nop
 80075cc:	e008      	b.n	80075e0 <DMA_CheckFifoParam+0xe8>
      break;
 80075ce:	bf00      	nop
 80075d0:	e006      	b.n	80075e0 <DMA_CheckFifoParam+0xe8>
      break;
 80075d2:	bf00      	nop
 80075d4:	e004      	b.n	80075e0 <DMA_CheckFifoParam+0xe8>
      break;
 80075d6:	bf00      	nop
 80075d8:	e002      	b.n	80075e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80075da:	bf00      	nop
 80075dc:	e000      	b.n	80075e0 <DMA_CheckFifoParam+0xe8>
      break;
 80075de:	bf00      	nop
    }
  } 
  
  return status; 
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop

080075f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b089      	sub	sp, #36	; 0x24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80075fe:	2300      	movs	r3, #0
 8007600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007602:	2300      	movs	r3, #0
 8007604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007606:	2300      	movs	r3, #0
 8007608:	61fb      	str	r3, [r7, #28]
 800760a:	e16b      	b.n	80078e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800760c:	2201      	movs	r2, #1
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	fa02 f303 	lsl.w	r3, r2, r3
 8007614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	4013      	ands	r3, r2
 800761e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	429a      	cmp	r2, r3
 8007626:	f040 815a 	bne.w	80078de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b01      	cmp	r3, #1
 8007634:	d005      	beq.n	8007642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800763e:	2b02      	cmp	r3, #2
 8007640:	d130      	bne.n	80076a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	2203      	movs	r2, #3
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	43db      	mvns	r3, r3
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	4013      	ands	r3, r2
 8007658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	fa02 f303 	lsl.w	r3, r2, r3
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	4313      	orrs	r3, r2
 800766a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007678:	2201      	movs	r2, #1
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	fa02 f303 	lsl.w	r3, r2, r3
 8007680:	43db      	mvns	r3, r3
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	4013      	ands	r3, r2
 8007686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	091b      	lsrs	r3, r3, #4
 800768e:	f003 0201 	and.w	r2, r3, #1
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	4313      	orrs	r3, r2
 800769c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d017      	beq.n	80076e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	2203      	movs	r2, #3
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	43db      	mvns	r3, r3
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	4013      	ands	r3, r2
 80076c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d123      	bne.n	8007734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	08da      	lsrs	r2, r3, #3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3208      	adds	r2, #8
 80076f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	f003 0307 	and.w	r3, r3, #7
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	220f      	movs	r2, #15
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	43db      	mvns	r3, r3
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	4013      	ands	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	f003 0307 	and.w	r3, r3, #7
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	fa02 f303 	lsl.w	r3, r2, r3
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	4313      	orrs	r3, r2
 8007724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	08da      	lsrs	r2, r3, #3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3208      	adds	r2, #8
 800772e:	69b9      	ldr	r1, [r7, #24]
 8007730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	2203      	movs	r2, #3
 8007740:	fa02 f303 	lsl.w	r3, r2, r3
 8007744:	43db      	mvns	r3, r3
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	4013      	ands	r3, r2
 800774a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f003 0203 	and.w	r2, r3, #3
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	4313      	orrs	r3, r2
 8007760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 80b4 	beq.w	80078de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	4b60      	ldr	r3, [pc, #384]	; (80078fc <HAL_GPIO_Init+0x30c>)
 800777c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777e:	4a5f      	ldr	r2, [pc, #380]	; (80078fc <HAL_GPIO_Init+0x30c>)
 8007780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007784:	6453      	str	r3, [r2, #68]	; 0x44
 8007786:	4b5d      	ldr	r3, [pc, #372]	; (80078fc <HAL_GPIO_Init+0x30c>)
 8007788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007792:	4a5b      	ldr	r2, [pc, #364]	; (8007900 <HAL_GPIO_Init+0x310>)
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	089b      	lsrs	r3, r3, #2
 8007798:	3302      	adds	r3, #2
 800779a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800779e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	f003 0303 	and.w	r3, r3, #3
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	220f      	movs	r2, #15
 80077aa:	fa02 f303 	lsl.w	r3, r2, r3
 80077ae:	43db      	mvns	r3, r3
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	4013      	ands	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a52      	ldr	r2, [pc, #328]	; (8007904 <HAL_GPIO_Init+0x314>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d02b      	beq.n	8007816 <HAL_GPIO_Init+0x226>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a51      	ldr	r2, [pc, #324]	; (8007908 <HAL_GPIO_Init+0x318>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d025      	beq.n	8007812 <HAL_GPIO_Init+0x222>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a50      	ldr	r2, [pc, #320]	; (800790c <HAL_GPIO_Init+0x31c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d01f      	beq.n	800780e <HAL_GPIO_Init+0x21e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a4f      	ldr	r2, [pc, #316]	; (8007910 <HAL_GPIO_Init+0x320>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d019      	beq.n	800780a <HAL_GPIO_Init+0x21a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a4e      	ldr	r2, [pc, #312]	; (8007914 <HAL_GPIO_Init+0x324>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d013      	beq.n	8007806 <HAL_GPIO_Init+0x216>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a4d      	ldr	r2, [pc, #308]	; (8007918 <HAL_GPIO_Init+0x328>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00d      	beq.n	8007802 <HAL_GPIO_Init+0x212>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a4c      	ldr	r2, [pc, #304]	; (800791c <HAL_GPIO_Init+0x32c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <HAL_GPIO_Init+0x20e>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a4b      	ldr	r2, [pc, #300]	; (8007920 <HAL_GPIO_Init+0x330>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d101      	bne.n	80077fa <HAL_GPIO_Init+0x20a>
 80077f6:	2307      	movs	r3, #7
 80077f8:	e00e      	b.n	8007818 <HAL_GPIO_Init+0x228>
 80077fa:	2308      	movs	r3, #8
 80077fc:	e00c      	b.n	8007818 <HAL_GPIO_Init+0x228>
 80077fe:	2306      	movs	r3, #6
 8007800:	e00a      	b.n	8007818 <HAL_GPIO_Init+0x228>
 8007802:	2305      	movs	r3, #5
 8007804:	e008      	b.n	8007818 <HAL_GPIO_Init+0x228>
 8007806:	2304      	movs	r3, #4
 8007808:	e006      	b.n	8007818 <HAL_GPIO_Init+0x228>
 800780a:	2303      	movs	r3, #3
 800780c:	e004      	b.n	8007818 <HAL_GPIO_Init+0x228>
 800780e:	2302      	movs	r3, #2
 8007810:	e002      	b.n	8007818 <HAL_GPIO_Init+0x228>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <HAL_GPIO_Init+0x228>
 8007816:	2300      	movs	r3, #0
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	f002 0203 	and.w	r2, r2, #3
 800781e:	0092      	lsls	r2, r2, #2
 8007820:	4093      	lsls	r3, r2
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	4313      	orrs	r3, r2
 8007826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007828:	4935      	ldr	r1, [pc, #212]	; (8007900 <HAL_GPIO_Init+0x310>)
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	089b      	lsrs	r3, r3, #2
 800782e:	3302      	adds	r3, #2
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007836:	4b3b      	ldr	r3, [pc, #236]	; (8007924 <HAL_GPIO_Init+0x334>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	43db      	mvns	r3, r3
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	4013      	ands	r3, r2
 8007844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800785a:	4a32      	ldr	r2, [pc, #200]	; (8007924 <HAL_GPIO_Init+0x334>)
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007860:	4b30      	ldr	r3, [pc, #192]	; (8007924 <HAL_GPIO_Init+0x334>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	43db      	mvns	r3, r3
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	4013      	ands	r3, r2
 800786e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	4313      	orrs	r3, r2
 8007882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007884:	4a27      	ldr	r2, [pc, #156]	; (8007924 <HAL_GPIO_Init+0x334>)
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800788a:	4b26      	ldr	r3, [pc, #152]	; (8007924 <HAL_GPIO_Init+0x334>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	43db      	mvns	r3, r3
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	4013      	ands	r3, r2
 8007898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80078ae:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <HAL_GPIO_Init+0x334>)
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80078b4:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <HAL_GPIO_Init+0x334>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	43db      	mvns	r3, r3
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	4013      	ands	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80078d8:	4a12      	ldr	r2, [pc, #72]	; (8007924 <HAL_GPIO_Init+0x334>)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	3301      	adds	r3, #1
 80078e2:	61fb      	str	r3, [r7, #28]
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	2b0f      	cmp	r3, #15
 80078e8:	f67f ae90 	bls.w	800760c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80078ec:	bf00      	nop
 80078ee:	bf00      	nop
 80078f0:	3724      	adds	r7, #36	; 0x24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	40023800 	.word	0x40023800
 8007900:	40013800 	.word	0x40013800
 8007904:	40020000 	.word	0x40020000
 8007908:	40020400 	.word	0x40020400
 800790c:	40020800 	.word	0x40020800
 8007910:	40020c00 	.word	0x40020c00
 8007914:	40021000 	.word	0x40021000
 8007918:	40021400 	.word	0x40021400
 800791c:	40021800 	.word	0x40021800
 8007920:	40021c00 	.word	0x40021c00
 8007924:	40013c00 	.word	0x40013c00

08007928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	460b      	mov	r3, r1
 8007932:	807b      	strh	r3, [r7, #2]
 8007934:	4613      	mov	r3, r2
 8007936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007938:	787b      	ldrb	r3, [r7, #1]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800793e:	887a      	ldrh	r2, [r7, #2]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007944:	e003      	b.n	800794e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007946:	887b      	ldrh	r3, [r7, #2]
 8007948:	041a      	lsls	r2, r3, #16
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	619a      	str	r2, [r3, #24]
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800795a:	b480      	push	{r7}
 800795c:	b085      	sub	sp, #20
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	460b      	mov	r3, r1
 8007964:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800796c:	887a      	ldrh	r2, [r7, #2]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	4013      	ands	r3, r2
 8007972:	041a      	lsls	r2, r3, #16
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	43d9      	mvns	r1, r3
 8007978:	887b      	ldrh	r3, [r7, #2]
 800797a:	400b      	ands	r3, r1
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	619a      	str	r2, [r3, #24]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
	...

08007990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e264      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d075      	beq.n	8007a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079ae:	4ba3      	ldr	r3, [pc, #652]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f003 030c 	and.w	r3, r3, #12
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d00c      	beq.n	80079d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079ba:	4ba0      	ldr	r3, [pc, #640]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d112      	bne.n	80079ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079c6:	4b9d      	ldr	r3, [pc, #628]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079d2:	d10b      	bne.n	80079ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079d4:	4b99      	ldr	r3, [pc, #612]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d05b      	beq.n	8007a98 <HAL_RCC_OscConfig+0x108>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d157      	bne.n	8007a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e23f      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f4:	d106      	bne.n	8007a04 <HAL_RCC_OscConfig+0x74>
 80079f6:	4b91      	ldr	r3, [pc, #580]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a90      	ldr	r2, [pc, #576]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 80079fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	e01d      	b.n	8007a40 <HAL_RCC_OscConfig+0xb0>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a0c:	d10c      	bne.n	8007a28 <HAL_RCC_OscConfig+0x98>
 8007a0e:	4b8b      	ldr	r3, [pc, #556]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a8a      	ldr	r2, [pc, #552]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	4b88      	ldr	r3, [pc, #544]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a87      	ldr	r2, [pc, #540]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	e00b      	b.n	8007a40 <HAL_RCC_OscConfig+0xb0>
 8007a28:	4b84      	ldr	r3, [pc, #528]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a83      	ldr	r2, [pc, #524]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	4b81      	ldr	r3, [pc, #516]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a80      	ldr	r2, [pc, #512]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d013      	beq.n	8007a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a48:	f7fe fc8e 	bl	8006368 <HAL_GetTick>
 8007a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a50:	f7fe fc8a 	bl	8006368 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b64      	cmp	r3, #100	; 0x64
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e204      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a62:	4b76      	ldr	r3, [pc, #472]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0f0      	beq.n	8007a50 <HAL_RCC_OscConfig+0xc0>
 8007a6e:	e014      	b.n	8007a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a70:	f7fe fc7a 	bl	8006368 <HAL_GetTick>
 8007a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a76:	e008      	b.n	8007a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a78:	f7fe fc76 	bl	8006368 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	2b64      	cmp	r3, #100	; 0x64
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e1f0      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a8a:	4b6c      	ldr	r3, [pc, #432]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1f0      	bne.n	8007a78 <HAL_RCC_OscConfig+0xe8>
 8007a96:	e000      	b.n	8007a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d063      	beq.n	8007b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007aa6:	4b65      	ldr	r3, [pc, #404]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f003 030c 	and.w	r3, r3, #12
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00b      	beq.n	8007aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ab2:	4b62      	ldr	r3, [pc, #392]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007aba:	2b08      	cmp	r3, #8
 8007abc:	d11c      	bne.n	8007af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007abe:	4b5f      	ldr	r3, [pc, #380]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d116      	bne.n	8007af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aca:	4b5c      	ldr	r3, [pc, #368]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x152>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d001      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e1c4      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ae2:	4b56      	ldr	r3, [pc, #344]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	4952      	ldr	r1, [pc, #328]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007af6:	e03a      	b.n	8007b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d020      	beq.n	8007b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b00:	4b4f      	ldr	r3, [pc, #316]	; (8007c40 <HAL_RCC_OscConfig+0x2b0>)
 8007b02:	2201      	movs	r2, #1
 8007b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b06:	f7fe fc2f 	bl	8006368 <HAL_GetTick>
 8007b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b0c:	e008      	b.n	8007b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b0e:	f7fe fc2b 	bl	8006368 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d901      	bls.n	8007b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e1a5      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b20:	4b46      	ldr	r3, [pc, #280]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d0f0      	beq.n	8007b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b2c:	4b43      	ldr	r3, [pc, #268]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	4940      	ldr	r1, [pc, #256]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	600b      	str	r3, [r1, #0]
 8007b40:	e015      	b.n	8007b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b42:	4b3f      	ldr	r3, [pc, #252]	; (8007c40 <HAL_RCC_OscConfig+0x2b0>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b48:	f7fe fc0e 	bl	8006368 <HAL_GetTick>
 8007b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b4e:	e008      	b.n	8007b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b50:	f7fe fc0a 	bl	8006368 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e184      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b62:	4b36      	ldr	r3, [pc, #216]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1f0      	bne.n	8007b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0308 	and.w	r3, r3, #8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d030      	beq.n	8007bdc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d016      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b82:	4b30      	ldr	r3, [pc, #192]	; (8007c44 <HAL_RCC_OscConfig+0x2b4>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b88:	f7fe fbee 	bl	8006368 <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b90:	f7fe fbea 	bl	8006368 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e164      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ba2:	4b26      	ldr	r3, [pc, #152]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0f0      	beq.n	8007b90 <HAL_RCC_OscConfig+0x200>
 8007bae:	e015      	b.n	8007bdc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bb0:	4b24      	ldr	r3, [pc, #144]	; (8007c44 <HAL_RCC_OscConfig+0x2b4>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bb6:	f7fe fbd7 	bl	8006368 <HAL_GetTick>
 8007bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bbc:	e008      	b.n	8007bd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bbe:	f7fe fbd3 	bl	8006368 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d901      	bls.n	8007bd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e14d      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bd0:	4b1a      	ldr	r3, [pc, #104]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1f0      	bne.n	8007bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0304 	and.w	r3, r3, #4
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80a0 	beq.w	8007d2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bea:	2300      	movs	r3, #0
 8007bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bee:	4b13      	ldr	r3, [pc, #76]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10f      	bne.n	8007c1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60bb      	str	r3, [r7, #8]
 8007bfe:	4b0f      	ldr	r3, [pc, #60]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	4a0e      	ldr	r2, [pc, #56]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c08:	6413      	str	r3, [r2, #64]	; 0x40
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <HAL_RCC_OscConfig+0x2ac>)
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c12:	60bb      	str	r3, [r7, #8]
 8007c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c16:	2301      	movs	r3, #1
 8007c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c1a:	4b0b      	ldr	r3, [pc, #44]	; (8007c48 <HAL_RCC_OscConfig+0x2b8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d121      	bne.n	8007c6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c26:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <HAL_RCC_OscConfig+0x2b8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a07      	ldr	r2, [pc, #28]	; (8007c48 <HAL_RCC_OscConfig+0x2b8>)
 8007c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c32:	f7fe fb99 	bl	8006368 <HAL_GetTick>
 8007c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c38:	e011      	b.n	8007c5e <HAL_RCC_OscConfig+0x2ce>
 8007c3a:	bf00      	nop
 8007c3c:	40023800 	.word	0x40023800
 8007c40:	42470000 	.word	0x42470000
 8007c44:	42470e80 	.word	0x42470e80
 8007c48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c4c:	f7fe fb8c 	bl	8006368 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e106      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c5e:	4b85      	ldr	r3, [pc, #532]	; (8007e74 <HAL_RCC_OscConfig+0x4e4>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0f0      	beq.n	8007c4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d106      	bne.n	8007c80 <HAL_RCC_OscConfig+0x2f0>
 8007c72:	4b81      	ldr	r3, [pc, #516]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c76:	4a80      	ldr	r2, [pc, #512]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007c78:	f043 0301 	orr.w	r3, r3, #1
 8007c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c7e:	e01c      	b.n	8007cba <HAL_RCC_OscConfig+0x32a>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	2b05      	cmp	r3, #5
 8007c86:	d10c      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x312>
 8007c88:	4b7b      	ldr	r3, [pc, #492]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8c:	4a7a      	ldr	r2, [pc, #488]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007c8e:	f043 0304 	orr.w	r3, r3, #4
 8007c92:	6713      	str	r3, [r2, #112]	; 0x70
 8007c94:	4b78      	ldr	r3, [pc, #480]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c98:	4a77      	ldr	r2, [pc, #476]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007ca0:	e00b      	b.n	8007cba <HAL_RCC_OscConfig+0x32a>
 8007ca2:	4b75      	ldr	r3, [pc, #468]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca6:	4a74      	ldr	r2, [pc, #464]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	6713      	str	r3, [r2, #112]	; 0x70
 8007cae:	4b72      	ldr	r3, [pc, #456]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb2:	4a71      	ldr	r2, [pc, #452]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007cb4:	f023 0304 	bic.w	r3, r3, #4
 8007cb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d015      	beq.n	8007cee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc2:	f7fe fb51 	bl	8006368 <HAL_GetTick>
 8007cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc8:	e00a      	b.n	8007ce0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cca:	f7fe fb4d 	bl	8006368 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e0c5      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ce0:	4b65      	ldr	r3, [pc, #404]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce4:	f003 0302 	and.w	r3, r3, #2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0ee      	beq.n	8007cca <HAL_RCC_OscConfig+0x33a>
 8007cec:	e014      	b.n	8007d18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cee:	f7fe fb3b 	bl	8006368 <HAL_GetTick>
 8007cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cf4:	e00a      	b.n	8007d0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cf6:	f7fe fb37 	bl	8006368 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d901      	bls.n	8007d0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e0af      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d0c:	4b5a      	ldr	r3, [pc, #360]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1ee      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d105      	bne.n	8007d2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d1e:	4b56      	ldr	r3, [pc, #344]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	4a55      	ldr	r2, [pc, #340]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 809b 	beq.w	8007e6a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d34:	4b50      	ldr	r3, [pc, #320]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 030c 	and.w	r3, r3, #12
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d05c      	beq.n	8007dfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d141      	bne.n	8007dcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d48:	4b4c      	ldr	r3, [pc, #304]	; (8007e7c <HAL_RCC_OscConfig+0x4ec>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d4e:	f7fe fb0b 	bl	8006368 <HAL_GetTick>
 8007d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d54:	e008      	b.n	8007d68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d56:	f7fe fb07 	bl	8006368 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e081      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d68:	4b43      	ldr	r3, [pc, #268]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1f0      	bne.n	8007d56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	69da      	ldr	r2, [r3, #28]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	019b      	lsls	r3, r3, #6
 8007d84:	431a      	orrs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8a:	085b      	lsrs	r3, r3, #1
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	041b      	lsls	r3, r3, #16
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	061b      	lsls	r3, r3, #24
 8007d98:	4937      	ldr	r1, [pc, #220]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d9e:	4b37      	ldr	r3, [pc, #220]	; (8007e7c <HAL_RCC_OscConfig+0x4ec>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da4:	f7fe fae0 	bl	8006368 <HAL_GetTick>
 8007da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007daa:	e008      	b.n	8007dbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dac:	f7fe fadc 	bl	8006368 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e056      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dbe:	4b2e      	ldr	r3, [pc, #184]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0f0      	beq.n	8007dac <HAL_RCC_OscConfig+0x41c>
 8007dca:	e04e      	b.n	8007e6a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dcc:	4b2b      	ldr	r3, [pc, #172]	; (8007e7c <HAL_RCC_OscConfig+0x4ec>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd2:	f7fe fac9 	bl	8006368 <HAL_GetTick>
 8007dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd8:	e008      	b.n	8007dec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dda:	f7fe fac5 	bl	8006368 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e03f      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dec:	4b22      	ldr	r3, [pc, #136]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1f0      	bne.n	8007dda <HAL_RCC_OscConfig+0x44a>
 8007df8:	e037      	b.n	8007e6a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e032      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e06:	4b1c      	ldr	r3, [pc, #112]	; (8007e78 <HAL_RCC_OscConfig+0x4e8>)
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d028      	beq.n	8007e66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d121      	bne.n	8007e66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d11a      	bne.n	8007e66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e36:	4013      	ands	r3, r2
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e3c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d111      	bne.n	8007e66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4c:	085b      	lsrs	r3, r3, #1
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d107      	bne.n	8007e66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d001      	beq.n	8007e6a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	40007000 	.word	0x40007000
 8007e78:	40023800 	.word	0x40023800
 8007e7c:	42470060 	.word	0x42470060

08007e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d101      	bne.n	8007e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0cc      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e94:	4b68      	ldr	r3, [pc, #416]	; (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d90c      	bls.n	8007ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea2:	4b65      	ldr	r3, [pc, #404]	; (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	b2d2      	uxtb	r2, r2
 8007ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eaa:	4b63      	ldr	r3, [pc, #396]	; (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0307 	and.w	r3, r3, #7
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d001      	beq.n	8007ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e0b8      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d020      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ed4:	4b59      	ldr	r3, [pc, #356]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	4a58      	ldr	r2, [pc, #352]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007eec:	4b53      	ldr	r3, [pc, #332]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	4a52      	ldr	r2, [pc, #328]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ef8:	4b50      	ldr	r3, [pc, #320]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	494d      	ldr	r1, [pc, #308]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d044      	beq.n	8007fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d107      	bne.n	8007f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f1e:	4b47      	ldr	r3, [pc, #284]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d119      	bne.n	8007f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e07f      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d003      	beq.n	8007f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d107      	bne.n	8007f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f3e:	4b3f      	ldr	r3, [pc, #252]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d109      	bne.n	8007f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e06f      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f4e:	4b3b      	ldr	r3, [pc, #236]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e067      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f5e:	4b37      	ldr	r3, [pc, #220]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f023 0203 	bic.w	r2, r3, #3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	4934      	ldr	r1, [pc, #208]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f70:	f7fe f9fa 	bl	8006368 <HAL_GetTick>
 8007f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f76:	e00a      	b.n	8007f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f78:	f7fe f9f6 	bl	8006368 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e04f      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f8e:	4b2b      	ldr	r3, [pc, #172]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f003 020c 	and.w	r2, r3, #12
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d1eb      	bne.n	8007f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007fa0:	4b25      	ldr	r3, [pc, #148]	; (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d20c      	bcs.n	8007fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fae:	4b22      	ldr	r3, [pc, #136]	; (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	b2d2      	uxtb	r2, r2
 8007fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fb6:	4b20      	ldr	r3, [pc, #128]	; (8008038 <HAL_RCC_ClockConfig+0x1b8>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0307 	and.w	r3, r3, #7
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d001      	beq.n	8007fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e032      	b.n	800802e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d008      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fd4:	4b19      	ldr	r3, [pc, #100]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	4916      	ldr	r1, [pc, #88]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ff2:	4b12      	ldr	r3, [pc, #72]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	490e      	ldr	r1, [pc, #56]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 8008002:	4313      	orrs	r3, r2
 8008004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008006:	f000 f821 	bl	800804c <HAL_RCC_GetSysClockFreq>
 800800a:	4602      	mov	r2, r0
 800800c:	4b0b      	ldr	r3, [pc, #44]	; (800803c <HAL_RCC_ClockConfig+0x1bc>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	091b      	lsrs	r3, r3, #4
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	490a      	ldr	r1, [pc, #40]	; (8008040 <HAL_RCC_ClockConfig+0x1c0>)
 8008018:	5ccb      	ldrb	r3, [r1, r3]
 800801a:	fa22 f303 	lsr.w	r3, r2, r3
 800801e:	4a09      	ldr	r2, [pc, #36]	; (8008044 <HAL_RCC_ClockConfig+0x1c4>)
 8008020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008022:	4b09      	ldr	r3, [pc, #36]	; (8008048 <HAL_RCC_ClockConfig+0x1c8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe f95a 	bl	80062e0 <HAL_InitTick>

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	40023c00 	.word	0x40023c00
 800803c:	40023800 	.word	0x40023800
 8008040:	0800d294 	.word	0x0800d294
 8008044:	20000040 	.word	0x20000040
 8008048:	20000044 	.word	0x20000044

0800804c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800804c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	607b      	str	r3, [r7, #4]
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	2300      	movs	r3, #0
 800805e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008064:	4b67      	ldr	r3, [pc, #412]	; (8008204 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 030c 	and.w	r3, r3, #12
 800806c:	2b08      	cmp	r3, #8
 800806e:	d00d      	beq.n	800808c <HAL_RCC_GetSysClockFreq+0x40>
 8008070:	2b08      	cmp	r3, #8
 8008072:	f200 80bd 	bhi.w	80081f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <HAL_RCC_GetSysClockFreq+0x34>
 800807a:	2b04      	cmp	r3, #4
 800807c:	d003      	beq.n	8008086 <HAL_RCC_GetSysClockFreq+0x3a>
 800807e:	e0b7      	b.n	80081f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008080:	4b61      	ldr	r3, [pc, #388]	; (8008208 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008082:	60bb      	str	r3, [r7, #8]
       break;
 8008084:	e0b7      	b.n	80081f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008086:	4b61      	ldr	r3, [pc, #388]	; (800820c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008088:	60bb      	str	r3, [r7, #8]
      break;
 800808a:	e0b4      	b.n	80081f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800808c:	4b5d      	ldr	r3, [pc, #372]	; (8008204 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008094:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008096:	4b5b      	ldr	r3, [pc, #364]	; (8008204 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d04d      	beq.n	800813e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080a2:	4b58      	ldr	r3, [pc, #352]	; (8008204 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	461a      	mov	r2, r3
 80080aa:	f04f 0300 	mov.w	r3, #0
 80080ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80080b2:	f04f 0100 	mov.w	r1, #0
 80080b6:	ea02 0800 	and.w	r8, r2, r0
 80080ba:	ea03 0901 	and.w	r9, r3, r1
 80080be:	4640      	mov	r0, r8
 80080c0:	4649      	mov	r1, r9
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	f04f 0300 	mov.w	r3, #0
 80080ca:	014b      	lsls	r3, r1, #5
 80080cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80080d0:	0142      	lsls	r2, r0, #5
 80080d2:	4610      	mov	r0, r2
 80080d4:	4619      	mov	r1, r3
 80080d6:	ebb0 0008 	subs.w	r0, r0, r8
 80080da:	eb61 0109 	sbc.w	r1, r1, r9
 80080de:	f04f 0200 	mov.w	r2, #0
 80080e2:	f04f 0300 	mov.w	r3, #0
 80080e6:	018b      	lsls	r3, r1, #6
 80080e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80080ec:	0182      	lsls	r2, r0, #6
 80080ee:	1a12      	subs	r2, r2, r0
 80080f0:	eb63 0301 	sbc.w	r3, r3, r1
 80080f4:	f04f 0000 	mov.w	r0, #0
 80080f8:	f04f 0100 	mov.w	r1, #0
 80080fc:	00d9      	lsls	r1, r3, #3
 80080fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008102:	00d0      	lsls	r0, r2, #3
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	eb12 0208 	adds.w	r2, r2, r8
 800810c:	eb43 0309 	adc.w	r3, r3, r9
 8008110:	f04f 0000 	mov.w	r0, #0
 8008114:	f04f 0100 	mov.w	r1, #0
 8008118:	0259      	lsls	r1, r3, #9
 800811a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800811e:	0250      	lsls	r0, r2, #9
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4610      	mov	r0, r2
 8008126:	4619      	mov	r1, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	461a      	mov	r2, r3
 800812c:	f04f 0300 	mov.w	r3, #0
 8008130:	f7f8 fd6c 	bl	8000c0c <__aeabi_uldivmod>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4613      	mov	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	e04a      	b.n	80081d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800813e:	4b31      	ldr	r3, [pc, #196]	; (8008204 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	099b      	lsrs	r3, r3, #6
 8008144:	461a      	mov	r2, r3
 8008146:	f04f 0300 	mov.w	r3, #0
 800814a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800814e:	f04f 0100 	mov.w	r1, #0
 8008152:	ea02 0400 	and.w	r4, r2, r0
 8008156:	ea03 0501 	and.w	r5, r3, r1
 800815a:	4620      	mov	r0, r4
 800815c:	4629      	mov	r1, r5
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	f04f 0300 	mov.w	r3, #0
 8008166:	014b      	lsls	r3, r1, #5
 8008168:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800816c:	0142      	lsls	r2, r0, #5
 800816e:	4610      	mov	r0, r2
 8008170:	4619      	mov	r1, r3
 8008172:	1b00      	subs	r0, r0, r4
 8008174:	eb61 0105 	sbc.w	r1, r1, r5
 8008178:	f04f 0200 	mov.w	r2, #0
 800817c:	f04f 0300 	mov.w	r3, #0
 8008180:	018b      	lsls	r3, r1, #6
 8008182:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008186:	0182      	lsls	r2, r0, #6
 8008188:	1a12      	subs	r2, r2, r0
 800818a:	eb63 0301 	sbc.w	r3, r3, r1
 800818e:	f04f 0000 	mov.w	r0, #0
 8008192:	f04f 0100 	mov.w	r1, #0
 8008196:	00d9      	lsls	r1, r3, #3
 8008198:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800819c:	00d0      	lsls	r0, r2, #3
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	1912      	adds	r2, r2, r4
 80081a4:	eb45 0303 	adc.w	r3, r5, r3
 80081a8:	f04f 0000 	mov.w	r0, #0
 80081ac:	f04f 0100 	mov.w	r1, #0
 80081b0:	0299      	lsls	r1, r3, #10
 80081b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80081b6:	0290      	lsls	r0, r2, #10
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4610      	mov	r0, r2
 80081be:	4619      	mov	r1, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	461a      	mov	r2, r3
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	f7f8 fd20 	bl	8000c0c <__aeabi_uldivmod>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4613      	mov	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80081d4:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	0c1b      	lsrs	r3, r3, #16
 80081da:	f003 0303 	and.w	r3, r3, #3
 80081de:	3301      	adds	r3, #1
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ec:	60bb      	str	r3, [r7, #8]
      break;
 80081ee:	e002      	b.n	80081f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081f0:	4b05      	ldr	r3, [pc, #20]	; (8008208 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80081f2:	60bb      	str	r3, [r7, #8]
      break;
 80081f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081f6:	68bb      	ldr	r3, [r7, #8]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008202:	bf00      	nop
 8008204:	40023800 	.word	0x40023800
 8008208:	00f42400 	.word	0x00f42400
 800820c:	007a1200 	.word	0x007a1200

08008210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008214:	4b03      	ldr	r3, [pc, #12]	; (8008224 <HAL_RCC_GetHCLKFreq+0x14>)
 8008216:	681b      	ldr	r3, [r3, #0]
}
 8008218:	4618      	mov	r0, r3
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20000040 	.word	0x20000040

08008228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800822c:	f7ff fff0 	bl	8008210 <HAL_RCC_GetHCLKFreq>
 8008230:	4602      	mov	r2, r0
 8008232:	4b05      	ldr	r3, [pc, #20]	; (8008248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	0a9b      	lsrs	r3, r3, #10
 8008238:	f003 0307 	and.w	r3, r3, #7
 800823c:	4903      	ldr	r1, [pc, #12]	; (800824c <HAL_RCC_GetPCLK1Freq+0x24>)
 800823e:	5ccb      	ldrb	r3, [r1, r3]
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008244:	4618      	mov	r0, r3
 8008246:	bd80      	pop	{r7, pc}
 8008248:	40023800 	.word	0x40023800
 800824c:	0800d2a4 	.word	0x0800d2a4

08008250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008254:	f7ff ffdc 	bl	8008210 <HAL_RCC_GetHCLKFreq>
 8008258:	4602      	mov	r2, r0
 800825a:	4b05      	ldr	r3, [pc, #20]	; (8008270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	0b5b      	lsrs	r3, r3, #13
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	4903      	ldr	r1, [pc, #12]	; (8008274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008266:	5ccb      	ldrb	r3, [r1, r3]
 8008268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800826c:	4618      	mov	r0, r3
 800826e:	bd80      	pop	{r7, pc}
 8008270:	40023800 	.word	0x40023800
 8008274:	0800d2a4 	.word	0x0800d2a4

08008278 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e07b      	b.n	8008382 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	d108      	bne.n	80082a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800829a:	d009      	beq.n	80082b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	61da      	str	r2, [r3, #28]
 80082a2:	e005      	b.n	80082b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d106      	bne.n	80082d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fd fa2c 	bl	8005728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80082f8:	431a      	orrs	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008302:	431a      	orrs	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	431a      	orrs	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	431a      	orrs	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008320:	431a      	orrs	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008334:	ea42 0103 	orr.w	r1, r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	0c1b      	lsrs	r3, r3, #16
 800834e:	f003 0104 	and.w	r1, r3, #4
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	f003 0210 	and.w	r2, r3, #16
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69da      	ldr	r2, [r3, #28]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008370:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b088      	sub	sp, #32
 800838e:	af00      	add	r7, sp, #0
 8008390:	60f8      	str	r0, [r7, #12]
 8008392:	60b9      	str	r1, [r7, #8]
 8008394:	603b      	str	r3, [r7, #0]
 8008396:	4613      	mov	r3, r2
 8008398:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <HAL_SPI_Transmit+0x22>
 80083a8:	2302      	movs	r3, #2
 80083aa:	e126      	b.n	80085fa <HAL_SPI_Transmit+0x270>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083b4:	f7fd ffd8 	bl	8006368 <HAL_GetTick>
 80083b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80083ba:	88fb      	ldrh	r3, [r7, #6]
 80083bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d002      	beq.n	80083d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80083ca:	2302      	movs	r3, #2
 80083cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083ce:	e10b      	b.n	80085e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <HAL_SPI_Transmit+0x52>
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083e0:	e102      	b.n	80085e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2203      	movs	r2, #3
 80083e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	88fa      	ldrh	r2, [r7, #6]
 80083fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	88fa      	ldrh	r2, [r7, #6]
 8008400:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008428:	d10f      	bne.n	800844a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008438:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008448:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008454:	2b40      	cmp	r3, #64	; 0x40
 8008456:	d007      	beq.n	8008468 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008466:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008470:	d14b      	bne.n	800850a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <HAL_SPI_Transmit+0xf6>
 800847a:	8afb      	ldrh	r3, [r7, #22]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d13e      	bne.n	80084fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008484:	881a      	ldrh	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008490:	1c9a      	adds	r2, r3, #2
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80084a4:	e02b      	b.n	80084fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d112      	bne.n	80084da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b8:	881a      	ldrh	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c4:	1c9a      	adds	r2, r3, #2
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	3b01      	subs	r3, #1
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80084d8:	e011      	b.n	80084fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084da:	f7fd ff45 	bl	8006368 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d803      	bhi.n	80084f2 <HAL_SPI_Transmit+0x168>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d102      	bne.n	80084f8 <HAL_SPI_Transmit+0x16e>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d102      	bne.n	80084fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80084fc:	e074      	b.n	80085e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008502:	b29b      	uxth	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1ce      	bne.n	80084a6 <HAL_SPI_Transmit+0x11c>
 8008508:	e04c      	b.n	80085a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <HAL_SPI_Transmit+0x18e>
 8008512:	8afb      	ldrh	r3, [r7, #22]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d140      	bne.n	800859a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	330c      	adds	r3, #12
 8008522:	7812      	ldrb	r2, [r2, #0]
 8008524:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800853e:	e02c      	b.n	800859a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b02      	cmp	r3, #2
 800854c:	d113      	bne.n	8008576 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	330c      	adds	r3, #12
 8008558:	7812      	ldrb	r2, [r2, #0]
 800855a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	86da      	strh	r2, [r3, #54]	; 0x36
 8008574:	e011      	b.n	800859a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008576:	f7fd fef7 	bl	8006368 <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d803      	bhi.n	800858e <HAL_SPI_Transmit+0x204>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858c:	d102      	bne.n	8008594 <HAL_SPI_Transmit+0x20a>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d102      	bne.n	800859a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008598:	e026      	b.n	80085e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800859e:	b29b      	uxth	r3, r3
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1cd      	bne.n	8008540 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	6839      	ldr	r1, [r7, #0]
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 fbcb 	bl	8008d44 <SPI_EndRxTxTransaction>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2220      	movs	r2, #32
 80085b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10a      	bne.n	80085d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085c2:	2300      	movs	r3, #0
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	613b      	str	r3, [r7, #16]
 80085d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	77fb      	strb	r3, [r7, #31]
 80085e4:	e000      	b.n	80085e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80085e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80085f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3720      	adds	r7, #32
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b088      	sub	sp, #32
 8008606:	af02      	add	r7, sp, #8
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	603b      	str	r3, [r7, #0]
 800860e:	4613      	mov	r3, r2
 8008610:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800861e:	d112      	bne.n	8008646 <HAL_SPI_Receive+0x44>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10e      	bne.n	8008646 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2204      	movs	r2, #4
 800862c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008630:	88fa      	ldrh	r2, [r7, #6]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	4613      	mov	r3, r2
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f000 f8f1 	bl	8008824 <HAL_SPI_TransmitReceive>
 8008642:	4603      	mov	r3, r0
 8008644:	e0ea      	b.n	800881c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <HAL_SPI_Receive+0x52>
 8008650:	2302      	movs	r3, #2
 8008652:	e0e3      	b.n	800881c <HAL_SPI_Receive+0x21a>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800865c:	f7fd fe84 	bl	8006368 <HAL_GetTick>
 8008660:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b01      	cmp	r3, #1
 800866c:	d002      	beq.n	8008674 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800866e:	2302      	movs	r3, #2
 8008670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008672:	e0ca      	b.n	800880a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <HAL_SPI_Receive+0x7e>
 800867a:	88fb      	ldrh	r3, [r7, #6]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008684:	e0c1      	b.n	800880a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2204      	movs	r2, #4
 800868a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	88fa      	ldrh	r2, [r7, #6]
 800869e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086cc:	d10f      	bne.n	80086ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80086ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f8:	2b40      	cmp	r3, #64	; 0x40
 80086fa:	d007      	beq.n	800870c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800870a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d162      	bne.n	80087da <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008714:	e02e      	b.n	8008774 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b01      	cmp	r3, #1
 8008722:	d115      	bne.n	8008750 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f103 020c 	add.w	r2, r3, #12
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008730:	7812      	ldrb	r2, [r2, #0]
 8008732:	b2d2      	uxtb	r2, r2
 8008734:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008744:	b29b      	uxth	r3, r3
 8008746:	3b01      	subs	r3, #1
 8008748:	b29a      	uxth	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800874e:	e011      	b.n	8008774 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008750:	f7fd fe0a 	bl	8006368 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	429a      	cmp	r2, r3
 800875e:	d803      	bhi.n	8008768 <HAL_SPI_Receive+0x166>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008766:	d102      	bne.n	800876e <HAL_SPI_Receive+0x16c>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d102      	bne.n	8008774 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008772:	e04a      	b.n	800880a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008778:	b29b      	uxth	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1cb      	bne.n	8008716 <HAL_SPI_Receive+0x114>
 800877e:	e031      	b.n	80087e4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b01      	cmp	r3, #1
 800878c:	d113      	bne.n	80087b6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	b292      	uxth	r2, r2
 800879a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a0:	1c9a      	adds	r2, r3, #2
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	3b01      	subs	r3, #1
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087b4:	e011      	b.n	80087da <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087b6:	f7fd fdd7 	bl	8006368 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d803      	bhi.n	80087ce <HAL_SPI_Receive+0x1cc>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087cc:	d102      	bne.n	80087d4 <HAL_SPI_Receive+0x1d2>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d102      	bne.n	80087da <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80087d8:	e017      	b.n	800880a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087de:	b29b      	uxth	r3, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1cd      	bne.n	8008780 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 fa45 	bl	8008c78 <SPI_EndRxTransaction>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2220      	movs	r2, #32
 80087f8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	75fb      	strb	r3, [r7, #23]
 8008806:	e000      	b.n	800880a <HAL_SPI_Receive+0x208>
  }

error :
 8008808:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08c      	sub	sp, #48	; 0x30
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008832:	2301      	movs	r3, #1
 8008834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008842:	2b01      	cmp	r3, #1
 8008844:	d101      	bne.n	800884a <HAL_SPI_TransmitReceive+0x26>
 8008846:	2302      	movs	r3, #2
 8008848:	e18a      	b.n	8008b60 <HAL_SPI_TransmitReceive+0x33c>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008852:	f7fd fd89 	bl	8006368 <HAL_GetTick>
 8008856:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800885e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008868:	887b      	ldrh	r3, [r7, #2]
 800886a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800886c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008870:	2b01      	cmp	r3, #1
 8008872:	d00f      	beq.n	8008894 <HAL_SPI_TransmitReceive+0x70>
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800887a:	d107      	bne.n	800888c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d103      	bne.n	800888c <HAL_SPI_TransmitReceive+0x68>
 8008884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008888:	2b04      	cmp	r3, #4
 800888a:	d003      	beq.n	8008894 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800888c:	2302      	movs	r3, #2
 800888e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008892:	e15b      	b.n	8008b4c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <HAL_SPI_TransmitReceive+0x82>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <HAL_SPI_TransmitReceive+0x82>
 80088a0:	887b      	ldrh	r3, [r7, #2]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d103      	bne.n	80088ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80088ac:	e14e      	b.n	8008b4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d003      	beq.n	80088c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2205      	movs	r2, #5
 80088be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	887a      	ldrh	r2, [r7, #2]
 80088d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	887a      	ldrh	r2, [r7, #2]
 80088d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	887a      	ldrh	r2, [r7, #2]
 80088e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	887a      	ldrh	r2, [r7, #2]
 80088ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008902:	2b40      	cmp	r3, #64	; 0x40
 8008904:	d007      	beq.n	8008916 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008914:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800891e:	d178      	bne.n	8008a12 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <HAL_SPI_TransmitReceive+0x10a>
 8008928:	8b7b      	ldrh	r3, [r7, #26]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d166      	bne.n	80089fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008932:	881a      	ldrh	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	1c9a      	adds	r2, r3, #2
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008948:	b29b      	uxth	r3, r3
 800894a:	3b01      	subs	r3, #1
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008952:	e053      	b.n	80089fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f003 0302 	and.w	r3, r3, #2
 800895e:	2b02      	cmp	r3, #2
 8008960:	d11b      	bne.n	800899a <HAL_SPI_TransmitReceive+0x176>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008966:	b29b      	uxth	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d016      	beq.n	800899a <HAL_SPI_TransmitReceive+0x176>
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	2b01      	cmp	r3, #1
 8008970:	d113      	bne.n	800899a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	881a      	ldrh	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008982:	1c9a      	adds	r2, r3, #2
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800898c:	b29b      	uxth	r3, r3
 800898e:	3b01      	subs	r3, #1
 8008990:	b29a      	uxth	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d119      	bne.n	80089dc <HAL_SPI_TransmitReceive+0x1b8>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d014      	beq.n	80089dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089bc:	b292      	uxth	r2, r2
 80089be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c4:	1c9a      	adds	r2, r3, #2
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089d8:	2301      	movs	r3, #1
 80089da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80089dc:	f7fd fcc4 	bl	8006368 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d807      	bhi.n	80089fc <HAL_SPI_TransmitReceive+0x1d8>
 80089ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f2:	d003      	beq.n	80089fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089fa:	e0a7      	b.n	8008b4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1a6      	bne.n	8008954 <HAL_SPI_TransmitReceive+0x130>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1a1      	bne.n	8008954 <HAL_SPI_TransmitReceive+0x130>
 8008a10:	e07c      	b.n	8008b0c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d002      	beq.n	8008a20 <HAL_SPI_TransmitReceive+0x1fc>
 8008a1a:	8b7b      	ldrh	r3, [r7, #26]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d16b      	bne.n	8008af8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	330c      	adds	r3, #12
 8008a2a:	7812      	ldrb	r2, [r2, #0]
 8008a2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a46:	e057      	b.n	8008af8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	f003 0302 	and.w	r3, r3, #2
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d11c      	bne.n	8008a90 <HAL_SPI_TransmitReceive+0x26c>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d017      	beq.n	8008a90 <HAL_SPI_TransmitReceive+0x26c>
 8008a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d114      	bne.n	8008a90 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	330c      	adds	r3, #12
 8008a70:	7812      	ldrb	r2, [r2, #0]
 8008a72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	3b01      	subs	r3, #1
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d119      	bne.n	8008ad2 <HAL_SPI_TransmitReceive+0x2ae>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d014      	beq.n	8008ad2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab2:	b2d2      	uxtb	r2, r2
 8008ab4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ad2:	f7fd fc49 	bl	8006368 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d803      	bhi.n	8008aea <HAL_SPI_TransmitReceive+0x2c6>
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae8:	d102      	bne.n	8008af0 <HAL_SPI_TransmitReceive+0x2cc>
 8008aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d103      	bne.n	8008af8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008af6:	e029      	b.n	8008b4c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1a2      	bne.n	8008a48 <HAL_SPI_TransmitReceive+0x224>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d19d      	bne.n	8008a48 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 f917 	bl	8008d44 <SPI_EndRxTxTransaction>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d006      	beq.n	8008b2a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2220      	movs	r2, #32
 8008b26:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008b28:	e010      	b.n	8008b4c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10b      	bne.n	8008b4a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b32:	2300      	movs	r3, #0
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	e000      	b.n	8008b4c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008b4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3730      	adds	r7, #48	; 0x30
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	603b      	str	r3, [r7, #0]
 8008b74:	4613      	mov	r3, r2
 8008b76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b78:	f7fd fbf6 	bl	8006368 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	1a9b      	subs	r3, r3, r2
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	4413      	add	r3, r2
 8008b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b88:	f7fd fbee 	bl	8006368 <HAL_GetTick>
 8008b8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b8e:	4b39      	ldr	r3, [pc, #228]	; (8008c74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	015b      	lsls	r3, r3, #5
 8008b94:	0d1b      	lsrs	r3, r3, #20
 8008b96:	69fa      	ldr	r2, [r7, #28]
 8008b98:	fb02 f303 	mul.w	r3, r2, r3
 8008b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b9e:	e054      	b.n	8008c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba6:	d050      	beq.n	8008c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ba8:	f7fd fbde 	bl	8006368 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d902      	bls.n	8008bbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d13d      	bne.n	8008c3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bd6:	d111      	bne.n	8008bfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008be0:	d004      	beq.n	8008bec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bea:	d107      	bne.n	8008bfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c04:	d10f      	bne.n	8008c26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e017      	b.n	8008c6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	4013      	ands	r3, r2
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	bf0c      	ite	eq
 8008c5a:	2301      	moveq	r3, #1
 8008c5c:	2300      	movne	r3, #0
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	461a      	mov	r2, r3
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d19b      	bne.n	8008ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3720      	adds	r7, #32
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000040 	.word	0x20000040

08008c78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af02      	add	r7, sp, #8
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c8c:	d111      	bne.n	8008cb2 <SPI_EndRxTransaction+0x3a>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c96:	d004      	beq.n	8008ca2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ca0:	d107      	bne.n	8008cb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cb0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cba:	d12a      	bne.n	8008d12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cc4:	d012      	beq.n	8008cec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2180      	movs	r1, #128	; 0x80
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f7ff ff49 	bl	8008b68 <SPI_WaitFlagStateUntilTimeout>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d02d      	beq.n	8008d38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce0:	f043 0220 	orr.w	r2, r3, #32
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e026      	b.n	8008d3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f7ff ff36 	bl	8008b68 <SPI_WaitFlagStateUntilTimeout>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d01a      	beq.n	8008d38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d06:	f043 0220 	orr.w	r2, r3, #32
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e013      	b.n	8008d3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f7ff ff23 	bl	8008b68 <SPI_WaitFlagStateUntilTimeout>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d007      	beq.n	8008d38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d2c:	f043 0220 	orr.w	r2, r3, #32
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e000      	b.n	8008d3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
	...

08008d44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008d50:	4b1b      	ldr	r3, [pc, #108]	; (8008dc0 <SPI_EndRxTxTransaction+0x7c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a1b      	ldr	r2, [pc, #108]	; (8008dc4 <SPI_EndRxTxTransaction+0x80>)
 8008d56:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5a:	0d5b      	lsrs	r3, r3, #21
 8008d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d60:	fb02 f303 	mul.w	r3, r2, r3
 8008d64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d6e:	d112      	bne.n	8008d96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2200      	movs	r2, #0
 8008d78:	2180      	movs	r1, #128	; 0x80
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f7ff fef4 	bl	8008b68 <SPI_WaitFlagStateUntilTimeout>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d016      	beq.n	8008db4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8a:	f043 0220 	orr.w	r2, r3, #32
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e00f      	b.n	8008db6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00a      	beq.n	8008db2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dac:	2b80      	cmp	r3, #128	; 0x80
 8008dae:	d0f2      	beq.n	8008d96 <SPI_EndRxTxTransaction+0x52>
 8008db0:	e000      	b.n	8008db4 <SPI_EndRxTxTransaction+0x70>
        break;
 8008db2:	bf00      	nop
  }

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000040 	.word	0x20000040
 8008dc4:	165e9f81 	.word	0x165e9f81

08008dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e041      	b.n	8008e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d106      	bne.n	8008df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7fc ff98 	bl	8005d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4619      	mov	r1, r3
 8008e06:	4610      	mov	r0, r2
 8008e08:	f000 fcc6 	bl	8009798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e041      	b.n	8008efc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d106      	bne.n	8008e92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f839 	bl	8008f04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2202      	movs	r2, #2
 8008e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	f000 fc77 	bl	8009798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d109      	bne.n	8008f44 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	bf0c      	ite	eq
 8008f3c:	2301      	moveq	r3, #1
 8008f3e:	2300      	movne	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	e022      	b.n	8008f8a <HAL_TIM_PWM_Start_DMA+0x72>
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d109      	bne.n	8008f5e <HAL_TIM_PWM_Start_DMA+0x46>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	bf0c      	ite	eq
 8008f56:	2301      	moveq	r3, #1
 8008f58:	2300      	movne	r3, #0
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	e015      	b.n	8008f8a <HAL_TIM_PWM_Start_DMA+0x72>
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	d109      	bne.n	8008f78 <HAL_TIM_PWM_Start_DMA+0x60>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	bf0c      	ite	eq
 8008f70:	2301      	moveq	r3, #1
 8008f72:	2300      	movne	r3, #0
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	e008      	b.n	8008f8a <HAL_TIM_PWM_Start_DMA+0x72>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	bf0c      	ite	eq
 8008f84:	2301      	moveq	r3, #1
 8008f86:	2300      	movne	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e171      	b.n	8009276 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d109      	bne.n	8008fac <HAL_TIM_PWM_Start_DMA+0x94>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2301      	moveq	r3, #1
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	e022      	b.n	8008ff2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d109      	bne.n	8008fc6 <HAL_TIM_PWM_Start_DMA+0xae>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	bf0c      	ite	eq
 8008fbe:	2301      	moveq	r3, #1
 8008fc0:	2300      	movne	r3, #0
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	e015      	b.n	8008ff2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d109      	bne.n	8008fe0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	bf0c      	ite	eq
 8008fd8:	2301      	moveq	r3, #1
 8008fda:	2300      	movne	r3, #0
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	e008      	b.n	8008ff2 <HAL_TIM_PWM_Start_DMA+0xda>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	bf0c      	ite	eq
 8008fec:	2301      	moveq	r3, #1
 8008fee:	2300      	movne	r3, #0
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d024      	beq.n	8009040 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d104      	bne.n	8009006 <HAL_TIM_PWM_Start_DMA+0xee>
 8008ffc:	887b      	ldrh	r3, [r7, #2]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e137      	b.n	8009276 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d104      	bne.n	8009016 <HAL_TIM_PWM_Start_DMA+0xfe>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2202      	movs	r2, #2
 8009010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009014:	e016      	b.n	8009044 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b04      	cmp	r3, #4
 800901a:	d104      	bne.n	8009026 <HAL_TIM_PWM_Start_DMA+0x10e>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009024:	e00e      	b.n	8009044 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2b08      	cmp	r3, #8
 800902a:	d104      	bne.n	8009036 <HAL_TIM_PWM_Start_DMA+0x11e>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2202      	movs	r2, #2
 8009030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009034:	e006      	b.n	8009044 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2202      	movs	r2, #2
 800903a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800903e:	e001      	b.n	8009044 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e118      	b.n	8009276 <HAL_TIM_PWM_Start_DMA+0x35e>
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b0c      	cmp	r3, #12
 8009048:	f200 80ae 	bhi.w	80091a8 <HAL_TIM_PWM_Start_DMA+0x290>
 800904c:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800904e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009052:	bf00      	nop
 8009054:	08009089 	.word	0x08009089
 8009058:	080091a9 	.word	0x080091a9
 800905c:	080091a9 	.word	0x080091a9
 8009060:	080091a9 	.word	0x080091a9
 8009064:	080090d1 	.word	0x080090d1
 8009068:	080091a9 	.word	0x080091a9
 800906c:	080091a9 	.word	0x080091a9
 8009070:	080091a9 	.word	0x080091a9
 8009074:	08009119 	.word	0x08009119
 8009078:	080091a9 	.word	0x080091a9
 800907c:	080091a9 	.word	0x080091a9
 8009080:	080091a9 	.word	0x080091a9
 8009084:	08009161 	.word	0x08009161
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	4a7c      	ldr	r2, [pc, #496]	; (8009280 <HAL_TIM_PWM_Start_DMA+0x368>)
 800908e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	4a7b      	ldr	r2, [pc, #492]	; (8009284 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009096:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	4a7a      	ldr	r2, [pc, #488]	; (8009288 <HAL_TIM_PWM_Start_DMA+0x370>)
 800909e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80090a4:	6879      	ldr	r1, [r7, #4]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3334      	adds	r3, #52	; 0x34
 80090ac:	461a      	mov	r2, r3
 80090ae:	887b      	ldrh	r3, [r7, #2]
 80090b0:	f7fd ff4a 	bl	8006f48 <HAL_DMA_Start_IT>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e0db      	b.n	8009276 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090cc:	60da      	str	r2, [r3, #12]
      break;
 80090ce:	e06e      	b.n	80091ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d4:	4a6a      	ldr	r2, [pc, #424]	; (8009280 <HAL_TIM_PWM_Start_DMA+0x368>)
 80090d6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090dc:	4a69      	ldr	r2, [pc, #420]	; (8009284 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80090de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e4:	4a68      	ldr	r2, [pc, #416]	; (8009288 <HAL_TIM_PWM_Start_DMA+0x370>)
 80090e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3338      	adds	r3, #56	; 0x38
 80090f4:	461a      	mov	r2, r3
 80090f6:	887b      	ldrh	r3, [r7, #2]
 80090f8:	f7fd ff26 	bl	8006f48 <HAL_DMA_Start_IT>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e0b7      	b.n	8009276 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009114:	60da      	str	r2, [r3, #12]
      break;
 8009116:	e04a      	b.n	80091ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911c:	4a58      	ldr	r2, [pc, #352]	; (8009280 <HAL_TIM_PWM_Start_DMA+0x368>)
 800911e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009124:	4a57      	ldr	r2, [pc, #348]	; (8009284 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009126:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912c:	4a56      	ldr	r2, [pc, #344]	; (8009288 <HAL_TIM_PWM_Start_DMA+0x370>)
 800912e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	333c      	adds	r3, #60	; 0x3c
 800913c:	461a      	mov	r2, r3
 800913e:	887b      	ldrh	r3, [r7, #2]
 8009140:	f7fd ff02 	bl	8006f48 <HAL_DMA_Start_IT>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e093      	b.n	8009276 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800915c:	60da      	str	r2, [r3, #12]
      break;
 800915e:	e026      	b.n	80091ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009164:	4a46      	ldr	r2, [pc, #280]	; (8009280 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009166:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916c:	4a45      	ldr	r2, [pc, #276]	; (8009284 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800916e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009174:	4a44      	ldr	r2, [pc, #272]	; (8009288 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009176:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3340      	adds	r3, #64	; 0x40
 8009184:	461a      	mov	r2, r3
 8009186:	887b      	ldrh	r3, [r7, #2]
 8009188:	f7fd fede 	bl	8006f48 <HAL_DMA_Start_IT>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e06f      	b.n	8009276 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68da      	ldr	r2, [r3, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80091a4:	60da      	str	r2, [r3, #12]
      break;
 80091a6:	e002      	b.n	80091ae <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	75fb      	strb	r3, [r7, #23]
      break;
 80091ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d15f      	bne.n	8009274 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2201      	movs	r2, #1
 80091ba:	68b9      	ldr	r1, [r7, #8]
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 fdd5 	bl	8009d6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a31      	ldr	r2, [pc, #196]	; (800928c <HAL_TIM_PWM_Start_DMA+0x374>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d004      	beq.n	80091d6 <HAL_TIM_PWM_Start_DMA+0x2be>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a2f      	ldr	r2, [pc, #188]	; (8009290 <HAL_TIM_PWM_Start_DMA+0x378>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d101      	bne.n	80091da <HAL_TIM_PWM_Start_DMA+0x2c2>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <HAL_TIM_PWM_Start_DMA+0x2c4>
 80091da:	2300      	movs	r3, #0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d007      	beq.n	80091f0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a25      	ldr	r2, [pc, #148]	; (800928c <HAL_TIM_PWM_Start_DMA+0x374>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d022      	beq.n	8009240 <HAL_TIM_PWM_Start_DMA+0x328>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009202:	d01d      	beq.n	8009240 <HAL_TIM_PWM_Start_DMA+0x328>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a22      	ldr	r2, [pc, #136]	; (8009294 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d018      	beq.n	8009240 <HAL_TIM_PWM_Start_DMA+0x328>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a21      	ldr	r2, [pc, #132]	; (8009298 <HAL_TIM_PWM_Start_DMA+0x380>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d013      	beq.n	8009240 <HAL_TIM_PWM_Start_DMA+0x328>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a1f      	ldr	r2, [pc, #124]	; (800929c <HAL_TIM_PWM_Start_DMA+0x384>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d00e      	beq.n	8009240 <HAL_TIM_PWM_Start_DMA+0x328>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a1a      	ldr	r2, [pc, #104]	; (8009290 <HAL_TIM_PWM_Start_DMA+0x378>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d009      	beq.n	8009240 <HAL_TIM_PWM_Start_DMA+0x328>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a1b      	ldr	r2, [pc, #108]	; (80092a0 <HAL_TIM_PWM_Start_DMA+0x388>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d004      	beq.n	8009240 <HAL_TIM_PWM_Start_DMA+0x328>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a1a      	ldr	r2, [pc, #104]	; (80092a4 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d111      	bne.n	8009264 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b06      	cmp	r3, #6
 8009250:	d010      	beq.n	8009274 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f042 0201 	orr.w	r2, r2, #1
 8009260:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009262:	e007      	b.n	8009274 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009274:	7dfb      	ldrb	r3, [r7, #23]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	08009689 	.word	0x08009689
 8009284:	08009731 	.word	0x08009731
 8009288:	080095f7 	.word	0x080095f7
 800928c:	40010000 	.word	0x40010000
 8009290:	40010400 	.word	0x40010400
 8009294:	40000400 	.word	0x40000400
 8009298:	40000800 	.word	0x40000800
 800929c:	40000c00 	.word	0x40000c00
 80092a0:	40014000 	.word	0x40014000
 80092a4:	40001800 	.word	0x40001800

080092a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80092c2:	2302      	movs	r3, #2
 80092c4:	e0ae      	b.n	8009424 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2b0c      	cmp	r3, #12
 80092d2:	f200 809f 	bhi.w	8009414 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80092d6:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80092d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092dc:	08009311 	.word	0x08009311
 80092e0:	08009415 	.word	0x08009415
 80092e4:	08009415 	.word	0x08009415
 80092e8:	08009415 	.word	0x08009415
 80092ec:	08009351 	.word	0x08009351
 80092f0:	08009415 	.word	0x08009415
 80092f4:	08009415 	.word	0x08009415
 80092f8:	08009415 	.word	0x08009415
 80092fc:	08009393 	.word	0x08009393
 8009300:	08009415 	.word	0x08009415
 8009304:	08009415 	.word	0x08009415
 8009308:	08009415 	.word	0x08009415
 800930c:	080093d3 	.word	0x080093d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68b9      	ldr	r1, [r7, #8]
 8009316:	4618      	mov	r0, r3
 8009318:	f000 fade 	bl	80098d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	699a      	ldr	r2, [r3, #24]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f042 0208 	orr.w	r2, r2, #8
 800932a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	699a      	ldr	r2, [r3, #24]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f022 0204 	bic.w	r2, r2, #4
 800933a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6999      	ldr	r1, [r3, #24]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	691a      	ldr	r2, [r3, #16]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	619a      	str	r2, [r3, #24]
      break;
 800934e:	e064      	b.n	800941a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68b9      	ldr	r1, [r7, #8]
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fb2e 	bl	80099b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800936a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	699a      	ldr	r2, [r3, #24]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800937a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6999      	ldr	r1, [r3, #24]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	021a      	lsls	r2, r3, #8
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	430a      	orrs	r2, r1
 800938e:	619a      	str	r2, [r3, #24]
      break;
 8009390:	e043      	b.n	800941a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	4618      	mov	r0, r3
 800939a:	f000 fb83 	bl	8009aa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	69da      	ldr	r2, [r3, #28]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f042 0208 	orr.w	r2, r2, #8
 80093ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	69da      	ldr	r2, [r3, #28]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0204 	bic.w	r2, r2, #4
 80093bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	69d9      	ldr	r1, [r3, #28]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	691a      	ldr	r2, [r3, #16]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	61da      	str	r2, [r3, #28]
      break;
 80093d0:	e023      	b.n	800941a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 fbd7 	bl	8009b8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69da      	ldr	r2, [r3, #28]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	69da      	ldr	r2, [r3, #28]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69d9      	ldr	r1, [r3, #28]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	021a      	lsls	r2, r3, #8
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	61da      	str	r2, [r3, #28]
      break;
 8009412:	e002      	b.n	800941a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	75fb      	strb	r3, [r7, #23]
      break;
 8009418:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009422:	7dfb      	ldrb	r3, [r7, #23]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_TIM_ConfigClockSource+0x1c>
 8009444:	2302      	movs	r3, #2
 8009446:	e0b4      	b.n	80095b2 <HAL_TIM_ConfigClockSource+0x186>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800946e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009480:	d03e      	beq.n	8009500 <HAL_TIM_ConfigClockSource+0xd4>
 8009482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009486:	f200 8087 	bhi.w	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 800948a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800948e:	f000 8086 	beq.w	800959e <HAL_TIM_ConfigClockSource+0x172>
 8009492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009496:	d87f      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 8009498:	2b70      	cmp	r3, #112	; 0x70
 800949a:	d01a      	beq.n	80094d2 <HAL_TIM_ConfigClockSource+0xa6>
 800949c:	2b70      	cmp	r3, #112	; 0x70
 800949e:	d87b      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094a0:	2b60      	cmp	r3, #96	; 0x60
 80094a2:	d050      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x11a>
 80094a4:	2b60      	cmp	r3, #96	; 0x60
 80094a6:	d877      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094a8:	2b50      	cmp	r3, #80	; 0x50
 80094aa:	d03c      	beq.n	8009526 <HAL_TIM_ConfigClockSource+0xfa>
 80094ac:	2b50      	cmp	r3, #80	; 0x50
 80094ae:	d873      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094b0:	2b40      	cmp	r3, #64	; 0x40
 80094b2:	d058      	beq.n	8009566 <HAL_TIM_ConfigClockSource+0x13a>
 80094b4:	2b40      	cmp	r3, #64	; 0x40
 80094b6:	d86f      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094b8:	2b30      	cmp	r3, #48	; 0x30
 80094ba:	d064      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0x15a>
 80094bc:	2b30      	cmp	r3, #48	; 0x30
 80094be:	d86b      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094c0:	2b20      	cmp	r3, #32
 80094c2:	d060      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0x15a>
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	d867      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d05c      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0x15a>
 80094cc:	2b10      	cmp	r3, #16
 80094ce:	d05a      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0x15a>
 80094d0:	e062      	b.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	6899      	ldr	r1, [r3, #8]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	685a      	ldr	r2, [r3, #4]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	f000 fc23 	bl	8009d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	609a      	str	r2, [r3, #8]
      break;
 80094fe:	e04f      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6818      	ldr	r0, [r3, #0]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	6899      	ldr	r1, [r3, #8]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	f000 fc0c 	bl	8009d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009522:	609a      	str	r2, [r3, #8]
      break;
 8009524:	e03c      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	6859      	ldr	r1, [r3, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	461a      	mov	r2, r3
 8009534:	f000 fb80 	bl	8009c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2150      	movs	r1, #80	; 0x50
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fbd9 	bl	8009cf6 <TIM_ITRx_SetConfig>
      break;
 8009544:	e02c      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6818      	ldr	r0, [r3, #0]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	6859      	ldr	r1, [r3, #4]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	461a      	mov	r2, r3
 8009554:	f000 fb9f 	bl	8009c96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2160      	movs	r1, #96	; 0x60
 800955e:	4618      	mov	r0, r3
 8009560:	f000 fbc9 	bl	8009cf6 <TIM_ITRx_SetConfig>
      break;
 8009564:	e01c      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	6859      	ldr	r1, [r3, #4]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	461a      	mov	r2, r3
 8009574:	f000 fb60 	bl	8009c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2140      	movs	r1, #64	; 0x40
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fbb9 	bl	8009cf6 <TIM_ITRx_SetConfig>
      break;
 8009584:	e00c      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4619      	mov	r1, r3
 8009590:	4610      	mov	r0, r2
 8009592:	f000 fbb0 	bl	8009cf6 <TIM_ITRx_SetConfig>
      break;
 8009596:	e003      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	73fb      	strb	r3, [r7, #15]
      break;
 800959c:	e000      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800959e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095c2:	bf00      	nop
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b083      	sub	sp, #12
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80095d6:	bf00      	nop
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b083      	sub	sp, #12
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	429a      	cmp	r2, r3
 800960c:	d107      	bne.n	800961e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2201      	movs	r2, #1
 8009612:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800961c:	e02a      	b.n	8009674 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d107      	bne.n	8009638 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2202      	movs	r2, #2
 800962c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009636:	e01d      	b.n	8009674 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	429a      	cmp	r2, r3
 8009640:	d107      	bne.n	8009652 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2204      	movs	r2, #4
 8009646:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009650:	e010      	b.n	8009674 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	429a      	cmp	r2, r3
 800965a:	d107      	bne.n	800966c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2208      	movs	r2, #8
 8009660:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800966a:	e003      	b.n	8009674 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7ff ffb4 	bl	80095e2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	771a      	strb	r2, [r3, #28]
}
 8009680:	bf00      	nop
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	429a      	cmp	r2, r3
 800969e:	d10b      	bne.n	80096b8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2201      	movs	r2, #1
 80096a4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d136      	bne.n	800971c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096b6:	e031      	b.n	800971c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d10b      	bne.n	80096da <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2202      	movs	r2, #2
 80096c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d125      	bne.n	800971c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096d8:	e020      	b.n	800971c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d10b      	bne.n	80096fc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2204      	movs	r2, #4
 80096e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	69db      	ldr	r3, [r3, #28]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d114      	bne.n	800971c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096fa:	e00f      	b.n	800971c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	429a      	cmp	r2, r3
 8009704:	d10a      	bne.n	800971c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2208      	movs	r2, #8
 800970a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d103      	bne.n	800971c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f7ff ff4c 	bl	80095ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	771a      	strb	r2, [r3, #28]
}
 8009728:	bf00      	nop
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d103      	bne.n	8009750 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2201      	movs	r2, #1
 800974c:	771a      	strb	r2, [r3, #28]
 800974e:	e019      	b.n	8009784 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	429a      	cmp	r2, r3
 8009758:	d103      	bne.n	8009762 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2202      	movs	r2, #2
 800975e:	771a      	strb	r2, [r3, #28]
 8009760:	e010      	b.n	8009784 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	429a      	cmp	r2, r3
 800976a:	d103      	bne.n	8009774 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2204      	movs	r2, #4
 8009770:	771a      	strb	r2, [r3, #28]
 8009772:	e007      	b.n	8009784 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	429a      	cmp	r2, r3
 800977c:	d102      	bne.n	8009784 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2208      	movs	r2, #8
 8009782:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f7ff ff22 	bl	80095ce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	771a      	strb	r2, [r3, #28]
}
 8009790:	bf00      	nop
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a40      	ldr	r2, [pc, #256]	; (80098ac <TIM_Base_SetConfig+0x114>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d013      	beq.n	80097d8 <TIM_Base_SetConfig+0x40>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b6:	d00f      	beq.n	80097d8 <TIM_Base_SetConfig+0x40>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a3d      	ldr	r2, [pc, #244]	; (80098b0 <TIM_Base_SetConfig+0x118>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00b      	beq.n	80097d8 <TIM_Base_SetConfig+0x40>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a3c      	ldr	r2, [pc, #240]	; (80098b4 <TIM_Base_SetConfig+0x11c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d007      	beq.n	80097d8 <TIM_Base_SetConfig+0x40>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a3b      	ldr	r2, [pc, #236]	; (80098b8 <TIM_Base_SetConfig+0x120>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d003      	beq.n	80097d8 <TIM_Base_SetConfig+0x40>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a3a      	ldr	r2, [pc, #232]	; (80098bc <TIM_Base_SetConfig+0x124>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d108      	bne.n	80097ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	4313      	orrs	r3, r2
 80097e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a2f      	ldr	r2, [pc, #188]	; (80098ac <TIM_Base_SetConfig+0x114>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d02b      	beq.n	800984a <TIM_Base_SetConfig+0xb2>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097f8:	d027      	beq.n	800984a <TIM_Base_SetConfig+0xb2>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a2c      	ldr	r2, [pc, #176]	; (80098b0 <TIM_Base_SetConfig+0x118>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d023      	beq.n	800984a <TIM_Base_SetConfig+0xb2>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a2b      	ldr	r2, [pc, #172]	; (80098b4 <TIM_Base_SetConfig+0x11c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d01f      	beq.n	800984a <TIM_Base_SetConfig+0xb2>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a2a      	ldr	r2, [pc, #168]	; (80098b8 <TIM_Base_SetConfig+0x120>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d01b      	beq.n	800984a <TIM_Base_SetConfig+0xb2>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a29      	ldr	r2, [pc, #164]	; (80098bc <TIM_Base_SetConfig+0x124>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d017      	beq.n	800984a <TIM_Base_SetConfig+0xb2>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a28      	ldr	r2, [pc, #160]	; (80098c0 <TIM_Base_SetConfig+0x128>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d013      	beq.n	800984a <TIM_Base_SetConfig+0xb2>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a27      	ldr	r2, [pc, #156]	; (80098c4 <TIM_Base_SetConfig+0x12c>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d00f      	beq.n	800984a <TIM_Base_SetConfig+0xb2>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a26      	ldr	r2, [pc, #152]	; (80098c8 <TIM_Base_SetConfig+0x130>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d00b      	beq.n	800984a <TIM_Base_SetConfig+0xb2>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a25      	ldr	r2, [pc, #148]	; (80098cc <TIM_Base_SetConfig+0x134>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d007      	beq.n	800984a <TIM_Base_SetConfig+0xb2>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a24      	ldr	r2, [pc, #144]	; (80098d0 <TIM_Base_SetConfig+0x138>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d003      	beq.n	800984a <TIM_Base_SetConfig+0xb2>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a23      	ldr	r2, [pc, #140]	; (80098d4 <TIM_Base_SetConfig+0x13c>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d108      	bne.n	800985c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	4313      	orrs	r3, r2
 800985a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	4313      	orrs	r3, r2
 8009868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	689a      	ldr	r2, [r3, #8]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <TIM_Base_SetConfig+0x114>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d003      	beq.n	8009890 <TIM_Base_SetConfig+0xf8>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a0c      	ldr	r2, [pc, #48]	; (80098bc <TIM_Base_SetConfig+0x124>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d103      	bne.n	8009898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	691a      	ldr	r2, [r3, #16]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	615a      	str	r2, [r3, #20]
}
 800989e:	bf00      	nop
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	40010000 	.word	0x40010000
 80098b0:	40000400 	.word	0x40000400
 80098b4:	40000800 	.word	0x40000800
 80098b8:	40000c00 	.word	0x40000c00
 80098bc:	40010400 	.word	0x40010400
 80098c0:	40014000 	.word	0x40014000
 80098c4:	40014400 	.word	0x40014400
 80098c8:	40014800 	.word	0x40014800
 80098cc:	40001800 	.word	0x40001800
 80098d0:	40001c00 	.word	0x40001c00
 80098d4:	40002000 	.word	0x40002000

080098d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	f023 0201 	bic.w	r2, r3, #1
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	699b      	ldr	r3, [r3, #24]
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4313      	orrs	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f023 0302 	bic.w	r3, r3, #2
 8009920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	4313      	orrs	r3, r2
 800992a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a20      	ldr	r2, [pc, #128]	; (80099b0 <TIM_OC1_SetConfig+0xd8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d003      	beq.n	800993c <TIM_OC1_SetConfig+0x64>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a1f      	ldr	r2, [pc, #124]	; (80099b4 <TIM_OC1_SetConfig+0xdc>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d10c      	bne.n	8009956 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f023 0308 	bic.w	r3, r3, #8
 8009942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	4313      	orrs	r3, r2
 800994c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f023 0304 	bic.w	r3, r3, #4
 8009954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a15      	ldr	r2, [pc, #84]	; (80099b0 <TIM_OC1_SetConfig+0xd8>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d003      	beq.n	8009966 <TIM_OC1_SetConfig+0x8e>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a14      	ldr	r2, [pc, #80]	; (80099b4 <TIM_OC1_SetConfig+0xdc>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d111      	bne.n	800998a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800996c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	4313      	orrs	r3, r2
 800997e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	4313      	orrs	r3, r2
 8009988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	621a      	str	r2, [r3, #32]
}
 80099a4:	bf00      	nop
 80099a6:	371c      	adds	r7, #28
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	40010000 	.word	0x40010000
 80099b4:	40010400 	.word	0x40010400

080099b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	f023 0210 	bic.w	r2, r3, #16
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	021b      	lsls	r3, r3, #8
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	f023 0320 	bic.w	r3, r3, #32
 8009a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	011b      	lsls	r3, r3, #4
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a22      	ldr	r2, [pc, #136]	; (8009a9c <TIM_OC2_SetConfig+0xe4>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d003      	beq.n	8009a20 <TIM_OC2_SetConfig+0x68>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a21      	ldr	r2, [pc, #132]	; (8009aa0 <TIM_OC2_SetConfig+0xe8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d10d      	bne.n	8009a3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	011b      	lsls	r3, r3, #4
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a17      	ldr	r2, [pc, #92]	; (8009a9c <TIM_OC2_SetConfig+0xe4>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d003      	beq.n	8009a4c <TIM_OC2_SetConfig+0x94>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a16      	ldr	r2, [pc, #88]	; (8009aa0 <TIM_OC2_SetConfig+0xe8>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d113      	bne.n	8009a74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	621a      	str	r2, [r3, #32]
}
 8009a8e:	bf00      	nop
 8009a90:	371c      	adds	r7, #28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	40010000 	.word	0x40010000
 8009aa0:	40010400 	.word	0x40010400

08009aa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	69db      	ldr	r3, [r3, #28]
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f023 0303 	bic.w	r3, r3, #3
 8009ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	021b      	lsls	r3, r3, #8
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a21      	ldr	r2, [pc, #132]	; (8009b84 <TIM_OC3_SetConfig+0xe0>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d003      	beq.n	8009b0a <TIM_OC3_SetConfig+0x66>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a20      	ldr	r2, [pc, #128]	; (8009b88 <TIM_OC3_SetConfig+0xe4>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d10d      	bne.n	8009b26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	021b      	lsls	r3, r3, #8
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a16      	ldr	r2, [pc, #88]	; (8009b84 <TIM_OC3_SetConfig+0xe0>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d003      	beq.n	8009b36 <TIM_OC3_SetConfig+0x92>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a15      	ldr	r2, [pc, #84]	; (8009b88 <TIM_OC3_SetConfig+0xe4>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d113      	bne.n	8009b5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	693a      	ldr	r2, [r7, #16]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	621a      	str	r2, [r3, #32]
}
 8009b78:	bf00      	nop
 8009b7a:	371c      	adds	r7, #28
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr
 8009b84:	40010000 	.word	0x40010000
 8009b88:	40010400 	.word	0x40010400

08009b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b087      	sub	sp, #28
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	021b      	lsls	r3, r3, #8
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	031b      	lsls	r3, r3, #12
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a12      	ldr	r2, [pc, #72]	; (8009c30 <TIM_OC4_SetConfig+0xa4>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d003      	beq.n	8009bf4 <TIM_OC4_SetConfig+0x68>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a11      	ldr	r2, [pc, #68]	; (8009c34 <TIM_OC4_SetConfig+0xa8>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d109      	bne.n	8009c08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	019b      	lsls	r3, r3, #6
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	621a      	str	r2, [r3, #32]
}
 8009c22:	bf00      	nop
 8009c24:	371c      	adds	r7, #28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	40010000 	.word	0x40010000
 8009c34:	40010400 	.word	0x40010400

08009c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	f023 0201 	bic.w	r2, r3, #1
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f023 030a 	bic.w	r3, r3, #10
 8009c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	621a      	str	r2, [r3, #32]
}
 8009c8a:	bf00      	nop
 8009c8c:	371c      	adds	r7, #28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b087      	sub	sp, #28
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	f023 0210 	bic.w	r2, r3, #16
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6a1b      	ldr	r3, [r3, #32]
 8009cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	031b      	lsls	r3, r3, #12
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	011b      	lsls	r3, r3, #4
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	697a      	ldr	r2, [r7, #20]
 8009ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	621a      	str	r2, [r3, #32]
}
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	f043 0307 	orr.w	r3, r3, #7
 8009d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	609a      	str	r2, [r3, #8]
}
 8009d20:	bf00      	nop
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b087      	sub	sp, #28
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	021a      	lsls	r2, r3, #8
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	609a      	str	r2, [r3, #8]
}
 8009d60:	bf00      	nop
 8009d62:	371c      	adds	r7, #28
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f003 031f 	and.w	r3, r3, #31
 8009d7e:	2201      	movs	r2, #1
 8009d80:	fa02 f303 	lsl.w	r3, r2, r3
 8009d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6a1a      	ldr	r2, [r3, #32]
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	43db      	mvns	r3, r3
 8009d8e:	401a      	ands	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6a1a      	ldr	r2, [r3, #32]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f003 031f 	and.w	r3, r3, #31
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	fa01 f303 	lsl.w	r3, r1, r3
 8009da4:	431a      	orrs	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	621a      	str	r2, [r3, #32]
}
 8009daa:	bf00      	nop
 8009dac:	371c      	adds	r7, #28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
	...

08009db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d101      	bne.n	8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e05a      	b.n	8009e86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a21      	ldr	r2, [pc, #132]	; (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d022      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e1c:	d01d      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a1d      	ldr	r2, [pc, #116]	; (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d018      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a1b      	ldr	r2, [pc, #108]	; (8009e9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d013      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a1a      	ldr	r2, [pc, #104]	; (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d00e      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a18      	ldr	r2, [pc, #96]	; (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d009      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a17      	ldr	r2, [pc, #92]	; (8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d004      	beq.n	8009e5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a15      	ldr	r2, [pc, #84]	; (8009eac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d10c      	bne.n	8009e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	40010000 	.word	0x40010000
 8009e98:	40000400 	.word	0x40000400
 8009e9c:	40000800 	.word	0x40000800
 8009ea0:	40000c00 	.word	0x40000c00
 8009ea4:	40010400 	.word	0x40010400
 8009ea8:	40014000 	.word	0x40014000
 8009eac:	40001800 	.word	0x40001800

08009eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e03f      	b.n	8009f42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7fc f85a 	bl	8005f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2224      	movs	r2, #36	; 0x24
 8009ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 ff49 	bl	800ad8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	691a      	ldr	r2, [r3, #16]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	695a      	ldr	r2, [r3, #20]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2220      	movs	r2, #32
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b08c      	sub	sp, #48	; 0x30
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	4613      	mov	r3, r2
 8009f58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b20      	cmp	r3, #32
 8009f64:	d165      	bne.n	800a032 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <HAL_UART_Transmit_DMA+0x26>
 8009f6c:	88fb      	ldrh	r3, [r7, #6]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e05e      	b.n	800a034 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d101      	bne.n	8009f84 <HAL_UART_Transmit_DMA+0x38>
 8009f80:	2302      	movs	r3, #2
 8009f82:	e057      	b.n	800a034 <HAL_UART_Transmit_DMA+0xe8>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	88fa      	ldrh	r2, [r7, #6]
 8009f96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	88fa      	ldrh	r2, [r7, #6]
 8009f9c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2221      	movs	r2, #33	; 0x21
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb0:	4a22      	ldr	r2, [pc, #136]	; (800a03c <HAL_UART_Transmit_DMA+0xf0>)
 8009fb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb8:	4a21      	ldr	r2, [pc, #132]	; (800a040 <HAL_UART_Transmit_DMA+0xf4>)
 8009fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc0:	4a20      	ldr	r2, [pc, #128]	; (800a044 <HAL_UART_Transmit_DMA+0xf8>)
 8009fc2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc8:	2200      	movs	r2, #0
 8009fca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009fcc:	f107 0308 	add.w	r3, r7, #8
 8009fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd8:	6819      	ldr	r1, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3304      	adds	r3, #4
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	88fb      	ldrh	r3, [r7, #6]
 8009fe4:	f7fc ffb0 	bl	8006f48 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ff0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	3314      	adds	r3, #20
 800a000:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	617b      	str	r3, [r7, #20]
   return(result);
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a010:	62bb      	str	r3, [r7, #40]	; 0x28
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3314      	adds	r3, #20
 800a018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a01a:	627a      	str	r2, [r7, #36]	; 0x24
 800a01c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01e:	6a39      	ldr	r1, [r7, #32]
 800a020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a022:	e841 2300 	strex	r3, r2, [r1]
 800a026:	61fb      	str	r3, [r7, #28]
   return(result);
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d1e5      	bne.n	8009ffa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	e000      	b.n	800a034 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a032:	2302      	movs	r3, #2
  }
}
 800a034:	4618      	mov	r0, r3
 800a036:	3730      	adds	r7, #48	; 0x30
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	0800a62d 	.word	0x0800a62d
 800a040:	0800a6c7 	.word	0x0800a6c7
 800a044:	0800a83f 	.word	0x0800a83f

0800a048 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	60f8      	str	r0, [r7, #12]
 800a050:	60b9      	str	r1, [r7, #8]
 800a052:	4613      	mov	r3, r2
 800a054:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b20      	cmp	r3, #32
 800a060:	d11d      	bne.n	800a09e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d002      	beq.n	800a06e <HAL_UART_Receive_DMA+0x26>
 800a068:	88fb      	ldrh	r3, [r7, #6]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e016      	b.n	800a0a0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d101      	bne.n	800a080 <HAL_UART_Receive_DMA+0x38>
 800a07c:	2302      	movs	r3, #2
 800a07e:	e00f      	b.n	800a0a0 <HAL_UART_Receive_DMA+0x58>
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a08e:	88fb      	ldrh	r3, [r7, #6]
 800a090:	461a      	mov	r2, r3
 800a092:	68b9      	ldr	r1, [r7, #8]
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 fc1d 	bl	800a8d4 <UART_Start_Receive_DMA>
 800a09a:	4603      	mov	r3, r0
 800a09c:	e000      	b.n	800a0a0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a09e:	2302      	movs	r3, #2
  }
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b0ba      	sub	sp, #232	; 0xe8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0de:	f003 030f 	and.w	r3, r3, #15
 800a0e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a0e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10f      	bne.n	800a10e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a0ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0f2:	f003 0320 	and.w	r3, r3, #32
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d009      	beq.n	800a10e <HAL_UART_IRQHandler+0x66>
 800a0fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0fe:	f003 0320 	and.w	r3, r3, #32
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fd85 	bl	800ac16 <UART_Receive_IT>
      return;
 800a10c:	e256      	b.n	800a5bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a10e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 80de 	beq.w	800a2d4 <HAL_UART_IRQHandler+0x22c>
 800a118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b00      	cmp	r3, #0
 800a122:	d106      	bne.n	800a132 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a128:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 80d1 	beq.w	800a2d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <HAL_UART_IRQHandler+0xae>
 800a13e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a146:	2b00      	cmp	r3, #0
 800a148:	d005      	beq.n	800a156 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14e:	f043 0201 	orr.w	r2, r3, #1
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00b      	beq.n	800a17a <HAL_UART_IRQHandler+0xd2>
 800a162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d005      	beq.n	800a17a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	f043 0202 	orr.w	r2, r3, #2
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a17a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a17e:	f003 0302 	and.w	r3, r3, #2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00b      	beq.n	800a19e <HAL_UART_IRQHandler+0xf6>
 800a186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d005      	beq.n	800a19e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a196:	f043 0204 	orr.w	r2, r3, #4
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1a2:	f003 0308 	and.w	r3, r3, #8
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d011      	beq.n	800a1ce <HAL_UART_IRQHandler+0x126>
 800a1aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1ae:	f003 0320 	and.w	r3, r3, #32
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d105      	bne.n	800a1c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a1b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1ba:	f003 0301 	and.w	r3, r3, #1
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d005      	beq.n	800a1ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	f043 0208 	orr.w	r2, r3, #8
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f000 81ed 	beq.w	800a5b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1dc:	f003 0320 	and.w	r3, r3, #32
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d008      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x14e>
 800a1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fd10 	bl	800ac16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a200:	2b40      	cmp	r3, #64	; 0x40
 800a202:	bf0c      	ite	eq
 800a204:	2301      	moveq	r3, #1
 800a206:	2300      	movne	r3, #0
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a212:	f003 0308 	and.w	r3, r3, #8
 800a216:	2b00      	cmp	r3, #0
 800a218:	d103      	bne.n	800a222 <HAL_UART_IRQHandler+0x17a>
 800a21a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d04f      	beq.n	800a2c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fc18 	bl	800aa58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a232:	2b40      	cmp	r3, #64	; 0x40
 800a234:	d141      	bne.n	800a2ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	3314      	adds	r3, #20
 800a23c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a244:	e853 3f00 	ldrex	r3, [r3]
 800a248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a24c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3314      	adds	r3, #20
 800a25e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a262:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a26e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a272:	e841 2300 	strex	r3, r2, [r1]
 800a276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a27a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1d9      	bne.n	800a236 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a286:	2b00      	cmp	r3, #0
 800a288:	d013      	beq.n	800a2b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28e:	4a7d      	ldr	r2, [pc, #500]	; (800a484 <HAL_UART_IRQHandler+0x3dc>)
 800a290:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a296:	4618      	mov	r0, r3
 800a298:	f7fc ff1e 	bl	80070d8 <HAL_DMA_Abort_IT>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d016      	beq.n	800a2d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b0:	e00e      	b.n	800a2d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f9a4 	bl	800a600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b8:	e00a      	b.n	800a2d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f9a0 	bl	800a600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2c0:	e006      	b.n	800a2d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f99c 	bl	800a600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a2ce:	e170      	b.n	800a5b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2d0:	bf00      	nop
    return;
 800a2d2:	e16e      	b.n	800a5b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	f040 814a 	bne.w	800a572 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a2de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e2:	f003 0310 	and.w	r3, r3, #16
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 8143 	beq.w	800a572 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2f0:	f003 0310 	and.w	r3, r3, #16
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 813c 	beq.w	800a572 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	60bb      	str	r3, [r7, #8]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	60bb      	str	r3, [r7, #8]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	60bb      	str	r3, [r7, #8]
 800a30e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a31a:	2b40      	cmp	r3, #64	; 0x40
 800a31c:	f040 80b4 	bne.w	800a488 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a32c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a330:	2b00      	cmp	r3, #0
 800a332:	f000 8140 	beq.w	800a5b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a33a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a33e:	429a      	cmp	r2, r3
 800a340:	f080 8139 	bcs.w	800a5b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a34a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a356:	f000 8088 	beq.w	800a46a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	330c      	adds	r3, #12
 800a360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a368:	e853 3f00 	ldrex	r3, [r3]
 800a36c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	330c      	adds	r3, #12
 800a382:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a386:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a38a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a392:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a396:	e841 2300 	strex	r3, r2, [r1]
 800a39a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a39e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1d9      	bne.n	800a35a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3314      	adds	r3, #20
 800a3ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3b0:	e853 3f00 	ldrex	r3, [r3]
 800a3b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a3b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3b8:	f023 0301 	bic.w	r3, r3, #1
 800a3bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3314      	adds	r3, #20
 800a3c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a3ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a3ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a3d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3d6:	e841 2300 	strex	r3, r2, [r1]
 800a3da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a3dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1e1      	bne.n	800a3a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	3314      	adds	r3, #20
 800a3e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ec:	e853 3f00 	ldrex	r3, [r3]
 800a3f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	3314      	adds	r3, #20
 800a402:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a406:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a408:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a40c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e3      	bne.n	800a3e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2220      	movs	r2, #32
 800a41e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	330c      	adds	r3, #12
 800a42e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a432:	e853 3f00 	ldrex	r3, [r3]
 800a436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a43a:	f023 0310 	bic.w	r3, r3, #16
 800a43e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	330c      	adds	r3, #12
 800a448:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a44c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a44e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a454:	e841 2300 	strex	r3, r2, [r1]
 800a458:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a45a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e3      	bne.n	800a428 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a464:	4618      	mov	r0, r3
 800a466:	f7fc fdc7 	bl	8006ff8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a472:	b29b      	uxth	r3, r3
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	b29b      	uxth	r3, r3
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f8ca 	bl	800a614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a480:	e099      	b.n	800a5b6 <HAL_UART_IRQHandler+0x50e>
 800a482:	bf00      	nop
 800a484:	0800ab1f 	.word	0x0800ab1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a490:	b29b      	uxth	r3, r3
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 808b 	beq.w	800a5ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a4a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 8086 	beq.w	800a5ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	330c      	adds	r3, #12
 800a4b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	e853 3f00 	ldrex	r3, [r3]
 800a4bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	330c      	adds	r3, #12
 800a4ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a4d2:	647a      	str	r2, [r7, #68]	; 0x44
 800a4d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4da:	e841 2300 	strex	r3, r2, [r1]
 800a4de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1e3      	bne.n	800a4ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3314      	adds	r3, #20
 800a4ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	f023 0301 	bic.w	r3, r3, #1
 800a4fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3314      	adds	r3, #20
 800a506:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a50a:	633a      	str	r2, [r7, #48]	; 0x30
 800a50c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a512:	e841 2300 	strex	r3, r2, [r1]
 800a516:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1e3      	bne.n	800a4e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2220      	movs	r2, #32
 800a522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	330c      	adds	r3, #12
 800a532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f023 0310 	bic.w	r3, r3, #16
 800a542:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	330c      	adds	r3, #12
 800a54c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a550:	61fa      	str	r2, [r7, #28]
 800a552:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	69b9      	ldr	r1, [r7, #24]
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	617b      	str	r3, [r7, #20]
   return(result);
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e3      	bne.n	800a52c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f852 	bl	800a614 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a570:	e023      	b.n	800a5ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <HAL_UART_IRQHandler+0x4ea>
 800a57e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fadb 	bl	800ab46 <UART_Transmit_IT>
    return;
 800a590:	e014      	b.n	800a5bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00e      	beq.n	800a5bc <HAL_UART_IRQHandler+0x514>
 800a59e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d008      	beq.n	800a5bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fb1b 	bl	800abe6 <UART_EndTransmit_IT>
    return;
 800a5b0:	e004      	b.n	800a5bc <HAL_UART_IRQHandler+0x514>
    return;
 800a5b2:	bf00      	nop
 800a5b4:	e002      	b.n	800a5bc <HAL_UART_IRQHandler+0x514>
      return;
 800a5b6:	bf00      	nop
 800a5b8:	e000      	b.n	800a5bc <HAL_UART_IRQHandler+0x514>
      return;
 800a5ba:	bf00      	nop
  }
}
 800a5bc:	37e8      	adds	r7, #232	; 0xe8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop

0800a5c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	460b      	mov	r3, r1
 800a61e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b090      	sub	sp, #64	; 0x40
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a638:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a644:	2b00      	cmp	r3, #0
 800a646:	d137      	bne.n	800a6b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a64a:	2200      	movs	r2, #0
 800a64c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3314      	adds	r3, #20
 800a654:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a658:	e853 3f00 	ldrex	r3, [r3]
 800a65c:	623b      	str	r3, [r7, #32]
   return(result);
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a664:	63bb      	str	r3, [r7, #56]	; 0x38
 800a666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3314      	adds	r3, #20
 800a66c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a66e:	633a      	str	r2, [r7, #48]	; 0x30
 800a670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a676:	e841 2300 	strex	r3, r2, [r1]
 800a67a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1e5      	bne.n	800a64e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	330c      	adds	r3, #12
 800a688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	e853 3f00 	ldrex	r3, [r3]
 800a690:	60fb      	str	r3, [r7, #12]
   return(result);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a698:	637b      	str	r3, [r7, #52]	; 0x34
 800a69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	330c      	adds	r3, #12
 800a6a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6a2:	61fa      	str	r2, [r7, #28]
 800a6a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a6:	69b9      	ldr	r1, [r7, #24]
 800a6a8:	69fa      	ldr	r2, [r7, #28]
 800a6aa:	e841 2300 	strex	r3, r2, [r1]
 800a6ae:	617b      	str	r3, [r7, #20]
   return(result);
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1e5      	bne.n	800a682 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a6b6:	e002      	b.n	800a6be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a6b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a6ba:	f7ff ff83 	bl	800a5c4 <HAL_UART_TxCpltCallback>
}
 800a6be:	bf00      	nop
 800a6c0:	3740      	adds	r7, #64	; 0x40
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7ff ff7f 	bl	800a5d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6da:	bf00      	nop
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b09c      	sub	sp, #112	; 0x70
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d172      	bne.n	800a7e4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a6fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a700:	2200      	movs	r2, #0
 800a702:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	330c      	adds	r3, #12
 800a70a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a70e:	e853 3f00 	ldrex	r3, [r3]
 800a712:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a71a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a71c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	330c      	adds	r3, #12
 800a722:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a724:	65ba      	str	r2, [r7, #88]	; 0x58
 800a726:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a728:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a72a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a72c:	e841 2300 	strex	r3, r2, [r1]
 800a730:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e5      	bne.n	800a704 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	3314      	adds	r3, #20
 800a73e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a742:	e853 3f00 	ldrex	r3, [r3]
 800a746:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a74a:	f023 0301 	bic.w	r3, r3, #1
 800a74e:	667b      	str	r3, [r7, #100]	; 0x64
 800a750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3314      	adds	r3, #20
 800a756:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a758:	647a      	str	r2, [r7, #68]	; 0x44
 800a75a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a75e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a760:	e841 2300 	strex	r3, r2, [r1]
 800a764:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1e5      	bne.n	800a738 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a76c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	3314      	adds	r3, #20
 800a772:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	e853 3f00 	ldrex	r3, [r3]
 800a77a:	623b      	str	r3, [r7, #32]
   return(result);
 800a77c:	6a3b      	ldr	r3, [r7, #32]
 800a77e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a782:	663b      	str	r3, [r7, #96]	; 0x60
 800a784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	3314      	adds	r3, #20
 800a78a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a78c:	633a      	str	r2, [r7, #48]	; 0x30
 800a78e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a794:	e841 2300 	strex	r3, r2, [r1]
 800a798:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1e5      	bne.n	800a76c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a7a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a2:	2220      	movs	r2, #32
 800a7a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d119      	bne.n	800a7e4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	330c      	adds	r3, #12
 800a7b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	e853 3f00 	ldrex	r3, [r3]
 800a7be:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f023 0310 	bic.w	r3, r3, #16
 800a7c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	330c      	adds	r3, #12
 800a7ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a7d0:	61fa      	str	r2, [r7, #28]
 800a7d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d4:	69b9      	ldr	r1, [r7, #24]
 800a7d6:	69fa      	ldr	r2, [r7, #28]
 800a7d8:	e841 2300 	strex	r3, r2, [r1]
 800a7dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1e5      	bne.n	800a7b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d106      	bne.n	800a7fa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7f4:	f7ff ff0e 	bl	800a614 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7f8:	e002      	b.n	800a800 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a7fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a7fc:	f7f8 fd84 	bl	8003308 <HAL_UART_RxCpltCallback>
}
 800a800:	bf00      	nop
 800a802:	3770      	adds	r7, #112	; 0x70
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a814:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d108      	bne.n	800a830 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a822:	085b      	lsrs	r3, r3, #1
 800a824:	b29b      	uxth	r3, r3
 800a826:	4619      	mov	r1, r3
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f7ff fef3 	bl	800a614 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a82e:	e002      	b.n	800a836 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7ff fedb 	bl	800a5ec <HAL_UART_RxHalfCpltCallback>
}
 800a836:	bf00      	nop
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b084      	sub	sp, #16
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a846:	2300      	movs	r3, #0
 800a848:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85a:	2b80      	cmp	r3, #128	; 0x80
 800a85c:	bf0c      	ite	eq
 800a85e:	2301      	moveq	r3, #1
 800a860:	2300      	movne	r3, #0
 800a862:	b2db      	uxtb	r3, r3
 800a864:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b21      	cmp	r3, #33	; 0x21
 800a870:	d108      	bne.n	800a884 <UART_DMAError+0x46>
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d005      	beq.n	800a884 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	2200      	movs	r2, #0
 800a87c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a87e:	68b8      	ldr	r0, [r7, #8]
 800a880:	f000 f8c2 	bl	800aa08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a88e:	2b40      	cmp	r3, #64	; 0x40
 800a890:	bf0c      	ite	eq
 800a892:	2301      	moveq	r3, #1
 800a894:	2300      	movne	r3, #0
 800a896:	b2db      	uxtb	r3, r3
 800a898:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b22      	cmp	r3, #34	; 0x22
 800a8a4:	d108      	bne.n	800a8b8 <UART_DMAError+0x7a>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d005      	beq.n	800a8b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a8b2:	68b8      	ldr	r0, [r7, #8]
 800a8b4:	f000 f8d0 	bl	800aa58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8bc:	f043 0210 	orr.w	r2, r3, #16
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8c4:	68b8      	ldr	r0, [r7, #8]
 800a8c6:	f7ff fe9b 	bl	800a600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8ca:	bf00      	nop
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b098      	sub	sp, #96	; 0x60
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	88fa      	ldrh	r2, [r7, #6]
 800a8ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2222      	movs	r2, #34	; 0x22
 800a8f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	4a3e      	ldr	r2, [pc, #248]	; (800a9fc <UART_Start_Receive_DMA+0x128>)
 800a902:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a908:	4a3d      	ldr	r2, [pc, #244]	; (800aa00 <UART_Start_Receive_DMA+0x12c>)
 800a90a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a910:	4a3c      	ldr	r2, [pc, #240]	; (800aa04 <UART_Start_Receive_DMA+0x130>)
 800a912:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a918:	2200      	movs	r2, #0
 800a91a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a91c:	f107 0308 	add.w	r3, r7, #8
 800a920:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	3304      	adds	r3, #4
 800a92c:	4619      	mov	r1, r3
 800a92e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	88fb      	ldrh	r3, [r7, #6]
 800a934:	f7fc fb08 	bl	8006f48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a938:	2300      	movs	r3, #0
 800a93a:	613b      	str	r3, [r7, #16]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	613b      	str	r3, [r7, #16]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	613b      	str	r3, [r7, #16]
 800a94c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2200      	movs	r2, #0
 800a952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	330c      	adds	r3, #12
 800a95c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a960:	e853 3f00 	ldrex	r3, [r3]
 800a964:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a96c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	330c      	adds	r3, #12
 800a974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a976:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a978:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a97c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e5      	bne.n	800a956 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3314      	adds	r3, #20
 800a990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99c:	f043 0301 	orr.w	r3, r3, #1
 800a9a0:	657b      	str	r3, [r7, #84]	; 0x54
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3314      	adds	r3, #20
 800a9a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a9aa:	63ba      	str	r2, [r7, #56]	; 0x38
 800a9ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a9b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e5      	bne.n	800a98a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3314      	adds	r3, #20
 800a9c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d4:	653b      	str	r3, [r7, #80]	; 0x50
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3314      	adds	r3, #20
 800a9dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a9de:	627a      	str	r2, [r7, #36]	; 0x24
 800a9e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6a39      	ldr	r1, [r7, #32]
 800a9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e5      	bne.n	800a9be <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3760      	adds	r7, #96	; 0x60
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	0800a6e3 	.word	0x0800a6e3
 800aa00:	0800a809 	.word	0x0800a809
 800aa04:	0800a83f 	.word	0x0800a83f

0800aa08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b089      	sub	sp, #36	; 0x24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	330c      	adds	r3, #12
 800aa16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	e853 3f00 	ldrex	r3, [r3]
 800aa1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aa26:	61fb      	str	r3, [r7, #28]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	330c      	adds	r3, #12
 800aa2e:	69fa      	ldr	r2, [r7, #28]
 800aa30:	61ba      	str	r2, [r7, #24]
 800aa32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa34:	6979      	ldr	r1, [r7, #20]
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e5      	bne.n	800aa10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2220      	movs	r2, #32
 800aa48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800aa4c:	bf00      	nop
 800aa4e:	3724      	adds	r7, #36	; 0x24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b095      	sub	sp, #84	; 0x54
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	330c      	adds	r3, #12
 800aa66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6a:	e853 3f00 	ldrex	r3, [r3]
 800aa6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	330c      	adds	r3, #12
 800aa7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa80:	643a      	str	r2, [r7, #64]	; 0x40
 800aa82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa88:	e841 2300 	strex	r3, r2, [r1]
 800aa8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e5      	bne.n	800aa60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3314      	adds	r3, #20
 800aa9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9c:	6a3b      	ldr	r3, [r7, #32]
 800aa9e:	e853 3f00 	ldrex	r3, [r3]
 800aaa2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	f023 0301 	bic.w	r3, r3, #1
 800aaaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3314      	adds	r3, #20
 800aab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aaba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aabc:	e841 2300 	strex	r3, r2, [r1]
 800aac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1e5      	bne.n	800aa94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d119      	bne.n	800ab04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	330c      	adds	r3, #12
 800aad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	e853 3f00 	ldrex	r3, [r3]
 800aade:	60bb      	str	r3, [r7, #8]
   return(result);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	f023 0310 	bic.w	r3, r3, #16
 800aae6:	647b      	str	r3, [r7, #68]	; 0x44
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	330c      	adds	r3, #12
 800aaee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaf0:	61ba      	str	r2, [r7, #24]
 800aaf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf4:	6979      	ldr	r1, [r7, #20]
 800aaf6:	69ba      	ldr	r2, [r7, #24]
 800aaf8:	e841 2300 	strex	r3, r2, [r1]
 800aafc:	613b      	str	r3, [r7, #16]
   return(result);
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1e5      	bne.n	800aad0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2220      	movs	r2, #32
 800ab08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ab12:	bf00      	nop
 800ab14:	3754      	adds	r7, #84	; 0x54
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f7ff fd61 	bl	800a600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab3e:	bf00      	nop
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b21      	cmp	r3, #33	; 0x21
 800ab58:	d13e      	bne.n	800abd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab62:	d114      	bne.n	800ab8e <UART_Transmit_IT+0x48>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d110      	bne.n	800ab8e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a1b      	ldr	r3, [r3, #32]
 800ab70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	461a      	mov	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a1b      	ldr	r3, [r3, #32]
 800ab86:	1c9a      	adds	r2, r3, #2
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	621a      	str	r2, [r3, #32]
 800ab8c:	e008      	b.n	800aba0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a1b      	ldr	r3, [r3, #32]
 800ab92:	1c59      	adds	r1, r3, #1
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	6211      	str	r1, [r2, #32]
 800ab98:	781a      	ldrb	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	3b01      	subs	r3, #1
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	4619      	mov	r1, r3
 800abae:	84d1      	strh	r1, [r2, #38]	; 0x26
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10f      	bne.n	800abd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68da      	ldr	r2, [r3, #12]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68da      	ldr	r2, [r3, #12]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	e000      	b.n	800abda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800abd8:	2302      	movs	r3, #2
  }
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b082      	sub	sp, #8
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68da      	ldr	r2, [r3, #12]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7ff fcdc 	bl	800a5c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3708      	adds	r7, #8
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b08c      	sub	sp, #48	; 0x30
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	2b22      	cmp	r3, #34	; 0x22
 800ac28:	f040 80ab 	bne.w	800ad82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac34:	d117      	bne.n	800ac66 <UART_Receive_IT+0x50>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d113      	bne.n	800ac66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	1c9a      	adds	r2, r3, #2
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	629a      	str	r2, [r3, #40]	; 0x28
 800ac64:	e026      	b.n	800acb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac78:	d007      	beq.n	800ac8a <UART_Receive_IT+0x74>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10a      	bne.n	800ac98 <UART_Receive_IT+0x82>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d106      	bne.n	800ac98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	b2da      	uxtb	r2, r3
 800ac92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac94:	701a      	strb	r2, [r3, #0]
 800ac96:	e008      	b.n	800acaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acae:	1c5a      	adds	r2, r3, #1
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acb8:	b29b      	uxth	r3, r3
 800acba:	3b01      	subs	r3, #1
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	4619      	mov	r1, r3
 800acc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d15a      	bne.n	800ad7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68da      	ldr	r2, [r3, #12]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 0220 	bic.w	r2, r2, #32
 800acd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68da      	ldr	r2, [r3, #12]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ace6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	695a      	ldr	r2, [r3, #20]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f022 0201 	bic.w	r2, r2, #1
 800acf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2220      	movs	r2, #32
 800acfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d135      	bne.n	800ad74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	330c      	adds	r3, #12
 800ad14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	f023 0310 	bic.w	r3, r3, #16
 800ad24:	627b      	str	r3, [r7, #36]	; 0x24
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	330c      	adds	r3, #12
 800ad2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad2e:	623a      	str	r2, [r7, #32]
 800ad30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	69f9      	ldr	r1, [r7, #28]
 800ad34:	6a3a      	ldr	r2, [r7, #32]
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e5      	bne.n	800ad0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 0310 	and.w	r3, r3, #16
 800ad4c:	2b10      	cmp	r3, #16
 800ad4e:	d10a      	bne.n	800ad66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad50:	2300      	movs	r3, #0
 800ad52:	60fb      	str	r3, [r7, #12]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	60fb      	str	r3, [r7, #12]
 800ad64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7ff fc51 	bl	800a614 <HAL_UARTEx_RxEventCallback>
 800ad72:	e002      	b.n	800ad7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7f8 fac7 	bl	8003308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	e002      	b.n	800ad84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e000      	b.n	800ad84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ad82:	2302      	movs	r3, #2
  }
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3730      	adds	r7, #48	; 0x30
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	b09f      	sub	sp, #124	; 0x7c
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ada0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ada2:	68d9      	ldr	r1, [r3, #12]
 800ada4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	ea40 0301 	orr.w	r3, r0, r1
 800adac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800adae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	431a      	orrs	r2, r3
 800adb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	431a      	orrs	r2, r3
 800adbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800adc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800add0:	f021 010c 	bic.w	r1, r1, #12
 800add4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adda:	430b      	orrs	r3, r1
 800addc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800adde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ade8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adea:	6999      	ldr	r1, [r3, #24]
 800adec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	ea40 0301 	orr.w	r3, r0, r1
 800adf4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800adf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	4bc5      	ldr	r3, [pc, #788]	; (800b110 <UART_SetConfig+0x384>)
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d004      	beq.n	800ae0a <UART_SetConfig+0x7e>
 800ae00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	4bc3      	ldr	r3, [pc, #780]	; (800b114 <UART_SetConfig+0x388>)
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d103      	bne.n	800ae12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae0a:	f7fd fa21 	bl	8008250 <HAL_RCC_GetPCLK2Freq>
 800ae0e:	6778      	str	r0, [r7, #116]	; 0x74
 800ae10:	e002      	b.n	800ae18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ae12:	f7fd fa09 	bl	8008228 <HAL_RCC_GetPCLK1Freq>
 800ae16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae1a:	69db      	ldr	r3, [r3, #28]
 800ae1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae20:	f040 80b6 	bne.w	800af90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ae24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae26:	461c      	mov	r4, r3
 800ae28:	f04f 0500 	mov.w	r5, #0
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	462b      	mov	r3, r5
 800ae30:	1891      	adds	r1, r2, r2
 800ae32:	6439      	str	r1, [r7, #64]	; 0x40
 800ae34:	415b      	adcs	r3, r3
 800ae36:	647b      	str	r3, [r7, #68]	; 0x44
 800ae38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ae3c:	1912      	adds	r2, r2, r4
 800ae3e:	eb45 0303 	adc.w	r3, r5, r3
 800ae42:	f04f 0000 	mov.w	r0, #0
 800ae46:	f04f 0100 	mov.w	r1, #0
 800ae4a:	00d9      	lsls	r1, r3, #3
 800ae4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae50:	00d0      	lsls	r0, r2, #3
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	1911      	adds	r1, r2, r4
 800ae58:	6639      	str	r1, [r7, #96]	; 0x60
 800ae5a:	416b      	adcs	r3, r5
 800ae5c:	667b      	str	r3, [r7, #100]	; 0x64
 800ae5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	461a      	mov	r2, r3
 800ae64:	f04f 0300 	mov.w	r3, #0
 800ae68:	1891      	adds	r1, r2, r2
 800ae6a:	63b9      	str	r1, [r7, #56]	; 0x38
 800ae6c:	415b      	adcs	r3, r3
 800ae6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ae74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ae78:	f7f5 fec8 	bl	8000c0c <__aeabi_uldivmod>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	460b      	mov	r3, r1
 800ae80:	4ba5      	ldr	r3, [pc, #660]	; (800b118 <UART_SetConfig+0x38c>)
 800ae82:	fba3 2302 	umull	r2, r3, r3, r2
 800ae86:	095b      	lsrs	r3, r3, #5
 800ae88:	011e      	lsls	r6, r3, #4
 800ae8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae8c:	461c      	mov	r4, r3
 800ae8e:	f04f 0500 	mov.w	r5, #0
 800ae92:	4622      	mov	r2, r4
 800ae94:	462b      	mov	r3, r5
 800ae96:	1891      	adds	r1, r2, r2
 800ae98:	6339      	str	r1, [r7, #48]	; 0x30
 800ae9a:	415b      	adcs	r3, r3
 800ae9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ae9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aea2:	1912      	adds	r2, r2, r4
 800aea4:	eb45 0303 	adc.w	r3, r5, r3
 800aea8:	f04f 0000 	mov.w	r0, #0
 800aeac:	f04f 0100 	mov.w	r1, #0
 800aeb0:	00d9      	lsls	r1, r3, #3
 800aeb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aeb6:	00d0      	lsls	r0, r2, #3
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	1911      	adds	r1, r2, r4
 800aebe:	65b9      	str	r1, [r7, #88]	; 0x58
 800aec0:	416b      	adcs	r3, r5
 800aec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	461a      	mov	r2, r3
 800aeca:	f04f 0300 	mov.w	r3, #0
 800aece:	1891      	adds	r1, r2, r2
 800aed0:	62b9      	str	r1, [r7, #40]	; 0x28
 800aed2:	415b      	adcs	r3, r3
 800aed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aeda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800aede:	f7f5 fe95 	bl	8000c0c <__aeabi_uldivmod>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4b8c      	ldr	r3, [pc, #560]	; (800b118 <UART_SetConfig+0x38c>)
 800aee8:	fba3 1302 	umull	r1, r3, r3, r2
 800aeec:	095b      	lsrs	r3, r3, #5
 800aeee:	2164      	movs	r1, #100	; 0x64
 800aef0:	fb01 f303 	mul.w	r3, r1, r3
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	00db      	lsls	r3, r3, #3
 800aef8:	3332      	adds	r3, #50	; 0x32
 800aefa:	4a87      	ldr	r2, [pc, #540]	; (800b118 <UART_SetConfig+0x38c>)
 800aefc:	fba2 2303 	umull	r2, r3, r2, r3
 800af00:	095b      	lsrs	r3, r3, #5
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800af08:	441e      	add	r6, r3
 800af0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af0c:	4618      	mov	r0, r3
 800af0e:	f04f 0100 	mov.w	r1, #0
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	1894      	adds	r4, r2, r2
 800af18:	623c      	str	r4, [r7, #32]
 800af1a:	415b      	adcs	r3, r3
 800af1c:	627b      	str	r3, [r7, #36]	; 0x24
 800af1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af22:	1812      	adds	r2, r2, r0
 800af24:	eb41 0303 	adc.w	r3, r1, r3
 800af28:	f04f 0400 	mov.w	r4, #0
 800af2c:	f04f 0500 	mov.w	r5, #0
 800af30:	00dd      	lsls	r5, r3, #3
 800af32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800af36:	00d4      	lsls	r4, r2, #3
 800af38:	4622      	mov	r2, r4
 800af3a:	462b      	mov	r3, r5
 800af3c:	1814      	adds	r4, r2, r0
 800af3e:	653c      	str	r4, [r7, #80]	; 0x50
 800af40:	414b      	adcs	r3, r1
 800af42:	657b      	str	r3, [r7, #84]	; 0x54
 800af44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	461a      	mov	r2, r3
 800af4a:	f04f 0300 	mov.w	r3, #0
 800af4e:	1891      	adds	r1, r2, r2
 800af50:	61b9      	str	r1, [r7, #24]
 800af52:	415b      	adcs	r3, r3
 800af54:	61fb      	str	r3, [r7, #28]
 800af56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800af5e:	f7f5 fe55 	bl	8000c0c <__aeabi_uldivmod>
 800af62:	4602      	mov	r2, r0
 800af64:	460b      	mov	r3, r1
 800af66:	4b6c      	ldr	r3, [pc, #432]	; (800b118 <UART_SetConfig+0x38c>)
 800af68:	fba3 1302 	umull	r1, r3, r3, r2
 800af6c:	095b      	lsrs	r3, r3, #5
 800af6e:	2164      	movs	r1, #100	; 0x64
 800af70:	fb01 f303 	mul.w	r3, r1, r3
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	00db      	lsls	r3, r3, #3
 800af78:	3332      	adds	r3, #50	; 0x32
 800af7a:	4a67      	ldr	r2, [pc, #412]	; (800b118 <UART_SetConfig+0x38c>)
 800af7c:	fba2 2303 	umull	r2, r3, r2, r3
 800af80:	095b      	lsrs	r3, r3, #5
 800af82:	f003 0207 	and.w	r2, r3, #7
 800af86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4432      	add	r2, r6
 800af8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af8e:	e0b9      	b.n	800b104 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af92:	461c      	mov	r4, r3
 800af94:	f04f 0500 	mov.w	r5, #0
 800af98:	4622      	mov	r2, r4
 800af9a:	462b      	mov	r3, r5
 800af9c:	1891      	adds	r1, r2, r2
 800af9e:	6139      	str	r1, [r7, #16]
 800afa0:	415b      	adcs	r3, r3
 800afa2:	617b      	str	r3, [r7, #20]
 800afa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800afa8:	1912      	adds	r2, r2, r4
 800afaa:	eb45 0303 	adc.w	r3, r5, r3
 800afae:	f04f 0000 	mov.w	r0, #0
 800afb2:	f04f 0100 	mov.w	r1, #0
 800afb6:	00d9      	lsls	r1, r3, #3
 800afb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800afbc:	00d0      	lsls	r0, r2, #3
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
 800afc2:	eb12 0804 	adds.w	r8, r2, r4
 800afc6:	eb43 0905 	adc.w	r9, r3, r5
 800afca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	4618      	mov	r0, r3
 800afd0:	f04f 0100 	mov.w	r1, #0
 800afd4:	f04f 0200 	mov.w	r2, #0
 800afd8:	f04f 0300 	mov.w	r3, #0
 800afdc:	008b      	lsls	r3, r1, #2
 800afde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800afe2:	0082      	lsls	r2, r0, #2
 800afe4:	4640      	mov	r0, r8
 800afe6:	4649      	mov	r1, r9
 800afe8:	f7f5 fe10 	bl	8000c0c <__aeabi_uldivmod>
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	4b49      	ldr	r3, [pc, #292]	; (800b118 <UART_SetConfig+0x38c>)
 800aff2:	fba3 2302 	umull	r2, r3, r3, r2
 800aff6:	095b      	lsrs	r3, r3, #5
 800aff8:	011e      	lsls	r6, r3, #4
 800affa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800affc:	4618      	mov	r0, r3
 800affe:	f04f 0100 	mov.w	r1, #0
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	1894      	adds	r4, r2, r2
 800b008:	60bc      	str	r4, [r7, #8]
 800b00a:	415b      	adcs	r3, r3
 800b00c:	60fb      	str	r3, [r7, #12]
 800b00e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b012:	1812      	adds	r2, r2, r0
 800b014:	eb41 0303 	adc.w	r3, r1, r3
 800b018:	f04f 0400 	mov.w	r4, #0
 800b01c:	f04f 0500 	mov.w	r5, #0
 800b020:	00dd      	lsls	r5, r3, #3
 800b022:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b026:	00d4      	lsls	r4, r2, #3
 800b028:	4622      	mov	r2, r4
 800b02a:	462b      	mov	r3, r5
 800b02c:	1814      	adds	r4, r2, r0
 800b02e:	64bc      	str	r4, [r7, #72]	; 0x48
 800b030:	414b      	adcs	r3, r1
 800b032:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	4618      	mov	r0, r3
 800b03a:	f04f 0100 	mov.w	r1, #0
 800b03e:	f04f 0200 	mov.w	r2, #0
 800b042:	f04f 0300 	mov.w	r3, #0
 800b046:	008b      	lsls	r3, r1, #2
 800b048:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b04c:	0082      	lsls	r2, r0, #2
 800b04e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b052:	f7f5 fddb 	bl	8000c0c <__aeabi_uldivmod>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4b2f      	ldr	r3, [pc, #188]	; (800b118 <UART_SetConfig+0x38c>)
 800b05c:	fba3 1302 	umull	r1, r3, r3, r2
 800b060:	095b      	lsrs	r3, r3, #5
 800b062:	2164      	movs	r1, #100	; 0x64
 800b064:	fb01 f303 	mul.w	r3, r1, r3
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	011b      	lsls	r3, r3, #4
 800b06c:	3332      	adds	r3, #50	; 0x32
 800b06e:	4a2a      	ldr	r2, [pc, #168]	; (800b118 <UART_SetConfig+0x38c>)
 800b070:	fba2 2303 	umull	r2, r3, r2, r3
 800b074:	095b      	lsrs	r3, r3, #5
 800b076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b07a:	441e      	add	r6, r3
 800b07c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b07e:	4618      	mov	r0, r3
 800b080:	f04f 0100 	mov.w	r1, #0
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	1894      	adds	r4, r2, r2
 800b08a:	603c      	str	r4, [r7, #0]
 800b08c:	415b      	adcs	r3, r3
 800b08e:	607b      	str	r3, [r7, #4]
 800b090:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b094:	1812      	adds	r2, r2, r0
 800b096:	eb41 0303 	adc.w	r3, r1, r3
 800b09a:	f04f 0400 	mov.w	r4, #0
 800b09e:	f04f 0500 	mov.w	r5, #0
 800b0a2:	00dd      	lsls	r5, r3, #3
 800b0a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b0a8:	00d4      	lsls	r4, r2, #3
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	462b      	mov	r3, r5
 800b0ae:	eb12 0a00 	adds.w	sl, r2, r0
 800b0b2:	eb43 0b01 	adc.w	fp, r3, r1
 800b0b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f04f 0100 	mov.w	r1, #0
 800b0c0:	f04f 0200 	mov.w	r2, #0
 800b0c4:	f04f 0300 	mov.w	r3, #0
 800b0c8:	008b      	lsls	r3, r1, #2
 800b0ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b0ce:	0082      	lsls	r2, r0, #2
 800b0d0:	4650      	mov	r0, sl
 800b0d2:	4659      	mov	r1, fp
 800b0d4:	f7f5 fd9a 	bl	8000c0c <__aeabi_uldivmod>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4b0e      	ldr	r3, [pc, #56]	; (800b118 <UART_SetConfig+0x38c>)
 800b0de:	fba3 1302 	umull	r1, r3, r3, r2
 800b0e2:	095b      	lsrs	r3, r3, #5
 800b0e4:	2164      	movs	r1, #100	; 0x64
 800b0e6:	fb01 f303 	mul.w	r3, r1, r3
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	011b      	lsls	r3, r3, #4
 800b0ee:	3332      	adds	r3, #50	; 0x32
 800b0f0:	4a09      	ldr	r2, [pc, #36]	; (800b118 <UART_SetConfig+0x38c>)
 800b0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f6:	095b      	lsrs	r3, r3, #5
 800b0f8:	f003 020f 	and.w	r2, r3, #15
 800b0fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4432      	add	r2, r6
 800b102:	609a      	str	r2, [r3, #8]
}
 800b104:	bf00      	nop
 800b106:	377c      	adds	r7, #124	; 0x7c
 800b108:	46bd      	mov	sp, r7
 800b10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10e:	bf00      	nop
 800b110:	40011000 	.word	0x40011000
 800b114:	40011400 	.word	0x40011400
 800b118:	51eb851f 	.word	0x51eb851f

0800b11c <cosf>:
 800b11c:	ee10 3a10 	vmov	r3, s0
 800b120:	b507      	push	{r0, r1, r2, lr}
 800b122:	4a1c      	ldr	r2, [pc, #112]	; (800b194 <cosf+0x78>)
 800b124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b128:	4293      	cmp	r3, r2
 800b12a:	dc04      	bgt.n	800b136 <cosf+0x1a>
 800b12c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800b198 <cosf+0x7c>
 800b130:	f000 fb96 	bl	800b860 <__kernel_cosf>
 800b134:	e004      	b.n	800b140 <cosf+0x24>
 800b136:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b13a:	db04      	blt.n	800b146 <cosf+0x2a>
 800b13c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b140:	b003      	add	sp, #12
 800b142:	f85d fb04 	ldr.w	pc, [sp], #4
 800b146:	4668      	mov	r0, sp
 800b148:	f000 fa4a 	bl	800b5e0 <__ieee754_rem_pio2f>
 800b14c:	f000 0003 	and.w	r0, r0, #3
 800b150:	2801      	cmp	r0, #1
 800b152:	d007      	beq.n	800b164 <cosf+0x48>
 800b154:	2802      	cmp	r0, #2
 800b156:	d00e      	beq.n	800b176 <cosf+0x5a>
 800b158:	b9a0      	cbnz	r0, 800b184 <cosf+0x68>
 800b15a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b15e:	ed9d 0a00 	vldr	s0, [sp]
 800b162:	e7e5      	b.n	800b130 <cosf+0x14>
 800b164:	eddd 0a01 	vldr	s1, [sp, #4]
 800b168:	ed9d 0a00 	vldr	s0, [sp]
 800b16c:	f000 fe62 	bl	800be34 <__kernel_sinf>
 800b170:	eeb1 0a40 	vneg.f32	s0, s0
 800b174:	e7e4      	b.n	800b140 <cosf+0x24>
 800b176:	eddd 0a01 	vldr	s1, [sp, #4]
 800b17a:	ed9d 0a00 	vldr	s0, [sp]
 800b17e:	f000 fb6f 	bl	800b860 <__kernel_cosf>
 800b182:	e7f5      	b.n	800b170 <cosf+0x54>
 800b184:	eddd 0a01 	vldr	s1, [sp, #4]
 800b188:	ed9d 0a00 	vldr	s0, [sp]
 800b18c:	2001      	movs	r0, #1
 800b18e:	f000 fe51 	bl	800be34 <__kernel_sinf>
 800b192:	e7d5      	b.n	800b140 <cosf+0x24>
 800b194:	3f490fd8 	.word	0x3f490fd8
 800b198:	00000000 	.word	0x00000000

0800b19c <sinf>:
 800b19c:	ee10 3a10 	vmov	r3, s0
 800b1a0:	b507      	push	{r0, r1, r2, lr}
 800b1a2:	4a1d      	ldr	r2, [pc, #116]	; (800b218 <sinf+0x7c>)
 800b1a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	dc05      	bgt.n	800b1b8 <sinf+0x1c>
 800b1ac:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800b21c <sinf+0x80>
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	f000 fe3f 	bl	800be34 <__kernel_sinf>
 800b1b6:	e004      	b.n	800b1c2 <sinf+0x26>
 800b1b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b1bc:	db04      	blt.n	800b1c8 <sinf+0x2c>
 800b1be:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b1c2:	b003      	add	sp, #12
 800b1c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1c8:	4668      	mov	r0, sp
 800b1ca:	f000 fa09 	bl	800b5e0 <__ieee754_rem_pio2f>
 800b1ce:	f000 0003 	and.w	r0, r0, #3
 800b1d2:	2801      	cmp	r0, #1
 800b1d4:	d008      	beq.n	800b1e8 <sinf+0x4c>
 800b1d6:	2802      	cmp	r0, #2
 800b1d8:	d00d      	beq.n	800b1f6 <sinf+0x5a>
 800b1da:	b9b0      	cbnz	r0, 800b20a <sinf+0x6e>
 800b1dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1e0:	ed9d 0a00 	vldr	s0, [sp]
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	e7e4      	b.n	800b1b2 <sinf+0x16>
 800b1e8:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1ec:	ed9d 0a00 	vldr	s0, [sp]
 800b1f0:	f000 fb36 	bl	800b860 <__kernel_cosf>
 800b1f4:	e7e5      	b.n	800b1c2 <sinf+0x26>
 800b1f6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1fa:	ed9d 0a00 	vldr	s0, [sp]
 800b1fe:	2001      	movs	r0, #1
 800b200:	f000 fe18 	bl	800be34 <__kernel_sinf>
 800b204:	eeb1 0a40 	vneg.f32	s0, s0
 800b208:	e7db      	b.n	800b1c2 <sinf+0x26>
 800b20a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b20e:	ed9d 0a00 	vldr	s0, [sp]
 800b212:	f000 fb25 	bl	800b860 <__kernel_cosf>
 800b216:	e7f5      	b.n	800b204 <sinf+0x68>
 800b218:	3f490fd8 	.word	0x3f490fd8
 800b21c:	00000000 	.word	0x00000000

0800b220 <asinf>:
 800b220:	b508      	push	{r3, lr}
 800b222:	ed2d 8b02 	vpush	{d8}
 800b226:	eeb0 8a40 	vmov.f32	s16, s0
 800b22a:	f000 f853 	bl	800b2d4 <__ieee754_asinf>
 800b22e:	4b13      	ldr	r3, [pc, #76]	; (800b27c <asinf+0x5c>)
 800b230:	f993 3000 	ldrsb.w	r3, [r3]
 800b234:	3301      	adds	r3, #1
 800b236:	eef0 8a40 	vmov.f32	s17, s0
 800b23a:	d01a      	beq.n	800b272 <asinf+0x52>
 800b23c:	eeb4 8a48 	vcmp.f32	s16, s16
 800b240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b244:	d615      	bvs.n	800b272 <asinf+0x52>
 800b246:	eeb0 0a48 	vmov.f32	s0, s16
 800b24a:	f000 ff0f 	bl	800c06c <fabsf>
 800b24e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b252:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25a:	dd0a      	ble.n	800b272 <asinf+0x52>
 800b25c:	f000 ffc8 	bl	800c1f0 <__errno>
 800b260:	ecbd 8b02 	vpop	{d8}
 800b264:	2321      	movs	r3, #33	; 0x21
 800b266:	6003      	str	r3, [r0, #0]
 800b268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b26c:	4804      	ldr	r0, [pc, #16]	; (800b280 <asinf+0x60>)
 800b26e:	f000 bf47 	b.w	800c100 <nanf>
 800b272:	eeb0 0a68 	vmov.f32	s0, s17
 800b276:	ecbd 8b02 	vpop	{d8}
 800b27a:	bd08      	pop	{r3, pc}
 800b27c:	20000049 	.word	0x20000049
 800b280:	0800d771 	.word	0x0800d771

0800b284 <atan2f>:
 800b284:	f000 b90c 	b.w	800b4a0 <__ieee754_atan2f>

0800b288 <sqrtf>:
 800b288:	b508      	push	{r3, lr}
 800b28a:	ed2d 8b02 	vpush	{d8}
 800b28e:	eeb0 8a40 	vmov.f32	s16, s0
 800b292:	f000 fae1 	bl	800b858 <__ieee754_sqrtf>
 800b296:	4b0d      	ldr	r3, [pc, #52]	; (800b2cc <sqrtf+0x44>)
 800b298:	f993 3000 	ldrsb.w	r3, [r3]
 800b29c:	3301      	adds	r3, #1
 800b29e:	d011      	beq.n	800b2c4 <sqrtf+0x3c>
 800b2a0:	eeb4 8a48 	vcmp.f32	s16, s16
 800b2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a8:	d60c      	bvs.n	800b2c4 <sqrtf+0x3c>
 800b2aa:	eddf 8a09 	vldr	s17, [pc, #36]	; 800b2d0 <sqrtf+0x48>
 800b2ae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2b6:	d505      	bpl.n	800b2c4 <sqrtf+0x3c>
 800b2b8:	f000 ff9a 	bl	800c1f0 <__errno>
 800b2bc:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b2c0:	2321      	movs	r3, #33	; 0x21
 800b2c2:	6003      	str	r3, [r0, #0]
 800b2c4:	ecbd 8b02 	vpop	{d8}
 800b2c8:	bd08      	pop	{r3, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20000049 	.word	0x20000049
 800b2d0:	00000000 	.word	0x00000000

0800b2d4 <__ieee754_asinf>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	ee10 5a10 	vmov	r5, s0
 800b2da:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b2de:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b2e2:	ed2d 8b04 	vpush	{d8-d9}
 800b2e6:	d10c      	bne.n	800b302 <__ieee754_asinf+0x2e>
 800b2e8:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800b460 <__ieee754_asinf+0x18c>
 800b2ec:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800b464 <__ieee754_asinf+0x190>
 800b2f0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b2f4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b2f8:	eeb0 0a67 	vmov.f32	s0, s15
 800b2fc:	ecbd 8b04 	vpop	{d8-d9}
 800b300:	bd38      	pop	{r3, r4, r5, pc}
 800b302:	dd04      	ble.n	800b30e <__ieee754_asinf+0x3a>
 800b304:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b308:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b30c:	e7f6      	b.n	800b2fc <__ieee754_asinf+0x28>
 800b30e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b312:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b316:	da0b      	bge.n	800b330 <__ieee754_asinf+0x5c>
 800b318:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b31c:	da52      	bge.n	800b3c4 <__ieee754_asinf+0xf0>
 800b31e:	eddf 7a52 	vldr	s15, [pc, #328]	; 800b468 <__ieee754_asinf+0x194>
 800b322:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b326:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b32e:	dce5      	bgt.n	800b2fc <__ieee754_asinf+0x28>
 800b330:	f000 fe9c 	bl	800c06c <fabsf>
 800b334:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800b338:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800b33c:	ee20 8a08 	vmul.f32	s16, s0, s16
 800b340:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800b46c <__ieee754_asinf+0x198>
 800b344:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b470 <__ieee754_asinf+0x19c>
 800b348:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800b474 <__ieee754_asinf+0x1a0>
 800b34c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800b350:	eddf 7a49 	vldr	s15, [pc, #292]	; 800b478 <__ieee754_asinf+0x1a4>
 800b354:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b358:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b47c <__ieee754_asinf+0x1a8>
 800b35c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b360:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b480 <__ieee754_asinf+0x1ac>
 800b364:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b368:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b484 <__ieee754_asinf+0x1b0>
 800b36c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800b370:	eddf 7a45 	vldr	s15, [pc, #276]	; 800b488 <__ieee754_asinf+0x1b4>
 800b374:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b378:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b48c <__ieee754_asinf+0x1b8>
 800b37c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b380:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b490 <__ieee754_asinf+0x1bc>
 800b384:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b388:	eeb0 0a48 	vmov.f32	s0, s16
 800b38c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800b390:	f000 fa62 	bl	800b858 <__ieee754_sqrtf>
 800b394:	4b3f      	ldr	r3, [pc, #252]	; (800b494 <__ieee754_asinf+0x1c0>)
 800b396:	ee29 9a08 	vmul.f32	s18, s18, s16
 800b39a:	429c      	cmp	r4, r3
 800b39c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800b3a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b3a4:	dd3d      	ble.n	800b422 <__ieee754_asinf+0x14e>
 800b3a6:	eea0 0a06 	vfma.f32	s0, s0, s12
 800b3aa:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800b498 <__ieee754_asinf+0x1c4>
 800b3ae:	eee0 7a26 	vfma.f32	s15, s0, s13
 800b3b2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b464 <__ieee754_asinf+0x190>
 800b3b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b3ba:	2d00      	cmp	r5, #0
 800b3bc:	bfd8      	it	le
 800b3be:	eeb1 0a40 	vnegle.f32	s0, s0
 800b3c2:	e79b      	b.n	800b2fc <__ieee754_asinf+0x28>
 800b3c4:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b3c8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800b46c <__ieee754_asinf+0x198>
 800b3cc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b470 <__ieee754_asinf+0x19c>
 800b3d0:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800b484 <__ieee754_asinf+0x1b0>
 800b3d4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b3d8:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b478 <__ieee754_asinf+0x1a4>
 800b3dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b3e0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b47c <__ieee754_asinf+0x1a8>
 800b3e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b3e8:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b480 <__ieee754_asinf+0x1ac>
 800b3ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b3f0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b474 <__ieee754_asinf+0x1a0>
 800b3f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b3f8:	eddf 6a23 	vldr	s13, [pc, #140]	; 800b488 <__ieee754_asinf+0x1b4>
 800b3fc:	eee7 6a86 	vfma.f32	s13, s15, s12
 800b400:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b48c <__ieee754_asinf+0x1b8>
 800b404:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b408:	eddf 6a21 	vldr	s13, [pc, #132]	; 800b490 <__ieee754_asinf+0x1bc>
 800b40c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b410:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b414:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b418:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b41c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b420:	e76c      	b.n	800b2fc <__ieee754_asinf+0x28>
 800b422:	ee10 3a10 	vmov	r3, s0
 800b426:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b42a:	f023 030f 	bic.w	r3, r3, #15
 800b42e:	ee07 3a10 	vmov	s14, r3
 800b432:	eea7 8a47 	vfms.f32	s16, s14, s14
 800b436:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b43a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b43e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800b442:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b460 <__ieee754_asinf+0x18c>
 800b446:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800b44a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800b44e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800b49c <__ieee754_asinf+0x1c8>
 800b452:	eeb0 6a40 	vmov.f32	s12, s0
 800b456:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b45a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b45e:	e7aa      	b.n	800b3b6 <__ieee754_asinf+0xe2>
 800b460:	b33bbd2e 	.word	0xb33bbd2e
 800b464:	3fc90fdb 	.word	0x3fc90fdb
 800b468:	7149f2ca 	.word	0x7149f2ca
 800b46c:	3811ef08 	.word	0x3811ef08
 800b470:	3a4f7f04 	.word	0x3a4f7f04
 800b474:	3e2aaaab 	.word	0x3e2aaaab
 800b478:	bd241146 	.word	0xbd241146
 800b47c:	3e4e0aa8 	.word	0x3e4e0aa8
 800b480:	bea6b090 	.word	0xbea6b090
 800b484:	3d9dc62e 	.word	0x3d9dc62e
 800b488:	bf303361 	.word	0xbf303361
 800b48c:	4001572d 	.word	0x4001572d
 800b490:	c019d139 	.word	0xc019d139
 800b494:	3f799999 	.word	0x3f799999
 800b498:	333bbd2e 	.word	0x333bbd2e
 800b49c:	3f490fdb 	.word	0x3f490fdb

0800b4a0 <__ieee754_atan2f>:
 800b4a0:	ee10 2a90 	vmov	r2, s1
 800b4a4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b4a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b4ac:	b510      	push	{r4, lr}
 800b4ae:	eef0 7a40 	vmov.f32	s15, s0
 800b4b2:	dc06      	bgt.n	800b4c2 <__ieee754_atan2f+0x22>
 800b4b4:	ee10 0a10 	vmov	r0, s0
 800b4b8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b4bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b4c0:	dd04      	ble.n	800b4cc <__ieee754_atan2f+0x2c>
 800b4c2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b4c6:	eeb0 0a67 	vmov.f32	s0, s15
 800b4ca:	bd10      	pop	{r4, pc}
 800b4cc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800b4d0:	d103      	bne.n	800b4da <__ieee754_atan2f+0x3a>
 800b4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d6:	f000 bcf5 	b.w	800bec4 <atanf>
 800b4da:	1794      	asrs	r4, r2, #30
 800b4dc:	f004 0402 	and.w	r4, r4, #2
 800b4e0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b4e4:	b943      	cbnz	r3, 800b4f8 <__ieee754_atan2f+0x58>
 800b4e6:	2c02      	cmp	r4, #2
 800b4e8:	d05e      	beq.n	800b5a8 <__ieee754_atan2f+0x108>
 800b4ea:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b5bc <__ieee754_atan2f+0x11c>
 800b4ee:	2c03      	cmp	r4, #3
 800b4f0:	bf08      	it	eq
 800b4f2:	eef0 7a47 	vmoveq.f32	s15, s14
 800b4f6:	e7e6      	b.n	800b4c6 <__ieee754_atan2f+0x26>
 800b4f8:	b941      	cbnz	r1, 800b50c <__ieee754_atan2f+0x6c>
 800b4fa:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b5c0 <__ieee754_atan2f+0x120>
 800b4fe:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b5c4 <__ieee754_atan2f+0x124>
 800b502:	2800      	cmp	r0, #0
 800b504:	bfb8      	it	lt
 800b506:	eef0 7a40 	vmovlt.f32	s15, s0
 800b50a:	e7dc      	b.n	800b4c6 <__ieee754_atan2f+0x26>
 800b50c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b510:	d110      	bne.n	800b534 <__ieee754_atan2f+0x94>
 800b512:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b516:	f104 34ff 	add.w	r4, r4, #4294967295
 800b51a:	d107      	bne.n	800b52c <__ieee754_atan2f+0x8c>
 800b51c:	2c02      	cmp	r4, #2
 800b51e:	d846      	bhi.n	800b5ae <__ieee754_atan2f+0x10e>
 800b520:	4b29      	ldr	r3, [pc, #164]	; (800b5c8 <__ieee754_atan2f+0x128>)
 800b522:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b526:	edd4 7a00 	vldr	s15, [r4]
 800b52a:	e7cc      	b.n	800b4c6 <__ieee754_atan2f+0x26>
 800b52c:	2c02      	cmp	r4, #2
 800b52e:	d841      	bhi.n	800b5b4 <__ieee754_atan2f+0x114>
 800b530:	4b26      	ldr	r3, [pc, #152]	; (800b5cc <__ieee754_atan2f+0x12c>)
 800b532:	e7f6      	b.n	800b522 <__ieee754_atan2f+0x82>
 800b534:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b538:	d0df      	beq.n	800b4fa <__ieee754_atan2f+0x5a>
 800b53a:	1a5b      	subs	r3, r3, r1
 800b53c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800b540:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800b544:	da1a      	bge.n	800b57c <__ieee754_atan2f+0xdc>
 800b546:	2a00      	cmp	r2, #0
 800b548:	da01      	bge.n	800b54e <__ieee754_atan2f+0xae>
 800b54a:	313c      	adds	r1, #60	; 0x3c
 800b54c:	db19      	blt.n	800b582 <__ieee754_atan2f+0xe2>
 800b54e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b552:	f000 fd8b 	bl	800c06c <fabsf>
 800b556:	f000 fcb5 	bl	800bec4 <atanf>
 800b55a:	eef0 7a40 	vmov.f32	s15, s0
 800b55e:	2c01      	cmp	r4, #1
 800b560:	d012      	beq.n	800b588 <__ieee754_atan2f+0xe8>
 800b562:	2c02      	cmp	r4, #2
 800b564:	d017      	beq.n	800b596 <__ieee754_atan2f+0xf6>
 800b566:	2c00      	cmp	r4, #0
 800b568:	d0ad      	beq.n	800b4c6 <__ieee754_atan2f+0x26>
 800b56a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800b5d0 <__ieee754_atan2f+0x130>
 800b56e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b572:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b5d4 <__ieee754_atan2f+0x134>
 800b576:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b57a:	e7a4      	b.n	800b4c6 <__ieee754_atan2f+0x26>
 800b57c:	eddf 7a10 	vldr	s15, [pc, #64]	; 800b5c0 <__ieee754_atan2f+0x120>
 800b580:	e7ed      	b.n	800b55e <__ieee754_atan2f+0xbe>
 800b582:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b5d8 <__ieee754_atan2f+0x138>
 800b586:	e7ea      	b.n	800b55e <__ieee754_atan2f+0xbe>
 800b588:	ee17 3a90 	vmov	r3, s15
 800b58c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b590:	ee07 3a90 	vmov	s15, r3
 800b594:	e797      	b.n	800b4c6 <__ieee754_atan2f+0x26>
 800b596:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b5d0 <__ieee754_atan2f+0x130>
 800b59a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b59e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800b5d4 <__ieee754_atan2f+0x134>
 800b5a2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b5a6:	e78e      	b.n	800b4c6 <__ieee754_atan2f+0x26>
 800b5a8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800b5d4 <__ieee754_atan2f+0x134>
 800b5ac:	e78b      	b.n	800b4c6 <__ieee754_atan2f+0x26>
 800b5ae:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b5dc <__ieee754_atan2f+0x13c>
 800b5b2:	e788      	b.n	800b4c6 <__ieee754_atan2f+0x26>
 800b5b4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b5d8 <__ieee754_atan2f+0x138>
 800b5b8:	e785      	b.n	800b4c6 <__ieee754_atan2f+0x26>
 800b5ba:	bf00      	nop
 800b5bc:	c0490fdb 	.word	0xc0490fdb
 800b5c0:	3fc90fdb 	.word	0x3fc90fdb
 800b5c4:	bfc90fdb 	.word	0xbfc90fdb
 800b5c8:	0800d2b4 	.word	0x0800d2b4
 800b5cc:	0800d2c0 	.word	0x0800d2c0
 800b5d0:	33bbbd2e 	.word	0x33bbbd2e
 800b5d4:	40490fdb 	.word	0x40490fdb
 800b5d8:	00000000 	.word	0x00000000
 800b5dc:	3f490fdb 	.word	0x3f490fdb

0800b5e0 <__ieee754_rem_pio2f>:
 800b5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e2:	ee10 6a10 	vmov	r6, s0
 800b5e6:	4b8e      	ldr	r3, [pc, #568]	; (800b820 <__ieee754_rem_pio2f+0x240>)
 800b5e8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b5ec:	429d      	cmp	r5, r3
 800b5ee:	b087      	sub	sp, #28
 800b5f0:	eef0 7a40 	vmov.f32	s15, s0
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	dc05      	bgt.n	800b604 <__ieee754_rem_pio2f+0x24>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	ed80 0a00 	vstr	s0, [r0]
 800b5fe:	6043      	str	r3, [r0, #4]
 800b600:	2000      	movs	r0, #0
 800b602:	e01a      	b.n	800b63a <__ieee754_rem_pio2f+0x5a>
 800b604:	4b87      	ldr	r3, [pc, #540]	; (800b824 <__ieee754_rem_pio2f+0x244>)
 800b606:	429d      	cmp	r5, r3
 800b608:	dc46      	bgt.n	800b698 <__ieee754_rem_pio2f+0xb8>
 800b60a:	2e00      	cmp	r6, #0
 800b60c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b828 <__ieee754_rem_pio2f+0x248>
 800b610:	4b86      	ldr	r3, [pc, #536]	; (800b82c <__ieee754_rem_pio2f+0x24c>)
 800b612:	f025 050f 	bic.w	r5, r5, #15
 800b616:	dd1f      	ble.n	800b658 <__ieee754_rem_pio2f+0x78>
 800b618:	429d      	cmp	r5, r3
 800b61a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b61e:	d00e      	beq.n	800b63e <__ieee754_rem_pio2f+0x5e>
 800b620:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b830 <__ieee754_rem_pio2f+0x250>
 800b624:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b628:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b62c:	ed80 0a00 	vstr	s0, [r0]
 800b630:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b634:	2001      	movs	r0, #1
 800b636:	edc4 7a01 	vstr	s15, [r4, #4]
 800b63a:	b007      	add	sp, #28
 800b63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b63e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b834 <__ieee754_rem_pio2f+0x254>
 800b642:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b838 <__ieee754_rem_pio2f+0x258>
 800b646:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b64a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b64e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b652:	edc0 6a00 	vstr	s13, [r0]
 800b656:	e7eb      	b.n	800b630 <__ieee754_rem_pio2f+0x50>
 800b658:	429d      	cmp	r5, r3
 800b65a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b65e:	d00e      	beq.n	800b67e <__ieee754_rem_pio2f+0x9e>
 800b660:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b830 <__ieee754_rem_pio2f+0x250>
 800b664:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b668:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b66c:	ed80 0a00 	vstr	s0, [r0]
 800b670:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b674:	f04f 30ff 	mov.w	r0, #4294967295
 800b678:	edc4 7a01 	vstr	s15, [r4, #4]
 800b67c:	e7dd      	b.n	800b63a <__ieee754_rem_pio2f+0x5a>
 800b67e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b834 <__ieee754_rem_pio2f+0x254>
 800b682:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b838 <__ieee754_rem_pio2f+0x258>
 800b686:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b68a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b68e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b692:	edc0 6a00 	vstr	s13, [r0]
 800b696:	e7eb      	b.n	800b670 <__ieee754_rem_pio2f+0x90>
 800b698:	4b68      	ldr	r3, [pc, #416]	; (800b83c <__ieee754_rem_pio2f+0x25c>)
 800b69a:	429d      	cmp	r5, r3
 800b69c:	dc72      	bgt.n	800b784 <__ieee754_rem_pio2f+0x1a4>
 800b69e:	f000 fce5 	bl	800c06c <fabsf>
 800b6a2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b840 <__ieee754_rem_pio2f+0x260>
 800b6a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b6aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b6ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b6b6:	ee17 0a90 	vmov	r0, s15
 800b6ba:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b828 <__ieee754_rem_pio2f+0x248>
 800b6be:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b6c2:	281f      	cmp	r0, #31
 800b6c4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b830 <__ieee754_rem_pio2f+0x250>
 800b6c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6cc:	eeb1 6a47 	vneg.f32	s12, s14
 800b6d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b6d4:	ee16 2a90 	vmov	r2, s13
 800b6d8:	dc1c      	bgt.n	800b714 <__ieee754_rem_pio2f+0x134>
 800b6da:	495a      	ldr	r1, [pc, #360]	; (800b844 <__ieee754_rem_pio2f+0x264>)
 800b6dc:	1e47      	subs	r7, r0, #1
 800b6de:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b6e2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b6e6:	428b      	cmp	r3, r1
 800b6e8:	d014      	beq.n	800b714 <__ieee754_rem_pio2f+0x134>
 800b6ea:	6022      	str	r2, [r4, #0]
 800b6ec:	ed94 7a00 	vldr	s14, [r4]
 800b6f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b6f4:	2e00      	cmp	r6, #0
 800b6f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b6fa:	ed84 0a01 	vstr	s0, [r4, #4]
 800b6fe:	da9c      	bge.n	800b63a <__ieee754_rem_pio2f+0x5a>
 800b700:	eeb1 7a47 	vneg.f32	s14, s14
 800b704:	eeb1 0a40 	vneg.f32	s0, s0
 800b708:	ed84 7a00 	vstr	s14, [r4]
 800b70c:	ed84 0a01 	vstr	s0, [r4, #4]
 800b710:	4240      	negs	r0, r0
 800b712:	e792      	b.n	800b63a <__ieee754_rem_pio2f+0x5a>
 800b714:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b718:	15eb      	asrs	r3, r5, #23
 800b71a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b71e:	2d08      	cmp	r5, #8
 800b720:	dde3      	ble.n	800b6ea <__ieee754_rem_pio2f+0x10a>
 800b722:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b834 <__ieee754_rem_pio2f+0x254>
 800b726:	eef0 6a40 	vmov.f32	s13, s0
 800b72a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b72e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b732:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b736:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b838 <__ieee754_rem_pio2f+0x258>
 800b73a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800b73e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b742:	eef0 7a40 	vmov.f32	s15, s0
 800b746:	ee15 2a90 	vmov	r2, s11
 800b74a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b74e:	1a5b      	subs	r3, r3, r1
 800b750:	2b19      	cmp	r3, #25
 800b752:	dc04      	bgt.n	800b75e <__ieee754_rem_pio2f+0x17e>
 800b754:	edc4 5a00 	vstr	s11, [r4]
 800b758:	eeb0 0a66 	vmov.f32	s0, s13
 800b75c:	e7c6      	b.n	800b6ec <__ieee754_rem_pio2f+0x10c>
 800b75e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b848 <__ieee754_rem_pio2f+0x268>
 800b762:	eeb0 0a66 	vmov.f32	s0, s13
 800b766:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b76a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b76e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b84c <__ieee754_rem_pio2f+0x26c>
 800b772:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b776:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b77a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b77e:	ed84 7a00 	vstr	s14, [r4]
 800b782:	e7b3      	b.n	800b6ec <__ieee754_rem_pio2f+0x10c>
 800b784:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b788:	db06      	blt.n	800b798 <__ieee754_rem_pio2f+0x1b8>
 800b78a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b78e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b792:	edc0 7a00 	vstr	s15, [r0]
 800b796:	e733      	b.n	800b600 <__ieee754_rem_pio2f+0x20>
 800b798:	15ea      	asrs	r2, r5, #23
 800b79a:	3a86      	subs	r2, #134	; 0x86
 800b79c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b7a0:	ee07 3a90 	vmov	s15, r3
 800b7a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b7a8:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b850 <__ieee754_rem_pio2f+0x270>
 800b7ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b7b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7b4:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b7b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b7bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b7c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b7c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7c8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b7cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b7d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d8:	edcd 7a05 	vstr	s15, [sp, #20]
 800b7dc:	d11e      	bne.n	800b81c <__ieee754_rem_pio2f+0x23c>
 800b7de:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e6:	bf14      	ite	ne
 800b7e8:	2302      	movne	r3, #2
 800b7ea:	2301      	moveq	r3, #1
 800b7ec:	4919      	ldr	r1, [pc, #100]	; (800b854 <__ieee754_rem_pio2f+0x274>)
 800b7ee:	9101      	str	r1, [sp, #4]
 800b7f0:	2102      	movs	r1, #2
 800b7f2:	9100      	str	r1, [sp, #0]
 800b7f4:	a803      	add	r0, sp, #12
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	f000 f892 	bl	800b920 <__kernel_rem_pio2f>
 800b7fc:	2e00      	cmp	r6, #0
 800b7fe:	f6bf af1c 	bge.w	800b63a <__ieee754_rem_pio2f+0x5a>
 800b802:	edd4 7a00 	vldr	s15, [r4]
 800b806:	eef1 7a67 	vneg.f32	s15, s15
 800b80a:	edc4 7a00 	vstr	s15, [r4]
 800b80e:	edd4 7a01 	vldr	s15, [r4, #4]
 800b812:	eef1 7a67 	vneg.f32	s15, s15
 800b816:	edc4 7a01 	vstr	s15, [r4, #4]
 800b81a:	e779      	b.n	800b710 <__ieee754_rem_pio2f+0x130>
 800b81c:	2303      	movs	r3, #3
 800b81e:	e7e5      	b.n	800b7ec <__ieee754_rem_pio2f+0x20c>
 800b820:	3f490fd8 	.word	0x3f490fd8
 800b824:	4016cbe3 	.word	0x4016cbe3
 800b828:	3fc90f80 	.word	0x3fc90f80
 800b82c:	3fc90fd0 	.word	0x3fc90fd0
 800b830:	37354443 	.word	0x37354443
 800b834:	37354400 	.word	0x37354400
 800b838:	2e85a308 	.word	0x2e85a308
 800b83c:	43490f80 	.word	0x43490f80
 800b840:	3f22f984 	.word	0x3f22f984
 800b844:	0800d2cc 	.word	0x0800d2cc
 800b848:	2e85a300 	.word	0x2e85a300
 800b84c:	248d3132 	.word	0x248d3132
 800b850:	43800000 	.word	0x43800000
 800b854:	0800d34c 	.word	0x0800d34c

0800b858 <__ieee754_sqrtf>:
 800b858:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b85c:	4770      	bx	lr
	...

0800b860 <__kernel_cosf>:
 800b860:	ee10 3a10 	vmov	r3, s0
 800b864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b868:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b86c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b870:	da05      	bge.n	800b87e <__kernel_cosf+0x1e>
 800b872:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b876:	ee17 2a90 	vmov	r2, s15
 800b87a:	2a00      	cmp	r2, #0
 800b87c:	d03d      	beq.n	800b8fa <__kernel_cosf+0x9a>
 800b87e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800b882:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b900 <__kernel_cosf+0xa0>
 800b886:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b904 <__kernel_cosf+0xa4>
 800b88a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800b908 <__kernel_cosf+0xa8>
 800b88e:	4a1f      	ldr	r2, [pc, #124]	; (800b90c <__kernel_cosf+0xac>)
 800b890:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b894:	4293      	cmp	r3, r2
 800b896:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b910 <__kernel_cosf+0xb0>
 800b89a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b89e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b914 <__kernel_cosf+0xb4>
 800b8a2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b8a6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b918 <__kernel_cosf+0xb8>
 800b8aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b8ae:	eeb0 7a66 	vmov.f32	s14, s13
 800b8b2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b8b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b8ba:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800b8be:	ee67 6a25 	vmul.f32	s13, s14, s11
 800b8c2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800b8c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b8ca:	dc04      	bgt.n	800b8d6 <__kernel_cosf+0x76>
 800b8cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b8d0:	ee36 0a47 	vsub.f32	s0, s12, s14
 800b8d4:	4770      	bx	lr
 800b8d6:	4a11      	ldr	r2, [pc, #68]	; (800b91c <__kernel_cosf+0xbc>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	bfda      	itte	le
 800b8dc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b8e0:	ee06 3a90 	vmovle	s13, r3
 800b8e4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800b8e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b8ec:	ee36 0a66 	vsub.f32	s0, s12, s13
 800b8f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b8f8:	4770      	bx	lr
 800b8fa:	eeb0 0a46 	vmov.f32	s0, s12
 800b8fe:	4770      	bx	lr
 800b900:	ad47d74e 	.word	0xad47d74e
 800b904:	310f74f6 	.word	0x310f74f6
 800b908:	3d2aaaab 	.word	0x3d2aaaab
 800b90c:	3e999999 	.word	0x3e999999
 800b910:	b493f27c 	.word	0xb493f27c
 800b914:	37d00d01 	.word	0x37d00d01
 800b918:	bab60b61 	.word	0xbab60b61
 800b91c:	3f480000 	.word	0x3f480000

0800b920 <__kernel_rem_pio2f>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	ed2d 8b04 	vpush	{d8-d9}
 800b928:	b0d7      	sub	sp, #348	; 0x15c
 800b92a:	4616      	mov	r6, r2
 800b92c:	4698      	mov	r8, r3
 800b92e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b930:	4bbb      	ldr	r3, [pc, #748]	; (800bc20 <__kernel_rem_pio2f+0x300>)
 800b932:	9001      	str	r0, [sp, #4]
 800b934:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800b938:	1d33      	adds	r3, r6, #4
 800b93a:	460d      	mov	r5, r1
 800b93c:	f108 39ff 	add.w	r9, r8, #4294967295
 800b940:	db29      	blt.n	800b996 <__kernel_rem_pio2f+0x76>
 800b942:	1ef1      	subs	r1, r6, #3
 800b944:	bf48      	it	mi
 800b946:	1d31      	addmi	r1, r6, #4
 800b948:	10c9      	asrs	r1, r1, #3
 800b94a:	1c4c      	adds	r4, r1, #1
 800b94c:	00e3      	lsls	r3, r4, #3
 800b94e:	9302      	str	r3, [sp, #8]
 800b950:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800b952:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800bc30 <__kernel_rem_pio2f+0x310>
 800b956:	eba1 0009 	sub.w	r0, r1, r9
 800b95a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800b95e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800b962:	eb07 0c09 	add.w	ip, r7, r9
 800b966:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800b96a:	2300      	movs	r3, #0
 800b96c:	4563      	cmp	r3, ip
 800b96e:	dd14      	ble.n	800b99a <__kernel_rem_pio2f+0x7a>
 800b970:	ab1a      	add	r3, sp, #104	; 0x68
 800b972:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800b976:	46cc      	mov	ip, r9
 800b978:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800b97c:	f1c8 0b01 	rsb	fp, r8, #1
 800b980:	eb0b 020c 	add.w	r2, fp, ip
 800b984:	4297      	cmp	r7, r2
 800b986:	db27      	blt.n	800b9d8 <__kernel_rem_pio2f+0xb8>
 800b988:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b98c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800bc30 <__kernel_rem_pio2f+0x310>
 800b990:	4618      	mov	r0, r3
 800b992:	2200      	movs	r2, #0
 800b994:	e016      	b.n	800b9c4 <__kernel_rem_pio2f+0xa4>
 800b996:	2100      	movs	r1, #0
 800b998:	e7d7      	b.n	800b94a <__kernel_rem_pio2f+0x2a>
 800b99a:	42d8      	cmn	r0, r3
 800b99c:	bf5d      	ittte	pl
 800b99e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800b9a2:	ee07 2a90 	vmovpl	s15, r2
 800b9a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b9aa:	eef0 7a47 	vmovmi.f32	s15, s14
 800b9ae:	ecea 7a01 	vstmia	sl!, {s15}
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	e7da      	b.n	800b96c <__kernel_rem_pio2f+0x4c>
 800b9b6:	ecfe 6a01 	vldmia	lr!, {s13}
 800b9ba:	ed90 7a00 	vldr	s14, [r0]
 800b9be:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9c2:	3201      	adds	r2, #1
 800b9c4:	454a      	cmp	r2, r9
 800b9c6:	f1a0 0004 	sub.w	r0, r0, #4
 800b9ca:	ddf4      	ble.n	800b9b6 <__kernel_rem_pio2f+0x96>
 800b9cc:	ecea 7a01 	vstmia	sl!, {s15}
 800b9d0:	3304      	adds	r3, #4
 800b9d2:	f10c 0c01 	add.w	ip, ip, #1
 800b9d6:	e7d3      	b.n	800b980 <__kernel_rem_pio2f+0x60>
 800b9d8:	ab06      	add	r3, sp, #24
 800b9da:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b9de:	9304      	str	r3, [sp, #16]
 800b9e0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800b9e2:	eddf 8a92 	vldr	s17, [pc, #584]	; 800bc2c <__kernel_rem_pio2f+0x30c>
 800b9e6:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800bc28 <__kernel_rem_pio2f+0x308>
 800b9ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b9ee:	9303      	str	r3, [sp, #12]
 800b9f0:	46ba      	mov	sl, r7
 800b9f2:	ab56      	add	r3, sp, #344	; 0x158
 800b9f4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b9f8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800b9fc:	ab06      	add	r3, sp, #24
 800b9fe:	4618      	mov	r0, r3
 800ba00:	4652      	mov	r2, sl
 800ba02:	2a00      	cmp	r2, #0
 800ba04:	dc51      	bgt.n	800baaa <__kernel_rem_pio2f+0x18a>
 800ba06:	4620      	mov	r0, r4
 800ba08:	9305      	str	r3, [sp, #20]
 800ba0a:	f000 fb7f 	bl	800c10c <scalbnf>
 800ba0e:	eeb0 8a40 	vmov.f32	s16, s0
 800ba12:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ba16:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ba1a:	f000 fb2f 	bl	800c07c <floorf>
 800ba1e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ba22:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ba26:	2c00      	cmp	r4, #0
 800ba28:	9b05      	ldr	r3, [sp, #20]
 800ba2a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ba2e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ba32:	edcd 7a00 	vstr	s15, [sp]
 800ba36:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ba3a:	dd4b      	ble.n	800bad4 <__kernel_rem_pio2f+0x1b4>
 800ba3c:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ba40:	aa06      	add	r2, sp, #24
 800ba42:	f1c4 0e08 	rsb	lr, r4, #8
 800ba46:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ba4a:	ee17 1a90 	vmov	r1, s15
 800ba4e:	fa42 f00e 	asr.w	r0, r2, lr
 800ba52:	4401      	add	r1, r0
 800ba54:	9100      	str	r1, [sp, #0]
 800ba56:	fa00 f00e 	lsl.w	r0, r0, lr
 800ba5a:	a906      	add	r1, sp, #24
 800ba5c:	1a12      	subs	r2, r2, r0
 800ba5e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ba62:	f1c4 0007 	rsb	r0, r4, #7
 800ba66:	fa42 fb00 	asr.w	fp, r2, r0
 800ba6a:	f1bb 0f00 	cmp.w	fp, #0
 800ba6e:	dd43      	ble.n	800baf8 <__kernel_rem_pio2f+0x1d8>
 800ba70:	9a00      	ldr	r2, [sp, #0]
 800ba72:	f04f 0e00 	mov.w	lr, #0
 800ba76:	3201      	adds	r2, #1
 800ba78:	9200      	str	r2, [sp, #0]
 800ba7a:	4670      	mov	r0, lr
 800ba7c:	45f2      	cmp	sl, lr
 800ba7e:	dc6c      	bgt.n	800bb5a <__kernel_rem_pio2f+0x23a>
 800ba80:	2c00      	cmp	r4, #0
 800ba82:	dd04      	ble.n	800ba8e <__kernel_rem_pio2f+0x16e>
 800ba84:	2c01      	cmp	r4, #1
 800ba86:	d079      	beq.n	800bb7c <__kernel_rem_pio2f+0x25c>
 800ba88:	2c02      	cmp	r4, #2
 800ba8a:	f000 8082 	beq.w	800bb92 <__kernel_rem_pio2f+0x272>
 800ba8e:	f1bb 0f02 	cmp.w	fp, #2
 800ba92:	d131      	bne.n	800baf8 <__kernel_rem_pio2f+0x1d8>
 800ba94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba98:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ba9c:	b360      	cbz	r0, 800baf8 <__kernel_rem_pio2f+0x1d8>
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 fb34 	bl	800c10c <scalbnf>
 800baa4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800baa8:	e026      	b.n	800baf8 <__kernel_rem_pio2f+0x1d8>
 800baaa:	ee60 7a28 	vmul.f32	s15, s0, s17
 800baae:	3a01      	subs	r2, #1
 800bab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bab4:	a942      	add	r1, sp, #264	; 0x108
 800bab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800baba:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800babe:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bac2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bac6:	eca0 0a01 	vstmia	r0!, {s0}
 800baca:	ed9c 0a00 	vldr	s0, [ip]
 800bace:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bad2:	e796      	b.n	800ba02 <__kernel_rem_pio2f+0xe2>
 800bad4:	d107      	bne.n	800bae6 <__kernel_rem_pio2f+0x1c6>
 800bad6:	f10a 32ff 	add.w	r2, sl, #4294967295
 800bada:	a906      	add	r1, sp, #24
 800badc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bae0:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800bae4:	e7c1      	b.n	800ba6a <__kernel_rem_pio2f+0x14a>
 800bae6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800baea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800baee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf2:	da2f      	bge.n	800bb54 <__kernel_rem_pio2f+0x234>
 800baf4:	f04f 0b00 	mov.w	fp, #0
 800baf8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb00:	f040 8098 	bne.w	800bc34 <__kernel_rem_pio2f+0x314>
 800bb04:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bb08:	469c      	mov	ip, r3
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	45bc      	cmp	ip, r7
 800bb0e:	da48      	bge.n	800bba2 <__kernel_rem_pio2f+0x282>
 800bb10:	2a00      	cmp	r2, #0
 800bb12:	d05f      	beq.n	800bbd4 <__kernel_rem_pio2f+0x2b4>
 800bb14:	aa06      	add	r2, sp, #24
 800bb16:	3c08      	subs	r4, #8
 800bb18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bb1c:	2900      	cmp	r1, #0
 800bb1e:	d07d      	beq.n	800bc1c <__kernel_rem_pio2f+0x2fc>
 800bb20:	4620      	mov	r0, r4
 800bb22:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bb26:	9301      	str	r3, [sp, #4]
 800bb28:	f000 faf0 	bl	800c10c <scalbnf>
 800bb2c:	9b01      	ldr	r3, [sp, #4]
 800bb2e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800bc2c <__kernel_rem_pio2f+0x30c>
 800bb32:	4619      	mov	r1, r3
 800bb34:	2900      	cmp	r1, #0
 800bb36:	f280 80af 	bge.w	800bc98 <__kernel_rem_pio2f+0x378>
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	2400      	movs	r4, #0
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	f2c0 80d0 	blt.w	800bce4 <__kernel_rem_pio2f+0x3c4>
 800bb44:	a942      	add	r1, sp, #264	; 0x108
 800bb46:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800bb4a:	4a36      	ldr	r2, [pc, #216]	; (800bc24 <__kernel_rem_pio2f+0x304>)
 800bb4c:	eddf 7a38 	vldr	s15, [pc, #224]	; 800bc30 <__kernel_rem_pio2f+0x310>
 800bb50:	2100      	movs	r1, #0
 800bb52:	e0bb      	b.n	800bccc <__kernel_rem_pio2f+0x3ac>
 800bb54:	f04f 0b02 	mov.w	fp, #2
 800bb58:	e78a      	b.n	800ba70 <__kernel_rem_pio2f+0x150>
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	b948      	cbnz	r0, 800bb72 <__kernel_rem_pio2f+0x252>
 800bb5e:	b11a      	cbz	r2, 800bb68 <__kernel_rem_pio2f+0x248>
 800bb60:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f10e 0e01 	add.w	lr, lr, #1
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	4610      	mov	r0, r2
 800bb70:	e784      	b.n	800ba7c <__kernel_rem_pio2f+0x15c>
 800bb72:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800bb76:	601a      	str	r2, [r3, #0]
 800bb78:	4602      	mov	r2, r0
 800bb7a:	e7f5      	b.n	800bb68 <__kernel_rem_pio2f+0x248>
 800bb7c:	f10a 3cff 	add.w	ip, sl, #4294967295
 800bb80:	ab06      	add	r3, sp, #24
 800bb82:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb8a:	aa06      	add	r2, sp, #24
 800bb8c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800bb90:	e77d      	b.n	800ba8e <__kernel_rem_pio2f+0x16e>
 800bb92:	f10a 3cff 	add.w	ip, sl, #4294967295
 800bb96:	ab06      	add	r3, sp, #24
 800bb98:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bb9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bba0:	e7f3      	b.n	800bb8a <__kernel_rem_pio2f+0x26a>
 800bba2:	a906      	add	r1, sp, #24
 800bba4:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800bba8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bbac:	4302      	orrs	r2, r0
 800bbae:	e7ad      	b.n	800bb0c <__kernel_rem_pio2f+0x1ec>
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bbb6:	2a00      	cmp	r2, #0
 800bbb8:	d0fa      	beq.n	800bbb0 <__kernel_rem_pio2f+0x290>
 800bbba:	a91a      	add	r1, sp, #104	; 0x68
 800bbbc:	eb0a 0208 	add.w	r2, sl, r8
 800bbc0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bbc4:	f10a 0301 	add.w	r3, sl, #1
 800bbc8:	eb0a 0100 	add.w	r1, sl, r0
 800bbcc:	4299      	cmp	r1, r3
 800bbce:	da04      	bge.n	800bbda <__kernel_rem_pio2f+0x2ba>
 800bbd0:	468a      	mov	sl, r1
 800bbd2:	e70e      	b.n	800b9f2 <__kernel_rem_pio2f+0xd2>
 800bbd4:	9b04      	ldr	r3, [sp, #16]
 800bbd6:	2001      	movs	r0, #1
 800bbd8:	e7eb      	b.n	800bbb2 <__kernel_rem_pio2f+0x292>
 800bbda:	9803      	ldr	r0, [sp, #12]
 800bbdc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800bbe0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800bbe4:	9000      	str	r0, [sp, #0]
 800bbe6:	ee07 0a90 	vmov	s15, r0
 800bbea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbee:	2000      	movs	r0, #0
 800bbf0:	ece2 7a01 	vstmia	r2!, {s15}
 800bbf4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800bc30 <__kernel_rem_pio2f+0x310>
 800bbf8:	4696      	mov	lr, r2
 800bbfa:	4548      	cmp	r0, r9
 800bbfc:	dd06      	ble.n	800bc0c <__kernel_rem_pio2f+0x2ec>
 800bbfe:	a842      	add	r0, sp, #264	; 0x108
 800bc00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800bc04:	edc0 7a00 	vstr	s15, [r0]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	e7df      	b.n	800bbcc <__kernel_rem_pio2f+0x2ac>
 800bc0c:	ecfc 6a01 	vldmia	ip!, {s13}
 800bc10:	ed3e 7a01 	vldmdb	lr!, {s14}
 800bc14:	3001      	adds	r0, #1
 800bc16:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bc1a:	e7ee      	b.n	800bbfa <__kernel_rem_pio2f+0x2da>
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	e779      	b.n	800bb14 <__kernel_rem_pio2f+0x1f4>
 800bc20:	0800d690 	.word	0x0800d690
 800bc24:	0800d664 	.word	0x0800d664
 800bc28:	43800000 	.word	0x43800000
 800bc2c:	3b800000 	.word	0x3b800000
 800bc30:	00000000 	.word	0x00000000
 800bc34:	9b02      	ldr	r3, [sp, #8]
 800bc36:	eeb0 0a48 	vmov.f32	s0, s16
 800bc3a:	1b98      	subs	r0, r3, r6
 800bc3c:	f000 fa66 	bl	800c10c <scalbnf>
 800bc40:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800bc28 <__kernel_rem_pio2f+0x308>
 800bc44:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4c:	db1b      	blt.n	800bc86 <__kernel_rem_pio2f+0x366>
 800bc4e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bc2c <__kernel_rem_pio2f+0x30c>
 800bc52:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bc56:	aa06      	add	r2, sp, #24
 800bc58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc5c:	a906      	add	r1, sp, #24
 800bc5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc62:	3408      	adds	r4, #8
 800bc64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bc68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bc6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bc70:	ee10 3a10 	vmov	r3, s0
 800bc74:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800bc78:	ee17 2a90 	vmov	r2, s15
 800bc7c:	f10a 0301 	add.w	r3, sl, #1
 800bc80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bc84:	e74c      	b.n	800bb20 <__kernel_rem_pio2f+0x200>
 800bc86:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bc8a:	aa06      	add	r2, sp, #24
 800bc8c:	ee10 3a10 	vmov	r3, s0
 800bc90:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800bc94:	4653      	mov	r3, sl
 800bc96:	e743      	b.n	800bb20 <__kernel_rem_pio2f+0x200>
 800bc98:	aa42      	add	r2, sp, #264	; 0x108
 800bc9a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800bc9e:	aa06      	add	r2, sp, #24
 800bca0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bca4:	9201      	str	r2, [sp, #4]
 800bca6:	ee07 2a90 	vmov	s15, r2
 800bcaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcae:	3901      	subs	r1, #1
 800bcb0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bcb4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bcb8:	edc0 7a00 	vstr	s15, [r0]
 800bcbc:	e73a      	b.n	800bb34 <__kernel_rem_pio2f+0x214>
 800bcbe:	ecf2 6a01 	vldmia	r2!, {s13}
 800bcc2:	ecb6 7a01 	vldmia	r6!, {s14}
 800bcc6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bcca:	3101      	adds	r1, #1
 800bccc:	42b9      	cmp	r1, r7
 800bcce:	dc01      	bgt.n	800bcd4 <__kernel_rem_pio2f+0x3b4>
 800bcd0:	428c      	cmp	r4, r1
 800bcd2:	daf4      	bge.n	800bcbe <__kernel_rem_pio2f+0x39e>
 800bcd4:	aa56      	add	r2, sp, #344	; 0x158
 800bcd6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800bcda:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800bcde:	3801      	subs	r0, #1
 800bce0:	3401      	adds	r4, #1
 800bce2:	e72c      	b.n	800bb3e <__kernel_rem_pio2f+0x21e>
 800bce4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800bce6:	2a02      	cmp	r2, #2
 800bce8:	dc0a      	bgt.n	800bd00 <__kernel_rem_pio2f+0x3e0>
 800bcea:	2a00      	cmp	r2, #0
 800bcec:	dc61      	bgt.n	800bdb2 <__kernel_rem_pio2f+0x492>
 800bcee:	d03c      	beq.n	800bd6a <__kernel_rem_pio2f+0x44a>
 800bcf0:	9b00      	ldr	r3, [sp, #0]
 800bcf2:	f003 0007 	and.w	r0, r3, #7
 800bcf6:	b057      	add	sp, #348	; 0x15c
 800bcf8:	ecbd 8b04 	vpop	{d8-d9}
 800bcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd00:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800bd02:	2a03      	cmp	r2, #3
 800bd04:	d1f4      	bne.n	800bcf0 <__kernel_rem_pio2f+0x3d0>
 800bd06:	aa2e      	add	r2, sp, #184	; 0xb8
 800bd08:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800bd0c:	4608      	mov	r0, r1
 800bd0e:	461c      	mov	r4, r3
 800bd10:	2c00      	cmp	r4, #0
 800bd12:	f1a0 0004 	sub.w	r0, r0, #4
 800bd16:	dc59      	bgt.n	800bdcc <__kernel_rem_pio2f+0x4ac>
 800bd18:	4618      	mov	r0, r3
 800bd1a:	2801      	cmp	r0, #1
 800bd1c:	f1a1 0104 	sub.w	r1, r1, #4
 800bd20:	dc64      	bgt.n	800bdec <__kernel_rem_pio2f+0x4cc>
 800bd22:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800bc30 <__kernel_rem_pio2f+0x310>
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	dc70      	bgt.n	800be0c <__kernel_rem_pio2f+0x4ec>
 800bd2a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800bd2e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800bd32:	f1bb 0f00 	cmp.w	fp, #0
 800bd36:	d172      	bne.n	800be1e <__kernel_rem_pio2f+0x4fe>
 800bd38:	edc5 6a00 	vstr	s13, [r5]
 800bd3c:	ed85 7a01 	vstr	s14, [r5, #4]
 800bd40:	edc5 7a02 	vstr	s15, [r5, #8]
 800bd44:	e7d4      	b.n	800bcf0 <__kernel_rem_pio2f+0x3d0>
 800bd46:	aa2e      	add	r2, sp, #184	; 0xb8
 800bd48:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800bd4c:	ed91 7a00 	vldr	s14, [r1]
 800bd50:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd54:	3b01      	subs	r3, #1
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	daf5      	bge.n	800bd46 <__kernel_rem_pio2f+0x426>
 800bd5a:	f1bb 0f00 	cmp.w	fp, #0
 800bd5e:	d001      	beq.n	800bd64 <__kernel_rem_pio2f+0x444>
 800bd60:	eef1 7a67 	vneg.f32	s15, s15
 800bd64:	edc5 7a00 	vstr	s15, [r5]
 800bd68:	e7c2      	b.n	800bcf0 <__kernel_rem_pio2f+0x3d0>
 800bd6a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800bc30 <__kernel_rem_pio2f+0x310>
 800bd6e:	e7f2      	b.n	800bd56 <__kernel_rem_pio2f+0x436>
 800bd70:	aa2e      	add	r2, sp, #184	; 0xb8
 800bd72:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800bd76:	edd0 7a00 	vldr	s15, [r0]
 800bd7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bd7e:	3901      	subs	r1, #1
 800bd80:	2900      	cmp	r1, #0
 800bd82:	daf5      	bge.n	800bd70 <__kernel_rem_pio2f+0x450>
 800bd84:	f1bb 0f00 	cmp.w	fp, #0
 800bd88:	d017      	beq.n	800bdba <__kernel_rem_pio2f+0x49a>
 800bd8a:	eef1 7a47 	vneg.f32	s15, s14
 800bd8e:	edc5 7a00 	vstr	s15, [r5]
 800bd92:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800bd96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd9a:	a82f      	add	r0, sp, #188	; 0xbc
 800bd9c:	2101      	movs	r1, #1
 800bd9e:	428b      	cmp	r3, r1
 800bda0:	da0e      	bge.n	800bdc0 <__kernel_rem_pio2f+0x4a0>
 800bda2:	f1bb 0f00 	cmp.w	fp, #0
 800bda6:	d001      	beq.n	800bdac <__kernel_rem_pio2f+0x48c>
 800bda8:	eef1 7a67 	vneg.f32	s15, s15
 800bdac:	edc5 7a01 	vstr	s15, [r5, #4]
 800bdb0:	e79e      	b.n	800bcf0 <__kernel_rem_pio2f+0x3d0>
 800bdb2:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800bc30 <__kernel_rem_pio2f+0x310>
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	e7e2      	b.n	800bd80 <__kernel_rem_pio2f+0x460>
 800bdba:	eef0 7a47 	vmov.f32	s15, s14
 800bdbe:	e7e6      	b.n	800bd8e <__kernel_rem_pio2f+0x46e>
 800bdc0:	ecb0 7a01 	vldmia	r0!, {s14}
 800bdc4:	3101      	adds	r1, #1
 800bdc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdca:	e7e8      	b.n	800bd9e <__kernel_rem_pio2f+0x47e>
 800bdcc:	edd0 7a00 	vldr	s15, [r0]
 800bdd0:	edd0 6a01 	vldr	s13, [r0, #4]
 800bdd4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bdd8:	3c01      	subs	r4, #1
 800bdda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdde:	ed80 7a00 	vstr	s14, [r0]
 800bde2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bde6:	edc0 7a01 	vstr	s15, [r0, #4]
 800bdea:	e791      	b.n	800bd10 <__kernel_rem_pio2f+0x3f0>
 800bdec:	edd1 7a00 	vldr	s15, [r1]
 800bdf0:	edd1 6a01 	vldr	s13, [r1, #4]
 800bdf4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bdf8:	3801      	subs	r0, #1
 800bdfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdfe:	ed81 7a00 	vstr	s14, [r1]
 800be02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be06:	edc1 7a01 	vstr	s15, [r1, #4]
 800be0a:	e786      	b.n	800bd1a <__kernel_rem_pio2f+0x3fa>
 800be0c:	aa2e      	add	r2, sp, #184	; 0xb8
 800be0e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800be12:	ed91 7a00 	vldr	s14, [r1]
 800be16:	3b01      	subs	r3, #1
 800be18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be1c:	e783      	b.n	800bd26 <__kernel_rem_pio2f+0x406>
 800be1e:	eef1 6a66 	vneg.f32	s13, s13
 800be22:	eeb1 7a47 	vneg.f32	s14, s14
 800be26:	edc5 6a00 	vstr	s13, [r5]
 800be2a:	ed85 7a01 	vstr	s14, [r5, #4]
 800be2e:	eef1 7a67 	vneg.f32	s15, s15
 800be32:	e785      	b.n	800bd40 <__kernel_rem_pio2f+0x420>

0800be34 <__kernel_sinf>:
 800be34:	ee10 3a10 	vmov	r3, s0
 800be38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800be40:	da04      	bge.n	800be4c <__kernel_sinf+0x18>
 800be42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800be46:	ee17 3a90 	vmov	r3, s15
 800be4a:	b35b      	cbz	r3, 800bea4 <__kernel_sinf+0x70>
 800be4c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800be50:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bea8 <__kernel_sinf+0x74>
 800be54:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800beac <__kernel_sinf+0x78>
 800be58:	eea7 6a27 	vfma.f32	s12, s14, s15
 800be5c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800beb0 <__kernel_sinf+0x7c>
 800be60:	eee6 7a07 	vfma.f32	s15, s12, s14
 800be64:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800beb4 <__kernel_sinf+0x80>
 800be68:	eea7 6a87 	vfma.f32	s12, s15, s14
 800be6c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800beb8 <__kernel_sinf+0x84>
 800be70:	ee60 6a07 	vmul.f32	s13, s0, s14
 800be74:	eee6 7a07 	vfma.f32	s15, s12, s14
 800be78:	b930      	cbnz	r0, 800be88 <__kernel_sinf+0x54>
 800be7a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800bebc <__kernel_sinf+0x88>
 800be7e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800be82:	eea6 0a26 	vfma.f32	s0, s12, s13
 800be86:	4770      	bx	lr
 800be88:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800be8c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800be90:	eee0 7a86 	vfma.f32	s15, s1, s12
 800be94:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800be98:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bec0 <__kernel_sinf+0x8c>
 800be9c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bea0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	2f2ec9d3 	.word	0x2f2ec9d3
 800beac:	b2d72f34 	.word	0xb2d72f34
 800beb0:	3638ef1b 	.word	0x3638ef1b
 800beb4:	b9500d01 	.word	0xb9500d01
 800beb8:	3c088889 	.word	0x3c088889
 800bebc:	be2aaaab 	.word	0xbe2aaaab
 800bec0:	3e2aaaab 	.word	0x3e2aaaab

0800bec4 <atanf>:
 800bec4:	b538      	push	{r3, r4, r5, lr}
 800bec6:	ee10 5a10 	vmov	r5, s0
 800beca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800bece:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800bed2:	eef0 7a40 	vmov.f32	s15, s0
 800bed6:	db10      	blt.n	800befa <atanf+0x36>
 800bed8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800bedc:	dd04      	ble.n	800bee8 <atanf+0x24>
 800bede:	ee70 7a00 	vadd.f32	s15, s0, s0
 800bee2:	eeb0 0a67 	vmov.f32	s0, s15
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c020 <atanf+0x15c>
 800beec:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c024 <atanf+0x160>
 800bef0:	2d00      	cmp	r5, #0
 800bef2:	bfd8      	it	le
 800bef4:	eef0 7a40 	vmovle.f32	s15, s0
 800bef8:	e7f3      	b.n	800bee2 <atanf+0x1e>
 800befa:	4b4b      	ldr	r3, [pc, #300]	; (800c028 <atanf+0x164>)
 800befc:	429c      	cmp	r4, r3
 800befe:	dc10      	bgt.n	800bf22 <atanf+0x5e>
 800bf00:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800bf04:	da0a      	bge.n	800bf1c <atanf+0x58>
 800bf06:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c02c <atanf+0x168>
 800bf0a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800bf0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf12:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800bf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1a:	dce2      	bgt.n	800bee2 <atanf+0x1e>
 800bf1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf20:	e013      	b.n	800bf4a <atanf+0x86>
 800bf22:	f000 f8a3 	bl	800c06c <fabsf>
 800bf26:	4b42      	ldr	r3, [pc, #264]	; (800c030 <atanf+0x16c>)
 800bf28:	429c      	cmp	r4, r3
 800bf2a:	dc4f      	bgt.n	800bfcc <atanf+0x108>
 800bf2c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800bf30:	429c      	cmp	r4, r3
 800bf32:	dc41      	bgt.n	800bfb8 <atanf+0xf4>
 800bf34:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800bf38:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bf3c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bf40:	2300      	movs	r3, #0
 800bf42:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bf46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800bf50:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c034 <atanf+0x170>
 800bf54:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800c038 <atanf+0x174>
 800bf58:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c03c <atanf+0x178>
 800bf5c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800c040 <atanf+0x17c>
 800bf60:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bf64:	eea7 6a25 	vfma.f32	s12, s14, s11
 800bf68:	eddf 5a36 	vldr	s11, [pc, #216]	; 800c044 <atanf+0x180>
 800bf6c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bf70:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800c048 <atanf+0x184>
 800bf74:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bf78:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c04c <atanf+0x188>
 800bf7c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bf80:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800c050 <atanf+0x18c>
 800bf84:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bf88:	eddf 5a32 	vldr	s11, [pc, #200]	; 800c054 <atanf+0x190>
 800bf8c:	eee7 5a05 	vfma.f32	s11, s14, s10
 800bf90:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800c058 <atanf+0x194>
 800bf94:	eea5 5a87 	vfma.f32	s10, s11, s14
 800bf98:	eddf 5a30 	vldr	s11, [pc, #192]	; 800c05c <atanf+0x198>
 800bf9c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800bfa0:	eea5 0a87 	vfma.f32	s0, s11, s14
 800bfa4:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bfa8:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bfac:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bfb0:	d121      	bne.n	800bff6 <atanf+0x132>
 800bfb2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bfb6:	e794      	b.n	800bee2 <atanf+0x1e>
 800bfb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bfbc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bfc0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bfca:	e7be      	b.n	800bf4a <atanf+0x86>
 800bfcc:	4b24      	ldr	r3, [pc, #144]	; (800c060 <atanf+0x19c>)
 800bfce:	429c      	cmp	r4, r3
 800bfd0:	dc0b      	bgt.n	800bfea <atanf+0x126>
 800bfd2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800bfd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfda:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bfde:	2302      	movs	r3, #2
 800bfe0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bfe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfe8:	e7af      	b.n	800bf4a <atanf+0x86>
 800bfea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bfee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bff2:	2303      	movs	r3, #3
 800bff4:	e7a9      	b.n	800bf4a <atanf+0x86>
 800bff6:	4a1b      	ldr	r2, [pc, #108]	; (800c064 <atanf+0x1a0>)
 800bff8:	491b      	ldr	r1, [pc, #108]	; (800c068 <atanf+0x1a4>)
 800bffa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bffe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c002:	ed93 7a00 	vldr	s14, [r3]
 800c006:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c00a:	2d00      	cmp	r5, #0
 800c00c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c010:	ed92 0a00 	vldr	s0, [r2]
 800c014:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c018:	bfb8      	it	lt
 800c01a:	eef1 7a67 	vneglt.f32	s15, s15
 800c01e:	e760      	b.n	800bee2 <atanf+0x1e>
 800c020:	3fc90fdb 	.word	0x3fc90fdb
 800c024:	bfc90fdb 	.word	0xbfc90fdb
 800c028:	3edfffff 	.word	0x3edfffff
 800c02c:	7149f2ca 	.word	0x7149f2ca
 800c030:	3f97ffff 	.word	0x3f97ffff
 800c034:	3c8569d7 	.word	0x3c8569d7
 800c038:	3d4bda59 	.word	0x3d4bda59
 800c03c:	bd15a221 	.word	0xbd15a221
 800c040:	be4ccccd 	.word	0xbe4ccccd
 800c044:	3d886b35 	.word	0x3d886b35
 800c048:	3dba2e6e 	.word	0x3dba2e6e
 800c04c:	3e124925 	.word	0x3e124925
 800c050:	3eaaaaab 	.word	0x3eaaaaab
 800c054:	bd6ef16b 	.word	0xbd6ef16b
 800c058:	bd9d8795 	.word	0xbd9d8795
 800c05c:	bde38e38 	.word	0xbde38e38
 800c060:	401bffff 	.word	0x401bffff
 800c064:	0800d69c 	.word	0x0800d69c
 800c068:	0800d6ac 	.word	0x0800d6ac

0800c06c <fabsf>:
 800c06c:	ee10 3a10 	vmov	r3, s0
 800c070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c074:	ee00 3a10 	vmov	s0, r3
 800c078:	4770      	bx	lr
	...

0800c07c <floorf>:
 800c07c:	ee10 3a10 	vmov	r3, s0
 800c080:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c084:	3a7f      	subs	r2, #127	; 0x7f
 800c086:	2a16      	cmp	r2, #22
 800c088:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c08c:	dc2a      	bgt.n	800c0e4 <floorf+0x68>
 800c08e:	2a00      	cmp	r2, #0
 800c090:	da11      	bge.n	800c0b6 <floorf+0x3a>
 800c092:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c0f4 <floorf+0x78>
 800c096:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c09a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a2:	dd05      	ble.n	800c0b0 <floorf+0x34>
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	da23      	bge.n	800c0f0 <floorf+0x74>
 800c0a8:	4a13      	ldr	r2, [pc, #76]	; (800c0f8 <floorf+0x7c>)
 800c0aa:	2900      	cmp	r1, #0
 800c0ac:	bf18      	it	ne
 800c0ae:	4613      	movne	r3, r2
 800c0b0:	ee00 3a10 	vmov	s0, r3
 800c0b4:	4770      	bx	lr
 800c0b6:	4911      	ldr	r1, [pc, #68]	; (800c0fc <floorf+0x80>)
 800c0b8:	4111      	asrs	r1, r2
 800c0ba:	420b      	tst	r3, r1
 800c0bc:	d0fa      	beq.n	800c0b4 <floorf+0x38>
 800c0be:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c0f4 <floorf+0x78>
 800c0c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c0c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ce:	ddef      	ble.n	800c0b0 <floorf+0x34>
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	bfbe      	ittt	lt
 800c0d4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c0d8:	fa40 f202 	asrlt.w	r2, r0, r2
 800c0dc:	189b      	addlt	r3, r3, r2
 800c0de:	ea23 0301 	bic.w	r3, r3, r1
 800c0e2:	e7e5      	b.n	800c0b0 <floorf+0x34>
 800c0e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c0e8:	d3e4      	bcc.n	800c0b4 <floorf+0x38>
 800c0ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c0ee:	4770      	bx	lr
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e7dd      	b.n	800c0b0 <floorf+0x34>
 800c0f4:	7149f2ca 	.word	0x7149f2ca
 800c0f8:	bf800000 	.word	0xbf800000
 800c0fc:	007fffff 	.word	0x007fffff

0800c100 <nanf>:
 800c100:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c108 <nanf+0x8>
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop
 800c108:	7fc00000 	.word	0x7fc00000

0800c10c <scalbnf>:
 800c10c:	ee10 3a10 	vmov	r3, s0
 800c110:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c114:	d025      	beq.n	800c162 <scalbnf+0x56>
 800c116:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c11a:	d302      	bcc.n	800c122 <scalbnf+0x16>
 800c11c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c120:	4770      	bx	lr
 800c122:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c126:	d122      	bne.n	800c16e <scalbnf+0x62>
 800c128:	4b2a      	ldr	r3, [pc, #168]	; (800c1d4 <scalbnf+0xc8>)
 800c12a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c1d8 <scalbnf+0xcc>
 800c12e:	4298      	cmp	r0, r3
 800c130:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c134:	db16      	blt.n	800c164 <scalbnf+0x58>
 800c136:	ee10 3a10 	vmov	r3, s0
 800c13a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c13e:	3a19      	subs	r2, #25
 800c140:	4402      	add	r2, r0
 800c142:	2afe      	cmp	r2, #254	; 0xfe
 800c144:	dd15      	ble.n	800c172 <scalbnf+0x66>
 800c146:	ee10 3a10 	vmov	r3, s0
 800c14a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c1dc <scalbnf+0xd0>
 800c14e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c1e0 <scalbnf+0xd4>
 800c152:	2b00      	cmp	r3, #0
 800c154:	eeb0 7a67 	vmov.f32	s14, s15
 800c158:	bfb8      	it	lt
 800c15a:	eef0 7a66 	vmovlt.f32	s15, s13
 800c15e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c162:	4770      	bx	lr
 800c164:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c1e4 <scalbnf+0xd8>
 800c168:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c16c:	4770      	bx	lr
 800c16e:	0dd2      	lsrs	r2, r2, #23
 800c170:	e7e6      	b.n	800c140 <scalbnf+0x34>
 800c172:	2a00      	cmp	r2, #0
 800c174:	dd06      	ble.n	800c184 <scalbnf+0x78>
 800c176:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c17a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c17e:	ee00 3a10 	vmov	s0, r3
 800c182:	4770      	bx	lr
 800c184:	f112 0f16 	cmn.w	r2, #22
 800c188:	da1a      	bge.n	800c1c0 <scalbnf+0xb4>
 800c18a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c18e:	4298      	cmp	r0, r3
 800c190:	ee10 3a10 	vmov	r3, s0
 800c194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c198:	dd0a      	ble.n	800c1b0 <scalbnf+0xa4>
 800c19a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c1dc <scalbnf+0xd0>
 800c19e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c1e0 <scalbnf+0xd4>
 800c1a2:	eef0 7a40 	vmov.f32	s15, s0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	bf18      	it	ne
 800c1aa:	eeb0 0a47 	vmovne.f32	s0, s14
 800c1ae:	e7db      	b.n	800c168 <scalbnf+0x5c>
 800c1b0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c1e4 <scalbnf+0xd8>
 800c1b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c1e8 <scalbnf+0xdc>
 800c1b8:	eef0 7a40 	vmov.f32	s15, s0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	e7f3      	b.n	800c1a8 <scalbnf+0x9c>
 800c1c0:	3219      	adds	r2, #25
 800c1c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1c6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c1ca:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c1ec <scalbnf+0xe0>
 800c1ce:	ee07 3a10 	vmov	s14, r3
 800c1d2:	e7c4      	b.n	800c15e <scalbnf+0x52>
 800c1d4:	ffff3cb0 	.word	0xffff3cb0
 800c1d8:	4c000000 	.word	0x4c000000
 800c1dc:	7149f2ca 	.word	0x7149f2ca
 800c1e0:	f149f2ca 	.word	0xf149f2ca
 800c1e4:	0da24260 	.word	0x0da24260
 800c1e8:	8da24260 	.word	0x8da24260
 800c1ec:	33000000 	.word	0x33000000

0800c1f0 <__errno>:
 800c1f0:	4b01      	ldr	r3, [pc, #4]	; (800c1f8 <__errno+0x8>)
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	2000004c 	.word	0x2000004c

0800c1fc <__libc_init_array>:
 800c1fc:	b570      	push	{r4, r5, r6, lr}
 800c1fe:	4d0d      	ldr	r5, [pc, #52]	; (800c234 <__libc_init_array+0x38>)
 800c200:	4c0d      	ldr	r4, [pc, #52]	; (800c238 <__libc_init_array+0x3c>)
 800c202:	1b64      	subs	r4, r4, r5
 800c204:	10a4      	asrs	r4, r4, #2
 800c206:	2600      	movs	r6, #0
 800c208:	42a6      	cmp	r6, r4
 800c20a:	d109      	bne.n	800c220 <__libc_init_array+0x24>
 800c20c:	4d0b      	ldr	r5, [pc, #44]	; (800c23c <__libc_init_array+0x40>)
 800c20e:	4c0c      	ldr	r4, [pc, #48]	; (800c240 <__libc_init_array+0x44>)
 800c210:	f001 f822 	bl	800d258 <_init>
 800c214:	1b64      	subs	r4, r4, r5
 800c216:	10a4      	asrs	r4, r4, #2
 800c218:	2600      	movs	r6, #0
 800c21a:	42a6      	cmp	r6, r4
 800c21c:	d105      	bne.n	800c22a <__libc_init_array+0x2e>
 800c21e:	bd70      	pop	{r4, r5, r6, pc}
 800c220:	f855 3b04 	ldr.w	r3, [r5], #4
 800c224:	4798      	blx	r3
 800c226:	3601      	adds	r6, #1
 800c228:	e7ee      	b.n	800c208 <__libc_init_array+0xc>
 800c22a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c22e:	4798      	blx	r3
 800c230:	3601      	adds	r6, #1
 800c232:	e7f2      	b.n	800c21a <__libc_init_array+0x1e>
 800c234:	0800d810 	.word	0x0800d810
 800c238:	0800d810 	.word	0x0800d810
 800c23c:	0800d810 	.word	0x0800d810
 800c240:	0800d814 	.word	0x0800d814

0800c244 <memset>:
 800c244:	4402      	add	r2, r0
 800c246:	4603      	mov	r3, r0
 800c248:	4293      	cmp	r3, r2
 800c24a:	d100      	bne.n	800c24e <memset+0xa>
 800c24c:	4770      	bx	lr
 800c24e:	f803 1b01 	strb.w	r1, [r3], #1
 800c252:	e7f9      	b.n	800c248 <memset+0x4>

0800c254 <rand>:
 800c254:	4b17      	ldr	r3, [pc, #92]	; (800c2b4 <rand+0x60>)
 800c256:	b510      	push	{r4, lr}
 800c258:	681c      	ldr	r4, [r3, #0]
 800c25a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c25c:	b9b3      	cbnz	r3, 800c28c <rand+0x38>
 800c25e:	2018      	movs	r0, #24
 800c260:	f000 f868 	bl	800c334 <malloc>
 800c264:	63a0      	str	r0, [r4, #56]	; 0x38
 800c266:	b928      	cbnz	r0, 800c274 <rand+0x20>
 800c268:	4602      	mov	r2, r0
 800c26a:	4b13      	ldr	r3, [pc, #76]	; (800c2b8 <rand+0x64>)
 800c26c:	4813      	ldr	r0, [pc, #76]	; (800c2bc <rand+0x68>)
 800c26e:	214e      	movs	r1, #78	; 0x4e
 800c270:	f000 f830 	bl	800c2d4 <__assert_func>
 800c274:	4a12      	ldr	r2, [pc, #72]	; (800c2c0 <rand+0x6c>)
 800c276:	4b13      	ldr	r3, [pc, #76]	; (800c2c4 <rand+0x70>)
 800c278:	e9c0 2300 	strd	r2, r3, [r0]
 800c27c:	4b12      	ldr	r3, [pc, #72]	; (800c2c8 <rand+0x74>)
 800c27e:	6083      	str	r3, [r0, #8]
 800c280:	230b      	movs	r3, #11
 800c282:	8183      	strh	r3, [r0, #12]
 800c284:	2201      	movs	r2, #1
 800c286:	2300      	movs	r3, #0
 800c288:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c28c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c28e:	480f      	ldr	r0, [pc, #60]	; (800c2cc <rand+0x78>)
 800c290:	690a      	ldr	r2, [r1, #16]
 800c292:	694b      	ldr	r3, [r1, #20]
 800c294:	4c0e      	ldr	r4, [pc, #56]	; (800c2d0 <rand+0x7c>)
 800c296:	4350      	muls	r0, r2
 800c298:	fb04 0003 	mla	r0, r4, r3, r0
 800c29c:	fba2 3404 	umull	r3, r4, r2, r4
 800c2a0:	1c5a      	adds	r2, r3, #1
 800c2a2:	4404      	add	r4, r0
 800c2a4:	f144 0000 	adc.w	r0, r4, #0
 800c2a8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800c2ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c2b0:	bd10      	pop	{r4, pc}
 800c2b2:	bf00      	nop
 800c2b4:	2000004c 	.word	0x2000004c
 800c2b8:	0800d6c0 	.word	0x0800d6c0
 800c2bc:	0800d6d7 	.word	0x0800d6d7
 800c2c0:	abcd330e 	.word	0xabcd330e
 800c2c4:	e66d1234 	.word	0xe66d1234
 800c2c8:	0005deec 	.word	0x0005deec
 800c2cc:	5851f42d 	.word	0x5851f42d
 800c2d0:	4c957f2d 	.word	0x4c957f2d

0800c2d4 <__assert_func>:
 800c2d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2d6:	4614      	mov	r4, r2
 800c2d8:	461a      	mov	r2, r3
 800c2da:	4b09      	ldr	r3, [pc, #36]	; (800c300 <__assert_func+0x2c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4605      	mov	r5, r0
 800c2e0:	68d8      	ldr	r0, [r3, #12]
 800c2e2:	b14c      	cbz	r4, 800c2f8 <__assert_func+0x24>
 800c2e4:	4b07      	ldr	r3, [pc, #28]	; (800c304 <__assert_func+0x30>)
 800c2e6:	9100      	str	r1, [sp, #0]
 800c2e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2ec:	4906      	ldr	r1, [pc, #24]	; (800c308 <__assert_func+0x34>)
 800c2ee:	462b      	mov	r3, r5
 800c2f0:	f000 f80e 	bl	800c310 <fiprintf>
 800c2f4:	f000 fc8e 	bl	800cc14 <abort>
 800c2f8:	4b04      	ldr	r3, [pc, #16]	; (800c30c <__assert_func+0x38>)
 800c2fa:	461c      	mov	r4, r3
 800c2fc:	e7f3      	b.n	800c2e6 <__assert_func+0x12>
 800c2fe:	bf00      	nop
 800c300:	2000004c 	.word	0x2000004c
 800c304:	0800d736 	.word	0x0800d736
 800c308:	0800d743 	.word	0x0800d743
 800c30c:	0800d771 	.word	0x0800d771

0800c310 <fiprintf>:
 800c310:	b40e      	push	{r1, r2, r3}
 800c312:	b503      	push	{r0, r1, lr}
 800c314:	4601      	mov	r1, r0
 800c316:	ab03      	add	r3, sp, #12
 800c318:	4805      	ldr	r0, [pc, #20]	; (800c330 <fiprintf+0x20>)
 800c31a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c31e:	6800      	ldr	r0, [r0, #0]
 800c320:	9301      	str	r3, [sp, #4]
 800c322:	f000 f8e3 	bl	800c4ec <_vfiprintf_r>
 800c326:	b002      	add	sp, #8
 800c328:	f85d eb04 	ldr.w	lr, [sp], #4
 800c32c:	b003      	add	sp, #12
 800c32e:	4770      	bx	lr
 800c330:	2000004c 	.word	0x2000004c

0800c334 <malloc>:
 800c334:	4b02      	ldr	r3, [pc, #8]	; (800c340 <malloc+0xc>)
 800c336:	4601      	mov	r1, r0
 800c338:	6818      	ldr	r0, [r3, #0]
 800c33a:	f000 b853 	b.w	800c3e4 <_malloc_r>
 800c33e:	bf00      	nop
 800c340:	2000004c 	.word	0x2000004c

0800c344 <_free_r>:
 800c344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c346:	2900      	cmp	r1, #0
 800c348:	d048      	beq.n	800c3dc <_free_r+0x98>
 800c34a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c34e:	9001      	str	r0, [sp, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	f1a1 0404 	sub.w	r4, r1, #4
 800c356:	bfb8      	it	lt
 800c358:	18e4      	addlt	r4, r4, r3
 800c35a:	f000 fe81 	bl	800d060 <__malloc_lock>
 800c35e:	4a20      	ldr	r2, [pc, #128]	; (800c3e0 <_free_r+0x9c>)
 800c360:	9801      	ldr	r0, [sp, #4]
 800c362:	6813      	ldr	r3, [r2, #0]
 800c364:	4615      	mov	r5, r2
 800c366:	b933      	cbnz	r3, 800c376 <_free_r+0x32>
 800c368:	6063      	str	r3, [r4, #4]
 800c36a:	6014      	str	r4, [r2, #0]
 800c36c:	b003      	add	sp, #12
 800c36e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c372:	f000 be7b 	b.w	800d06c <__malloc_unlock>
 800c376:	42a3      	cmp	r3, r4
 800c378:	d90b      	bls.n	800c392 <_free_r+0x4e>
 800c37a:	6821      	ldr	r1, [r4, #0]
 800c37c:	1862      	adds	r2, r4, r1
 800c37e:	4293      	cmp	r3, r2
 800c380:	bf04      	itt	eq
 800c382:	681a      	ldreq	r2, [r3, #0]
 800c384:	685b      	ldreq	r3, [r3, #4]
 800c386:	6063      	str	r3, [r4, #4]
 800c388:	bf04      	itt	eq
 800c38a:	1852      	addeq	r2, r2, r1
 800c38c:	6022      	streq	r2, [r4, #0]
 800c38e:	602c      	str	r4, [r5, #0]
 800c390:	e7ec      	b.n	800c36c <_free_r+0x28>
 800c392:	461a      	mov	r2, r3
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	b10b      	cbz	r3, 800c39c <_free_r+0x58>
 800c398:	42a3      	cmp	r3, r4
 800c39a:	d9fa      	bls.n	800c392 <_free_r+0x4e>
 800c39c:	6811      	ldr	r1, [r2, #0]
 800c39e:	1855      	adds	r5, r2, r1
 800c3a0:	42a5      	cmp	r5, r4
 800c3a2:	d10b      	bne.n	800c3bc <_free_r+0x78>
 800c3a4:	6824      	ldr	r4, [r4, #0]
 800c3a6:	4421      	add	r1, r4
 800c3a8:	1854      	adds	r4, r2, r1
 800c3aa:	42a3      	cmp	r3, r4
 800c3ac:	6011      	str	r1, [r2, #0]
 800c3ae:	d1dd      	bne.n	800c36c <_free_r+0x28>
 800c3b0:	681c      	ldr	r4, [r3, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	6053      	str	r3, [r2, #4]
 800c3b6:	4421      	add	r1, r4
 800c3b8:	6011      	str	r1, [r2, #0]
 800c3ba:	e7d7      	b.n	800c36c <_free_r+0x28>
 800c3bc:	d902      	bls.n	800c3c4 <_free_r+0x80>
 800c3be:	230c      	movs	r3, #12
 800c3c0:	6003      	str	r3, [r0, #0]
 800c3c2:	e7d3      	b.n	800c36c <_free_r+0x28>
 800c3c4:	6825      	ldr	r5, [r4, #0]
 800c3c6:	1961      	adds	r1, r4, r5
 800c3c8:	428b      	cmp	r3, r1
 800c3ca:	bf04      	itt	eq
 800c3cc:	6819      	ldreq	r1, [r3, #0]
 800c3ce:	685b      	ldreq	r3, [r3, #4]
 800c3d0:	6063      	str	r3, [r4, #4]
 800c3d2:	bf04      	itt	eq
 800c3d4:	1949      	addeq	r1, r1, r5
 800c3d6:	6021      	streq	r1, [r4, #0]
 800c3d8:	6054      	str	r4, [r2, #4]
 800c3da:	e7c7      	b.n	800c36c <_free_r+0x28>
 800c3dc:	b003      	add	sp, #12
 800c3de:	bd30      	pop	{r4, r5, pc}
 800c3e0:	20000e10 	.word	0x20000e10

0800c3e4 <_malloc_r>:
 800c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e6:	1ccd      	adds	r5, r1, #3
 800c3e8:	f025 0503 	bic.w	r5, r5, #3
 800c3ec:	3508      	adds	r5, #8
 800c3ee:	2d0c      	cmp	r5, #12
 800c3f0:	bf38      	it	cc
 800c3f2:	250c      	movcc	r5, #12
 800c3f4:	2d00      	cmp	r5, #0
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	db01      	blt.n	800c3fe <_malloc_r+0x1a>
 800c3fa:	42a9      	cmp	r1, r5
 800c3fc:	d903      	bls.n	800c406 <_malloc_r+0x22>
 800c3fe:	230c      	movs	r3, #12
 800c400:	6033      	str	r3, [r6, #0]
 800c402:	2000      	movs	r0, #0
 800c404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c406:	f000 fe2b 	bl	800d060 <__malloc_lock>
 800c40a:	4921      	ldr	r1, [pc, #132]	; (800c490 <_malloc_r+0xac>)
 800c40c:	680a      	ldr	r2, [r1, #0]
 800c40e:	4614      	mov	r4, r2
 800c410:	b99c      	cbnz	r4, 800c43a <_malloc_r+0x56>
 800c412:	4f20      	ldr	r7, [pc, #128]	; (800c494 <_malloc_r+0xb0>)
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	b923      	cbnz	r3, 800c422 <_malloc_r+0x3e>
 800c418:	4621      	mov	r1, r4
 800c41a:	4630      	mov	r0, r6
 800c41c:	f000 fb2a 	bl	800ca74 <_sbrk_r>
 800c420:	6038      	str	r0, [r7, #0]
 800c422:	4629      	mov	r1, r5
 800c424:	4630      	mov	r0, r6
 800c426:	f000 fb25 	bl	800ca74 <_sbrk_r>
 800c42a:	1c43      	adds	r3, r0, #1
 800c42c:	d123      	bne.n	800c476 <_malloc_r+0x92>
 800c42e:	230c      	movs	r3, #12
 800c430:	6033      	str	r3, [r6, #0]
 800c432:	4630      	mov	r0, r6
 800c434:	f000 fe1a 	bl	800d06c <__malloc_unlock>
 800c438:	e7e3      	b.n	800c402 <_malloc_r+0x1e>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	1b5b      	subs	r3, r3, r5
 800c43e:	d417      	bmi.n	800c470 <_malloc_r+0x8c>
 800c440:	2b0b      	cmp	r3, #11
 800c442:	d903      	bls.n	800c44c <_malloc_r+0x68>
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	441c      	add	r4, r3
 800c448:	6025      	str	r5, [r4, #0]
 800c44a:	e004      	b.n	800c456 <_malloc_r+0x72>
 800c44c:	6863      	ldr	r3, [r4, #4]
 800c44e:	42a2      	cmp	r2, r4
 800c450:	bf0c      	ite	eq
 800c452:	600b      	streq	r3, [r1, #0]
 800c454:	6053      	strne	r3, [r2, #4]
 800c456:	4630      	mov	r0, r6
 800c458:	f000 fe08 	bl	800d06c <__malloc_unlock>
 800c45c:	f104 000b 	add.w	r0, r4, #11
 800c460:	1d23      	adds	r3, r4, #4
 800c462:	f020 0007 	bic.w	r0, r0, #7
 800c466:	1ac2      	subs	r2, r0, r3
 800c468:	d0cc      	beq.n	800c404 <_malloc_r+0x20>
 800c46a:	1a1b      	subs	r3, r3, r0
 800c46c:	50a3      	str	r3, [r4, r2]
 800c46e:	e7c9      	b.n	800c404 <_malloc_r+0x20>
 800c470:	4622      	mov	r2, r4
 800c472:	6864      	ldr	r4, [r4, #4]
 800c474:	e7cc      	b.n	800c410 <_malloc_r+0x2c>
 800c476:	1cc4      	adds	r4, r0, #3
 800c478:	f024 0403 	bic.w	r4, r4, #3
 800c47c:	42a0      	cmp	r0, r4
 800c47e:	d0e3      	beq.n	800c448 <_malloc_r+0x64>
 800c480:	1a21      	subs	r1, r4, r0
 800c482:	4630      	mov	r0, r6
 800c484:	f000 faf6 	bl	800ca74 <_sbrk_r>
 800c488:	3001      	adds	r0, #1
 800c48a:	d1dd      	bne.n	800c448 <_malloc_r+0x64>
 800c48c:	e7cf      	b.n	800c42e <_malloc_r+0x4a>
 800c48e:	bf00      	nop
 800c490:	20000e10 	.word	0x20000e10
 800c494:	20000e14 	.word	0x20000e14

0800c498 <__sfputc_r>:
 800c498:	6893      	ldr	r3, [r2, #8]
 800c49a:	3b01      	subs	r3, #1
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	b410      	push	{r4}
 800c4a0:	6093      	str	r3, [r2, #8]
 800c4a2:	da08      	bge.n	800c4b6 <__sfputc_r+0x1e>
 800c4a4:	6994      	ldr	r4, [r2, #24]
 800c4a6:	42a3      	cmp	r3, r4
 800c4a8:	db01      	blt.n	800c4ae <__sfputc_r+0x16>
 800c4aa:	290a      	cmp	r1, #10
 800c4ac:	d103      	bne.n	800c4b6 <__sfputc_r+0x1e>
 800c4ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4b2:	f000 baef 	b.w	800ca94 <__swbuf_r>
 800c4b6:	6813      	ldr	r3, [r2, #0]
 800c4b8:	1c58      	adds	r0, r3, #1
 800c4ba:	6010      	str	r0, [r2, #0]
 800c4bc:	7019      	strb	r1, [r3, #0]
 800c4be:	4608      	mov	r0, r1
 800c4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <__sfputs_r>:
 800c4c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	460f      	mov	r7, r1
 800c4cc:	4614      	mov	r4, r2
 800c4ce:	18d5      	adds	r5, r2, r3
 800c4d0:	42ac      	cmp	r4, r5
 800c4d2:	d101      	bne.n	800c4d8 <__sfputs_r+0x12>
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	e007      	b.n	800c4e8 <__sfputs_r+0x22>
 800c4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4dc:	463a      	mov	r2, r7
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f7ff ffda 	bl	800c498 <__sfputc_r>
 800c4e4:	1c43      	adds	r3, r0, #1
 800c4e6:	d1f3      	bne.n	800c4d0 <__sfputs_r+0xa>
 800c4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4ec <_vfiprintf_r>:
 800c4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f0:	460d      	mov	r5, r1
 800c4f2:	b09d      	sub	sp, #116	; 0x74
 800c4f4:	4614      	mov	r4, r2
 800c4f6:	4698      	mov	r8, r3
 800c4f8:	4606      	mov	r6, r0
 800c4fa:	b118      	cbz	r0, 800c504 <_vfiprintf_r+0x18>
 800c4fc:	6983      	ldr	r3, [r0, #24]
 800c4fe:	b90b      	cbnz	r3, 800c504 <_vfiprintf_r+0x18>
 800c500:	f000 fcaa 	bl	800ce58 <__sinit>
 800c504:	4b89      	ldr	r3, [pc, #548]	; (800c72c <_vfiprintf_r+0x240>)
 800c506:	429d      	cmp	r5, r3
 800c508:	d11b      	bne.n	800c542 <_vfiprintf_r+0x56>
 800c50a:	6875      	ldr	r5, [r6, #4]
 800c50c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c50e:	07d9      	lsls	r1, r3, #31
 800c510:	d405      	bmi.n	800c51e <_vfiprintf_r+0x32>
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	059a      	lsls	r2, r3, #22
 800c516:	d402      	bmi.n	800c51e <_vfiprintf_r+0x32>
 800c518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c51a:	f000 fd3b 	bl	800cf94 <__retarget_lock_acquire_recursive>
 800c51e:	89ab      	ldrh	r3, [r5, #12]
 800c520:	071b      	lsls	r3, r3, #28
 800c522:	d501      	bpl.n	800c528 <_vfiprintf_r+0x3c>
 800c524:	692b      	ldr	r3, [r5, #16]
 800c526:	b9eb      	cbnz	r3, 800c564 <_vfiprintf_r+0x78>
 800c528:	4629      	mov	r1, r5
 800c52a:	4630      	mov	r0, r6
 800c52c:	f000 fb04 	bl	800cb38 <__swsetup_r>
 800c530:	b1c0      	cbz	r0, 800c564 <_vfiprintf_r+0x78>
 800c532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c534:	07dc      	lsls	r4, r3, #31
 800c536:	d50e      	bpl.n	800c556 <_vfiprintf_r+0x6a>
 800c538:	f04f 30ff 	mov.w	r0, #4294967295
 800c53c:	b01d      	add	sp, #116	; 0x74
 800c53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c542:	4b7b      	ldr	r3, [pc, #492]	; (800c730 <_vfiprintf_r+0x244>)
 800c544:	429d      	cmp	r5, r3
 800c546:	d101      	bne.n	800c54c <_vfiprintf_r+0x60>
 800c548:	68b5      	ldr	r5, [r6, #8]
 800c54a:	e7df      	b.n	800c50c <_vfiprintf_r+0x20>
 800c54c:	4b79      	ldr	r3, [pc, #484]	; (800c734 <_vfiprintf_r+0x248>)
 800c54e:	429d      	cmp	r5, r3
 800c550:	bf08      	it	eq
 800c552:	68f5      	ldreq	r5, [r6, #12]
 800c554:	e7da      	b.n	800c50c <_vfiprintf_r+0x20>
 800c556:	89ab      	ldrh	r3, [r5, #12]
 800c558:	0598      	lsls	r0, r3, #22
 800c55a:	d4ed      	bmi.n	800c538 <_vfiprintf_r+0x4c>
 800c55c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c55e:	f000 fd1a 	bl	800cf96 <__retarget_lock_release_recursive>
 800c562:	e7e9      	b.n	800c538 <_vfiprintf_r+0x4c>
 800c564:	2300      	movs	r3, #0
 800c566:	9309      	str	r3, [sp, #36]	; 0x24
 800c568:	2320      	movs	r3, #32
 800c56a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c56e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c572:	2330      	movs	r3, #48	; 0x30
 800c574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c738 <_vfiprintf_r+0x24c>
 800c578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c57c:	f04f 0901 	mov.w	r9, #1
 800c580:	4623      	mov	r3, r4
 800c582:	469a      	mov	sl, r3
 800c584:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c588:	b10a      	cbz	r2, 800c58e <_vfiprintf_r+0xa2>
 800c58a:	2a25      	cmp	r2, #37	; 0x25
 800c58c:	d1f9      	bne.n	800c582 <_vfiprintf_r+0x96>
 800c58e:	ebba 0b04 	subs.w	fp, sl, r4
 800c592:	d00b      	beq.n	800c5ac <_vfiprintf_r+0xc0>
 800c594:	465b      	mov	r3, fp
 800c596:	4622      	mov	r2, r4
 800c598:	4629      	mov	r1, r5
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7ff ff93 	bl	800c4c6 <__sfputs_r>
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	f000 80aa 	beq.w	800c6fa <_vfiprintf_r+0x20e>
 800c5a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5a8:	445a      	add	r2, fp
 800c5aa:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f000 80a2 	beq.w	800c6fa <_vfiprintf_r+0x20e>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5c0:	f10a 0a01 	add.w	sl, sl, #1
 800c5c4:	9304      	str	r3, [sp, #16]
 800c5c6:	9307      	str	r3, [sp, #28]
 800c5c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5cc:	931a      	str	r3, [sp, #104]	; 0x68
 800c5ce:	4654      	mov	r4, sl
 800c5d0:	2205      	movs	r2, #5
 800c5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5d6:	4858      	ldr	r0, [pc, #352]	; (800c738 <_vfiprintf_r+0x24c>)
 800c5d8:	f7f3 fdfa 	bl	80001d0 <memchr>
 800c5dc:	9a04      	ldr	r2, [sp, #16]
 800c5de:	b9d8      	cbnz	r0, 800c618 <_vfiprintf_r+0x12c>
 800c5e0:	06d1      	lsls	r1, r2, #27
 800c5e2:	bf44      	itt	mi
 800c5e4:	2320      	movmi	r3, #32
 800c5e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ea:	0713      	lsls	r3, r2, #28
 800c5ec:	bf44      	itt	mi
 800c5ee:	232b      	movmi	r3, #43	; 0x2b
 800c5f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c5fa:	d015      	beq.n	800c628 <_vfiprintf_r+0x13c>
 800c5fc:	9a07      	ldr	r2, [sp, #28]
 800c5fe:	4654      	mov	r4, sl
 800c600:	2000      	movs	r0, #0
 800c602:	f04f 0c0a 	mov.w	ip, #10
 800c606:	4621      	mov	r1, r4
 800c608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c60c:	3b30      	subs	r3, #48	; 0x30
 800c60e:	2b09      	cmp	r3, #9
 800c610:	d94e      	bls.n	800c6b0 <_vfiprintf_r+0x1c4>
 800c612:	b1b0      	cbz	r0, 800c642 <_vfiprintf_r+0x156>
 800c614:	9207      	str	r2, [sp, #28]
 800c616:	e014      	b.n	800c642 <_vfiprintf_r+0x156>
 800c618:	eba0 0308 	sub.w	r3, r0, r8
 800c61c:	fa09 f303 	lsl.w	r3, r9, r3
 800c620:	4313      	orrs	r3, r2
 800c622:	9304      	str	r3, [sp, #16]
 800c624:	46a2      	mov	sl, r4
 800c626:	e7d2      	b.n	800c5ce <_vfiprintf_r+0xe2>
 800c628:	9b03      	ldr	r3, [sp, #12]
 800c62a:	1d19      	adds	r1, r3, #4
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	9103      	str	r1, [sp, #12]
 800c630:	2b00      	cmp	r3, #0
 800c632:	bfbb      	ittet	lt
 800c634:	425b      	neglt	r3, r3
 800c636:	f042 0202 	orrlt.w	r2, r2, #2
 800c63a:	9307      	strge	r3, [sp, #28]
 800c63c:	9307      	strlt	r3, [sp, #28]
 800c63e:	bfb8      	it	lt
 800c640:	9204      	strlt	r2, [sp, #16]
 800c642:	7823      	ldrb	r3, [r4, #0]
 800c644:	2b2e      	cmp	r3, #46	; 0x2e
 800c646:	d10c      	bne.n	800c662 <_vfiprintf_r+0x176>
 800c648:	7863      	ldrb	r3, [r4, #1]
 800c64a:	2b2a      	cmp	r3, #42	; 0x2a
 800c64c:	d135      	bne.n	800c6ba <_vfiprintf_r+0x1ce>
 800c64e:	9b03      	ldr	r3, [sp, #12]
 800c650:	1d1a      	adds	r2, r3, #4
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	9203      	str	r2, [sp, #12]
 800c656:	2b00      	cmp	r3, #0
 800c658:	bfb8      	it	lt
 800c65a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c65e:	3402      	adds	r4, #2
 800c660:	9305      	str	r3, [sp, #20]
 800c662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c748 <_vfiprintf_r+0x25c>
 800c666:	7821      	ldrb	r1, [r4, #0]
 800c668:	2203      	movs	r2, #3
 800c66a:	4650      	mov	r0, sl
 800c66c:	f7f3 fdb0 	bl	80001d0 <memchr>
 800c670:	b140      	cbz	r0, 800c684 <_vfiprintf_r+0x198>
 800c672:	2340      	movs	r3, #64	; 0x40
 800c674:	eba0 000a 	sub.w	r0, r0, sl
 800c678:	fa03 f000 	lsl.w	r0, r3, r0
 800c67c:	9b04      	ldr	r3, [sp, #16]
 800c67e:	4303      	orrs	r3, r0
 800c680:	3401      	adds	r4, #1
 800c682:	9304      	str	r3, [sp, #16]
 800c684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c688:	482c      	ldr	r0, [pc, #176]	; (800c73c <_vfiprintf_r+0x250>)
 800c68a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c68e:	2206      	movs	r2, #6
 800c690:	f7f3 fd9e 	bl	80001d0 <memchr>
 800c694:	2800      	cmp	r0, #0
 800c696:	d03f      	beq.n	800c718 <_vfiprintf_r+0x22c>
 800c698:	4b29      	ldr	r3, [pc, #164]	; (800c740 <_vfiprintf_r+0x254>)
 800c69a:	bb1b      	cbnz	r3, 800c6e4 <_vfiprintf_r+0x1f8>
 800c69c:	9b03      	ldr	r3, [sp, #12]
 800c69e:	3307      	adds	r3, #7
 800c6a0:	f023 0307 	bic.w	r3, r3, #7
 800c6a4:	3308      	adds	r3, #8
 800c6a6:	9303      	str	r3, [sp, #12]
 800c6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6aa:	443b      	add	r3, r7
 800c6ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ae:	e767      	b.n	800c580 <_vfiprintf_r+0x94>
 800c6b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	2001      	movs	r0, #1
 800c6b8:	e7a5      	b.n	800c606 <_vfiprintf_r+0x11a>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	3401      	adds	r4, #1
 800c6be:	9305      	str	r3, [sp, #20]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	f04f 0c0a 	mov.w	ip, #10
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6cc:	3a30      	subs	r2, #48	; 0x30
 800c6ce:	2a09      	cmp	r2, #9
 800c6d0:	d903      	bls.n	800c6da <_vfiprintf_r+0x1ee>
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d0c5      	beq.n	800c662 <_vfiprintf_r+0x176>
 800c6d6:	9105      	str	r1, [sp, #20]
 800c6d8:	e7c3      	b.n	800c662 <_vfiprintf_r+0x176>
 800c6da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6de:	4604      	mov	r4, r0
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e7f0      	b.n	800c6c6 <_vfiprintf_r+0x1da>
 800c6e4:	ab03      	add	r3, sp, #12
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	462a      	mov	r2, r5
 800c6ea:	4b16      	ldr	r3, [pc, #88]	; (800c744 <_vfiprintf_r+0x258>)
 800c6ec:	a904      	add	r1, sp, #16
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f3af 8000 	nop.w
 800c6f4:	4607      	mov	r7, r0
 800c6f6:	1c78      	adds	r0, r7, #1
 800c6f8:	d1d6      	bne.n	800c6a8 <_vfiprintf_r+0x1bc>
 800c6fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6fc:	07d9      	lsls	r1, r3, #31
 800c6fe:	d405      	bmi.n	800c70c <_vfiprintf_r+0x220>
 800c700:	89ab      	ldrh	r3, [r5, #12]
 800c702:	059a      	lsls	r2, r3, #22
 800c704:	d402      	bmi.n	800c70c <_vfiprintf_r+0x220>
 800c706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c708:	f000 fc45 	bl	800cf96 <__retarget_lock_release_recursive>
 800c70c:	89ab      	ldrh	r3, [r5, #12]
 800c70e:	065b      	lsls	r3, r3, #25
 800c710:	f53f af12 	bmi.w	800c538 <_vfiprintf_r+0x4c>
 800c714:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c716:	e711      	b.n	800c53c <_vfiprintf_r+0x50>
 800c718:	ab03      	add	r3, sp, #12
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	462a      	mov	r2, r5
 800c71e:	4b09      	ldr	r3, [pc, #36]	; (800c744 <_vfiprintf_r+0x258>)
 800c720:	a904      	add	r1, sp, #16
 800c722:	4630      	mov	r0, r6
 800c724:	f000 f880 	bl	800c828 <_printf_i>
 800c728:	e7e4      	b.n	800c6f4 <_vfiprintf_r+0x208>
 800c72a:	bf00      	nop
 800c72c:	0800d7c8 	.word	0x0800d7c8
 800c730:	0800d7e8 	.word	0x0800d7e8
 800c734:	0800d7a8 	.word	0x0800d7a8
 800c738:	0800d772 	.word	0x0800d772
 800c73c:	0800d77c 	.word	0x0800d77c
 800c740:	00000000 	.word	0x00000000
 800c744:	0800c4c7 	.word	0x0800c4c7
 800c748:	0800d778 	.word	0x0800d778

0800c74c <_printf_common>:
 800c74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c750:	4616      	mov	r6, r2
 800c752:	4699      	mov	r9, r3
 800c754:	688a      	ldr	r2, [r1, #8]
 800c756:	690b      	ldr	r3, [r1, #16]
 800c758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c75c:	4293      	cmp	r3, r2
 800c75e:	bfb8      	it	lt
 800c760:	4613      	movlt	r3, r2
 800c762:	6033      	str	r3, [r6, #0]
 800c764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c768:	4607      	mov	r7, r0
 800c76a:	460c      	mov	r4, r1
 800c76c:	b10a      	cbz	r2, 800c772 <_printf_common+0x26>
 800c76e:	3301      	adds	r3, #1
 800c770:	6033      	str	r3, [r6, #0]
 800c772:	6823      	ldr	r3, [r4, #0]
 800c774:	0699      	lsls	r1, r3, #26
 800c776:	bf42      	ittt	mi
 800c778:	6833      	ldrmi	r3, [r6, #0]
 800c77a:	3302      	addmi	r3, #2
 800c77c:	6033      	strmi	r3, [r6, #0]
 800c77e:	6825      	ldr	r5, [r4, #0]
 800c780:	f015 0506 	ands.w	r5, r5, #6
 800c784:	d106      	bne.n	800c794 <_printf_common+0x48>
 800c786:	f104 0a19 	add.w	sl, r4, #25
 800c78a:	68e3      	ldr	r3, [r4, #12]
 800c78c:	6832      	ldr	r2, [r6, #0]
 800c78e:	1a9b      	subs	r3, r3, r2
 800c790:	42ab      	cmp	r3, r5
 800c792:	dc26      	bgt.n	800c7e2 <_printf_common+0x96>
 800c794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c798:	1e13      	subs	r3, r2, #0
 800c79a:	6822      	ldr	r2, [r4, #0]
 800c79c:	bf18      	it	ne
 800c79e:	2301      	movne	r3, #1
 800c7a0:	0692      	lsls	r2, r2, #26
 800c7a2:	d42b      	bmi.n	800c7fc <_printf_common+0xb0>
 800c7a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	47c0      	blx	r8
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	d01e      	beq.n	800c7f0 <_printf_common+0xa4>
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	68e5      	ldr	r5, [r4, #12]
 800c7b6:	6832      	ldr	r2, [r6, #0]
 800c7b8:	f003 0306 	and.w	r3, r3, #6
 800c7bc:	2b04      	cmp	r3, #4
 800c7be:	bf08      	it	eq
 800c7c0:	1aad      	subeq	r5, r5, r2
 800c7c2:	68a3      	ldr	r3, [r4, #8]
 800c7c4:	6922      	ldr	r2, [r4, #16]
 800c7c6:	bf0c      	ite	eq
 800c7c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7cc:	2500      	movne	r5, #0
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	bfc4      	itt	gt
 800c7d2:	1a9b      	subgt	r3, r3, r2
 800c7d4:	18ed      	addgt	r5, r5, r3
 800c7d6:	2600      	movs	r6, #0
 800c7d8:	341a      	adds	r4, #26
 800c7da:	42b5      	cmp	r5, r6
 800c7dc:	d11a      	bne.n	800c814 <_printf_common+0xc8>
 800c7de:	2000      	movs	r0, #0
 800c7e0:	e008      	b.n	800c7f4 <_printf_common+0xa8>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	4652      	mov	r2, sl
 800c7e6:	4649      	mov	r1, r9
 800c7e8:	4638      	mov	r0, r7
 800c7ea:	47c0      	blx	r8
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	d103      	bne.n	800c7f8 <_printf_common+0xac>
 800c7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7f8:	3501      	adds	r5, #1
 800c7fa:	e7c6      	b.n	800c78a <_printf_common+0x3e>
 800c7fc:	18e1      	adds	r1, r4, r3
 800c7fe:	1c5a      	adds	r2, r3, #1
 800c800:	2030      	movs	r0, #48	; 0x30
 800c802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c806:	4422      	add	r2, r4
 800c808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c80c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c810:	3302      	adds	r3, #2
 800c812:	e7c7      	b.n	800c7a4 <_printf_common+0x58>
 800c814:	2301      	movs	r3, #1
 800c816:	4622      	mov	r2, r4
 800c818:	4649      	mov	r1, r9
 800c81a:	4638      	mov	r0, r7
 800c81c:	47c0      	blx	r8
 800c81e:	3001      	adds	r0, #1
 800c820:	d0e6      	beq.n	800c7f0 <_printf_common+0xa4>
 800c822:	3601      	adds	r6, #1
 800c824:	e7d9      	b.n	800c7da <_printf_common+0x8e>
	...

0800c828 <_printf_i>:
 800c828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c82c:	460c      	mov	r4, r1
 800c82e:	4691      	mov	r9, r2
 800c830:	7e27      	ldrb	r7, [r4, #24]
 800c832:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c834:	2f78      	cmp	r7, #120	; 0x78
 800c836:	4680      	mov	r8, r0
 800c838:	469a      	mov	sl, r3
 800c83a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c83e:	d807      	bhi.n	800c850 <_printf_i+0x28>
 800c840:	2f62      	cmp	r7, #98	; 0x62
 800c842:	d80a      	bhi.n	800c85a <_printf_i+0x32>
 800c844:	2f00      	cmp	r7, #0
 800c846:	f000 80d8 	beq.w	800c9fa <_printf_i+0x1d2>
 800c84a:	2f58      	cmp	r7, #88	; 0x58
 800c84c:	f000 80a3 	beq.w	800c996 <_printf_i+0x16e>
 800c850:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c858:	e03a      	b.n	800c8d0 <_printf_i+0xa8>
 800c85a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c85e:	2b15      	cmp	r3, #21
 800c860:	d8f6      	bhi.n	800c850 <_printf_i+0x28>
 800c862:	a001      	add	r0, pc, #4	; (adr r0, 800c868 <_printf_i+0x40>)
 800c864:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c868:	0800c8c1 	.word	0x0800c8c1
 800c86c:	0800c8d5 	.word	0x0800c8d5
 800c870:	0800c851 	.word	0x0800c851
 800c874:	0800c851 	.word	0x0800c851
 800c878:	0800c851 	.word	0x0800c851
 800c87c:	0800c851 	.word	0x0800c851
 800c880:	0800c8d5 	.word	0x0800c8d5
 800c884:	0800c851 	.word	0x0800c851
 800c888:	0800c851 	.word	0x0800c851
 800c88c:	0800c851 	.word	0x0800c851
 800c890:	0800c851 	.word	0x0800c851
 800c894:	0800c9e1 	.word	0x0800c9e1
 800c898:	0800c905 	.word	0x0800c905
 800c89c:	0800c9c3 	.word	0x0800c9c3
 800c8a0:	0800c851 	.word	0x0800c851
 800c8a4:	0800c851 	.word	0x0800c851
 800c8a8:	0800ca03 	.word	0x0800ca03
 800c8ac:	0800c851 	.word	0x0800c851
 800c8b0:	0800c905 	.word	0x0800c905
 800c8b4:	0800c851 	.word	0x0800c851
 800c8b8:	0800c851 	.word	0x0800c851
 800c8bc:	0800c9cb 	.word	0x0800c9cb
 800c8c0:	680b      	ldr	r3, [r1, #0]
 800c8c2:	1d1a      	adds	r2, r3, #4
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	600a      	str	r2, [r1, #0]
 800c8c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c8cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e0a3      	b.n	800ca1c <_printf_i+0x1f4>
 800c8d4:	6825      	ldr	r5, [r4, #0]
 800c8d6:	6808      	ldr	r0, [r1, #0]
 800c8d8:	062e      	lsls	r6, r5, #24
 800c8da:	f100 0304 	add.w	r3, r0, #4
 800c8de:	d50a      	bpl.n	800c8f6 <_printf_i+0xce>
 800c8e0:	6805      	ldr	r5, [r0, #0]
 800c8e2:	600b      	str	r3, [r1, #0]
 800c8e4:	2d00      	cmp	r5, #0
 800c8e6:	da03      	bge.n	800c8f0 <_printf_i+0xc8>
 800c8e8:	232d      	movs	r3, #45	; 0x2d
 800c8ea:	426d      	negs	r5, r5
 800c8ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f0:	485e      	ldr	r0, [pc, #376]	; (800ca6c <_printf_i+0x244>)
 800c8f2:	230a      	movs	r3, #10
 800c8f4:	e019      	b.n	800c92a <_printf_i+0x102>
 800c8f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c8fa:	6805      	ldr	r5, [r0, #0]
 800c8fc:	600b      	str	r3, [r1, #0]
 800c8fe:	bf18      	it	ne
 800c900:	b22d      	sxthne	r5, r5
 800c902:	e7ef      	b.n	800c8e4 <_printf_i+0xbc>
 800c904:	680b      	ldr	r3, [r1, #0]
 800c906:	6825      	ldr	r5, [r4, #0]
 800c908:	1d18      	adds	r0, r3, #4
 800c90a:	6008      	str	r0, [r1, #0]
 800c90c:	0628      	lsls	r0, r5, #24
 800c90e:	d501      	bpl.n	800c914 <_printf_i+0xec>
 800c910:	681d      	ldr	r5, [r3, #0]
 800c912:	e002      	b.n	800c91a <_printf_i+0xf2>
 800c914:	0669      	lsls	r1, r5, #25
 800c916:	d5fb      	bpl.n	800c910 <_printf_i+0xe8>
 800c918:	881d      	ldrh	r5, [r3, #0]
 800c91a:	4854      	ldr	r0, [pc, #336]	; (800ca6c <_printf_i+0x244>)
 800c91c:	2f6f      	cmp	r7, #111	; 0x6f
 800c91e:	bf0c      	ite	eq
 800c920:	2308      	moveq	r3, #8
 800c922:	230a      	movne	r3, #10
 800c924:	2100      	movs	r1, #0
 800c926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c92a:	6866      	ldr	r6, [r4, #4]
 800c92c:	60a6      	str	r6, [r4, #8]
 800c92e:	2e00      	cmp	r6, #0
 800c930:	bfa2      	ittt	ge
 800c932:	6821      	ldrge	r1, [r4, #0]
 800c934:	f021 0104 	bicge.w	r1, r1, #4
 800c938:	6021      	strge	r1, [r4, #0]
 800c93a:	b90d      	cbnz	r5, 800c940 <_printf_i+0x118>
 800c93c:	2e00      	cmp	r6, #0
 800c93e:	d04d      	beq.n	800c9dc <_printf_i+0x1b4>
 800c940:	4616      	mov	r6, r2
 800c942:	fbb5 f1f3 	udiv	r1, r5, r3
 800c946:	fb03 5711 	mls	r7, r3, r1, r5
 800c94a:	5dc7      	ldrb	r7, [r0, r7]
 800c94c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c950:	462f      	mov	r7, r5
 800c952:	42bb      	cmp	r3, r7
 800c954:	460d      	mov	r5, r1
 800c956:	d9f4      	bls.n	800c942 <_printf_i+0x11a>
 800c958:	2b08      	cmp	r3, #8
 800c95a:	d10b      	bne.n	800c974 <_printf_i+0x14c>
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	07df      	lsls	r7, r3, #31
 800c960:	d508      	bpl.n	800c974 <_printf_i+0x14c>
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	6861      	ldr	r1, [r4, #4]
 800c966:	4299      	cmp	r1, r3
 800c968:	bfde      	ittt	le
 800c96a:	2330      	movle	r3, #48	; 0x30
 800c96c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c970:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c974:	1b92      	subs	r2, r2, r6
 800c976:	6122      	str	r2, [r4, #16]
 800c978:	f8cd a000 	str.w	sl, [sp]
 800c97c:	464b      	mov	r3, r9
 800c97e:	aa03      	add	r2, sp, #12
 800c980:	4621      	mov	r1, r4
 800c982:	4640      	mov	r0, r8
 800c984:	f7ff fee2 	bl	800c74c <_printf_common>
 800c988:	3001      	adds	r0, #1
 800c98a:	d14c      	bne.n	800ca26 <_printf_i+0x1fe>
 800c98c:	f04f 30ff 	mov.w	r0, #4294967295
 800c990:	b004      	add	sp, #16
 800c992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c996:	4835      	ldr	r0, [pc, #212]	; (800ca6c <_printf_i+0x244>)
 800c998:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	680e      	ldr	r6, [r1, #0]
 800c9a0:	061f      	lsls	r7, r3, #24
 800c9a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800c9a6:	600e      	str	r6, [r1, #0]
 800c9a8:	d514      	bpl.n	800c9d4 <_printf_i+0x1ac>
 800c9aa:	07d9      	lsls	r1, r3, #31
 800c9ac:	bf44      	itt	mi
 800c9ae:	f043 0320 	orrmi.w	r3, r3, #32
 800c9b2:	6023      	strmi	r3, [r4, #0]
 800c9b4:	b91d      	cbnz	r5, 800c9be <_printf_i+0x196>
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	f023 0320 	bic.w	r3, r3, #32
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	2310      	movs	r3, #16
 800c9c0:	e7b0      	b.n	800c924 <_printf_i+0xfc>
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	f043 0320 	orr.w	r3, r3, #32
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	2378      	movs	r3, #120	; 0x78
 800c9cc:	4828      	ldr	r0, [pc, #160]	; (800ca70 <_printf_i+0x248>)
 800c9ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9d2:	e7e3      	b.n	800c99c <_printf_i+0x174>
 800c9d4:	065e      	lsls	r6, r3, #25
 800c9d6:	bf48      	it	mi
 800c9d8:	b2ad      	uxthmi	r5, r5
 800c9da:	e7e6      	b.n	800c9aa <_printf_i+0x182>
 800c9dc:	4616      	mov	r6, r2
 800c9de:	e7bb      	b.n	800c958 <_printf_i+0x130>
 800c9e0:	680b      	ldr	r3, [r1, #0]
 800c9e2:	6826      	ldr	r6, [r4, #0]
 800c9e4:	6960      	ldr	r0, [r4, #20]
 800c9e6:	1d1d      	adds	r5, r3, #4
 800c9e8:	600d      	str	r5, [r1, #0]
 800c9ea:	0635      	lsls	r5, r6, #24
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	d501      	bpl.n	800c9f4 <_printf_i+0x1cc>
 800c9f0:	6018      	str	r0, [r3, #0]
 800c9f2:	e002      	b.n	800c9fa <_printf_i+0x1d2>
 800c9f4:	0671      	lsls	r1, r6, #25
 800c9f6:	d5fb      	bpl.n	800c9f0 <_printf_i+0x1c8>
 800c9f8:	8018      	strh	r0, [r3, #0]
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	6123      	str	r3, [r4, #16]
 800c9fe:	4616      	mov	r6, r2
 800ca00:	e7ba      	b.n	800c978 <_printf_i+0x150>
 800ca02:	680b      	ldr	r3, [r1, #0]
 800ca04:	1d1a      	adds	r2, r3, #4
 800ca06:	600a      	str	r2, [r1, #0]
 800ca08:	681e      	ldr	r6, [r3, #0]
 800ca0a:	6862      	ldr	r2, [r4, #4]
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f7f3 fbde 	bl	80001d0 <memchr>
 800ca14:	b108      	cbz	r0, 800ca1a <_printf_i+0x1f2>
 800ca16:	1b80      	subs	r0, r0, r6
 800ca18:	6060      	str	r0, [r4, #4]
 800ca1a:	6863      	ldr	r3, [r4, #4]
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca24:	e7a8      	b.n	800c978 <_printf_i+0x150>
 800ca26:	6923      	ldr	r3, [r4, #16]
 800ca28:	4632      	mov	r2, r6
 800ca2a:	4649      	mov	r1, r9
 800ca2c:	4640      	mov	r0, r8
 800ca2e:	47d0      	blx	sl
 800ca30:	3001      	adds	r0, #1
 800ca32:	d0ab      	beq.n	800c98c <_printf_i+0x164>
 800ca34:	6823      	ldr	r3, [r4, #0]
 800ca36:	079b      	lsls	r3, r3, #30
 800ca38:	d413      	bmi.n	800ca62 <_printf_i+0x23a>
 800ca3a:	68e0      	ldr	r0, [r4, #12]
 800ca3c:	9b03      	ldr	r3, [sp, #12]
 800ca3e:	4298      	cmp	r0, r3
 800ca40:	bfb8      	it	lt
 800ca42:	4618      	movlt	r0, r3
 800ca44:	e7a4      	b.n	800c990 <_printf_i+0x168>
 800ca46:	2301      	movs	r3, #1
 800ca48:	4632      	mov	r2, r6
 800ca4a:	4649      	mov	r1, r9
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	47d0      	blx	sl
 800ca50:	3001      	adds	r0, #1
 800ca52:	d09b      	beq.n	800c98c <_printf_i+0x164>
 800ca54:	3501      	adds	r5, #1
 800ca56:	68e3      	ldr	r3, [r4, #12]
 800ca58:	9903      	ldr	r1, [sp, #12]
 800ca5a:	1a5b      	subs	r3, r3, r1
 800ca5c:	42ab      	cmp	r3, r5
 800ca5e:	dcf2      	bgt.n	800ca46 <_printf_i+0x21e>
 800ca60:	e7eb      	b.n	800ca3a <_printf_i+0x212>
 800ca62:	2500      	movs	r5, #0
 800ca64:	f104 0619 	add.w	r6, r4, #25
 800ca68:	e7f5      	b.n	800ca56 <_printf_i+0x22e>
 800ca6a:	bf00      	nop
 800ca6c:	0800d783 	.word	0x0800d783
 800ca70:	0800d794 	.word	0x0800d794

0800ca74 <_sbrk_r>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4d06      	ldr	r5, [pc, #24]	; (800ca90 <_sbrk_r+0x1c>)
 800ca78:	2300      	movs	r3, #0
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	4608      	mov	r0, r1
 800ca7e:	602b      	str	r3, [r5, #0]
 800ca80:	f7f8 ffb8 	bl	80059f4 <_sbrk>
 800ca84:	1c43      	adds	r3, r0, #1
 800ca86:	d102      	bne.n	800ca8e <_sbrk_r+0x1a>
 800ca88:	682b      	ldr	r3, [r5, #0]
 800ca8a:	b103      	cbz	r3, 800ca8e <_sbrk_r+0x1a>
 800ca8c:	6023      	str	r3, [r4, #0]
 800ca8e:	bd38      	pop	{r3, r4, r5, pc}
 800ca90:	200013c4 	.word	0x200013c4

0800ca94 <__swbuf_r>:
 800ca94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca96:	460e      	mov	r6, r1
 800ca98:	4614      	mov	r4, r2
 800ca9a:	4605      	mov	r5, r0
 800ca9c:	b118      	cbz	r0, 800caa6 <__swbuf_r+0x12>
 800ca9e:	6983      	ldr	r3, [r0, #24]
 800caa0:	b90b      	cbnz	r3, 800caa6 <__swbuf_r+0x12>
 800caa2:	f000 f9d9 	bl	800ce58 <__sinit>
 800caa6:	4b21      	ldr	r3, [pc, #132]	; (800cb2c <__swbuf_r+0x98>)
 800caa8:	429c      	cmp	r4, r3
 800caaa:	d12b      	bne.n	800cb04 <__swbuf_r+0x70>
 800caac:	686c      	ldr	r4, [r5, #4]
 800caae:	69a3      	ldr	r3, [r4, #24]
 800cab0:	60a3      	str	r3, [r4, #8]
 800cab2:	89a3      	ldrh	r3, [r4, #12]
 800cab4:	071a      	lsls	r2, r3, #28
 800cab6:	d52f      	bpl.n	800cb18 <__swbuf_r+0x84>
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	b36b      	cbz	r3, 800cb18 <__swbuf_r+0x84>
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	6820      	ldr	r0, [r4, #0]
 800cac0:	1ac0      	subs	r0, r0, r3
 800cac2:	6963      	ldr	r3, [r4, #20]
 800cac4:	b2f6      	uxtb	r6, r6
 800cac6:	4283      	cmp	r3, r0
 800cac8:	4637      	mov	r7, r6
 800caca:	dc04      	bgt.n	800cad6 <__swbuf_r+0x42>
 800cacc:	4621      	mov	r1, r4
 800cace:	4628      	mov	r0, r5
 800cad0:	f000 f92e 	bl	800cd30 <_fflush_r>
 800cad4:	bb30      	cbnz	r0, 800cb24 <__swbuf_r+0x90>
 800cad6:	68a3      	ldr	r3, [r4, #8]
 800cad8:	3b01      	subs	r3, #1
 800cada:	60a3      	str	r3, [r4, #8]
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	1c5a      	adds	r2, r3, #1
 800cae0:	6022      	str	r2, [r4, #0]
 800cae2:	701e      	strb	r6, [r3, #0]
 800cae4:	6963      	ldr	r3, [r4, #20]
 800cae6:	3001      	adds	r0, #1
 800cae8:	4283      	cmp	r3, r0
 800caea:	d004      	beq.n	800caf6 <__swbuf_r+0x62>
 800caec:	89a3      	ldrh	r3, [r4, #12]
 800caee:	07db      	lsls	r3, r3, #31
 800caf0:	d506      	bpl.n	800cb00 <__swbuf_r+0x6c>
 800caf2:	2e0a      	cmp	r6, #10
 800caf4:	d104      	bne.n	800cb00 <__swbuf_r+0x6c>
 800caf6:	4621      	mov	r1, r4
 800caf8:	4628      	mov	r0, r5
 800cafa:	f000 f919 	bl	800cd30 <_fflush_r>
 800cafe:	b988      	cbnz	r0, 800cb24 <__swbuf_r+0x90>
 800cb00:	4638      	mov	r0, r7
 800cb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb04:	4b0a      	ldr	r3, [pc, #40]	; (800cb30 <__swbuf_r+0x9c>)
 800cb06:	429c      	cmp	r4, r3
 800cb08:	d101      	bne.n	800cb0e <__swbuf_r+0x7a>
 800cb0a:	68ac      	ldr	r4, [r5, #8]
 800cb0c:	e7cf      	b.n	800caae <__swbuf_r+0x1a>
 800cb0e:	4b09      	ldr	r3, [pc, #36]	; (800cb34 <__swbuf_r+0xa0>)
 800cb10:	429c      	cmp	r4, r3
 800cb12:	bf08      	it	eq
 800cb14:	68ec      	ldreq	r4, [r5, #12]
 800cb16:	e7ca      	b.n	800caae <__swbuf_r+0x1a>
 800cb18:	4621      	mov	r1, r4
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	f000 f80c 	bl	800cb38 <__swsetup_r>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d0cb      	beq.n	800cabc <__swbuf_r+0x28>
 800cb24:	f04f 37ff 	mov.w	r7, #4294967295
 800cb28:	e7ea      	b.n	800cb00 <__swbuf_r+0x6c>
 800cb2a:	bf00      	nop
 800cb2c:	0800d7c8 	.word	0x0800d7c8
 800cb30:	0800d7e8 	.word	0x0800d7e8
 800cb34:	0800d7a8 	.word	0x0800d7a8

0800cb38 <__swsetup_r>:
 800cb38:	4b32      	ldr	r3, [pc, #200]	; (800cc04 <__swsetup_r+0xcc>)
 800cb3a:	b570      	push	{r4, r5, r6, lr}
 800cb3c:	681d      	ldr	r5, [r3, #0]
 800cb3e:	4606      	mov	r6, r0
 800cb40:	460c      	mov	r4, r1
 800cb42:	b125      	cbz	r5, 800cb4e <__swsetup_r+0x16>
 800cb44:	69ab      	ldr	r3, [r5, #24]
 800cb46:	b913      	cbnz	r3, 800cb4e <__swsetup_r+0x16>
 800cb48:	4628      	mov	r0, r5
 800cb4a:	f000 f985 	bl	800ce58 <__sinit>
 800cb4e:	4b2e      	ldr	r3, [pc, #184]	; (800cc08 <__swsetup_r+0xd0>)
 800cb50:	429c      	cmp	r4, r3
 800cb52:	d10f      	bne.n	800cb74 <__swsetup_r+0x3c>
 800cb54:	686c      	ldr	r4, [r5, #4]
 800cb56:	89a3      	ldrh	r3, [r4, #12]
 800cb58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb5c:	0719      	lsls	r1, r3, #28
 800cb5e:	d42c      	bmi.n	800cbba <__swsetup_r+0x82>
 800cb60:	06dd      	lsls	r5, r3, #27
 800cb62:	d411      	bmi.n	800cb88 <__swsetup_r+0x50>
 800cb64:	2309      	movs	r3, #9
 800cb66:	6033      	str	r3, [r6, #0]
 800cb68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb6c:	81a3      	strh	r3, [r4, #12]
 800cb6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb72:	e03e      	b.n	800cbf2 <__swsetup_r+0xba>
 800cb74:	4b25      	ldr	r3, [pc, #148]	; (800cc0c <__swsetup_r+0xd4>)
 800cb76:	429c      	cmp	r4, r3
 800cb78:	d101      	bne.n	800cb7e <__swsetup_r+0x46>
 800cb7a:	68ac      	ldr	r4, [r5, #8]
 800cb7c:	e7eb      	b.n	800cb56 <__swsetup_r+0x1e>
 800cb7e:	4b24      	ldr	r3, [pc, #144]	; (800cc10 <__swsetup_r+0xd8>)
 800cb80:	429c      	cmp	r4, r3
 800cb82:	bf08      	it	eq
 800cb84:	68ec      	ldreq	r4, [r5, #12]
 800cb86:	e7e6      	b.n	800cb56 <__swsetup_r+0x1e>
 800cb88:	0758      	lsls	r0, r3, #29
 800cb8a:	d512      	bpl.n	800cbb2 <__swsetup_r+0x7a>
 800cb8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb8e:	b141      	cbz	r1, 800cba2 <__swsetup_r+0x6a>
 800cb90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb94:	4299      	cmp	r1, r3
 800cb96:	d002      	beq.n	800cb9e <__swsetup_r+0x66>
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f7ff fbd3 	bl	800c344 <_free_r>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	6363      	str	r3, [r4, #52]	; 0x34
 800cba2:	89a3      	ldrh	r3, [r4, #12]
 800cba4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cba8:	81a3      	strh	r3, [r4, #12]
 800cbaa:	2300      	movs	r3, #0
 800cbac:	6063      	str	r3, [r4, #4]
 800cbae:	6923      	ldr	r3, [r4, #16]
 800cbb0:	6023      	str	r3, [r4, #0]
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	f043 0308 	orr.w	r3, r3, #8
 800cbb8:	81a3      	strh	r3, [r4, #12]
 800cbba:	6923      	ldr	r3, [r4, #16]
 800cbbc:	b94b      	cbnz	r3, 800cbd2 <__swsetup_r+0x9a>
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbc8:	d003      	beq.n	800cbd2 <__swsetup_r+0x9a>
 800cbca:	4621      	mov	r1, r4
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f000 fa07 	bl	800cfe0 <__smakebuf_r>
 800cbd2:	89a0      	ldrh	r0, [r4, #12]
 800cbd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbd8:	f010 0301 	ands.w	r3, r0, #1
 800cbdc:	d00a      	beq.n	800cbf4 <__swsetup_r+0xbc>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	60a3      	str	r3, [r4, #8]
 800cbe2:	6963      	ldr	r3, [r4, #20]
 800cbe4:	425b      	negs	r3, r3
 800cbe6:	61a3      	str	r3, [r4, #24]
 800cbe8:	6923      	ldr	r3, [r4, #16]
 800cbea:	b943      	cbnz	r3, 800cbfe <__swsetup_r+0xc6>
 800cbec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbf0:	d1ba      	bne.n	800cb68 <__swsetup_r+0x30>
 800cbf2:	bd70      	pop	{r4, r5, r6, pc}
 800cbf4:	0781      	lsls	r1, r0, #30
 800cbf6:	bf58      	it	pl
 800cbf8:	6963      	ldrpl	r3, [r4, #20]
 800cbfa:	60a3      	str	r3, [r4, #8]
 800cbfc:	e7f4      	b.n	800cbe8 <__swsetup_r+0xb0>
 800cbfe:	2000      	movs	r0, #0
 800cc00:	e7f7      	b.n	800cbf2 <__swsetup_r+0xba>
 800cc02:	bf00      	nop
 800cc04:	2000004c 	.word	0x2000004c
 800cc08:	0800d7c8 	.word	0x0800d7c8
 800cc0c:	0800d7e8 	.word	0x0800d7e8
 800cc10:	0800d7a8 	.word	0x0800d7a8

0800cc14 <abort>:
 800cc14:	b508      	push	{r3, lr}
 800cc16:	2006      	movs	r0, #6
 800cc18:	f000 fa56 	bl	800d0c8 <raise>
 800cc1c:	2001      	movs	r0, #1
 800cc1e:	f7f8 fe71 	bl	8005904 <_exit>
	...

0800cc24 <__sflush_r>:
 800cc24:	898a      	ldrh	r2, [r1, #12]
 800cc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	0710      	lsls	r0, r2, #28
 800cc2e:	460c      	mov	r4, r1
 800cc30:	d458      	bmi.n	800cce4 <__sflush_r+0xc0>
 800cc32:	684b      	ldr	r3, [r1, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	dc05      	bgt.n	800cc44 <__sflush_r+0x20>
 800cc38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	dc02      	bgt.n	800cc44 <__sflush_r+0x20>
 800cc3e:	2000      	movs	r0, #0
 800cc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc46:	2e00      	cmp	r6, #0
 800cc48:	d0f9      	beq.n	800cc3e <__sflush_r+0x1a>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc50:	682f      	ldr	r7, [r5, #0]
 800cc52:	602b      	str	r3, [r5, #0]
 800cc54:	d032      	beq.n	800ccbc <__sflush_r+0x98>
 800cc56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc58:	89a3      	ldrh	r3, [r4, #12]
 800cc5a:	075a      	lsls	r2, r3, #29
 800cc5c:	d505      	bpl.n	800cc6a <__sflush_r+0x46>
 800cc5e:	6863      	ldr	r3, [r4, #4]
 800cc60:	1ac0      	subs	r0, r0, r3
 800cc62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc64:	b10b      	cbz	r3, 800cc6a <__sflush_r+0x46>
 800cc66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc68:	1ac0      	subs	r0, r0, r3
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc70:	6a21      	ldr	r1, [r4, #32]
 800cc72:	4628      	mov	r0, r5
 800cc74:	47b0      	blx	r6
 800cc76:	1c43      	adds	r3, r0, #1
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	d106      	bne.n	800cc8a <__sflush_r+0x66>
 800cc7c:	6829      	ldr	r1, [r5, #0]
 800cc7e:	291d      	cmp	r1, #29
 800cc80:	d82c      	bhi.n	800ccdc <__sflush_r+0xb8>
 800cc82:	4a2a      	ldr	r2, [pc, #168]	; (800cd2c <__sflush_r+0x108>)
 800cc84:	40ca      	lsrs	r2, r1
 800cc86:	07d6      	lsls	r6, r2, #31
 800cc88:	d528      	bpl.n	800ccdc <__sflush_r+0xb8>
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	6062      	str	r2, [r4, #4]
 800cc8e:	04d9      	lsls	r1, r3, #19
 800cc90:	6922      	ldr	r2, [r4, #16]
 800cc92:	6022      	str	r2, [r4, #0]
 800cc94:	d504      	bpl.n	800cca0 <__sflush_r+0x7c>
 800cc96:	1c42      	adds	r2, r0, #1
 800cc98:	d101      	bne.n	800cc9e <__sflush_r+0x7a>
 800cc9a:	682b      	ldr	r3, [r5, #0]
 800cc9c:	b903      	cbnz	r3, 800cca0 <__sflush_r+0x7c>
 800cc9e:	6560      	str	r0, [r4, #84]	; 0x54
 800cca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cca2:	602f      	str	r7, [r5, #0]
 800cca4:	2900      	cmp	r1, #0
 800cca6:	d0ca      	beq.n	800cc3e <__sflush_r+0x1a>
 800cca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccac:	4299      	cmp	r1, r3
 800ccae:	d002      	beq.n	800ccb6 <__sflush_r+0x92>
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	f7ff fb47 	bl	800c344 <_free_r>
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	6360      	str	r0, [r4, #52]	; 0x34
 800ccba:	e7c1      	b.n	800cc40 <__sflush_r+0x1c>
 800ccbc:	6a21      	ldr	r1, [r4, #32]
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	47b0      	blx	r6
 800ccc4:	1c41      	adds	r1, r0, #1
 800ccc6:	d1c7      	bne.n	800cc58 <__sflush_r+0x34>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d0c4      	beq.n	800cc58 <__sflush_r+0x34>
 800ccce:	2b1d      	cmp	r3, #29
 800ccd0:	d001      	beq.n	800ccd6 <__sflush_r+0xb2>
 800ccd2:	2b16      	cmp	r3, #22
 800ccd4:	d101      	bne.n	800ccda <__sflush_r+0xb6>
 800ccd6:	602f      	str	r7, [r5, #0]
 800ccd8:	e7b1      	b.n	800cc3e <__sflush_r+0x1a>
 800ccda:	89a3      	ldrh	r3, [r4, #12]
 800ccdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cce0:	81a3      	strh	r3, [r4, #12]
 800cce2:	e7ad      	b.n	800cc40 <__sflush_r+0x1c>
 800cce4:	690f      	ldr	r7, [r1, #16]
 800cce6:	2f00      	cmp	r7, #0
 800cce8:	d0a9      	beq.n	800cc3e <__sflush_r+0x1a>
 800ccea:	0793      	lsls	r3, r2, #30
 800ccec:	680e      	ldr	r6, [r1, #0]
 800ccee:	bf08      	it	eq
 800ccf0:	694b      	ldreq	r3, [r1, #20]
 800ccf2:	600f      	str	r7, [r1, #0]
 800ccf4:	bf18      	it	ne
 800ccf6:	2300      	movne	r3, #0
 800ccf8:	eba6 0807 	sub.w	r8, r6, r7
 800ccfc:	608b      	str	r3, [r1, #8]
 800ccfe:	f1b8 0f00 	cmp.w	r8, #0
 800cd02:	dd9c      	ble.n	800cc3e <__sflush_r+0x1a>
 800cd04:	6a21      	ldr	r1, [r4, #32]
 800cd06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd08:	4643      	mov	r3, r8
 800cd0a:	463a      	mov	r2, r7
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	47b0      	blx	r6
 800cd10:	2800      	cmp	r0, #0
 800cd12:	dc06      	bgt.n	800cd22 <__sflush_r+0xfe>
 800cd14:	89a3      	ldrh	r3, [r4, #12]
 800cd16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd1a:	81a3      	strh	r3, [r4, #12]
 800cd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd20:	e78e      	b.n	800cc40 <__sflush_r+0x1c>
 800cd22:	4407      	add	r7, r0
 800cd24:	eba8 0800 	sub.w	r8, r8, r0
 800cd28:	e7e9      	b.n	800ccfe <__sflush_r+0xda>
 800cd2a:	bf00      	nop
 800cd2c:	20400001 	.word	0x20400001

0800cd30 <_fflush_r>:
 800cd30:	b538      	push	{r3, r4, r5, lr}
 800cd32:	690b      	ldr	r3, [r1, #16]
 800cd34:	4605      	mov	r5, r0
 800cd36:	460c      	mov	r4, r1
 800cd38:	b913      	cbnz	r3, 800cd40 <_fflush_r+0x10>
 800cd3a:	2500      	movs	r5, #0
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	bd38      	pop	{r3, r4, r5, pc}
 800cd40:	b118      	cbz	r0, 800cd4a <_fflush_r+0x1a>
 800cd42:	6983      	ldr	r3, [r0, #24]
 800cd44:	b90b      	cbnz	r3, 800cd4a <_fflush_r+0x1a>
 800cd46:	f000 f887 	bl	800ce58 <__sinit>
 800cd4a:	4b14      	ldr	r3, [pc, #80]	; (800cd9c <_fflush_r+0x6c>)
 800cd4c:	429c      	cmp	r4, r3
 800cd4e:	d11b      	bne.n	800cd88 <_fflush_r+0x58>
 800cd50:	686c      	ldr	r4, [r5, #4]
 800cd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d0ef      	beq.n	800cd3a <_fflush_r+0xa>
 800cd5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd5c:	07d0      	lsls	r0, r2, #31
 800cd5e:	d404      	bmi.n	800cd6a <_fflush_r+0x3a>
 800cd60:	0599      	lsls	r1, r3, #22
 800cd62:	d402      	bmi.n	800cd6a <_fflush_r+0x3a>
 800cd64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd66:	f000 f915 	bl	800cf94 <__retarget_lock_acquire_recursive>
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	f7ff ff59 	bl	800cc24 <__sflush_r>
 800cd72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd74:	07da      	lsls	r2, r3, #31
 800cd76:	4605      	mov	r5, r0
 800cd78:	d4e0      	bmi.n	800cd3c <_fflush_r+0xc>
 800cd7a:	89a3      	ldrh	r3, [r4, #12]
 800cd7c:	059b      	lsls	r3, r3, #22
 800cd7e:	d4dd      	bmi.n	800cd3c <_fflush_r+0xc>
 800cd80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd82:	f000 f908 	bl	800cf96 <__retarget_lock_release_recursive>
 800cd86:	e7d9      	b.n	800cd3c <_fflush_r+0xc>
 800cd88:	4b05      	ldr	r3, [pc, #20]	; (800cda0 <_fflush_r+0x70>)
 800cd8a:	429c      	cmp	r4, r3
 800cd8c:	d101      	bne.n	800cd92 <_fflush_r+0x62>
 800cd8e:	68ac      	ldr	r4, [r5, #8]
 800cd90:	e7df      	b.n	800cd52 <_fflush_r+0x22>
 800cd92:	4b04      	ldr	r3, [pc, #16]	; (800cda4 <_fflush_r+0x74>)
 800cd94:	429c      	cmp	r4, r3
 800cd96:	bf08      	it	eq
 800cd98:	68ec      	ldreq	r4, [r5, #12]
 800cd9a:	e7da      	b.n	800cd52 <_fflush_r+0x22>
 800cd9c:	0800d7c8 	.word	0x0800d7c8
 800cda0:	0800d7e8 	.word	0x0800d7e8
 800cda4:	0800d7a8 	.word	0x0800d7a8

0800cda8 <std>:
 800cda8:	2300      	movs	r3, #0
 800cdaa:	b510      	push	{r4, lr}
 800cdac:	4604      	mov	r4, r0
 800cdae:	e9c0 3300 	strd	r3, r3, [r0]
 800cdb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdb6:	6083      	str	r3, [r0, #8]
 800cdb8:	8181      	strh	r1, [r0, #12]
 800cdba:	6643      	str	r3, [r0, #100]	; 0x64
 800cdbc:	81c2      	strh	r2, [r0, #14]
 800cdbe:	6183      	str	r3, [r0, #24]
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	2208      	movs	r2, #8
 800cdc4:	305c      	adds	r0, #92	; 0x5c
 800cdc6:	f7ff fa3d 	bl	800c244 <memset>
 800cdca:	4b05      	ldr	r3, [pc, #20]	; (800cde0 <std+0x38>)
 800cdcc:	6263      	str	r3, [r4, #36]	; 0x24
 800cdce:	4b05      	ldr	r3, [pc, #20]	; (800cde4 <std+0x3c>)
 800cdd0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdd2:	4b05      	ldr	r3, [pc, #20]	; (800cde8 <std+0x40>)
 800cdd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdd6:	4b05      	ldr	r3, [pc, #20]	; (800cdec <std+0x44>)
 800cdd8:	6224      	str	r4, [r4, #32]
 800cdda:	6323      	str	r3, [r4, #48]	; 0x30
 800cddc:	bd10      	pop	{r4, pc}
 800cdde:	bf00      	nop
 800cde0:	0800d101 	.word	0x0800d101
 800cde4:	0800d123 	.word	0x0800d123
 800cde8:	0800d15b 	.word	0x0800d15b
 800cdec:	0800d17f 	.word	0x0800d17f

0800cdf0 <_cleanup_r>:
 800cdf0:	4901      	ldr	r1, [pc, #4]	; (800cdf8 <_cleanup_r+0x8>)
 800cdf2:	f000 b8af 	b.w	800cf54 <_fwalk_reent>
 800cdf6:	bf00      	nop
 800cdf8:	0800cd31 	.word	0x0800cd31

0800cdfc <__sfmoreglue>:
 800cdfc:	b570      	push	{r4, r5, r6, lr}
 800cdfe:	1e4a      	subs	r2, r1, #1
 800ce00:	2568      	movs	r5, #104	; 0x68
 800ce02:	4355      	muls	r5, r2
 800ce04:	460e      	mov	r6, r1
 800ce06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce0a:	f7ff faeb 	bl	800c3e4 <_malloc_r>
 800ce0e:	4604      	mov	r4, r0
 800ce10:	b140      	cbz	r0, 800ce24 <__sfmoreglue+0x28>
 800ce12:	2100      	movs	r1, #0
 800ce14:	e9c0 1600 	strd	r1, r6, [r0]
 800ce18:	300c      	adds	r0, #12
 800ce1a:	60a0      	str	r0, [r4, #8]
 800ce1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce20:	f7ff fa10 	bl	800c244 <memset>
 800ce24:	4620      	mov	r0, r4
 800ce26:	bd70      	pop	{r4, r5, r6, pc}

0800ce28 <__sfp_lock_acquire>:
 800ce28:	4801      	ldr	r0, [pc, #4]	; (800ce30 <__sfp_lock_acquire+0x8>)
 800ce2a:	f000 b8b3 	b.w	800cf94 <__retarget_lock_acquire_recursive>
 800ce2e:	bf00      	nop
 800ce30:	200013c0 	.word	0x200013c0

0800ce34 <__sfp_lock_release>:
 800ce34:	4801      	ldr	r0, [pc, #4]	; (800ce3c <__sfp_lock_release+0x8>)
 800ce36:	f000 b8ae 	b.w	800cf96 <__retarget_lock_release_recursive>
 800ce3a:	bf00      	nop
 800ce3c:	200013c0 	.word	0x200013c0

0800ce40 <__sinit_lock_acquire>:
 800ce40:	4801      	ldr	r0, [pc, #4]	; (800ce48 <__sinit_lock_acquire+0x8>)
 800ce42:	f000 b8a7 	b.w	800cf94 <__retarget_lock_acquire_recursive>
 800ce46:	bf00      	nop
 800ce48:	200013bb 	.word	0x200013bb

0800ce4c <__sinit_lock_release>:
 800ce4c:	4801      	ldr	r0, [pc, #4]	; (800ce54 <__sinit_lock_release+0x8>)
 800ce4e:	f000 b8a2 	b.w	800cf96 <__retarget_lock_release_recursive>
 800ce52:	bf00      	nop
 800ce54:	200013bb 	.word	0x200013bb

0800ce58 <__sinit>:
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	f7ff fff0 	bl	800ce40 <__sinit_lock_acquire>
 800ce60:	69a3      	ldr	r3, [r4, #24]
 800ce62:	b11b      	cbz	r3, 800ce6c <__sinit+0x14>
 800ce64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce68:	f7ff bff0 	b.w	800ce4c <__sinit_lock_release>
 800ce6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce70:	6523      	str	r3, [r4, #80]	; 0x50
 800ce72:	4b13      	ldr	r3, [pc, #76]	; (800cec0 <__sinit+0x68>)
 800ce74:	4a13      	ldr	r2, [pc, #76]	; (800cec4 <__sinit+0x6c>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce7a:	42a3      	cmp	r3, r4
 800ce7c:	bf04      	itt	eq
 800ce7e:	2301      	moveq	r3, #1
 800ce80:	61a3      	streq	r3, [r4, #24]
 800ce82:	4620      	mov	r0, r4
 800ce84:	f000 f820 	bl	800cec8 <__sfp>
 800ce88:	6060      	str	r0, [r4, #4]
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f000 f81c 	bl	800cec8 <__sfp>
 800ce90:	60a0      	str	r0, [r4, #8]
 800ce92:	4620      	mov	r0, r4
 800ce94:	f000 f818 	bl	800cec8 <__sfp>
 800ce98:	2200      	movs	r2, #0
 800ce9a:	60e0      	str	r0, [r4, #12]
 800ce9c:	2104      	movs	r1, #4
 800ce9e:	6860      	ldr	r0, [r4, #4]
 800cea0:	f7ff ff82 	bl	800cda8 <std>
 800cea4:	68a0      	ldr	r0, [r4, #8]
 800cea6:	2201      	movs	r2, #1
 800cea8:	2109      	movs	r1, #9
 800ceaa:	f7ff ff7d 	bl	800cda8 <std>
 800ceae:	68e0      	ldr	r0, [r4, #12]
 800ceb0:	2202      	movs	r2, #2
 800ceb2:	2112      	movs	r1, #18
 800ceb4:	f7ff ff78 	bl	800cda8 <std>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	61a3      	str	r3, [r4, #24]
 800cebc:	e7d2      	b.n	800ce64 <__sinit+0xc>
 800cebe:	bf00      	nop
 800cec0:	0800d6bc 	.word	0x0800d6bc
 800cec4:	0800cdf1 	.word	0x0800cdf1

0800cec8 <__sfp>:
 800cec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceca:	4607      	mov	r7, r0
 800cecc:	f7ff ffac 	bl	800ce28 <__sfp_lock_acquire>
 800ced0:	4b1e      	ldr	r3, [pc, #120]	; (800cf4c <__sfp+0x84>)
 800ced2:	681e      	ldr	r6, [r3, #0]
 800ced4:	69b3      	ldr	r3, [r6, #24]
 800ced6:	b913      	cbnz	r3, 800cede <__sfp+0x16>
 800ced8:	4630      	mov	r0, r6
 800ceda:	f7ff ffbd 	bl	800ce58 <__sinit>
 800cede:	3648      	adds	r6, #72	; 0x48
 800cee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cee4:	3b01      	subs	r3, #1
 800cee6:	d503      	bpl.n	800cef0 <__sfp+0x28>
 800cee8:	6833      	ldr	r3, [r6, #0]
 800ceea:	b30b      	cbz	r3, 800cf30 <__sfp+0x68>
 800ceec:	6836      	ldr	r6, [r6, #0]
 800ceee:	e7f7      	b.n	800cee0 <__sfp+0x18>
 800cef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cef4:	b9d5      	cbnz	r5, 800cf2c <__sfp+0x64>
 800cef6:	4b16      	ldr	r3, [pc, #88]	; (800cf50 <__sfp+0x88>)
 800cef8:	60e3      	str	r3, [r4, #12]
 800cefa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cefe:	6665      	str	r5, [r4, #100]	; 0x64
 800cf00:	f000 f847 	bl	800cf92 <__retarget_lock_init_recursive>
 800cf04:	f7ff ff96 	bl	800ce34 <__sfp_lock_release>
 800cf08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf10:	6025      	str	r5, [r4, #0]
 800cf12:	61a5      	str	r5, [r4, #24]
 800cf14:	2208      	movs	r2, #8
 800cf16:	4629      	mov	r1, r5
 800cf18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf1c:	f7ff f992 	bl	800c244 <memset>
 800cf20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf28:	4620      	mov	r0, r4
 800cf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf2c:	3468      	adds	r4, #104	; 0x68
 800cf2e:	e7d9      	b.n	800cee4 <__sfp+0x1c>
 800cf30:	2104      	movs	r1, #4
 800cf32:	4638      	mov	r0, r7
 800cf34:	f7ff ff62 	bl	800cdfc <__sfmoreglue>
 800cf38:	4604      	mov	r4, r0
 800cf3a:	6030      	str	r0, [r6, #0]
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d1d5      	bne.n	800ceec <__sfp+0x24>
 800cf40:	f7ff ff78 	bl	800ce34 <__sfp_lock_release>
 800cf44:	230c      	movs	r3, #12
 800cf46:	603b      	str	r3, [r7, #0]
 800cf48:	e7ee      	b.n	800cf28 <__sfp+0x60>
 800cf4a:	bf00      	nop
 800cf4c:	0800d6bc 	.word	0x0800d6bc
 800cf50:	ffff0001 	.word	0xffff0001

0800cf54 <_fwalk_reent>:
 800cf54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf58:	4606      	mov	r6, r0
 800cf5a:	4688      	mov	r8, r1
 800cf5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf60:	2700      	movs	r7, #0
 800cf62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf66:	f1b9 0901 	subs.w	r9, r9, #1
 800cf6a:	d505      	bpl.n	800cf78 <_fwalk_reent+0x24>
 800cf6c:	6824      	ldr	r4, [r4, #0]
 800cf6e:	2c00      	cmp	r4, #0
 800cf70:	d1f7      	bne.n	800cf62 <_fwalk_reent+0xe>
 800cf72:	4638      	mov	r0, r7
 800cf74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf78:	89ab      	ldrh	r3, [r5, #12]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d907      	bls.n	800cf8e <_fwalk_reent+0x3a>
 800cf7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf82:	3301      	adds	r3, #1
 800cf84:	d003      	beq.n	800cf8e <_fwalk_reent+0x3a>
 800cf86:	4629      	mov	r1, r5
 800cf88:	4630      	mov	r0, r6
 800cf8a:	47c0      	blx	r8
 800cf8c:	4307      	orrs	r7, r0
 800cf8e:	3568      	adds	r5, #104	; 0x68
 800cf90:	e7e9      	b.n	800cf66 <_fwalk_reent+0x12>

0800cf92 <__retarget_lock_init_recursive>:
 800cf92:	4770      	bx	lr

0800cf94 <__retarget_lock_acquire_recursive>:
 800cf94:	4770      	bx	lr

0800cf96 <__retarget_lock_release_recursive>:
 800cf96:	4770      	bx	lr

0800cf98 <__swhatbuf_r>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	460e      	mov	r6, r1
 800cf9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa0:	2900      	cmp	r1, #0
 800cfa2:	b096      	sub	sp, #88	; 0x58
 800cfa4:	4614      	mov	r4, r2
 800cfa6:	461d      	mov	r5, r3
 800cfa8:	da07      	bge.n	800cfba <__swhatbuf_r+0x22>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	602b      	str	r3, [r5, #0]
 800cfae:	89b3      	ldrh	r3, [r6, #12]
 800cfb0:	061a      	lsls	r2, r3, #24
 800cfb2:	d410      	bmi.n	800cfd6 <__swhatbuf_r+0x3e>
 800cfb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfb8:	e00e      	b.n	800cfd8 <__swhatbuf_r+0x40>
 800cfba:	466a      	mov	r2, sp
 800cfbc:	f000 f906 	bl	800d1cc <_fstat_r>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	dbf2      	blt.n	800cfaa <__swhatbuf_r+0x12>
 800cfc4:	9a01      	ldr	r2, [sp, #4]
 800cfc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfce:	425a      	negs	r2, r3
 800cfd0:	415a      	adcs	r2, r3
 800cfd2:	602a      	str	r2, [r5, #0]
 800cfd4:	e7ee      	b.n	800cfb4 <__swhatbuf_r+0x1c>
 800cfd6:	2340      	movs	r3, #64	; 0x40
 800cfd8:	2000      	movs	r0, #0
 800cfda:	6023      	str	r3, [r4, #0]
 800cfdc:	b016      	add	sp, #88	; 0x58
 800cfde:	bd70      	pop	{r4, r5, r6, pc}

0800cfe0 <__smakebuf_r>:
 800cfe0:	898b      	ldrh	r3, [r1, #12]
 800cfe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfe4:	079d      	lsls	r5, r3, #30
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	460c      	mov	r4, r1
 800cfea:	d507      	bpl.n	800cffc <__smakebuf_r+0x1c>
 800cfec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cff0:	6023      	str	r3, [r4, #0]
 800cff2:	6123      	str	r3, [r4, #16]
 800cff4:	2301      	movs	r3, #1
 800cff6:	6163      	str	r3, [r4, #20]
 800cff8:	b002      	add	sp, #8
 800cffa:	bd70      	pop	{r4, r5, r6, pc}
 800cffc:	ab01      	add	r3, sp, #4
 800cffe:	466a      	mov	r2, sp
 800d000:	f7ff ffca 	bl	800cf98 <__swhatbuf_r>
 800d004:	9900      	ldr	r1, [sp, #0]
 800d006:	4605      	mov	r5, r0
 800d008:	4630      	mov	r0, r6
 800d00a:	f7ff f9eb 	bl	800c3e4 <_malloc_r>
 800d00e:	b948      	cbnz	r0, 800d024 <__smakebuf_r+0x44>
 800d010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d014:	059a      	lsls	r2, r3, #22
 800d016:	d4ef      	bmi.n	800cff8 <__smakebuf_r+0x18>
 800d018:	f023 0303 	bic.w	r3, r3, #3
 800d01c:	f043 0302 	orr.w	r3, r3, #2
 800d020:	81a3      	strh	r3, [r4, #12]
 800d022:	e7e3      	b.n	800cfec <__smakebuf_r+0xc>
 800d024:	4b0d      	ldr	r3, [pc, #52]	; (800d05c <__smakebuf_r+0x7c>)
 800d026:	62b3      	str	r3, [r6, #40]	; 0x28
 800d028:	89a3      	ldrh	r3, [r4, #12]
 800d02a:	6020      	str	r0, [r4, #0]
 800d02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d030:	81a3      	strh	r3, [r4, #12]
 800d032:	9b00      	ldr	r3, [sp, #0]
 800d034:	6163      	str	r3, [r4, #20]
 800d036:	9b01      	ldr	r3, [sp, #4]
 800d038:	6120      	str	r0, [r4, #16]
 800d03a:	b15b      	cbz	r3, 800d054 <__smakebuf_r+0x74>
 800d03c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d040:	4630      	mov	r0, r6
 800d042:	f000 f8d5 	bl	800d1f0 <_isatty_r>
 800d046:	b128      	cbz	r0, 800d054 <__smakebuf_r+0x74>
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	f023 0303 	bic.w	r3, r3, #3
 800d04e:	f043 0301 	orr.w	r3, r3, #1
 800d052:	81a3      	strh	r3, [r4, #12]
 800d054:	89a0      	ldrh	r0, [r4, #12]
 800d056:	4305      	orrs	r5, r0
 800d058:	81a5      	strh	r5, [r4, #12]
 800d05a:	e7cd      	b.n	800cff8 <__smakebuf_r+0x18>
 800d05c:	0800cdf1 	.word	0x0800cdf1

0800d060 <__malloc_lock>:
 800d060:	4801      	ldr	r0, [pc, #4]	; (800d068 <__malloc_lock+0x8>)
 800d062:	f7ff bf97 	b.w	800cf94 <__retarget_lock_acquire_recursive>
 800d066:	bf00      	nop
 800d068:	200013bc 	.word	0x200013bc

0800d06c <__malloc_unlock>:
 800d06c:	4801      	ldr	r0, [pc, #4]	; (800d074 <__malloc_unlock+0x8>)
 800d06e:	f7ff bf92 	b.w	800cf96 <__retarget_lock_release_recursive>
 800d072:	bf00      	nop
 800d074:	200013bc 	.word	0x200013bc

0800d078 <_raise_r>:
 800d078:	291f      	cmp	r1, #31
 800d07a:	b538      	push	{r3, r4, r5, lr}
 800d07c:	4604      	mov	r4, r0
 800d07e:	460d      	mov	r5, r1
 800d080:	d904      	bls.n	800d08c <_raise_r+0x14>
 800d082:	2316      	movs	r3, #22
 800d084:	6003      	str	r3, [r0, #0]
 800d086:	f04f 30ff 	mov.w	r0, #4294967295
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d08e:	b112      	cbz	r2, 800d096 <_raise_r+0x1e>
 800d090:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d094:	b94b      	cbnz	r3, 800d0aa <_raise_r+0x32>
 800d096:	4620      	mov	r0, r4
 800d098:	f000 f830 	bl	800d0fc <_getpid_r>
 800d09c:	462a      	mov	r2, r5
 800d09e:	4601      	mov	r1, r0
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0a6:	f000 b817 	b.w	800d0d8 <_kill_r>
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d00a      	beq.n	800d0c4 <_raise_r+0x4c>
 800d0ae:	1c59      	adds	r1, r3, #1
 800d0b0:	d103      	bne.n	800d0ba <_raise_r+0x42>
 800d0b2:	2316      	movs	r3, #22
 800d0b4:	6003      	str	r3, [r0, #0]
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	e7e7      	b.n	800d08a <_raise_r+0x12>
 800d0ba:	2400      	movs	r4, #0
 800d0bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	4798      	blx	r3
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	e7e0      	b.n	800d08a <_raise_r+0x12>

0800d0c8 <raise>:
 800d0c8:	4b02      	ldr	r3, [pc, #8]	; (800d0d4 <raise+0xc>)
 800d0ca:	4601      	mov	r1, r0
 800d0cc:	6818      	ldr	r0, [r3, #0]
 800d0ce:	f7ff bfd3 	b.w	800d078 <_raise_r>
 800d0d2:	bf00      	nop
 800d0d4:	2000004c 	.word	0x2000004c

0800d0d8 <_kill_r>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	4d07      	ldr	r5, [pc, #28]	; (800d0f8 <_kill_r+0x20>)
 800d0dc:	2300      	movs	r3, #0
 800d0de:	4604      	mov	r4, r0
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	602b      	str	r3, [r5, #0]
 800d0e6:	f7f8 fbfd 	bl	80058e4 <_kill>
 800d0ea:	1c43      	adds	r3, r0, #1
 800d0ec:	d102      	bne.n	800d0f4 <_kill_r+0x1c>
 800d0ee:	682b      	ldr	r3, [r5, #0]
 800d0f0:	b103      	cbz	r3, 800d0f4 <_kill_r+0x1c>
 800d0f2:	6023      	str	r3, [r4, #0]
 800d0f4:	bd38      	pop	{r3, r4, r5, pc}
 800d0f6:	bf00      	nop
 800d0f8:	200013c4 	.word	0x200013c4

0800d0fc <_getpid_r>:
 800d0fc:	f7f8 bbea 	b.w	80058d4 <_getpid>

0800d100 <__sread>:
 800d100:	b510      	push	{r4, lr}
 800d102:	460c      	mov	r4, r1
 800d104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d108:	f000 f894 	bl	800d234 <_read_r>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	bfab      	itete	ge
 800d110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d112:	89a3      	ldrhlt	r3, [r4, #12]
 800d114:	181b      	addge	r3, r3, r0
 800d116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d11a:	bfac      	ite	ge
 800d11c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d11e:	81a3      	strhlt	r3, [r4, #12]
 800d120:	bd10      	pop	{r4, pc}

0800d122 <__swrite>:
 800d122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d126:	461f      	mov	r7, r3
 800d128:	898b      	ldrh	r3, [r1, #12]
 800d12a:	05db      	lsls	r3, r3, #23
 800d12c:	4605      	mov	r5, r0
 800d12e:	460c      	mov	r4, r1
 800d130:	4616      	mov	r6, r2
 800d132:	d505      	bpl.n	800d140 <__swrite+0x1e>
 800d134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d138:	2302      	movs	r3, #2
 800d13a:	2200      	movs	r2, #0
 800d13c:	f000 f868 	bl	800d210 <_lseek_r>
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d14a:	81a3      	strh	r3, [r4, #12]
 800d14c:	4632      	mov	r2, r6
 800d14e:	463b      	mov	r3, r7
 800d150:	4628      	mov	r0, r5
 800d152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d156:	f000 b817 	b.w	800d188 <_write_r>

0800d15a <__sseek>:
 800d15a:	b510      	push	{r4, lr}
 800d15c:	460c      	mov	r4, r1
 800d15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d162:	f000 f855 	bl	800d210 <_lseek_r>
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	bf15      	itete	ne
 800d16c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d16e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d176:	81a3      	strheq	r3, [r4, #12]
 800d178:	bf18      	it	ne
 800d17a:	81a3      	strhne	r3, [r4, #12]
 800d17c:	bd10      	pop	{r4, pc}

0800d17e <__sclose>:
 800d17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d182:	f000 b813 	b.w	800d1ac <_close_r>
	...

0800d188 <_write_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	4d07      	ldr	r5, [pc, #28]	; (800d1a8 <_write_r+0x20>)
 800d18c:	4604      	mov	r4, r0
 800d18e:	4608      	mov	r0, r1
 800d190:	4611      	mov	r1, r2
 800d192:	2200      	movs	r2, #0
 800d194:	602a      	str	r2, [r5, #0]
 800d196:	461a      	mov	r2, r3
 800d198:	f7f8 fbdb 	bl	8005952 <_write>
 800d19c:	1c43      	adds	r3, r0, #1
 800d19e:	d102      	bne.n	800d1a6 <_write_r+0x1e>
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	b103      	cbz	r3, 800d1a6 <_write_r+0x1e>
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	bd38      	pop	{r3, r4, r5, pc}
 800d1a8:	200013c4 	.word	0x200013c4

0800d1ac <_close_r>:
 800d1ac:	b538      	push	{r3, r4, r5, lr}
 800d1ae:	4d06      	ldr	r5, [pc, #24]	; (800d1c8 <_close_r+0x1c>)
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	4608      	mov	r0, r1
 800d1b6:	602b      	str	r3, [r5, #0]
 800d1b8:	f7f8 fbe7 	bl	800598a <_close>
 800d1bc:	1c43      	adds	r3, r0, #1
 800d1be:	d102      	bne.n	800d1c6 <_close_r+0x1a>
 800d1c0:	682b      	ldr	r3, [r5, #0]
 800d1c2:	b103      	cbz	r3, 800d1c6 <_close_r+0x1a>
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	200013c4 	.word	0x200013c4

0800d1cc <_fstat_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4d07      	ldr	r5, [pc, #28]	; (800d1ec <_fstat_r+0x20>)
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	4608      	mov	r0, r1
 800d1d6:	4611      	mov	r1, r2
 800d1d8:	602b      	str	r3, [r5, #0]
 800d1da:	f7f8 fbe2 	bl	80059a2 <_fstat>
 800d1de:	1c43      	adds	r3, r0, #1
 800d1e0:	d102      	bne.n	800d1e8 <_fstat_r+0x1c>
 800d1e2:	682b      	ldr	r3, [r5, #0]
 800d1e4:	b103      	cbz	r3, 800d1e8 <_fstat_r+0x1c>
 800d1e6:	6023      	str	r3, [r4, #0]
 800d1e8:	bd38      	pop	{r3, r4, r5, pc}
 800d1ea:	bf00      	nop
 800d1ec:	200013c4 	.word	0x200013c4

0800d1f0 <_isatty_r>:
 800d1f0:	b538      	push	{r3, r4, r5, lr}
 800d1f2:	4d06      	ldr	r5, [pc, #24]	; (800d20c <_isatty_r+0x1c>)
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	4604      	mov	r4, r0
 800d1f8:	4608      	mov	r0, r1
 800d1fa:	602b      	str	r3, [r5, #0]
 800d1fc:	f7f8 fbe1 	bl	80059c2 <_isatty>
 800d200:	1c43      	adds	r3, r0, #1
 800d202:	d102      	bne.n	800d20a <_isatty_r+0x1a>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	b103      	cbz	r3, 800d20a <_isatty_r+0x1a>
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	bd38      	pop	{r3, r4, r5, pc}
 800d20c:	200013c4 	.word	0x200013c4

0800d210 <_lseek_r>:
 800d210:	b538      	push	{r3, r4, r5, lr}
 800d212:	4d07      	ldr	r5, [pc, #28]	; (800d230 <_lseek_r+0x20>)
 800d214:	4604      	mov	r4, r0
 800d216:	4608      	mov	r0, r1
 800d218:	4611      	mov	r1, r2
 800d21a:	2200      	movs	r2, #0
 800d21c:	602a      	str	r2, [r5, #0]
 800d21e:	461a      	mov	r2, r3
 800d220:	f7f8 fbda 	bl	80059d8 <_lseek>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_lseek_r+0x1e>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_lseek_r+0x1e>
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	200013c4 	.word	0x200013c4

0800d234 <_read_r>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	4d07      	ldr	r5, [pc, #28]	; (800d254 <_read_r+0x20>)
 800d238:	4604      	mov	r4, r0
 800d23a:	4608      	mov	r0, r1
 800d23c:	4611      	mov	r1, r2
 800d23e:	2200      	movs	r2, #0
 800d240:	602a      	str	r2, [r5, #0]
 800d242:	461a      	mov	r2, r3
 800d244:	f7f8 fb68 	bl	8005918 <_read>
 800d248:	1c43      	adds	r3, r0, #1
 800d24a:	d102      	bne.n	800d252 <_read_r+0x1e>
 800d24c:	682b      	ldr	r3, [r5, #0]
 800d24e:	b103      	cbz	r3, 800d252 <_read_r+0x1e>
 800d250:	6023      	str	r3, [r4, #0]
 800d252:	bd38      	pop	{r3, r4, r5, pc}
 800d254:	200013c4 	.word	0x200013c4

0800d258 <_init>:
 800d258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25a:	bf00      	nop
 800d25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d25e:	bc08      	pop	{r3}
 800d260:	469e      	mov	lr, r3
 800d262:	4770      	bx	lr

0800d264 <_fini>:
 800d264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d266:	bf00      	nop
 800d268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d26a:	bc08      	pop	{r3}
 800d26c:	469e      	mov	lr, r3
 800d26e:	4770      	bx	lr
