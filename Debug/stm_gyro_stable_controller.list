
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800384c  0800384c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003854  08003854  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003854  08003854  00013854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800385c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000002cc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af96  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001883  00000000  00000000  0002afd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  0002c858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000838  00000000  00000000  0002d118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f88e  00000000  00000000  0002d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4a2  00000000  00000000  0004d1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c07fc  00000000  00000000  00057680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00117e7c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002370  00000000  00000000  00117ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003814 	.word	0x08003814

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003814 	.word	0x08003814

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_UART_RxCpltCallback>:
uint8_t* LostByte;

uint32_t PackageLastTimeReset;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80004c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004cc:	483b      	ldr	r0, [pc, #236]	; (80005bc <HAL_UART_RxCpltCallback+0xfc>)
 80004ce:	f001 fc0c 	bl	8001cea <HAL_GPIO_TogglePin>

	if (UartHandle->Instance == USART2)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a3a      	ldr	r2, [pc, #232]	; (80005c0 <HAL_UART_RxCpltCallback+0x100>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d16b      	bne.n	80005b4 <HAL_UART_RxCpltCallback+0xf4>
	{
		if (USART2ReceiveState == 0)
 80004dc:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <HAL_UART_RxCpltCallback+0x104>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d11f      	bne.n	8000526 <HAL_UART_RxCpltCallback+0x66>
		{
			if ((SerialControlWheelsRequest.CR != 13) || (SerialControlWheelsRequest.LF != 10))
 80004e6:	4b38      	ldr	r3, [pc, #224]	; (80005c8 <HAL_UART_RxCpltCallback+0x108>)
 80004e8:	7b9b      	ldrb	r3, [r3, #14]
 80004ea:	2b0d      	cmp	r3, #13
 80004ec:	d103      	bne.n	80004f6 <HAL_UART_RxCpltCallback+0x36>
 80004ee:	4b36      	ldr	r3, [pc, #216]	; (80005c8 <HAL_UART_RxCpltCallback+0x108>)
 80004f0:	7bdb      	ldrb	r3, [r3, #15]
 80004f2:	2b0a      	cmp	r3, #10
 80004f4:	d00c      	beq.n	8000510 <HAL_UART_RxCpltCallback+0x50>
			{
				Res = HAL_UART_Receive_DMA(&huart2, LostByte, 1);
 80004f6:	4b35      	ldr	r3, [pc, #212]	; (80005cc <HAL_UART_RxCpltCallback+0x10c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2201      	movs	r2, #1
 80004fc:	4619      	mov	r1, r3
 80004fe:	4834      	ldr	r0, [pc, #208]	; (80005d0 <HAL_UART_RxCpltCallback+0x110>)
 8000500:	f002 f958 	bl	80027b4 <HAL_UART_Receive_DMA>
 8000504:	4603      	mov	r3, r0
 8000506:	73fb      	strb	r3, [r7, #15]
				USART2ReceiveState = 1;
 8000508:	4b2e      	ldr	r3, [pc, #184]	; (80005c4 <HAL_UART_RxCpltCallback+0x104>)
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	e042      	b.n	8000596 <HAL_UART_RxCpltCallback+0xd6>
			}
			else
			{
				USART2ReceiveState = 10;
 8000510:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <HAL_UART_RxCpltCallback+0x104>)
 8000512:	220a      	movs	r2, #10
 8000514:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsRequest.Buffer, REQUEST_SIZE);
 8000516:	2210      	movs	r2, #16
 8000518:	492b      	ldr	r1, [pc, #172]	; (80005c8 <HAL_UART_RxCpltCallback+0x108>)
 800051a:	482d      	ldr	r0, [pc, #180]	; (80005d0 <HAL_UART_RxCpltCallback+0x110>)
 800051c:	f002 f94a 	bl	80027b4 <HAL_UART_Receive_DMA>
 8000520:	4603      	mov	r3, r0
 8000522:	73fb      	strb	r3, [r7, #15]
 8000524:	e037      	b.n	8000596 <HAL_UART_RxCpltCallback+0xd6>
			}
		}
		else
		if(USART2ReceiveState == 1)
 8000526:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <HAL_UART_RxCpltCallback+0x104>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b01      	cmp	r3, #1
 800052e:	d111      	bne.n	8000554 <HAL_UART_RxCpltCallback+0x94>
			{
				if (LostByte[0] == 13)
 8000530:	4b26      	ldr	r3, [pc, #152]	; (80005cc <HAL_UART_RxCpltCallback+0x10c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b0d      	cmp	r3, #13
 8000538:	d102      	bne.n	8000540 <HAL_UART_RxCpltCallback+0x80>
				{
					USART2ReceiveState = 2;
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <HAL_UART_RxCpltCallback+0x104>)
 800053c:	2202      	movs	r2, #2
 800053e:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8000540:	4b22      	ldr	r3, [pc, #136]	; (80005cc <HAL_UART_RxCpltCallback+0x10c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	4821      	ldr	r0, [pc, #132]	; (80005d0 <HAL_UART_RxCpltCallback+0x110>)
 800054a:	f002 f933 	bl	80027b4 <HAL_UART_Receive_DMA>
 800054e:	4603      	mov	r3, r0
 8000550:	73fb      	strb	r3, [r7, #15]
 8000552:	e020      	b.n	8000596 <HAL_UART_RxCpltCallback+0xd6>
			}
			else if (USART2ReceiveState == 2)
 8000554:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <HAL_UART_RxCpltCallback+0x104>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b02      	cmp	r3, #2
 800055c:	d11b      	bne.n	8000596 <HAL_UART_RxCpltCallback+0xd6>
				{
					if (LostByte[0] == 10)
 800055e:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <HAL_UART_RxCpltCallback+0x10c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b0a      	cmp	r3, #10
 8000566:	d10a      	bne.n	800057e <HAL_UART_RxCpltCallback+0xbe>
					{
						USART2ReceiveState = 0;
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <HAL_UART_RxCpltCallback+0x104>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsRequest.Buffer, REQUEST_SIZE);
 800056e:	2210      	movs	r2, #16
 8000570:	4915      	ldr	r1, [pc, #84]	; (80005c8 <HAL_UART_RxCpltCallback+0x108>)
 8000572:	4817      	ldr	r0, [pc, #92]	; (80005d0 <HAL_UART_RxCpltCallback+0x110>)
 8000574:	f002 f91e 	bl	80027b4 <HAL_UART_Receive_DMA>
 8000578:	4603      	mov	r3, r0
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	e00b      	b.n	8000596 <HAL_UART_RxCpltCallback+0xd6>
					}
					else
					{
						USART2ReceiveState = 1;
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <HAL_UART_RxCpltCallback+0x104>)
 8000580:	2201      	movs	r2, #1
 8000582:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <HAL_UART_RxCpltCallback+0x10c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2201      	movs	r2, #1
 800058a:	4619      	mov	r1, r3
 800058c:	4810      	ldr	r0, [pc, #64]	; (80005d0 <HAL_UART_RxCpltCallback+0x110>)
 800058e:	f002 f911 	bl	80027b4 <HAL_UART_Receive_DMA>
 8000592:	4603      	mov	r3, r0
 8000594:	73fb      	strb	r3, [r7, #15]
					}
			}

			if (Res != HAL_OK)
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <HAL_UART_RxCpltCallback+0xf4>
			{
				MX_USART2_UART_Init();
 800059c:	f000 f924 	bl	80007e8 <MX_USART2_UART_Init>
				USART2ReceiveState = 0;
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_UART_RxCpltCallback+0x104>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsRequest.Buffer, REQUEST_SIZE);
 80005a6:	2210      	movs	r2, #16
 80005a8:	4907      	ldr	r1, [pc, #28]	; (80005c8 <HAL_UART_RxCpltCallback+0x108>)
 80005aa:	4809      	ldr	r0, [pc, #36]	; (80005d0 <HAL_UART_RxCpltCallback+0x110>)
 80005ac:	f002 f902 	bl	80027b4 <HAL_UART_Receive_DMA>
 80005b0:	4603      	mov	r3, r0
 80005b2:	73fb      	strb	r3, [r7, #15]
			}
	}
}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40020c00 	.word	0x40020c00
 80005c0:	40004400 	.word	0x40004400
 80005c4:	20000028 	.word	0x20000028
 80005c8:	200000ac 	.word	0x200000ac
 80005cc:	200002d0 	.word	0x200002d0
 80005d0:	2000028c 	.word	0x2000028c

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fc4c 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f83a 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f972 	bl	80008c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e4:	f000 f92a 	bl	800083c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f8fe 	bl	80007e8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005ec:	f000 f8d2 	bl	8000794 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005f0:	f000 f89a 	bl	8000728 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  SerialControlWheelsResponce.CR=13;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <main+0x68>)
 80005f6:	220d      	movs	r2, #13
 80005f8:	739a      	strb	r2, [r3, #14]
  SerialControlWheelsResponce.LF=10;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <main+0x68>)
 80005fc:	220a      	movs	r2, #10
 80005fe:	73da      	strb	r2, [r3, #15]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GetTick() - PackageLastTimeReset > 1000)
 8000600:	f000 fc9e 	bl	8000f40 <HAL_GetTick>
 8000604:	4602      	mov	r2, r0
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <main+0x6c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000610:	d9f6      	bls.n	8000600 <main+0x2c>
	  {
		  MX_USART2_UART_Init();
 8000612:	f000 f8e9 	bl	80007e8 <MX_USART2_UART_Init>
		  USART2ReceiveState=0;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <main+0x70>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsRequest.Buffer, REQUEST_SIZE);
 800061c:	2210      	movs	r2, #16
 800061e:	490a      	ldr	r1, [pc, #40]	; (8000648 <main+0x74>)
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <main+0x78>)
 8000622:	f002 f8c7 	bl	80027b4 <HAL_UART_Receive_DMA>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <main+0x7c>)
 800062c:	f001 fb5d 	bl	8001cea <HAL_GPIO_TogglePin>
		  PackageLastTimeReset = HAL_GetTick();
 8000630:	f000 fc86 	bl	8000f40 <HAL_GetTick>
 8000634:	4603      	mov	r3, r0
 8000636:	4a02      	ldr	r2, [pc, #8]	; (8000640 <main+0x6c>)
 8000638:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - PackageLastTimeReset > 1000)
 800063a:	e7e1      	b.n	8000600 <main+0x2c>
 800063c:	2000009c 	.word	0x2000009c
 8000640:	20000288 	.word	0x20000288
 8000644:	20000028 	.word	0x20000028
 8000648:	200000ac 	.word	0x200000ac
 800064c:	2000028c 	.word	0x2000028c
 8000650:	40020c00 	.word	0x40020c00

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f003 f8ce 	bl	8003804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a27      	ldr	r2, [pc, #156]	; (8000720 <SystemClock_Config+0xcc>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a21      	ldr	r2, [pc, #132]	; (8000724 <SystemClock_Config+0xd0>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c8:	23a8      	movs	r3, #168	; 0xa8
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fb21 	bl	8001d20 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e4:	f000 f966 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2105      	movs	r1, #5
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fd82 	bl	8002210 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000712:	f000 f94f 	bl	80009b4 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_SPI1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI1_Init+0x64>)
 800077a:	f001 ff45 	bl	8002608 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f916 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000220 	.word	0x20000220
 8000790:	40013000 	.word	0x40013000

08000794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_USART1_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007cc:	f001 ffa5 	bl	800271a <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f8ed 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200001dc 	.word	0x200001dc
 80007e4:	40011000 	.word	0x40011000

080007e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_USART2_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_USART2_UART_Init+0x4c>)
 8000820:	f001 ff7b 	bl	800271a <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f8c3 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000028c 	.word	0x2000028c
 8000838:	40004400 	.word	0x40004400

0800083c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_DMA_Init+0x88>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <MX_DMA_Init+0x88>)
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_DMA_Init+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_DMA_Init+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <MX_DMA_Init+0x88>)
 8000868:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_DMA_Init+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2010      	movs	r0, #16
 8000880:	f000 fc45 	bl	800110e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000884:	2010      	movs	r0, #16
 8000886:	f000 fc5e 	bl	8001146 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2011      	movs	r0, #17
 8000890:	f000 fc3d 	bl	800110e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000894:	2011      	movs	r0, #17
 8000896:	f000 fc56 	bl	8001146 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	203a      	movs	r0, #58	; 0x3a
 80008a0:	f000 fc35 	bl	800110e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008a4:	203a      	movs	r0, #58	; 0x3a
 80008a6:	f000 fc4e 	bl	8001146 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2046      	movs	r0, #70	; 0x46
 80008b0:	f000 fc2d 	bl	800110e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80008b4:	2046      	movs	r0, #70	; 0x46
 80008b6:	f000 fc46 	bl	8001146 <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <MX_GPIO_Init+0xe0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a30      	ldr	r2, [pc, #192]	; (80009a8 <MX_GPIO_Init+0xe0>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b2e      	ldr	r3, [pc, #184]	; (80009a8 <MX_GPIO_Init+0xe0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <MX_GPIO_Init+0xe0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a29      	ldr	r2, [pc, #164]	; (80009a8 <MX_GPIO_Init+0xe0>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <MX_GPIO_Init+0xe0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <MX_GPIO_Init+0xe0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <MX_GPIO_Init+0xe0>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <MX_GPIO_Init+0xe0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_GPIO_Init+0xe0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <MX_GPIO_Init+0xe0>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_GPIO_Init+0xe0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2110      	movs	r1, #16
 8000952:	4816      	ldr	r0, [pc, #88]	; (80009ac <MX_GPIO_Init+0xe4>)
 8000954:	f001 f9b0 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <MX_GPIO_Init+0xe8>)
 8000960:	f001 f9aa 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000964:	2310      	movs	r3, #16
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <MX_GPIO_Init+0xe4>)
 800097c:	f001 f800 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8000980:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_GPIO_Init+0xe8>)
 800099a:	f000 fff1 	bl	8001980 <HAL_GPIO_Init>

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020c00 	.word	0x40020c00

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_SPI_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12b      	bne.n	8000a8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_SPI_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a6a:	23e0      	movs	r3, #224	; 0xe0
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <HAL_SPI_MspInit+0x8c>)
 8000a86:	f000 ff7b 	bl	8001980 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40013000 	.word	0x40013000
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a95      	ldr	r2, [pc, #596]	; (8000d14 <HAL_UART_MspInit+0x274>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	f040 808c 	bne.w	8000bdc <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
 8000ac8:	4b93      	ldr	r3, [pc, #588]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000acc:	4a92      	ldr	r2, [pc, #584]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad4:	4b90      	ldr	r3, [pc, #576]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	4b8c      	ldr	r3, [pc, #560]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4a8b      	ldr	r2, [pc, #556]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6313      	str	r3, [r2, #48]	; 0x30
 8000af0:	4b89      	ldr	r3, [pc, #548]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CLIENT_TX_Pin|CLIENT_RX_Pin;
 8000afc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4880      	ldr	r0, [pc, #512]	; (8000d1c <HAL_UART_MspInit+0x27c>)
 8000b1a:	f000 ff31 	bl	8001980 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000b1e:	4b80      	ldr	r3, [pc, #512]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b20:	4a80      	ldr	r2, [pc, #512]	; (8000d24 <HAL_UART_MspInit+0x284>)
 8000b22:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b24:	4b7e      	ldr	r3, [pc, #504]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2c:	4b7c      	ldr	r3, [pc, #496]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b32:	4b7b      	ldr	r3, [pc, #492]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b38:	4b79      	ldr	r3, [pc, #484]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b3e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b40:	4b77      	ldr	r3, [pc, #476]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b46:	4b76      	ldr	r3, [pc, #472]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b4c:	4b74      	ldr	r3, [pc, #464]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000b52:	4b73      	ldr	r3, [pc, #460]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b58:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b5a:	4b71      	ldr	r3, [pc, #452]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b60:	486f      	ldr	r0, [pc, #444]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b62:	f000 fb0b 	bl	800117c <HAL_DMA_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8000b6c:	f7ff ff22 	bl	80009b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a6b      	ldr	r2, [pc, #428]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b74:	639a      	str	r2, [r3, #56]	; 0x38
 8000b76:	4a6a      	ldr	r2, [pc, #424]	; (8000d20 <HAL_UART_MspInit+0x280>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000b7c:	4b6a      	ldr	r3, [pc, #424]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000b7e:	4a6b      	ldr	r2, [pc, #428]	; (8000d2c <HAL_UART_MspInit+0x28c>)
 8000b80:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000b82:	4b69      	ldr	r3, [pc, #420]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000b84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b88:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b8a:	4b67      	ldr	r3, [pc, #412]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000b8c:	2240      	movs	r2, #64	; 0x40
 8000b8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b90:	4b65      	ldr	r3, [pc, #404]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b96:	4b64      	ldr	r3, [pc, #400]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b9e:	4b62      	ldr	r3, [pc, #392]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba4:	4b60      	ldr	r3, [pc, #384]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000baa:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000bb0:	4b5d      	ldr	r3, [pc, #372]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000bb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bb6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb8:	4b5b      	ldr	r3, [pc, #364]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000bbe:	485a      	ldr	r0, [pc, #360]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000bc0:	f000 fadc 	bl	800117c <HAL_DMA_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8000bca:	f7ff fef3 	bl	80009b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a55      	ldr	r2, [pc, #340]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000bd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd4:	4a54      	ldr	r2, [pc, #336]	; (8000d28 <HAL_UART_MspInit+0x288>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bda:	e097      	b.n	8000d0c <HAL_UART_MspInit+0x26c>
  else if(huart->Instance==USART2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a53      	ldr	r2, [pc, #332]	; (8000d30 <HAL_UART_MspInit+0x290>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	f040 8092 	bne.w	8000d0c <HAL_UART_MspInit+0x26c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	4a49      	ldr	r2, [pc, #292]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf8:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	4a42      	ldr	r2, [pc, #264]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6313      	str	r3, [r2, #48]	; 0x30
 8000c14:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <HAL_UART_MspInit+0x278>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MB_U2_TX_Pin|MB_U2_RX_Pin;
 8000c20:	230c      	movs	r3, #12
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c30:	2307      	movs	r3, #7
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4838      	ldr	r0, [pc, #224]	; (8000d1c <HAL_UART_MspInit+0x27c>)
 8000c3c:	f000 fea0 	bl	8001980 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c40:	4b3c      	ldr	r3, [pc, #240]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c42:	4a3d      	ldr	r2, [pc, #244]	; (8000d38 <HAL_UART_MspInit+0x298>)
 8000c44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c46:	4b3b      	ldr	r3, [pc, #236]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4e:	4b39      	ldr	r3, [pc, #228]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c54:	4b37      	ldr	r3, [pc, #220]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c5a:	4b36      	ldr	r3, [pc, #216]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c68:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c82:	482c      	ldr	r0, [pc, #176]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c84:	f000 fa7a 	bl	800117c <HAL_DMA_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 8000c8e:	f7ff fe91 	bl	80009b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a27      	ldr	r2, [pc, #156]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c96:	639a      	str	r2, [r3, #56]	; 0x38
 8000c98:	4a26      	ldr	r2, [pc, #152]	; (8000d34 <HAL_UART_MspInit+0x294>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <HAL_UART_MspInit+0x2a0>)
 8000ca2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000ca4:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000caa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000cae:	2240      	movs	r2, #64	; 0x40
 8000cb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cbe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000cd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cd8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ce0:	4816      	ldr	r0, [pc, #88]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000ce2:	f000 fa4b 	bl	800117c <HAL_DMA_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_UART_MspInit+0x250>
      Error_Handler();
 8000cec:	f7ff fe62 	bl	80009b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cf6:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <HAL_UART_MspInit+0x29c>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2026      	movs	r0, #38	; 0x26
 8000d02:	f000 fa04 	bl	800110e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d06:	2026      	movs	r0, #38	; 0x26
 8000d08:	f000 fa1d 	bl	8001146 <HAL_NVIC_EnableIRQ>
}
 8000d0c:	bf00      	nop
 8000d0e:	3730      	adds	r7, #48	; 0x30
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40011000 	.word	0x40011000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	2000011c 	.word	0x2000011c
 8000d24:	40026440 	.word	0x40026440
 8000d28:	200000bc 	.word	0x200000bc
 8000d2c:	400264b8 	.word	0x400264b8
 8000d30:	40004400 	.word	0x40004400
 8000d34:	2000003c 	.word	0x2000003c
 8000d38:	40026088 	.word	0x40026088
 8000d3c:	2000017c 	.word	0x2000017c
 8000d40:	400260a0 	.word	0x400260a0

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f8c2 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <DMA1_Stream5_IRQHandler+0x10>)
 8000d9e:	f000 fb85 	bl	80014ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000003c 	.word	0x2000003c

08000dac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <DMA1_Stream6_IRQHandler+0x10>)
 8000db2:	f000 fb7b 	bl	80014ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000017c 	.word	0x2000017c

08000dc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <USART2_IRQHandler+0x10>)
 8000dc6:	f001 fd25 	bl	8002814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000028c 	.word	0x2000028c

08000dd4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <DMA2_Stream2_IRQHandler+0x10>)
 8000dda:	f000 fb67 	bl	80014ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000011c 	.word	0x2000011c

08000de8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <DMA2_Stream7_IRQHandler+0x10>)
 8000dee:	f000 fb5d 	bl	80014ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000bc 	.word	0x200000bc

08000dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e26:	490e      	ldr	r1, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e3c:	4c0b      	ldr	r4, [pc, #44]	; (8000e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e4a:	f7ff ffd7 	bl	8000dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f002 fcb5 	bl	80037bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fbbf 	bl	80005d4 <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e64:	0800385c 	.word	0x0800385c
  ldr r2, =_sbss
 8000e68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e6c:	200002d8 	.word	0x200002d8

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f92b 	bl	80010f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fd8a 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f943 	bl	8001162 <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 f90b 	bl	800110e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	200002d4 	.word	0x200002d4

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200002d4 	.word	0x200002d4

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c4:	d301      	bcc.n	80010ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00f      	b.n	80010ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <SysTick_Config+0x40>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d2:	210f      	movs	r1, #15
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f7ff ff8e 	bl	8000ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SysTick_Config+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SysTick_Config+0x40>)
 80010e4:	2207      	movs	r2, #7
 80010e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	e000e010 	.word	0xe000e010

080010f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff29 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff3e 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff8e 	bl	800104c <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff5d 	bl	8000ff8 <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff31 	bl	8000fbc <__NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffa2 	bl	80010b4 <SysTick_Config>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff feda 	bl	8000f40 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e099      	b.n	80012cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2202      	movs	r2, #2
 800119c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b8:	e00f      	b.n	80011da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ba:	f7ff fec1 	bl	8000f40 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d908      	bls.n	80011da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2220      	movs	r2, #32
 80011cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2203      	movs	r2, #3
 80011d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e078      	b.n	80012cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e8      	bne.n	80011ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <HAL_DMA_Init+0x158>)
 80011f4:	4013      	ands	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001206:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001212:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800121e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4313      	orrs	r3, r2
 800122a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	2b04      	cmp	r3, #4
 8001232:	d107      	bne.n	8001244 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	4313      	orrs	r3, r2
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4313      	orrs	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f023 0307 	bic.w	r3, r3, #7
 800125a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	4313      	orrs	r3, r2
 8001264:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	2b04      	cmp	r3, #4
 800126c:	d117      	bne.n	800129e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4313      	orrs	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00e      	beq.n	800129e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fb01 	bl	8001888 <DMA_CheckFifoParam>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2240      	movs	r2, #64	; 0x40
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800129a:	2301      	movs	r3, #1
 800129c:	e016      	b.n	80012cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fab8 	bl	800181c <DMA_CalcBaseAndBitshift>
 80012ac:	4603      	mov	r3, r0
 80012ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b4:	223f      	movs	r2, #63	; 0x3f
 80012b6:	409a      	lsls	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	f010803f 	.word	0xf010803f

080012d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_DMA_Start_IT+0x26>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e040      	b.n	8001380 <HAL_DMA_Start_IT+0xa8>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d12f      	bne.n	8001372 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2202      	movs	r2, #2
 8001316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 fa4a 	bl	80017c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	223f      	movs	r2, #63	; 0x3f
 8001332:	409a      	lsls	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0216 	orr.w	r2, r2, #22
 8001346:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	2b00      	cmp	r3, #0
 800134e:	d007      	beq.n	8001360 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0208 	orr.w	r2, r2, #8
 800135e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0201 	orr.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e005      	b.n	800137e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800137a:	2302      	movs	r3, #2
 800137c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800137e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001394:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001396:	f7ff fdd3 	bl	8000f40 <HAL_GetTick>
 800139a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d008      	beq.n	80013ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e052      	b.n	8001460 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0216 	bic.w	r2, r2, #22
 80013c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d103      	bne.n	80013ea <HAL_DMA_Abort+0x62>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0208 	bic.w	r2, r2, #8
 80013f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0201 	bic.w	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800140a:	e013      	b.n	8001434 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800140c:	f7ff fd98 	bl	8000f40 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b05      	cmp	r3, #5
 8001418:	d90c      	bls.n	8001434 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2220      	movs	r2, #32
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2203      	movs	r2, #3
 8001424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e015      	b.n	8001460 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1e4      	bne.n	800140c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001446:	223f      	movs	r2, #63	; 0x3f
 8001448:	409a      	lsls	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d004      	beq.n	8001486 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e00c      	b.n	80014a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2205      	movs	r2, #5
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0201 	bic.w	r2, r2, #1
 800149c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014b8:	4b92      	ldr	r3, [pc, #584]	; (8001704 <HAL_DMA_IRQHandler+0x258>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a92      	ldr	r2, [pc, #584]	; (8001708 <HAL_DMA_IRQHandler+0x25c>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	0a9b      	lsrs	r3, r3, #10
 80014c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d6:	2208      	movs	r2, #8
 80014d8:	409a      	lsls	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4013      	ands	r3, r2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01a      	beq.n	8001518 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0204 	bic.w	r2, r2, #4
 80014fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	2208      	movs	r2, #8
 8001506:	409a      	lsls	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001510:	f043 0201 	orr.w	r2, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151c:	2201      	movs	r2, #1
 800151e:	409a      	lsls	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d012      	beq.n	800154e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153a:	2201      	movs	r2, #1
 800153c:	409a      	lsls	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001546:	f043 0202 	orr.w	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	2204      	movs	r2, #4
 8001554:	409a      	lsls	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d012      	beq.n	8001584 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00b      	beq.n	8001584 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	2204      	movs	r2, #4
 8001572:	409a      	lsls	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157c:	f043 0204 	orr.w	r2, r3, #4
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	2210      	movs	r2, #16
 800158a:	409a      	lsls	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4013      	ands	r3, r2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d043      	beq.n	800161c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d03c      	beq.n	800161c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	2210      	movs	r2, #16
 80015a8:	409a      	lsls	r2, r3
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d018      	beq.n	80015ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d108      	bne.n	80015dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d024      	beq.n	800161c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	4798      	blx	r3
 80015da:	e01f      	b.n	800161c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d01b      	beq.n	800161c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	4798      	blx	r3
 80015ec:	e016      	b.n	800161c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d107      	bne.n	800160c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0208 	bic.w	r2, r2, #8
 800160a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	2220      	movs	r2, #32
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 808e 	beq.w	800174a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 8086 	beq.w	800174a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	2220      	movs	r2, #32
 8001644:	409a      	lsls	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b05      	cmp	r3, #5
 8001654:	d136      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0216 	bic.w	r2, r2, #22
 8001664:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001674:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <HAL_DMA_IRQHandler+0x1da>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	2b00      	cmp	r3, #0
 8001684:	d007      	beq.n	8001696 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0208 	bic.w	r2, r2, #8
 8001694:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	223f      	movs	r2, #63	; 0x3f
 800169c:	409a      	lsls	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d07d      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	4798      	blx	r3
        }
        return;
 80016c2:	e078      	b.n	80017b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d01c      	beq.n	800170c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d108      	bne.n	80016f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d030      	beq.n	800174a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
 80016f0:	e02b      	b.n	800174a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d027      	beq.n	800174a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	4798      	blx	r3
 8001702:	e022      	b.n	800174a <HAL_DMA_IRQHandler+0x29e>
 8001704:	20000000 	.word	0x20000000
 8001708:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10f      	bne.n	800173a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0210 	bic.w	r2, r2, #16
 8001728:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174e:	2b00      	cmp	r3, #0
 8001750:	d032      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d022      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2205      	movs	r2, #5
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0201 	bic.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3301      	adds	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	429a      	cmp	r2, r3
 8001780:	d307      	bcc.n	8001792 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f2      	bne.n	8001776 <HAL_DMA_IRQHandler+0x2ca>
 8001790:	e000      	b.n	8001794 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001792:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
 80017b4:	e000      	b.n	80017b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80017b6:	bf00      	nop
    }
  }
}
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop

080017c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b40      	cmp	r3, #64	; 0x40
 80017ec:	d108      	bne.n	8001800 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017fe:	e007      	b.n	8001810 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	60da      	str	r2, [r3, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	3b10      	subs	r3, #16
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <DMA_CalcBaseAndBitshift+0x64>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001836:	4a13      	ldr	r2, [pc, #76]	; (8001884 <DMA_CalcBaseAndBitshift+0x68>)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d909      	bls.n	800185e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001852:	f023 0303 	bic.w	r3, r3, #3
 8001856:	1d1a      	adds	r2, r3, #4
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	659a      	str	r2, [r3, #88]	; 0x58
 800185c:	e007      	b.n	800186e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001866:	f023 0303 	bic.w	r3, r3, #3
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	aaaaaaab 	.word	0xaaaaaaab
 8001884:	08003844 	.word	0x08003844

08001888 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d11f      	bne.n	80018e2 <DMA_CheckFifoParam+0x5a>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d856      	bhi.n	8001956 <DMA_CheckFifoParam+0xce>
 80018a8:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <DMA_CheckFifoParam+0x28>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018c1 	.word	0x080018c1
 80018b4:	080018d3 	.word	0x080018d3
 80018b8:	080018c1 	.word	0x080018c1
 80018bc:	08001957 	.word	0x08001957
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d046      	beq.n	800195a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d0:	e043      	b.n	800195a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018da:	d140      	bne.n	800195e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018e0:	e03d      	b.n	800195e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ea:	d121      	bne.n	8001930 <DMA_CheckFifoParam+0xa8>
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d837      	bhi.n	8001962 <DMA_CheckFifoParam+0xda>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <DMA_CheckFifoParam+0x70>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	08001909 	.word	0x08001909
 80018fc:	0800190f 	.word	0x0800190f
 8001900:	08001909 	.word	0x08001909
 8001904:	08001921 	.word	0x08001921
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
      break;
 800190c:	e030      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d025      	beq.n	8001966 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800191e:	e022      	b.n	8001966 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001928:	d11f      	bne.n	800196a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800192e:	e01c      	b.n	800196a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d903      	bls.n	800193e <DMA_CheckFifoParam+0xb6>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d003      	beq.n	8001944 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800193c:	e018      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
      break;
 8001942:	e015      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00e      	beq.n	800196e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
      break;
 8001954:	e00b      	b.n	800196e <DMA_CheckFifoParam+0xe6>
      break;
 8001956:	bf00      	nop
 8001958:	e00a      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 800195a:	bf00      	nop
 800195c:	e008      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 800195e:	bf00      	nop
 8001960:	e006      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 8001962:	bf00      	nop
 8001964:	e004      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 8001966:	bf00      	nop
 8001968:	e002      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;   
 800196a:	bf00      	nop
 800196c:	e000      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 800196e:	bf00      	nop
    }
  } 
  
  return status; 
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e16b      	b.n	8001c74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 815a 	bne.w	8001c6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d005      	beq.n	80019d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d017      	beq.n	8001a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d123      	bne.n	8001ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80b4 	beq.w	8001c6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b60      	ldr	r3, [pc, #384]	; (8001c8c <HAL_GPIO_Init+0x30c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	4a5f      	ldr	r2, [pc, #380]	; (8001c8c <HAL_GPIO_Init+0x30c>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	; 0x44
 8001b16:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <HAL_GPIO_Init+0x30c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b22:	4a5b      	ldr	r2, [pc, #364]	; (8001c90 <HAL_GPIO_Init+0x310>)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a52      	ldr	r2, [pc, #328]	; (8001c94 <HAL_GPIO_Init+0x314>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d02b      	beq.n	8001ba6 <HAL_GPIO_Init+0x226>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a51      	ldr	r2, [pc, #324]	; (8001c98 <HAL_GPIO_Init+0x318>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d025      	beq.n	8001ba2 <HAL_GPIO_Init+0x222>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a50      	ldr	r2, [pc, #320]	; (8001c9c <HAL_GPIO_Init+0x31c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01f      	beq.n	8001b9e <HAL_GPIO_Init+0x21e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4f      	ldr	r2, [pc, #316]	; (8001ca0 <HAL_GPIO_Init+0x320>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d019      	beq.n	8001b9a <HAL_GPIO_Init+0x21a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4e      	ldr	r2, [pc, #312]	; (8001ca4 <HAL_GPIO_Init+0x324>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x216>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4d      	ldr	r2, [pc, #308]	; (8001ca8 <HAL_GPIO_Init+0x328>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x212>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <HAL_GPIO_Init+0x32c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x20e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4b      	ldr	r2, [pc, #300]	; (8001cb0 <HAL_GPIO_Init+0x330>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x20a>
 8001b86:	2307      	movs	r3, #7
 8001b88:	e00e      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	e00c      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b8e:	2306      	movs	r3, #6
 8001b90:	e00a      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b92:	2305      	movs	r3, #5
 8001b94:	e008      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b96:	2304      	movs	r3, #4
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e004      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	4093      	lsls	r3, r2
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb8:	4935      	ldr	r1, [pc, #212]	; (8001c90 <HAL_GPIO_Init+0x310>)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_GPIO_Init+0x334>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bea:	4a32      	ldr	r2, [pc, #200]	; (8001cb4 <HAL_GPIO_Init+0x334>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <HAL_GPIO_Init+0x334>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c14:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <HAL_GPIO_Init+0x334>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <HAL_GPIO_Init+0x334>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_GPIO_Init+0x334>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_GPIO_Init+0x334>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <HAL_GPIO_Init+0x334>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3301      	adds	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	f67f ae90 	bls.w	800199c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40013800 	.word	0x40013800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020c00 	.word	0x40020c00
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40021400 	.word	0x40021400
 8001cac:	40021800 	.word	0x40021800
 8001cb0:	40021c00 	.word	0x40021c00
 8001cb4:	40013c00 	.word	0x40013c00

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd4:	e003      	b.n	8001cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cfc:	887a      	ldrh	r2, [r7, #2]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4013      	ands	r3, r2
 8001d02:	041a      	lsls	r2, r3, #16
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	400b      	ands	r3, r1
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e264      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d075      	beq.n	8001e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d3e:	4ba3      	ldr	r3, [pc, #652]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d00c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4a:	4ba0      	ldr	r3, [pc, #640]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d112      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d56:	4b9d      	ldr	r3, [pc, #628]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d62:	d10b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	4b99      	ldr	r3, [pc, #612]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d05b      	beq.n	8001e28 <HAL_RCC_OscConfig+0x108>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d157      	bne.n	8001e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e23f      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x74>
 8001d86:	4b91      	ldr	r3, [pc, #580]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a90      	ldr	r2, [pc, #576]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e01d      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x98>
 8001d9e:	4b8b      	ldr	r3, [pc, #556]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a8a      	ldr	r2, [pc, #552]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b88      	ldr	r3, [pc, #544]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a87      	ldr	r2, [pc, #540]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001db8:	4b84      	ldr	r3, [pc, #528]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a83      	ldr	r2, [pc, #524]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b81      	ldr	r3, [pc, #516]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a80      	ldr	r2, [pc, #512]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f8b2 	bl	8000f40 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff f8ae 	bl	8000f40 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e204      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0xc0>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff f89e 	bl	8000f40 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff f89a 	bl	8000f40 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	; 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e1f0      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0xe8>
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d063      	beq.n	8001efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e36:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e42:	4b62      	ldr	r3, [pc, #392]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d11c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4e:	4b5f      	ldr	r3, [pc, #380]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d116      	bne.n	8001e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	4b5c      	ldr	r3, [pc, #368]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_RCC_OscConfig+0x152>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e1c4      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4952      	ldr	r1, [pc, #328]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	e03a      	b.n	8001efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d020      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e90:	4b4f      	ldr	r3, [pc, #316]	; (8001fd0 <HAL_RCC_OscConfig+0x2b0>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff f853 	bl	8000f40 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff f84f 	bl	8000f40 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1a5      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4940      	ldr	r1, [pc, #256]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <HAL_RCC_OscConfig+0x2b0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f832 	bl	8000f40 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff f82e 	bl	8000f40 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e184      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d030      	beq.n	8001f6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f12:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_OscConfig+0x2b4>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff f812 	bl	8000f40 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff f80e 	bl	8000f40 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e164      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x200>
 8001f3e:	e015      	b.n	8001f6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_OscConfig+0x2b4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7fe fffb 	bl	8000f40 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7fe fff7 	bl	8000f40 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e14d      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80a0 	beq.w	80020ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10f      	bne.n	8001faa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x2b8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d121      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_RCC_OscConfig+0x2b8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_RCC_OscConfig+0x2b8>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7fe ffbd 	bl	8000f40 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e011      	b.n	8001fee <HAL_RCC_OscConfig+0x2ce>
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	42470000 	.word	0x42470000
 8001fd4:	42470e80 	.word	0x42470e80
 8001fd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7fe ffb0 	bl	8000f40 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e106      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b85      	ldr	r3, [pc, #532]	; (8002204 <HAL_RCC_OscConfig+0x4e4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d106      	bne.n	8002010 <HAL_RCC_OscConfig+0x2f0>
 8002002:	4b81      	ldr	r3, [pc, #516]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a80      	ldr	r2, [pc, #512]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
 800200e:	e01c      	b.n	800204a <HAL_RCC_OscConfig+0x32a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b05      	cmp	r3, #5
 8002016:	d10c      	bne.n	8002032 <HAL_RCC_OscConfig+0x312>
 8002018:	4b7b      	ldr	r3, [pc, #492]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a7a      	ldr	r2, [pc, #488]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
 8002024:	4b78      	ldr	r3, [pc, #480]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	4a77      	ldr	r2, [pc, #476]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6713      	str	r3, [r2, #112]	; 0x70
 8002030:	e00b      	b.n	800204a <HAL_RCC_OscConfig+0x32a>
 8002032:	4b75      	ldr	r3, [pc, #468]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	4a74      	ldr	r2, [pc, #464]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6713      	str	r3, [r2, #112]	; 0x70
 800203e:	4b72      	ldr	r3, [pc, #456]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a71      	ldr	r2, [pc, #452]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d015      	beq.n	800207e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe ff75 	bl	8000f40 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe ff71 	bl	8000f40 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e0c5      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002070:	4b65      	ldr	r3, [pc, #404]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ee      	beq.n	800205a <HAL_RCC_OscConfig+0x33a>
 800207c:	e014      	b.n	80020a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7fe ff5f 	bl	8000f40 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7fe ff5b 	bl	8000f40 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	; 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0af      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209c:	4b5a      	ldr	r3, [pc, #360]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ee      	bne.n	8002086 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d105      	bne.n	80020ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ae:	4b56      	ldr	r3, [pc, #344]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a55      	ldr	r2, [pc, #340]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 80020b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 809b 	beq.w	80021fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020c4:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d05c      	beq.n	800218a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d141      	bne.n	800215c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d8:	4b4c      	ldr	r3, [pc, #304]	; (800220c <HAL_RCC_OscConfig+0x4ec>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7fe ff2f 	bl	8000f40 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e6:	f7fe ff2b 	bl	8000f40 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e081      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f0      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	019b      	lsls	r3, r3, #6
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	3b01      	subs	r3, #1
 800211e:	041b      	lsls	r3, r3, #16
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	061b      	lsls	r3, r3, #24
 8002128:	4937      	ldr	r1, [pc, #220]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212e:	4b37      	ldr	r3, [pc, #220]	; (800220c <HAL_RCC_OscConfig+0x4ec>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe ff04 	bl	8000f40 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7fe ff00 	bl	8000f40 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e056      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x41c>
 800215a:	e04e      	b.n	80021fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <HAL_RCC_OscConfig+0x4ec>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7fe feed 	bl	8000f40 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216a:	f7fe fee9 	bl	8000f40 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e03f      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0x44a>
 8002188:	e037      	b.n	80021fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e032      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002196:	4b1c      	ldr	r3, [pc, #112]	; (8002208 <HAL_RCC_OscConfig+0x4e8>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d028      	beq.n	80021f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d121      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d11a      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021c6:	4013      	ands	r3, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d111      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	3b01      	subs	r3, #1
 80021e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d001      	beq.n	80021fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40007000 	.word	0x40007000
 8002208:	40023800 	.word	0x40023800
 800220c:	42470060 	.word	0x42470060

08002210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0cc      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d90c      	bls.n	800224c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b65      	ldr	r3, [pc, #404]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0b8      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002264:	4b59      	ldr	r3, [pc, #356]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800226e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b50      	ldr	r3, [pc, #320]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	494d      	ldr	r1, [pc, #308]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d044      	beq.n	8002330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d119      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e07f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e067      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b37      	ldr	r3, [pc, #220]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4934      	ldr	r1, [pc, #208]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002300:	f7fe fe1e 	bl	8000f40 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe fe1a 	bl	8000f40 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e04f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d20c      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e032      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4916      	ldr	r1, [pc, #88]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	490e      	ldr	r1, [pc, #56]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002396:	f000 f821 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 800239a:	4602      	mov	r2, r0
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	490a      	ldr	r1, [pc, #40]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fd7e 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00
 80023cc:	40023800 	.word	0x40023800
 80023d0:	0800382c 	.word	0x0800382c
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000004 	.word	0x20000004

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	2300      	movs	r3, #0
 80023ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f4:	4b67      	ldr	r3, [pc, #412]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d00d      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x40>
 8002400:	2b08      	cmp	r3, #8
 8002402:	f200 80bd 	bhi.w	8002580 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x34>
 800240a:	2b04      	cmp	r3, #4
 800240c:	d003      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0x3a>
 800240e:	e0b7      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002412:	60bb      	str	r3, [r7, #8]
       break;
 8002414:	e0b7      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002416:	4b61      	ldr	r3, [pc, #388]	; (800259c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002418:	60bb      	str	r3, [r7, #8]
      break;
 800241a:	e0b4      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800241c:	4b5d      	ldr	r3, [pc, #372]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002424:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d04d      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002432:	4b58      	ldr	r3, [pc, #352]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	461a      	mov	r2, r3
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002442:	f04f 0100 	mov.w	r1, #0
 8002446:	ea02 0800 	and.w	r8, r2, r0
 800244a:	ea03 0901 	and.w	r9, r3, r1
 800244e:	4640      	mov	r0, r8
 8002450:	4649      	mov	r1, r9
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	014b      	lsls	r3, r1, #5
 800245c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002460:	0142      	lsls	r2, r0, #5
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	ebb0 0008 	subs.w	r0, r0, r8
 800246a:	eb61 0109 	sbc.w	r1, r1, r9
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	018b      	lsls	r3, r1, #6
 8002478:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800247c:	0182      	lsls	r2, r0, #6
 800247e:	1a12      	subs	r2, r2, r0
 8002480:	eb63 0301 	sbc.w	r3, r3, r1
 8002484:	f04f 0000 	mov.w	r0, #0
 8002488:	f04f 0100 	mov.w	r1, #0
 800248c:	00d9      	lsls	r1, r3, #3
 800248e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002492:	00d0      	lsls	r0, r2, #3
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	eb12 0208 	adds.w	r2, r2, r8
 800249c:	eb43 0309 	adc.w	r3, r3, r9
 80024a0:	f04f 0000 	mov.w	r0, #0
 80024a4:	f04f 0100 	mov.w	r1, #0
 80024a8:	0259      	lsls	r1, r3, #9
 80024aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024ae:	0250      	lsls	r0, r2, #9
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	461a      	mov	r2, r3
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	f7fd fe82 	bl	80001c8 <__aeabi_uldivmod>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4613      	mov	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e04a      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	099b      	lsrs	r3, r3, #6
 80024d4:	461a      	mov	r2, r3
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024de:	f04f 0100 	mov.w	r1, #0
 80024e2:	ea02 0400 	and.w	r4, r2, r0
 80024e6:	ea03 0501 	and.w	r5, r3, r1
 80024ea:	4620      	mov	r0, r4
 80024ec:	4629      	mov	r1, r5
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	014b      	lsls	r3, r1, #5
 80024f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024fc:	0142      	lsls	r2, r0, #5
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	1b00      	subs	r0, r0, r4
 8002504:	eb61 0105 	sbc.w	r1, r1, r5
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	018b      	lsls	r3, r1, #6
 8002512:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002516:	0182      	lsls	r2, r0, #6
 8002518:	1a12      	subs	r2, r2, r0
 800251a:	eb63 0301 	sbc.w	r3, r3, r1
 800251e:	f04f 0000 	mov.w	r0, #0
 8002522:	f04f 0100 	mov.w	r1, #0
 8002526:	00d9      	lsls	r1, r3, #3
 8002528:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800252c:	00d0      	lsls	r0, r2, #3
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	1912      	adds	r2, r2, r4
 8002534:	eb45 0303 	adc.w	r3, r5, r3
 8002538:	f04f 0000 	mov.w	r0, #0
 800253c:	f04f 0100 	mov.w	r1, #0
 8002540:	0299      	lsls	r1, r3, #10
 8002542:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002546:	0290      	lsls	r0, r2, #10
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	461a      	mov	r2, r3
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	f7fd fe36 	bl	80001c8 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	60bb      	str	r3, [r7, #8]
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002582:	60bb      	str	r3, [r7, #8]
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	68bb      	ldr	r3, [r7, #8]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	00f42400 	.word	0x00f42400
 800259c:	007a1200 	.word	0x007a1200

080025a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0a9b      	lsrs	r3, r3, #10
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	0800383c 	.word	0x0800383c

080025e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025e4:	f7ff ffdc 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0b5b      	lsrs	r3, r3, #13
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	0800383c 	.word	0x0800383c

08002608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e07b      	b.n	8002712 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	2b00      	cmp	r3, #0
 8002620:	d108      	bne.n	8002634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800262a:	d009      	beq.n	8002640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
 8002632:	e005      	b.n	8002640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fe f9d8 	bl	8000a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002676:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	ea42 0103 	orr.w	r1, r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	f003 0104 	and.w	r1, r3, #4
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f003 0210 	and.w	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002700:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e03f      	b.n	80027ac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d106      	bne.n	8002746 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7fe f9ad 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2224      	movs	r2, #36	; 0x24
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800275c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fe64 	bl	800342c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002772:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002782:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002792:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	4613      	mov	r3, r2
 80027c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d11d      	bne.n	800280a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_UART_Receive_DMA+0x26>
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e016      	b.n	800280c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_UART_Receive_DMA+0x38>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e00f      	b.n	800280c <HAL_UART_Receive_DMA+0x58>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	461a      	mov	r2, r3
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fbb7 	bl	8002f74 <UART_Start_Receive_DMA>
 8002806:	4603      	mov	r3, r0
 8002808:	e000      	b.n	800280c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800280a:	2302      	movs	r3, #2
  }
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b0ba      	sub	sp, #232	; 0xe8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10f      	bne.n	800287a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800285a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_UART_IRQHandler+0x66>
 8002866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fd1f 	bl	80032b6 <UART_Receive_IT>
      return;
 8002878:	e256      	b.n	8002d28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800287a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80de 	beq.w	8002a40 <HAL_UART_IRQHandler+0x22c>
 8002884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d106      	bne.n	800289e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002894:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80d1 	beq.w	8002a40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800289e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <HAL_UART_IRQHandler+0xae>
 80028aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <HAL_UART_IRQHandler+0xd2>
 80028ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0202 	orr.w	r2, r3, #2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_UART_IRQHandler+0xf6>
 80028f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f043 0204 	orr.w	r2, r3, #4
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800290a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d011      	beq.n	800293a <HAL_UART_IRQHandler+0x126>
 8002916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	d105      	bne.n	800292e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f043 0208 	orr.w	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81ed 	beq.w	8002d1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_UART_IRQHandler+0x14e>
 8002950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fcaa 	bl	80032b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296c:	2b40      	cmp	r3, #64	; 0x40
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d103      	bne.n	800298e <HAL_UART_IRQHandler+0x17a>
 8002986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d04f      	beq.n	8002a2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fbb2 	bl	80030f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299e:	2b40      	cmp	r3, #64	; 0x40
 80029a0:	d141      	bne.n	8002a26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3314      	adds	r3, #20
 80029a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029b0:	e853 3f00 	ldrex	r3, [r3]
 80029b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3314      	adds	r3, #20
 80029ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029de:	e841 2300 	strex	r3, r2, [r1]
 80029e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1d9      	bne.n	80029a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d013      	beq.n	8002a1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	4a7d      	ldr	r2, [pc, #500]	; (8002bf0 <HAL_UART_IRQHandler+0x3dc>)
 80029fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fd30 	bl	8001468 <HAL_DMA_Abort_IT>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d016      	beq.n	8002a3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	e00e      	b.n	8002a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f99a 	bl	8002d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a24:	e00a      	b.n	8002a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f996 	bl	8002d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	e006      	b.n	8002a3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f992 	bl	8002d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a3a:	e170      	b.n	8002d1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	bf00      	nop
    return;
 8002a3e:	e16e      	b.n	8002d1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	f040 814a 	bne.w	8002cde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8143 	beq.w	8002cde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 813c 	beq.w	8002cde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	f040 80b4 	bne.w	8002bf4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8140 	beq.w	8002d22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	f080 8139 	bcs.w	8002d22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ab6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac2:	f000 8088 	beq.w	8002bd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	330c      	adds	r3, #12
 8002aee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002af2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002afe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b02:	e841 2300 	strex	r3, r2, [r1]
 8002b06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1d9      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3314      	adds	r3, #20
 8002b18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1c:	e853 3f00 	ldrex	r3, [r3]
 8002b20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3314      	adds	r3, #20
 8002b32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e1      	bne.n	8002b12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3314      	adds	r3, #20
 8002b54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3314      	adds	r3, #20
 8002b6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e3      	bne.n	8002b4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	330c      	adds	r3, #12
 8002b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9e:	e853 3f00 	ldrex	r3, [r3]
 8002ba2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba6:	f023 0310 	bic.w	r3, r3, #16
 8002baa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bc0:	e841 2300 	strex	r3, r2, [r1]
 8002bc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e3      	bne.n	8002b94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe fbd9 	bl	8001388 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4619      	mov	r1, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8c0 	bl	8002d6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bec:	e099      	b.n	8002d22 <HAL_UART_IRQHandler+0x50e>
 8002bee:	bf00      	nop
 8002bf0:	080031bf 	.word	0x080031bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 808b 	beq.w	8002d26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8086 	beq.w	8002d26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	330c      	adds	r3, #12
 8002c20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c3e:	647a      	str	r2, [r7, #68]	; 0x44
 8002c40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1e3      	bne.n	8002c1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3314      	adds	r3, #20
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	e853 3f00 	ldrex	r3, [r3]
 8002c60:	623b      	str	r3, [r7, #32]
   return(result);
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3314      	adds	r3, #20
 8002c72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c76:	633a      	str	r2, [r7, #48]	; 0x30
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1e3      	bne.n	8002c52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	e853 3f00 	ldrex	r3, [r3]
 8002ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0310 	bic.w	r3, r3, #16
 8002cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002cbc:	61fa      	str	r2, [r7, #28]
 8002cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc0:	69b9      	ldr	r1, [r7, #24]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	e841 2300 	strex	r3, r2, [r1]
 8002cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e3      	bne.n	8002c98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f848 	bl	8002d6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cdc:	e023      	b.n	8002d26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d009      	beq.n	8002cfe <HAL_UART_IRQHandler+0x4ea>
 8002cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa75 	bl	80031e6 <UART_Transmit_IT>
    return;
 8002cfc:	e014      	b.n	8002d28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00e      	beq.n	8002d28 <HAL_UART_IRQHandler+0x514>
 8002d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fab5 	bl	8003286 <UART_EndTransmit_IT>
    return;
 8002d1c:	e004      	b.n	8002d28 <HAL_UART_IRQHandler+0x514>
    return;
 8002d1e:	bf00      	nop
 8002d20:	e002      	b.n	8002d28 <HAL_UART_IRQHandler+0x514>
      return;
 8002d22:	bf00      	nop
 8002d24:	e000      	b.n	8002d28 <HAL_UART_IRQHandler+0x514>
      return;
 8002d26:	bf00      	nop
  }
}
 8002d28:	37e8      	adds	r7, #232	; 0xe8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop

08002d30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b09c      	sub	sp, #112	; 0x70
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d172      	bne.n	8002e86 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da2:	2200      	movs	r2, #0
 8002da4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	330c      	adds	r3, #12
 8002dac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dc8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e5      	bne.n	8002da6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3314      	adds	r3, #20
 8002de0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	667b      	str	r3, [r7, #100]	; 0x64
 8002df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3314      	adds	r3, #20
 8002df8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002dfa:	647a      	str	r2, [r7, #68]	; 0x44
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e5      	bne.n	8002dda <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3314      	adds	r3, #20
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e24:	663b      	str	r3, [r7, #96]	; 0x60
 8002e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3314      	adds	r3, #20
 8002e2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e2e:	633a      	str	r2, [r7, #48]	; 0x30
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1e5      	bne.n	8002e0e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d119      	bne.n	8002e86 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f023 0310 	bic.w	r3, r3, #16
 8002e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e72:	61fa      	str	r2, [r7, #28]
 8002e74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e5      	bne.n	8002e52 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d106      	bne.n	8002e9c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e92:	4619      	mov	r1, r3
 8002e94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002e96:	f7ff ff69 	bl	8002d6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e9a:	e002      	b.n	8002ea2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002e9c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002e9e:	f7fd fb0f 	bl	80004c0 <HAL_UART_RxCpltCallback>
}
 8002ea2:	bf00      	nop
 8002ea4:	3770      	adds	r7, #112	; 0x70
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d108      	bne.n	8002ed2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	4619      	mov	r1, r3
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f7ff ff4e 	bl	8002d6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ed0:	e002      	b.n	8002ed8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f7ff ff36 	bl	8002d44 <HAL_UART_RxHalfCpltCallback>
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	2b80      	cmp	r3, #128	; 0x80
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b21      	cmp	r3, #33	; 0x21
 8002f12:	d108      	bne.n	8002f26 <UART_DMAError+0x46>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002f20:	68b8      	ldr	r0, [r7, #8]
 8002f22:	f000 f8c1 	bl	80030a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b22      	cmp	r3, #34	; 0x22
 8002f46:	d108      	bne.n	8002f5a <UART_DMAError+0x7a>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2200      	movs	r2, #0
 8002f52:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002f54:	68b8      	ldr	r0, [r7, #8]
 8002f56:	f000 f8cf 	bl	80030f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f043 0210 	orr.w	r2, r3, #16
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f66:	68b8      	ldr	r0, [r7, #8]
 8002f68:	f7ff fef6 	bl	8002d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b098      	sub	sp, #96	; 0x60
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2222      	movs	r2, #34	; 0x22
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	4a3e      	ldr	r2, [pc, #248]	; (800309c <UART_Start_Receive_DMA+0x128>)
 8002fa2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	4a3d      	ldr	r2, [pc, #244]	; (80030a0 <UART_Start_Receive_DMA+0x12c>)
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <UART_Start_Receive_DMA+0x130>)
 8002fb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	2200      	movs	r2, #0
 8002fba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	f7fe f980 	bl	80012d8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	65bb      	str	r3, [r7, #88]	; 0x58
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003016:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003018:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800301c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e5      	bne.n	8002ff6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3314      	adds	r3, #20
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	e853 3f00 	ldrex	r3, [r3]
 8003038:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	657b      	str	r3, [r7, #84]	; 0x54
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3314      	adds	r3, #20
 8003048:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800304a:	63ba      	str	r2, [r7, #56]	; 0x38
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003052:	e841 2300 	strex	r3, r2, [r1]
 8003056:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1e5      	bne.n	800302a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3314      	adds	r3, #20
 8003064:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	617b      	str	r3, [r7, #20]
   return(result);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003074:	653b      	str	r3, [r7, #80]	; 0x50
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3314      	adds	r3, #20
 800307c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800307e:	627a      	str	r2, [r7, #36]	; 0x24
 8003080:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	6a39      	ldr	r1, [r7, #32]
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	61fb      	str	r3, [r7, #28]
   return(result);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e5      	bne.n	800305e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3760      	adds	r7, #96	; 0x60
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	08002d85 	.word	0x08002d85
 80030a0:	08002eab 	.word	0x08002eab
 80030a4:	08002ee1 	.word	0x08002ee1

080030a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	; 0x24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	330c      	adds	r3, #12
 80030b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	60bb      	str	r3, [r7, #8]
   return(result);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	61ba      	str	r2, [r7, #24]
 80030d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	6979      	ldr	r1, [r7, #20]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	613b      	str	r3, [r7, #16]
   return(result);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e5      	bne.n	80030b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80030ec:	bf00      	nop
 80030ee:	3724      	adds	r7, #36	; 0x24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b095      	sub	sp, #84	; 0x54
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310a:	e853 3f00 	ldrex	r3, [r3]
 800310e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	330c      	adds	r3, #12
 800311e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003120:	643a      	str	r2, [r7, #64]	; 0x40
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003124:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003128:	e841 2300 	strex	r3, r2, [r1]
 800312c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e5      	bne.n	8003100 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3314      	adds	r3, #20
 800313a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	61fb      	str	r3, [r7, #28]
   return(result);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	64bb      	str	r3, [r7, #72]	; 0x48
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3314      	adds	r3, #20
 8003152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003154:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800315a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e5      	bne.n	8003134 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	2b01      	cmp	r3, #1
 800316e:	d119      	bne.n	80031a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	330c      	adds	r3, #12
 8003176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	e853 3f00 	ldrex	r3, [r3]
 800317e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f023 0310 	bic.w	r3, r3, #16
 8003186:	647b      	str	r3, [r7, #68]	; 0x44
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	330c      	adds	r3, #12
 800318e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003190:	61ba      	str	r2, [r7, #24]
 8003192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	6979      	ldr	r1, [r7, #20]
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	613b      	str	r3, [r7, #16]
   return(result);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e5      	bne.n	8003170 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031b2:	bf00      	nop
 80031b4:	3754      	adds	r7, #84	; 0x54
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff fdbd 	bl	8002d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b085      	sub	sp, #20
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b21      	cmp	r3, #33	; 0x21
 80031f8:	d13e      	bne.n	8003278 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003202:	d114      	bne.n	800322e <UART_Transmit_IT+0x48>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d110      	bne.n	800322e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003220:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	1c9a      	adds	r2, r3, #2
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	621a      	str	r2, [r3, #32]
 800322c:	e008      	b.n	8003240 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	1c59      	adds	r1, r3, #1
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6211      	str	r1, [r2, #32]
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29b      	uxth	r3, r3
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4619      	mov	r1, r3
 800324e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10f      	bne.n	8003274 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003262:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003272:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
  }
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800329c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fd42 	bl	8002d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b08c      	sub	sp, #48	; 0x30
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b22      	cmp	r3, #34	; 0x22
 80032c8:	f040 80ab 	bne.w	8003422 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d4:	d117      	bne.n	8003306 <UART_Receive_IT+0x50>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d113      	bne.n	8003306 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	1c9a      	adds	r2, r3, #2
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
 8003304:	e026      	b.n	8003354 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003318:	d007      	beq.n	800332a <UART_Receive_IT+0x74>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <UART_Receive_IT+0x82>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e008      	b.n	800334a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003344:	b2da      	uxtb	r2, r3
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29b      	uxth	r3, r3
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4619      	mov	r1, r3
 8003362:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003364:	2b00      	cmp	r3, #0
 8003366:	d15a      	bne.n	800341e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0220 	bic.w	r2, r2, #32
 8003376:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003386:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d135      	bne.n	8003414 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	613b      	str	r3, [r7, #16]
   return(result);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f023 0310 	bic.w	r3, r3, #16
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	623a      	str	r2, [r7, #32]
 80033d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	69f9      	ldr	r1, [r7, #28]
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	61bb      	str	r3, [r7, #24]
   return(result);
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e5      	bne.n	80033ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d10a      	bne.n	8003406 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fcad 	bl	8002d6c <HAL_UARTEx_RxEventCallback>
 8003412:	e002      	b.n	800341a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fd f853 	bl	80004c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e002      	b.n	8003424 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	e000      	b.n	8003424 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
  }
}
 8003424:	4618      	mov	r0, r3
 8003426:	3730      	adds	r7, #48	; 0x30
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800342c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003430:	b09f      	sub	sp, #124	; 0x7c
 8003432:	af00      	add	r7, sp, #0
 8003434:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003442:	68d9      	ldr	r1, [r3, #12]
 8003444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	ea40 0301 	orr.w	r3, r0, r1
 800344c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	431a      	orrs	r2, r3
 8003458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	431a      	orrs	r2, r3
 800345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4313      	orrs	r3, r2
 8003464:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003470:	f021 010c 	bic.w	r1, r1, #12
 8003474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800347a:	430b      	orrs	r3, r1
 800347c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800347e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348a:	6999      	ldr	r1, [r3, #24]
 800348c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	ea40 0301 	orr.w	r3, r0, r1
 8003494:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4bc5      	ldr	r3, [pc, #788]	; (80037b0 <UART_SetConfig+0x384>)
 800349c:	429a      	cmp	r2, r3
 800349e:	d004      	beq.n	80034aa <UART_SetConfig+0x7e>
 80034a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4bc3      	ldr	r3, [pc, #780]	; (80037b4 <UART_SetConfig+0x388>)
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d103      	bne.n	80034b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034aa:	f7ff f899 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 80034ae:	6778      	str	r0, [r7, #116]	; 0x74
 80034b0:	e002      	b.n	80034b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034b2:	f7ff f881 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 80034b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034c0:	f040 80b6 	bne.w	8003630 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034c6:	461c      	mov	r4, r3
 80034c8:	f04f 0500 	mov.w	r5, #0
 80034cc:	4622      	mov	r2, r4
 80034ce:	462b      	mov	r3, r5
 80034d0:	1891      	adds	r1, r2, r2
 80034d2:	6439      	str	r1, [r7, #64]	; 0x40
 80034d4:	415b      	adcs	r3, r3
 80034d6:	647b      	str	r3, [r7, #68]	; 0x44
 80034d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034dc:	1912      	adds	r2, r2, r4
 80034de:	eb45 0303 	adc.w	r3, r5, r3
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	00d9      	lsls	r1, r3, #3
 80034ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034f0:	00d0      	lsls	r0, r2, #3
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	1911      	adds	r1, r2, r4
 80034f8:	6639      	str	r1, [r7, #96]	; 0x60
 80034fa:	416b      	adcs	r3, r5
 80034fc:	667b      	str	r3, [r7, #100]	; 0x64
 80034fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	461a      	mov	r2, r3
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	1891      	adds	r1, r2, r2
 800350a:	63b9      	str	r1, [r7, #56]	; 0x38
 800350c:	415b      	adcs	r3, r3
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003510:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003514:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003518:	f7fc fe56 	bl	80001c8 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4ba5      	ldr	r3, [pc, #660]	; (80037b8 <UART_SetConfig+0x38c>)
 8003522:	fba3 2302 	umull	r2, r3, r3, r2
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	011e      	lsls	r6, r3, #4
 800352a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800352c:	461c      	mov	r4, r3
 800352e:	f04f 0500 	mov.w	r5, #0
 8003532:	4622      	mov	r2, r4
 8003534:	462b      	mov	r3, r5
 8003536:	1891      	adds	r1, r2, r2
 8003538:	6339      	str	r1, [r7, #48]	; 0x30
 800353a:	415b      	adcs	r3, r3
 800353c:	637b      	str	r3, [r7, #52]	; 0x34
 800353e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003542:	1912      	adds	r2, r2, r4
 8003544:	eb45 0303 	adc.w	r3, r5, r3
 8003548:	f04f 0000 	mov.w	r0, #0
 800354c:	f04f 0100 	mov.w	r1, #0
 8003550:	00d9      	lsls	r1, r3, #3
 8003552:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003556:	00d0      	lsls	r0, r2, #3
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	1911      	adds	r1, r2, r4
 800355e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003560:	416b      	adcs	r3, r5
 8003562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	461a      	mov	r2, r3
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	1891      	adds	r1, r2, r2
 8003570:	62b9      	str	r1, [r7, #40]	; 0x28
 8003572:	415b      	adcs	r3, r3
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003576:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800357a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800357e:	f7fc fe23 	bl	80001c8 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4b8c      	ldr	r3, [pc, #560]	; (80037b8 <UART_SetConfig+0x38c>)
 8003588:	fba3 1302 	umull	r1, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	2164      	movs	r1, #100	; 0x64
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	3332      	adds	r3, #50	; 0x32
 800359a:	4a87      	ldr	r2, [pc, #540]	; (80037b8 <UART_SetConfig+0x38c>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035a8:	441e      	add	r6, r3
 80035aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ac:	4618      	mov	r0, r3
 80035ae:	f04f 0100 	mov.w	r1, #0
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	1894      	adds	r4, r2, r2
 80035b8:	623c      	str	r4, [r7, #32]
 80035ba:	415b      	adcs	r3, r3
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
 80035be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035c2:	1812      	adds	r2, r2, r0
 80035c4:	eb41 0303 	adc.w	r3, r1, r3
 80035c8:	f04f 0400 	mov.w	r4, #0
 80035cc:	f04f 0500 	mov.w	r5, #0
 80035d0:	00dd      	lsls	r5, r3, #3
 80035d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035d6:	00d4      	lsls	r4, r2, #3
 80035d8:	4622      	mov	r2, r4
 80035da:	462b      	mov	r3, r5
 80035dc:	1814      	adds	r4, r2, r0
 80035de:	653c      	str	r4, [r7, #80]	; 0x50
 80035e0:	414b      	adcs	r3, r1
 80035e2:	657b      	str	r3, [r7, #84]	; 0x54
 80035e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	461a      	mov	r2, r3
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	1891      	adds	r1, r2, r2
 80035f0:	61b9      	str	r1, [r7, #24]
 80035f2:	415b      	adcs	r3, r3
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80035fe:	f7fc fde3 	bl	80001c8 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <UART_SetConfig+0x38c>)
 8003608:	fba3 1302 	umull	r1, r3, r3, r2
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	2164      	movs	r1, #100	; 0x64
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	3332      	adds	r3, #50	; 0x32
 800361a:	4a67      	ldr	r2, [pc, #412]	; (80037b8 <UART_SetConfig+0x38c>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	f003 0207 	and.w	r2, r3, #7
 8003626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4432      	add	r2, r6
 800362c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800362e:	e0b9      	b.n	80037a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003632:	461c      	mov	r4, r3
 8003634:	f04f 0500 	mov.w	r5, #0
 8003638:	4622      	mov	r2, r4
 800363a:	462b      	mov	r3, r5
 800363c:	1891      	adds	r1, r2, r2
 800363e:	6139      	str	r1, [r7, #16]
 8003640:	415b      	adcs	r3, r3
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003648:	1912      	adds	r2, r2, r4
 800364a:	eb45 0303 	adc.w	r3, r5, r3
 800364e:	f04f 0000 	mov.w	r0, #0
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	00d9      	lsls	r1, r3, #3
 8003658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800365c:	00d0      	lsls	r0, r2, #3
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	eb12 0804 	adds.w	r8, r2, r4
 8003666:	eb43 0905 	adc.w	r9, r3, r5
 800366a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4618      	mov	r0, r3
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	008b      	lsls	r3, r1, #2
 800367e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003682:	0082      	lsls	r2, r0, #2
 8003684:	4640      	mov	r0, r8
 8003686:	4649      	mov	r1, r9
 8003688:	f7fc fd9e 	bl	80001c8 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <UART_SetConfig+0x38c>)
 8003692:	fba3 2302 	umull	r2, r3, r3, r2
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	011e      	lsls	r6, r3, #4
 800369a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800369c:	4618      	mov	r0, r3
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	1894      	adds	r4, r2, r2
 80036a8:	60bc      	str	r4, [r7, #8]
 80036aa:	415b      	adcs	r3, r3
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b2:	1812      	adds	r2, r2, r0
 80036b4:	eb41 0303 	adc.w	r3, r1, r3
 80036b8:	f04f 0400 	mov.w	r4, #0
 80036bc:	f04f 0500 	mov.w	r5, #0
 80036c0:	00dd      	lsls	r5, r3, #3
 80036c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036c6:	00d4      	lsls	r4, r2, #3
 80036c8:	4622      	mov	r2, r4
 80036ca:	462b      	mov	r3, r5
 80036cc:	1814      	adds	r4, r2, r0
 80036ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80036d0:	414b      	adcs	r3, r1
 80036d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	f04f 0100 	mov.w	r1, #0
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	008b      	lsls	r3, r1, #2
 80036e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036ec:	0082      	lsls	r2, r0, #2
 80036ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036f2:	f7fc fd69 	bl	80001c8 <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <UART_SetConfig+0x38c>)
 80036fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	2164      	movs	r1, #100	; 0x64
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	3332      	adds	r3, #50	; 0x32
 800370e:	4a2a      	ldr	r2, [pc, #168]	; (80037b8 <UART_SetConfig+0x38c>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800371a:	441e      	add	r6, r3
 800371c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800371e:	4618      	mov	r0, r3
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	1894      	adds	r4, r2, r2
 800372a:	603c      	str	r4, [r7, #0]
 800372c:	415b      	adcs	r3, r3
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003734:	1812      	adds	r2, r2, r0
 8003736:	eb41 0303 	adc.w	r3, r1, r3
 800373a:	f04f 0400 	mov.w	r4, #0
 800373e:	f04f 0500 	mov.w	r5, #0
 8003742:	00dd      	lsls	r5, r3, #3
 8003744:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003748:	00d4      	lsls	r4, r2, #3
 800374a:	4622      	mov	r2, r4
 800374c:	462b      	mov	r3, r5
 800374e:	eb12 0a00 	adds.w	sl, r2, r0
 8003752:	eb43 0b01 	adc.w	fp, r3, r1
 8003756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4618      	mov	r0, r3
 800375c:	f04f 0100 	mov.w	r1, #0
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	008b      	lsls	r3, r1, #2
 800376a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800376e:	0082      	lsls	r2, r0, #2
 8003770:	4650      	mov	r0, sl
 8003772:	4659      	mov	r1, fp
 8003774:	f7fc fd28 	bl	80001c8 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <UART_SetConfig+0x38c>)
 800377e:	fba3 1302 	umull	r1, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	2164      	movs	r1, #100	; 0x64
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	3332      	adds	r3, #50	; 0x32
 8003790:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <UART_SetConfig+0x38c>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	f003 020f 	and.w	r2, r3, #15
 800379c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4432      	add	r2, r6
 80037a2:	609a      	str	r2, [r3, #8]
}
 80037a4:	bf00      	nop
 80037a6:	377c      	adds	r7, #124	; 0x7c
 80037a8:	46bd      	mov	sp, r7
 80037aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ae:	bf00      	nop
 80037b0:	40011000 	.word	0x40011000
 80037b4:	40011400 	.word	0x40011400
 80037b8:	51eb851f 	.word	0x51eb851f

080037bc <__libc_init_array>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	4d0d      	ldr	r5, [pc, #52]	; (80037f4 <__libc_init_array+0x38>)
 80037c0:	4c0d      	ldr	r4, [pc, #52]	; (80037f8 <__libc_init_array+0x3c>)
 80037c2:	1b64      	subs	r4, r4, r5
 80037c4:	10a4      	asrs	r4, r4, #2
 80037c6:	2600      	movs	r6, #0
 80037c8:	42a6      	cmp	r6, r4
 80037ca:	d109      	bne.n	80037e0 <__libc_init_array+0x24>
 80037cc:	4d0b      	ldr	r5, [pc, #44]	; (80037fc <__libc_init_array+0x40>)
 80037ce:	4c0c      	ldr	r4, [pc, #48]	; (8003800 <__libc_init_array+0x44>)
 80037d0:	f000 f820 	bl	8003814 <_init>
 80037d4:	1b64      	subs	r4, r4, r5
 80037d6:	10a4      	asrs	r4, r4, #2
 80037d8:	2600      	movs	r6, #0
 80037da:	42a6      	cmp	r6, r4
 80037dc:	d105      	bne.n	80037ea <__libc_init_array+0x2e>
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e4:	4798      	blx	r3
 80037e6:	3601      	adds	r6, #1
 80037e8:	e7ee      	b.n	80037c8 <__libc_init_array+0xc>
 80037ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ee:	4798      	blx	r3
 80037f0:	3601      	adds	r6, #1
 80037f2:	e7f2      	b.n	80037da <__libc_init_array+0x1e>
 80037f4:	08003854 	.word	0x08003854
 80037f8:	08003854 	.word	0x08003854
 80037fc:	08003854 	.word	0x08003854
 8003800:	08003858 	.word	0x08003858

08003804 <memset>:
 8003804:	4402      	add	r2, r0
 8003806:	4603      	mov	r3, r0
 8003808:	4293      	cmp	r3, r2
 800380a:	d100      	bne.n	800380e <memset+0xa>
 800380c:	4770      	bx	lr
 800380e:	f803 1b01 	strb.w	r1, [r3], #1
 8003812:	e7f9      	b.n	8003808 <memset+0x4>

08003814 <_init>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr

08003820 <_fini>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr
