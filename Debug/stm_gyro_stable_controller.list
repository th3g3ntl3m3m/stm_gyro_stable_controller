
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800cf8c  0800cf8c  0001cf8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d524  0800d524  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800d524  0800d524  0001d524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d52c  0800d52c  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d52c  0800d52c  0001d52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d530  0800d530  0001d530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800d534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          00000e20  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ecc  20000ecc  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b7a  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003714  00000000  00000000  00039c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  0003d370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001210  00000000  00000000  0003e6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025338  00000000  00000000  0003f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017bf7  00000000  00000000  00064c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de6c6  00000000  00000000  0007c80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015aed5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e1c  00000000  00000000  0015af28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf74 	.word	0x0800cf74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	0800cf74 	.word	0x0800cf74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b96e 	b.w	8000f00 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468c      	mov	ip, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8083 	bne.w	8000d52 <__udivmoddi4+0x116>
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	d947      	bls.n	8000ce2 <__udivmoddi4+0xa6>
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	b142      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c58:	f1c2 0020 	rsb	r0, r2, #32
 8000c5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c60:	4091      	lsls	r1, r2
 8000c62:	4097      	lsls	r7, r2
 8000c64:	ea40 0c01 	orr.w	ip, r0, r1
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fbbc f6f8 	udiv	r6, ip, r8
 8000c74:	fa1f fe87 	uxth.w	lr, r7
 8000c78:	fb08 c116 	mls	r1, r8, r6, ip
 8000c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c80:	fb06 f10e 	mul.w	r1, r6, lr
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x60>
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 8119 	bcs.w	8000ec4 <__udivmoddi4+0x288>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 8116 	bls.w	8000ec4 <__udivmoddi4+0x288>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	443b      	add	r3, r7
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x8c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 8105 	bcs.w	8000ec8 <__udivmoddi4+0x28c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f240 8102 	bls.w	8000ec8 <__udivmoddi4+0x28c>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa0>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	b902      	cbnz	r2, 8000ce6 <__udivmoddi4+0xaa>
 8000ce4:	deff      	udf	#255	; 0xff
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d150      	bne.n	8000d90 <__udivmoddi4+0x154>
 8000cee:	1bcb      	subs	r3, r1, r7
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	fa1f f887 	uxth.w	r8, r7
 8000cf8:	2601      	movs	r6, #1
 8000cfa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfe:	0c21      	lsrs	r1, r4, #16
 8000d00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb08 f30c 	mul.w	r3, r8, ip
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0xe4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0xe2>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	f200 80e9 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d1e:	4684      	mov	ip, r0
 8000d20:	1ac9      	subs	r1, r1, r3
 8000d22:	b2a3      	uxth	r3, r4
 8000d24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d30:	fb08 f800 	mul.w	r8, r8, r0
 8000d34:	45a0      	cmp	r8, r4
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x10c>
 8000d38:	193c      	adds	r4, r7, r4
 8000d3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x10a>
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	f200 80d9 	bhi.w	8000ef8 <__udivmoddi4+0x2bc>
 8000d46:	4618      	mov	r0, r3
 8000d48:	eba4 0408 	sub.w	r4, r4, r8
 8000d4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d50:	e7bf      	b.n	8000cd2 <__udivmoddi4+0x96>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x12e>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80b1 	beq.w	8000ebe <__udivmoddi4+0x282>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x1cc>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0x140>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80b8 	bhi.w	8000eec <__udivmoddi4+0x2b0>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	468c      	mov	ip, r1
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0a8      	beq.n	8000cdc <__udivmoddi4+0xa0>
 8000d8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8e:	e7a5      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000d90:	f1c2 0320 	rsb	r3, r2, #32
 8000d94:	fa20 f603 	lsr.w	r6, r0, r3
 8000d98:	4097      	lsls	r7, r2
 8000d9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da2:	40d9      	lsrs	r1, r3
 8000da4:	4330      	orrs	r0, r6
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dac:	fa1f f887 	uxth.w	r8, r7
 8000db0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f108 	mul.w	r1, r6, r8
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x19c>
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dca:	f080 808d 	bcs.w	8000ee8 <__udivmoddi4+0x2ac>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 808a 	bls.w	8000ee8 <__udivmoddi4+0x2ac>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	443b      	add	r3, r7
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b281      	uxth	r1, r0
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb00 f308 	mul.w	r3, r0, r8
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x1c4>
 8000df0:	1879      	adds	r1, r7, r1
 8000df2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df6:	d273      	bcs.n	8000ee0 <__udivmoddi4+0x2a4>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d971      	bls.n	8000ee0 <__udivmoddi4+0x2a4>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4439      	add	r1, r7
 8000e00:	1acb      	subs	r3, r1, r3
 8000e02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e06:	e778      	b.n	8000cfa <__udivmoddi4+0xbe>
 8000e08:	f1c6 0c20 	rsb	ip, r6, #32
 8000e0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e14:	431c      	orrs	r4, r3
 8000e16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e26:	431f      	orrs	r7, r3
 8000e28:	0c3b      	lsrs	r3, r7, #16
 8000e2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2e:	fa1f f884 	uxth.w	r8, r4
 8000e32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	fa02 f206 	lsl.w	r2, r2, r6
 8000e44:	fa00 f306 	lsl.w	r3, r0, r6
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x220>
 8000e4a:	1861      	adds	r1, r4, r1
 8000e4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e50:	d248      	bcs.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e52:	458a      	cmp	sl, r1
 8000e54:	d946      	bls.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e56:	f1a9 0902 	sub.w	r9, r9, #2
 8000e5a:	4421      	add	r1, r4
 8000e5c:	eba1 010a 	sub.w	r1, r1, sl
 8000e60:	b2bf      	uxth	r7, r7
 8000e62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6e:	fb00 f808 	mul.w	r8, r0, r8
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x24a>
 8000e76:	19e7      	adds	r7, r4, r7
 8000e78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e7c:	d22e      	bcs.n	8000edc <__udivmoddi4+0x2a0>
 8000e7e:	45b8      	cmp	r8, r7
 8000e80:	d92c      	bls.n	8000edc <__udivmoddi4+0x2a0>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4427      	add	r7, r4
 8000e86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8a:	eba7 0708 	sub.w	r7, r7, r8
 8000e8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e92:	454f      	cmp	r7, r9
 8000e94:	46c6      	mov	lr, r8
 8000e96:	4649      	mov	r1, r9
 8000e98:	d31a      	bcc.n	8000ed0 <__udivmoddi4+0x294>
 8000e9a:	d017      	beq.n	8000ecc <__udivmoddi4+0x290>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x27a>
 8000e9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ea2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eaa:	40f2      	lsrs	r2, r6
 8000eac:	ea4c 0202 	orr.w	r2, ip, r2
 8000eb0:	40f7      	lsrs	r7, r6
 8000eb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	462e      	mov	r6, r5
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	e70b      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	e6e9      	b.n	8000c9c <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fd      	b.n	8000cc8 <__udivmoddi4+0x8c>
 8000ecc:	4543      	cmp	r3, r8
 8000ece:	d2e5      	bcs.n	8000e9c <__udivmoddi4+0x260>
 8000ed0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed8:	3801      	subs	r0, #1
 8000eda:	e7df      	b.n	8000e9c <__udivmoddi4+0x260>
 8000edc:	4608      	mov	r0, r1
 8000ede:	e7d2      	b.n	8000e86 <__udivmoddi4+0x24a>
 8000ee0:	4660      	mov	r0, ip
 8000ee2:	e78d      	b.n	8000e00 <__udivmoddi4+0x1c4>
 8000ee4:	4681      	mov	r9, r0
 8000ee6:	e7b9      	b.n	8000e5c <__udivmoddi4+0x220>
 8000ee8:	4666      	mov	r6, ip
 8000eea:	e775      	b.n	8000dd8 <__udivmoddi4+0x19c>
 8000eec:	4630      	mov	r0, r6
 8000eee:	e74a      	b.n	8000d86 <__udivmoddi4+0x14a>
 8000ef0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef4:	4439      	add	r1, r7
 8000ef6:	e713      	b.n	8000d20 <__udivmoddi4+0xe4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	443c      	add	r4, r7
 8000efc:	e724      	b.n	8000d48 <__udivmoddi4+0x10c>
 8000efe:	bf00      	nop

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8000f04:	b490      	push	{r4, r7}
 8000f06:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f10:	6018      	str	r0, [r3, #0]
 8000f12:	f107 0120 	add.w	r1, r7, #32
 8000f16:	eeb0 5a61 	vmov.f32	s10, s3
 8000f1a:	eef0 5a42 	vmov.f32	s11, s4
 8000f1e:	eeb0 6a62 	vmov.f32	s12, s5
 8000f22:	f107 0214 	add.w	r2, r7, #20
 8000f26:	eef0 6a43 	vmov.f32	s13, s6
 8000f2a:	eeb0 7a63 	vmov.f32	s14, s7
 8000f2e:	eef0 7a44 	vmov.f32	s15, s8
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	1d38      	adds	r0, r7, #4
 8000f38:	edc0 4a00 	vstr	s9, [r0]
 8000f3c:	ed81 0a00 	vstr	s0, [r1]
 8000f40:	edc1 0a01 	vstr	s1, [r1, #4]
 8000f44:	ed81 1a02 	vstr	s2, [r1, #8]
 8000f48:	ed82 5a00 	vstr	s10, [r2]
 8000f4c:	edc2 5a01 	vstr	s11, [r2, #4]
 8000f50:	ed82 6a02 	vstr	s12, [r2, #8]
 8000f54:	edc3 6a00 	vstr	s13, [r3]
 8000f58:	ed83 7a01 	vstr	s14, [r3, #4]
 8000f5c:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8000f60:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000f64:	f04f 0200 	mov.w	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	edd3 7a00 	vldr	s15, [r3]
 8000f86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8e:	d112      	bne.n	8000fb6 <FusionAhrsUpdate+0xb2>
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	d109      	bne.n	8000fb6 <FusionAhrsUpdate+0xb2>
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000faa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb2:	f000 8437 	beq.w	8001824 <FusionAhrsUpdate+0x920>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8000fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	edd3 6a03 	vldr	s13, [r3, #12]
 8000fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000fea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000fee:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8000ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	edd3 7a04 	vldr	s15, [r3, #16]
 8001006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800100a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	edd3 6a05 	vldr	s13, [r3, #20]
 8001014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	edd3 7a06 	vldr	s15, [r3, #24]
 800101e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8001026:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800102a:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800102e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	ed93 7a03 	vldr	s14, [r3, #12]
 8001038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001046:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800104a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800104e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	edd3 6a06 	vldr	s13, [r3, #24]
 8001058:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001066:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 800106a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800106e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001072:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001076:	f107 0214 	add.w	r2, r7, #20
 800107a:	ca07      	ldmia	r2, {r0, r1, r2}
 800107c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001080:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001084:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001088:	ca07      	ldmia	r2, {r0, r1, r2}
 800108a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 800108e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001092:	ed93 7a00 	vldr	s14, [r3]
 8001096:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010a6:	edd3 6a01 	vldr	s13, [r3, #4]
 80010aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010be:	edd3 6a02 	vldr	s13, [r3, #8]
 80010c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d2:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80010d6:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 80010da:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ea:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80010ee:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 80010f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010f6:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80010fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001108:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 800110a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	105a      	asrs	r2, r3, #1
 8001112:	4b9a      	ldr	r3, [pc, #616]	; (800137c <FusionAhrsUpdate+0x478>)
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800111a:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 800111c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001126:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001128:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800112c:	ed93 7a00 	vldr	s14, [r3]
 8001130:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800114c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001150:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001160:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001164:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001168:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800116a:	f207 4214 	addw	r2, r7, #1044	; 0x414
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001174:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001178:	ca07      	ldmia	r2, {r0, r1, r2}
 800117a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800117e:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001188:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 800118a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800118e:	ed93 7a00 	vldr	s14, [r3]
 8001192:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011a2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80011a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80011ae:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011be:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80011c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80011ca:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011da:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80011de:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80011e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80011e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011ec:	f507 724a 	add.w	r2, r7, #808	; 0x328
 80011f0:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80011f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80011fa:	bf00      	nop
 80011fc:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8001200:	461c      	mov	r4, r3
 8001202:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8001206:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800120a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800120e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001212:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8001216:	ca07      	ldmia	r2, {r0, r1, r2}
 8001218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800121c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001220:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001224:	ca07      	ldmia	r2, {r0, r1, r2}
 8001226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 800122a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800122e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001232:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001236:	edd3 7a02 	vldr	s15, [r3, #8]
 800123a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800123e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001242:	edd3 6a02 	vldr	s13, [r3, #8]
 8001246:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800124a:	edd3 7a01 	vldr	s15, [r3, #4]
 800124e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001256:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800125a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 800125e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001262:	ed93 7a02 	vldr	s14, [r3, #8]
 8001266:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	edd3 6a00 	vldr	s13, [r3]
 800127a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800127e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800128e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001292:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001296:	ed93 7a00 	vldr	s14, [r3]
 800129a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800129e:	edd3 7a01 	vldr	s15, [r3, #4]
 80012a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80012ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012c2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80012c6:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 80012ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80012ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80012d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012d4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80012d8:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 80012dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80012de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e6:	f107 0208 	add.w	r2, r7, #8
 80012ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80012ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80012f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f4:	ed93 7a00 	vldr	s14, [r3]
 80012f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001308:	edd3 6a01 	vldr	s13, [r3, #4]
 800130c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001310:	edd3 7a01 	vldr	s15, [r3, #4]
 8001314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001318:	ee37 7a27 	vadd.f32	s14, s14, s15
 800131c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001320:	edd3 6a02 	vldr	s13, [r3, #8]
 8001324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001328:	edd3 7a02 	vldr	s15, [r3, #8]
 800132c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001330:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 8001334:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001338:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 800133c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	edd3 7a01 	vldr	s15, [r3, #4]
 8001346:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001356:	f100 8266 	bmi.w	8001826 <FusionAhrsUpdate+0x922>
 800135a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	edd3 7a02 	vldr	s15, [r3, #8]
 8001364:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001368:	ed93 7a00 	vldr	s14, [r3]
 800136c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	f300 8257 	bgt.w	8001826 <FusionAhrsUpdate+0x922>
 8001378:	e002      	b.n	8001380 <FusionAhrsUpdate+0x47c>
 800137a:	bf00      	nop
 800137c:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 8001380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	ed93 7a04 	vldr	s14, [r3, #16]
 800138a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	edd3 7a05 	vldr	s15, [r3, #20]
 8001394:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	edd3 6a03 	vldr	s13, [r3, #12]
 80013a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80013ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b0:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80013b4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80013b8:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 80013bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80013c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	edd3 6a05 	vldr	s13, [r3, #20]
 80013e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80013f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80013f8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80013fc:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 8001400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	ed93 7a05 	vldr	s14, [r3, #20]
 800140a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	edd3 7a06 	vldr	s15, [r3, #24]
 8001414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	edd3 7a04 	vldr	s15, [r3, #16]
 800142c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001430:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001434:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001438:	edc3 7a02 	vstr	s15, [r3, #8]
 800143c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001440:	f107 0214 	add.w	r2, r7, #20
 8001444:	ca07      	ldmia	r2, {r0, r1, r2}
 8001446:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800144a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800144e:	f107 0208 	add.w	r2, r7, #8
 8001452:	ca07      	ldmia	r2, {r0, r1, r2}
 8001454:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001458:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800145c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001464:	edd3 7a02 	vldr	s15, [r3, #8]
 8001468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800146c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001470:	edd3 6a02 	vldr	s13, [r3, #8]
 8001474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001478:	edd3 7a01 	vldr	s15, [r3, #4]
 800147c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001488:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 800148c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001490:	ed93 7a02 	vldr	s14, [r3, #8]
 8001494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80014a4:	edd3 6a00 	vldr	s13, [r3]
 80014a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80014b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014bc:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80014c0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80014c4:	ed93 7a00 	vldr	s14, [r3]
 80014c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80014d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80014dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014f0:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80014f4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80014f8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80014fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001502:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001506:	461c      	mov	r4, r3
 8001508:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800150c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001514:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001518:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 800151c:	ca07      	ldmia	r2, {r0, r1, r2}
 800151e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001522:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001526:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800152a:	ca07      	ldmia	r2, {r0, r1, r2}
 800152c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001530:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001534:	ed93 7a00 	vldr	s14, [r3]
 8001538:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001544:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001548:	edd3 6a01 	vldr	s13, [r3, #4]
 800154c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001550:	edd3 7a01 	vldr	s15, [r3, #4]
 8001554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001560:	edd3 6a02 	vldr	s13, [r3, #8]
 8001564:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001568:	edd3 7a02 	vldr	s15, [r3, #8]
 800156c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001574:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001578:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 800157c:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001590:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001594:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001598:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80015a0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015aa:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80015ac:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	105a      	asrs	r2, r3, #1
 80015b4:	4b99      	ldr	r3, [pc, #612]	; (800181c <FusionAhrsUpdate+0x918>)
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80015bc:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80015be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015c8:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80015ca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015de:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ea:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80015ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001602:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001606:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800160a:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800160c:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001616:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800161a:	ca07      	ldmia	r2, {r0, r1, r2}
 800161c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001620:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800162a:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 800162c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001630:	ed93 7a00 	vldr	s14, [r3]
 8001634:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001640:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001644:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001648:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800164c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001650:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001660:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001664:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001668:	ed93 7a02 	vldr	s14, [r3, #8]
 800166c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800167c:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001680:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001684:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001688:	ca07      	ldmia	r2, {r0, r1, r2}
 800168a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800168e:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001692:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8001696:	ca07      	ldmia	r2, {r0, r1, r2}
 8001698:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800169c:	bf00      	nop
 800169e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80016a2:	461c      	mov	r4, r3
 80016a4:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80016a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016b4:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 80016b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c2:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80016c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80016c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80016cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80016d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80016dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80016e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80016f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016fc:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001700:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001704:	ed93 7a02 	vldr	s14, [r3, #8]
 8001708:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001714:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001718:	edd3 6a00 	vldr	s13, [r3]
 800171c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001720:	edd3 7a02 	vldr	s15, [r3, #8]
 8001724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001730:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001734:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001738:	ed93 7a00 	vldr	s14, [r3]
 800173c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001740:	edd3 7a01 	vldr	s15, [r3, #4]
 8001744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001748:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800174c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001750:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001764:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001768:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800176c:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001770:	ca07      	ldmia	r2, {r0, r1, r2}
 8001772:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001776:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800177a:	461c      	mov	r4, r3
 800177c:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001780:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001784:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001788:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800178c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8001790:	ca07      	ldmia	r2, {r0, r1, r2}
 8001792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001796:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800179a:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800179e:	ca07      	ldmia	r2, {r0, r1, r2}
 80017a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 80017a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017a8:	ed93 7a00 	vldr	s14, [r3]
 80017ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017bc:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80017c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80017c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80017d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017d8:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80017dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80017e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017f4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80017f8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80017fc:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001800:	ca07      	ldmia	r2, {r0, r1, r2}
 8001802:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001806:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800180a:	461c      	mov	r4, r3
 800180c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001810:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001814:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001818:	e005      	b.n	8001826 <FusionAhrsUpdate+0x922>
 800181a:	bf00      	nop
 800181c:	5f3759df 	.word	0x5f3759df
 8001820:	3c8efa35 	.word	0x3c8efa35
            break;
 8001824:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	d105      	bne.n	8001846 <FusionAhrsUpdate+0x942>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 800183a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8001852:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 8001854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800185e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd24      	ble.n	80018bc <FusionAhrsUpdate+0x9b8>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800187c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800188a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001898:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800189c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 80018ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	f207 4224 	addw	r2, r7, #1060	; 0x424
 80018ba:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 80018bc:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 8001820 <FusionAhrsUpdate+0x91c>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 80018c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80018c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80018cc:	f107 0220 	add.w	r2, r7, #32
 80018d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018d6:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 80018da:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 80018e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ea:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80018ee:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80018f2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80018f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80018fa:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 80018fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001902:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001906:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800190a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800190e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001912:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191a:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800191e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001922:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8001926:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800192a:	ca07      	ldmia	r2, {r0, r1, r2}
 800192c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001930:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001934:	461c      	mov	r4, r3
 8001936:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800193a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800193e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001942:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001946:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800194a:	ca07      	ldmia	r2, {r0, r1, r2}
 800194c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001950:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 800195a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800195e:	ed93 7a00 	vldr	s14, [r3]
 8001962:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196a:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800196e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001972:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001976:	ed93 7a01 	vldr	s14, [r3, #4]
 800197a:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 800197e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001982:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001986:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800198a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800198e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001992:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199a:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800199e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80019a2:	f507 7219 	add.w	r2, r7, #612	; 0x264
 80019a6:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80019aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019b0:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 80019b4:	461c      	mov	r4, r3
 80019b6:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80019ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019c2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80019c6:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80019ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80019cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019d0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80019d4:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 80019d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80019da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 80019de:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80019e2:	ed93 7a00 	vldr	s14, [r3]
 80019e6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80019f6:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80019fa:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80019fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a02:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a06:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001a12:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001a16:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001a1a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a1e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a22:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001a2e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001a32:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8001a36:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001a3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a40:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001a44:	461c      	mov	r4, r3
 8001a46:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001a4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a52:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a56:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8001a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 8001a68:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a6c:	ed93 7a00 	vldr	s14, [r3]
 8001a70:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a78:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a7c:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001a80:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a84:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a88:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a94:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001a98:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001aa0:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001aac:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001ab0:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001ab4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001abe:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001ac2:	461c      	mov	r4, r3
 8001ac4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001ac8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001acc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ad0:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4614      	mov	r4, r2
 8001adc:	330c      	adds	r3, #12
 8001ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ae4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001ae8:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8001aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001aee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001af2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001af6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001afa:	eeb1 7a67 	vneg.f32	s14, s15
 8001afe:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b12:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b16:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b22:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b26:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b2a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001b3e:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 8001b42:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b46:	ed93 7a00 	vldr	s14, [r3]
 8001b4a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b56:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b5e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b62:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b6e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b72:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b76:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b86:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001b8a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8001b8e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b92:	ed93 7a00 	vldr	s14, [r3]
 8001b96:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001ba6:	edd3 6a01 	vldr	s13, [r3, #4]
 8001baa:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001bae:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bba:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bbe:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bc2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001bd6:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 8001bda:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bde:	ed93 7a00 	vldr	s14, [r3]
 8001be2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001be6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bee:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bf2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bf6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001bfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c06:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c0a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c0e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001c22:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001c26:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001c2a:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8001c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c34:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001c38:	461c      	mov	r4, r3
 8001c3a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c44:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8001c48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4614      	mov	r4, r2
 8001c50:	330c      	adds	r3, #12
 8001c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c58:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8001c5c:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001c60:	4614      	mov	r4, r2
 8001c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8001c68:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001c6c:	ed93 7a00 	vldr	s14, [r3]
 8001c70:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c80:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001c84:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001c88:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c8c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001c90:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c98:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c9c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001ca0:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001ca4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ca8:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001cac:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001cb8:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001cbc:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001cc0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cc4:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001cc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd0:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001cd4:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001cd8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001cdc:	f507 7466 	add.w	r4, r7, #920	; 0x398
 8001ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ce6:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001cea:	461c      	mov	r4, r3
 8001cec:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001cf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 8001cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8001d00:	f103 040c 	add.w	r4, r3, #12
 8001d04:	4613      	mov	r3, r2
 8001d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d0c:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4614      	mov	r4, r2
 8001d18:	330c      	adds	r3, #12
 8001d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001d20:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d24:	ed93 7a00 	vldr	s14, [r3]
 8001d28:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d34:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d38:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d3c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d40:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d4c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d50:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d54:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d64:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d68:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d6c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d70:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7c:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 8001d80:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8001d84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8c:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 8001d90:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d94:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8001d98:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001d9a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001da4:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001da6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	105a      	asrs	r2, r3, #1
 8001dae:	4b98      	ldr	r3, [pc, #608]	; (8002010 <FusionAhrsUpdate+0x110c>)
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8001db6:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001db8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dc2:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001dc4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dc8:	ed93 7a00 	vldr	s14, [r3]
 8001dcc:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8001dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001de4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001de8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001df8:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001dfc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e00:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001e02:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8001e06:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e0a:	ed93 7a00 	vldr	s14, [r3]
 8001e0e:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e16:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e1a:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8001e1e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e22:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e26:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e32:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8001e36:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e3a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e3e:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e4a:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8001e4e:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e52:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e56:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e62:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 8001e66:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e6a:	f507 7462 	add.w	r4, r7, #904	; 0x388
 8001e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e74:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001e78:	461c      	mov	r4, r3
 8001e7a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 8001e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8001e8e:	f103 040c 	add.w	r4, r3, #12
 8001e92:	4613      	mov	r3, r2
 8001e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 8001e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	edd3 7a06 	vldr	s15, [r3, #24]
 8001eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ece:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001ed2:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001ed6:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8001eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	edd3 7a04 	vldr	s15, [r3, #16]
 8001eee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	edd3 6a05 	vldr	s13, [r3, #20]
 8001efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001f12:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001f16:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 8001f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f36:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	edd3 6a06 	vldr	s13, [r3, #24]
 8001f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f56:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001f5a:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001f5e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001f62:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f66:	f107 0214 	add.w	r2, r7, #20
 8001f6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f70:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001f74:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8001f78:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8001f7e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f82:	ed93 7a00 	vldr	s14, [r3]
 8001f86:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f92:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001f96:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8001f9a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fa2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001fa6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fae:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001fb2:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8001fb6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001fba:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fbe:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001fc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fca:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001fce:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001fd2:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001fd6:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001fda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fe0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001fe4:	461c      	mov	r4, r3
 8001fe6:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001fea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 8001ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001ffc:	331c      	adds	r3, #28
 8001ffe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002000:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 8002004:	bf00      	nop
 8002006:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 800200a:	46bd      	mov	sp, r7
 800200c:	bc90      	pop	{r4, r7}
 800200e:	4770      	bx	lr
 8002010:	5f3759df 	.word	0x5f3759df

08002014 <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b08c      	sub	sp, #48	; 0x30
 8002018:	af00      	add	r7, sp, #0
 800201a:	61f8      	str	r0, [r7, #28]
 800201c:	eeb0 5a40 	vmov.f32	s10, s0
 8002020:	eef0 5a60 	vmov.f32	s11, s1
 8002024:	eeb0 6a41 	vmov.f32	s12, s2
 8002028:	eef0 6a61 	vmov.f32	s13, s3
 800202c:	eeb0 7a42 	vmov.f32	s14, s4
 8002030:	eef0 7a62 	vmov.f32	s15, s5
 8002034:	ed87 3a00 	vstr	s6, [r7]
 8002038:	ed87 5a04 	vstr	s10, [r7, #16]
 800203c:	edc7 5a05 	vstr	s11, [r7, #20]
 8002040:	ed87 6a06 	vstr	s12, [r7, #24]
 8002044:	edc7 6a01 	vstr	s13, [r7, #4]
 8002048:	ed87 7a02 	vstr	s14, [r7, #8]
 800204c:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002062:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002066:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 800206a:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 800206e:	ed97 5a01 	vldr	s10, [r7, #4]
 8002072:	edd7 5a02 	vldr	s11, [r7, #8]
 8002076:	ed97 6a03 	vldr	s12, [r7, #12]
 800207a:	edd7 6a04 	vldr	s13, [r7, #16]
 800207e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002082:	edd7 7a06 	vldr	s15, [r7, #24]
 8002086:	edd7 4a00 	vldr	s9, [r7]
 800208a:	eef0 1a45 	vmov.f32	s3, s10
 800208e:	eeb0 2a65 	vmov.f32	s4, s11
 8002092:	eef0 2a46 	vmov.f32	s5, s12
 8002096:	eeb0 0a66 	vmov.f32	s0, s13
 800209a:	eef0 0a47 	vmov.f32	s1, s14
 800209e:	eeb0 1a67 	vmov.f32	s2, s15
 80020a2:	69f8      	ldr	r0, [r7, #28]
 80020a4:	f7fe ff2e 	bl	8000f04 <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 80020a8:	69f8      	ldr	r0, [r7, #28]
 80020aa:	f000 f862 	bl	8002172 <FusionAhrsIsInitialising>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <FusionAhrsUpdateWithoutMagnetometer+0xaa>
        fusionAhrs->zeroYawPending = true;
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 80020bc:	e00d      	b.n	80020da <FusionAhrsUpdateWithoutMagnetometer+0xc6>
        if (fusionAhrs->zeroYawPending == true) {
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <FusionAhrsUpdateWithoutMagnetometer+0xc6>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 80020c8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80020e4 <FusionAhrsUpdateWithoutMagnetometer+0xd0>
 80020cc:	69f8      	ldr	r0, [r7, #28]
 80020ce:	f000 f869 	bl	80021a4 <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80020da:	bf00      	nop
 80020dc:	3730      	adds	r7, #48	; 0x30
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	00000000 	.word	0x00000000

080020e8 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 80020e8:	b490      	push	{r4, r7}
 80020ea:	b096      	sub	sp, #88	; 0x58
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6178      	str	r0, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80020f6:	330c      	adds	r3, #12
 80020f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 8002102:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002106:	eef1 7a67 	vneg.f32	s15, s15
 800210a:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 800210e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002112:	eef1 7a67 	vneg.f32	s15, s15
 8002116:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 800211a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800211e:	eef1 7a67 	vneg.f32	s15, s15
 8002122:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 8002126:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800212a:	f107 0318 	add.w	r3, r7, #24
 800212e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002134:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002138:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800213c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800213e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 8002142:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214a:	ee06 0a10 	vmov	s12, r0
 800214e:	ee06 1a90 	vmov	s13, r1
 8002152:	ee07 2a10 	vmov	s14, r2
 8002156:	ee07 3a90 	vmov	s15, r3
}
 800215a:	eeb0 0a46 	vmov.f32	s0, s12
 800215e:	eef0 0a66 	vmov.f32	s1, s13
 8002162:	eeb0 1a47 	vmov.f32	s2, s14
 8002166:	eef0 1a67 	vmov.f32	s3, s15
 800216a:	3758      	adds	r7, #88	; 0x58
 800216c:	46bd      	mov	sp, r7
 800216e:	bc90      	pop	{r4, r7}
 8002170:	4770      	bx	lr

08002172 <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218e:	bfcc      	ite	gt
 8002190:	2301      	movgt	r3, #1
 8002192:	2300      	movle	r3, #0
 8002194:	b2db      	uxtb	r3, r3
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b0af      	sub	sp, #188	; 0xbc
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	ed87 0a00 	vstr	s0, [r7]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80021b6:	330c      	adds	r3, #12
 80021b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 80021be:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80021c2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80021c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ca:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80021ce:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80021d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021da:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80021de:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80021e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ea:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80021ee:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80021f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fa:	eeb0 0a67 	vmov.f32	s0, s15
 80021fe:	f008 fed1 	bl	800afa4 <sqrtf>
 8002202:	eeb0 7a40 	vmov.f32	s14, s0
 8002206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800220a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800220e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8002212:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002216:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8002222:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002226:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800222a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8002232:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002236:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8002242:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002246:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return normalisedQuaternion;
 8002252:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8002256:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800225a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800225c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002260:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002264:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002268:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800226a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f103 040c 	add.w	r4, r3, #12
 8002274:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800227a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	ed93 7a04 	vldr	s14, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	edd3 7a05 	vldr	s15, [r3, #20]
 800228a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	edd3 6a03 	vldr	s13, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	edd3 7a06 	vldr	s15, [r3, #24]
 800229a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229e:	ee37 6a27 	vadd.f32	s12, s14, s15
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80022ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022b6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	edd3 6a04 	vldr	s13, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ce:	eef0 0a67 	vmov.f32	s1, s15
 80022d2:	eeb0 0a46 	vmov.f32	s0, s12
 80022d6:	f008 fe63 	bl	800afa0 <atan2f>
 80022da:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return degrees * ((float) M_PI / 180.0f);
 80022e4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80022e8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002488 <FusionAhrsSetYaw+0x2e4>
 80022ec:	ee67 7a87 	vmul.f32	s15, s15, s14
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 80022f0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80022f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002300:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 8002304:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8002308:	f008 fd96 	bl	800ae38 <cosf>
 800230c:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion inverseYawQuaternion = {
 8002310:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	67fb      	str	r3, [r7, #124]	; 0x7c
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 8002322:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8002326:	f008 fdc7 	bl	800aeb8 <sinf>
 800232a:	eef0 7a40 	vmov.f32	s15, s0
 800232e:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion inverseYawQuaternion = {
 8002332:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 8002336:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800233a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800233e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800234a:	330c      	adds	r3, #12
 800234c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 8002352:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002356:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800235a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800235e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002362:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800236e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002372:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800237e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002382:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238e:	edc7 7a02 	vstr	s15, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 8002392:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002396:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800239a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80023a2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ae:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80023b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023be:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80023c2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ce:	edc7 7a03 	vstr	s15, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 80023d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80023d6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023de:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80023e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023ee:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80023f2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fe:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002402:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	edc7 7a04 	vstr	s15, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 8002412:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002416:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800241a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002422:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002432:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800243e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002442:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800244a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244e:	edc7 7a05 	vstr	s15, [r7, #20]
    return result;
 8002452:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8002456:	f107 0308 	add.w	r3, r7, #8
 800245a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800245c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002460:	f107 0418 	add.w	r4, r7, #24
 8002464:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800246a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f103 040c 	add.w	r4, r3, #12
 8002474:	f107 0318 	add.w	r3, r7, #24
 8002478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800247a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 800247e:	bf00      	nop
 8002480:	37bc      	adds	r7, #188	; 0xbc
 8002482:	46bd      	mov	sp, r7
 8002484:	bd90      	pop	{r4, r7, pc}
 8002486:	bf00      	nop
 8002488:	3c8efa35 	.word	0x3c8efa35

0800248c <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 800248c:	b490      	push	{r4, r7}
 800248e:	b0b4      	sub	sp, #208	; 0xd0
 8002490:	af00      	add	r7, sp, #0
 8002492:	61f8      	str	r0, [r7, #28]
 8002494:	eef0 6a40 	vmov.f32	s13, s0
 8002498:	eeb0 7a60 	vmov.f32	s14, s1
 800249c:	eef0 7a41 	vmov.f32	s15, s2
 80024a0:	edc7 6a04 	vstr	s13, [r7, #16]
 80024a4:	ed87 7a05 	vstr	s14, [r7, #20]
 80024a8:	edc7 7a06 	vstr	s15, [r7, #24]
 80024ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024b0:	f107 0210 	add.w	r2, r7, #16
 80024b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80024b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024c0:	3210      	adds	r2, #16
 80024c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80024c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80024c8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80024cc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80024d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80024dc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80024e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80024e8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80024ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80024f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 80024f8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002500:	ca07      	ldmia	r2, {r0, r1, r2}
 8002502:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002506:	f107 0310 	add.w	r3, r7, #16
 800250a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800250e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002510:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002514:	edd7 7a04 	vldr	s15, [r7, #16]
 8002518:	eeb0 7ae7 	vabs.f32	s14, s15
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	dc17      	bgt.n	800255c <FusionBiasUpdate+0xd0>
 800252c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002530:	eeb0 7ae7 	vabs.f32	s14, s15
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	dc0b      	bgt.n	800255c <FusionBiasUpdate+0xd0>
 8002544:	edd7 7a06 	vldr	s15, [r7, #24]
 8002548:	eeb0 7ae7 	vabs.f32	s14, s15
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	dd0b      	ble.n	8002574 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8002564:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002568:	f107 0210 	add.w	r2, r7, #16
 800256c:	ca07      	ldmia	r2, {r0, r1, r2}
 800256e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002572:	e08f      	b.n	8002694 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	edd3 7a03 	vldr	s15, [r3, #12]
 800257a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800257e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002586:	d512      	bpl.n	80025ae <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	ed93 7a03 	vldr	s14, [r3, #12]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	edd3 7a01 	vldr	s15, [r3, #4]
 8002594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 800259e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025a2:	f107 0210 	add.w	r2, r7, #16
 80025a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80025a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80025ac:	e072      	b.n	8002694 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	689c      	ldr	r4, [r3, #8]
 80025b2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025b6:	f107 0210 	add.w	r2, r7, #16
 80025ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80025bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80025c0:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 80025c4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80025c8:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80025cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 80025d4:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80025d8:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80025dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 80025e4:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80025e8:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80025ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 80025f4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80025f8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80025fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80025fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002602:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002606:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800260a:	ca07      	ldmia	r2, {r0, r1, r2}
 800260c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002616:	3210      	adds	r2, #16
 8002618:	ca07      	ldmia	r2, {r0, r1, r2}
 800261a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800261e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002622:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002626:	ca07      	ldmia	r2, {r0, r1, r2}
 8002628:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 800262c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002630:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002638:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 800263c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002640:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002648:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 800264c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002650:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002658:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 800265c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002660:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002664:	ca07      	ldmia	r2, {r0, r1, r2}
 8002666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800266a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800266e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002672:	ca07      	ldmia	r2, {r0, r1, r2}
 8002674:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	3310      	adds	r3, #16
 800267c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002680:	ca07      	ldmia	r2, {r0, r1, r2}
 8002682:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 8002686:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800268a:	f107 0210 	add.w	r2, r7, #16
 800268e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002690:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002694:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002698:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800269c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026a0:	ee06 1a90 	vmov	s13, r1
 80026a4:	ee07 2a10 	vmov	s14, r2
 80026a8:	ee07 3a90 	vmov	s15, r3
}
 80026ac:	eeb0 0a66 	vmov.f32	s0, s13
 80026b0:	eef0 0a47 	vmov.f32	s1, s14
 80026b4:	eeb0 1a67 	vmov.f32	s2, s15
 80026b8:	37d0      	adds	r7, #208	; 0xd0
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc90      	pop	{r4, r7}
 80026be:	4770      	bx	lr

080026c0 <icm20948_gyro_read>:
	ak09916_soft_reset();
	ak09916_operation_mode_setting(continuous_measurement_100hz);
}

void icm20948_gyro_read(axises* data)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 80026c8:	2206      	movs	r2, #6
 80026ca:	2133      	movs	r1, #51	; 0x33
 80026cc:	2000      	movs	r0, #0
 80026ce:	f000 f90b 	bl	80028e8 <read_multiple_icm20948_reg>
 80026d2:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	b21a      	sxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3301      	adds	r3, #1
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b21b      	sxth	r3, r3
 80026e4:	4313      	orrs	r3, r2
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3302      	adds	r3, #2
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	b21a      	sxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3303      	adds	r3, #3
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	b21b      	sxth	r3, r3
 8002708:	4313      	orrs	r3, r2
 800270a:	b21b      	sxth	r3, r3
 800270c:	ee07 3a90 	vmov	s15, r3
 8002710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3304      	adds	r3, #4
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	b21a      	sxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3305      	adds	r3, #5
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b21b      	sxth	r3, r3
 800272c:	4313      	orrs	r3, r2
 800272e:	b21b      	sxth	r3, r3
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 800274e:	2206      	movs	r2, #6
 8002750:	212d      	movs	r1, #45	; 0x2d
 8002752:	2000      	movs	r0, #0
 8002754:	f000 f8c8 	bl	80028e8 <read_multiple_icm20948_reg>
 8002758:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | (temp[1]));
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	b21a      	sxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3301      	adds	r3, #1
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b21b      	sxth	r3, r3
 800276a:	4313      	orrs	r3, r2
 800276c:	b21b      	sxth	r3, r3
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | (temp[3]));
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3302      	adds	r3, #2
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	b21a      	sxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3303      	adds	r3, #3
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	b21b      	sxth	r3, r3
 800278e:	4313      	orrs	r3, r2
 8002790:	b21b      	sxth	r3, r3
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | (temp[5]));
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3304      	adds	r3, #4
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	b21a      	sxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3305      	adds	r3, #5
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b21b      	sxth	r3, r3
 80027b2:	4313      	orrs	r3, r2
 80027b4:	b21b      	sxth	r3, r3
 80027b6:	ee07 3a90 	vmov	s15, r3
 80027ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add scale factor because calibraiton function offset gravity acceleration.
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <icm20948_gyro_read_dps>:

	return true;
}

void icm20948_gyro_read_dps(axises* data)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff ff73 	bl	80026c0 <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	edd3 6a00 	vldr	s13, [r3]
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <icm20948_gyro_read_dps+0x58>)
 80027e2:	ed93 7a00 	vldr	s14, [r3]
 80027e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	edc3 7a00 	vstr	s15, [r3]
	data->y /= gyro_scale_factor;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <icm20948_gyro_read_dps+0x58>)
 80027f8:	ed93 7a00 	vldr	s14, [r3]
 80027fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= gyro_scale_factor;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	edd3 6a02 	vldr	s13, [r3, #8]
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <icm20948_gyro_read_dps+0x58>)
 800280e:	ed93 7a00 	vldr	s14, [r3]
 8002812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200000c8 	.word	0x200000c8

08002828 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises* data)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	icm20948_accel_read(data);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff88 	bl	8002746 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	edd3 6a00 	vldr	s13, [r3]
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <icm20948_accel_read_g+0x58>)
 800283e:	ed93 7a00 	vldr	s14, [r3]
 8002842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	edc3 7a00 	vstr	s15, [r3]
	data->y /= accel_scale_factor;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <icm20948_accel_read_g+0x58>)
 8002854:	ed93 7a00 	vldr	s14, [r3]
 8002858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= accel_scale_factor;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	edd3 6a02 	vldr	s13, [r3, #8]
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <icm20948_accel_read_g+0x58>)
 800286a:	ed93 7a00 	vldr	s14, [r3]
 800286e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200000cc 	.word	0x200000cc

08002884 <cs_high>:
}


/* Static Functions */
static void cs_high()
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8002888:	2201      	movs	r2, #1
 800288a:	2104      	movs	r1, #4
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <cs_high+0x14>)
 800288e:	f004 fe87 	bl	80075a0 <HAL_GPIO_WritePin>
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000

0800289c <cs_low>:

static void cs_low()
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2104      	movs	r1, #4
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <cs_low+0x14>)
 80028a6:	f004 fe7b 	bl	80075a0 <HAL_GPIO_WritePin>
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000

080028b4 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 80028be:	237f      	movs	r3, #127	; 0x7f
 80028c0:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	737b      	strb	r3, [r7, #13]

	cs_low();
 80028c6:	f7ff ffe9 	bl	800289c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80028ca:	f107 010c 	add.w	r1, r7, #12
 80028ce:	230a      	movs	r3, #10
 80028d0:	2202      	movs	r2, #2
 80028d2:	4804      	ldr	r0, [pc, #16]	; (80028e4 <select_user_bank+0x30>)
 80028d4:	f005 fb95 	bl	8008002 <HAL_SPI_Transmit>
	cs_high();
 80028d8:	f7ff ffd4 	bl	8002884 <cs_high>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000a48 	.word	0x20000a48

080028e8 <read_multiple_icm20948_reg>:
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
	cs_high();
}

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
 80028f2:	460b      	mov	r3, r1
 80028f4:	71bb      	strb	r3, [r7, #6]
 80028f6:	4613      	mov	r3, r2
 80028f8:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 80028fa:	79bb      	ldrb	r3, [r7, #6]
 80028fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002900:	b2db      	uxtb	r3, r3
 8002902:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ffd4 	bl	80028b4 <select_user_bank>

	cs_low();
 800290c:	f7ff ffc6 	bl	800289c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002910:	f107 010f 	add.w	r1, r7, #15
 8002914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002918:	2201      	movs	r2, #1
 800291a:	4809      	ldr	r0, [pc, #36]	; (8002940 <read_multiple_icm20948_reg+0x58>)
 800291c:	f005 fb71 	bl	8008002 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8002920:	797b      	ldrb	r3, [r7, #5]
 8002922:	b29a      	uxth	r2, r3
 8002924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002928:	4906      	ldr	r1, [pc, #24]	; (8002944 <read_multiple_icm20948_reg+0x5c>)
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <read_multiple_icm20948_reg+0x58>)
 800292c:	f005 fca5 	bl	800827a <HAL_SPI_Receive>
	cs_high();
 8002930:	f7ff ffa8 	bl	8002884 <cs_high>

	return reg_val;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <read_multiple_icm20948_reg+0x5c>)
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000a48 	.word	0x20000a48
 8002944:	200000d0 	.word	0x200000d0

08002948 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800294e:	463b      	mov	r3, r7
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <MX_ADC1_Init+0x98>)
 800295c:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <MX_ADC1_Init+0x9c>)
 800295e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002962:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002966:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <MX_ADC1_Init+0x98>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002976:	2200      	movs	r2, #0
 8002978:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <MX_ADC1_Init+0x98>)
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002984:	2200      	movs	r2, #0
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <MX_ADC1_Init+0x98>)
 800298a:	4a17      	ldr	r2, [pc, #92]	; (80029e8 <MX_ADC1_Init+0xa0>)
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002990:	2200      	movs	r2, #0
 8002992:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002996:	2201      	movs	r2, #1
 8002998:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_ADC1_Init+0x98>)
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_ADC1_Init+0x98>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029a8:	480d      	ldr	r0, [pc, #52]	; (80029e0 <MX_ADC1_Init+0x98>)
 80029aa:	f003 fb31 	bl	8006010 <HAL_ADC_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80029b4:	f002 fbee 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80029b8:	2308      	movs	r3, #8
 80029ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029c4:	463b      	mov	r3, r7
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_ADC1_Init+0x98>)
 80029ca:	f003 fd03 	bl	80063d4 <HAL_ADC_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029d4:	f002 fbde 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	2000080c 	.word	0x2000080c
 80029e4:	40012000 	.word	0x40012000
 80029e8:	0f000001 	.word	0x0f000001

080029ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	; 0x30
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a31      	ldr	r2, [pc, #196]	; (8002ad0 <HAL_ADC_MspInit+0xe4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d15b      	bne.n	8002ac6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	4a2f      	ldr	r2, [pc, #188]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a28      	ldr	r2, [pc, #160]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a21      	ldr	r2, [pc, #132]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_ADC_MspInit+0xe8>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002a7e:	2307      	movs	r3, #7
 8002a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a82:	2303      	movs	r3, #3
 8002a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4811      	ldr	r0, [pc, #68]	; (8002ad8 <HAL_ADC_MspInit+0xec>)
 8002a92:	f004 fbd1 	bl	8007238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002a96:	2307      	movs	r3, #7
 8002a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480c      	ldr	r0, [pc, #48]	; (8002adc <HAL_ADC_MspInit+0xf0>)
 8002aaa:	f004 fbc5 	bl	8007238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	f107 031c 	add.w	r3, r7, #28
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <HAL_ADC_MspInit+0xf4>)
 8002ac2:	f004 fbb9 	bl	8007238 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	3730      	adds	r7, #48	; 0x30
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40012000 	.word	0x40012000
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020000 	.word	0x40020000
 8002ae0:	40020400 	.word	0x40020400

08002ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	4b2f      	ldr	r3, [pc, #188]	; (8002bac <MX_DMA_Init+0xc8>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <MX_DMA_Init+0xc8>)
 8002af4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <MX_DMA_Init+0xc8>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	4b28      	ldr	r3, [pc, #160]	; (8002bac <MX_DMA_Init+0xc8>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a27      	ldr	r2, [pc, #156]	; (8002bac <MX_DMA_Init+0xc8>)
 8002b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <MX_DMA_Init+0xc8>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	200c      	movs	r0, #12
 8002b28:	f003 ff4d 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b2c:	200c      	movs	r0, #12
 8002b2e:	f003 ff66 	bl	80069fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2100      	movs	r1, #0
 8002b36:	200e      	movs	r0, #14
 8002b38:	f003 ff45 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002b3c:	200e      	movs	r0, #14
 8002b3e:	f003 ff5e 	bl	80069fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2100      	movs	r1, #0
 8002b46:	200f      	movs	r0, #15
 8002b48:	f003 ff3d 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002b4c:	200f      	movs	r0, #15
 8002b4e:	f003 ff56 	bl	80069fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	2010      	movs	r0, #16
 8002b58:	f003 ff35 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b5c:	2010      	movs	r0, #16
 8002b5e:	f003 ff4e 	bl	80069fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2100      	movs	r1, #0
 8002b66:	2011      	movs	r0, #17
 8002b68:	f003 ff2d 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b6c:	2011      	movs	r0, #17
 8002b6e:	f003 ff46 	bl	80069fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	2039      	movs	r0, #57	; 0x39
 8002b78:	f003 ff25 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002b7c:	2039      	movs	r0, #57	; 0x39
 8002b7e:	f003 ff3e 	bl	80069fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	203a      	movs	r0, #58	; 0x3a
 8002b88:	f003 ff1d 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002b8c:	203a      	movs	r0, #58	; 0x3a
 8002b8e:	f003 ff36 	bl	80069fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	2045      	movs	r0, #69	; 0x45
 8002b98:	f003 ff15 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002b9c:	2045      	movs	r0, #69	; 0x45
 8002b9e:	f003 ff2e 	bl	80069fe <HAL_NVIC_EnableIRQ>

}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	f107 031c 	add.w	r3, r7, #28
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a4d      	ldr	r2, [pc, #308]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a46      	ldr	r2, [pc, #280]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b44      	ldr	r3, [pc, #272]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a3f      	ldr	r2, [pc, #252]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	4b32      	ldr	r3, [pc, #200]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a31      	ldr	r2, [pc, #196]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c5c:	f043 0308 	orr.w	r3, r3, #8
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <MX_GPIO_Init+0x154>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2104      	movs	r1, #4
 8002c72:	4825      	ldr	r0, [pc, #148]	; (8002d08 <MX_GPIO_Init+0x158>)
 8002c74:	f004 fc94 	bl	80075a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2130      	movs	r1, #48	; 0x30
 8002c7c:	4823      	ldr	r0, [pc, #140]	; (8002d0c <MX_GPIO_Init+0x15c>)
 8002c7e:	f004 fc8f 	bl	80075a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8002c82:	2200      	movs	r2, #0
 8002c84:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002c88:	4821      	ldr	r0, [pc, #132]	; (8002d10 <MX_GPIO_Init+0x160>)
 8002c8a:	f004 fc89 	bl	80075a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c92:	2301      	movs	r3, #1
 8002c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8002c9e:	f107 031c 	add.w	r3, r7, #28
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4818      	ldr	r0, [pc, #96]	; (8002d08 <MX_GPIO_Init+0x158>)
 8002ca6:	f004 fac7 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_PARK_UP_Pin|BTN_PARK_DOWN_Pin;
 8002caa:	2330      	movs	r3, #48	; 0x30
 8002cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cb6:	f107 031c 	add.w	r3, r7, #28
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4812      	ldr	r0, [pc, #72]	; (8002d08 <MX_GPIO_Init+0x158>)
 8002cbe:	f004 fabb 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin;
 8002cc2:	2330      	movs	r3, #48	; 0x30
 8002cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd2:	f107 031c 	add.w	r3, r7, #28
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480c      	ldr	r0, [pc, #48]	; (8002d0c <MX_GPIO_Init+0x15c>)
 8002cda:	f004 faad 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8002cde:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2300      	movs	r3, #0
 8002cee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cf0:	f107 031c 	add.w	r3, r7, #28
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4806      	ldr	r0, [pc, #24]	; (8002d10 <MX_GPIO_Init+0x160>)
 8002cf8:	f004 fa9e 	bl	8007238 <HAL_GPIO_Init>

}
 8002cfc:	bf00      	nop
 8002cfe:	3730      	adds	r7, #48	; 0x30
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40020800 	.word	0x40020800
 8002d10:	40020c00 	.word	0x40020c00

08002d14 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
			USART1ReceiveState = 0;
			Res = HAL_UART_Receive_DMA(&huart6, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
		}
	}*/

	if (UartHandle->Instance == USART2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a39      	ldr	r2, [pc, #228]	; (8002e08 <HAL_UART_RxCpltCallback+0xf4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d16b      	bne.n	8002dfe <HAL_UART_RxCpltCallback+0xea>
	{
		if (USART2ReceiveState == 0)
 8002d26:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <HAL_UART_RxCpltCallback+0xf8>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d11f      	bne.n	8002d70 <HAL_UART_RxCpltCallback+0x5c>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 8002d30:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_UART_RxCpltCallback+0xfc>)
 8002d32:	7b9b      	ldrb	r3, [r3, #14]
 8002d34:	2b0d      	cmp	r3, #13
 8002d36:	d103      	bne.n	8002d40 <HAL_UART_RxCpltCallback+0x2c>
 8002d38:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_UART_RxCpltCallback+0xfc>)
 8002d3a:	7bdb      	ldrb	r3, [r3, #15]
 8002d3c:	2b0a      	cmp	r3, #10
 8002d3e:	d00c      	beq.n	8002d5a <HAL_UART_RxCpltCallback+0x46>
			{
				Res = HAL_UART_Receive_DMA(&huart2, LostByte, 1);
 8002d40:	4b34      	ldr	r3, [pc, #208]	; (8002e14 <HAL_UART_RxCpltCallback+0x100>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	4619      	mov	r1, r3
 8002d48:	4833      	ldr	r0, [pc, #204]	; (8002e18 <HAL_UART_RxCpltCallback+0x104>)
 8002d4a:	f007 f80b 	bl	8009d64 <HAL_UART_Receive_DMA>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	73fb      	strb	r3, [r7, #15]
				USART2ReceiveState = 1;
 8002d52:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <HAL_UART_RxCpltCallback+0xf8>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	e042      	b.n	8002de0 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				USART2ReceiveState = 10;
 8002d5a:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <HAL_UART_RxCpltCallback+0xf8>)
 8002d5c:	220a      	movs	r2, #10
 8002d5e:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002d60:	2210      	movs	r2, #16
 8002d62:	492b      	ldr	r1, [pc, #172]	; (8002e10 <HAL_UART_RxCpltCallback+0xfc>)
 8002d64:	482c      	ldr	r0, [pc, #176]	; (8002e18 <HAL_UART_RxCpltCallback+0x104>)
 8002d66:	f006 fffd 	bl	8009d64 <HAL_UART_Receive_DMA>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	e037      	b.n	8002de0 <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else
		{
			if(USART2ReceiveState == 1)
 8002d70:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_UART_RxCpltCallback+0xf8>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d111      	bne.n	8002d9e <HAL_UART_RxCpltCallback+0x8a>
			{
				if (LostByte[0] == 13)
 8002d7a:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_UART_RxCpltCallback+0x100>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b0d      	cmp	r3, #13
 8002d82:	d102      	bne.n	8002d8a <HAL_UART_RxCpltCallback+0x76>
				{
					USART2ReceiveState = 2;
 8002d84:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <HAL_UART_RxCpltCallback+0xf8>)
 8002d86:	2202      	movs	r2, #2
 8002d88:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <HAL_UART_RxCpltCallback+0x100>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	4619      	mov	r1, r3
 8002d92:	4821      	ldr	r0, [pc, #132]	; (8002e18 <HAL_UART_RxCpltCallback+0x104>)
 8002d94:	f006 ffe6 	bl	8009d64 <HAL_UART_Receive_DMA>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e020      	b.n	8002de0 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				if (USART2ReceiveState == 2)
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_UART_RxCpltCallback+0xf8>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d11b      	bne.n	8002de0 <HAL_UART_RxCpltCallback+0xcc>
				{
					if (LostByte[0] == 10)
 8002da8:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_UART_RxCpltCallback+0x100>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b0a      	cmp	r3, #10
 8002db0:	d10a      	bne.n	8002dc8 <HAL_UART_RxCpltCallback+0xb4>
					{
						USART2ReceiveState = 0;
 8002db2:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <HAL_UART_RxCpltCallback+0xf8>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002db8:	2210      	movs	r2, #16
 8002dba:	4915      	ldr	r1, [pc, #84]	; (8002e10 <HAL_UART_RxCpltCallback+0xfc>)
 8002dbc:	4816      	ldr	r0, [pc, #88]	; (8002e18 <HAL_UART_RxCpltCallback+0x104>)
 8002dbe:	f006 ffd1 	bl	8009d64 <HAL_UART_Receive_DMA>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	e00b      	b.n	8002de0 <HAL_UART_RxCpltCallback+0xcc>
					}
					else
					{
						USART2ReceiveState = 1;
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <HAL_UART_RxCpltCallback+0xf8>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_UART_RxCpltCallback+0x100>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4810      	ldr	r0, [pc, #64]	; (8002e18 <HAL_UART_RxCpltCallback+0x104>)
 8002dd8:	f006 ffc4 	bl	8009d64 <HAL_UART_Receive_DMA>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_UART_RxCpltCallback+0xea>
		{
			MX_USART2_UART_Init();
 8002de6:	f002 fe81 	bl	8005aec <MX_USART2_UART_Init>
			USART2ReceiveState = 0;
 8002dea:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <HAL_UART_RxCpltCallback+0xf8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002df0:	2210      	movs	r2, #16
 8002df2:	4907      	ldr	r1, [pc, #28]	; (8002e10 <HAL_UART_RxCpltCallback+0xfc>)
 8002df4:	4808      	ldr	r0, [pc, #32]	; (8002e18 <HAL_UART_RxCpltCallback+0x104>)
 8002df6:	f006 ffb5 	bl	8009d64 <HAL_UART_Receive_DMA>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40004400 	.word	0x40004400
 8002e0c:	20000798 	.word	0x20000798
 8002e10:	20000894 	.word	0x20000894
 8002e14:	20000a38 	.word	0x20000a38
 8002e18:	20000e74 	.word	0x20000e74

08002e1c <HallActualize>:
int HallActualize(float NewStep, float LastStep, float difference)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	ed87 0a03 	vstr	s0, [r7, #12]
 8002e26:	edc7 0a02 	vstr	s1, [r7, #8]
 8002e2a:	ed87 1a01 	vstr	s2, [r7, #4]
	float MIN_VAL = LastStep - difference;
 8002e2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e32:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e3a:	edc7 7a05 	vstr	s15, [r7, #20]
	float MAX_VAL = LastStep + difference;
 8002e3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e42:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4a:	edc7 7a04 	vstr	s15, [r7, #16]

	if ((NewStep < MAX_VAL) && (NewStep > MIN_VAL))
 8002e4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	d50a      	bpl.n	8002e76 <HallActualize+0x5a>
 8002e60:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e70:	dd01      	ble.n	8002e76 <HallActualize+0x5a>
	{
		return 1;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HallActualize+0x5c>
	}
	return 0;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <IMU_UPDATE>:

	FusionBiasInitialise(&fusionBias, 0.5f, samplePeriod);
	FusionAhrsInitialise(&fusionAhrs, 0.5f);
}
void IMU_UPDATE()
{
 8002e84:	b5b0      	push	{r4, r5, r7, lr}
 8002e86:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 8002e8a:	af00      	add	r7, sp, #0
	icm20948_gyro_read_dps(&my_gyro);
 8002e8c:	48d4      	ldr	r0, [pc, #848]	; (80031e0 <IMU_UPDATE+0x35c>)
 8002e8e:	f7ff fc9d 	bl	80027cc <icm20948_gyro_read_dps>
	icm20948_accel_read_g(&my_accel);
 8002e92:	48d4      	ldr	r0, [pc, #848]	; (80031e4 <IMU_UPDATE+0x360>)
 8002e94:	f7ff fcc8 	bl	8002828 <icm20948_accel_read_g>
	//ak09916_mag_read_uT(&my_mag);

	icm20948_accel_read(&my_accel);
 8002e98:	48d2      	ldr	r0, [pc, #840]	; (80031e4 <IMU_UPDATE+0x360>)
 8002e9a:	f7ff fc54 	bl	8002746 <icm20948_accel_read>
	icm20948_gyro_read(&my_gyro);
 8002e9e:	48d0      	ldr	r0, [pc, #832]	; (80031e0 <IMU_UPDATE+0x35c>)
 8002ea0:	f7ff fc0e 	bl	80026c0 <icm20948_gyro_read>

	uncalibratedGyroscope.axis.x = my_gyro.x;
 8002ea4:	4bce      	ldr	r3, [pc, #824]	; (80031e0 <IMU_UPDATE+0x35c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4acf      	ldr	r2, [pc, #828]	; (80031e8 <IMU_UPDATE+0x364>)
 8002eaa:	6013      	str	r3, [r2, #0]
	uncalibratedGyroscope.axis.y = my_gyro.y;
 8002eac:	4bcc      	ldr	r3, [pc, #816]	; (80031e0 <IMU_UPDATE+0x35c>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4acd      	ldr	r2, [pc, #820]	; (80031e8 <IMU_UPDATE+0x364>)
 8002eb2:	6053      	str	r3, [r2, #4]
	uncalibratedGyroscope.axis.z = my_gyro.z;
 8002eb4:	4bca      	ldr	r3, [pc, #808]	; (80031e0 <IMU_UPDATE+0x35c>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4acb      	ldr	r2, [pc, #812]	; (80031e8 <IMU_UPDATE+0x364>)
 8002eba:	6093      	str	r3, [r2, #8]

	uncalibratedAccelerometer.axis.x = my_accel.x;
 8002ebc:	4bc9      	ldr	r3, [pc, #804]	; (80031e4 <IMU_UPDATE+0x360>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4aca      	ldr	r2, [pc, #808]	; (80031ec <IMU_UPDATE+0x368>)
 8002ec2:	6013      	str	r3, [r2, #0]
	uncalibratedAccelerometer.axis.y = my_accel.y;
 8002ec4:	4bc7      	ldr	r3, [pc, #796]	; (80031e4 <IMU_UPDATE+0x360>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4ac8      	ldr	r2, [pc, #800]	; (80031ec <IMU_UPDATE+0x368>)
 8002eca:	6053      	str	r3, [r2, #4]
	uncalibratedAccelerometer.axis.z = my_accel.z;
 8002ecc:	4bc5      	ldr	r3, [pc, #788]	; (80031e4 <IMU_UPDATE+0x360>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4ac6      	ldr	r2, [pc, #792]	; (80031ec <IMU_UPDATE+0x368>)
 8002ed2:	6093      	str	r3, [r2, #8]

	uncalibratedMagnetometer.axis.x = my_mag.x;
 8002ed4:	4bc6      	ldr	r3, [pc, #792]	; (80031f0 <IMU_UPDATE+0x36c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4ac6      	ldr	r2, [pc, #792]	; (80031f4 <IMU_UPDATE+0x370>)
 8002eda:	6013      	str	r3, [r2, #0]
	uncalibratedMagnetometer.axis.y = my_mag.y;
 8002edc:	4bc4      	ldr	r3, [pc, #784]	; (80031f0 <IMU_UPDATE+0x36c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4ac4      	ldr	r2, [pc, #784]	; (80031f4 <IMU_UPDATE+0x370>)
 8002ee2:	6053      	str	r3, [r2, #4]
	uncalibratedMagnetometer.axis.z = my_mag.z;
 8002ee4:	4bc2      	ldr	r3, [pc, #776]	; (80031f0 <IMU_UPDATE+0x36c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4ac2      	ldr	r2, [pc, #776]	; (80031f4 <IMU_UPDATE+0x370>)
 8002eea:	6093      	str	r3, [r2, #8]

	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8002eec:	4bc2      	ldr	r3, [pc, #776]	; (80031f8 <IMU_UPDATE+0x374>)
 8002eee:	f507 74e2 	add.w	r4, r7, #452	; 0x1c4
 8002ef2:	461d      	mov	r5, r3
 8002ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002efc:	682b      	ldr	r3, [r5, #0]
 8002efe:	6023      	str	r3, [r4, #0]
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f18:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002f1c:	4ab2      	ldr	r2, [pc, #712]	; (80031e8 <IMU_UPDATE+0x364>)
 8002f1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	461d      	mov	r5, r3
 8002f28:	f507 74e2 	add.w	r4, r7, #452	; 0x1c4
 8002f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	602b      	str	r3, [r5, #0]
 8002f38:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002f3c:	4aaf      	ldr	r2, [pc, #700]	; (80031fc <IMU_UPDATE+0x378>)
 8002f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f44:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002f48:	461c      	mov	r4, r3
 8002f4a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8002f4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002f5a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f64:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002f68:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8002f6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002f72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002f76:	ed93 7a00 	vldr	s14, [r3]
 8002f7a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002f7e:	edd3 7a00 	vldr	s15, [r3]
 8002f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f86:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002f8a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002f8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002f92:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f96:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002f9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa2:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002fa6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002faa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002fae:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fb2:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002fb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fbe:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002fc2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8002fc6:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8002fca:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8002fce:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002fd4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002fd8:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8002fdc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002fe2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002fe6:	461c      	mov	r4, r3
 8002fe8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002fec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ff0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ff4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002ff8:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002ffc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ffe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8003002:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003006:	ed93 7a00 	vldr	s14, [r3]
 800300a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800300e:	edd3 7a00 	vldr	s15, [r3]
 8003012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003016:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800301a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800301e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8003022:	ed93 7a01 	vldr	s14, [r3, #4]
 8003026:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800302a:	edd3 7a01 	vldr	s15, [r3, #4]
 800302e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003032:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003036:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 800303a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800303e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003042:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8003046:	edd3 7a02 	vldr	s15, [r3, #8]
 800304a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003052:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003056:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800305a:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800305e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003060:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003064:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8003068:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800306c:	ca07      	ldmia	r2, {r0, r1, r2}
 800306e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003072:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	4614      	mov	r4, r2
 800307a:	461d      	mov	r5, r3
 800307c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800307e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	6023      	str	r3, [r4, #0]
 8003088:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800308c:	461c      	mov	r4, r3
 800308e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8003092:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003096:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800309a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800309e:	ed93 7a00 	vldr	s14, [r3]
 80030a2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80030a6:	edd3 7a00 	vldr	s15, [r3]
 80030aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80030b6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80030ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80030be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80030ce:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80030d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80030d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80030e2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80030e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80030ee:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030fe:	edd3 6a04 	vldr	s13, [r3, #16]
 8003102:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003106:	edd3 7a01 	vldr	s15, [r3, #4]
 800310a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800310e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003116:	edd3 6a05 	vldr	s13, [r3, #20]
 800311a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800311e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800312e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003132:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003136:	ed93 7a06 	vldr	s14, [r3, #24]
 800313a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800314a:	edd3 6a07 	vldr	s13, [r3, #28]
 800314e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003152:	edd3 7a01 	vldr	s15, [r3, #4]
 8003156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800315e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003162:	edd3 6a08 	vldr	s13, [r3, #32]
 8003166:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800316a:	edd3 7a02 	vldr	s15, [r3, #8]
 800316e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003176:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800317a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800317e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8003182:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8003186:	ca07      	ldmia	r2, {r0, r1, r2}
 8003188:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800318c:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8003190:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8003194:	ca07      	ldmia	r2, {r0, r1, r2}
 8003196:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 800319a:	bf00      	nop
 800319c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80031a0:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80031a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80031a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 80031aa:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <IMU_UPDATE+0x374>)
 80031b0:	461c      	mov	r4, r3
 80031b2:	4615      	mov	r5, r2
 80031b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031bc:	682b      	ldr	r3, [r5, #0]
 80031be:	6023      	str	r3, [r4, #0]
 80031c0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
 80031d4:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	e00f      	b.n	8003200 <IMU_UPDATE+0x37c>
 80031e0:	20000a20 	.word	0x20000a20
 80031e4:	2000099c 	.word	0x2000099c
 80031e8:	20000a08 	.word	0x20000a08
 80031ec:	20000974 	.word	0x20000974
 80031f0:	200009e0 	.word	0x200009e0
 80031f4:	200009ec 	.word	0x200009ec
 80031f8:	0800cf8c 	.word	0x0800cf8c
 80031fc:	200009ac 	.word	0x200009ac
 8003200:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003204:	4aee      	ldr	r2, [pc, #952]	; (80035c0 <IMU_UPDATE+0x73c>)
 8003206:	ca07      	ldmia	r2, {r0, r1, r2}
 8003208:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800320c:	1d3a      	adds	r2, r7, #4
 800320e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003212:	4614      	mov	r4, r2
 8003214:	461d      	mov	r5, r3
 8003216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800321a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800321c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800321e:	682b      	ldr	r3, [r5, #0]
 8003220:	6023      	str	r3, [r4, #0]
 8003222:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003226:	4ae7      	ldr	r2, [pc, #924]	; (80035c4 <IMU_UPDATE+0x740>)
 8003228:	ca07      	ldmia	r2, {r0, r1, r2}
 800322a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800322e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003232:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8003236:	ca07      	ldmia	r2, {r0, r1, r2}
 8003238:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800323c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003240:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8003244:	ca07      	ldmia	r2, {r0, r1, r2}
 8003246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800324a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800324e:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8003252:	ca07      	ldmia	r2, {r0, r1, r2}
 8003254:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8003258:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800325c:	ed93 7a00 	vldr	s14, [r3]
 8003260:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003270:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8003274:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003278:	ed93 7a01 	vldr	s14, [r3, #4]
 800327c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003280:	edd3 7a01 	vldr	s15, [r3, #4]
 8003284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003288:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800328c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8003290:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003294:	ed93 7a02 	vldr	s14, [r3, #8]
 8003298:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800329c:	edd3 7a02 	vldr	s15, [r3, #8]
 80032a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032a8:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80032ac:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80032b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80032b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032ba:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80032be:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80032c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80032c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032cc:	461c      	mov	r4, r3
 80032ce:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80032d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80032de:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80032e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80032e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 80032e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80032ec:	ed93 7a00 	vldr	s14, [r3]
 80032f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003300:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8003304:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003308:	ed93 7a01 	vldr	s14, [r3, #4]
 800330c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003310:	edd3 7a01 	vldr	s15, [r3, #4]
 8003314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003318:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800331c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8003320:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003324:	ed93 7a02 	vldr	s14, [r3, #8]
 8003328:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800332c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003334:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003338:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800333c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003340:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8003344:	ca07      	ldmia	r2, {r0, r1, r2}
 8003346:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800334a:	f507 730d 	add.w	r3, r7, #564	; 0x234
 800334e:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8003352:	ca07      	ldmia	r2, {r0, r1, r2}
 8003354:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003358:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800335c:	1d3b      	adds	r3, r7, #4
 800335e:	4614      	mov	r4, r2
 8003360:	461d      	mov	r5, r3
 8003362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800336a:	682b      	ldr	r3, [r5, #0]
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003372:	461c      	mov	r4, r3
 8003374:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8003378:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800337c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8003380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003384:	ed93 7a00 	vldr	s14, [r3]
 8003388:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800338c:	edd3 7a00 	vldr	s15, [r3]
 8003390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003398:	edd3 6a01 	vldr	s13, [r3, #4]
 800339c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80033a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80033b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80033bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80033c8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80033cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80033d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033e4:	edd3 6a04 	vldr	s13, [r3, #16]
 80033e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80033f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033fc:	edd3 6a05 	vldr	s13, [r3, #20]
 8003400:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003404:	edd3 7a02 	vldr	s15, [r3, #8]
 8003408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800340c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003410:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003414:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800341c:	ed93 7a06 	vldr	s14, [r3, #24]
 8003420:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800342c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003430:	edd3 6a07 	vldr	s13, [r3, #28]
 8003434:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003438:	edd3 7a01 	vldr	s15, [r3, #4]
 800343c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003448:	edd3 6a08 	vldr	s13, [r3, #32]
 800344c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003450:	edd3 7a02 	vldr	s15, [r3, #8]
 8003454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003460:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003464:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8003468:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800346c:	ca07      	ldmia	r2, {r0, r1, r2}
 800346e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003472:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8003476:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800347a:	ca07      	ldmia	r2, {r0, r1, r2}
 800347c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003480:	bf00      	nop
 8003482:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8003486:	461c      	mov	r4, r3
 8003488:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800348c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003490:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//FusionVector3 calibratedMagnetometer = FusionCalibrationMagnetic(uncalibratedMagnetometer, FUSION_ROTATION_MATRIX_IDENTITY, hardIronBias);

	calibratedGyroscope = FusionBiasUpdate(&fusionBias, calibratedGyroscope);
 8003494:	edd7 6a7a 	vldr	s13, [r7, #488]	; 0x1e8
 8003498:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 800349c:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 80034a0:	eeb0 0a66 	vmov.f32	s0, s13
 80034a4:	eef0 0a47 	vmov.f32	s1, s14
 80034a8:	eeb0 1a67 	vmov.f32	s2, s15
 80034ac:	4846      	ldr	r0, [pc, #280]	; (80035c8 <IMU_UPDATE+0x744>)
 80034ae:	f7fe ffed 	bl	800248c <FusionBiasUpdate>
 80034b2:	eef0 6a40 	vmov.f32	s13, s0
 80034b6:	eeb0 7a60 	vmov.f32	s14, s1
 80034ba:	eef0 7a41 	vmov.f32	s15, s2
 80034be:	edc7 6a7a 	vstr	s13, [r7, #488]	; 0x1e8
 80034c2:	ed87 7a7b 	vstr	s14, [r7, #492]	; 0x1ec
 80034c6:	edc7 7a7c 	vstr	s15, [r7, #496]	; 0x1f0
	FusionAhrsUpdateWithoutMagnetometer(&fusionAhrs, calibratedGyroscope, calibratedAccelerometer, samplePeriod);
 80034ca:	4b40      	ldr	r3, [pc, #256]	; (80035cc <IMU_UPDATE+0x748>)
 80034cc:	edd3 4a00 	vldr	s9, [r3]
 80034d0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80034d4:	ed93 5a00 	vldr	s10, [r3]
 80034d8:	edd3 5a01 	vldr	s11, [r3, #4]
 80034dc:	ed93 6a02 	vldr	s12, [r3, #8]
 80034e0:	edd7 6a7a 	vldr	s13, [r7, #488]	; 0x1e8
 80034e4:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 80034e8:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 80034ec:	eeb0 3a64 	vmov.f32	s6, s9
 80034f0:	eef0 1a45 	vmov.f32	s3, s10
 80034f4:	eeb0 2a65 	vmov.f32	s4, s11
 80034f8:	eef0 2a46 	vmov.f32	s5, s12
 80034fc:	eeb0 0a66 	vmov.f32	s0, s13
 8003500:	eef0 0a47 	vmov.f32	s1, s14
 8003504:	eeb0 1a67 	vmov.f32	s2, s15
 8003508:	4831      	ldr	r0, [pc, #196]	; (80035d0 <IMU_UPDATE+0x74c>)
 800350a:	f7fe fd83 	bl	8002014 <FusionAhrsUpdateWithoutMagnetometer>
	//FusionAhrsUpdate(&fusionAhrs, calibratedGyroscope, calibratedAccelerometer, calibratedMagnetometer, samplePeriod);
	eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(&fusionAhrs));
 800350e:	4830      	ldr	r0, [pc, #192]	; (80035d0 <IMU_UPDATE+0x74c>)
 8003510:	f7fe fdea 	bl	80020e8 <FusionAhrsGetQuaternion>
 8003514:	eeb0 6a40 	vmov.f32	s12, s0
 8003518:	eef0 6a60 	vmov.f32	s13, s1
 800351c:	eeb0 7a41 	vmov.f32	s14, s2
 8003520:	eef0 7a61 	vmov.f32	s15, s3
 8003524:	ed87 6a7d 	vstr	s12, [r7, #500]	; 0x1f4
 8003528:	edc7 6a7e 	vstr	s13, [r7, #504]	; 0x1f8
 800352c:	ed87 7a7f 	vstr	s14, [r7, #508]	; 0x1fc
 8003530:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
 8003534:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003538:	461c      	mov	r4, r3
 800353a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 800353e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 8003544:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003548:	ed93 7a00 	vldr	s14, [r3]
 800354c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003558:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800355c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003560:	edc7 7aab 	vstr	s15, [r7, #684]	; 0x2ac
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8003564:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003568:	ed93 7a02 	vldr	s14, [r3, #8]
 800356c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003570:	edd3 7a03 	vldr	s15, [r3, #12]
 8003574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003578:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800357c:	edd3 6a00 	vldr	s13, [r3]
 8003580:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003584:	edd3 7a01 	vldr	s15, [r3, #4]
 8003588:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800358c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003590:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003594:	ed93 7a03 	vldr	s14, [r3, #12]
 8003598:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800359c:	edd3 7a03 	vldr	s15, [r3, #12]
 80035a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a4:	edd7 7aab 	vldr	s15, [r7, #684]	; 0x2ac
 80035a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ac:	eef0 0a67 	vmov.f32	s1, s15
 80035b0:	eeb0 0a66 	vmov.f32	s0, s13
 80035b4:	f007 fcf4 	bl	800afa0 <atan2f>
 80035b8:	eef0 7a40 	vmov.f32	s15, s0
 80035bc:	e00c      	b.n	80035d8 <IMU_UPDATE+0x754>
 80035be:	bf00      	nop
 80035c0:	20000974 	.word	0x20000974
 80035c4:	20000a14 	.word	0x20000a14
 80035c8:	2000092c 	.word	0x2000092c
 80035cc:	20000034 	.word	0x20000034
 80035d0:	200008e4 	.word	0x200008e4
 80035d4:	42652ee0 	.word	0x42652ee0
 80035d8:	edc7 7aaa 	vstr	s15, [r7, #680]	; 0x2a8
    return radians * (180.0f / (float) M_PI);
 80035dc:	edd7 7aaa 	vldr	s15, [r7, #680]	; 0x2a8
 80035e0:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80035d4 <IMU_UPDATE+0x750>
 80035e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 80035e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035ec:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 80035f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80035f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80035f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80035fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003604:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003608:	edd3 6a00 	vldr	s13, [r3]
 800360c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003610:	edd3 7a02 	vldr	s15, [r3, #8]
 8003614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003620:	eeb0 0a67 	vmov.f32	s0, s15
 8003624:	f007 fc8a 	bl	800af3c <asinf>
 8003628:	eef0 7a40 	vmov.f32	s15, s0
 800362c:	eef1 7a67 	vneg.f32	s15, s15
 8003630:	edc7 7aa9 	vstr	s15, [r7, #676]	; 0x2a4
    return radians * (180.0f / (float) M_PI);
 8003634:	edd7 7aa9 	vldr	s15, [r7, #676]	; 0x2a4
 8003638:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 80035d4 <IMU_UPDATE+0x750>
 800363c:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003640:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003644:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800364c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003650:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003654:	edd3 7a02 	vldr	s15, [r3, #8]
 8003658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800365c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003660:	edd3 6a00 	vldr	s13, [r3]
 8003664:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003668:	edd3 7a03 	vldr	s15, [r3, #12]
 800366c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003670:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003674:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003678:	ed93 7a01 	vldr	s14, [r3, #4]
 800367c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003680:	edd3 7a01 	vldr	s15, [r3, #4]
 8003684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003688:	edd7 7aab 	vldr	s15, [r7, #684]	; 0x2ac
 800368c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003690:	eef0 0a67 	vmov.f32	s1, s15
 8003694:	eeb0 0a66 	vmov.f32	s0, s13
 8003698:	f007 fc82 	bl	800afa0 <atan2f>
 800369c:	eef0 7a40 	vmov.f32	s15, s0
 80036a0:	edc7 7aa8 	vstr	s15, [r7, #672]	; 0x2a0
    return radians * (180.0f / (float) M_PI);
 80036a4:	edd7 7aa8 	vldr	s15, [r7, #672]	; 0x2a0
 80036a8:	ed1f 7a36 	vldr	s14, [pc, #-216]	; 80035d4 <IMU_UPDATE+0x750>
 80036ac:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 80036b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80036b4:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 80036b8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80036bc:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80036c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80036c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80036c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036ca:	461c      	mov	r4, r3
 80036cc:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80036d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <IMU_UPDATE+0x86c>)
 80036da:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80036de:	ca07      	ldmia	r2, {r0, r1, r2}
 80036e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80036e4:	bf00      	nop
 80036e6:	f507 772c 	add.w	r7, r7, #688	; 0x2b0
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bdb0      	pop	{r4, r5, r7, pc}
 80036ee:	bf00      	nop
 80036f0:	2000087c 	.word	0x2000087c

080036f4 <SERIAL_CONTROL_LOOP>:
void SERIAL_CONTROL_LOOP()
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
	SerialControlWheelsRequest.ControlMode = 0;
 80036f8:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <SERIAL_CONTROL_LOOP+0x40>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
	SerialControlWheelsRequest.ParameterNumber = 0;
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <SERIAL_CONTROL_LOOP+0x40>)
 8003700:	2200      	movs	r2, #0
 8003702:	705a      	strb	r2, [r3, #1]
	SerialControlWheelsRequest.WheelLeft = BTFront;
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <SERIAL_CONTROL_LOOP+0x44>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <SERIAL_CONTROL_LOOP+0x40>)
 800370a:	3306      	adds	r3, #6
 800370c:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight = BTTurn;
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <SERIAL_CONTROL_LOOP+0x48>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <SERIAL_CONTROL_LOOP+0x40>)
 8003714:	330a      	adds	r3, #10
 8003716:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.CR=13;
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <SERIAL_CONTROL_LOOP+0x40>)
 800371a:	220d      	movs	r2, #13
 800371c:	739a      	strb	r2, [r3, #14]
	SerialControlWheelsRequest.LF=10;
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <SERIAL_CONTROL_LOOP+0x40>)
 8003720:	220a      	movs	r2, #10
 8003722:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)SerialControlWheelsRequest.Buffer, WHEELS_REQUEST_SIZE);
 8003724:	2210      	movs	r2, #16
 8003726:	4903      	ldr	r1, [pc, #12]	; (8003734 <SERIAL_CONTROL_LOOP+0x40>)
 8003728:	4805      	ldr	r0, [pc, #20]	; (8003740 <SERIAL_CONTROL_LOOP+0x4c>)
 800372a:	f006 fa9d 	bl	8009c68 <HAL_UART_Transmit_DMA>
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	200008ac 	.word	0x200008ac
 8003738:	200007d4 	.word	0x200007d4
 800373c:	200007d8 	.word	0x200007d8
 8003740:	20000e74 	.word	0x20000e74
 8003744:	00000000 	.word	0x00000000

08003748 <BALANCE_Prepare>:
	SerialOnBoardRequest.CR = 13;
	SerialOnBoardRequest.LF = 10;
	//HAL_UART_Transmit_DMA(&huart6, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
}
void BALANCE_Prepare()
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	Front = BTFront;
 800374c:	4b72      	ldr	r3, [pc, #456]	; (8003918 <BALANCE_Prepare+0x1d0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a72      	ldr	r2, [pc, #456]	; (800391c <BALANCE_Prepare+0x1d4>)
 8003752:	6013      	str	r3, [r2, #0]
	Turn = BTTurn;
 8003754:	4b72      	ldr	r3, [pc, #456]	; (8003920 <BALANCE_Prepare+0x1d8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a72      	ldr	r2, [pc, #456]	; (8003924 <BALANCE_Prepare+0x1dc>)
 800375a:	6013      	str	r3, [r2, #0]

	if (Battery < 4)
 800375c:	4b72      	ldr	r3, [pc, #456]	; (8003928 <BALANCE_Prepare+0x1e0>)
 800375e:	edd3 7a00 	vldr	s15, [r3]
 8003762:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376e:	d507      	bpl.n	8003780 <BALANCE_Prepare+0x38>
	{
		Front = 0;
 8003770:	4b6a      	ldr	r3, [pc, #424]	; (800391c <BALANCE_Prepare+0x1d4>)
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
		Turn = 0;
 8003778:	4b6a      	ldr	r3, [pc, #424]	; (8003924 <BALANCE_Prepare+0x1dc>)
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
	}

	if ((fabsf(Front) < 0.001) && (fabsf(Turn) < 0.001) && (fabsf(SpeedLinear) < 0.02) && (fabsf(LeftSpeed - RightSpeed) < 0.02))
 8003780:	4b66      	ldr	r3, [pc, #408]	; (800391c <BALANCE_Prepare+0x1d4>)
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	eef0 7ae7 	vabs.f32	s15, s15
 800378a:	ee17 0a90 	vmov	r0, s15
 800378e:	f7fc fed3 	bl	8000538 <__aeabi_f2d>
 8003792:	a35b      	add	r3, pc, #364	; (adr r3, 8003900 <BALANCE_Prepare+0x1b8>)
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f7fd f998 	bl	8000acc <__aeabi_dcmplt>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d05f      	beq.n	8003862 <BALANCE_Prepare+0x11a>
 80037a2:	4b60      	ldr	r3, [pc, #384]	; (8003924 <BALANCE_Prepare+0x1dc>)
 80037a4:	edd3 7a00 	vldr	s15, [r3]
 80037a8:	eef0 7ae7 	vabs.f32	s15, s15
 80037ac:	ee17 0a90 	vmov	r0, s15
 80037b0:	f7fc fec2 	bl	8000538 <__aeabi_f2d>
 80037b4:	a352      	add	r3, pc, #328	; (adr r3, 8003900 <BALANCE_Prepare+0x1b8>)
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	f7fd f987 	bl	8000acc <__aeabi_dcmplt>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d04e      	beq.n	8003862 <BALANCE_Prepare+0x11a>
 80037c4:	4b59      	ldr	r3, [pc, #356]	; (800392c <BALANCE_Prepare+0x1e4>)
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	eef0 7ae7 	vabs.f32	s15, s15
 80037ce:	ee17 0a90 	vmov	r0, s15
 80037d2:	f7fc feb1 	bl	8000538 <__aeabi_f2d>
 80037d6:	a34c      	add	r3, pc, #304	; (adr r3, 8003908 <BALANCE_Prepare+0x1c0>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f7fd f976 	bl	8000acc <__aeabi_dcmplt>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d03d      	beq.n	8003862 <BALANCE_Prepare+0x11a>
 80037e6:	4b52      	ldr	r3, [pc, #328]	; (8003930 <BALANCE_Prepare+0x1e8>)
 80037e8:	ed93 7a00 	vldr	s14, [r3]
 80037ec:	4b51      	ldr	r3, [pc, #324]	; (8003934 <BALANCE_Prepare+0x1ec>)
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037f6:	eef0 7ae7 	vabs.f32	s15, s15
 80037fa:	ee17 0a90 	vmov	r0, s15
 80037fe:	f7fc fe9b 	bl	8000538 <__aeabi_f2d>
 8003802:	a341      	add	r3, pc, #260	; (adr r3, 8003908 <BALANCE_Prepare+0x1c0>)
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f7fd f960 	bl	8000acc <__aeabi_dcmplt>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d027      	beq.n	8003862 <BALANCE_Prepare+0x11a>
	{
		if ((Battery < 4) && (BalanceActiveDemand))
 8003812:	4b45      	ldr	r3, [pc, #276]	; (8003928 <BALANCE_Prepare+0x1e0>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800381c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003824:	d507      	bpl.n	8003836 <BALANCE_Prepare+0xee>
 8003826:	4b44      	ldr	r3, [pc, #272]	; (8003938 <BALANCE_Prepare+0x1f0>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <BALANCE_Prepare+0xee>
		{
			BalanceActiveDemand = false;
 800382e:	4b42      	ldr	r3, [pc, #264]	; (8003938 <BALANCE_Prepare+0x1f0>)
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e015      	b.n	8003862 <BALANCE_Prepare+0x11a>
		}
		else if (Battery > 8)
 8003836:	4b3c      	ldr	r3, [pc, #240]	; (8003928 <BALANCE_Prepare+0x1e0>)
 8003838:	edd3 7a00 	vldr	s15, [r3]
 800383c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003848:	dd04      	ble.n	8003854 <BALANCE_Prepare+0x10c>
		{
			BalanceActiveDemand = BTBalanceActive;
 800384a:	4b3c      	ldr	r3, [pc, #240]	; (800393c <BALANCE_Prepare+0x1f4>)
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	4b3a      	ldr	r3, [pc, #232]	; (8003938 <BALANCE_Prepare+0x1f0>)
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e006      	b.n	8003862 <BALANCE_Prepare+0x11a>
		}
		else if (!BTBalanceActive)
 8003854:	4b39      	ldr	r3, [pc, #228]	; (800393c <BALANCE_Prepare+0x1f4>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <BALANCE_Prepare+0x11a>
		{
			BalanceActiveDemand = false;
 800385c:	4b36      	ldr	r3, [pc, #216]	; (8003938 <BALANCE_Prepare+0x1f0>)
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
		}
	}

	Turn = (Turn > 90) ? 90 : Turn;
 8003862:	4b30      	ldr	r3, [pc, #192]	; (8003924 <BALANCE_Prepare+0x1dc>)
 8003864:	edd3 7a00 	vldr	s15, [r3]
 8003868:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003940 <BALANCE_Prepare+0x1f8>
 800386c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003874:	dd01      	ble.n	800387a <BALANCE_Prepare+0x132>
 8003876:	4b33      	ldr	r3, [pc, #204]	; (8003944 <BALANCE_Prepare+0x1fc>)
 8003878:	e001      	b.n	800387e <BALANCE_Prepare+0x136>
 800387a:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <BALANCE_Prepare+0x1dc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a29      	ldr	r2, [pc, #164]	; (8003924 <BALANCE_Prepare+0x1dc>)
 8003880:	6013      	str	r3, [r2, #0]
	Turn = (Turn < -90) ? -90 : Turn;
 8003882:	4b28      	ldr	r3, [pc, #160]	; (8003924 <BALANCE_Prepare+0x1dc>)
 8003884:	edd3 7a00 	vldr	s15, [r3]
 8003888:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003948 <BALANCE_Prepare+0x200>
 800388c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003894:	d501      	bpl.n	800389a <BALANCE_Prepare+0x152>
 8003896:	4b2d      	ldr	r3, [pc, #180]	; (800394c <BALANCE_Prepare+0x204>)
 8003898:	e001      	b.n	800389e <BALANCE_Prepare+0x156>
 800389a:	4b22      	ldr	r3, [pc, #136]	; (8003924 <BALANCE_Prepare+0x1dc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a21      	ldr	r2, [pc, #132]	; (8003924 <BALANCE_Prepare+0x1dc>)
 80038a0:	6013      	str	r3, [r2, #0]
	Front = (Front > 2) ? 2 : Front;
 80038a2:	4b1e      	ldr	r3, [pc, #120]	; (800391c <BALANCE_Prepare+0x1d4>)
 80038a4:	edd3 7a00 	vldr	s15, [r3]
 80038a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80038ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b4:	dd02      	ble.n	80038bc <BALANCE_Prepare+0x174>
 80038b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038ba:	e001      	b.n	80038c0 <BALANCE_Prepare+0x178>
 80038bc:	4b17      	ldr	r3, [pc, #92]	; (800391c <BALANCE_Prepare+0x1d4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a16      	ldr	r2, [pc, #88]	; (800391c <BALANCE_Prepare+0x1d4>)
 80038c2:	6013      	str	r3, [r2, #0]
	Front = (Front < -0.4) ? -0.4 : Front;
 80038c4:	4b15      	ldr	r3, [pc, #84]	; (800391c <BALANCE_Prepare+0x1d4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fc fe35 	bl	8000538 <__aeabi_f2d>
 80038ce:	a310      	add	r3, pc, #64	; (adr r3, 8003910 <BALANCE_Prepare+0x1c8>)
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f7fd f8fa 	bl	8000acc <__aeabi_dcmplt>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <BALANCE_Prepare+0x19a>
 80038de:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <BALANCE_Prepare+0x208>)
 80038e0:	e001      	b.n	80038e6 <BALANCE_Prepare+0x19e>
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <BALANCE_Prepare+0x1d4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a0d      	ldr	r2, [pc, #52]	; (800391c <BALANCE_Prepare+0x1d4>)
 80038e8:	6013      	str	r3, [r2, #0]

	// Point to add IK sensor

	// Point to add ParkingMode

	if (BalanceActiveDemand)
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <BALANCE_Prepare+0x1f0>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <BALANCE_Prepare+0x1b0>
	{

	}
	else
	{
		FootAngleDemand = STEPPER_DRIVE_MAX;
 80038f2:	4b18      	ldr	r3, [pc, #96]	; (8003954 <BALANCE_Prepare+0x20c>)
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	701a      	strb	r2, [r3, #0]
	}

	//BalanceActiveDemand = BTBalanceActive;
	//BalanceActive = BTBalanceActive;
	//PositionLinearDemand = PositionLinear;
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	f3af 8000 	nop.w
 8003900:	d2f1a9fc 	.word	0xd2f1a9fc
 8003904:	3f50624d 	.word	0x3f50624d
 8003908:	47ae147b 	.word	0x47ae147b
 800390c:	3f947ae1 	.word	0x3f947ae1
 8003910:	9999999a 	.word	0x9999999a
 8003914:	bfd99999 	.word	0xbfd99999
 8003918:	200007d4 	.word	0x200007d4
 800391c:	200007dc 	.word	0x200007dc
 8003920:	200007d8 	.word	0x200007d8
 8003924:	200007e0 	.word	0x200007e0
 8003928:	20000950 	.word	0x20000950
 800392c:	200008cc 	.word	0x200008cc
 8003930:	20000924 	.word	0x20000924
 8003934:	20000864 	.word	0x20000864
 8003938:	200008a8 	.word	0x200008a8
 800393c:	20000954 	.word	0x20000954
 8003940:	42b40000 	.word	0x42b40000
 8003944:	42b40000 	.word	0x42b40000
 8003948:	c2b40000 	.word	0xc2b40000
 800394c:	c2b40000 	.word	0xc2b40000
 8003950:	becccccd 	.word	0xbecccccd
 8003954:	2000096c 	.word	0x2000096c

08003958 <BALANCE_Calculate_Speeds>:
void BALANCE_Calculate_Speeds()
{
 8003958:	b5b0      	push	{r4, r5, r7, lr}
 800395a:	af00      	add	r7, sp, #0
	//LEFT
	TimeS = (HAL_GetTick() - StepsLeftPreviousTime) / 1000.0;
 800395c:	f002 fb28 	bl	8005fb0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	4b8d      	ldr	r3, [pc, #564]	; (8003b98 <BALANCE_Calculate_Speeds+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	4618      	mov	r0, r3
 800396a:	f7fc fdc3 	bl	80004f4 <__aeabi_ui2d>
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	4b8a      	ldr	r3, [pc, #552]	; (8003b9c <BALANCE_Calculate_Speeds+0x244>)
 8003974:	f7fc ff62 	bl	800083c <__aeabi_ddiv>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	f7fd f8f4 	bl	8000b6c <__aeabi_d2f>
 8003984:	4603      	mov	r3, r0
 8003986:	4a86      	ldr	r2, [pc, #536]	; (8003ba0 <BALANCE_Calculate_Speeds+0x248>)
 8003988:	6013      	str	r3, [r2, #0]
	if (TimeS > SPEED_STEPS_MAX_TIME)
 800398a:	4b85      	ldr	r3, [pc, #532]	; (8003ba0 <BALANCE_Calculate_Speeds+0x248>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fc fdd2 	bl	8000538 <__aeabi_f2d>
 8003994:	a37c      	add	r3, pc, #496	; (adr r3, 8003b88 <BALANCE_Calculate_Speeds+0x230>)
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	f7fd f8b5 	bl	8000b08 <__aeabi_dcmpgt>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <BALANCE_Calculate_Speeds+0x5a>
	{
		TimeS = SPEED_STEPS_MAX_TIME;
 80039a4:	4b7e      	ldr	r3, [pc, #504]	; (8003ba0 <BALANCE_Calculate_Speeds+0x248>)
 80039a6:	4a7f      	ldr	r2, [pc, #508]	; (8003ba4 <BALANCE_Calculate_Speeds+0x24c>)
 80039a8:	601a      	str	r2, [r3, #0]
	    LeftSpeed = 0;
 80039aa:	4b7f      	ldr	r3, [pc, #508]	; (8003ba8 <BALANCE_Calculate_Speeds+0x250>)
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
	}
	if (HallLeftStep != StepsLeftPrevious)
 80039b2:	4b7e      	ldr	r3, [pc, #504]	; (8003bac <BALANCE_Calculate_Speeds+0x254>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039be:	4b7c      	ldr	r3, [pc, #496]	; (8003bb0 <BALANCE_Calculate_Speeds+0x258>)
 80039c0:	edd3 7a00 	vldr	s15, [r3]
 80039c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80039c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039cc:	d039      	beq.n	8003a42 <BALANCE_Calculate_Speeds+0xea>
	{
		LeftSpeed = ((HallLeftStep - StepsLeftPrevious) * STEPS_TO_METERS) / TimeS;
 80039ce:	4b78      	ldr	r3, [pc, #480]	; (8003bb0 <BALANCE_Calculate_Speeds+0x258>)
 80039d0:	ed93 7a00 	vldr	s14, [r3]
 80039d4:	4b75      	ldr	r3, [pc, #468]	; (8003bac <BALANCE_Calculate_Speeds+0x254>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039e4:	ee17 0a90 	vmov	r0, s15
 80039e8:	f7fc fda6 	bl	8000538 <__aeabi_f2d>
 80039ec:	a368      	add	r3, pc, #416	; (adr r3, 8003b90 <BALANCE_Calculate_Speeds+0x238>)
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	f7fc fdf9 	bl	80005e8 <__aeabi_dmul>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4614      	mov	r4, r2
 80039fc:	461d      	mov	r5, r3
 80039fe:	4b68      	ldr	r3, [pc, #416]	; (8003ba0 <BALANCE_Calculate_Speeds+0x248>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fc fd98 	bl	8000538 <__aeabi_f2d>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	4629      	mov	r1, r5
 8003a10:	f7fc ff14 	bl	800083c <__aeabi_ddiv>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f7fd f8a6 	bl	8000b6c <__aeabi_d2f>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4a61      	ldr	r2, [pc, #388]	; (8003ba8 <BALANCE_Calculate_Speeds+0x250>)
 8003a24:	6013      	str	r3, [r2, #0]
	    StepsLeftPrevious = HallLeftStep;
 8003a26:	4b62      	ldr	r3, [pc, #392]	; (8003bb0 <BALANCE_Calculate_Speeds+0x258>)
 8003a28:	edd3 7a00 	vldr	s15, [r3]
 8003a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a30:	ee17 2a90 	vmov	r2, s15
 8003a34:	4b5d      	ldr	r3, [pc, #372]	; (8003bac <BALANCE_Calculate_Speeds+0x254>)
 8003a36:	601a      	str	r2, [r3, #0]
	    StepsLeftPreviousTime = HAL_GetTick();
 8003a38:	f002 faba 	bl	8005fb0 <HAL_GetTick>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4a56      	ldr	r2, [pc, #344]	; (8003b98 <BALANCE_Calculate_Speeds+0x240>)
 8003a40:	6013      	str	r3, [r2, #0]
	}

	//RIGHT
	TimeS = (HAL_GetTick() - StepsRightPreviousTime) / 1000.0;
 8003a42:	f002 fab5 	bl	8005fb0 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <BALANCE_Calculate_Speeds+0x25c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fc fd50 	bl	80004f4 <__aeabi_ui2d>
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <BALANCE_Calculate_Speeds+0x244>)
 8003a5a:	f7fc feef 	bl	800083c <__aeabi_ddiv>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	f7fd f881 	bl	8000b6c <__aeabi_d2f>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4a4c      	ldr	r2, [pc, #304]	; (8003ba0 <BALANCE_Calculate_Speeds+0x248>)
 8003a6e:	6013      	str	r3, [r2, #0]
	if (TimeS > SPEED_STEPS_MAX_TIME)
 8003a70:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <BALANCE_Calculate_Speeds+0x248>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fc fd5f 	bl	8000538 <__aeabi_f2d>
 8003a7a:	a343      	add	r3, pc, #268	; (adr r3, 8003b88 <BALANCE_Calculate_Speeds+0x230>)
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f7fd f842 	bl	8000b08 <__aeabi_dcmpgt>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d006      	beq.n	8003a98 <BALANCE_Calculate_Speeds+0x140>
	{
		TimeS = SPEED_STEPS_MAX_TIME;
 8003a8a:	4b45      	ldr	r3, [pc, #276]	; (8003ba0 <BALANCE_Calculate_Speeds+0x248>)
 8003a8c:	4a45      	ldr	r2, [pc, #276]	; (8003ba4 <BALANCE_Calculate_Speeds+0x24c>)
 8003a8e:	601a      	str	r2, [r3, #0]
	    RightSpeed = 0;
 8003a90:	4b49      	ldr	r3, [pc, #292]	; (8003bb8 <BALANCE_Calculate_Speeds+0x260>)
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
	}
	if (HallRightStep != StepsRightPrevious)
 8003a98:	4b48      	ldr	r3, [pc, #288]	; (8003bbc <BALANCE_Calculate_Speeds+0x264>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	ee07 3a90 	vmov	s15, r3
 8003aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aa4:	4b46      	ldr	r3, [pc, #280]	; (8003bc0 <BALANCE_Calculate_Speeds+0x268>)
 8003aa6:	edd3 7a00 	vldr	s15, [r3]
 8003aaa:	eeb4 7a67 	vcmp.f32	s14, s15
 8003aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab2:	d039      	beq.n	8003b28 <BALANCE_Calculate_Speeds+0x1d0>
	{
		RightSpeed = ((HallRightStep - StepsRightPrevious) * STEPS_TO_METERS) / TimeS;
 8003ab4:	4b42      	ldr	r3, [pc, #264]	; (8003bc0 <BALANCE_Calculate_Speeds+0x268>)
 8003ab6:	ed93 7a00 	vldr	s14, [r3]
 8003aba:	4b40      	ldr	r3, [pc, #256]	; (8003bbc <BALANCE_Calculate_Speeds+0x264>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aca:	ee17 0a90 	vmov	r0, s15
 8003ace:	f7fc fd33 	bl	8000538 <__aeabi_f2d>
 8003ad2:	a32f      	add	r3, pc, #188	; (adr r3, 8003b90 <BALANCE_Calculate_Speeds+0x238>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f7fc fd86 	bl	80005e8 <__aeabi_dmul>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <BALANCE_Calculate_Speeds+0x248>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fc fd25 	bl	8000538 <__aeabi_f2d>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4620      	mov	r0, r4
 8003af4:	4629      	mov	r1, r5
 8003af6:	f7fc fea1 	bl	800083c <__aeabi_ddiv>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4610      	mov	r0, r2
 8003b00:	4619      	mov	r1, r3
 8003b02:	f7fd f833 	bl	8000b6c <__aeabi_d2f>
 8003b06:	4603      	mov	r3, r0
 8003b08:	4a2b      	ldr	r2, [pc, #172]	; (8003bb8 <BALANCE_Calculate_Speeds+0x260>)
 8003b0a:	6013      	str	r3, [r2, #0]
	    StepsRightPrevious = HallRightStep;
 8003b0c:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <BALANCE_Calculate_Speeds+0x268>)
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b16:	ee17 2a90 	vmov	r2, s15
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <BALANCE_Calculate_Speeds+0x264>)
 8003b1c:	601a      	str	r2, [r3, #0]
	    StepsRightPreviousTime = HAL_GetTick();
 8003b1e:	f002 fa47 	bl	8005fb0 <HAL_GetTick>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4a23      	ldr	r2, [pc, #140]	; (8003bb4 <BALANCE_Calculate_Speeds+0x25c>)
 8003b26:	6013      	str	r3, [r2, #0]
	}

	PositionLinear = ((HallLeftStep + HallRightStep) / 2) * STEPS_TO_METERS;
 8003b28:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <BALANCE_Calculate_Speeds+0x258>)
 8003b2a:	ed93 7a00 	vldr	s14, [r3]
 8003b2e:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <BALANCE_Calculate_Speeds+0x268>)
 8003b30:	edd3 7a00 	vldr	s15, [r3]
 8003b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b38:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003b3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b40:	ee16 0a90 	vmov	r0, s13
 8003b44:	f7fc fcf8 	bl	8000538 <__aeabi_f2d>
 8003b48:	a311      	add	r3, pc, #68	; (adr r3, 8003b90 <BALANCE_Calculate_Speeds+0x238>)
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f7fc fd4b 	bl	80005e8 <__aeabi_dmul>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	f7fd f807 	bl	8000b6c <__aeabi_d2f>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4a18      	ldr	r2, [pc, #96]	; (8003bc4 <BALANCE_Calculate_Speeds+0x26c>)
 8003b62:	6013      	str	r3, [r2, #0]
	SpeedLinear = (LeftSpeed + RightSpeed) / 2.0;
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <BALANCE_Calculate_Speeds+0x250>)
 8003b66:	ed93 7a00 	vldr	s14, [r3]
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <BALANCE_Calculate_Speeds+0x260>)
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <BALANCE_Calculate_Speeds+0x270>)
 8003b7e:	edc3 7a00 	vstr	s15, [r3]
}
 8003b82:	bf00      	nop
 8003b84:	bdb0      	pop	{r4, r5, r7, pc}
 8003b86:	bf00      	nop
 8003b88:	9999999a 	.word	0x9999999a
 8003b8c:	3fc99999 	.word	0x3fc99999
 8003b90:	8121fb7c 	.word	0x8121fb7c
 8003b94:	3f821fb7 	.word	0x3f821fb7
 8003b98:	20000a04 	.word	0x20000a04
 8003b9c:	408f4000 	.word	0x408f4000
 8003ba0:	2000091c 	.word	0x2000091c
 8003ba4:	3e4ccccd 	.word	0x3e4ccccd
 8003ba8:	20000924 	.word	0x20000924
 8003bac:	20000968 	.word	0x20000968
 8003bb0:	20000890 	.word	0x20000890
 8003bb4:	200009d4 	.word	0x200009d4
 8003bb8:	20000864 	.word	0x20000864
 8003bbc:	20000854 	.word	0x20000854
 8003bc0:	20000988 	.word	0x20000988
 8003bc4:	200008d8 	.word	0x200008d8
 8003bc8:	200008cc 	.word	0x200008cc
 8003bcc:	00000000 	.word	0x00000000

08003bd0 <BALANCE_Position_Linear_Control>:
void BALANCE_Position_Linear_Control()
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
	if (fabsf(Front) > 0.001)
 8003bd6:	4b48      	ldr	r3, [pc, #288]	; (8003cf8 <BALANCE_Position_Linear_Control+0x128>)
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	eef0 7ae7 	vabs.f32	s15, s15
 8003be0:	ee17 0a90 	vmov	r0, s15
 8003be4:	f7fc fca8 	bl	8000538 <__aeabi_f2d>
 8003be8:	a33f      	add	r3, pc, #252	; (adr r3, 8003ce8 <BALANCE_Position_Linear_Control+0x118>)
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	f7fc ff8b 	bl	8000b08 <__aeabi_dcmpgt>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <BALANCE_Position_Linear_Control+0x30>
	{
		PositionLinearControlSwitch = 0;
 8003bf8:	4b40      	ldr	r3, [pc, #256]	; (8003cfc <BALANCE_Position_Linear_Control+0x12c>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e013      	b.n	8003c28 <BALANCE_Position_Linear_Control+0x58>
	}
	else if (fabsf(SpeedLinear) < 0.02)
 8003c00:	4b3f      	ldr	r3, [pc, #252]	; (8003d00 <BALANCE_Position_Linear_Control+0x130>)
 8003c02:	edd3 7a00 	vldr	s15, [r3]
 8003c06:	eef0 7ae7 	vabs.f32	s15, s15
 8003c0a:	ee17 0a90 	vmov	r0, s15
 8003c0e:	f7fc fc93 	bl	8000538 <__aeabi_f2d>
 8003c12:	a337      	add	r3, pc, #220	; (adr r3, 8003cf0 <BALANCE_Position_Linear_Control+0x120>)
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f7fc ff58 	bl	8000acc <__aeabi_dcmplt>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <BALANCE_Position_Linear_Control+0x58>
	{
		PositionLinearControlSwitch = 1;
 8003c22:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <BALANCE_Position_Linear_Control+0x12c>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]
	}

	if (BalanceActive)
 8003c28:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <BALANCE_Position_Linear_Control+0x134>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d04c      	beq.n	8003cca <BALANCE_Position_Linear_Control+0xfa>
	{
		float Error = PositionLinearDemand - PositionLinear;
 8003c30:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <BALANCE_Position_Linear_Control+0x138>)
 8003c32:	ed93 7a00 	vldr	s14, [r3]
 8003c36:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <BALANCE_Position_Linear_Control+0x13c>)
 8003c38:	edd3 7a00 	vldr	s15, [r3]
 8003c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c40:	edc7 7a01 	vstr	s15, [r7, #4]
	    if (Error > 0)
 8003c44:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	dd0b      	ble.n	8003c6a <BALANCE_Position_Linear_Control+0x9a>
	    {
	    	PositionIValue += PositionI;
 8003c52:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <BALANCE_Position_Linear_Control+0x140>)
 8003c54:	ed93 7a00 	vldr	s14, [r3]
 8003c58:	4b2e      	ldr	r3, [pc, #184]	; (8003d14 <BALANCE_Position_Linear_Control+0x144>)
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c62:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <BALANCE_Position_Linear_Control+0x140>)
 8003c64:	edc3 7a00 	vstr	s15, [r3]
 8003c68:	e00a      	b.n	8003c80 <BALANCE_Position_Linear_Control+0xb0>
	    }
	    else
	    {
	    	PositionIValue -= PositionI;
 8003c6a:	4b29      	ldr	r3, [pc, #164]	; (8003d10 <BALANCE_Position_Linear_Control+0x140>)
 8003c6c:	ed93 7a00 	vldr	s14, [r3]
 8003c70:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <BALANCE_Position_Linear_Control+0x144>)
 8003c72:	edd3 7a00 	vldr	s15, [r3]
 8003c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c7a:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <BALANCE_Position_Linear_Control+0x140>)
 8003c7c:	edc3 7a00 	vstr	s15, [r3]
	    }

	    PositionPID = Error * PositionP + PositionIValue;
 8003c80:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <BALANCE_Position_Linear_Control+0x148>)
 8003c82:	ed93 7a00 	vldr	s14, [r3]
 8003c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c8e:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <BALANCE_Position_Linear_Control+0x140>)
 8003c90:	edd3 7a00 	vldr	s15, [r3]
 8003c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <BALANCE_Position_Linear_Control+0x14c>)
 8003c9a:	edc3 7a00 	vstr	s15, [r3]
	    if (PositionLinearControlSwitch)
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <BALANCE_Position_Linear_Control+0x12c>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <BALANCE_Position_Linear_Control+0xe0>
	    {
	    	SpeedLinearDemand = PositionPID;
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <BALANCE_Position_Linear_Control+0x14c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1d      	ldr	r2, [pc, #116]	; (8003d20 <BALANCE_Position_Linear_Control+0x150>)
 8003cac:	6013      	str	r3, [r2, #0]
	else
	{
		PositionLinearDemand = PositionLinear;
	    PositionIValue = 0;
	}
}
 8003cae:	e014      	b.n	8003cda <BALANCE_Position_Linear_Control+0x10a>
	        SpeedLinearDemand = Front;
 8003cb0:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <BALANCE_Position_Linear_Control+0x128>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1a      	ldr	r2, [pc, #104]	; (8003d20 <BALANCE_Position_Linear_Control+0x150>)
 8003cb6:	6013      	str	r3, [r2, #0]
	        PositionLinearDemand = PositionLinear;
 8003cb8:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <BALANCE_Position_Linear_Control+0x13c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <BALANCE_Position_Linear_Control+0x138>)
 8003cbe:	6013      	str	r3, [r2, #0]
	        PositionIValue = 0;
 8003cc0:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <BALANCE_Position_Linear_Control+0x140>)
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
}
 8003cc8:	e007      	b.n	8003cda <BALANCE_Position_Linear_Control+0x10a>
		PositionLinearDemand = PositionLinear;
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <BALANCE_Position_Linear_Control+0x13c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a0e      	ldr	r2, [pc, #56]	; (8003d08 <BALANCE_Position_Linear_Control+0x138>)
 8003cd0:	6013      	str	r3, [r2, #0]
	    PositionIValue = 0;
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <BALANCE_Position_Linear_Control+0x140>)
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	f3af 8000 	nop.w
 8003ce8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003cec:	3f50624d 	.word	0x3f50624d
 8003cf0:	47ae147b 	.word	0x47ae147b
 8003cf4:	3f947ae1 	.word	0x3f947ae1
 8003cf8:	200007dc 	.word	0x200007dc
 8003cfc:	20000949 	.word	0x20000949
 8003d00:	200008cc 	.word	0x200008cc
 8003d04:	20000948 	.word	0x20000948
 8003d08:	200008c8 	.word	0x200008c8
 8003d0c:	200008d8 	.word	0x200008d8
 8003d10:	20000a40 	.word	0x20000a40
 8003d14:	200007a0 	.word	0x200007a0
 8003d18:	20000004 	.word	0x20000004
 8003d1c:	20000a30 	.word	0x20000a30
 8003d20:	2000098c 	.word	0x2000098c
 8003d24:	00000000 	.word	0x00000000

08003d28 <BALANCE_Speed_LinearControl>:
void BALANCE_Speed_LinearControl()
{
 8003d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
	float deltaTime = (HAL_GetTick() - linearTime) / 1000000.0;
 8003d30:	f002 f93e 	bl	8005fb0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4bc0      	ldr	r3, [pc, #768]	; (8004038 <BALANCE_Speed_LinearControl+0x310>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fc fbd9 	bl	80004f4 <__aeabi_ui2d>
 8003d42:	a3bb      	add	r3, pc, #748	; (adr r3, 8004030 <BALANCE_Speed_LinearControl+0x308>)
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f7fc fd78 	bl	800083c <__aeabi_ddiv>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	f7fc ff0a 	bl	8000b6c <__aeabi_d2f>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	617b      	str	r3, [r7, #20]
	linearTime = HAL_GetTick();
 8003d5c:	f002 f928 	bl	8005fb0 <HAL_GetTick>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4ab5      	ldr	r2, [pc, #724]	; (8004038 <BALANCE_Speed_LinearControl+0x310>)
 8003d64:	6013      	str	r3, [r2, #0]

	if (deltaTime < 0)
 8003d66:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d72:	d502      	bpl.n	8003d7a <BALANCE_Speed_LinearControl+0x52>
	{
		deltaTime = linearDeltaTimePrev;
 8003d74:	4bb1      	ldr	r3, [pc, #708]	; (800403c <BALANCE_Speed_LinearControl+0x314>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	617b      	str	r3, [r7, #20]
	}
	linearDeltaTimePrev = deltaTime;
 8003d7a:	4ab0      	ldr	r2, [pc, #704]	; (800403c <BALANCE_Speed_LinearControl+0x314>)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	6013      	str	r3, [r2, #0]

	SpeedLinearDemand = SpeedLinearDemand > PLATFORM_Y_MAX ? PLATFORM_Y_MAX : SpeedLinearDemand;
 8003d80:	4baf      	ldr	r3, [pc, #700]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8003d82:	edd3 7a00 	vldr	s15, [r3]
 8003d86:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d92:	dd01      	ble.n	8003d98 <BALANCE_Speed_LinearControl+0x70>
 8003d94:	4bab      	ldr	r3, [pc, #684]	; (8004044 <BALANCE_Speed_LinearControl+0x31c>)
 8003d96:	e001      	b.n	8003d9c <BALANCE_Speed_LinearControl+0x74>
 8003d98:	4ba9      	ldr	r3, [pc, #676]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4aa8      	ldr	r2, [pc, #672]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8003d9e:	6013      	str	r3, [r2, #0]
	SpeedLinearDemand = SpeedLinearDemand < -PLATFORM_Y_MAX ? -PLATFORM_Y_MAX : SpeedLinearDemand;
 8003da0:	4ba7      	ldr	r3, [pc, #668]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8003da2:	edd3 7a00 	vldr	s15, [r3]
 8003da6:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8003daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db2:	d501      	bpl.n	8003db8 <BALANCE_Speed_LinearControl+0x90>
 8003db4:	4ba4      	ldr	r3, [pc, #656]	; (8004048 <BALANCE_Speed_LinearControl+0x320>)
 8003db6:	e001      	b.n	8003dbc <BALANCE_Speed_LinearControl+0x94>
 8003db8:	4ba1      	ldr	r3, [pc, #644]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4aa0      	ldr	r2, [pc, #640]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8003dbe:	6013      	str	r3, [r2, #0]

	if (BalanceActive)
 8003dc0:	4ba2      	ldr	r3, [pc, #648]	; (800404c <BALANCE_Speed_LinearControl+0x324>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8124 	beq.w	8004012 <BALANCE_Speed_LinearControl+0x2ea>
	{
	    float linearError = SpeedLinearDemand - SpeedLinear;
 8003dca:	4b9d      	ldr	r3, [pc, #628]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8003dcc:	ed93 7a00 	vldr	s14, [r3]
 8003dd0:	4b9f      	ldr	r3, [pc, #636]	; (8004050 <BALANCE_Speed_LinearControl+0x328>)
 8003dd2:	edd3 7a00 	vldr	s15, [r3]
 8003dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dda:	edc7 7a04 	vstr	s15, [r7, #16]

	    if ((SpeedLinearDemand * linearIntegral > 0) && (abs(SpeedLinear) > abs(SpeedLinearDemand * 1.5)))
 8003dde:	4b98      	ldr	r3, [pc, #608]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8003de0:	ed93 7a00 	vldr	s14, [r3]
 8003de4:	4b9b      	ldr	r3, [pc, #620]	; (8004054 <BALANCE_Speed_LinearControl+0x32c>)
 8003de6:	edd3 7a00 	vldr	s15, [r3]
 8003dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df6:	dd26      	ble.n	8003e46 <BALANCE_Speed_LinearControl+0x11e>
 8003df8:	4b95      	ldr	r3, [pc, #596]	; (8004050 <BALANCE_Speed_LinearControl+0x328>)
 8003dfa:	edd3 7a00 	vldr	s15, [r3]
 8003dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e02:	ee17 3a90 	vmov	r3, s15
 8003e06:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8003e0a:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8003e0e:	4b8c      	ldr	r3, [pc, #560]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc fb90 	bl	8000538 <__aeabi_f2d>
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	4b8e      	ldr	r3, [pc, #568]	; (8004058 <BALANCE_Speed_LinearControl+0x330>)
 8003e1e:	f7fc fbe3 	bl	80005e8 <__aeabi_dmul>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f7fc fe77 	bl	8000b1c <__aeabi_d2iz>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bfb8      	it	lt
 8003e34:	425b      	neglt	r3, r3
 8003e36:	429c      	cmp	r4, r3
 8003e38:	dd05      	ble.n	8003e46 <BALANCE_Speed_LinearControl+0x11e>
	    {
	        linearIntegralerrorCoun++;
 8003e3a:	4b88      	ldr	r3, [pc, #544]	; (800405c <BALANCE_Speed_LinearControl+0x334>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	4a86      	ldr	r2, [pc, #536]	; (800405c <BALANCE_Speed_LinearControl+0x334>)
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	e002      	b.n	8003e4c <BALANCE_Speed_LinearControl+0x124>
	    }
	    else
	    {
	        linearIntegralerrorCoun = 0;
 8003e46:	4b85      	ldr	r3, [pc, #532]	; (800405c <BALANCE_Speed_LinearControl+0x334>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
	    }
	    float diff = (linearError - linearLastError) / deltaTime;
 8003e4c:	4b84      	ldr	r3, [pc, #528]	; (8004060 <BALANCE_Speed_LinearControl+0x338>)
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e56:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e62:	edc7 7a03 	vstr	s15, [r7, #12]
	    linearLastError = linearError;
 8003e66:	4a7e      	ldr	r2, [pc, #504]	; (8004060 <BALANCE_Speed_LinearControl+0x338>)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6013      	str	r3, [r2, #0]
	    float RC = 1.0f / linearFcutDiff;
 8003e6c:	4b7d      	ldr	r3, [pc, #500]	; (8004064 <BALANCE_Speed_LinearControl+0x33c>)
 8003e6e:	ed93 7a00 	vldr	s14, [r3]
 8003e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e7a:	edc7 7a02 	vstr	s15, [r7, #8]
	    float kExp = deltaTime / (RC + deltaTime);
 8003e7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e82:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e8a:	edd7 6a05 	vldr	s13, [r7, #20]
 8003e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e92:	edc7 7a01 	vstr	s15, [r7, #4]
	    linearSmoothDiff = (1.0f - kExp) * linearSmoothDiff + kExp * diff;
 8003e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ea2:	4b71      	ldr	r3, [pc, #452]	; (8004068 <BALANCE_Speed_LinearControl+0x340>)
 8003ea4:	edd3 7a00 	vldr	s15, [r3]
 8003ea8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eac:	edd7 6a01 	vldr	s13, [r7, #4]
 8003eb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <BALANCE_Speed_LinearControl+0x340>)
 8003ebe:	edc3 7a00 	vstr	s15, [r3]

	    linearIntegral += linearError * deltaTime;
 8003ec2:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ece:	4b61      	ldr	r3, [pc, #388]	; (8004054 <BALANCE_Speed_LinearControl+0x32c>)
 8003ed0:	edd3 7a00 	vldr	s15, [r3]
 8003ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed8:	4b5e      	ldr	r3, [pc, #376]	; (8004054 <BALANCE_Speed_LinearControl+0x32c>)
 8003eda:	edc3 7a00 	vstr	s15, [r3]
	    if ((SpeedLinearDemand < minLinearValue) && (SpeedLinearDemand > -minLinearValue))
 8003ede:	4b58      	ldr	r3, [pc, #352]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8003ee0:	ed93 7a00 	vldr	s14, [r3]
 8003ee4:	4b61      	ldr	r3, [pc, #388]	; (800406c <BALANCE_Speed_LinearControl+0x344>)
 8003ee6:	edd3 7a00 	vldr	s15, [r3]
 8003eea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef2:	d510      	bpl.n	8003f16 <BALANCE_Speed_LinearControl+0x1ee>
 8003ef4:	4b5d      	ldr	r3, [pc, #372]	; (800406c <BALANCE_Speed_LinearControl+0x344>)
 8003ef6:	edd3 7a00 	vldr	s15, [r3]
 8003efa:	eeb1 7a67 	vneg.f32	s14, s15
 8003efe:	4b50      	ldr	r3, [pc, #320]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8003f00:	edd3 7a00 	vldr	s15, [r3]
 8003f04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0c:	d503      	bpl.n	8003f16 <BALANCE_Speed_LinearControl+0x1ee>
	    {
	        linearIntegral = 0;
 8003f0e:	4b51      	ldr	r3, [pc, #324]	; (8004054 <BALANCE_Speed_LinearControl+0x32c>)
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
	    }

	    if (linearIntegralerrorCoun > 3)
 8003f16:	4b51      	ldr	r3, [pc, #324]	; (800405c <BALANCE_Speed_LinearControl+0x334>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	dd03      	ble.n	8003f26 <BALANCE_Speed_LinearControl+0x1fe>
	    {
	        linearIntegral = 0;
 8003f1e:	4b4d      	ldr	r3, [pc, #308]	; (8004054 <BALANCE_Speed_LinearControl+0x32c>)
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
	    }
	    SpeedPID = linearError * SpeedPNew + linearIntegral * SpeedINew + linearSmoothDiff * SpeedDNew;
 8003f26:	4b52      	ldr	r3, [pc, #328]	; (8004070 <BALANCE_Speed_LinearControl+0x348>)
 8003f28:	ed93 7a00 	vldr	s14, [r3]
 8003f2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f34:	4b47      	ldr	r3, [pc, #284]	; (8004054 <BALANCE_Speed_LinearControl+0x32c>)
 8003f36:	edd3 6a00 	vldr	s13, [r3]
 8003f3a:	4b4e      	ldr	r3, [pc, #312]	; (8004074 <BALANCE_Speed_LinearControl+0x34c>)
 8003f3c:	edd3 7a00 	vldr	s15, [r3]
 8003f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f48:	4b47      	ldr	r3, [pc, #284]	; (8004068 <BALANCE_Speed_LinearControl+0x340>)
 8003f4a:	edd3 6a00 	vldr	s13, [r3]
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <BALANCE_Speed_LinearControl+0x350>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f5c:	4b47      	ldr	r3, [pc, #284]	; (800407c <BALANCE_Speed_LinearControl+0x354>)
 8003f5e:	edc3 7a00 	vstr	s15, [r3]

	    PlatformYDemand += ((SpeedPID / 1.0) - PlatformYDemand) * SpeedFilter;
 8003f62:	4b47      	ldr	r3, [pc, #284]	; (8004080 <BALANCE_Speed_LinearControl+0x358>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc fae6 	bl	8000538 <__aeabi_f2d>
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	460d      	mov	r5, r1
 8003f70:	4b42      	ldr	r3, [pc, #264]	; (800407c <BALANCE_Speed_LinearControl+0x354>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc fadf 	bl	8000538 <__aeabi_f2d>
 8003f7a:	4680      	mov	r8, r0
 8003f7c:	4689      	mov	r9, r1
 8003f7e:	4b40      	ldr	r3, [pc, #256]	; (8004080 <BALANCE_Speed_LinearControl+0x358>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fc fad8 	bl	8000538 <__aeabi_f2d>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	4649      	mov	r1, r9
 8003f90:	f7fc f972 	bl	8000278 <__aeabi_dsub>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4690      	mov	r8, r2
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	4b39      	ldr	r3, [pc, #228]	; (8004084 <BALANCE_Speed_LinearControl+0x35c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fc fac9 	bl	8000538 <__aeabi_f2d>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4640      	mov	r0, r8
 8003fac:	4649      	mov	r1, r9
 8003fae:	f7fc fb1b 	bl	80005e8 <__aeabi_dmul>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	4629      	mov	r1, r5
 8003fba:	f7fc f95f 	bl	800027c <__adddf3>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f7fc fdd1 	bl	8000b6c <__aeabi_d2f>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	; (8004080 <BALANCE_Speed_LinearControl+0x358>)
 8003fce:	6013      	str	r3, [r2, #0]

	    PlatformYDemand = (PlatformYDemand > PLATFORM_Y_MAX) ? PLATFORM_Y_MAX : PlatformYDemand;
 8003fd0:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <BALANCE_Speed_LinearControl+0x358>)
 8003fd2:	edd3 7a00 	vldr	s15, [r3]
 8003fd6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe2:	dd01      	ble.n	8003fe8 <BALANCE_Speed_LinearControl+0x2c0>
 8003fe4:	4b17      	ldr	r3, [pc, #92]	; (8004044 <BALANCE_Speed_LinearControl+0x31c>)
 8003fe6:	e001      	b.n	8003fec <BALANCE_Speed_LinearControl+0x2c4>
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <BALANCE_Speed_LinearControl+0x358>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a24      	ldr	r2, [pc, #144]	; (8004080 <BALANCE_Speed_LinearControl+0x358>)
 8003fee:	6013      	str	r3, [r2, #0]
	    PlatformYDemand = (PlatformYDemand < -PLATFORM_Y_MAX) ? -PLATFORM_Y_MAX : PlatformYDemand;
 8003ff0:	4b23      	ldr	r3, [pc, #140]	; (8004080 <BALANCE_Speed_LinearControl+0x358>)
 8003ff2:	edd3 7a00 	vldr	s15, [r3]
 8003ff6:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8003ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004002:	d501      	bpl.n	8004008 <BALANCE_Speed_LinearControl+0x2e0>
 8004004:	4b10      	ldr	r3, [pc, #64]	; (8004048 <BALANCE_Speed_LinearControl+0x320>)
 8004006:	e001      	b.n	800400c <BALANCE_Speed_LinearControl+0x2e4>
 8004008:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <BALANCE_Speed_LinearControl+0x358>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <BALANCE_Speed_LinearControl+0x358>)
 800400e:	6013      	str	r3, [r2, #0]
	else
	{
	    SpeedLinearDemand = 0;
	    linearIntegral = 0;
	}
}
 8004010:	e007      	b.n	8004022 <BALANCE_Speed_LinearControl+0x2fa>
	    SpeedLinearDemand = 0;
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <BALANCE_Speed_LinearControl+0x318>)
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
	    linearIntegral = 0;
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <BALANCE_Speed_LinearControl+0x32c>)
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800402c:	f3af 8000 	nop.w
 8004030:	00000000 	.word	0x00000000
 8004034:	412e8480 	.word	0x412e8480
 8004038:	200007bc 	.word	0x200007bc
 800403c:	200007c0 	.word	0x200007c0
 8004040:	2000098c 	.word	0x2000098c
 8004044:	40a00000 	.word	0x40a00000
 8004048:	c0a00000 	.word	0xc0a00000
 800404c:	20000948 	.word	0x20000948
 8004050:	200008cc 	.word	0x200008cc
 8004054:	200007b0 	.word	0x200007b0
 8004058:	3ff80000 	.word	0x3ff80000
 800405c:	200007c4 	.word	0x200007c4
 8004060:	200007b4 	.word	0x200007b4
 8004064:	2000002c 	.word	0x2000002c
 8004068:	200007b8 	.word	0x200007b8
 800406c:	20000030 	.word	0x20000030
 8004070:	20000010 	.word	0x20000010
 8004074:	20000014 	.word	0x20000014
 8004078:	20000018 	.word	0x20000018
 800407c:	200008a4 	.word	0x200008a4
 8004080:	2000079c 	.word	0x2000079c
 8004084:	20000028 	.word	0x20000028

08004088 <BALANCE_Position_Angular_Control>:
void BALANCE_Position_Angular_Control()
{
 8004088:	b5b0      	push	{r4, r5, r7, lr}
 800408a:	af00      	add	r7, sp, #0
	GyroZSpeed = eulerAngles.angle.yaw - GyroZPrevious;
 800408c:	4b44      	ldr	r3, [pc, #272]	; (80041a0 <BALANCE_Position_Angular_Control+0x118>)
 800408e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004092:	4b44      	ldr	r3, [pc, #272]	; (80041a4 <BALANCE_Position_Angular_Control+0x11c>)
 8004094:	edd3 7a00 	vldr	s15, [r3]
 8004098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800409c:	4b42      	ldr	r3, [pc, #264]	; (80041a8 <BALANCE_Position_Angular_Control+0x120>)
 800409e:	edc3 7a00 	vstr	s15, [r3]
	GyroZPrevious = eulerAngles.angle.yaw;
 80040a2:	4b3f      	ldr	r3, [pc, #252]	; (80041a0 <BALANCE_Position_Angular_Control+0x118>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	4a3f      	ldr	r2, [pc, #252]	; (80041a4 <BALANCE_Position_Angular_Control+0x11c>)
 80040a8:	6013      	str	r3, [r2, #0]
	if (BalanceActive)
 80040aa:	4b40      	ldr	r3, [pc, #256]	; (80041ac <BALANCE_Position_Angular_Control+0x124>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d03e      	beq.n	8004130 <BALANCE_Position_Angular_Control+0xa8>
	{
	    PositionAngularDemand -= Turn / 100.0;
 80040b2:	4b3f      	ldr	r3, [pc, #252]	; (80041b0 <BALANCE_Position_Angular_Control+0x128>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc fa3e 	bl	8000538 <__aeabi_f2d>
 80040bc:	4604      	mov	r4, r0
 80040be:	460d      	mov	r5, r1
 80040c0:	4b3c      	ldr	r3, [pc, #240]	; (80041b4 <BALANCE_Position_Angular_Control+0x12c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc fa37 	bl	8000538 <__aeabi_f2d>
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	4b3a      	ldr	r3, [pc, #232]	; (80041b8 <BALANCE_Position_Angular_Control+0x130>)
 80040d0:	f7fc fbb4 	bl	800083c <__aeabi_ddiv>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4620      	mov	r0, r4
 80040da:	4629      	mov	r1, r5
 80040dc:	f7fc f8cc 	bl	8000278 <__aeabi_dsub>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	f7fc fd40 	bl	8000b6c <__aeabi_d2f>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4a30      	ldr	r2, [pc, #192]	; (80041b0 <BALANCE_Position_Angular_Control+0x128>)
 80040f0:	6013      	str	r3, [r2, #0]

	    RotationPID = (eulerAngles.angle.yaw - PositionAngularDemand) * RotationP + GyroZSpeed * RotationD;
 80040f2:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <BALANCE_Position_Angular_Control+0x118>)
 80040f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80040f8:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <BALANCE_Position_Angular_Control+0x128>)
 80040fa:	edd3 7a00 	vldr	s15, [r3]
 80040fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004102:	4b2e      	ldr	r3, [pc, #184]	; (80041bc <BALANCE_Position_Angular_Control+0x134>)
 8004104:	edd3 7a00 	vldr	s15, [r3]
 8004108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800410c:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <BALANCE_Position_Angular_Control+0x120>)
 800410e:	edd3 6a00 	vldr	s13, [r3]
 8004112:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <BALANCE_Position_Angular_Control+0x138>)
 8004114:	edd3 7a00 	vldr	s15, [r3]
 8004118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800411c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004120:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <BALANCE_Position_Angular_Control+0x13c>)
 8004122:	edc3 7a00 	vstr	s15, [r3]
	    DutyTurn = RotationPID;
 8004126:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <BALANCE_Position_Angular_Control+0x13c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a27      	ldr	r2, [pc, #156]	; (80041c8 <BALANCE_Position_Angular_Control+0x140>)
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e007      	b.n	8004140 <BALANCE_Position_Angular_Control+0xb8>
	}
	else
	{
	    PositionAngularDemand = eulerAngles.angle.yaw;
 8004130:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <BALANCE_Position_Angular_Control+0x118>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <BALANCE_Position_Angular_Control+0x128>)
 8004136:	6013      	str	r3, [r2, #0]
	    DutyTurn = 0;
 8004138:	4b23      	ldr	r3, [pc, #140]	; (80041c8 <BALANCE_Position_Angular_Control+0x140>)
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
	}
	DutyTurn = (DutyTurn > DUTY_MAX_ANGULAR) ? DUTY_MAX_ANGULAR : DutyTurn;
 8004140:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <BALANCE_Position_Angular_Control+0x140>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7fc f9f7 	bl	8000538 <__aeabi_f2d>
 800414a:	a311      	add	r3, pc, #68	; (adr r3, 8004190 <BALANCE_Position_Angular_Control+0x108>)
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f7fc fcda 	bl	8000b08 <__aeabi_dcmpgt>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <BALANCE_Position_Angular_Control+0xd6>
 800415a:	4b1c      	ldr	r3, [pc, #112]	; (80041cc <BALANCE_Position_Angular_Control+0x144>)
 800415c:	e001      	b.n	8004162 <BALANCE_Position_Angular_Control+0xda>
 800415e:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <BALANCE_Position_Angular_Control+0x140>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <BALANCE_Position_Angular_Control+0x140>)
 8004164:	6013      	str	r3, [r2, #0]
	DutyTurn = (DutyTurn < -DUTY_MAX_ANGULAR) ? -DUTY_MAX_ANGULAR : DutyTurn;
 8004166:	4b18      	ldr	r3, [pc, #96]	; (80041c8 <BALANCE_Position_Angular_Control+0x140>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fc f9e4 	bl	8000538 <__aeabi_f2d>
 8004170:	a309      	add	r3, pc, #36	; (adr r3, 8004198 <BALANCE_Position_Angular_Control+0x110>)
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f7fc fca9 	bl	8000acc <__aeabi_dcmplt>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <BALANCE_Position_Angular_Control+0xfc>
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <BALANCE_Position_Angular_Control+0x148>)
 8004182:	e001      	b.n	8004188 <BALANCE_Position_Angular_Control+0x100>
 8004184:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <BALANCE_Position_Angular_Control+0x140>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a0f      	ldr	r2, [pc, #60]	; (80041c8 <BALANCE_Position_Angular_Control+0x140>)
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	bdb0      	pop	{r4, r5, r7, pc}
 8004190:	9999999a 	.word	0x9999999a
 8004194:	3fb99999 	.word	0x3fb99999
 8004198:	9999999a 	.word	0x9999999a
 800419c:	bfb99999 	.word	0xbfb99999
 80041a0:	2000087c 	.word	0x2000087c
 80041a4:	200008d4 	.word	0x200008d4
 80041a8:	20000a2c 	.word	0x20000a2c
 80041ac:	20000948 	.word	0x20000948
 80041b0:	20000a3c 	.word	0x20000a3c
 80041b4:	200007e0 	.word	0x200007e0
 80041b8:	40590000 	.word	0x40590000
 80041bc:	20000008 	.word	0x20000008
 80041c0:	2000000c 	.word	0x2000000c
 80041c4:	2000086c 	.word	0x2000086c
 80041c8:	200008bc 	.word	0x200008bc
 80041cc:	3dcccccd 	.word	0x3dcccccd
 80041d0:	bdcccccd 	.word	0xbdcccccd
 80041d4:	00000000 	.word	0x00000000

080041d8 <BALANCE_LOOP>:
void BALANCE_LOOP()
{
 80041d8:	b5b0      	push	{r4, r5, r7, lr}
 80041da:	af00      	add	r7, sp, #0
	GyroY = (eulerAngles.angle.pitch * 1) + PlatformYDemand + AngleCorrection - ParkingAngle;
 80041dc:	4b4e      	ldr	r3, [pc, #312]	; (8004318 <BALANCE_LOOP+0x140>)
 80041de:	ed93 7a01 	vldr	s14, [r3, #4]
 80041e2:	4b4e      	ldr	r3, [pc, #312]	; (800431c <BALANCE_LOOP+0x144>)
 80041e4:	edd3 7a00 	vldr	s15, [r3]
 80041e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041ec:	4b4c      	ldr	r3, [pc, #304]	; (8004320 <BALANCE_LOOP+0x148>)
 80041ee:	edd3 7a00 	vldr	s15, [r3]
 80041f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041f6:	4b4b      	ldr	r3, [pc, #300]	; (8004324 <BALANCE_LOOP+0x14c>)
 80041f8:	edd3 7a00 	vldr	s15, [r3]
 80041fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004200:	4b49      	ldr	r3, [pc, #292]	; (8004328 <BALANCE_LOOP+0x150>)
 8004202:	edc3 7a00 	vstr	s15, [r3]

	GyroYSpeed = GyroY - GyroYPrevious;
 8004206:	4b48      	ldr	r3, [pc, #288]	; (8004328 <BALANCE_LOOP+0x150>)
 8004208:	ed93 7a00 	vldr	s14, [r3]
 800420c:	4b47      	ldr	r3, [pc, #284]	; (800432c <BALANCE_LOOP+0x154>)
 800420e:	edd3 7a00 	vldr	s15, [r3]
 8004212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004216:	4b46      	ldr	r3, [pc, #280]	; (8004330 <BALANCE_LOOP+0x158>)
 8004218:	edc3 7a00 	vstr	s15, [r3]
	GyroYPrevious = GyroY;
 800421c:	4b42      	ldr	r3, [pc, #264]	; (8004328 <BALANCE_LOOP+0x150>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a42      	ldr	r2, [pc, #264]	; (800432c <BALANCE_LOOP+0x154>)
 8004222:	6013      	str	r3, [r2, #0]

	if (BalanceActive)
 8004224:	4b43      	ldr	r3, [pc, #268]	; (8004334 <BALANCE_LOOP+0x15c>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d05d      	beq.n	80042e8 <BALANCE_LOOP+0x110>
	{
	    BalancePID = -GyroY * (float)BalanceP - GyroYSpeed * (float)BalanceD;
 800422c:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <BALANCE_LOOP+0x150>)
 800422e:	edd3 7a00 	vldr	s15, [r3]
 8004232:	eeb1 7a67 	vneg.f32	s14, s15
 8004236:	4b40      	ldr	r3, [pc, #256]	; (8004338 <BALANCE_LOOP+0x160>)
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004240:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <BALANCE_LOOP+0x158>)
 8004242:	edd3 6a00 	vldr	s13, [r3]
 8004246:	4b3d      	ldr	r3, [pc, #244]	; (800433c <BALANCE_LOOP+0x164>)
 8004248:	edd3 7a00 	vldr	s15, [r3]
 800424c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004254:	4b3a      	ldr	r3, [pc, #232]	; (8004340 <BALANCE_LOOP+0x168>)
 8004256:	edc3 7a00 	vstr	s15, [r3]

	    DutyFront += BalancePID * 0.000001;
 800425a:	4b3a      	ldr	r3, [pc, #232]	; (8004344 <BALANCE_LOOP+0x16c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fc f96a 	bl	8000538 <__aeabi_f2d>
 8004264:	4604      	mov	r4, r0
 8004266:	460d      	mov	r5, r1
 8004268:	4b35      	ldr	r3, [pc, #212]	; (8004340 <BALANCE_LOOP+0x168>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc f963 	bl	8000538 <__aeabi_f2d>
 8004272:	a323      	add	r3, pc, #140	; (adr r3, 8004300 <BALANCE_LOOP+0x128>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f7fc f9b6 	bl	80005e8 <__aeabi_dmul>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4620      	mov	r0, r4
 8004282:	4629      	mov	r1, r5
 8004284:	f7fb fffa 	bl	800027c <__adddf3>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	f7fc fc6c 	bl	8000b6c <__aeabi_d2f>
 8004294:	4603      	mov	r3, r0
 8004296:	4a2b      	ldr	r2, [pc, #172]	; (8004344 <BALANCE_LOOP+0x16c>)
 8004298:	6013      	str	r3, [r2, #0]

	    DutyFront = (DutyFront > DUTY_MAX_LINEAR) ? DUTY_MAX_LINEAR : DutyFront;
 800429a:	4b2a      	ldr	r3, [pc, #168]	; (8004344 <BALANCE_LOOP+0x16c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fc f94a 	bl	8000538 <__aeabi_f2d>
 80042a4:	a318      	add	r3, pc, #96	; (adr r3, 8004308 <BALANCE_LOOP+0x130>)
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f7fc fc2d 	bl	8000b08 <__aeabi_dcmpgt>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <BALANCE_LOOP+0xe0>
 80042b4:	4b24      	ldr	r3, [pc, #144]	; (8004348 <BALANCE_LOOP+0x170>)
 80042b6:	e001      	b.n	80042bc <BALANCE_LOOP+0xe4>
 80042b8:	4b22      	ldr	r3, [pc, #136]	; (8004344 <BALANCE_LOOP+0x16c>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a21      	ldr	r2, [pc, #132]	; (8004344 <BALANCE_LOOP+0x16c>)
 80042be:	6013      	str	r3, [r2, #0]
	    DutyFront = (DutyFront < -DUTY_MAX_LINEAR) ? -DUTY_MAX_LINEAR : DutyFront;
 80042c0:	4b20      	ldr	r3, [pc, #128]	; (8004344 <BALANCE_LOOP+0x16c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fc f937 	bl	8000538 <__aeabi_f2d>
 80042ca:	a311      	add	r3, pc, #68	; (adr r3, 8004310 <BALANCE_LOOP+0x138>)
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f7fc fbfc 	bl	8000acc <__aeabi_dcmplt>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <BALANCE_LOOP+0x106>
 80042da:	4b1c      	ldr	r3, [pc, #112]	; (800434c <BALANCE_LOOP+0x174>)
 80042dc:	e001      	b.n	80042e2 <BALANCE_LOOP+0x10a>
 80042de:	4b19      	ldr	r3, [pc, #100]	; (8004344 <BALANCE_LOOP+0x16c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a18      	ldr	r2, [pc, #96]	; (8004344 <BALANCE_LOOP+0x16c>)
 80042e4:	6013      	str	r3, [r2, #0]
	else
	{
	    PlatformYDemand = 0;
	    DutyFront = 0;
	}
}
 80042e6:	e007      	b.n	80042f8 <BALANCE_LOOP+0x120>
	    PlatformYDemand = 0;
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <BALANCE_LOOP+0x144>)
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
	    DutyFront = 0;
 80042f0:	4b14      	ldr	r3, [pc, #80]	; (8004344 <BALANCE_LOOP+0x16c>)
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
}
 80042f8:	bf00      	nop
 80042fa:	bdb0      	pop	{r4, r5, r7, pc}
 80042fc:	f3af 8000 	nop.w
 8004300:	a0b5ed8d 	.word	0xa0b5ed8d
 8004304:	3eb0c6f7 	.word	0x3eb0c6f7
 8004308:	33333333 	.word	0x33333333
 800430c:	3fc33333 	.word	0x3fc33333
 8004310:	33333333 	.word	0x33333333
 8004314:	bfc33333 	.word	0xbfc33333
 8004318:	2000087c 	.word	0x2000087c
 800431c:	2000079c 	.word	0x2000079c
 8004320:	200007a4 	.word	0x200007a4
 8004324:	200008dc 	.word	0x200008dc
 8004328:	20000984 	.word	0x20000984
 800432c:	20000870 	.word	0x20000870
 8004330:	20000958 	.word	0x20000958
 8004334:	20000948 	.word	0x20000948
 8004338:	2000001c 	.word	0x2000001c
 800433c:	20000020 	.word	0x20000020
 8004340:	20000860 	.word	0x20000860
 8004344:	2000085c 	.word	0x2000085c
 8004348:	3e19999a 	.word	0x3e19999a
 800434c:	be19999a 	.word	0xbe19999a

08004350 <BALANCE_Result_Loop>:
void BALANCE_Result_Loop()
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
	ResultLeft += ((DutyFront + DutyTurn) - ResultLeft) * BalanceFilter;
 8004354:	4b55      	ldr	r3, [pc, #340]	; (80044ac <BALANCE_Result_Loop+0x15c>)
 8004356:	ed93 7a00 	vldr	s14, [r3]
 800435a:	4b55      	ldr	r3, [pc, #340]	; (80044b0 <BALANCE_Result_Loop+0x160>)
 800435c:	edd3 7a00 	vldr	s15, [r3]
 8004360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004364:	4b53      	ldr	r3, [pc, #332]	; (80044b4 <BALANCE_Result_Loop+0x164>)
 8004366:	edd3 7a00 	vldr	s15, [r3]
 800436a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800436e:	4b52      	ldr	r3, [pc, #328]	; (80044b8 <BALANCE_Result_Loop+0x168>)
 8004370:	edd3 7a00 	vldr	s15, [r3]
 8004374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004378:	4b4e      	ldr	r3, [pc, #312]	; (80044b4 <BALANCE_Result_Loop+0x164>)
 800437a:	edd3 7a00 	vldr	s15, [r3]
 800437e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004382:	4b4c      	ldr	r3, [pc, #304]	; (80044b4 <BALANCE_Result_Loop+0x164>)
 8004384:	edc3 7a00 	vstr	s15, [r3]
	ResultRight += ((DutyFront - DutyTurn) - ResultRight) * BalanceFilter;
 8004388:	4b48      	ldr	r3, [pc, #288]	; (80044ac <BALANCE_Result_Loop+0x15c>)
 800438a:	ed93 7a00 	vldr	s14, [r3]
 800438e:	4b48      	ldr	r3, [pc, #288]	; (80044b0 <BALANCE_Result_Loop+0x160>)
 8004390:	edd3 7a00 	vldr	s15, [r3]
 8004394:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004398:	4b48      	ldr	r3, [pc, #288]	; (80044bc <BALANCE_Result_Loop+0x16c>)
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043a2:	4b45      	ldr	r3, [pc, #276]	; (80044b8 <BALANCE_Result_Loop+0x168>)
 80043a4:	edd3 7a00 	vldr	s15, [r3]
 80043a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043ac:	4b43      	ldr	r3, [pc, #268]	; (80044bc <BALANCE_Result_Loop+0x16c>)
 80043ae:	edd3 7a00 	vldr	s15, [r3]
 80043b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <BALANCE_Result_Loop+0x16c>)
 80043b8:	edc3 7a00 	vstr	s15, [r3]

	SerialControlWheelsRequest.WheelLeft = ResultLeft;
 80043bc:	4b3d      	ldr	r3, [pc, #244]	; (80044b4 <BALANCE_Result_Loop+0x164>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b3f      	ldr	r3, [pc, #252]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 80043c2:	3306      	adds	r3, #6
 80043c4:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight = ResultRight;
 80043c6:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <BALANCE_Result_Loop+0x16c>)
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b3d      	ldr	r3, [pc, #244]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 80043cc:	330a      	adds	r3, #10
 80043ce:	601a      	str	r2, [r3, #0]

	SerialControlWheelsRequest.WheelLeft += RotationI * (BTFront);
 80043d0:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 80043d2:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80043d6:	4613      	mov	r3, r2
 80043d8:	461a      	mov	r2, r3
 80043da:	4b3a      	ldr	r3, [pc, #232]	; (80044c4 <BALANCE_Result_Loop+0x174>)
 80043dc:	ed93 7a00 	vldr	s14, [r3]
 80043e0:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <BALANCE_Result_Loop+0x178>)
 80043e2:	edd3 7a00 	vldr	s15, [r3]
 80043e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ea:	ee07 2a10 	vmov	s14, r2
 80043ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f2:	4b33      	ldr	r3, [pc, #204]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 80043f4:	3306      	adds	r3, #6
 80043f6:	ee17 2a90 	vmov	r2, s15
 80043fa:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight += RotationI * (BTFront);
 80043fc:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 80043fe:	f8d3 200a 	ldr.w	r2, [r3, #10]
 8004402:	4613      	mov	r3, r2
 8004404:	461a      	mov	r2, r3
 8004406:	4b2f      	ldr	r3, [pc, #188]	; (80044c4 <BALANCE_Result_Loop+0x174>)
 8004408:	ed93 7a00 	vldr	s14, [r3]
 800440c:	4b2e      	ldr	r3, [pc, #184]	; (80044c8 <BALANCE_Result_Loop+0x178>)
 800440e:	edd3 7a00 	vldr	s15, [r3]
 8004412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004416:	ee07 2a10 	vmov	s14, r2
 800441a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800441e:	4b28      	ldr	r3, [pc, #160]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 8004420:	330a      	adds	r3, #10
 8004422:	ee17 2a90 	vmov	r2, s15
 8004426:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelLeft += ManualDrive;
 8004428:	4b25      	ldr	r3, [pc, #148]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 800442a:	f8d3 2006 	ldr.w	r2, [r3, #6]
 800442e:	4613      	mov	r3, r2
 8004430:	461a      	mov	r2, r3
 8004432:	4b26      	ldr	r3, [pc, #152]	; (80044cc <BALANCE_Result_Loop+0x17c>)
 8004434:	edd3 7a00 	vldr	s15, [r3]
 8004438:	ee07 2a10 	vmov	s14, r2
 800443c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004440:	4b1f      	ldr	r3, [pc, #124]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 8004442:	3306      	adds	r3, #6
 8004444:	ee17 2a90 	vmov	r2, s15
 8004448:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight += ManualDrive;
 800444a:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 800444c:	f8d3 200a 	ldr.w	r2, [r3, #10]
 8004450:	4613      	mov	r3, r2
 8004452:	461a      	mov	r2, r3
 8004454:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <BALANCE_Result_Loop+0x17c>)
 8004456:	edd3 7a00 	vldr	s15, [r3]
 800445a:	ee07 2a10 	vmov	s14, r2
 800445e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004462:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 8004464:	330a      	adds	r3, #10
 8004466:	ee17 2a90 	vmov	r2, s15
 800446a:	601a      	str	r2, [r3, #0]

	if (eulerAngles.angle.pitch + AngleCorrection > 20)
 800446c:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <BALANCE_Result_Loop+0x180>)
 800446e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004472:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <BALANCE_Result_Loop+0x184>)
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800447c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004488:	dc00      	bgt.n	800448c <BALANCE_Result_Loop+0x13c>
	{
	    SerialControlWheelsRequest.WheelLeft = 0;
	    SerialControlWheelsRequest.WheelRight = 0;
	}
}
 800448a:	e009      	b.n	80044a0 <BALANCE_Result_Loop+0x150>
	    SerialControlWheelsRequest.WheelLeft = 0;
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 800448e:	3306      	adds	r3, #6
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
	    SerialControlWheelsRequest.WheelRight = 0;
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <BALANCE_Result_Loop+0x170>)
 8004498:	330a      	adds	r3, #10
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	2000085c 	.word	0x2000085c
 80044b0:	200008bc 	.word	0x200008bc
 80044b4:	20000918 	.word	0x20000918
 80044b8:	20000024 	.word	0x20000024
 80044bc:	200009dc 	.word	0x200009dc
 80044c0:	200008ac 	.word	0x200008ac
 80044c4:	200007ac 	.word	0x200007ac
 80044c8:	200007d4 	.word	0x200007d4
 80044cc:	200007a8 	.word	0x200007a8
 80044d0:	2000087c 	.word	0x2000087c
 80044d4:	200007a4 	.word	0x200007a4

080044d8 <Interpolation>:
float Interpolation(float Value, float Min, float Max)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	ed87 0a03 	vstr	s0, [r7, #12]
 80044e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80044e6:	ed87 1a01 	vstr	s2, [r7, #4]
    float Result = (Value - Min) / (Max - Min);
 80044ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80044ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80044f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80044f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80044fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80044fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004506:	edc7 7a05 	vstr	s15, [r7, #20]
    if (Result > 1)
 800450a:	edd7 7a05 	vldr	s15, [r7, #20]
 800450e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451a:	dd02      	ble.n	8004522 <Interpolation+0x4a>
    {
        return 1;
 800451c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004520:	e00a      	b.n	8004538 <Interpolation+0x60>
    }
    if (Result < 0)
 8004522:	edd7 7a05 	vldr	s15, [r7, #20]
 8004526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800452a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452e:	d502      	bpl.n	8004536 <Interpolation+0x5e>
    {
        return 0;
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e000      	b.n	8004538 <Interpolation+0x60>
    }
    return Result;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	ee07 3a90 	vmov	s15, r3
}
 800453c:	eeb0 0a67 	vmov.f32	s0, s15
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <ADC_Select_CH>:
void ADC_Select_CH(uint8_t ChanelNum)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 8004556:	f107 0308 	add.w	r3, r7, #8
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	609a      	str	r2, [r3, #8]
 8004562:	60da      	str	r2, [r3, #12]

	switch(ChanelNum)
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	2b07      	cmp	r3, #7
 8004568:	d82a      	bhi.n	80045c0 <ADC_Select_CH+0x74>
 800456a:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <ADC_Select_CH+0x24>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004591 	.word	0x08004591
 8004574:	08004597 	.word	0x08004597
 8004578:	0800459d 	.word	0x0800459d
 800457c:	080045a3 	.word	0x080045a3
 8004580:	080045a9 	.word	0x080045a9
 8004584:	080045af 	.word	0x080045af
 8004588:	080045b5 	.word	0x080045b5
 800458c:	080045bb 	.word	0x080045bb
	{
	case 0:
		sConfig.Channel = ADC_CHANNEL_0;
 8004590:	2300      	movs	r3, #0
 8004592:	60bb      	str	r3, [r7, #8]
		break;
 8004594:	e014      	b.n	80045c0 <ADC_Select_CH+0x74>
	case 1:
		sConfig.Channel = ADC_CHANNEL_1;
 8004596:	2301      	movs	r3, #1
 8004598:	60bb      	str	r3, [r7, #8]
		break;
 800459a:	e011      	b.n	80045c0 <ADC_Select_CH+0x74>
	case 2:
		sConfig.Channel = ADC_CHANNEL_2;
 800459c:	2302      	movs	r3, #2
 800459e:	60bb      	str	r3, [r7, #8]
		break;
 80045a0:	e00e      	b.n	80045c0 <ADC_Select_CH+0x74>
	case 3:
		sConfig.Channel = ADC_CHANNEL_8;
 80045a2:	2308      	movs	r3, #8
 80045a4:	60bb      	str	r3, [r7, #8]
		break;
 80045a6:	e00b      	b.n	80045c0 <ADC_Select_CH+0x74>
	case 4:
		sConfig.Channel = ADC_CHANNEL_9;
 80045a8:	2309      	movs	r3, #9
 80045aa:	60bb      	str	r3, [r7, #8]
		break;
 80045ac:	e008      	b.n	80045c0 <ADC_Select_CH+0x74>
	case 5:
		sConfig.Channel = ADC_CHANNEL_10;
 80045ae:	230a      	movs	r3, #10
 80045b0:	60bb      	str	r3, [r7, #8]
		break;
 80045b2:	e005      	b.n	80045c0 <ADC_Select_CH+0x74>
	case 6:
		sConfig.Channel = ADC_CHANNEL_11;
 80045b4:	230b      	movs	r3, #11
 80045b6:	60bb      	str	r3, [r7, #8]
		break;
 80045b8:	e002      	b.n	80045c0 <ADC_Select_CH+0x74>
	case 7:
		sConfig.Channel = ADC_CHANNEL_12;
 80045ba:	230c      	movs	r3, #12
 80045bc:	60bb      	str	r3, [r7, #8]
		break;
 80045be:	bf00      	nop
	}

	sConfig.Rank = 1;
 80045c0:	2301      	movs	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045c8:	f107 0308 	add.w	r3, r7, #8
 80045cc:	4619      	mov	r1, r3
 80045ce:	4810      	ldr	r0, [pc, #64]	; (8004610 <ADC_Select_CH+0xc4>)
 80045d0:	f001 ff00 	bl	80063d4 <HAL_ADC_ConfigChannel>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <ADC_Select_CH+0x92>
	{
		Error_Handler();
 80045da:	f000 fddb 	bl	8005194 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 80045de:	480c      	ldr	r0, [pc, #48]	; (8004610 <ADC_Select_CH+0xc4>)
 80045e0:	f001 fd5a 	bl	8006098 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80045e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80045e8:	4809      	ldr	r0, [pc, #36]	; (8004610 <ADC_Select_CH+0xc4>)
 80045ea:	f001 fe5a 	bl	80062a2 <HAL_ADC_PollForConversion>
	ADC_VAL[ChanelNum] = HAL_ADC_GetValue(&hadc1);
 80045ee:	4808      	ldr	r0, [pc, #32]	; (8004610 <ADC_Select_CH+0xc4>)
 80045f0:	f001 fee2 	bl	80063b8 <HAL_ADC_GetValue>
 80045f4:	4602      	mov	r2, r0
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	b291      	uxth	r1, r2
 80045fa:	4a06      	ldr	r2, [pc, #24]	; (8004614 <ADC_Select_CH+0xc8>)
 80045fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	HAL_ADC_Stop(&hadc1);
 8004600:	4803      	ldr	r0, [pc, #12]	; (8004610 <ADC_Select_CH+0xc4>)
 8004602:	f001 fe1b 	bl	800623c <HAL_ADC_Stop>

}
 8004606:	bf00      	nop
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	2000080c 	.word	0x2000080c
 8004614:	200007e4 	.word	0x200007e4

08004618 <ADC_Update>:

void ADC_Update()
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
	for (int i = 0; i < ADC_CH_COUNT; i++)
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	e007      	b.n	8004634 <ADC_Update+0x1c>
	{
		ADC_Select_CH(i);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff8f 	bl	800454c <ADC_Select_CH>
	for (int i = 0; i < ADC_CH_COUNT; i++)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3301      	adds	r3, #1
 8004632:	607b      	str	r3, [r7, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b07      	cmp	r3, #7
 8004638:	ddf4      	ble.n	8004624 <ADC_Update+0xc>
	}

	dADC0 = ADC_VAL[0];
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <ADC_Update+0x6c>)
 800463c:	881a      	ldrh	r2, [r3, #0]
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <ADC_Update+0x70>)
 8004640:	801a      	strh	r2, [r3, #0]
	dADC1 = ADC_VAL[1];
 8004642:	4b10      	ldr	r3, [pc, #64]	; (8004684 <ADC_Update+0x6c>)
 8004644:	885a      	ldrh	r2, [r3, #2]
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <ADC_Update+0x74>)
 8004648:	801a      	strh	r2, [r3, #0]
	dADC2 = ADC_VAL[2];
 800464a:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <ADC_Update+0x6c>)
 800464c:	889a      	ldrh	r2, [r3, #4]
 800464e:	4b10      	ldr	r3, [pc, #64]	; (8004690 <ADC_Update+0x78>)
 8004650:	801a      	strh	r2, [r3, #0]
	dADC3 = ADC_VAL[3];
 8004652:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <ADC_Update+0x6c>)
 8004654:	88da      	ldrh	r2, [r3, #6]
 8004656:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <ADC_Update+0x7c>)
 8004658:	801a      	strh	r2, [r3, #0]
	dADC4 = ADC_VAL[4];
 800465a:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <ADC_Update+0x6c>)
 800465c:	891a      	ldrh	r2, [r3, #8]
 800465e:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <ADC_Update+0x80>)
 8004660:	801a      	strh	r2, [r3, #0]
	dADC5 = ADC_VAL[5];
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <ADC_Update+0x6c>)
 8004664:	895a      	ldrh	r2, [r3, #10]
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <ADC_Update+0x84>)
 8004668:	801a      	strh	r2, [r3, #0]
	dADC6 = ADC_VAL[6];
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <ADC_Update+0x6c>)
 800466c:	899a      	ldrh	r2, [r3, #12]
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <ADC_Update+0x88>)
 8004670:	801a      	strh	r2, [r3, #0]
	dADC7 = ADC_VAL[7];
 8004672:	4b04      	ldr	r3, [pc, #16]	; (8004684 <ADC_Update+0x6c>)
 8004674:	89da      	ldrh	r2, [r3, #14]
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <ADC_Update+0x8c>)
 8004678:	801a      	strh	r2, [r3, #0]

}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200007e4 	.word	0x200007e4
 8004688:	20000928 	.word	0x20000928
 800468c:	20000970 	.word	0x20000970
 8004690:	200009f8 	.word	0x200009f8
 8004694:	20000874 	.word	0x20000874
 8004698:	2000096e 	.word	0x2000096e
 800469c:	200009da 	.word	0x200009da
 80046a0:	20000980 	.word	0x20000980
 80046a4:	20000888 	.word	0x20000888

080046a8 <WS2812_PIXEL_RGB_TO_BUF_DMA>:
//-----Animation3
uint8_t Pos1=0;
uint8_t Pos2=LED_COUNT-1;
uint8_t Fl_Top1 = 0;
uint8_t Fl_Top2 = 1;
void WS2812_PIXEL_RGB_TO_BUF_DMA(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX){
 80046a8:	b490      	push	{r4, r7}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4604      	mov	r4, r0
 80046b0:	4608      	mov	r0, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	461a      	mov	r2, r3
 80046b6:	4623      	mov	r3, r4
 80046b8:	71fb      	strb	r3, [r7, #7]
 80046ba:	4603      	mov	r3, r0
 80046bc:	71bb      	strb	r3, [r7, #6]
 80046be:	460b      	mov	r3, r1
 80046c0:	717b      	strb	r3, [r7, #5]
 80046c2:	4613      	mov	r3, r2
 80046c4:	807b      	strh	r3, [r7, #2]
  for(uint8_t i=0;i<8;i++){
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
 80046ca:	e078      	b.n	80047be <WS2812_PIXEL_RGB_TO_BUF_DMA+0x116>
    if (BitIsSet(Rpixel,(7-i)) == 1){
 80046cc:	79fa      	ldrb	r2, [r7, #7]
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	f1c3 0307 	rsb	r3, r3, #7
 80046d4:	fa42 f303 	asr.w	r3, r2, r3
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00e      	beq.n	8004700 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x58>
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 80046e2:	887a      	ldrh	r2, [r7, #2]
 80046e4:	4613      	mov	r3, r2
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	4413      	add	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	4413      	add	r3, r2
 80046f4:	3308      	adds	r3, #8
 80046f6:	4a36      	ldr	r2, [pc, #216]	; (80047d0 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 80046f8:	2141      	movs	r1, #65	; 0x41
 80046fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80046fe:	e00d      	b.n	800471c <WS2812_PIXEL_RGB_TO_BUF_DMA+0x74>
    }else{
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 8004700:	887a      	ldrh	r2, [r7, #2]
 8004702:	4613      	mov	r3, r2
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	4413      	add	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	4413      	add	r3, r2
 8004712:	3308      	adds	r3, #8
 8004714:	4a2e      	ldr	r2, [pc, #184]	; (80047d0 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8004716:	211a      	movs	r1, #26
 8004718:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1){
 800471c:	79ba      	ldrb	r2, [r7, #6]
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	f1c3 0307 	rsb	r3, r3, #7
 8004724:	fa42 f303 	asr.w	r3, r2, r3
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00d      	beq.n	800474e <WS2812_PIXEL_RGB_TO_BUF_DMA+0xa6>
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	4613      	mov	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	4413      	add	r3, r2
 8004744:	4a22      	ldr	r2, [pc, #136]	; (80047d0 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8004746:	2141      	movs	r1, #65	; 0x41
 8004748:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800474c:	e00c      	b.n	8004768 <WS2812_PIXEL_RGB_TO_BUF_DMA+0xc0>
    }else{
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 800474e:	887a      	ldrh	r2, [r7, #2]
 8004750:	4613      	mov	r3, r2
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4413      	add	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	4413      	add	r3, r2
 8004760:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8004762:	211a      	movs	r1, #26
 8004764:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1){
 8004768:	797a      	ldrb	r2, [r7, #5]
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	f1c3 0307 	rsb	r3, r3, #7
 8004770:	fa42 f303 	asr.w	r3, r2, r3
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <WS2812_PIXEL_RGB_TO_BUF_DMA+0xf4>
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 800477e:	887a      	ldrh	r2, [r7, #2]
 8004780:	4613      	mov	r3, r2
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	4413      	add	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	4413      	add	r3, r2
 8004790:	3310      	adds	r3, #16
 8004792:	4a0f      	ldr	r2, [pc, #60]	; (80047d0 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8004794:	2141      	movs	r1, #65	; 0x41
 8004796:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800479a:	e00d      	b.n	80047b8 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x110>
    }else{
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 800479c:	887a      	ldrh	r2, [r7, #2]
 800479e:	4613      	mov	r3, r2
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	4413      	add	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	4413      	add	r3, r2
 80047ae:	3310      	adds	r3, #16
 80047b0:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 80047b2:	211a      	movs	r1, #26
 80047b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(uint8_t i=0;i<8;i++){
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	3301      	adds	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	2b07      	cmp	r3, #7
 80047c2:	d983      	bls.n	80046cc <WS2812_PIXEL_RGB_TO_BUF_DMA+0x24>
    }
  }
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc90      	pop	{r4, r7}
 80047ce:	4770      	bx	lr
 80047d0:	200000d8 	.word	0x200000d8

080047d4 <WS2812_LIGHT>:
void WS2812_LIGHT(void){
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 80047d8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80047dc:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <WS2812_LIGHT+0x40>)
 80047de:	2100      	movs	r1, #0
 80047e0:	480d      	ldr	r0, [pc, #52]	; (8004818 <WS2812_LIGHT+0x44>)
 80047e2:	f004 f9d5 	bl	8008b90 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 80047e6:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <WS2812_LIGHT+0x40>)
 80047ec:	2104      	movs	r1, #4
 80047ee:	480a      	ldr	r0, [pc, #40]	; (8004818 <WS2812_LIGHT+0x44>)
 80047f0:	f004 f9ce 	bl	8008b90 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 80047f4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80047f8:	4a06      	ldr	r2, [pc, #24]	; (8004814 <WS2812_LIGHT+0x40>)
 80047fa:	2108      	movs	r1, #8
 80047fc:	4806      	ldr	r0, [pc, #24]	; (8004818 <WS2812_LIGHT+0x44>)
 80047fe:	f004 f9c7 	bl	8008b90 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 8004802:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8004806:	4a03      	ldr	r2, [pc, #12]	; (8004814 <WS2812_LIGHT+0x40>)
 8004808:	2104      	movs	r1, #4
 800480a:	4804      	ldr	r0, [pc, #16]	; (800481c <WS2812_LIGHT+0x48>)
 800480c:	f004 f9c0 	bl	8008b90 <HAL_TIM_PWM_Start_DMA>
}
 8004810:	bf00      	nop
 8004812:	bd80      	pop	{r7, pc}
 8004814:	200000d8 	.word	0x200000d8
 8004818:	20000c68 	.word	0x20000c68
 800481c:	20000b60 	.word	0x20000b60

08004820 <WS2812_CLEAR>:
void WS2812_CLEAR(void){
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < LED_COUNT; ++i){WS2812_PIXEL_RGB_TO_BUF_DMA(0, 0, 0, i);}
 8004826:	2300      	movs	r3, #0
 8004828:	71fb      	strb	r3, [r7, #7]
 800482a:	e009      	b.n	8004840 <WS2812_CLEAR+0x20>
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	b29b      	uxth	r3, r3
 8004830:	2200      	movs	r2, #0
 8004832:	2100      	movs	r1, #0
 8004834:	2000      	movs	r0, #0
 8004836:	f7ff ff37 	bl	80046a8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	3301      	adds	r3, #1
 800483e:	71fb      	strb	r3, [r7, #7]
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	d9f2      	bls.n	800482c <WS2812_CLEAR+0xc>
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <WS2812_Init>:
void WS2812_Init(void){
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
	for (uint16_t i = DELAY_LEN; i < ARRAY_LEN; i++)BUF_DMA[i] = LOW;
 8004856:	2330      	movs	r3, #48	; 0x30
 8004858:	80fb      	strh	r3, [r7, #6]
 800485a:	e007      	b.n	800486c <WS2812_Init+0x1c>
 800485c:	88fb      	ldrh	r3, [r7, #6]
 800485e:	4a0b      	ldr	r2, [pc, #44]	; (800488c <WS2812_Init+0x3c>)
 8004860:	211a      	movs	r1, #26
 8004862:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	3301      	adds	r3, #1
 800486a:	80fb      	strh	r3, [r7, #6]
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004872:	d3f3      	bcc.n	800485c <WS2812_Init+0xc>
	WS2812_CLEAR();
 8004874:	f7ff ffd4 	bl	8004820 <WS2812_CLEAR>
	WS2812_LIGHT();
 8004878:	f7ff ffac 	bl	80047d4 <WS2812_LIGHT>
	HAL_Delay(1);
 800487c:	2001      	movs	r0, #1
 800487e:	f001 fba3 	bl	8005fc8 <HAL_Delay>
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	200000d8 	.word	0x200000d8

08004890 <WS2812_ANIMATION_1>:
//-------------Three LED up and down
void WS2812_ANIMATION_1(void){
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
	WS2812_CLEAR();
 8004894:	f7ff ffc4 	bl	8004820 <WS2812_CLEAR>
	WS2812_PIXEL_RGB_TO_BUF_DMA(MAX_LIGHT, 0, 0, Pos);
 8004898:	4b31      	ldr	r3, [pc, #196]	; (8004960 <WS2812_ANIMATION_1+0xd0>)
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b2d8      	uxtb	r0, r3
 800489e:	4b31      	ldr	r3, [pc, #196]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 80048a0:	f993 3000 	ldrsb.w	r3, [r3]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2200      	movs	r2, #0
 80048a8:	2100      	movs	r1, #0
 80048aa:	f7ff fefd 	bl	80046a8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
    if(Pos<(LED_COUNT-1)){WS2812_PIXEL_RGB_TO_BUF_DMA(0, 0, MAX_LIGHT, Pos+1);}
 80048ae:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 80048b0:	f993 3000 	ldrsb.w	r3, [r3]
 80048b4:	2b0e      	cmp	r3, #14
 80048b6:	dc0c      	bgt.n	80048d2 <WS2812_ANIMATION_1+0x42>
 80048b8:	4b29      	ldr	r3, [pc, #164]	; (8004960 <WS2812_ANIMATION_1+0xd0>)
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	4b29      	ldr	r3, [pc, #164]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 80048c0:	f993 3000 	ldrsb.w	r3, [r3]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3301      	adds	r3, #1
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2100      	movs	r1, #0
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7ff feeb 	bl	80046a8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
    if(Pos<(LED_COUNT-2)){WS2812_PIXEL_RGB_TO_BUF_DMA(0, MAX_LIGHT, 0, Pos+2);}
 80048d2:	4b24      	ldr	r3, [pc, #144]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 80048d4:	f993 3000 	ldrsb.w	r3, [r3]
 80048d8:	2b0d      	cmp	r3, #13
 80048da:	dc0c      	bgt.n	80048f6 <WS2812_ANIMATION_1+0x66>
 80048dc:	4b20      	ldr	r3, [pc, #128]	; (8004960 <WS2812_ANIMATION_1+0xd0>)
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b2d9      	uxtb	r1, r3
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 80048e4:	f993 3000 	ldrsb.w	r3, [r3]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3302      	adds	r3, #2
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2200      	movs	r2, #0
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7ff fed9 	bl	80046a8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
	WS2812_LIGHT();
 80048f6:	f7ff ff6d 	bl	80047d4 <WS2812_LIGHT>
	if(Fl_Top==0){
 80048fa:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <WS2812_ANIMATION_1+0xd8>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d114      	bne.n	800492c <WS2812_ANIMATION_1+0x9c>
		Pos++;
 8004902:	4b18      	ldr	r3, [pc, #96]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 8004904:	f993 3000 	ldrsb.w	r3, [r3]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	3301      	adds	r3, #1
 800490c:	b2db      	uxtb	r3, r3
 800490e:	b25a      	sxtb	r2, r3
 8004910:	4b14      	ldr	r3, [pc, #80]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 8004912:	701a      	strb	r2, [r3, #0]
		if(Pos==LED_COUNT-2){Fl_Top=1;Pos=LED_COUNT-4;}
 8004914:	4b13      	ldr	r3, [pc, #76]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 8004916:	f993 3000 	ldrsb.w	r3, [r3]
 800491a:	2b0e      	cmp	r3, #14
 800491c:	d11e      	bne.n	800495c <WS2812_ANIMATION_1+0xcc>
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <WS2812_ANIMATION_1+0xd8>)
 8004920:	2201      	movs	r2, #1
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 8004926:	220c      	movs	r2, #12
 8004928:	701a      	strb	r2, [r3, #0]
	}else if (Fl_Top==1) {
		Pos--;
		if(Pos==0){Fl_Top=0;Pos=0;}
	}
}
 800492a:	e017      	b.n	800495c <WS2812_ANIMATION_1+0xcc>
	}else if (Fl_Top==1) {
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <WS2812_ANIMATION_1+0xd8>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d113      	bne.n	800495c <WS2812_ANIMATION_1+0xcc>
		Pos--;
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 8004936:	f993 3000 	ldrsb.w	r3, [r3]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b2db      	uxtb	r3, r3
 8004940:	b25a      	sxtb	r2, r3
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 8004944:	701a      	strb	r2, [r3, #0]
		if(Pos==0){Fl_Top=0;Pos=0;}
 8004946:	4b07      	ldr	r3, [pc, #28]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 8004948:	f993 3000 	ldrsb.w	r3, [r3]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d105      	bne.n	800495c <WS2812_ANIMATION_1+0xcc>
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <WS2812_ANIMATION_1+0xd8>)
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	4b03      	ldr	r3, [pc, #12]	; (8004964 <WS2812_ANIMATION_1+0xd4>)
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
}
 800495c:	bf00      	nop
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000000 	.word	0x20000000
 8004964:	200007f6 	.word	0x200007f6
 8004968:	200007f7 	.word	0x200007f7

0800496c <WS2812_ANIMATION_2>:
void WS2812_ANIMATION_2(void) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < LED_COUNT; i++) {
 8004972:	2300      	movs	r3, #0
 8004974:	71fb      	strb	r3, [r7, #7]
 8004976:	e030      	b.n	80049da <WS2812_ANIMATION_2+0x6e>
		WS2812_PIXEL_RGB_TO_BUF_DMA(ColorRed * BRIGHTNESS / 100,	ColorGreen * BRIGHTNESS / 100, ColorBlue * BRIGHTNESS / 100, i);
 8004978:	4b4a      	ldr	r3, [pc, #296]	; (8004aa4 <WS2812_ANIMATION_2+0x138>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	4b4a      	ldr	r3, [pc, #296]	; (8004aa8 <WS2812_ANIMATION_2+0x13c>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	fb03 f302 	mul.w	r3, r3, r2
 8004986:	4a49      	ldr	r2, [pc, #292]	; (8004aac <WS2812_ANIMATION_2+0x140>)
 8004988:	fb82 1203 	smull	r1, r2, r2, r3
 800498c:	1152      	asrs	r2, r2, #5
 800498e:	17db      	asrs	r3, r3, #31
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	b2d8      	uxtb	r0, r3
 8004994:	4b46      	ldr	r3, [pc, #280]	; (8004ab0 <WS2812_ANIMATION_2+0x144>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	4b43      	ldr	r3, [pc, #268]	; (8004aa8 <WS2812_ANIMATION_2+0x13c>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	fb03 f302 	mul.w	r3, r3, r2
 80049a2:	4a42      	ldr	r2, [pc, #264]	; (8004aac <WS2812_ANIMATION_2+0x140>)
 80049a4:	fb82 1203 	smull	r1, r2, r2, r3
 80049a8:	1152      	asrs	r2, r2, #5
 80049aa:	17db      	asrs	r3, r3, #31
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	b2d9      	uxtb	r1, r3
 80049b0:	4b40      	ldr	r3, [pc, #256]	; (8004ab4 <WS2812_ANIMATION_2+0x148>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	4b3c      	ldr	r3, [pc, #240]	; (8004aa8 <WS2812_ANIMATION_2+0x13c>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	fb03 f302 	mul.w	r3, r3, r2
 80049be:	4a3b      	ldr	r2, [pc, #236]	; (8004aac <WS2812_ANIMATION_2+0x140>)
 80049c0:	fb82 c203 	smull	ip, r2, r2, r3
 80049c4:	1152      	asrs	r2, r2, #5
 80049c6:	17db      	asrs	r3, r3, #31
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f7ff fe6a 	bl	80046a8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
	for (uint8_t i = 0; i < LED_COUNT; i++) {
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	3301      	adds	r3, #1
 80049d8:	71fb      	strb	r3, [r7, #7]
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	2b0f      	cmp	r3, #15
 80049de:	d9cb      	bls.n	8004978 <WS2812_ANIMATION_2+0xc>
	}
	WS2812_LIGHT();
 80049e0:	f7ff fef8 	bl	80047d4 <WS2812_LIGHT>
	if (FL_BRIGHTNESS == 0) {
 80049e4:	4b34      	ldr	r3, [pc, #208]	; (8004ab8 <WS2812_ANIMATION_2+0x14c>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d110      	bne.n	8004a0e <WS2812_ANIMATION_2+0xa2>
		BRIGHTNESS++;
 80049ec:	4b2e      	ldr	r3, [pc, #184]	; (8004aa8 <WS2812_ANIMATION_2+0x13c>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	4b2c      	ldr	r3, [pc, #176]	; (8004aa8 <WS2812_ANIMATION_2+0x13c>)
 80049f6:	701a      	strb	r2, [r3, #0]
	if(BRIGHTNESS == MAX_BRIGHTNESS) {
 80049f8:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <WS2812_ANIMATION_2+0x13c>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b32      	cmp	r3, #50	; 0x32
 80049fe:	d14d      	bne.n	8004a9c <WS2812_ANIMATION_2+0x130>
		FL_BRIGHTNESS=1;
 8004a00:	4b2d      	ldr	r3, [pc, #180]	; (8004ab8 <WS2812_ANIMATION_2+0x14c>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
		BRIGHTNESS=MAX_BRIGHTNESS;
 8004a06:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <WS2812_ANIMATION_2+0x13c>)
 8004a08:	2232      	movs	r2, #50	; 0x32
 8004a0a:	701a      	strb	r2, [r3, #0]
		ColorRed = rand()%255;
		ColorGreen = rand()%255;
		ColorBlue = rand()%255;
	}
}
}
 8004a0c:	e046      	b.n	8004a9c <WS2812_ANIMATION_2+0x130>
} else if (FL_BRIGHTNESS == 1) {
 8004a0e:	4b2a      	ldr	r3, [pc, #168]	; (8004ab8 <WS2812_ANIMATION_2+0x14c>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d142      	bne.n	8004a9c <WS2812_ANIMATION_2+0x130>
	BRIGHTNESS--;
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <WS2812_ANIMATION_2+0x13c>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <WS2812_ANIMATION_2+0x13c>)
 8004a20:	701a      	strb	r2, [r3, #0]
	if (BRIGHTNESS == 0) {
 8004a22:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <WS2812_ANIMATION_2+0x13c>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d138      	bne.n	8004a9c <WS2812_ANIMATION_2+0x130>
		FL_BRIGHTNESS = 0;
 8004a2a:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <WS2812_ANIMATION_2+0x14c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
		BRIGHTNESS = 0;
 8004a30:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <WS2812_ANIMATION_2+0x13c>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
		ColorRed = rand()%255;
 8004a36:	f007 fa9b 	bl	800bf70 <rand>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <WS2812_ANIMATION_2+0x150>)
 8004a3e:	fb83 1302 	smull	r1, r3, r3, r2
 8004a42:	4413      	add	r3, r2
 8004a44:	11d9      	asrs	r1, r3, #7
 8004a46:	17d3      	asrs	r3, r2, #31
 8004a48:	1ac9      	subs	r1, r1, r3
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	1a5b      	subs	r3, r3, r1
 8004a50:	1ad1      	subs	r1, r2, r3
 8004a52:	b2ca      	uxtb	r2, r1
 8004a54:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <WS2812_ANIMATION_2+0x138>)
 8004a56:	701a      	strb	r2, [r3, #0]
		ColorGreen = rand()%255;
 8004a58:	f007 fa8a 	bl	800bf70 <rand>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b17      	ldr	r3, [pc, #92]	; (8004abc <WS2812_ANIMATION_2+0x150>)
 8004a60:	fb83 1302 	smull	r1, r3, r3, r2
 8004a64:	4413      	add	r3, r2
 8004a66:	11d9      	asrs	r1, r3, #7
 8004a68:	17d3      	asrs	r3, r2, #31
 8004a6a:	1ac9      	subs	r1, r1, r3
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	1a5b      	subs	r3, r3, r1
 8004a72:	1ad1      	subs	r1, r2, r3
 8004a74:	b2ca      	uxtb	r2, r1
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <WS2812_ANIMATION_2+0x144>)
 8004a78:	701a      	strb	r2, [r3, #0]
		ColorBlue = rand()%255;
 8004a7a:	f007 fa79 	bl	800bf70 <rand>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <WS2812_ANIMATION_2+0x150>)
 8004a82:	fb83 1302 	smull	r1, r3, r3, r2
 8004a86:	4413      	add	r3, r2
 8004a88:	11d9      	asrs	r1, r3, #7
 8004a8a:	17d3      	asrs	r3, r2, #31
 8004a8c:	1ac9      	subs	r1, r1, r3
 8004a8e:	460b      	mov	r3, r1
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	1a5b      	subs	r3, r3, r1
 8004a94:	1ad1      	subs	r1, r2, r3
 8004a96:	b2ca      	uxtb	r2, r1
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <WS2812_ANIMATION_2+0x148>)
 8004a9a:	701a      	strb	r2, [r3, #0]
}
 8004a9c:	bf00      	nop
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	200007fb 	.word	0x200007fb
 8004aa8:	200007f9 	.word	0x200007f9
 8004aac:	51eb851f 	.word	0x51eb851f
 8004ab0:	200007fc 	.word	0x200007fc
 8004ab4:	200007fd 	.word	0x200007fd
 8004ab8:	200007fa 	.word	0x200007fa
 8004abc:	80808081 	.word	0x80808081

08004ac0 <WS2812_ANIMATION_3>:
void WS2812_ANIMATION_3(void){
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
	WS2812_CLEAR();
 8004ac4:	f7ff feac 	bl	8004820 <WS2812_CLEAR>
	WS2812_PIXEL_RGB_TO_BUF_DMA(128, 0, 0, Pos1);
 8004ac8:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <WS2812_ANIMATION_3+0xd4>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	2080      	movs	r0, #128	; 0x80
 8004ad4:	f7ff fde8 	bl	80046a8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
	WS2812_PIXEL_RGB_TO_BUF_DMA(0, 0, 128, Pos2);
 8004ad8:	4b2f      	ldr	r3, [pc, #188]	; (8004b98 <WS2812_ANIMATION_3+0xd8>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2280      	movs	r2, #128	; 0x80
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f7ff fde0 	bl	80046a8 <WS2812_PIXEL_RGB_TO_BUF_DMA>
	WS2812_LIGHT();
 8004ae8:	f7ff fe74 	bl	80047d4 <WS2812_LIGHT>
	//--LED1
	if (Fl_Top1 == 0) {
 8004aec:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <WS2812_ANIMATION_3+0xdc>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d110      	bne.n	8004b16 <WS2812_ANIMATION_3+0x56>
		Pos1++;
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <WS2812_ANIMATION_3+0xd4>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	3301      	adds	r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <WS2812_ANIMATION_3+0xd4>)
 8004afe:	701a      	strb	r2, [r3, #0]
		if (Pos1 == LED_COUNT) {Fl_Top1 = 1;Pos1 = LED_COUNT - 2;}
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <WS2812_ANIMATION_3+0xd4>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d11a      	bne.n	8004b3e <WS2812_ANIMATION_3+0x7e>
 8004b08:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <WS2812_ANIMATION_3+0xdc>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <WS2812_ANIMATION_3+0xd4>)
 8004b10:	220e      	movs	r2, #14
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e013      	b.n	8004b3e <WS2812_ANIMATION_3+0x7e>
	} else if (Fl_Top1 == 1) {
 8004b16:	4b21      	ldr	r3, [pc, #132]	; (8004b9c <WS2812_ANIMATION_3+0xdc>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d10f      	bne.n	8004b3e <WS2812_ANIMATION_3+0x7e>
		Pos1--;
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <WS2812_ANIMATION_3+0xd4>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	4b1b      	ldr	r3, [pc, #108]	; (8004b94 <WS2812_ANIMATION_3+0xd4>)
 8004b28:	701a      	strb	r2, [r3, #0]
		if (Pos1 == 0) {Fl_Top1 = 0;Pos1 = 0;
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <WS2812_ANIMATION_3+0xd4>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d105      	bne.n	8004b3e <WS2812_ANIMATION_3+0x7e>
 8004b32:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <WS2812_ANIMATION_3+0xdc>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <WS2812_ANIMATION_3+0xd4>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
		}
	}
	//--LED2
	if (Fl_Top2 == 0) {
 8004b3e:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <WS2812_ANIMATION_3+0xe0>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d110      	bne.n	8004b68 <WS2812_ANIMATION_3+0xa8>
		Pos2++;
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <WS2812_ANIMATION_3+0xd8>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <WS2812_ANIMATION_3+0xd8>)
 8004b50:	701a      	strb	r2, [r3, #0]
		if (Pos2 == LED_COUNT) {Fl_Top2 = 1;Pos2 = LED_COUNT - 2;
 8004b52:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <WS2812_ANIMATION_3+0xd8>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d11a      	bne.n	8004b90 <WS2812_ANIMATION_3+0xd0>
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <WS2812_ANIMATION_3+0xe0>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <WS2812_ANIMATION_3+0xd8>)
 8004b62:	220e      	movs	r2, #14
 8004b64:	701a      	strb	r2, [r3, #0]
		}
	} else if (Fl_Top2 == 1) {Pos2--;
	if (Pos2 == 0) {Fl_Top2 = 0;Pos2 = 0;
		}
	}
}
 8004b66:	e013      	b.n	8004b90 <WS2812_ANIMATION_3+0xd0>
	} else if (Fl_Top2 == 1) {Pos2--;
 8004b68:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <WS2812_ANIMATION_3+0xe0>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10f      	bne.n	8004b90 <WS2812_ANIMATION_3+0xd0>
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <WS2812_ANIMATION_3+0xd8>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <WS2812_ANIMATION_3+0xd8>)
 8004b7a:	701a      	strb	r2, [r3, #0]
	if (Pos2 == 0) {Fl_Top2 = 0;Pos2 = 0;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <WS2812_ANIMATION_3+0xd8>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <WS2812_ANIMATION_3+0xd0>
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <WS2812_ANIMATION_3+0xe0>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <WS2812_ANIMATION_3+0xd8>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	200007fe 	.word	0x200007fe
 8004b98:	20000038 	.word	0x20000038
 8004b9c:	200007ff 	.word	0x200007ff
 8004ba0:	20000039 	.word	0x20000039

08004ba4 <WS2812_UPDATE>:
void WS2812_UPDATE(void){
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
	if (FL_BTN==1) {
 8004ba8:	4b26      	ldr	r3, [pc, #152]	; (8004c44 <WS2812_UPDATE+0xa0>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d130      	bne.n	8004c12 <WS2812_UPDATE+0x6e>
		FL_BTN=0;
 8004bb0:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <WS2812_UPDATE+0xa0>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
		Mode++;
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <WS2812_UPDATE+0xa4>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <WS2812_UPDATE+0xa4>)
 8004bc0:	701a      	strb	r2, [r3, #0]
		if(Mode>2)Mode=0;
 8004bc2:	4b21      	ldr	r3, [pc, #132]	; (8004c48 <WS2812_UPDATE+0xa4>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d902      	bls.n	8004bd0 <WS2812_UPDATE+0x2c>
 8004bca:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <WS2812_UPDATE+0xa4>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
		Pos = 0;
 8004bd0:	4b1e      	ldr	r3, [pc, #120]	; (8004c4c <WS2812_UPDATE+0xa8>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
		Fl_Top = 0;
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	; (8004c50 <WS2812_UPDATE+0xac>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
		BRIGHTNESS=0;
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <WS2812_UPDATE+0xb0>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
		FL_BRIGHTNESS=0;
 8004be2:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <WS2812_UPDATE+0xb4>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
		ColorRed=128;
 8004be8:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <WS2812_UPDATE+0xb8>)
 8004bea:	2280      	movs	r2, #128	; 0x80
 8004bec:	701a      	strb	r2, [r3, #0]
		ColorGreen=70;
 8004bee:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <WS2812_UPDATE+0xbc>)
 8004bf0:	2246      	movs	r2, #70	; 0x46
 8004bf2:	701a      	strb	r2, [r3, #0]
		ColorBlue=30;
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <WS2812_UPDATE+0xc0>)
 8004bf6:	221e      	movs	r2, #30
 8004bf8:	701a      	strb	r2, [r3, #0]
		Pos1=0;
 8004bfa:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <WS2812_UPDATE+0xc4>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
		Pos2=LED_COUNT-1;
 8004c00:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <WS2812_UPDATE+0xc8>)
 8004c02:	220f      	movs	r2, #15
 8004c04:	701a      	strb	r2, [r3, #0]
		Fl_Top1 = 0;
 8004c06:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <WS2812_UPDATE+0xcc>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
		Fl_Top2 = 1;
 8004c0c:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <WS2812_UPDATE+0xd0>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	701a      	strb	r2, [r3, #0]
	}
	switch (Mode) {
 8004c12:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <WS2812_UPDATE+0xa4>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d00c      	beq.n	8004c34 <WS2812_UPDATE+0x90>
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	dc0c      	bgt.n	8004c38 <WS2812_UPDATE+0x94>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <WS2812_UPDATE+0x84>
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d003      	beq.n	8004c2e <WS2812_UPDATE+0x8a>
 8004c26:	e007      	b.n	8004c38 <WS2812_UPDATE+0x94>
	case 0:
		WS2812_ANIMATION_1();
 8004c28:	f7ff fe32 	bl	8004890 <WS2812_ANIMATION_1>
		break;
 8004c2c:	e004      	b.n	8004c38 <WS2812_UPDATE+0x94>
	case 1:
		WS2812_ANIMATION_2();
 8004c2e:	f7ff fe9d 	bl	800496c <WS2812_ANIMATION_2>
		break;
 8004c32:	e001      	b.n	8004c38 <WS2812_UPDATE+0x94>
	case 2:
		WS2812_ANIMATION_3();
 8004c34:	f7ff ff44 	bl	8004ac0 <WS2812_ANIMATION_3>
	}
	Fl_Update = 0;
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <WS2812_UPDATE+0xd4>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200007f8 	.word	0x200007f8
 8004c48:	200007f5 	.word	0x200007f5
 8004c4c:	200007f6 	.word	0x200007f6
 8004c50:	200007f7 	.word	0x200007f7
 8004c54:	200007f9 	.word	0x200007f9
 8004c58:	200007fa 	.word	0x200007fa
 8004c5c:	200007fb 	.word	0x200007fb
 8004c60:	200007fc 	.word	0x200007fc
 8004c64:	200007fd 	.word	0x200007fd
 8004c68:	200007fe 	.word	0x200007fe
 8004c6c:	20000038 	.word	0x20000038
 8004c70:	200007ff 	.word	0x200007ff
 8004c74:	20000039 	.word	0x20000039
 8004c78:	200007f4 	.word	0x200007f4
 8004c7c:	00000000 	.word	0x00000000

08004c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c80:	b5b0      	push	{r4, r5, r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c84:	f001 f92e 	bl	8005ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c88:	f000 fa1a 	bl	80050c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c8c:	f7fd ff90 	bl	8002bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c90:	f7fd ff28 	bl	8002ae4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004c94:	f000 ff2a 	bl	8005aec <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8004c98:	f000 fa82 	bl	80051a0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8004c9c:	f000 ff50 	bl	8005b40 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8004ca0:	f000 fc8a 	bl	80055b8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8004ca4:	f000 fd40 	bl	8005728 <MX_TIM4_Init>
  MX_ADC1_Init();
 8004ca8:	f7fd fe4e 	bl	8002948 <MX_ADC1_Init>
  //ak09916_init();
  //IMU_INIT();
  //WS2812_Init();
  //DrivePrepare();

  WS2812_Init();
 8004cac:	f7ff fdd0 	bl	8004850 <WS2812_Init>
  	//HAL_TIM_Base_Start_IT(&htim6);
  	//HAL_TIM_Base_Start_IT(&htim7);
  	ColorRed = rand() % 255;
 8004cb0:	f007 f95e 	bl	800bf70 <rand>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4bc4      	ldr	r3, [pc, #784]	; (8004fc8 <main+0x348>)
 8004cb8:	fb83 1302 	smull	r1, r3, r3, r2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	11d9      	asrs	r1, r3, #7
 8004cc0:	17d3      	asrs	r3, r2, #31
 8004cc2:	1ac9      	subs	r1, r1, r3
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	1a5b      	subs	r3, r3, r1
 8004cca:	1ad1      	subs	r1, r2, r3
 8004ccc:	b2ca      	uxtb	r2, r1
 8004cce:	4bbf      	ldr	r3, [pc, #764]	; (8004fcc <main+0x34c>)
 8004cd0:	701a      	strb	r2, [r3, #0]
  	ColorGreen = rand() % 255;
 8004cd2:	f007 f94d 	bl	800bf70 <rand>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	4bbb      	ldr	r3, [pc, #748]	; (8004fc8 <main+0x348>)
 8004cda:	fb83 1302 	smull	r1, r3, r3, r2
 8004cde:	4413      	add	r3, r2
 8004ce0:	11d9      	asrs	r1, r3, #7
 8004ce2:	17d3      	asrs	r3, r2, #31
 8004ce4:	1ac9      	subs	r1, r1, r3
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	1a5b      	subs	r3, r3, r1
 8004cec:	1ad1      	subs	r1, r2, r3
 8004cee:	b2ca      	uxtb	r2, r1
 8004cf0:	4bb7      	ldr	r3, [pc, #732]	; (8004fd0 <main+0x350>)
 8004cf2:	701a      	strb	r2, [r3, #0]
  	ColorBlue = rand() % 255;
 8004cf4:	f007 f93c 	bl	800bf70 <rand>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4bb3      	ldr	r3, [pc, #716]	; (8004fc8 <main+0x348>)
 8004cfc:	fb83 1302 	smull	r1, r3, r3, r2
 8004d00:	4413      	add	r3, r2
 8004d02:	11d9      	asrs	r1, r3, #7
 8004d04:	17d3      	asrs	r3, r2, #31
 8004d06:	1ac9      	subs	r1, r1, r3
 8004d08:	460b      	mov	r3, r1
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	1a5b      	subs	r3, r3, r1
 8004d0e:	1ad1      	subs	r1, r2, r3
 8004d10:	b2ca      	uxtb	r2, r1
 8004d12:	4bb0      	ldr	r3, [pc, #704]	; (8004fd4 <main+0x354>)
 8004d14:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BTN_PARK_UP = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 8004d16:	2110      	movs	r1, #16
 8004d18:	48af      	ldr	r0, [pc, #700]	; (8004fd8 <main+0x358>)
 8004d1a:	f002 fc29 	bl	8007570 <HAL_GPIO_ReadPin>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	461a      	mov	r2, r3
 8004d22:	4bae      	ldr	r3, [pc, #696]	; (8004fdc <main+0x35c>)
 8004d24:	701a      	strb	r2, [r3, #0]
	  BTN_PARK_DOWN = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 8004d26:	2120      	movs	r1, #32
 8004d28:	48ab      	ldr	r0, [pc, #684]	; (8004fd8 <main+0x358>)
 8004d2a:	f002 fc21 	bl	8007570 <HAL_GPIO_ReadPin>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	4bab      	ldr	r3, [pc, #684]	; (8004fe0 <main+0x360>)
 8004d34:	701a      	strb	r2, [r3, #0]

	  if (HAL_GetTick() - LastUpdateLed > 100)
 8004d36:	f001 f93b 	bl	8005fb0 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	4ba9      	ldr	r3, [pc, #676]	; (8004fe4 <main+0x364>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b64      	cmp	r3, #100	; 0x64
 8004d44:	d906      	bls.n	8004d54 <main+0xd4>
	  {
		  WS2812_UPDATE();
 8004d46:	f7ff ff2d 	bl	8004ba4 <WS2812_UPDATE>
		  LastUpdateLed = HAL_GetTick();
 8004d4a:	f001 f931 	bl	8005fb0 <HAL_GetTick>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4aa4      	ldr	r2, [pc, #656]	; (8004fe4 <main+0x364>)
 8004d52:	6013      	str	r3, [r2, #0]
	  }

	  if (HAL_GetTick() - LastUpdateIMU > 1)
 8004d54:	f001 f92c 	bl	8005fb0 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4ba3      	ldr	r3, [pc, #652]	; (8004fe8 <main+0x368>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d906      	bls.n	8004d72 <main+0xf2>
	  {
		  IMU_UPDATE();
 8004d64:	f7fe f88e 	bl	8002e84 <IMU_UPDATE>
		  LastUpdateIMU = HAL_GetTick();
 8004d68:	f001 f922 	bl	8005fb0 <HAL_GetTick>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4a9e      	ldr	r2, [pc, #632]	; (8004fe8 <main+0x368>)
 8004d70:	6013      	str	r3, [r2, #0]
	  }

	  if (HAL_GetTick() - LastUpdateADC > 10)
 8004d72:	f001 f91d 	bl	8005fb0 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	4b9c      	ldr	r3, [pc, #624]	; (8004fec <main+0x36c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b0a      	cmp	r3, #10
 8004d80:	d906      	bls.n	8004d90 <main+0x110>
	  {
		  ADC_Update();
 8004d82:	f7ff fc49 	bl	8004618 <ADC_Update>
		  LastUpdateADC = HAL_GetTick();
 8004d86:	f001 f913 	bl	8005fb0 <HAL_GetTick>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4a97      	ldr	r2, [pc, #604]	; (8004fec <main+0x36c>)
 8004d8e:	6013      	str	r3, [r2, #0]
	  }

	  if (HAL_GetTick() - PackageLastTimeReset_Motherboard > 100) // UART2 RECEIVE FEEDBACK
 8004d90:	f001 f90e 	bl	8005fb0 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	4b96      	ldr	r3, [pc, #600]	; (8004ff0 <main+0x370>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b64      	cmp	r3, #100	; 0x64
 8004d9e:	d90e      	bls.n	8004dbe <main+0x13e>
	  {
		  MX_USART2_UART_Init();
 8004da0:	f000 fea4 	bl	8005aec <MX_USART2_UART_Init>
		  USART2ReceiveState = 0;
 8004da4:	4b93      	ldr	r3, [pc, #588]	; (8004ff4 <main+0x374>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8004daa:	2210      	movs	r2, #16
 8004dac:	4992      	ldr	r1, [pc, #584]	; (8004ff8 <main+0x378>)
 8004dae:	4893      	ldr	r0, [pc, #588]	; (8004ffc <main+0x37c>)
 8004db0:	f004 ffd8 	bl	8009d64 <HAL_UART_Receive_DMA>
		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 8004db4:	f001 f8fc 	bl	8005fb0 <HAL_GetTick>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4a8d      	ldr	r2, [pc, #564]	; (8004ff0 <main+0x370>)
 8004dbc:	6013      	str	r3, [r2, #0]
		  USART1ReceiveState = 0;
		  HAL_UART_Receive_DMA(&huart6, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
		  PackageLastTimeReset_OnBoardPC = HAL_GetTick();
	  }*/

	  if ((USART2ReceiveState == 10) && (SerialControlWheelsResponce.CR == 13) && (SerialControlWheelsResponce.LF == 10))
 8004dbe:	4b8d      	ldr	r3, [pc, #564]	; (8004ff4 <main+0x374>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b0a      	cmp	r3, #10
 8004dc6:	f040 814f 	bne.w	8005068 <main+0x3e8>
 8004dca:	4b8b      	ldr	r3, [pc, #556]	; (8004ff8 <main+0x378>)
 8004dcc:	7b9b      	ldrb	r3, [r3, #14]
 8004dce:	2b0d      	cmp	r3, #13
 8004dd0:	f040 814a 	bne.w	8005068 <main+0x3e8>
 8004dd4:	4b88      	ldr	r3, [pc, #544]	; (8004ff8 <main+0x378>)
 8004dd6:	7bdb      	ldrb	r3, [r3, #15]
 8004dd8:	2b0a      	cmp	r3, #10
 8004dda:	f040 8145 	bne.w	8005068 <main+0x3e8>
	  {
		  USART2ReceiveState = 0;
 8004dde:	4b85      	ldr	r3, [pc, #532]	; (8004ff4 <main+0x374>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8004de4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004de8:	4885      	ldr	r0, [pc, #532]	; (8005000 <main+0x380>)
 8004dea:	f002 fbf2 	bl	80075d2 <HAL_GPIO_TogglePin>

		  if(InititionHall == 0)
 8004dee:	4b85      	ldr	r3, [pc, #532]	; (8005004 <main+0x384>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d116      	bne.n	8004e24 <main+0x1a4>
		  {
			  HallLeftStepPast = SerialControlWheelsResponce.WheelLeftSteps;
 8004df6:	4b80      	ldr	r3, [pc, #512]	; (8004ff8 <main+0x378>)
 8004df8:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e04:	4b80      	ldr	r3, [pc, #512]	; (8005008 <main+0x388>)
 8004e06:	edc3 7a00 	vstr	s15, [r3]
			  HallRightStepPast = SerialControlWheelsResponce.WheelRightSteps;
 8004e0a:	4b7b      	ldr	r3, [pc, #492]	; (8004ff8 <main+0x378>)
 8004e0c:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004e10:	ee07 3a90 	vmov	s15, r3
 8004e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e18:	4b7c      	ldr	r3, [pc, #496]	; (800500c <main+0x38c>)
 8004e1a:	edc3 7a00 	vstr	s15, [r3]
			  InititionHall = 1;
 8004e1e:	4b79      	ldr	r3, [pc, #484]	; (8005004 <main+0x384>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
		  }

		  if (HallActualize(SerialControlWheelsResponce.WheelLeftSteps, HallLeftStepPast, MOTHERBOARD_DIFF))
 8004e24:	4b74      	ldr	r3, [pc, #464]	; (8004ff8 <main+0x378>)
 8004e26:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e32:	4b75      	ldr	r3, [pc, #468]	; (8005008 <main+0x388>)
 8004e34:	ed93 7a00 	vldr	s14, [r3]
 8004e38:	ed9f 1a75 	vldr	s2, [pc, #468]	; 8005010 <main+0x390>
 8004e3c:	eef0 0a47 	vmov.f32	s1, s14
 8004e40:	eeb0 0a67 	vmov.f32	s0, s15
 8004e44:	f7fd ffea 	bl	8002e1c <HallActualize>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00e      	beq.n	8004e6c <main+0x1ec>
		  {
			  HallLeftStep = SerialControlWheelsResponce.WheelLeftSteps;
 8004e4e:	4b6a      	ldr	r3, [pc, #424]	; (8004ff8 <main+0x378>)
 8004e50:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8004e54:	ee07 3a90 	vmov	s15, r3
 8004e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e5c:	4b6d      	ldr	r3, [pc, #436]	; (8005014 <main+0x394>)
 8004e5e:	edc3 7a00 	vstr	s15, [r3]
			  HallLeftStepPast = HallLeftStep;
 8004e62:	4b6c      	ldr	r3, [pc, #432]	; (8005014 <main+0x394>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a68      	ldr	r2, [pc, #416]	; (8005008 <main+0x388>)
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e003      	b.n	8004e74 <main+0x1f4>
		  }
		  else
		  {
			  HallLeftStep = HallLeftStepPast;
 8004e6c:	4b66      	ldr	r3, [pc, #408]	; (8005008 <main+0x388>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a68      	ldr	r2, [pc, #416]	; (8005014 <main+0x394>)
 8004e72:	6013      	str	r3, [r2, #0]
		  }

		  if (HallActualize(SerialControlWheelsResponce.WheelRightSteps, HallRightStepPast, MOTHERBOARD_DIFF))
 8004e74:	4b60      	ldr	r3, [pc, #384]	; (8004ff8 <main+0x378>)
 8004e76:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e82:	4b62      	ldr	r3, [pc, #392]	; (800500c <main+0x38c>)
 8004e84:	ed93 7a00 	vldr	s14, [r3]
 8004e88:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8005010 <main+0x390>
 8004e8c:	eef0 0a47 	vmov.f32	s1, s14
 8004e90:	eeb0 0a67 	vmov.f32	s0, s15
 8004e94:	f7fd ffc2 	bl	8002e1c <HallActualize>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00e      	beq.n	8004ebc <main+0x23c>
		  {
			  HallRightStep = SerialControlWheelsResponce.WheelRightSteps;
 8004e9e:	4b56      	ldr	r3, [pc, #344]	; (8004ff8 <main+0x378>)
 8004ea0:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8004ea4:	ee07 3a90 	vmov	s15, r3
 8004ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eac:	4b5a      	ldr	r3, [pc, #360]	; (8005018 <main+0x398>)
 8004eae:	edc3 7a00 	vstr	s15, [r3]
			  HallRightStepPast = HallRightStep;
 8004eb2:	4b59      	ldr	r3, [pc, #356]	; (8005018 <main+0x398>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a55      	ldr	r2, [pc, #340]	; (800500c <main+0x38c>)
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e003      	b.n	8004ec4 <main+0x244>
		  }
		  else
		  {
			  HallRightStep = HallRightStepPast;
 8004ebc:	4b53      	ldr	r3, [pc, #332]	; (800500c <main+0x38c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a55      	ldr	r2, [pc, #340]	; (8005018 <main+0x398>)
 8004ec2:	6013      	str	r3, [r2, #0]
		  }

		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 8004ec4:	f001 f874 	bl	8005fb0 <HAL_GetTick>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4a49      	ldr	r2, [pc, #292]	; (8004ff0 <main+0x370>)
 8004ecc:	6013      	str	r3, [r2, #0]

		  switch (SerialControlWheelsResponce.ParameterNumber)
 8004ece:	4b4a      	ldr	r3, [pc, #296]	; (8004ff8 <main+0x378>)
 8004ed0:	785b      	ldrb	r3, [r3, #1]
 8004ed2:	2b07      	cmp	r3, #7
 8004ed4:	f200 80c9 	bhi.w	800506a <main+0x3ea>
 8004ed8:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <main+0x260>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004f01 	.word	0x08004f01
 8004ee4:	08004f97 	.word	0x08004f97
 8004ee8:	08004fa3 	.word	0x08004fa3
 8004eec:	08004faf 	.word	0x08004faf
 8004ef0:	08005039 	.word	0x08005039
 8004ef4:	08005045 	.word	0x08005045
 8004ef8:	08005051 	.word	0x08005051
 8004efc:	0800505d 	.word	0x0800505d
		  {
		  case 0:
			  Voltage = SerialControlWheelsResponce.ParameterValue;
 8004f00:	4b3d      	ldr	r3, [pc, #244]	; (8004ff8 <main+0x378>)
 8004f02:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8004f06:	4a45      	ldr	r2, [pc, #276]	; (800501c <main+0x39c>)
 8004f08:	6013      	str	r3, [r2, #0]
			  Battery += ((Interpolation(Voltage, 28, 41) * 100.0) - Battery) * 0.01;
 8004f0a:	4b44      	ldr	r3, [pc, #272]	; (800501c <main+0x39c>)
 8004f0c:	edd3 7a00 	vldr	s15, [r3]
 8004f10:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8005020 <main+0x3a0>
 8004f14:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 8004f18:	eeb0 0a67 	vmov.f32	s0, s15
 8004f1c:	f7ff fadc 	bl	80044d8 <Interpolation>
 8004f20:	ee10 3a10 	vmov	r3, s0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7fb fb07 	bl	8000538 <__aeabi_f2d>
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	4b3d      	ldr	r3, [pc, #244]	; (8005024 <main+0x3a4>)
 8004f30:	f7fb fb5a 	bl	80005e8 <__aeabi_dmul>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4614      	mov	r4, r2
 8004f3a:	461d      	mov	r5, r3
 8004f3c:	4b3a      	ldr	r3, [pc, #232]	; (8005028 <main+0x3a8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fb faf9 	bl	8000538 <__aeabi_f2d>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	f7fb f993 	bl	8000278 <__aeabi_dsub>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	a319      	add	r3, pc, #100	; (adr r3, 8004fc0 <main+0x340>)
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f7fb fb42 	bl	80005e8 <__aeabi_dmul>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4614      	mov	r4, r2
 8004f6a:	461d      	mov	r5, r3
 8004f6c:	4b2e      	ldr	r3, [pc, #184]	; (8005028 <main+0x3a8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fb fae1 	bl	8000538 <__aeabi_f2d>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	f7fb f97d 	bl	800027c <__adddf3>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	f7fb fdef 	bl	8000b6c <__aeabi_d2f>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4a25      	ldr	r2, [pc, #148]	; (8005028 <main+0x3a8>)
 8004f92:	6013      	str	r3, [r2, #0]
			  break;
 8004f94:	e069      	b.n	800506a <main+0x3ea>
		  case 1:
			  CurrentLeft = SerialControlWheelsResponce.ParameterValue;
 8004f96:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <main+0x378>)
 8004f98:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8004f9c:	4a23      	ldr	r2, [pc, #140]	; (800502c <main+0x3ac>)
 8004f9e:	6013      	str	r3, [r2, #0]
		      break;
 8004fa0:	e063      	b.n	800506a <main+0x3ea>
		  case 2:
		      CurrentRight = SerialControlWheelsResponce.ParameterValue;
 8004fa2:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <main+0x378>)
 8004fa4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8004fa8:	4a21      	ldr	r2, [pc, #132]	; (8005030 <main+0x3b0>)
 8004faa:	6013      	str	r3, [r2, #0]
		      break;
 8004fac:	e05d      	b.n	800506a <main+0x3ea>
		  case 3:
		      RPSLeft = SerialControlWheelsResponce.ParameterValue;
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <main+0x378>)
 8004fb0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8004fb4:	4a1f      	ldr	r2, [pc, #124]	; (8005034 <main+0x3b4>)
 8004fb6:	6013      	str	r3, [r2, #0]
		      break;
 8004fb8:	e057      	b.n	800506a <main+0x3ea>
 8004fba:	bf00      	nop
 8004fbc:	f3af 8000 	nop.w
 8004fc0:	47ae147b 	.word	0x47ae147b
 8004fc4:	3f847ae1 	.word	0x3f847ae1
 8004fc8:	80808081 	.word	0x80808081
 8004fcc:	200007fb 	.word	0x200007fb
 8004fd0:	200007fc 	.word	0x200007fc
 8004fd4:	200007fd 	.word	0x200007fd
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	200009d8 	.word	0x200009d8
 8004fe0:	200008c4 	.word	0x200008c4
 8004fe4:	20000920 	.word	0x20000920
 8004fe8:	2000088c 	.word	0x2000088c
 8004fec:	200009a8 	.word	0x200009a8
 8004ff0:	200009bc 	.word	0x200009bc
 8004ff4:	20000798 	.word	0x20000798
 8004ff8:	20000894 	.word	0x20000894
 8004ffc:	20000e74 	.word	0x20000e74
 8005000:	40020c00 	.word	0x40020c00
 8005004:	200007c8 	.word	0x200007c8
 8005008:	200007cc 	.word	0x200007cc
 800500c:	200007d0 	.word	0x200007d0
 8005010:	42c80000 	.word	0x42c80000
 8005014:	20000890 	.word	0x20000890
 8005018:	20000988 	.word	0x20000988
 800501c:	200008c0 	.word	0x200008c0
 8005020:	42240000 	.word	0x42240000
 8005024:	40590000 	.word	0x40590000
 8005028:	20000950 	.word	0x20000950
 800502c:	20000868 	.word	0x20000868
 8005030:	2000094c 	.word	0x2000094c
 8005034:	200009fc 	.word	0x200009fc
		  case 4:
		      RPSRight = SerialControlWheelsResponce.ParameterValue;
 8005038:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <main+0x428>)
 800503a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800503e:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <main+0x42c>)
 8005040:	6013      	str	r3, [r2, #0]
		      break;
 8005042:	e012      	b.n	800506a <main+0x3ea>
		  case 5:
		      OverCurrCount = SerialControlWheelsResponce.ParameterValue;
 8005044:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <main+0x428>)
 8005046:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800504a:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <main+0x430>)
 800504c:	6013      	str	r3, [r2, #0]
		      break;
 800504e:	e00c      	b.n	800506a <main+0x3ea>
		  case 6:
		      ConnErrCount = SerialControlWheelsResponce.ParameterValue;
 8005050:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <main+0x428>)
 8005052:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8005056:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <main+0x434>)
 8005058:	6013      	str	r3, [r2, #0]
		      break;
 800505a:	e006      	b.n	800506a <main+0x3ea>
		  case 7:
		      CommTime = SerialControlWheelsResponce.ParameterValue;
 800505c:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <main+0x428>)
 800505e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8005062:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <main+0x438>)
 8005064:	6013      	str	r3, [r2, #0]
		      break;
 8005066:	e000      	b.n	800506a <main+0x3ea>
		  }
	  }
 8005068:	bf00      	nop
 		  HAL_UART_Transmit_DMA(&huart4, (uint8_t*)SerialOnBoardResponce.Buffer, ON_BOARD_CONTROL_RESPONCE_SIZE);

		  PackageLastTimeReset_OnBoardPC = HAL_GetTick();
	  }*/

	  if (HAL_GetTick() - LastUpdateLogic > 10)
 800506a:	f000 ffa1 	bl	8005fb0 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	4b12      	ldr	r3, [pc, #72]	; (80050bc <main+0x43c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b0a      	cmp	r3, #10
 8005078:	d912      	bls.n	80050a0 <main+0x420>

	  {
		  BALANCE_Prepare();
 800507a:	f7fe fb65 	bl	8003748 <BALANCE_Prepare>
		  BALANCE_Calculate_Speeds();
 800507e:	f7fe fc6b 	bl	8003958 <BALANCE_Calculate_Speeds>
		  BALANCE_Position_Linear_Control();
 8005082:	f7fe fda5 	bl	8003bd0 <BALANCE_Position_Linear_Control>
		  BALANCE_Speed_LinearControl();
 8005086:	f7fe fe4f 	bl	8003d28 <BALANCE_Speed_LinearControl>
		  BALANCE_Position_Angular_Control();
 800508a:	f7fe fffd 	bl	8004088 <BALANCE_Position_Angular_Control>
		  BALANCE_LOOP();
 800508e:	f7ff f8a3 	bl	80041d8 <BALANCE_LOOP>
		  BALANCE_Result_Loop();
 8005092:	f7ff f95d 	bl	8004350 <BALANCE_Result_Loop>
		  LastUpdateLogic = HAL_GetTick();
 8005096:	f000 ff8b 	bl	8005fb0 <HAL_GetTick>
 800509a:	4603      	mov	r3, r0
 800509c:	4a07      	ldr	r2, [pc, #28]	; (80050bc <main+0x43c>)
 800509e:	6013      	str	r3, [r2, #0]
	  else
	  {
		  MotopStop();
	  }*/

	  SERIAL_CONTROL_LOOP();
 80050a0:	f7fe fb28 	bl	80036f4 <SERIAL_CONTROL_LOOP>
	  BTN_PARK_UP = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 80050a4:	e637      	b.n	8004d16 <main+0x96>
 80050a6:	bf00      	nop
 80050a8:	20000894 	.word	0x20000894
 80050ac:	200009c0 	.word	0x200009c0
 80050b0:	20000878 	.word	0x20000878
 80050b4:	200009b8 	.word	0x200009b8
 80050b8:	20000a00 	.word	0x20000a00
 80050bc:	200008d0 	.word	0x200008d0

080050c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b094      	sub	sp, #80	; 0x50
 80050c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050c6:	f107 0320 	add.w	r3, r7, #32
 80050ca:	2230      	movs	r2, #48	; 0x30
 80050cc:	2100      	movs	r1, #0
 80050ce:	4618      	mov	r0, r3
 80050d0:	f006 ff46 	bl	800bf60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050d4:	f107 030c 	add.w	r3, r7, #12
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	605a      	str	r2, [r3, #4]
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80050e4:	2300      	movs	r3, #0
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	4b28      	ldr	r3, [pc, #160]	; (800518c <SystemClock_Config+0xcc>)
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	4a27      	ldr	r2, [pc, #156]	; (800518c <SystemClock_Config+0xcc>)
 80050ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f2:	6413      	str	r3, [r2, #64]	; 0x40
 80050f4:	4b25      	ldr	r3, [pc, #148]	; (800518c <SystemClock_Config+0xcc>)
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005100:	2300      	movs	r3, #0
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	4b22      	ldr	r3, [pc, #136]	; (8005190 <SystemClock_Config+0xd0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a21      	ldr	r2, [pc, #132]	; (8005190 <SystemClock_Config+0xd0>)
 800510a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <SystemClock_Config+0xd0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005118:	607b      	str	r3, [r7, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800511c:	2301      	movs	r3, #1
 800511e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005124:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005126:	2302      	movs	r3, #2
 8005128:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800512a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800512e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005130:	2304      	movs	r3, #4
 8005132:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005134:	23a8      	movs	r3, #168	; 0xa8
 8005136:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005138:	2302      	movs	r3, #2
 800513a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800513c:	2304      	movs	r3, #4
 800513e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005140:	f107 0320 	add.w	r3, r7, #32
 8005144:	4618      	mov	r0, r3
 8005146:	f002 fa5f 	bl	8007608 <HAL_RCC_OscConfig>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005150:	f000 f820 	bl	8005194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005154:	230f      	movs	r3, #15
 8005156:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005158:	2302      	movs	r3, #2
 800515a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800515c:	2300      	movs	r3, #0
 800515e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005160:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005164:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800516a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800516c:	f107 030c 	add.w	r3, r7, #12
 8005170:	2105      	movs	r1, #5
 8005172:	4618      	mov	r0, r3
 8005174:	f002 fcc0 	bl	8007af8 <HAL_RCC_ClockConfig>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800517e:	f000 f809 	bl	8005194 <Error_Handler>
  }
}
 8005182:	bf00      	nop
 8005184:	3750      	adds	r7, #80	; 0x50
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800
 8005190:	40007000 	.word	0x40007000

08005194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005198:	b672      	cpsid	i
}
 800519a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800519c:	e7fe      	b.n	800519c <Error_Handler+0x8>
	...

080051a0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80051a4:	4b17      	ldr	r3, [pc, #92]	; (8005204 <MX_SPI2_Init+0x64>)
 80051a6:	4a18      	ldr	r2, [pc, #96]	; (8005208 <MX_SPI2_Init+0x68>)
 80051a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80051aa:	4b16      	ldr	r3, [pc, #88]	; (8005204 <MX_SPI2_Init+0x64>)
 80051ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80051b2:	4b14      	ldr	r3, [pc, #80]	; (8005204 <MX_SPI2_Init+0x64>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80051b8:	4b12      	ldr	r3, [pc, #72]	; (8005204 <MX_SPI2_Init+0x64>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <MX_SPI2_Init+0x64>)
 80051c0:	2202      	movs	r2, #2
 80051c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80051c4:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <MX_SPI2_Init+0x64>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80051ca:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <MX_SPI2_Init+0x64>)
 80051cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80051d2:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <MX_SPI2_Init+0x64>)
 80051d4:	2210      	movs	r2, #16
 80051d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80051d8:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <MX_SPI2_Init+0x64>)
 80051da:	2200      	movs	r2, #0
 80051dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <MX_SPI2_Init+0x64>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e4:	4b07      	ldr	r3, [pc, #28]	; (8005204 <MX_SPI2_Init+0x64>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <MX_SPI2_Init+0x64>)
 80051ec:	220a      	movs	r2, #10
 80051ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80051f0:	4804      	ldr	r0, [pc, #16]	; (8005204 <MX_SPI2_Init+0x64>)
 80051f2:	f002 fe7d 	bl	8007ef0 <HAL_SPI_Init>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80051fc:	f7ff ffca 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005200:	bf00      	nop
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000a48 	.word	0x20000a48
 8005208:	40003800 	.word	0x40003800

0800520c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	; 0x28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005214:	f107 0314 	add.w	r3, r7, #20
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	605a      	str	r2, [r3, #4]
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	60da      	str	r2, [r3, #12]
 8005222:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a19      	ldr	r2, [pc, #100]	; (8005290 <HAL_SPI_MspInit+0x84>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d12c      	bne.n	8005288 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	4b18      	ldr	r3, [pc, #96]	; (8005294 <HAL_SPI_MspInit+0x88>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	4a17      	ldr	r2, [pc, #92]	; (8005294 <HAL_SPI_MspInit+0x88>)
 8005238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800523c:	6413      	str	r3, [r2, #64]	; 0x40
 800523e:	4b15      	ldr	r3, [pc, #84]	; (8005294 <HAL_SPI_MspInit+0x88>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	4b11      	ldr	r3, [pc, #68]	; (8005294 <HAL_SPI_MspInit+0x88>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	4a10      	ldr	r2, [pc, #64]	; (8005294 <HAL_SPI_MspInit+0x88>)
 8005254:	f043 0302 	orr.w	r3, r3, #2
 8005258:	6313      	str	r3, [r2, #48]	; 0x30
 800525a:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <HAL_SPI_MspInit+0x88>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 8005266:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800526a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526c:	2302      	movs	r3, #2
 800526e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005270:	2300      	movs	r3, #0
 8005272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005274:	2303      	movs	r3, #3
 8005276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005278:	2305      	movs	r3, #5
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800527c:	f107 0314 	add.w	r3, r7, #20
 8005280:	4619      	mov	r1, r3
 8005282:	4805      	ldr	r0, [pc, #20]	; (8005298 <HAL_SPI_MspInit+0x8c>)
 8005284:	f001 ffd8 	bl	8007238 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005288:	bf00      	nop
 800528a:	3728      	adds	r7, #40	; 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40003800 	.word	0x40003800
 8005294:	40023800 	.word	0x40023800
 8005298:	40020400 	.word	0x40020400

0800529c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052a2:	2300      	movs	r3, #0
 80052a4:	607b      	str	r3, [r7, #4]
 80052a6:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <HAL_MspInit+0x4c>)
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	4a0f      	ldr	r2, [pc, #60]	; (80052e8 <HAL_MspInit+0x4c>)
 80052ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052b0:	6453      	str	r3, [r2, #68]	; 0x44
 80052b2:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <HAL_MspInit+0x4c>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ba:	607b      	str	r3, [r7, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052be:	2300      	movs	r3, #0
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <HAL_MspInit+0x4c>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <HAL_MspInit+0x4c>)
 80052c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052cc:	6413      	str	r3, [r2, #64]	; 0x40
 80052ce:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <HAL_MspInit+0x4c>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40023800 	.word	0x40023800

080052ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052f0:	e7fe      	b.n	80052f0 <NMI_Handler+0x4>

080052f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052f2:	b480      	push	{r7}
 80052f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052f6:	e7fe      	b.n	80052f6 <HardFault_Handler+0x4>

080052f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052fc:	e7fe      	b.n	80052fc <MemManage_Handler+0x4>

080052fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052fe:	b480      	push	{r7}
 8005300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005302:	e7fe      	b.n	8005302 <BusFault_Handler+0x4>

08005304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005308:	e7fe      	b.n	8005308 <UsageFault_Handler+0x4>

0800530a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800530e:	bf00      	nop
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005326:	b480      	push	{r7}
 8005328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800532a:	bf00      	nop
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005338:	f000 fe26 	bl	8005f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800533c:	bf00      	nop
 800533e:	bd80      	pop	{r7, pc}

08005340 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005344:	4802      	ldr	r0, [pc, #8]	; (8005350 <DMA1_Stream1_IRQHandler+0x10>)
 8005346:	f001 fd0d 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800534a:	bf00      	nop
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000d10 	.word	0x20000d10

08005354 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8005358:	4802      	ldr	r0, [pc, #8]	; (8005364 <DMA1_Stream3_IRQHandler+0x10>)
 800535a:	f001 fd03 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000aa0 	.word	0x20000aa0

08005368 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800536c:	4802      	ldr	r0, [pc, #8]	; (8005378 <DMA1_Stream4_IRQHandler+0x10>)
 800536e:	f001 fcf9 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000db4 	.word	0x20000db4

0800537c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005380:	4802      	ldr	r0, [pc, #8]	; (800538c <DMA1_Stream5_IRQHandler+0x10>)
 8005382:	f001 fcef 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000cb0 	.word	0x20000cb0

08005390 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005394:	4802      	ldr	r0, [pc, #8]	; (80053a0 <DMA1_Stream6_IRQHandler+0x10>)
 8005396:	f001 fce5 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000e14 	.word	0x20000e14

080053a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80053a8:	4802      	ldr	r0, [pc, #8]	; (80053b4 <USART2_IRQHandler+0x10>)
 80053aa:	f004 fd0b 	bl	8009dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80053ae:	bf00      	nop
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000e74 	.word	0x20000e74

080053b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80053bc:	4802      	ldr	r0, [pc, #8]	; (80053c8 <USART3_IRQHandler+0x10>)
 80053be:	f004 fd01 	bl	8009dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80053c2:	bf00      	nop
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000d70 	.word	0x20000d70

080053cc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80053d0:	4802      	ldr	r0, [pc, #8]	; (80053dc <DMA2_Stream1_IRQHandler+0x10>)
 80053d2:	f001 fcc7 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000b00 	.word	0x20000b00

080053e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80053e4:	4802      	ldr	r0, [pc, #8]	; (80053f0 <DMA2_Stream2_IRQHandler+0x10>)
 80053e6:	f001 fcbd 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80053ea:	bf00      	nop
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000c08 	.word	0x20000c08

080053f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 80053f8:	4802      	ldr	r0, [pc, #8]	; (8005404 <DMA2_Stream6_IRQHandler+0x10>)
 80053fa:	f001 fcb3 	bl	8006d64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80053fe:	bf00      	nop
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000ba8 	.word	0x20000ba8

08005408 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
	return 1;
 800540c:	2301      	movs	r3, #1
}
 800540e:	4618      	mov	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <_kill>:

int _kill(int pid, int sig)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005422:	f006 fd73 	bl	800bf0c <__errno>
 8005426:	4603      	mov	r3, r0
 8005428:	2216      	movs	r2, #22
 800542a:	601a      	str	r2, [r3, #0]
	return -1;
 800542c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <_exit>:

void _exit (int status)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005440:	f04f 31ff 	mov.w	r1, #4294967295
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff ffe7 	bl	8005418 <_kill>
	while (1) {}		/* Make sure we hang here */
 800544a:	e7fe      	b.n	800544a <_exit+0x12>

0800544c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e00a      	b.n	8005474 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800545e:	f3af 8000 	nop.w
 8005462:	4601      	mov	r1, r0
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	60ba      	str	r2, [r7, #8]
 800546a:	b2ca      	uxtb	r2, r1
 800546c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	3301      	adds	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	dbf0      	blt.n	800545e <_read+0x12>
	}

return len;
 800547c:	687b      	ldr	r3, [r7, #4]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b086      	sub	sp, #24
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e009      	b.n	80054ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	60ba      	str	r2, [r7, #8]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	3301      	adds	r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	dbf1      	blt.n	8005498 <_write+0x12>
	}
	return len;
 80054b4:	687b      	ldr	r3, [r7, #4]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <_close>:

int _close(int file)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
	return -1;
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054e6:	605a      	str	r2, [r3, #4]
	return 0;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <_isatty>:

int _isatty(int file)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
	return 1;
 80054fe:	2301      	movs	r3, #1
}
 8005500:	4618      	mov	r0, r3
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
	return 0;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005530:	4a14      	ldr	r2, [pc, #80]	; (8005584 <_sbrk+0x5c>)
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <_sbrk+0x60>)
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800553c:	4b13      	ldr	r3, [pc, #76]	; (800558c <_sbrk+0x64>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005544:	4b11      	ldr	r3, [pc, #68]	; (800558c <_sbrk+0x64>)
 8005546:	4a12      	ldr	r2, [pc, #72]	; (8005590 <_sbrk+0x68>)
 8005548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800554a:	4b10      	ldr	r3, [pc, #64]	; (800558c <_sbrk+0x64>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4413      	add	r3, r2
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	429a      	cmp	r2, r3
 8005556:	d207      	bcs.n	8005568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005558:	f006 fcd8 	bl	800bf0c <__errno>
 800555c:	4603      	mov	r3, r0
 800555e:	220c      	movs	r2, #12
 8005560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005562:	f04f 33ff 	mov.w	r3, #4294967295
 8005566:	e009      	b.n	800557c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005568:	4b08      	ldr	r3, [pc, #32]	; (800558c <_sbrk+0x64>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800556e:	4b07      	ldr	r3, [pc, #28]	; (800558c <_sbrk+0x64>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	4a05      	ldr	r2, [pc, #20]	; (800558c <_sbrk+0x64>)
 8005578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800557a:	68fb      	ldr	r3, [r7, #12]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20020000 	.word	0x20020000
 8005588:	00000400 	.word	0x00000400
 800558c:	20000800 	.word	0x20000800
 8005590:	20000ed0 	.word	0x20000ed0

08005594 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005598:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <SystemInit+0x20>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559e:	4a05      	ldr	r2, [pc, #20]	; (80055b4 <SystemInit+0x20>)
 80055a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055a8:	bf00      	nop
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	e000ed00 	.word	0xe000ed00

080055b8 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch3;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b096      	sub	sp, #88	; 0x58
 80055bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	605a      	str	r2, [r3, #4]
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055da:	2200      	movs	r2, #0
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	605a      	str	r2, [r3, #4]
 80055e0:	609a      	str	r2, [r3, #8]
 80055e2:	60da      	str	r2, [r3, #12]
 80055e4:	611a      	str	r2, [r3, #16]
 80055e6:	615a      	str	r2, [r3, #20]
 80055e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	2220      	movs	r2, #32
 80055ee:	2100      	movs	r1, #0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f006 fcb5 	bl	800bf60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80055f6:	4b4a      	ldr	r3, [pc, #296]	; (8005720 <MX_TIM1_Init+0x168>)
 80055f8:	4a4a      	ldr	r2, [pc, #296]	; (8005724 <MX_TIM1_Init+0x16c>)
 80055fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80055fc:	4b48      	ldr	r3, [pc, #288]	; (8005720 <MX_TIM1_Init+0x168>)
 80055fe:	2201      	movs	r2, #1
 8005600:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005602:	4b47      	ldr	r3, [pc, #284]	; (8005720 <MX_TIM1_Init+0x168>)
 8005604:	2200      	movs	r2, #0
 8005606:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 105;
 8005608:	4b45      	ldr	r3, [pc, #276]	; (8005720 <MX_TIM1_Init+0x168>)
 800560a:	2269      	movs	r2, #105	; 0x69
 800560c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800560e:	4b44      	ldr	r3, [pc, #272]	; (8005720 <MX_TIM1_Init+0x168>)
 8005610:	2200      	movs	r2, #0
 8005612:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005614:	4b42      	ldr	r3, [pc, #264]	; (8005720 <MX_TIM1_Init+0x168>)
 8005616:	2200      	movs	r2, #0
 8005618:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800561a:	4b41      	ldr	r3, [pc, #260]	; (8005720 <MX_TIM1_Init+0x168>)
 800561c:	2200      	movs	r2, #0
 800561e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005620:	483f      	ldr	r0, [pc, #252]	; (8005720 <MX_TIM1_Init+0x168>)
 8005622:	f003 fa0d 	bl	8008a40 <HAL_TIM_Base_Init>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800562c:	f7ff fdb2 	bl	8005194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005634:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800563a:	4619      	mov	r1, r3
 800563c:	4838      	ldr	r0, [pc, #224]	; (8005720 <MX_TIM1_Init+0x168>)
 800563e:	f003 fd31 	bl	80090a4 <HAL_TIM_ConfigClockSource>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8005648:	f7ff fda4 	bl	8005194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800564c:	4834      	ldr	r0, [pc, #208]	; (8005720 <MX_TIM1_Init+0x168>)
 800564e:	f003 fa46 	bl	8008ade <HAL_TIM_PWM_Init>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8005658:	f7ff fd9c 	bl	8005194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800565c:	2300      	movs	r3, #0
 800565e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005660:	2300      	movs	r3, #0
 8005662:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005664:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005668:	4619      	mov	r1, r3
 800566a:	482d      	ldr	r0, [pc, #180]	; (8005720 <MX_TIM1_Init+0x168>)
 800566c:	f004 f9e0 	bl	8009a30 <HAL_TIMEx_MasterConfigSynchronization>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8005676:	f7ff fd8d 	bl	8005194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800567a:	2360      	movs	r3, #96	; 0x60
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005682:	2300      	movs	r3, #0
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005686:	2300      	movs	r3, #0
 8005688:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800568a:	2300      	movs	r3, #0
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800568e:	2300      	movs	r3, #0
 8005690:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005692:	2300      	movs	r3, #0
 8005694:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800569a:	2200      	movs	r2, #0
 800569c:	4619      	mov	r1, r3
 800569e:	4820      	ldr	r0, [pc, #128]	; (8005720 <MX_TIM1_Init+0x168>)
 80056a0:	f003 fc3e 	bl	8008f20 <HAL_TIM_PWM_ConfigChannel>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80056aa:	f7ff fd73 	bl	8005194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80056ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056b2:	2204      	movs	r2, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	481a      	ldr	r0, [pc, #104]	; (8005720 <MX_TIM1_Init+0x168>)
 80056b8:	f003 fc32 	bl	8008f20 <HAL_TIM_PWM_ConfigChannel>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80056c2:	f7ff fd67 	bl	8005194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ca:	2208      	movs	r2, #8
 80056cc:	4619      	mov	r1, r3
 80056ce:	4814      	ldr	r0, [pc, #80]	; (8005720 <MX_TIM1_Init+0x168>)
 80056d0:	f003 fc26 	bl	8008f20 <HAL_TIM_PWM_ConfigChannel>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80056da:	f7ff fd5b 	bl	8005194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80056de:	2300      	movs	r3, #0
 80056e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80056f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80056fc:	1d3b      	adds	r3, r7, #4
 80056fe:	4619      	mov	r1, r3
 8005700:	4807      	ldr	r0, [pc, #28]	; (8005720 <MX_TIM1_Init+0x168>)
 8005702:	f004 fa11 	bl	8009b28 <HAL_TIMEx_ConfigBreakDeadTime>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 800570c:	f7ff fd42 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005710:	4803      	ldr	r0, [pc, #12]	; (8005720 <MX_TIM1_Init+0x168>)
 8005712:	f000 f989 	bl	8005a28 <HAL_TIM_MspPostInit>

}
 8005716:	bf00      	nop
 8005718:	3758      	adds	r7, #88	; 0x58
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000c68 	.word	0x20000c68
 8005724:	40010000 	.word	0x40010000

08005728 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08e      	sub	sp, #56	; 0x38
 800572c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800572e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	605a      	str	r2, [r3, #4]
 8005738:	609a      	str	r2, [r3, #8]
 800573a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800573c:	f107 0320 	add.w	r3, r7, #32
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005746:	1d3b      	adds	r3, r7, #4
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	611a      	str	r2, [r3, #16]
 8005754:	615a      	str	r2, [r3, #20]
 8005756:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005758:	4b2c      	ldr	r3, [pc, #176]	; (800580c <MX_TIM4_Init+0xe4>)
 800575a:	4a2d      	ldr	r2, [pc, #180]	; (8005810 <MX_TIM4_Init+0xe8>)
 800575c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800575e:	4b2b      	ldr	r3, [pc, #172]	; (800580c <MX_TIM4_Init+0xe4>)
 8005760:	2200      	movs	r2, #0
 8005762:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005764:	4b29      	ldr	r3, [pc, #164]	; (800580c <MX_TIM4_Init+0xe4>)
 8005766:	2200      	movs	r2, #0
 8005768:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 800576a:	4b28      	ldr	r3, [pc, #160]	; (800580c <MX_TIM4_Init+0xe4>)
 800576c:	2269      	movs	r2, #105	; 0x69
 800576e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005770:	4b26      	ldr	r3, [pc, #152]	; (800580c <MX_TIM4_Init+0xe4>)
 8005772:	2200      	movs	r2, #0
 8005774:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005776:	4b25      	ldr	r3, [pc, #148]	; (800580c <MX_TIM4_Init+0xe4>)
 8005778:	2200      	movs	r2, #0
 800577a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800577c:	4823      	ldr	r0, [pc, #140]	; (800580c <MX_TIM4_Init+0xe4>)
 800577e:	f003 f95f 	bl	8008a40 <HAL_TIM_Base_Init>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8005788:	f7ff fd04 	bl	8005194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800578c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005796:	4619      	mov	r1, r3
 8005798:	481c      	ldr	r0, [pc, #112]	; (800580c <MX_TIM4_Init+0xe4>)
 800579a:	f003 fc83 	bl	80090a4 <HAL_TIM_ConfigClockSource>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80057a4:	f7ff fcf6 	bl	8005194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80057a8:	4818      	ldr	r0, [pc, #96]	; (800580c <MX_TIM4_Init+0xe4>)
 80057aa:	f003 f998 	bl	8008ade <HAL_TIM_PWM_Init>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80057b4:	f7ff fcee 	bl	8005194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057b8:	2300      	movs	r3, #0
 80057ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057bc:	2300      	movs	r3, #0
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80057c0:	f107 0320 	add.w	r3, r7, #32
 80057c4:	4619      	mov	r1, r3
 80057c6:	4811      	ldr	r0, [pc, #68]	; (800580c <MX_TIM4_Init+0xe4>)
 80057c8:	f004 f932 	bl	8009a30 <HAL_TIMEx_MasterConfigSynchronization>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80057d2:	f7ff fcdf 	bl	8005194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057d6:	2360      	movs	r3, #96	; 0x60
 80057d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80057e6:	1d3b      	adds	r3, r7, #4
 80057e8:	2204      	movs	r2, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4807      	ldr	r0, [pc, #28]	; (800580c <MX_TIM4_Init+0xe4>)
 80057ee:	f003 fb97 	bl	8008f20 <HAL_TIM_PWM_ConfigChannel>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80057f8:	f7ff fccc 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80057fc:	4803      	ldr	r0, [pc, #12]	; (800580c <MX_TIM4_Init+0xe4>)
 80057fe:	f000 f913 	bl	8005a28 <HAL_TIM_MspPostInit>

}
 8005802:	bf00      	nop
 8005804:	3738      	adds	r7, #56	; 0x38
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000b60 	.word	0x20000b60
 8005810:	40000800 	.word	0x40000800

08005814 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a76      	ldr	r2, [pc, #472]	; (80059fc <HAL_TIM_Base_MspInit+0x1e8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	f040 80a2 	bne.w	800596c <HAL_TIM_Base_MspInit+0x158>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	4b74      	ldr	r3, [pc, #464]	; (8005a00 <HAL_TIM_Base_MspInit+0x1ec>)
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	4a73      	ldr	r2, [pc, #460]	; (8005a00 <HAL_TIM_Base_MspInit+0x1ec>)
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	6453      	str	r3, [r2, #68]	; 0x44
 8005838:	4b71      	ldr	r3, [pc, #452]	; (8005a00 <HAL_TIM_Base_MspInit+0x1ec>)
 800583a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8005844:	4b6f      	ldr	r3, [pc, #444]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 8005846:	4a70      	ldr	r2, [pc, #448]	; (8005a08 <HAL_TIM_Base_MspInit+0x1f4>)
 8005848:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 800584a:	4b6e      	ldr	r3, [pc, #440]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 800584c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8005850:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005852:	4b6c      	ldr	r3, [pc, #432]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 8005854:	2240      	movs	r2, #64	; 0x40
 8005856:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005858:	4b6a      	ldr	r3, [pc, #424]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 800585a:	2200      	movs	r2, #0
 800585c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800585e:	4b69      	ldr	r3, [pc, #420]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 8005860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005864:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005866:	4b67      	ldr	r3, [pc, #412]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 8005868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800586c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800586e:	4b65      	ldr	r3, [pc, #404]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 8005870:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005874:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8005876:	4b63      	ldr	r3, [pc, #396]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 8005878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800587c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800587e:	4b61      	ldr	r3, [pc, #388]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 8005880:	2200      	movs	r2, #0
 8005882:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005884:	4b5f      	ldr	r3, [pc, #380]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 8005886:	2200      	movs	r2, #0
 8005888:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800588a:	485e      	ldr	r0, [pc, #376]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 800588c:	f001 f8d2 	bl	8006a34 <HAL_DMA_Init>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8005896:	f7ff fc7d 	bl	8005194 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a59      	ldr	r2, [pc, #356]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 800589e:	629a      	str	r2, [r3, #40]	; 0x28
 80058a0:	4a58      	ldr	r2, [pc, #352]	; (8005a04 <HAL_TIM_Base_MspInit+0x1f0>)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80058a6:	4b59      	ldr	r3, [pc, #356]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 80058a8:	4a59      	ldr	r2, [pc, #356]	; (8005a10 <HAL_TIM_Base_MspInit+0x1fc>)
 80058aa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80058ac:	4b57      	ldr	r3, [pc, #348]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 80058ae:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80058b2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058b4:	4b55      	ldr	r3, [pc, #340]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 80058b6:	2240      	movs	r2, #64	; 0x40
 80058b8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80058ba:	4b54      	ldr	r3, [pc, #336]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 80058bc:	2200      	movs	r2, #0
 80058be:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80058c0:	4b52      	ldr	r3, [pc, #328]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 80058c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058c6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80058c8:	4b50      	ldr	r3, [pc, #320]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 80058ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058ce:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80058d0:	4b4e      	ldr	r3, [pc, #312]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 80058d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058d6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80058d8:	4b4c      	ldr	r3, [pc, #304]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 80058da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058de:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80058e0:	4b4a      	ldr	r3, [pc, #296]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058e6:	4b49      	ldr	r3, [pc, #292]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80058ec:	4847      	ldr	r0, [pc, #284]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 80058ee:	f001 f8a1 	bl	8006a34 <HAL_DMA_Init>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <HAL_TIM_Base_MspInit+0xe8>
    {
      Error_Handler();
 80058f8:	f7ff fc4c 	bl	8005194 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a43      	ldr	r2, [pc, #268]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 8005900:	625a      	str	r2, [r3, #36]	; 0x24
 8005902:	4a42      	ldr	r2, [pc, #264]	; (8005a0c <HAL_TIM_Base_MspInit+0x1f8>)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8005908:	4b42      	ldr	r3, [pc, #264]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 800590a:	4a43      	ldr	r2, [pc, #268]	; (8005a18 <HAL_TIM_Base_MspInit+0x204>)
 800590c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 800590e:	4b41      	ldr	r3, [pc, #260]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 8005910:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8005914:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005916:	4b3f      	ldr	r3, [pc, #252]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 8005918:	2240      	movs	r2, #64	; 0x40
 800591a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800591c:	4b3d      	ldr	r3, [pc, #244]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 800591e:	2200      	movs	r2, #0
 8005920:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005922:	4b3c      	ldr	r3, [pc, #240]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 8005924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005928:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800592a:	4b3a      	ldr	r3, [pc, #232]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 800592c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005930:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005932:	4b38      	ldr	r3, [pc, #224]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 8005934:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005938:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 800593a:	4b36      	ldr	r3, [pc, #216]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 800593c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005940:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8005942:	4b34      	ldr	r3, [pc, #208]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 8005944:	2200      	movs	r2, #0
 8005946:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005948:	4b32      	ldr	r3, [pc, #200]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 800594a:	2200      	movs	r2, #0
 800594c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800594e:	4831      	ldr	r0, [pc, #196]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 8005950:	f001 f870 	bl	8006a34 <HAL_DMA_Init>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_TIM_Base_MspInit+0x14a>
    {
      Error_Handler();
 800595a:	f7ff fc1b 	bl	8005194 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a2c      	ldr	r2, [pc, #176]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 8005962:	62da      	str	r2, [r3, #44]	; 0x2c
 8005964:	4a2b      	ldr	r2, [pc, #172]	; (8005a14 <HAL_TIM_Base_MspInit+0x200>)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800596a:	e043      	b.n	80059f4 <HAL_TIM_Base_MspInit+0x1e0>
  else if(tim_baseHandle->Instance==TIM4)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <HAL_TIM_Base_MspInit+0x208>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d13e      	bne.n	80059f4 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005976:	2300      	movs	r3, #0
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	4b21      	ldr	r3, [pc, #132]	; (8005a00 <HAL_TIM_Base_MspInit+0x1ec>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	4a20      	ldr	r2, [pc, #128]	; (8005a00 <HAL_TIM_Base_MspInit+0x1ec>)
 8005980:	f043 0304 	orr.w	r3, r3, #4
 8005984:	6413      	str	r3, [r2, #64]	; 0x40
 8005986:	4b1e      	ldr	r3, [pc, #120]	; (8005a00 <HAL_TIM_Base_MspInit+0x1ec>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8005992:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 8005994:	4a23      	ldr	r2, [pc, #140]	; (8005a24 <HAL_TIM_Base_MspInit+0x210>)
 8005996:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8005998:	4b21      	ldr	r3, [pc, #132]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 800599a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800599e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059a0:	4b1f      	ldr	r3, [pc, #124]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 80059a2:	2240      	movs	r2, #64	; 0x40
 80059a4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80059a6:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80059ac:	4b1c      	ldr	r3, [pc, #112]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 80059ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059b2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80059b4:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 80059b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80059ba:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80059bc:	4b18      	ldr	r3, [pc, #96]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 80059be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059c2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80059c4:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 80059c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ca:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80059cc:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059d2:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80059d8:	4811      	ldr	r0, [pc, #68]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 80059da:	f001 f82b 	bl	8006a34 <HAL_DMA_Init>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <HAL_TIM_Base_MspInit+0x1d4>
      Error_Handler();
 80059e4:	f7ff fbd6 	bl	8005194 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a0d      	ldr	r2, [pc, #52]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 80059ec:	629a      	str	r2, [r3, #40]	; 0x28
 80059ee:	4a0c      	ldr	r2, [pc, #48]	; (8005a20 <HAL_TIM_Base_MspInit+0x20c>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40023800 	.word	0x40023800
 8005a04:	20000c08 	.word	0x20000c08
 8005a08:	40026440 	.word	0x40026440
 8005a0c:	20000b00 	.word	0x20000b00
 8005a10:	40026428 	.word	0x40026428
 8005a14:	20000ba8 	.word	0x20000ba8
 8005a18:	400264a0 	.word	0x400264a0
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	20000aa0 	.word	0x20000aa0
 8005a24:	40026058 	.word	0x40026058

08005a28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a30:	f107 0314 	add.w	r3, r7, #20
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a24      	ldr	r2, [pc, #144]	; (8005ad8 <HAL_TIM_MspPostInit+0xb0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d11f      	bne.n	8005a8a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	4b23      	ldr	r3, [pc, #140]	; (8005adc <HAL_TIM_MspPostInit+0xb4>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	4a22      	ldr	r2, [pc, #136]	; (8005adc <HAL_TIM_MspPostInit+0xb4>)
 8005a54:	f043 0310 	orr.w	r3, r3, #16
 8005a58:	6313      	str	r3, [r2, #48]	; 0x30
 8005a5a:	4b20      	ldr	r3, [pc, #128]	; (8005adc <HAL_TIM_MspPostInit+0xb4>)
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_LED1_Pin|PWM_LED2_Pin|PWM_LED3_Pin;
 8005a66:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8005a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a74:	2300      	movs	r3, #0
 8005a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a7c:	f107 0314 	add.w	r3, r7, #20
 8005a80:	4619      	mov	r1, r3
 8005a82:	4817      	ldr	r0, [pc, #92]	; (8005ae0 <HAL_TIM_MspPostInit+0xb8>)
 8005a84:	f001 fbd8 	bl	8007238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005a88:	e022      	b.n	8005ad0 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a15      	ldr	r2, [pc, #84]	; (8005ae4 <HAL_TIM_MspPostInit+0xbc>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d11d      	bne.n	8005ad0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_TIM_MspPostInit+0xb4>)
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	4a0f      	ldr	r2, [pc, #60]	; (8005adc <HAL_TIM_MspPostInit+0xb4>)
 8005a9e:	f043 0302 	orr.w	r3, r3, #2
 8005aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <HAL_TIM_MspPostInit+0xb4>)
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_LED4_Pin;
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005abc:	2300      	movs	r3, #0
 8005abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LED4_GPIO_Port, &GPIO_InitStruct);
 8005ac4:	f107 0314 	add.w	r3, r7, #20
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4807      	ldr	r0, [pc, #28]	; (8005ae8 <HAL_TIM_MspPostInit+0xc0>)
 8005acc:	f001 fbb4 	bl	8007238 <HAL_GPIO_Init>
}
 8005ad0:	bf00      	nop
 8005ad2:	3728      	adds	r7, #40	; 0x28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40020400 	.word	0x40020400

08005aec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005af0:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <MX_USART2_UART_Init+0x4c>)
 8005af2:	4a12      	ldr	r2, [pc, #72]	; (8005b3c <MX_USART2_UART_Init+0x50>)
 8005af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8005af6:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <MX_USART2_UART_Init+0x4c>)
 8005af8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005afe:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <MX_USART2_UART_Init+0x4c>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <MX_USART2_UART_Init+0x4c>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <MX_USART2_UART_Init+0x4c>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <MX_USART2_UART_Init+0x4c>)
 8005b12:	220c      	movs	r2, #12
 8005b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b16:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <MX_USART2_UART_Init+0x4c>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <MX_USART2_UART_Init+0x4c>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005b22:	4805      	ldr	r0, [pc, #20]	; (8005b38 <MX_USART2_UART_Init+0x4c>)
 8005b24:	f004 f852 	bl	8009bcc <HAL_UART_Init>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005b2e:	f7ff fb31 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005b32:	bf00      	nop
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000e74 	.word	0x20000e74
 8005b3c:	40004400 	.word	0x40004400

08005b40 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005b44:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <MX_USART3_UART_Init+0x4c>)
 8005b46:	4a12      	ldr	r2, [pc, #72]	; (8005b90 <MX_USART3_UART_Init+0x50>)
 8005b48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8005b4a:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <MX_USART3_UART_Init+0x4c>)
 8005b4c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005b50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005b52:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <MX_USART3_UART_Init+0x4c>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <MX_USART3_UART_Init+0x4c>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005b5e:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <MX_USART3_UART_Init+0x4c>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005b64:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <MX_USART3_UART_Init+0x4c>)
 8005b66:	220c      	movs	r2, #12
 8005b68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b6a:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <MX_USART3_UART_Init+0x4c>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b70:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <MX_USART3_UART_Init+0x4c>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005b76:	4805      	ldr	r0, [pc, #20]	; (8005b8c <MX_USART3_UART_Init+0x4c>)
 8005b78:	f004 f828 	bl	8009bcc <HAL_UART_Init>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005b82:	f7ff fb07 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005b86:	bf00      	nop
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000d70 	.word	0x20000d70
 8005b90:	40004800 	.word	0x40004800

08005b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08c      	sub	sp, #48	; 0x30
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b9c:	f107 031c 	add.w	r3, r7, #28
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a4b      	ldr	r2, [pc, #300]	; (8005ce0 <HAL_UART_MspInit+0x14c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	f040 80a2 	bne.w	8005cfc <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	4b49      	ldr	r3, [pc, #292]	; (8005ce4 <HAL_UART_MspInit+0x150>)
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	4a48      	ldr	r2, [pc, #288]	; (8005ce4 <HAL_UART_MspInit+0x150>)
 8005bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8005bc8:	4b46      	ldr	r3, [pc, #280]	; (8005ce4 <HAL_UART_MspInit+0x150>)
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	4b42      	ldr	r3, [pc, #264]	; (8005ce4 <HAL_UART_MspInit+0x150>)
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	4a41      	ldr	r2, [pc, #260]	; (8005ce4 <HAL_UART_MspInit+0x150>)
 8005bde:	f043 0308 	orr.w	r3, r3, #8
 8005be2:	6313      	str	r3, [r2, #48]	; 0x30
 8005be4:	4b3f      	ldr	r3, [pc, #252]	; (8005ce4 <HAL_UART_MspInit+0x150>)
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOW_TX_Pin|LOW_RX_Pin;
 8005bf0:	2360      	movs	r3, #96	; 0x60
 8005bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c00:	2307      	movs	r3, #7
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c04:	f107 031c 	add.w	r3, r7, #28
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4837      	ldr	r0, [pc, #220]	; (8005ce8 <HAL_UART_MspInit+0x154>)
 8005c0c:	f001 fb14 	bl	8007238 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005c10:	4b36      	ldr	r3, [pc, #216]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c12:	4a37      	ldr	r2, [pc, #220]	; (8005cf0 <HAL_UART_MspInit+0x15c>)
 8005c14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005c16:	4b35      	ldr	r3, [pc, #212]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c1e:	4b33      	ldr	r3, [pc, #204]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c24:	4b31      	ldr	r3, [pc, #196]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005c2a:	4b30      	ldr	r3, [pc, #192]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c30:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c32:	4b2e      	ldr	r3, [pc, #184]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c38:	4b2c      	ldr	r3, [pc, #176]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005c3e:	4b2b      	ldr	r3, [pc, #172]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005c44:	4b29      	ldr	r3, [pc, #164]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c4a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c4c:	4b27      	ldr	r3, [pc, #156]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005c52:	4826      	ldr	r0, [pc, #152]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c54:	f000 feee 	bl	8006a34 <HAL_DMA_Init>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005c5e:	f7ff fa99 	bl	8005194 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a21      	ldr	r2, [pc, #132]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38
 8005c68:	4a20      	ldr	r2, [pc, #128]	; (8005cec <HAL_UART_MspInit+0x158>)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005c6e:	4b21      	ldr	r3, [pc, #132]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005c70:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <HAL_UART_MspInit+0x164>)
 8005c72:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005c74:	4b1f      	ldr	r3, [pc, #124]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005c76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005c7e:	2240      	movs	r2, #64	; 0x40
 8005c80:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c82:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c8e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c90:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c96:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005c9c:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005ca2:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005ca4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ca8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005cb0:	4810      	ldr	r0, [pc, #64]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005cb2:	f000 febf 	bl	8006a34 <HAL_DMA_Init>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8005cbc:	f7ff fa6a 	bl	8005194 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a0c      	ldr	r2, [pc, #48]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8005cc6:	4a0b      	ldr	r2, [pc, #44]	; (8005cf4 <HAL_UART_MspInit+0x160>)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2100      	movs	r1, #0
 8005cd0:	2026      	movs	r0, #38	; 0x26
 8005cd2:	f000 fe78 	bl	80069c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005cd6:	2026      	movs	r0, #38	; 0x26
 8005cd8:	f000 fe91 	bl	80069fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005cdc:	e0c4      	b.n	8005e68 <HAL_UART_MspInit+0x2d4>
 8005cde:	bf00      	nop
 8005ce0:	40004400 	.word	0x40004400
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	40020c00 	.word	0x40020c00
 8005cec:	20000cb0 	.word	0x20000cb0
 8005cf0:	40026088 	.word	0x40026088
 8005cf4:	20000e14 	.word	0x20000e14
 8005cf8:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a5b      	ldr	r2, [pc, #364]	; (8005e70 <HAL_UART_MspInit+0x2dc>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	f040 80b0 	bne.w	8005e68 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005d08:	2300      	movs	r3, #0
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	4b59      	ldr	r3, [pc, #356]	; (8005e74 <HAL_UART_MspInit+0x2e0>)
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	4a58      	ldr	r2, [pc, #352]	; (8005e74 <HAL_UART_MspInit+0x2e0>)
 8005d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d16:	6413      	str	r3, [r2, #64]	; 0x40
 8005d18:	4b56      	ldr	r3, [pc, #344]	; (8005e74 <HAL_UART_MspInit+0x2e0>)
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d20:	613b      	str	r3, [r7, #16]
 8005d22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	4b52      	ldr	r3, [pc, #328]	; (8005e74 <HAL_UART_MspInit+0x2e0>)
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	4a51      	ldr	r2, [pc, #324]	; (8005e74 <HAL_UART_MspInit+0x2e0>)
 8005d2e:	f043 0302 	orr.w	r3, r3, #2
 8005d32:	6313      	str	r3, [r2, #48]	; 0x30
 8005d34:	4b4f      	ldr	r3, [pc, #316]	; (8005e74 <HAL_UART_MspInit+0x2e0>)
 8005d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d40:	2300      	movs	r3, #0
 8005d42:	60bb      	str	r3, [r7, #8]
 8005d44:	4b4b      	ldr	r3, [pc, #300]	; (8005e74 <HAL_UART_MspInit+0x2e0>)
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	4a4a      	ldr	r2, [pc, #296]	; (8005e74 <HAL_UART_MspInit+0x2e0>)
 8005d4a:	f043 0308 	orr.w	r3, r3, #8
 8005d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d50:	4b48      	ldr	r3, [pc, #288]	; (8005e74 <HAL_UART_MspInit+0x2e0>)
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	60bb      	str	r3, [r7, #8]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HIGH_RX_Pin;
 8005d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d62:	2302      	movs	r3, #2
 8005d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005d6e:	2307      	movs	r3, #7
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_RX_GPIO_Port, &GPIO_InitStruct);
 8005d72:	f107 031c 	add.w	r3, r7, #28
 8005d76:	4619      	mov	r1, r3
 8005d78:	483f      	ldr	r0, [pc, #252]	; (8005e78 <HAL_UART_MspInit+0x2e4>)
 8005d7a:	f001 fa5d 	bl	8007238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HIGH_TX_Pin;
 8005d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d84:	2302      	movs	r3, #2
 8005d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005d90:	2307      	movs	r3, #7
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_TX_GPIO_Port, &GPIO_InitStruct);
 8005d94:	f107 031c 	add.w	r3, r7, #28
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4838      	ldr	r0, [pc, #224]	; (8005e7c <HAL_UART_MspInit+0x2e8>)
 8005d9c:	f001 fa4c 	bl	8007238 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005da0:	4b37      	ldr	r3, [pc, #220]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005da2:	4a38      	ldr	r2, [pc, #224]	; (8005e84 <HAL_UART_MspInit+0x2f0>)
 8005da4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005da6:	4b36      	ldr	r3, [pc, #216]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005da8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005dac:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dae:	4b34      	ldr	r3, [pc, #208]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005db4:	4b32      	ldr	r3, [pc, #200]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005dba:	4b31      	ldr	r3, [pc, #196]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dc0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dc2:	4b2f      	ldr	r3, [pc, #188]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005dc8:	4b2d      	ldr	r3, [pc, #180]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005dce:	4b2c      	ldr	r3, [pc, #176]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005dd4:	4b2a      	ldr	r3, [pc, #168]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005dda:	4b29      	ldr	r3, [pc, #164]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005de0:	4827      	ldr	r0, [pc, #156]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005de2:	f000 fe27 	bl	8006a34 <HAL_DMA_Init>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8005dec:	f7ff f9d2 	bl	8005194 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a23      	ldr	r2, [pc, #140]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005df4:	639a      	str	r2, [r3, #56]	; 0x38
 8005df6:	4a22      	ldr	r2, [pc, #136]	; (8005e80 <HAL_UART_MspInit+0x2ec>)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8005dfc:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005dfe:	4a23      	ldr	r2, [pc, #140]	; (8005e8c <HAL_UART_MspInit+0x2f8>)
 8005e00:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8005e02:	4b21      	ldr	r3, [pc, #132]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e04:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005e08:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e0a:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e0c:	2240      	movs	r2, #64	; 0x40
 8005e0e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e10:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e16:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e1c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e1e:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e24:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005e2a:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e30:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005e3c:	4812      	ldr	r0, [pc, #72]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e3e:	f000 fdf9 	bl	8006a34 <HAL_DMA_Init>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8005e48:	f7ff f9a4 	bl	8005194 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a0e      	ldr	r2, [pc, #56]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e50:	635a      	str	r2, [r3, #52]	; 0x34
 8005e52:	4a0d      	ldr	r2, [pc, #52]	; (8005e88 <HAL_UART_MspInit+0x2f4>)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	2027      	movs	r0, #39	; 0x27
 8005e5e:	f000 fdb2 	bl	80069c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005e62:	2027      	movs	r0, #39	; 0x27
 8005e64:	f000 fdcb 	bl	80069fe <HAL_NVIC_EnableIRQ>
}
 8005e68:	bf00      	nop
 8005e6a:	3730      	adds	r7, #48	; 0x30
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40004800 	.word	0x40004800
 8005e74:	40023800 	.word	0x40023800
 8005e78:	40020400 	.word	0x40020400
 8005e7c:	40020c00 	.word	0x40020c00
 8005e80:	20000d10 	.word	0x20000d10
 8005e84:	40026028 	.word	0x40026028
 8005e88:	20000db4 	.word	0x20000db4
 8005e8c:	40026070 	.word	0x40026070

08005e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e94:	480d      	ldr	r0, [pc, #52]	; (8005ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005e96:	490e      	ldr	r1, [pc, #56]	; (8005ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005e98:	4a0e      	ldr	r2, [pc, #56]	; (8005ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e9c:	e002      	b.n	8005ea4 <LoopCopyDataInit>

08005e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ea2:	3304      	adds	r3, #4

08005ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ea8:	d3f9      	bcc.n	8005e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005eaa:	4a0b      	ldr	r2, [pc, #44]	; (8005ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005eac:	4c0b      	ldr	r4, [pc, #44]	; (8005edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8005eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005eb0:	e001      	b.n	8005eb6 <LoopFillZerobss>

08005eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005eb4:	3204      	adds	r2, #4

08005eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005eb8:	d3fb      	bcc.n	8005eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005eba:	f7ff fb6b 	bl	8005594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ebe:	f006 f82b 	bl	800bf18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ec2:	f7fe fedd 	bl	8004c80 <main>
  bx  lr    
 8005ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ed0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8005ed4:	0800d534 	.word	0x0800d534
  ldr r2, =_sbss
 8005ed8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8005edc:	20000ecc 	.word	0x20000ecc

08005ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ee0:	e7fe      	b.n	8005ee0 <ADC_IRQHandler>
	...

08005ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <HAL_Init+0x40>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a0d      	ldr	r2, [pc, #52]	; (8005f24 <HAL_Init+0x40>)
 8005eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <HAL_Init+0x40>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <HAL_Init+0x40>)
 8005efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f00:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <HAL_Init+0x40>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <HAL_Init+0x40>)
 8005f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f0c:	2003      	movs	r0, #3
 8005f0e:	f000 fd4f 	bl	80069b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f12:	200f      	movs	r0, #15
 8005f14:	f000 f808 	bl	8005f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f18:	f7ff f9c0 	bl	800529c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	40023c00 	.word	0x40023c00

08005f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f30:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <HAL_InitTick+0x54>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <HAL_InitTick+0x58>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fd67 	bl	8006a1a <HAL_SYSTICK_Config>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e00e      	b.n	8005f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b0f      	cmp	r3, #15
 8005f5a:	d80a      	bhi.n	8005f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295
 8005f64:	f000 fd2f 	bl	80069c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f68:	4a06      	ldr	r2, [pc, #24]	; (8005f84 <HAL_InitTick+0x5c>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e000      	b.n	8005f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	2000003c 	.word	0x2000003c
 8005f80:	20000044 	.word	0x20000044
 8005f84:	20000040 	.word	0x20000040

08005f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <HAL_IncTick+0x20>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_IncTick+0x24>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4413      	add	r3, r2
 8005f98:	4a04      	ldr	r2, [pc, #16]	; (8005fac <HAL_IncTick+0x24>)
 8005f9a:	6013      	str	r3, [r2, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20000044 	.word	0x20000044
 8005fac:	20000eb8 	.word	0x20000eb8

08005fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8005fb4:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <HAL_GetTick+0x14>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20000eb8 	.word	0x20000eb8

08005fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fd0:	f7ff ffee 	bl	8005fb0 <HAL_GetTick>
 8005fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d005      	beq.n	8005fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	; (800600c <HAL_Delay+0x44>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005fee:	bf00      	nop
 8005ff0:	f7ff ffde 	bl	8005fb0 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d8f7      	bhi.n	8005ff0 <HAL_Delay+0x28>
  {
  }
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000044 	.word	0x20000044

08006010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e033      	b.n	800608e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fc fcdc 	bl	80029ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b00      	cmp	r3, #0
 800604c:	d118      	bne.n	8006080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006056:	f023 0302 	bic.w	r3, r3, #2
 800605a:	f043 0202 	orr.w	r2, r3, #2
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fad8 	bl	8006618 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	f023 0303 	bic.w	r3, r3, #3
 8006076:	f043 0201 	orr.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	641a      	str	r2, [r3, #64]	; 0x40
 800607e:	e001      	b.n	8006084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_ADC_Start+0x1a>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e0b2      	b.n	8006218 <HAL_ADC_Start+0x180>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d018      	beq.n	80060fa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80060d8:	4b52      	ldr	r3, [pc, #328]	; (8006224 <HAL_ADC_Start+0x18c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a52      	ldr	r2, [pc, #328]	; (8006228 <HAL_ADC_Start+0x190>)
 80060de:	fba2 2303 	umull	r2, r3, r2, r3
 80060e2:	0c9a      	lsrs	r2, r3, #18
 80060e4:	4613      	mov	r3, r2
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	4413      	add	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80060ec:	e002      	b.n	80060f4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	3b01      	subs	r3, #1
 80060f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f9      	bne.n	80060ee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b01      	cmp	r3, #1
 8006106:	d17a      	bne.n	80061fe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006132:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006146:	d106      	bne.n	8006156 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614c:	f023 0206 	bic.w	r2, r3, #6
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	645a      	str	r2, [r3, #68]	; 0x44
 8006154:	e002      	b.n	800615c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006164:	4b31      	ldr	r3, [pc, #196]	; (800622c <HAL_ADC_Start+0x194>)
 8006166:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006170:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	2b00      	cmp	r3, #0
 800617c:	d12a      	bne.n	80061d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a2b      	ldr	r2, [pc, #172]	; (8006230 <HAL_ADC_Start+0x198>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d015      	beq.n	80061b4 <HAL_ADC_Start+0x11c>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a29      	ldr	r2, [pc, #164]	; (8006234 <HAL_ADC_Start+0x19c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d105      	bne.n	800619e <HAL_ADC_Start+0x106>
 8006192:	4b26      	ldr	r3, [pc, #152]	; (800622c <HAL_ADC_Start+0x194>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a25      	ldr	r2, [pc, #148]	; (8006238 <HAL_ADC_Start+0x1a0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d136      	bne.n	8006216 <HAL_ADC_Start+0x17e>
 80061a8:	4b20      	ldr	r3, [pc, #128]	; (800622c <HAL_ADC_Start+0x194>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d130      	bne.n	8006216 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d129      	bne.n	8006216 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061d0:	609a      	str	r2, [r3, #8]
 80061d2:	e020      	b.n	8006216 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a15      	ldr	r2, [pc, #84]	; (8006230 <HAL_ADC_Start+0x198>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d11b      	bne.n	8006216 <HAL_ADC_Start+0x17e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d114      	bne.n	8006216 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80061fa:	609a      	str	r2, [r3, #8]
 80061fc:	e00b      	b.n	8006216 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f043 0210 	orr.w	r2, r3, #16
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	f043 0201 	orr.w	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	2000003c 	.word	0x2000003c
 8006228:	431bde83 	.word	0x431bde83
 800622c:	40012300 	.word	0x40012300
 8006230:	40012000 	.word	0x40012000
 8006234:	40012100 	.word	0x40012100
 8006238:	40012200 	.word	0x40012200

0800623c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800624a:	2b01      	cmp	r3, #1
 800624c:	d101      	bne.n	8006252 <HAL_ADC_Stop+0x16>
 800624e:	2302      	movs	r3, #2
 8006250:	e021      	b.n	8006296 <HAL_ADC_Stop+0x5a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d109      	bne.n	800628c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006280:	f023 0301 	bic.w	r3, r3, #1
 8006284:	f043 0201 	orr.w	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062be:	d113      	bne.n	80062e8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ce:	d10b      	bne.n	80062e8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	f043 0220 	orr.w	r2, r3, #32
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e063      	b.n	80063b0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80062e8:	f7ff fe62 	bl	8005fb0 <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80062ee:	e021      	b.n	8006334 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d01d      	beq.n	8006334 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <HAL_ADC_PollForConversion+0x6c>
 80062fe:	f7ff fe57 	bl	8005fb0 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d212      	bcs.n	8006334 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b02      	cmp	r3, #2
 800631a:	d00b      	beq.n	8006334 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	f043 0204 	orr.w	r2, r3, #4
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e03d      	b.n	80063b0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d1d6      	bne.n	80062f0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f06f 0212 	mvn.w	r2, #18
 800634a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d123      	bne.n	80063ae <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800636a:	2b00      	cmp	r3, #0
 800636c:	d11f      	bne.n	80063ae <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006378:	2b00      	cmp	r3, #0
 800637a:	d006      	beq.n	800638a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006386:	2b00      	cmp	r3, #0
 8006388:	d111      	bne.n	80063ae <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d105      	bne.n	80063ae <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	f043 0201 	orr.w	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_ADC_ConfigChannel+0x1c>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e105      	b.n	80065fc <HAL_ADC_ConfigChannel+0x228>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b09      	cmp	r3, #9
 80063fe:	d925      	bls.n	800644c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68d9      	ldr	r1, [r3, #12]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	4613      	mov	r3, r2
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	4413      	add	r3, r2
 8006414:	3b1e      	subs	r3, #30
 8006416:	2207      	movs	r2, #7
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	43da      	mvns	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	400a      	ands	r2, r1
 8006424:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68d9      	ldr	r1, [r3, #12]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	4618      	mov	r0, r3
 8006438:	4603      	mov	r3, r0
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	4403      	add	r3, r0
 800643e:	3b1e      	subs	r3, #30
 8006440:	409a      	lsls	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	60da      	str	r2, [r3, #12]
 800644a:	e022      	b.n	8006492 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6919      	ldr	r1, [r3, #16]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	461a      	mov	r2, r3
 800645a:	4613      	mov	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	4413      	add	r3, r2
 8006460:	2207      	movs	r2, #7
 8006462:	fa02 f303 	lsl.w	r3, r2, r3
 8006466:	43da      	mvns	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	400a      	ands	r2, r1
 800646e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6919      	ldr	r1, [r3, #16]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	4618      	mov	r0, r3
 8006482:	4603      	mov	r3, r0
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	4403      	add	r3, r0
 8006488:	409a      	lsls	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b06      	cmp	r3, #6
 8006498:	d824      	bhi.n	80064e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	3b05      	subs	r3, #5
 80064ac:	221f      	movs	r2, #31
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	43da      	mvns	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	400a      	ands	r2, r1
 80064ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	4618      	mov	r0, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	3b05      	subs	r3, #5
 80064d6:	fa00 f203 	lsl.w	r2, r0, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	635a      	str	r2, [r3, #52]	; 0x34
 80064e2:	e04c      	b.n	800657e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2b0c      	cmp	r3, #12
 80064ea:	d824      	bhi.n	8006536 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	3b23      	subs	r3, #35	; 0x23
 80064fe:	221f      	movs	r2, #31
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	43da      	mvns	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	400a      	ands	r2, r1
 800650c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	b29b      	uxth	r3, r3
 800651a:	4618      	mov	r0, r3
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	3b23      	subs	r3, #35	; 0x23
 8006528:	fa00 f203 	lsl.w	r2, r0, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
 8006534:	e023      	b.n	800657e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	3b41      	subs	r3, #65	; 0x41
 8006548:	221f      	movs	r2, #31
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	43da      	mvns	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	400a      	ands	r2, r1
 8006556:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	b29b      	uxth	r3, r3
 8006564:	4618      	mov	r0, r3
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	3b41      	subs	r3, #65	; 0x41
 8006572:	fa00 f203 	lsl.w	r2, r0, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800657e:	4b22      	ldr	r3, [pc, #136]	; (8006608 <HAL_ADC_ConfigChannel+0x234>)
 8006580:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a21      	ldr	r2, [pc, #132]	; (800660c <HAL_ADC_ConfigChannel+0x238>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d109      	bne.n	80065a0 <HAL_ADC_ConfigChannel+0x1cc>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b12      	cmp	r3, #18
 8006592:	d105      	bne.n	80065a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a19      	ldr	r2, [pc, #100]	; (800660c <HAL_ADC_ConfigChannel+0x238>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d123      	bne.n	80065f2 <HAL_ADC_ConfigChannel+0x21e>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b10      	cmp	r3, #16
 80065b0:	d003      	beq.n	80065ba <HAL_ADC_ConfigChannel+0x1e6>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b11      	cmp	r3, #17
 80065b8:	d11b      	bne.n	80065f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d111      	bne.n	80065f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80065ce:	4b10      	ldr	r3, [pc, #64]	; (8006610 <HAL_ADC_ConfigChannel+0x23c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a10      	ldr	r2, [pc, #64]	; (8006614 <HAL_ADC_ConfigChannel+0x240>)
 80065d4:	fba2 2303 	umull	r2, r3, r2, r3
 80065d8:	0c9a      	lsrs	r2, r3, #18
 80065da:	4613      	mov	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80065e4:	e002      	b.n	80065ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f9      	bne.n	80065e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	40012300 	.word	0x40012300
 800660c:	40012000 	.word	0x40012000
 8006610:	2000003c 	.word	0x2000003c
 8006614:	431bde83 	.word	0x431bde83

08006618 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006620:	4b79      	ldr	r3, [pc, #484]	; (8006808 <ADC_Init+0x1f0>)
 8006622:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	431a      	orrs	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800664c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6859      	ldr	r1, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	021a      	lsls	r2, r3, #8
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6859      	ldr	r1, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689a      	ldr	r2, [r3, #8]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6899      	ldr	r1, [r3, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	4a58      	ldr	r2, [pc, #352]	; (800680c <ADC_Init+0x1f4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d022      	beq.n	80066f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6899      	ldr	r1, [r3, #8]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80066e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6899      	ldr	r1, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	609a      	str	r2, [r3, #8]
 80066f4:	e00f      	b.n	8006716 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006714:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0202 	bic.w	r2, r2, #2
 8006724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6899      	ldr	r1, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	7e1b      	ldrb	r3, [r3, #24]
 8006730:	005a      	lsls	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01b      	beq.n	800677c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006752:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006762:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6859      	ldr	r1, [r3, #4]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	3b01      	subs	r3, #1
 8006770:	035a      	lsls	r2, r3, #13
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
 800677a:	e007      	b.n	800678c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800678a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800679a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	051a      	lsls	r2, r3, #20
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6899      	ldr	r1, [r3, #8]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067ce:	025a      	lsls	r2, r3, #9
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6899      	ldr	r1, [r3, #8]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	029a      	lsls	r2, r3, #10
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	609a      	str	r2, [r3, #8]
}
 80067fc:	bf00      	nop
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40012300 	.word	0x40012300
 800680c:	0f000001 	.word	0x0f000001

08006810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006820:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <__NVIC_SetPriorityGrouping+0x44>)
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800682c:	4013      	ands	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800683c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006842:	4a04      	ldr	r2, [pc, #16]	; (8006854 <__NVIC_SetPriorityGrouping+0x44>)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	60d3      	str	r3, [r2, #12]
}
 8006848:	bf00      	nop
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	e000ed00 	.word	0xe000ed00

08006858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800685c:	4b04      	ldr	r3, [pc, #16]	; (8006870 <__NVIC_GetPriorityGrouping+0x18>)
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	0a1b      	lsrs	r3, r3, #8
 8006862:	f003 0307 	and.w	r3, r3, #7
}
 8006866:	4618      	mov	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	e000ed00 	.word	0xe000ed00

08006874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800687e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006882:	2b00      	cmp	r3, #0
 8006884:	db0b      	blt.n	800689e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	f003 021f 	and.w	r2, r3, #31
 800688c:	4907      	ldr	r1, [pc, #28]	; (80068ac <__NVIC_EnableIRQ+0x38>)
 800688e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006892:	095b      	lsrs	r3, r3, #5
 8006894:	2001      	movs	r0, #1
 8006896:	fa00 f202 	lsl.w	r2, r0, r2
 800689a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	e000e100 	.word	0xe000e100

080068b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	6039      	str	r1, [r7, #0]
 80068ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	db0a      	blt.n	80068da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	490c      	ldr	r1, [pc, #48]	; (80068fc <__NVIC_SetPriority+0x4c>)
 80068ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ce:	0112      	lsls	r2, r2, #4
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	440b      	add	r3, r1
 80068d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068d8:	e00a      	b.n	80068f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	4908      	ldr	r1, [pc, #32]	; (8006900 <__NVIC_SetPriority+0x50>)
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	3b04      	subs	r3, #4
 80068e8:	0112      	lsls	r2, r2, #4
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	440b      	add	r3, r1
 80068ee:	761a      	strb	r2, [r3, #24]
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	e000e100 	.word	0xe000e100
 8006900:	e000ed00 	.word	0xe000ed00

08006904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006904:	b480      	push	{r7}
 8006906:	b089      	sub	sp, #36	; 0x24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f1c3 0307 	rsb	r3, r3, #7
 800691e:	2b04      	cmp	r3, #4
 8006920:	bf28      	it	cs
 8006922:	2304      	movcs	r3, #4
 8006924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	3304      	adds	r3, #4
 800692a:	2b06      	cmp	r3, #6
 800692c:	d902      	bls.n	8006934 <NVIC_EncodePriority+0x30>
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3b03      	subs	r3, #3
 8006932:	e000      	b.n	8006936 <NVIC_EncodePriority+0x32>
 8006934:	2300      	movs	r3, #0
 8006936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006938:	f04f 32ff 	mov.w	r2, #4294967295
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	43da      	mvns	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	401a      	ands	r2, r3
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800694c:	f04f 31ff 	mov.w	r1, #4294967295
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	fa01 f303 	lsl.w	r3, r1, r3
 8006956:	43d9      	mvns	r1, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800695c:	4313      	orrs	r3, r2
         );
}
 800695e:	4618      	mov	r0, r3
 8006960:	3724      	adds	r7, #36	; 0x24
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3b01      	subs	r3, #1
 8006978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800697c:	d301      	bcc.n	8006982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800697e:	2301      	movs	r3, #1
 8006980:	e00f      	b.n	80069a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006982:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <SysTick_Config+0x40>)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3b01      	subs	r3, #1
 8006988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800698a:	210f      	movs	r1, #15
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	f7ff ff8e 	bl	80068b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <SysTick_Config+0x40>)
 8006996:	2200      	movs	r2, #0
 8006998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800699a:	4b04      	ldr	r3, [pc, #16]	; (80069ac <SysTick_Config+0x40>)
 800699c:	2207      	movs	r2, #7
 800699e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	e000e010 	.word	0xe000e010

080069b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff ff29 	bl	8006810 <__NVIC_SetPriorityGrouping>
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	4603      	mov	r3, r0
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	607a      	str	r2, [r7, #4]
 80069d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069d8:	f7ff ff3e 	bl	8006858 <__NVIC_GetPriorityGrouping>
 80069dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	6978      	ldr	r0, [r7, #20]
 80069e4:	f7ff ff8e 	bl	8006904 <NVIC_EncodePriority>
 80069e8:	4602      	mov	r2, r0
 80069ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ee:	4611      	mov	r1, r2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff ff5d 	bl	80068b0 <__NVIC_SetPriority>
}
 80069f6:	bf00      	nop
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	4603      	mov	r3, r0
 8006a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff ff31 	bl	8006874 <__NVIC_EnableIRQ>
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff ffa2 	bl	800696c <SysTick_Config>
 8006a28:	4603      	mov	r3, r0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a40:	f7ff fab6 	bl	8005fb0 <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e099      	b.n	8006b84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0201 	bic.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a70:	e00f      	b.n	8006a92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a72:	f7ff fa9d 	bl	8005fb0 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b05      	cmp	r3, #5
 8006a7e:	d908      	bls.n	8006a92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e078      	b.n	8006b84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e8      	bne.n	8006a72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4b38      	ldr	r3, [pc, #224]	; (8006b8c <HAL_DMA_Init+0x158>)
 8006aac:	4013      	ands	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d107      	bne.n	8006afc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	4313      	orrs	r3, r2
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f023 0307 	bic.w	r3, r3, #7
 8006b12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d117      	bne.n	8006b56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00e      	beq.n	8006b56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fb01 	bl	8007140 <DMA_CheckFifoParam>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2240      	movs	r2, #64	; 0x40
 8006b48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b52:	2301      	movs	r3, #1
 8006b54:	e016      	b.n	8006b84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fab8 	bl	80070d4 <DMA_CalcBaseAndBitshift>
 8006b64:	4603      	mov	r3, r0
 8006b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6c:	223f      	movs	r2, #63	; 0x3f
 8006b6e:	409a      	lsls	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	f010803f 	.word	0xf010803f

08006b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_DMA_Start_IT+0x26>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e040      	b.n	8006c38 <HAL_DMA_Start_IT+0xa8>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d12f      	bne.n	8006c2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fa4a 	bl	8007078 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be8:	223f      	movs	r2, #63	; 0x3f
 8006bea:	409a      	lsls	r2, r3
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0216 	orr.w	r2, r2, #22
 8006bfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d007      	beq.n	8006c18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0208 	orr.w	r2, r2, #8
 8006c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e005      	b.n	8006c36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c32:	2302      	movs	r3, #2
 8006c34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c4e:	f7ff f9af 	bl	8005fb0 <HAL_GetTick>
 8006c52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d008      	beq.n	8006c72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2280      	movs	r2, #128	; 0x80
 8006c64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e052      	b.n	8006d18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0216 	bic.w	r2, r2, #22
 8006c80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	695a      	ldr	r2, [r3, #20]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <HAL_DMA_Abort+0x62>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0208 	bic.w	r2, r2, #8
 8006cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0201 	bic.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cc2:	e013      	b.n	8006cec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cc4:	f7ff f974 	bl	8005fb0 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b05      	cmp	r3, #5
 8006cd0:	d90c      	bls.n	8006cec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2220      	movs	r2, #32
 8006cd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2203      	movs	r2, #3
 8006cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e015      	b.n	8006d18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e4      	bne.n	8006cc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfe:	223f      	movs	r2, #63	; 0x3f
 8006d00:	409a      	lsls	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d004      	beq.n	8006d3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2280      	movs	r2, #128	; 0x80
 8006d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e00c      	b.n	8006d58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2205      	movs	r2, #5
 8006d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0201 	bic.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d70:	4b92      	ldr	r3, [pc, #584]	; (8006fbc <HAL_DMA_IRQHandler+0x258>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a92      	ldr	r2, [pc, #584]	; (8006fc0 <HAL_DMA_IRQHandler+0x25c>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	0a9b      	lsrs	r3, r3, #10
 8006d7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8e:	2208      	movs	r2, #8
 8006d90:	409a      	lsls	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4013      	ands	r3, r2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d01a      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d013      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0204 	bic.w	r2, r2, #4
 8006db6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	409a      	lsls	r2, r3
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc8:	f043 0201 	orr.w	r2, r3, #1
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	409a      	lsls	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d012      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00b      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df2:	2201      	movs	r2, #1
 8006df4:	409a      	lsls	r2, r3
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfe:	f043 0202 	orr.w	r2, r3, #2
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	409a      	lsls	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4013      	ands	r3, r2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d012      	beq.n	8006e3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e28:	2204      	movs	r2, #4
 8006e2a:	409a      	lsls	r2, r3
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e34:	f043 0204 	orr.w	r2, r3, #4
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e40:	2210      	movs	r2, #16
 8006e42:	409a      	lsls	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4013      	ands	r3, r2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d043      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d03c      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5e:	2210      	movs	r2, #16
 8006e60:	409a      	lsls	r2, r3
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d018      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d108      	bne.n	8006e94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d024      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
 8006e92:	e01f      	b.n	8006ed4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01b      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
 8006ea4:	e016      	b.n	8006ed4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d107      	bne.n	8006ec4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0208 	bic.w	r2, r2, #8
 8006ec2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed8:	2220      	movs	r2, #32
 8006eda:	409a      	lsls	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 808e 	beq.w	8007002 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8086 	beq.w	8007002 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efa:	2220      	movs	r2, #32
 8006efc:	409a      	lsls	r2, r3
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	d136      	bne.n	8006f7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 0216 	bic.w	r2, r2, #22
 8006f1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695a      	ldr	r2, [r3, #20]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d103      	bne.n	8006f3e <HAL_DMA_IRQHandler+0x1da>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d007      	beq.n	8006f4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0208 	bic.w	r2, r2, #8
 8006f4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f52:	223f      	movs	r2, #63	; 0x3f
 8006f54:	409a      	lsls	r2, r3
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d07d      	beq.n	800706e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
        }
        return;
 8006f7a:	e078      	b.n	800706e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d01c      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d108      	bne.n	8006faa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d030      	beq.n	8007002 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	4798      	blx	r3
 8006fa8:	e02b      	b.n	8007002 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d027      	beq.n	8007002 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
 8006fba:	e022      	b.n	8007002 <HAL_DMA_IRQHandler+0x29e>
 8006fbc:	2000003c 	.word	0x2000003c
 8006fc0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10f      	bne.n	8006ff2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0210 	bic.w	r2, r2, #16
 8006fe0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007006:	2b00      	cmp	r3, #0
 8007008:	d032      	beq.n	8007070 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d022      	beq.n	800705c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2205      	movs	r2, #5
 800701a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0201 	bic.w	r2, r2, #1
 800702c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	3301      	adds	r3, #1
 8007032:	60bb      	str	r3, [r7, #8]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	429a      	cmp	r2, r3
 8007038:	d307      	bcc.n	800704a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1f2      	bne.n	800702e <HAL_DMA_IRQHandler+0x2ca>
 8007048:	e000      	b.n	800704c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800704a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
 800706c:	e000      	b.n	8007070 <HAL_DMA_IRQHandler+0x30c>
        return;
 800706e:	bf00      	nop
    }
  }
}
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop

08007078 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007094:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d108      	bne.n	80070b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80070b6:	e007      	b.n	80070c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	60da      	str	r2, [r3, #12]
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	3b10      	subs	r3, #16
 80070e4:	4a14      	ldr	r2, [pc, #80]	; (8007138 <DMA_CalcBaseAndBitshift+0x64>)
 80070e6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ea:	091b      	lsrs	r3, r3, #4
 80070ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80070ee:	4a13      	ldr	r2, [pc, #76]	; (800713c <DMA_CalcBaseAndBitshift+0x68>)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d909      	bls.n	8007116 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800710a:	f023 0303 	bic.w	r3, r3, #3
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	659a      	str	r2, [r3, #88]	; 0x58
 8007114:	e007      	b.n	8007126 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	aaaaaaab 	.word	0xaaaaaaab
 800713c:	0800cfc8 	.word	0x0800cfc8

08007140 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d11f      	bne.n	800719a <DMA_CheckFifoParam+0x5a>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b03      	cmp	r3, #3
 800715e:	d856      	bhi.n	800720e <DMA_CheckFifoParam+0xce>
 8007160:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <DMA_CheckFifoParam+0x28>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	08007179 	.word	0x08007179
 800716c:	0800718b 	.word	0x0800718b
 8007170:	08007179 	.word	0x08007179
 8007174:	0800720f 	.word	0x0800720f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d046      	beq.n	8007212 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007188:	e043      	b.n	8007212 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007192:	d140      	bne.n	8007216 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007198:	e03d      	b.n	8007216 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071a2:	d121      	bne.n	80071e8 <DMA_CheckFifoParam+0xa8>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d837      	bhi.n	800721a <DMA_CheckFifoParam+0xda>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <DMA_CheckFifoParam+0x70>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071c7 	.word	0x080071c7
 80071b8:	080071c1 	.word	0x080071c1
 80071bc:	080071d9 	.word	0x080071d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
      break;
 80071c4:	e030      	b.n	8007228 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d025      	beq.n	800721e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071d6:	e022      	b.n	800721e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071e0:	d11f      	bne.n	8007222 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80071e6:	e01c      	b.n	8007222 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d903      	bls.n	80071f6 <DMA_CheckFifoParam+0xb6>
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d003      	beq.n	80071fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80071f4:	e018      	b.n	8007228 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	73fb      	strb	r3, [r7, #15]
      break;
 80071fa:	e015      	b.n	8007228 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00e      	beq.n	8007226 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]
      break;
 800720c:	e00b      	b.n	8007226 <DMA_CheckFifoParam+0xe6>
      break;
 800720e:	bf00      	nop
 8007210:	e00a      	b.n	8007228 <DMA_CheckFifoParam+0xe8>
      break;
 8007212:	bf00      	nop
 8007214:	e008      	b.n	8007228 <DMA_CheckFifoParam+0xe8>
      break;
 8007216:	bf00      	nop
 8007218:	e006      	b.n	8007228 <DMA_CheckFifoParam+0xe8>
      break;
 800721a:	bf00      	nop
 800721c:	e004      	b.n	8007228 <DMA_CheckFifoParam+0xe8>
      break;
 800721e:	bf00      	nop
 8007220:	e002      	b.n	8007228 <DMA_CheckFifoParam+0xe8>
      break;   
 8007222:	bf00      	nop
 8007224:	e000      	b.n	8007228 <DMA_CheckFifoParam+0xe8>
      break;
 8007226:	bf00      	nop
    }
  } 
  
  return status; 
 8007228:	7bfb      	ldrb	r3, [r7, #15]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop

08007238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007238:	b480      	push	{r7}
 800723a:	b089      	sub	sp, #36	; 0x24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007246:	2300      	movs	r3, #0
 8007248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800724a:	2300      	movs	r3, #0
 800724c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800724e:	2300      	movs	r3, #0
 8007250:	61fb      	str	r3, [r7, #28]
 8007252:	e16b      	b.n	800752c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007254:	2201      	movs	r2, #1
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4013      	ands	r3, r2
 8007266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	429a      	cmp	r2, r3
 800726e:	f040 815a 	bne.w	8007526 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b01      	cmp	r3, #1
 800727c:	d005      	beq.n	800728a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007286:	2b02      	cmp	r3, #2
 8007288:	d130      	bne.n	80072ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	2203      	movs	r2, #3
 8007296:	fa02 f303 	lsl.w	r3, r2, r3
 800729a:	43db      	mvns	r3, r3
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	4013      	ands	r3, r2
 80072a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	fa02 f303 	lsl.w	r3, r2, r3
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072c0:	2201      	movs	r2, #1
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	43db      	mvns	r3, r3
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	4013      	ands	r3, r2
 80072ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	091b      	lsrs	r3, r3, #4
 80072d6:	f003 0201 	and.w	r2, r3, #1
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	fa02 f303 	lsl.w	r3, r2, r3
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d017      	beq.n	8007328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	2203      	movs	r2, #3
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	43db      	mvns	r3, r3
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	4013      	ands	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	fa02 f303 	lsl.w	r3, r2, r3
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	4313      	orrs	r3, r2
 8007320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d123      	bne.n	800737c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	08da      	lsrs	r2, r3, #3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3208      	adds	r2, #8
 800733c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	220f      	movs	r2, #15
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	43db      	mvns	r3, r3
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	4013      	ands	r3, r2
 8007356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	fa02 f303 	lsl.w	r3, r2, r3
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	4313      	orrs	r3, r2
 800736c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	08da      	lsrs	r2, r3, #3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	3208      	adds	r2, #8
 8007376:	69b9      	ldr	r1, [r7, #24]
 8007378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	2203      	movs	r2, #3
 8007388:	fa02 f303 	lsl.w	r3, r2, r3
 800738c:	43db      	mvns	r3, r3
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	4013      	ands	r3, r2
 8007392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f003 0203 	and.w	r2, r3, #3
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 80b4 	beq.w	8007526 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073be:	2300      	movs	r3, #0
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	4b60      	ldr	r3, [pc, #384]	; (8007544 <HAL_GPIO_Init+0x30c>)
 80073c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c6:	4a5f      	ldr	r2, [pc, #380]	; (8007544 <HAL_GPIO_Init+0x30c>)
 80073c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073cc:	6453      	str	r3, [r2, #68]	; 0x44
 80073ce:	4b5d      	ldr	r3, [pc, #372]	; (8007544 <HAL_GPIO_Init+0x30c>)
 80073d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073da:	4a5b      	ldr	r2, [pc, #364]	; (8007548 <HAL_GPIO_Init+0x310>)
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	089b      	lsrs	r3, r3, #2
 80073e0:	3302      	adds	r3, #2
 80073e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	220f      	movs	r2, #15
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	43db      	mvns	r3, r3
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	4013      	ands	r3, r2
 80073fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a52      	ldr	r2, [pc, #328]	; (800754c <HAL_GPIO_Init+0x314>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d02b      	beq.n	800745e <HAL_GPIO_Init+0x226>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a51      	ldr	r2, [pc, #324]	; (8007550 <HAL_GPIO_Init+0x318>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d025      	beq.n	800745a <HAL_GPIO_Init+0x222>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a50      	ldr	r2, [pc, #320]	; (8007554 <HAL_GPIO_Init+0x31c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d01f      	beq.n	8007456 <HAL_GPIO_Init+0x21e>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a4f      	ldr	r2, [pc, #316]	; (8007558 <HAL_GPIO_Init+0x320>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d019      	beq.n	8007452 <HAL_GPIO_Init+0x21a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a4e      	ldr	r2, [pc, #312]	; (800755c <HAL_GPIO_Init+0x324>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d013      	beq.n	800744e <HAL_GPIO_Init+0x216>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a4d      	ldr	r2, [pc, #308]	; (8007560 <HAL_GPIO_Init+0x328>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00d      	beq.n	800744a <HAL_GPIO_Init+0x212>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a4c      	ldr	r2, [pc, #304]	; (8007564 <HAL_GPIO_Init+0x32c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d007      	beq.n	8007446 <HAL_GPIO_Init+0x20e>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a4b      	ldr	r2, [pc, #300]	; (8007568 <HAL_GPIO_Init+0x330>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d101      	bne.n	8007442 <HAL_GPIO_Init+0x20a>
 800743e:	2307      	movs	r3, #7
 8007440:	e00e      	b.n	8007460 <HAL_GPIO_Init+0x228>
 8007442:	2308      	movs	r3, #8
 8007444:	e00c      	b.n	8007460 <HAL_GPIO_Init+0x228>
 8007446:	2306      	movs	r3, #6
 8007448:	e00a      	b.n	8007460 <HAL_GPIO_Init+0x228>
 800744a:	2305      	movs	r3, #5
 800744c:	e008      	b.n	8007460 <HAL_GPIO_Init+0x228>
 800744e:	2304      	movs	r3, #4
 8007450:	e006      	b.n	8007460 <HAL_GPIO_Init+0x228>
 8007452:	2303      	movs	r3, #3
 8007454:	e004      	b.n	8007460 <HAL_GPIO_Init+0x228>
 8007456:	2302      	movs	r3, #2
 8007458:	e002      	b.n	8007460 <HAL_GPIO_Init+0x228>
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <HAL_GPIO_Init+0x228>
 800745e:	2300      	movs	r3, #0
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	f002 0203 	and.w	r2, r2, #3
 8007466:	0092      	lsls	r2, r2, #2
 8007468:	4093      	lsls	r3, r2
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	4313      	orrs	r3, r2
 800746e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007470:	4935      	ldr	r1, [pc, #212]	; (8007548 <HAL_GPIO_Init+0x310>)
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	089b      	lsrs	r3, r3, #2
 8007476:	3302      	adds	r3, #2
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800747e:	4b3b      	ldr	r3, [pc, #236]	; (800756c <HAL_GPIO_Init+0x334>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	43db      	mvns	r3, r3
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	4013      	ands	r3, r2
 800748c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80074a2:	4a32      	ldr	r2, [pc, #200]	; (800756c <HAL_GPIO_Init+0x334>)
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80074a8:	4b30      	ldr	r3, [pc, #192]	; (800756c <HAL_GPIO_Init+0x334>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	43db      	mvns	r3, r3
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	4013      	ands	r3, r2
 80074b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80074cc:	4a27      	ldr	r2, [pc, #156]	; (800756c <HAL_GPIO_Init+0x334>)
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074d2:	4b26      	ldr	r3, [pc, #152]	; (800756c <HAL_GPIO_Init+0x334>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	43db      	mvns	r3, r3
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4013      	ands	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074f6:	4a1d      	ldr	r2, [pc, #116]	; (800756c <HAL_GPIO_Init+0x334>)
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074fc:	4b1b      	ldr	r3, [pc, #108]	; (800756c <HAL_GPIO_Init+0x334>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	43db      	mvns	r3, r3
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	4013      	ands	r3, r2
 800750a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	4313      	orrs	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007520:	4a12      	ldr	r2, [pc, #72]	; (800756c <HAL_GPIO_Init+0x334>)
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	3301      	adds	r3, #1
 800752a:	61fb      	str	r3, [r7, #28]
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b0f      	cmp	r3, #15
 8007530:	f67f ae90 	bls.w	8007254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	3724      	adds	r7, #36	; 0x24
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	40023800 	.word	0x40023800
 8007548:	40013800 	.word	0x40013800
 800754c:	40020000 	.word	0x40020000
 8007550:	40020400 	.word	0x40020400
 8007554:	40020800 	.word	0x40020800
 8007558:	40020c00 	.word	0x40020c00
 800755c:	40021000 	.word	0x40021000
 8007560:	40021400 	.word	0x40021400
 8007564:	40021800 	.word	0x40021800
 8007568:	40021c00 	.word	0x40021c00
 800756c:	40013c00 	.word	0x40013c00

08007570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691a      	ldr	r2, [r3, #16]
 8007580:	887b      	ldrh	r3, [r7, #2]
 8007582:	4013      	ands	r3, r2
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007588:	2301      	movs	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
 800758c:	e001      	b.n	8007592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007592:	7bfb      	ldrb	r3, [r7, #15]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	807b      	strh	r3, [r7, #2]
 80075ac:	4613      	mov	r3, r2
 80075ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075b0:	787b      	ldrb	r3, [r7, #1]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075b6:	887a      	ldrh	r2, [r7, #2]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075bc:	e003      	b.n	80075c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075be:	887b      	ldrh	r3, [r7, #2]
 80075c0:	041a      	lsls	r2, r3, #16
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	619a      	str	r2, [r3, #24]
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b085      	sub	sp, #20
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80075e4:	887a      	ldrh	r2, [r7, #2]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4013      	ands	r3, r2
 80075ea:	041a      	lsls	r2, r3, #16
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	43d9      	mvns	r1, r3
 80075f0:	887b      	ldrh	r3, [r7, #2]
 80075f2:	400b      	ands	r3, r1
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	619a      	str	r2, [r3, #24]
}
 80075fa:	bf00      	nop
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
	...

08007608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e264      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d075      	beq.n	8007712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007626:	4ba3      	ldr	r3, [pc, #652]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 030c 	and.w	r3, r3, #12
 800762e:	2b04      	cmp	r3, #4
 8007630:	d00c      	beq.n	800764c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007632:	4ba0      	ldr	r3, [pc, #640]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800763a:	2b08      	cmp	r3, #8
 800763c:	d112      	bne.n	8007664 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800763e:	4b9d      	ldr	r3, [pc, #628]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800764a:	d10b      	bne.n	8007664 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800764c:	4b99      	ldr	r3, [pc, #612]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d05b      	beq.n	8007710 <HAL_RCC_OscConfig+0x108>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d157      	bne.n	8007710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e23f      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766c:	d106      	bne.n	800767c <HAL_RCC_OscConfig+0x74>
 800766e:	4b91      	ldr	r3, [pc, #580]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a90      	ldr	r2, [pc, #576]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	e01d      	b.n	80076b8 <HAL_RCC_OscConfig+0xb0>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007684:	d10c      	bne.n	80076a0 <HAL_RCC_OscConfig+0x98>
 8007686:	4b8b      	ldr	r3, [pc, #556]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a8a      	ldr	r2, [pc, #552]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 800768c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	4b88      	ldr	r3, [pc, #544]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a87      	ldr	r2, [pc, #540]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	e00b      	b.n	80076b8 <HAL_RCC_OscConfig+0xb0>
 80076a0:	4b84      	ldr	r3, [pc, #528]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a83      	ldr	r2, [pc, #524]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 80076a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	4b81      	ldr	r3, [pc, #516]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a80      	ldr	r2, [pc, #512]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 80076b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d013      	beq.n	80076e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c0:	f7fe fc76 	bl	8005fb0 <HAL_GetTick>
 80076c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076c6:	e008      	b.n	80076da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076c8:	f7fe fc72 	bl	8005fb0 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	2b64      	cmp	r3, #100	; 0x64
 80076d4:	d901      	bls.n	80076da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e204      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076da:	4b76      	ldr	r3, [pc, #472]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0f0      	beq.n	80076c8 <HAL_RCC_OscConfig+0xc0>
 80076e6:	e014      	b.n	8007712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e8:	f7fe fc62 	bl	8005fb0 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076f0:	f7fe fc5e 	bl	8005fb0 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b64      	cmp	r3, #100	; 0x64
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e1f0      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007702:	4b6c      	ldr	r3, [pc, #432]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f0      	bne.n	80076f0 <HAL_RCC_OscConfig+0xe8>
 800770e:	e000      	b.n	8007712 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d063      	beq.n	80077e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800771e:	4b65      	ldr	r3, [pc, #404]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 030c 	and.w	r3, r3, #12
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00b      	beq.n	8007742 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800772a:	4b62      	ldr	r3, [pc, #392]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007732:	2b08      	cmp	r3, #8
 8007734:	d11c      	bne.n	8007770 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007736:	4b5f      	ldr	r3, [pc, #380]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d116      	bne.n	8007770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007742:	4b5c      	ldr	r3, [pc, #368]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <HAL_RCC_OscConfig+0x152>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d001      	beq.n	800775a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e1c4      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800775a:	4b56      	ldr	r3, [pc, #344]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	4952      	ldr	r1, [pc, #328]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 800776a:	4313      	orrs	r3, r2
 800776c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800776e:	e03a      	b.n	80077e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d020      	beq.n	80077ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007778:	4b4f      	ldr	r3, [pc, #316]	; (80078b8 <HAL_RCC_OscConfig+0x2b0>)
 800777a:	2201      	movs	r2, #1
 800777c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777e:	f7fe fc17 	bl	8005fb0 <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007784:	e008      	b.n	8007798 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007786:	f7fe fc13 	bl	8005fb0 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e1a5      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007798:	4b46      	ldr	r3, [pc, #280]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f0      	beq.n	8007786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077a4:	4b43      	ldr	r3, [pc, #268]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	4940      	ldr	r1, [pc, #256]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	600b      	str	r3, [r1, #0]
 80077b8:	e015      	b.n	80077e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077ba:	4b3f      	ldr	r3, [pc, #252]	; (80078b8 <HAL_RCC_OscConfig+0x2b0>)
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c0:	f7fe fbf6 	bl	8005fb0 <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077c6:	e008      	b.n	80077da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077c8:	f7fe fbf2 	bl	8005fb0 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e184      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077da:	4b36      	ldr	r3, [pc, #216]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1f0      	bne.n	80077c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d030      	beq.n	8007854 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d016      	beq.n	8007828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077fa:	4b30      	ldr	r3, [pc, #192]	; (80078bc <HAL_RCC_OscConfig+0x2b4>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007800:	f7fe fbd6 	bl	8005fb0 <HAL_GetTick>
 8007804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007808:	f7fe fbd2 	bl	8005fb0 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e164      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800781a:	4b26      	ldr	r3, [pc, #152]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 800781c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0f0      	beq.n	8007808 <HAL_RCC_OscConfig+0x200>
 8007826:	e015      	b.n	8007854 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007828:	4b24      	ldr	r3, [pc, #144]	; (80078bc <HAL_RCC_OscConfig+0x2b4>)
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800782e:	f7fe fbbf 	bl	8005fb0 <HAL_GetTick>
 8007832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007834:	e008      	b.n	8007848 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007836:	f7fe fbbb 	bl	8005fb0 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e14d      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007848:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 800784a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f0      	bne.n	8007836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 80a0 	beq.w	80079a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007866:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10f      	bne.n	8007892 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007872:	2300      	movs	r3, #0
 8007874:	60bb      	str	r3, [r7, #8]
 8007876:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	4a0e      	ldr	r2, [pc, #56]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 800787c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007880:	6413      	str	r3, [r2, #64]	; 0x40
 8007882:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <HAL_RCC_OscConfig+0x2ac>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800788a:	60bb      	str	r3, [r7, #8]
 800788c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800788e:	2301      	movs	r3, #1
 8007890:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <HAL_RCC_OscConfig+0x2b8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789a:	2b00      	cmp	r3, #0
 800789c:	d121      	bne.n	80078e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800789e:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <HAL_RCC_OscConfig+0x2b8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a07      	ldr	r2, [pc, #28]	; (80078c0 <HAL_RCC_OscConfig+0x2b8>)
 80078a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078aa:	f7fe fb81 	bl	8005fb0 <HAL_GetTick>
 80078ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b0:	e011      	b.n	80078d6 <HAL_RCC_OscConfig+0x2ce>
 80078b2:	bf00      	nop
 80078b4:	40023800 	.word	0x40023800
 80078b8:	42470000 	.word	0x42470000
 80078bc:	42470e80 	.word	0x42470e80
 80078c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078c4:	f7fe fb74 	bl	8005fb0 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e106      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d6:	4b85      	ldr	r3, [pc, #532]	; (8007aec <HAL_RCC_OscConfig+0x4e4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0f0      	beq.n	80078c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d106      	bne.n	80078f8 <HAL_RCC_OscConfig+0x2f0>
 80078ea:	4b81      	ldr	r3, [pc, #516]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 80078ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ee:	4a80      	ldr	r2, [pc, #512]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 80078f0:	f043 0301 	orr.w	r3, r3, #1
 80078f4:	6713      	str	r3, [r2, #112]	; 0x70
 80078f6:	e01c      	b.n	8007932 <HAL_RCC_OscConfig+0x32a>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	2b05      	cmp	r3, #5
 80078fe:	d10c      	bne.n	800791a <HAL_RCC_OscConfig+0x312>
 8007900:	4b7b      	ldr	r3, [pc, #492]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 8007902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007904:	4a7a      	ldr	r2, [pc, #488]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 8007906:	f043 0304 	orr.w	r3, r3, #4
 800790a:	6713      	str	r3, [r2, #112]	; 0x70
 800790c:	4b78      	ldr	r3, [pc, #480]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 800790e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007910:	4a77      	ldr	r2, [pc, #476]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	6713      	str	r3, [r2, #112]	; 0x70
 8007918:	e00b      	b.n	8007932 <HAL_RCC_OscConfig+0x32a>
 800791a:	4b75      	ldr	r3, [pc, #468]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 800791c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791e:	4a74      	ldr	r2, [pc, #464]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 8007920:	f023 0301 	bic.w	r3, r3, #1
 8007924:	6713      	str	r3, [r2, #112]	; 0x70
 8007926:	4b72      	ldr	r3, [pc, #456]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 8007928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792a:	4a71      	ldr	r2, [pc, #452]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 800792c:	f023 0304 	bic.w	r3, r3, #4
 8007930:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d015      	beq.n	8007966 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800793a:	f7fe fb39 	bl	8005fb0 <HAL_GetTick>
 800793e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007940:	e00a      	b.n	8007958 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007942:	f7fe fb35 	bl	8005fb0 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007950:	4293      	cmp	r3, r2
 8007952:	d901      	bls.n	8007958 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e0c5      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007958:	4b65      	ldr	r3, [pc, #404]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 800795a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d0ee      	beq.n	8007942 <HAL_RCC_OscConfig+0x33a>
 8007964:	e014      	b.n	8007990 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007966:	f7fe fb23 	bl	8005fb0 <HAL_GetTick>
 800796a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800796c:	e00a      	b.n	8007984 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800796e:	f7fe fb1f 	bl	8005fb0 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	f241 3288 	movw	r2, #5000	; 0x1388
 800797c:	4293      	cmp	r3, r2
 800797e:	d901      	bls.n	8007984 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e0af      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007984:	4b5a      	ldr	r3, [pc, #360]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 8007986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1ee      	bne.n	800796e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007990:	7dfb      	ldrb	r3, [r7, #23]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d105      	bne.n	80079a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007996:	4b56      	ldr	r3, [pc, #344]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	4a55      	ldr	r2, [pc, #340]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 800799c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 809b 	beq.w	8007ae2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079ac:	4b50      	ldr	r3, [pc, #320]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f003 030c 	and.w	r3, r3, #12
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	d05c      	beq.n	8007a72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d141      	bne.n	8007a44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079c0:	4b4c      	ldr	r3, [pc, #304]	; (8007af4 <HAL_RCC_OscConfig+0x4ec>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079c6:	f7fe faf3 	bl	8005fb0 <HAL_GetTick>
 80079ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079cc:	e008      	b.n	80079e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079ce:	f7fe faef 	bl	8005fb0 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e081      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079e0:	4b43      	ldr	r3, [pc, #268]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f0      	bne.n	80079ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	69da      	ldr	r2, [r3, #28]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	431a      	orrs	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	019b      	lsls	r3, r3, #6
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	3b01      	subs	r3, #1
 8007a06:	041b      	lsls	r3, r3, #16
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	061b      	lsls	r3, r3, #24
 8007a10:	4937      	ldr	r1, [pc, #220]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a16:	4b37      	ldr	r3, [pc, #220]	; (8007af4 <HAL_RCC_OscConfig+0x4ec>)
 8007a18:	2201      	movs	r2, #1
 8007a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a1c:	f7fe fac8 	bl	8005fb0 <HAL_GetTick>
 8007a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a22:	e008      	b.n	8007a36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a24:	f7fe fac4 	bl	8005fb0 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e056      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a36:	4b2e      	ldr	r3, [pc, #184]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f0      	beq.n	8007a24 <HAL_RCC_OscConfig+0x41c>
 8007a42:	e04e      	b.n	8007ae2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a44:	4b2b      	ldr	r3, [pc, #172]	; (8007af4 <HAL_RCC_OscConfig+0x4ec>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a4a:	f7fe fab1 	bl	8005fb0 <HAL_GetTick>
 8007a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a50:	e008      	b.n	8007a64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a52:	f7fe faad 	bl	8005fb0 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d901      	bls.n	8007a64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e03f      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a64:	4b22      	ldr	r3, [pc, #136]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1f0      	bne.n	8007a52 <HAL_RCC_OscConfig+0x44a>
 8007a70:	e037      	b.n	8007ae2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e032      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a7e:	4b1c      	ldr	r3, [pc, #112]	; (8007af0 <HAL_RCC_OscConfig+0x4e8>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d028      	beq.n	8007ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d121      	bne.n	8007ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d11a      	bne.n	8007ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007aae:	4013      	ands	r3, r2
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ab4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d111      	bne.n	8007ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac4:	085b      	lsrs	r3, r3, #1
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d107      	bne.n	8007ade <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d001      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40007000 	.word	0x40007000
 8007af0:	40023800 	.word	0x40023800
 8007af4:	42470060 	.word	0x42470060

08007af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e0cc      	b.n	8007ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b0c:	4b68      	ldr	r3, [pc, #416]	; (8007cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d90c      	bls.n	8007b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b1a:	4b65      	ldr	r3, [pc, #404]	; (8007cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b22:	4b63      	ldr	r3, [pc, #396]	; (8007cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d001      	beq.n	8007b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e0b8      	b.n	8007ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0302 	and.w	r3, r3, #2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d020      	beq.n	8007b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d005      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b4c:	4b59      	ldr	r3, [pc, #356]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	4a58      	ldr	r2, [pc, #352]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d005      	beq.n	8007b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b64:	4b53      	ldr	r3, [pc, #332]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	4a52      	ldr	r2, [pc, #328]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b70:	4b50      	ldr	r3, [pc, #320]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	494d      	ldr	r1, [pc, #308]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d044      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d107      	bne.n	8007ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b96:	4b47      	ldr	r3, [pc, #284]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d119      	bne.n	8007bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e07f      	b.n	8007ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d003      	beq.n	8007bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d107      	bne.n	8007bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bb6:	4b3f      	ldr	r3, [pc, #252]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d109      	bne.n	8007bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e06f      	b.n	8007ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bc6:	4b3b      	ldr	r3, [pc, #236]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e067      	b.n	8007ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bd6:	4b37      	ldr	r3, [pc, #220]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f023 0203 	bic.w	r2, r3, #3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	4934      	ldr	r1, [pc, #208]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007be8:	f7fe f9e2 	bl	8005fb0 <HAL_GetTick>
 8007bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bee:	e00a      	b.n	8007c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bf0:	f7fe f9de 	bl	8005fb0 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e04f      	b.n	8007ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c06:	4b2b      	ldr	r3, [pc, #172]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f003 020c 	and.w	r2, r3, #12
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d1eb      	bne.n	8007bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c18:	4b25      	ldr	r3, [pc, #148]	; (8007cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0307 	and.w	r3, r3, #7
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d20c      	bcs.n	8007c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c26:	4b22      	ldr	r3, [pc, #136]	; (8007cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c2e:	4b20      	ldr	r3, [pc, #128]	; (8007cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d001      	beq.n	8007c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e032      	b.n	8007ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d008      	beq.n	8007c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c4c:	4b19      	ldr	r3, [pc, #100]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	4916      	ldr	r1, [pc, #88]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d009      	beq.n	8007c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c6a:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	490e      	ldr	r1, [pc, #56]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c7e:	f000 f821 	bl	8007cc4 <HAL_RCC_GetSysClockFreq>
 8007c82:	4602      	mov	r2, r0
 8007c84:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	091b      	lsrs	r3, r3, #4
 8007c8a:	f003 030f 	and.w	r3, r3, #15
 8007c8e:	490a      	ldr	r1, [pc, #40]	; (8007cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c90:	5ccb      	ldrb	r3, [r1, r3]
 8007c92:	fa22 f303 	lsr.w	r3, r2, r3
 8007c96:	4a09      	ldr	r2, [pc, #36]	; (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c9a:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fe f942 	bl	8005f28 <HAL_InitTick>

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	40023c00 	.word	0x40023c00
 8007cb4:	40023800 	.word	0x40023800
 8007cb8:	0800cfb0 	.word	0x0800cfb0
 8007cbc:	2000003c 	.word	0x2000003c
 8007cc0:	20000040 	.word	0x20000040

08007cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007cc8:	b084      	sub	sp, #16
 8007cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	607b      	str	r3, [r7, #4]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cdc:	4b67      	ldr	r3, [pc, #412]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f003 030c 	and.w	r3, r3, #12
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d00d      	beq.n	8007d04 <HAL_RCC_GetSysClockFreq+0x40>
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	f200 80bd 	bhi.w	8007e68 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d003      	beq.n	8007cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8007cf6:	e0b7      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cf8:	4b61      	ldr	r3, [pc, #388]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007cfa:	60bb      	str	r3, [r7, #8]
       break;
 8007cfc:	e0b7      	b.n	8007e6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cfe:	4b61      	ldr	r3, [pc, #388]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007d00:	60bb      	str	r3, [r7, #8]
      break;
 8007d02:	e0b4      	b.n	8007e6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d04:	4b5d      	ldr	r3, [pc, #372]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d0e:	4b5b      	ldr	r3, [pc, #364]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d04d      	beq.n	8007db6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d1a:	4b58      	ldr	r3, [pc, #352]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	099b      	lsrs	r3, r3, #6
 8007d20:	461a      	mov	r2, r3
 8007d22:	f04f 0300 	mov.w	r3, #0
 8007d26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d2a:	f04f 0100 	mov.w	r1, #0
 8007d2e:	ea02 0800 	and.w	r8, r2, r0
 8007d32:	ea03 0901 	and.w	r9, r3, r1
 8007d36:	4640      	mov	r0, r8
 8007d38:	4649      	mov	r1, r9
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	f04f 0300 	mov.w	r3, #0
 8007d42:	014b      	lsls	r3, r1, #5
 8007d44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d48:	0142      	lsls	r2, r0, #5
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	ebb0 0008 	subs.w	r0, r0, r8
 8007d52:	eb61 0109 	sbc.w	r1, r1, r9
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	f04f 0300 	mov.w	r3, #0
 8007d5e:	018b      	lsls	r3, r1, #6
 8007d60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d64:	0182      	lsls	r2, r0, #6
 8007d66:	1a12      	subs	r2, r2, r0
 8007d68:	eb63 0301 	sbc.w	r3, r3, r1
 8007d6c:	f04f 0000 	mov.w	r0, #0
 8007d70:	f04f 0100 	mov.w	r1, #0
 8007d74:	00d9      	lsls	r1, r3, #3
 8007d76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d7a:	00d0      	lsls	r0, r2, #3
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	eb12 0208 	adds.w	r2, r2, r8
 8007d84:	eb43 0309 	adc.w	r3, r3, r9
 8007d88:	f04f 0000 	mov.w	r0, #0
 8007d8c:	f04f 0100 	mov.w	r1, #0
 8007d90:	0259      	lsls	r1, r3, #9
 8007d92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007d96:	0250      	lsls	r0, r2, #9
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	461a      	mov	r2, r3
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	f7f8 ff30 	bl	8000c0c <__aeabi_uldivmod>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	4613      	mov	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e04a      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007db6:	4b31      	ldr	r3, [pc, #196]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	099b      	lsrs	r3, r3, #6
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	f04f 0300 	mov.w	r3, #0
 8007dc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007dc6:	f04f 0100 	mov.w	r1, #0
 8007dca:	ea02 0400 	and.w	r4, r2, r0
 8007dce:	ea03 0501 	and.w	r5, r3, r1
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	f04f 0200 	mov.w	r2, #0
 8007dda:	f04f 0300 	mov.w	r3, #0
 8007dde:	014b      	lsls	r3, r1, #5
 8007de0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007de4:	0142      	lsls	r2, r0, #5
 8007de6:	4610      	mov	r0, r2
 8007de8:	4619      	mov	r1, r3
 8007dea:	1b00      	subs	r0, r0, r4
 8007dec:	eb61 0105 	sbc.w	r1, r1, r5
 8007df0:	f04f 0200 	mov.w	r2, #0
 8007df4:	f04f 0300 	mov.w	r3, #0
 8007df8:	018b      	lsls	r3, r1, #6
 8007dfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007dfe:	0182      	lsls	r2, r0, #6
 8007e00:	1a12      	subs	r2, r2, r0
 8007e02:	eb63 0301 	sbc.w	r3, r3, r1
 8007e06:	f04f 0000 	mov.w	r0, #0
 8007e0a:	f04f 0100 	mov.w	r1, #0
 8007e0e:	00d9      	lsls	r1, r3, #3
 8007e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e14:	00d0      	lsls	r0, r2, #3
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	1912      	adds	r2, r2, r4
 8007e1c:	eb45 0303 	adc.w	r3, r5, r3
 8007e20:	f04f 0000 	mov.w	r0, #0
 8007e24:	f04f 0100 	mov.w	r1, #0
 8007e28:	0299      	lsls	r1, r3, #10
 8007e2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e2e:	0290      	lsls	r0, r2, #10
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	4610      	mov	r0, r2
 8007e36:	4619      	mov	r1, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f04f 0300 	mov.w	r3, #0
 8007e40:	f7f8 fee4 	bl	8000c0c <__aeabi_uldivmod>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4613      	mov	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e4c:	4b0b      	ldr	r3, [pc, #44]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	0c1b      	lsrs	r3, r3, #16
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	3301      	adds	r3, #1
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e64:	60bb      	str	r3, [r7, #8]
      break;
 8007e66:	e002      	b.n	8007e6e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e68:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e6a:	60bb      	str	r3, [r7, #8]
      break;
 8007e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e6e:	68bb      	ldr	r3, [r7, #8]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40023800 	.word	0x40023800
 8007e80:	00f42400 	.word	0x00f42400
 8007e84:	007a1200 	.word	0x007a1200

08007e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e8c:	4b03      	ldr	r3, [pc, #12]	; (8007e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	2000003c 	.word	0x2000003c

08007ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ea4:	f7ff fff0 	bl	8007e88 <HAL_RCC_GetHCLKFreq>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	0a9b      	lsrs	r3, r3, #10
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	4903      	ldr	r1, [pc, #12]	; (8007ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eb6:	5ccb      	ldrb	r3, [r1, r3]
 8007eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	40023800 	.word	0x40023800
 8007ec4:	0800cfc0 	.word	0x0800cfc0

08007ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ecc:	f7ff ffdc 	bl	8007e88 <HAL_RCC_GetHCLKFreq>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	0b5b      	lsrs	r3, r3, #13
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	4903      	ldr	r1, [pc, #12]	; (8007eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ede:	5ccb      	ldrb	r3, [r1, r3]
 8007ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	0800cfc0 	.word	0x0800cfc0

08007ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e07b      	b.n	8007ffa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d108      	bne.n	8007f1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f12:	d009      	beq.n	8007f28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	61da      	str	r2, [r3, #28]
 8007f1a:	e005      	b.n	8007f28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d106      	bne.n	8007f48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7fd f962 	bl	800520c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f70:	431a      	orrs	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	f003 0302 	and.w	r3, r3, #2
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
 8007f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fac:	ea42 0103 	orr.w	r1, r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	0c1b      	lsrs	r3, r3, #16
 8007fc6:	f003 0104 	and.w	r1, r3, #4
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	f003 0210 	and.w	r2, r3, #16
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69da      	ldr	r2, [r3, #28]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fe8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b088      	sub	sp, #32
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	603b      	str	r3, [r7, #0]
 800800e:	4613      	mov	r3, r2
 8008010:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_SPI_Transmit+0x22>
 8008020:	2302      	movs	r3, #2
 8008022:	e126      	b.n	8008272 <HAL_SPI_Transmit+0x270>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800802c:	f7fd ffc0 	bl	8005fb0 <HAL_GetTick>
 8008030:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008032:	88fb      	ldrh	r3, [r7, #6]
 8008034:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800803c:	b2db      	uxtb	r3, r3
 800803e:	2b01      	cmp	r3, #1
 8008040:	d002      	beq.n	8008048 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008042:	2302      	movs	r3, #2
 8008044:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008046:	e10b      	b.n	8008260 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <HAL_SPI_Transmit+0x52>
 800804e:	88fb      	ldrh	r3, [r7, #6]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d102      	bne.n	800805a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008058:	e102      	b.n	8008260 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2203      	movs	r2, #3
 800805e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	88fa      	ldrh	r2, [r7, #6]
 8008072:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	88fa      	ldrh	r2, [r7, #6]
 8008078:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a0:	d10f      	bne.n	80080c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	d007      	beq.n	80080e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080e8:	d14b      	bne.n	8008182 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <HAL_SPI_Transmit+0xf6>
 80080f2:	8afb      	ldrh	r3, [r7, #22]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d13e      	bne.n	8008176 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fc:	881a      	ldrh	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008108:	1c9a      	adds	r2, r3, #2
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008112:	b29b      	uxth	r3, r3
 8008114:	3b01      	subs	r3, #1
 8008116:	b29a      	uxth	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800811c:	e02b      	b.n	8008176 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b02      	cmp	r3, #2
 800812a:	d112      	bne.n	8008152 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008130:	881a      	ldrh	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	1c9a      	adds	r2, r3, #2
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008150:	e011      	b.n	8008176 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008152:	f7fd ff2d 	bl	8005fb0 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d803      	bhi.n	800816a <HAL_SPI_Transmit+0x168>
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008168:	d102      	bne.n	8008170 <HAL_SPI_Transmit+0x16e>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d102      	bne.n	8008176 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008174:	e074      	b.n	8008260 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800817a:	b29b      	uxth	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1ce      	bne.n	800811e <HAL_SPI_Transmit+0x11c>
 8008180:	e04c      	b.n	800821c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <HAL_SPI_Transmit+0x18e>
 800818a:	8afb      	ldrh	r3, [r7, #22]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d140      	bne.n	8008212 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	330c      	adds	r3, #12
 800819a:	7812      	ldrb	r2, [r2, #0]
 800819c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	3b01      	subs	r3, #1
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80081b6:	e02c      	b.n	8008212 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d113      	bne.n	80081ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	330c      	adds	r3, #12
 80081d0:	7812      	ldrb	r2, [r2, #0]
 80081d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80081ec:	e011      	b.n	8008212 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ee:	f7fd fedf 	bl	8005fb0 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d803      	bhi.n	8008206 <HAL_SPI_Transmit+0x204>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d102      	bne.n	800820c <HAL_SPI_Transmit+0x20a>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d102      	bne.n	8008212 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008210:	e026      	b.n	8008260 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008216:	b29b      	uxth	r3, r3
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1cd      	bne.n	80081b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fbcb 	bl	80089bc <SPI_EndRxTxTransaction>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800823a:	2300      	movs	r3, #0
 800823c:	613b      	str	r3, [r7, #16]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	77fb      	strb	r3, [r7, #31]
 800825c:	e000      	b.n	8008260 <HAL_SPI_Transmit+0x25e>
  }

error:
 800825e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008270:	7ffb      	ldrb	r3, [r7, #31]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3720      	adds	r7, #32
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b088      	sub	sp, #32
 800827e:	af02      	add	r7, sp, #8
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	603b      	str	r3, [r7, #0]
 8008286:	4613      	mov	r3, r2
 8008288:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008296:	d112      	bne.n	80082be <HAL_SPI_Receive+0x44>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10e      	bne.n	80082be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2204      	movs	r2, #4
 80082a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80082a8:	88fa      	ldrh	r2, [r7, #6]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	4613      	mov	r3, r2
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 f8f1 	bl	800849c <HAL_SPI_TransmitReceive>
 80082ba:	4603      	mov	r3, r0
 80082bc:	e0ea      	b.n	8008494 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_SPI_Receive+0x52>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e0e3      	b.n	8008494 <HAL_SPI_Receive+0x21a>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082d4:	f7fd fe6c 	bl	8005fb0 <HAL_GetTick>
 80082d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d002      	beq.n	80082ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80082e6:	2302      	movs	r3, #2
 80082e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082ea:	e0ca      	b.n	8008482 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <HAL_SPI_Receive+0x7e>
 80082f2:	88fb      	ldrh	r3, [r7, #6]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d102      	bne.n	80082fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082fc:	e0c1      	b.n	8008482 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2204      	movs	r2, #4
 8008302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	88fa      	ldrh	r2, [r7, #6]
 8008316:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008344:	d10f      	bne.n	8008366 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008364:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008370:	2b40      	cmp	r3, #64	; 0x40
 8008372:	d007      	beq.n	8008384 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008382:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d162      	bne.n	8008452 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800838c:	e02e      	b.n	80083ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b01      	cmp	r3, #1
 800839a:	d115      	bne.n	80083c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f103 020c 	add.w	r2, r3, #12
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	7812      	ldrb	r2, [r2, #0]
 80083aa:	b2d2      	uxtb	r2, r2
 80083ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083bc:	b29b      	uxth	r3, r3
 80083be:	3b01      	subs	r3, #1
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083c6:	e011      	b.n	80083ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083c8:	f7fd fdf2 	bl	8005fb0 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d803      	bhi.n	80083e0 <HAL_SPI_Receive+0x166>
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083de:	d102      	bne.n	80083e6 <HAL_SPI_Receive+0x16c>
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d102      	bne.n	80083ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80083ea:	e04a      	b.n	8008482 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1cb      	bne.n	800838e <HAL_SPI_Receive+0x114>
 80083f6:	e031      	b.n	800845c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b01      	cmp	r3, #1
 8008404:	d113      	bne.n	800842e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68da      	ldr	r2, [r3, #12]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	b292      	uxth	r2, r2
 8008412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	1c9a      	adds	r2, r3, #2
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008422:	b29b      	uxth	r3, r3
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800842c:	e011      	b.n	8008452 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800842e:	f7fd fdbf 	bl	8005fb0 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d803      	bhi.n	8008446 <HAL_SPI_Receive+0x1cc>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008444:	d102      	bne.n	800844c <HAL_SPI_Receive+0x1d2>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d102      	bne.n	8008452 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008450:	e017      	b.n	8008482 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008456:	b29b      	uxth	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1cd      	bne.n	80083f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 fa45 	bl	80088f0 <SPI_EndRxTransaction>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2220      	movs	r2, #32
 8008470:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	75fb      	strb	r3, [r7, #23]
 800847e:	e000      	b.n	8008482 <HAL_SPI_Receive+0x208>
  }

error :
 8008480:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008492:	7dfb      	ldrb	r3, [r7, #23]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b08c      	sub	sp, #48	; 0x30
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80084aa:	2301      	movs	r3, #1
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d101      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x26>
 80084be:	2302      	movs	r3, #2
 80084c0:	e18a      	b.n	80087d8 <HAL_SPI_TransmitReceive+0x33c>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084ca:	f7fd fd71 	bl	8005fb0 <HAL_GetTick>
 80084ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80084e0:	887b      	ldrh	r3, [r7, #2]
 80084e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80084e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d00f      	beq.n	800850c <HAL_SPI_TransmitReceive+0x70>
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084f2:	d107      	bne.n	8008504 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d103      	bne.n	8008504 <HAL_SPI_TransmitReceive+0x68>
 80084fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008500:	2b04      	cmp	r3, #4
 8008502:	d003      	beq.n	800850c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008504:	2302      	movs	r3, #2
 8008506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800850a:	e15b      	b.n	80087c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d005      	beq.n	800851e <HAL_SPI_TransmitReceive+0x82>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <HAL_SPI_TransmitReceive+0x82>
 8008518:	887b      	ldrh	r3, [r7, #2]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d103      	bne.n	8008526 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008524:	e14e      	b.n	80087c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b04      	cmp	r3, #4
 8008530:	d003      	beq.n	800853a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2205      	movs	r2, #5
 8008536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	887a      	ldrh	r2, [r7, #2]
 800854a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	887a      	ldrh	r2, [r7, #2]
 8008550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	887a      	ldrh	r2, [r7, #2]
 800855c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	887a      	ldrh	r2, [r7, #2]
 8008562:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800857a:	2b40      	cmp	r3, #64	; 0x40
 800857c:	d007      	beq.n	800858e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800858c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008596:	d178      	bne.n	800868a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <HAL_SPI_TransmitReceive+0x10a>
 80085a0:	8b7b      	ldrh	r3, [r7, #26]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d166      	bne.n	8008674 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085aa:	881a      	ldrh	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	1c9a      	adds	r2, r3, #2
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085ca:	e053      	b.n	8008674 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d11b      	bne.n	8008612 <HAL_SPI_TransmitReceive+0x176>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085de:	b29b      	uxth	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d016      	beq.n	8008612 <HAL_SPI_TransmitReceive+0x176>
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d113      	bne.n	8008612 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ee:	881a      	ldrh	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	1c9a      	adds	r2, r3, #2
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008604:	b29b      	uxth	r3, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	b29a      	uxth	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b01      	cmp	r3, #1
 800861e:	d119      	bne.n	8008654 <HAL_SPI_TransmitReceive+0x1b8>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008624:	b29b      	uxth	r3, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d014      	beq.n	8008654 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68da      	ldr	r2, [r3, #12]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008634:	b292      	uxth	r2, r2
 8008636:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863c:	1c9a      	adds	r2, r3, #2
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008646:	b29b      	uxth	r3, r3
 8008648:	3b01      	subs	r3, #1
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008650:	2301      	movs	r3, #1
 8008652:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008654:	f7fd fcac 	bl	8005fb0 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008660:	429a      	cmp	r2, r3
 8008662:	d807      	bhi.n	8008674 <HAL_SPI_TransmitReceive+0x1d8>
 8008664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866a:	d003      	beq.n	8008674 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008672:	e0a7      	b.n	80087c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1a6      	bne.n	80085cc <HAL_SPI_TransmitReceive+0x130>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008682:	b29b      	uxth	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1a1      	bne.n	80085cc <HAL_SPI_TransmitReceive+0x130>
 8008688:	e07c      	b.n	8008784 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <HAL_SPI_TransmitReceive+0x1fc>
 8008692:	8b7b      	ldrh	r3, [r7, #26]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d16b      	bne.n	8008770 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	330c      	adds	r3, #12
 80086a2:	7812      	ldrb	r2, [r2, #0]
 80086a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086aa:	1c5a      	adds	r2, r3, #1
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	3b01      	subs	r3, #1
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086be:	e057      	b.n	8008770 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 0302 	and.w	r3, r3, #2
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d11c      	bne.n	8008708 <HAL_SPI_TransmitReceive+0x26c>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d017      	beq.n	8008708 <HAL_SPI_TransmitReceive+0x26c>
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d114      	bne.n	8008708 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	330c      	adds	r3, #12
 80086e8:	7812      	ldrb	r2, [r2, #0]
 80086ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b01      	cmp	r3, #1
 8008714:	d119      	bne.n	800874a <HAL_SPI_TransmitReceive+0x2ae>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800871a:	b29b      	uxth	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d014      	beq.n	800874a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	b2d2      	uxtb	r2, r2
 800872c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800873c:	b29b      	uxth	r3, r3
 800873e:	3b01      	subs	r3, #1
 8008740:	b29a      	uxth	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008746:	2301      	movs	r3, #1
 8008748:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800874a:	f7fd fc31 	bl	8005fb0 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008756:	429a      	cmp	r2, r3
 8008758:	d803      	bhi.n	8008762 <HAL_SPI_TransmitReceive+0x2c6>
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008760:	d102      	bne.n	8008768 <HAL_SPI_TransmitReceive+0x2cc>
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	2b00      	cmp	r3, #0
 8008766:	d103      	bne.n	8008770 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800876e:	e029      	b.n	80087c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008774:	b29b      	uxth	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1a2      	bne.n	80086c0 <HAL_SPI_TransmitReceive+0x224>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800877e:	b29b      	uxth	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d19d      	bne.n	80086c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 f917 	bl	80089bc <SPI_EndRxTxTransaction>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d006      	beq.n	80087a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2220      	movs	r2, #32
 800879e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80087a0:	e010      	b.n	80087c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10b      	bne.n	80087c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087aa:	2300      	movs	r3, #0
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	617b      	str	r3, [r7, #20]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	617b      	str	r3, [r7, #20]
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	e000      	b.n	80087c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80087c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80087d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3730      	adds	r7, #48	; 0x30
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b088      	sub	sp, #32
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	4613      	mov	r3, r2
 80087ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087f0:	f7fd fbde 	bl	8005fb0 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f8:	1a9b      	subs	r3, r3, r2
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	4413      	add	r3, r2
 80087fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008800:	f7fd fbd6 	bl	8005fb0 <HAL_GetTick>
 8008804:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008806:	4b39      	ldr	r3, [pc, #228]	; (80088ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	015b      	lsls	r3, r3, #5
 800880c:	0d1b      	lsrs	r3, r3, #20
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	fb02 f303 	mul.w	r3, r2, r3
 8008814:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008816:	e054      	b.n	80088c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881e:	d050      	beq.n	80088c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008820:	f7fd fbc6 	bl	8005fb0 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	429a      	cmp	r2, r3
 800882e:	d902      	bls.n	8008836 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d13d      	bne.n	80088b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800884e:	d111      	bne.n	8008874 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008858:	d004      	beq.n	8008864 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008862:	d107      	bne.n	8008874 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800887c:	d10f      	bne.n	800889e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800889c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e017      	b.n	80088e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80088b8:	2300      	movs	r3, #0
 80088ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	3b01      	subs	r3, #1
 80088c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4013      	ands	r3, r2
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	bf0c      	ite	eq
 80088d2:	2301      	moveq	r3, #1
 80088d4:	2300      	movne	r3, #0
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	461a      	mov	r2, r3
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d19b      	bne.n	8008818 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3720      	adds	r7, #32
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	2000003c 	.word	0x2000003c

080088f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008904:	d111      	bne.n	800892a <SPI_EndRxTransaction+0x3a>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800890e:	d004      	beq.n	800891a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008918:	d107      	bne.n	800892a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008928:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008932:	d12a      	bne.n	800898a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800893c:	d012      	beq.n	8008964 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2200      	movs	r2, #0
 8008946:	2180      	movs	r1, #128	; 0x80
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff ff49 	bl	80087e0 <SPI_WaitFlagStateUntilTimeout>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d02d      	beq.n	80089b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008958:	f043 0220 	orr.w	r2, r3, #32
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e026      	b.n	80089b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	2200      	movs	r2, #0
 800896c:	2101      	movs	r1, #1
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f7ff ff36 	bl	80087e0 <SPI_WaitFlagStateUntilTimeout>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d01a      	beq.n	80089b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800897e:	f043 0220 	orr.w	r2, r3, #32
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e013      	b.n	80089b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	2200      	movs	r2, #0
 8008992:	2101      	movs	r1, #1
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f7ff ff23 	bl	80087e0 <SPI_WaitFlagStateUntilTimeout>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d007      	beq.n	80089b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a4:	f043 0220 	orr.w	r2, r3, #32
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e000      	b.n	80089b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
	...

080089bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b088      	sub	sp, #32
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80089c8:	4b1b      	ldr	r3, [pc, #108]	; (8008a38 <SPI_EndRxTxTransaction+0x7c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a1b      	ldr	r2, [pc, #108]	; (8008a3c <SPI_EndRxTxTransaction+0x80>)
 80089ce:	fba2 2303 	umull	r2, r3, r2, r3
 80089d2:	0d5b      	lsrs	r3, r3, #21
 80089d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089d8:	fb02 f303 	mul.w	r3, r2, r3
 80089dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089e6:	d112      	bne.n	8008a0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2200      	movs	r2, #0
 80089f0:	2180      	movs	r1, #128	; 0x80
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f7ff fef4 	bl	80087e0 <SPI_WaitFlagStateUntilTimeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d016      	beq.n	8008a2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a02:	f043 0220 	orr.w	r2, r3, #32
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e00f      	b.n	8008a2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00a      	beq.n	8008a2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a24:	2b80      	cmp	r3, #128	; 0x80
 8008a26:	d0f2      	beq.n	8008a0e <SPI_EndRxTxTransaction+0x52>
 8008a28:	e000      	b.n	8008a2c <SPI_EndRxTxTransaction+0x70>
        break;
 8008a2a:	bf00      	nop
  }

  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	2000003c 	.word	0x2000003c
 8008a3c:	165e9f81 	.word	0x165e9f81

08008a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e041      	b.n	8008ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d106      	bne.n	8008a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7fc fed4 	bl	8005814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f000 fcc6 	bl	8009410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e041      	b.n	8008b74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d106      	bne.n	8008b0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f839 	bl	8008b7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	3304      	adds	r3, #4
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f000 fc77 	bl	8009410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d109      	bne.n	8008bbc <HAL_TIM_PWM_Start_DMA+0x2c>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	bf0c      	ite	eq
 8008bb4:	2301      	moveq	r3, #1
 8008bb6:	2300      	movne	r3, #0
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	e022      	b.n	8008c02 <HAL_TIM_PWM_Start_DMA+0x72>
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d109      	bne.n	8008bd6 <HAL_TIM_PWM_Start_DMA+0x46>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	bf0c      	ite	eq
 8008bce:	2301      	moveq	r3, #1
 8008bd0:	2300      	movne	r3, #0
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	e015      	b.n	8008c02 <HAL_TIM_PWM_Start_DMA+0x72>
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b08      	cmp	r3, #8
 8008bda:	d109      	bne.n	8008bf0 <HAL_TIM_PWM_Start_DMA+0x60>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	bf0c      	ite	eq
 8008be8:	2301      	moveq	r3, #1
 8008bea:	2300      	movne	r3, #0
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	e008      	b.n	8008c02 <HAL_TIM_PWM_Start_DMA+0x72>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	bf0c      	ite	eq
 8008bfc:	2301      	moveq	r3, #1
 8008bfe:	2300      	movne	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008c06:	2302      	movs	r3, #2
 8008c08:	e171      	b.n	8008eee <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d109      	bne.n	8008c24 <HAL_TIM_PWM_Start_DMA+0x94>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	bf0c      	ite	eq
 8008c1c:	2301      	moveq	r3, #1
 8008c1e:	2300      	movne	r3, #0
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	e022      	b.n	8008c6a <HAL_TIM_PWM_Start_DMA+0xda>
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	d109      	bne.n	8008c3e <HAL_TIM_PWM_Start_DMA+0xae>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	bf0c      	ite	eq
 8008c36:	2301      	moveq	r3, #1
 8008c38:	2300      	movne	r3, #0
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	e015      	b.n	8008c6a <HAL_TIM_PWM_Start_DMA+0xda>
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d109      	bne.n	8008c58 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	bf0c      	ite	eq
 8008c50:	2301      	moveq	r3, #1
 8008c52:	2300      	movne	r3, #0
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	e008      	b.n	8008c6a <HAL_TIM_PWM_Start_DMA+0xda>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	bf0c      	ite	eq
 8008c64:	2301      	moveq	r3, #1
 8008c66:	2300      	movne	r3, #0
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d024      	beq.n	8008cb8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d104      	bne.n	8008c7e <HAL_TIM_PWM_Start_DMA+0xee>
 8008c74:	887b      	ldrh	r3, [r7, #2]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e137      	b.n	8008eee <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d104      	bne.n	8008c8e <HAL_TIM_PWM_Start_DMA+0xfe>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2202      	movs	r2, #2
 8008c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c8c:	e016      	b.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x12c>
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d104      	bne.n	8008c9e <HAL_TIM_PWM_Start_DMA+0x10e>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2202      	movs	r2, #2
 8008c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c9c:	e00e      	b.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x12c>
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d104      	bne.n	8008cae <HAL_TIM_PWM_Start_DMA+0x11e>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cac:	e006      	b.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x12c>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cb6:	e001      	b.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e118      	b.n	8008eee <HAL_TIM_PWM_Start_DMA+0x35e>
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2b0c      	cmp	r3, #12
 8008cc0:	f200 80ae 	bhi.w	8008e20 <HAL_TIM_PWM_Start_DMA+0x290>
 8008cc4:	a201      	add	r2, pc, #4	; (adr r2, 8008ccc <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cca:	bf00      	nop
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008e21 	.word	0x08008e21
 8008cd4:	08008e21 	.word	0x08008e21
 8008cd8:	08008e21 	.word	0x08008e21
 8008cdc:	08008d49 	.word	0x08008d49
 8008ce0:	08008e21 	.word	0x08008e21
 8008ce4:	08008e21 	.word	0x08008e21
 8008ce8:	08008e21 	.word	0x08008e21
 8008cec:	08008d91 	.word	0x08008d91
 8008cf0:	08008e21 	.word	0x08008e21
 8008cf4:	08008e21 	.word	0x08008e21
 8008cf8:	08008e21 	.word	0x08008e21
 8008cfc:	08008dd9 	.word	0x08008dd9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	4a7c      	ldr	r2, [pc, #496]	; (8008ef8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008d06:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	4a7b      	ldr	r2, [pc, #492]	; (8008efc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008d0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d14:	4a7a      	ldr	r2, [pc, #488]	; (8008f00 <HAL_TIM_PWM_Start_DMA+0x370>)
 8008d16:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3334      	adds	r3, #52	; 0x34
 8008d24:	461a      	mov	r2, r3
 8008d26:	887b      	ldrh	r3, [r7, #2]
 8008d28:	f7fd ff32 	bl	8006b90 <HAL_DMA_Start_IT>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e0db      	b.n	8008eee <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68da      	ldr	r2, [r3, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d44:	60da      	str	r2, [r3, #12]
      break;
 8008d46:	e06e      	b.n	8008e26 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4c:	4a6a      	ldr	r2, [pc, #424]	; (8008ef8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008d4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d54:	4a69      	ldr	r2, [pc, #420]	; (8008efc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008d56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5c:	4a68      	ldr	r2, [pc, #416]	; (8008f00 <HAL_TIM_PWM_Start_DMA+0x370>)
 8008d5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008d64:	6879      	ldr	r1, [r7, #4]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3338      	adds	r3, #56	; 0x38
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	887b      	ldrh	r3, [r7, #2]
 8008d70:	f7fd ff0e 	bl	8006b90 <HAL_DMA_Start_IT>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e0b7      	b.n	8008eee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d8c:	60da      	str	r2, [r3, #12]
      break;
 8008d8e:	e04a      	b.n	8008e26 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	4a58      	ldr	r2, [pc, #352]	; (8008ef8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008d96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9c:	4a57      	ldr	r2, [pc, #348]	; (8008efc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008d9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da4:	4a56      	ldr	r2, [pc, #344]	; (8008f00 <HAL_TIM_PWM_Start_DMA+0x370>)
 8008da6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	333c      	adds	r3, #60	; 0x3c
 8008db4:	461a      	mov	r2, r3
 8008db6:	887b      	ldrh	r3, [r7, #2]
 8008db8:	f7fd feea 	bl	8006b90 <HAL_DMA_Start_IT>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e093      	b.n	8008eee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68da      	ldr	r2, [r3, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dd4:	60da      	str	r2, [r3, #12]
      break;
 8008dd6:	e026      	b.n	8008e26 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ddc:	4a46      	ldr	r2, [pc, #280]	; (8008ef8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008dde:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de4:	4a45      	ldr	r2, [pc, #276]	; (8008efc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008de6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dec:	4a44      	ldr	r2, [pc, #272]	; (8008f00 <HAL_TIM_PWM_Start_DMA+0x370>)
 8008dee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3340      	adds	r3, #64	; 0x40
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	887b      	ldrh	r3, [r7, #2]
 8008e00:	f7fd fec6 	bl	8006b90 <HAL_DMA_Start_IT>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e06f      	b.n	8008eee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e1c:	60da      	str	r2, [r3, #12]
      break;
 8008e1e:	e002      	b.n	8008e26 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	75fb      	strb	r3, [r7, #23]
      break;
 8008e24:	bf00      	nop
  }

  if (status == HAL_OK)
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d15f      	bne.n	8008eec <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2201      	movs	r2, #1
 8008e32:	68b9      	ldr	r1, [r7, #8]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 fdd5 	bl	80099e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a31      	ldr	r2, [pc, #196]	; (8008f04 <HAL_TIM_PWM_Start_DMA+0x374>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d004      	beq.n	8008e4e <HAL_TIM_PWM_Start_DMA+0x2be>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a2f      	ldr	r2, [pc, #188]	; (8008f08 <HAL_TIM_PWM_Start_DMA+0x378>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d101      	bne.n	8008e52 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e000      	b.n	8008e54 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8008e52:	2300      	movs	r3, #0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d007      	beq.n	8008e68 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e66:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a25      	ldr	r2, [pc, #148]	; (8008f04 <HAL_TIM_PWM_Start_DMA+0x374>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d022      	beq.n	8008eb8 <HAL_TIM_PWM_Start_DMA+0x328>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7a:	d01d      	beq.n	8008eb8 <HAL_TIM_PWM_Start_DMA+0x328>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a22      	ldr	r2, [pc, #136]	; (8008f0c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d018      	beq.n	8008eb8 <HAL_TIM_PWM_Start_DMA+0x328>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a21      	ldr	r2, [pc, #132]	; (8008f10 <HAL_TIM_PWM_Start_DMA+0x380>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d013      	beq.n	8008eb8 <HAL_TIM_PWM_Start_DMA+0x328>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1f      	ldr	r2, [pc, #124]	; (8008f14 <HAL_TIM_PWM_Start_DMA+0x384>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00e      	beq.n	8008eb8 <HAL_TIM_PWM_Start_DMA+0x328>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a1a      	ldr	r2, [pc, #104]	; (8008f08 <HAL_TIM_PWM_Start_DMA+0x378>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d009      	beq.n	8008eb8 <HAL_TIM_PWM_Start_DMA+0x328>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a1b      	ldr	r2, [pc, #108]	; (8008f18 <HAL_TIM_PWM_Start_DMA+0x388>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d004      	beq.n	8008eb8 <HAL_TIM_PWM_Start_DMA+0x328>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a1a      	ldr	r2, [pc, #104]	; (8008f1c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d111      	bne.n	8008edc <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	2b06      	cmp	r3, #6
 8008ec8:	d010      	beq.n	8008eec <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f042 0201 	orr.w	r2, r2, #1
 8008ed8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eda:	e007      	b.n	8008eec <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0201 	orr.w	r2, r2, #1
 8008eea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	08009301 	.word	0x08009301
 8008efc:	080093a9 	.word	0x080093a9
 8008f00:	0800926f 	.word	0x0800926f
 8008f04:	40010000 	.word	0x40010000
 8008f08:	40010400 	.word	0x40010400
 8008f0c:	40000400 	.word	0x40000400
 8008f10:	40000800 	.word	0x40000800
 8008f14:	40000c00 	.word	0x40000c00
 8008f18:	40014000 	.word	0x40014000
 8008f1c:	40001800 	.word	0x40001800

08008f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e0ae      	b.n	800909c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b0c      	cmp	r3, #12
 8008f4a:	f200 809f 	bhi.w	800908c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f4e:	a201      	add	r2, pc, #4	; (adr r2, 8008f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008f89 	.word	0x08008f89
 8008f58:	0800908d 	.word	0x0800908d
 8008f5c:	0800908d 	.word	0x0800908d
 8008f60:	0800908d 	.word	0x0800908d
 8008f64:	08008fc9 	.word	0x08008fc9
 8008f68:	0800908d 	.word	0x0800908d
 8008f6c:	0800908d 	.word	0x0800908d
 8008f70:	0800908d 	.word	0x0800908d
 8008f74:	0800900b 	.word	0x0800900b
 8008f78:	0800908d 	.word	0x0800908d
 8008f7c:	0800908d 	.word	0x0800908d
 8008f80:	0800908d 	.word	0x0800908d
 8008f84:	0800904b 	.word	0x0800904b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 fade 	bl	8009550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	699a      	ldr	r2, [r3, #24]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0208 	orr.w	r2, r2, #8
 8008fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699a      	ldr	r2, [r3, #24]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0204 	bic.w	r2, r2, #4
 8008fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6999      	ldr	r1, [r3, #24]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	691a      	ldr	r2, [r3, #16]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	619a      	str	r2, [r3, #24]
      break;
 8008fc6:	e064      	b.n	8009092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fb2e 	bl	8009630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699a      	ldr	r2, [r3, #24]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6999      	ldr	r1, [r3, #24]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	021a      	lsls	r2, r3, #8
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	619a      	str	r2, [r3, #24]
      break;
 8009008:	e043      	b.n	8009092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	4618      	mov	r0, r3
 8009012:	f000 fb83 	bl	800971c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69da      	ldr	r2, [r3, #28]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f042 0208 	orr.w	r2, r2, #8
 8009024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	69da      	ldr	r2, [r3, #28]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f022 0204 	bic.w	r2, r2, #4
 8009034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69d9      	ldr	r1, [r3, #28]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	691a      	ldr	r2, [r3, #16]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	61da      	str	r2, [r3, #28]
      break;
 8009048:	e023      	b.n	8009092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fbd7 	bl	8009804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69da      	ldr	r2, [r3, #28]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	69da      	ldr	r2, [r3, #28]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69d9      	ldr	r1, [r3, #28]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	021a      	lsls	r2, r3, #8
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	61da      	str	r2, [r3, #28]
      break;
 800908a:	e002      	b.n	8009092 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	75fb      	strb	r3, [r7, #23]
      break;
 8009090:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800909a:	7dfb      	ldrb	r3, [r7, #23]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d101      	bne.n	80090c0 <HAL_TIM_ConfigClockSource+0x1c>
 80090bc:	2302      	movs	r3, #2
 80090be:	e0b4      	b.n	800922a <HAL_TIM_ConfigClockSource+0x186>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80090de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f8:	d03e      	beq.n	8009178 <HAL_TIM_ConfigClockSource+0xd4>
 80090fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090fe:	f200 8087 	bhi.w	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009106:	f000 8086 	beq.w	8009216 <HAL_TIM_ConfigClockSource+0x172>
 800910a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800910e:	d87f      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009110:	2b70      	cmp	r3, #112	; 0x70
 8009112:	d01a      	beq.n	800914a <HAL_TIM_ConfigClockSource+0xa6>
 8009114:	2b70      	cmp	r3, #112	; 0x70
 8009116:	d87b      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009118:	2b60      	cmp	r3, #96	; 0x60
 800911a:	d050      	beq.n	80091be <HAL_TIM_ConfigClockSource+0x11a>
 800911c:	2b60      	cmp	r3, #96	; 0x60
 800911e:	d877      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009120:	2b50      	cmp	r3, #80	; 0x50
 8009122:	d03c      	beq.n	800919e <HAL_TIM_ConfigClockSource+0xfa>
 8009124:	2b50      	cmp	r3, #80	; 0x50
 8009126:	d873      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009128:	2b40      	cmp	r3, #64	; 0x40
 800912a:	d058      	beq.n	80091de <HAL_TIM_ConfigClockSource+0x13a>
 800912c:	2b40      	cmp	r3, #64	; 0x40
 800912e:	d86f      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009130:	2b30      	cmp	r3, #48	; 0x30
 8009132:	d064      	beq.n	80091fe <HAL_TIM_ConfigClockSource+0x15a>
 8009134:	2b30      	cmp	r3, #48	; 0x30
 8009136:	d86b      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009138:	2b20      	cmp	r3, #32
 800913a:	d060      	beq.n	80091fe <HAL_TIM_ConfigClockSource+0x15a>
 800913c:	2b20      	cmp	r3, #32
 800913e:	d867      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009140:	2b00      	cmp	r3, #0
 8009142:	d05c      	beq.n	80091fe <HAL_TIM_ConfigClockSource+0x15a>
 8009144:	2b10      	cmp	r3, #16
 8009146:	d05a      	beq.n	80091fe <HAL_TIM_ConfigClockSource+0x15a>
 8009148:	e062      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	6899      	ldr	r1, [r3, #8]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f000 fc23 	bl	80099a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800916c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	609a      	str	r2, [r3, #8]
      break;
 8009176:	e04f      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	6899      	ldr	r1, [r3, #8]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f000 fc0c 	bl	80099a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800919a:	609a      	str	r2, [r3, #8]
      break;
 800919c:	e03c      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	6859      	ldr	r1, [r3, #4]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	461a      	mov	r2, r3
 80091ac:	f000 fb80 	bl	80098b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2150      	movs	r1, #80	; 0x50
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 fbd9 	bl	800996e <TIM_ITRx_SetConfig>
      break;
 80091bc:	e02c      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6818      	ldr	r0, [r3, #0]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	6859      	ldr	r1, [r3, #4]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	461a      	mov	r2, r3
 80091cc:	f000 fb9f 	bl	800990e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2160      	movs	r1, #96	; 0x60
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fbc9 	bl	800996e <TIM_ITRx_SetConfig>
      break;
 80091dc:	e01c      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6818      	ldr	r0, [r3, #0]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	6859      	ldr	r1, [r3, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	461a      	mov	r2, r3
 80091ec:	f000 fb60 	bl	80098b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2140      	movs	r1, #64	; 0x40
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fbb9 	bl	800996e <TIM_ITRx_SetConfig>
      break;
 80091fc:	e00c      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4619      	mov	r1, r3
 8009208:	4610      	mov	r0, r2
 800920a:	f000 fbb0 	bl	800996e <TIM_ITRx_SetConfig>
      break;
 800920e:	e003      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	73fb      	strb	r3, [r7, #15]
      break;
 8009214:	e000      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800924e:	bf00      	nop
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr

0800925a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009262:	bf00      	nop
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	429a      	cmp	r2, r3
 8009284:	d107      	bne.n	8009296 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2201      	movs	r2, #1
 800928a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009294:	e02a      	b.n	80092ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	429a      	cmp	r2, r3
 800929e:	d107      	bne.n	80092b0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2202      	movs	r2, #2
 80092a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092ae:	e01d      	b.n	80092ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d107      	bne.n	80092ca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2204      	movs	r2, #4
 80092be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092c8:	e010      	b.n	80092ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d107      	bne.n	80092e4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2208      	movs	r2, #8
 80092d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092e2:	e003      	b.n	80092ec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f7ff ffb4 	bl	800925a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	771a      	strb	r2, [r3, #28]
}
 80092f8:	bf00      	nop
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	d10b      	bne.n	8009330 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2201      	movs	r2, #1
 800931c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d136      	bne.n	8009394 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800932e:	e031      	b.n	8009394 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	429a      	cmp	r2, r3
 8009338:	d10b      	bne.n	8009352 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2202      	movs	r2, #2
 800933e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d125      	bne.n	8009394 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009350:	e020      	b.n	8009394 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	429a      	cmp	r2, r3
 800935a:	d10b      	bne.n	8009374 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2204      	movs	r2, #4
 8009360:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d114      	bne.n	8009394 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009372:	e00f      	b.n	8009394 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	429a      	cmp	r2, r3
 800937c:	d10a      	bne.n	8009394 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2208      	movs	r2, #8
 8009382:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d103      	bne.n	8009394 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f7ff ff4c 	bl	8009232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	771a      	strb	r2, [r3, #28]
}
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d103      	bne.n	80093c8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2201      	movs	r2, #1
 80093c4:	771a      	strb	r2, [r3, #28]
 80093c6:	e019      	b.n	80093fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d103      	bne.n	80093da <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2202      	movs	r2, #2
 80093d6:	771a      	strb	r2, [r3, #28]
 80093d8:	e010      	b.n	80093fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d103      	bne.n	80093ec <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2204      	movs	r2, #4
 80093e8:	771a      	strb	r2, [r3, #28]
 80093ea:	e007      	b.n	80093fc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d102      	bne.n	80093fc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2208      	movs	r2, #8
 80093fa:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff ff22 	bl	8009246 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	771a      	strb	r2, [r3, #28]
}
 8009408:	bf00      	nop
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a40      	ldr	r2, [pc, #256]	; (8009524 <TIM_Base_SetConfig+0x114>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d013      	beq.n	8009450 <TIM_Base_SetConfig+0x40>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800942e:	d00f      	beq.n	8009450 <TIM_Base_SetConfig+0x40>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a3d      	ldr	r2, [pc, #244]	; (8009528 <TIM_Base_SetConfig+0x118>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d00b      	beq.n	8009450 <TIM_Base_SetConfig+0x40>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a3c      	ldr	r2, [pc, #240]	; (800952c <TIM_Base_SetConfig+0x11c>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d007      	beq.n	8009450 <TIM_Base_SetConfig+0x40>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a3b      	ldr	r2, [pc, #236]	; (8009530 <TIM_Base_SetConfig+0x120>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d003      	beq.n	8009450 <TIM_Base_SetConfig+0x40>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a3a      	ldr	r2, [pc, #232]	; (8009534 <TIM_Base_SetConfig+0x124>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d108      	bne.n	8009462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	4313      	orrs	r3, r2
 8009460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a2f      	ldr	r2, [pc, #188]	; (8009524 <TIM_Base_SetConfig+0x114>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d02b      	beq.n	80094c2 <TIM_Base_SetConfig+0xb2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009470:	d027      	beq.n	80094c2 <TIM_Base_SetConfig+0xb2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a2c      	ldr	r2, [pc, #176]	; (8009528 <TIM_Base_SetConfig+0x118>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d023      	beq.n	80094c2 <TIM_Base_SetConfig+0xb2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a2b      	ldr	r2, [pc, #172]	; (800952c <TIM_Base_SetConfig+0x11c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d01f      	beq.n	80094c2 <TIM_Base_SetConfig+0xb2>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a2a      	ldr	r2, [pc, #168]	; (8009530 <TIM_Base_SetConfig+0x120>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d01b      	beq.n	80094c2 <TIM_Base_SetConfig+0xb2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a29      	ldr	r2, [pc, #164]	; (8009534 <TIM_Base_SetConfig+0x124>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d017      	beq.n	80094c2 <TIM_Base_SetConfig+0xb2>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a28      	ldr	r2, [pc, #160]	; (8009538 <TIM_Base_SetConfig+0x128>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d013      	beq.n	80094c2 <TIM_Base_SetConfig+0xb2>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a27      	ldr	r2, [pc, #156]	; (800953c <TIM_Base_SetConfig+0x12c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d00f      	beq.n	80094c2 <TIM_Base_SetConfig+0xb2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a26      	ldr	r2, [pc, #152]	; (8009540 <TIM_Base_SetConfig+0x130>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d00b      	beq.n	80094c2 <TIM_Base_SetConfig+0xb2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a25      	ldr	r2, [pc, #148]	; (8009544 <TIM_Base_SetConfig+0x134>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d007      	beq.n	80094c2 <TIM_Base_SetConfig+0xb2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a24      	ldr	r2, [pc, #144]	; (8009548 <TIM_Base_SetConfig+0x138>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d003      	beq.n	80094c2 <TIM_Base_SetConfig+0xb2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a23      	ldr	r2, [pc, #140]	; (800954c <TIM_Base_SetConfig+0x13c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d108      	bne.n	80094d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a0a      	ldr	r2, [pc, #40]	; (8009524 <TIM_Base_SetConfig+0x114>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d003      	beq.n	8009508 <TIM_Base_SetConfig+0xf8>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a0c      	ldr	r2, [pc, #48]	; (8009534 <TIM_Base_SetConfig+0x124>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d103      	bne.n	8009510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	691a      	ldr	r2, [r3, #16]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	615a      	str	r2, [r3, #20]
}
 8009516:	bf00      	nop
 8009518:	3714      	adds	r7, #20
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
 8009522:	bf00      	nop
 8009524:	40010000 	.word	0x40010000
 8009528:	40000400 	.word	0x40000400
 800952c:	40000800 	.word	0x40000800
 8009530:	40000c00 	.word	0x40000c00
 8009534:	40010400 	.word	0x40010400
 8009538:	40014000 	.word	0x40014000
 800953c:	40014400 	.word	0x40014400
 8009540:	40014800 	.word	0x40014800
 8009544:	40001800 	.word	0x40001800
 8009548:	40001c00 	.word	0x40001c00
 800954c:	40002000 	.word	0x40002000

08009550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	f023 0201 	bic.w	r2, r3, #1
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800957e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0303 	bic.w	r3, r3, #3
 8009586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	4313      	orrs	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f023 0302 	bic.w	r3, r3, #2
 8009598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a20      	ldr	r2, [pc, #128]	; (8009628 <TIM_OC1_SetConfig+0xd8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d003      	beq.n	80095b4 <TIM_OC1_SetConfig+0x64>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a1f      	ldr	r2, [pc, #124]	; (800962c <TIM_OC1_SetConfig+0xdc>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d10c      	bne.n	80095ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f023 0308 	bic.w	r3, r3, #8
 80095ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f023 0304 	bic.w	r3, r3, #4
 80095cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a15      	ldr	r2, [pc, #84]	; (8009628 <TIM_OC1_SetConfig+0xd8>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d003      	beq.n	80095de <TIM_OC1_SetConfig+0x8e>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a14      	ldr	r2, [pc, #80]	; (800962c <TIM_OC1_SetConfig+0xdc>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d111      	bne.n	8009602 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	4313      	orrs	r3, r2
 8009600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	621a      	str	r2, [r3, #32]
}
 800961c:	bf00      	nop
 800961e:	371c      	adds	r7, #28
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	40010000 	.word	0x40010000
 800962c:	40010400 	.word	0x40010400

08009630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	f023 0210 	bic.w	r2, r3, #16
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800965e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4313      	orrs	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f023 0320 	bic.w	r3, r3, #32
 800967a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	011b      	lsls	r3, r3, #4
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	4313      	orrs	r3, r2
 8009686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a22      	ldr	r2, [pc, #136]	; (8009714 <TIM_OC2_SetConfig+0xe4>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d003      	beq.n	8009698 <TIM_OC2_SetConfig+0x68>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a21      	ldr	r2, [pc, #132]	; (8009718 <TIM_OC2_SetConfig+0xe8>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d10d      	bne.n	80096b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800969e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	011b      	lsls	r3, r3, #4
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a17      	ldr	r2, [pc, #92]	; (8009714 <TIM_OC2_SetConfig+0xe4>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_OC2_SetConfig+0x94>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a16      	ldr	r2, [pc, #88]	; (8009718 <TIM_OC2_SetConfig+0xe8>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d113      	bne.n	80096ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	4313      	orrs	r3, r2
 80096de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	621a      	str	r2, [r3, #32]
}
 8009706:	bf00      	nop
 8009708:	371c      	adds	r7, #28
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	40010000 	.word	0x40010000
 8009718:	40010400 	.word	0x40010400

0800971c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800974a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	021b      	lsls	r3, r3, #8
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	4313      	orrs	r3, r2
 8009770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a21      	ldr	r2, [pc, #132]	; (80097fc <TIM_OC3_SetConfig+0xe0>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d003      	beq.n	8009782 <TIM_OC3_SetConfig+0x66>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a20      	ldr	r2, [pc, #128]	; (8009800 <TIM_OC3_SetConfig+0xe4>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d10d      	bne.n	800979e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	021b      	lsls	r3, r3, #8
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	4313      	orrs	r3, r2
 8009794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800979c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a16      	ldr	r2, [pc, #88]	; (80097fc <TIM_OC3_SetConfig+0xe0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d003      	beq.n	80097ae <TIM_OC3_SetConfig+0x92>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4a15      	ldr	r2, [pc, #84]	; (8009800 <TIM_OC3_SetConfig+0xe4>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d113      	bne.n	80097d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	011b      	lsls	r3, r3, #4
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	697a      	ldr	r2, [r7, #20]
 80097ee:	621a      	str	r2, [r3, #32]
}
 80097f0:	bf00      	nop
 80097f2:	371c      	adds	r7, #28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	40010000 	.word	0x40010000
 8009800:	40010400 	.word	0x40010400

08009804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800983a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	021b      	lsls	r3, r3, #8
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4313      	orrs	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800984e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	031b      	lsls	r3, r3, #12
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	4313      	orrs	r3, r2
 800985a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a12      	ldr	r2, [pc, #72]	; (80098a8 <TIM_OC4_SetConfig+0xa4>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d003      	beq.n	800986c <TIM_OC4_SetConfig+0x68>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a11      	ldr	r2, [pc, #68]	; (80098ac <TIM_OC4_SetConfig+0xa8>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d109      	bne.n	8009880 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	019b      	lsls	r3, r3, #6
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	4313      	orrs	r3, r2
 800987e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	693a      	ldr	r2, [r7, #16]
 8009898:	621a      	str	r2, [r3, #32]
}
 800989a:	bf00      	nop
 800989c:	371c      	adds	r7, #28
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	40010000 	.word	0x40010000
 80098ac:	40010400 	.word	0x40010400

080098b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	f023 0201 	bic.w	r2, r3, #1
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	011b      	lsls	r3, r3, #4
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f023 030a 	bic.w	r3, r3, #10
 80098ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	621a      	str	r2, [r3, #32]
}
 8009902:	bf00      	nop
 8009904:	371c      	adds	r7, #28
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800990e:	b480      	push	{r7}
 8009910:	b087      	sub	sp, #28
 8009912:	af00      	add	r7, sp, #0
 8009914:	60f8      	str	r0, [r7, #12]
 8009916:	60b9      	str	r1, [r7, #8]
 8009918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	f023 0210 	bic.w	r2, r3, #16
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	031b      	lsls	r3, r3, #12
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	4313      	orrs	r3, r2
 8009942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800994a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	011b      	lsls	r3, r3, #4
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	4313      	orrs	r3, r2
 8009954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	621a      	str	r2, [r3, #32]
}
 8009962:	bf00      	nop
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4313      	orrs	r3, r2
 800998c:	f043 0307 	orr.w	r3, r3, #7
 8009990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	609a      	str	r2, [r3, #8]
}
 8009998:	bf00      	nop
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	021a      	lsls	r2, r3, #8
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	431a      	orrs	r2, r3
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	609a      	str	r2, [r3, #8]
}
 80099d8:	bf00      	nop
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	f003 031f 	and.w	r3, r3, #31
 80099f6:	2201      	movs	r2, #1
 80099f8:	fa02 f303 	lsl.w	r3, r2, r3
 80099fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a1a      	ldr	r2, [r3, #32]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	43db      	mvns	r3, r3
 8009a06:	401a      	ands	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6a1a      	ldr	r2, [r3, #32]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f003 031f 	and.w	r3, r3, #31
 8009a16:	6879      	ldr	r1, [r7, #4]
 8009a18:	fa01 f303 	lsl.w	r3, r1, r3
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	621a      	str	r2, [r3, #32]
}
 8009a22:	bf00      	nop
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
	...

08009a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d101      	bne.n	8009a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a44:	2302      	movs	r3, #2
 8009a46:	e05a      	b.n	8009afe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a21      	ldr	r2, [pc, #132]	; (8009b0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d022      	beq.n	8009ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a94:	d01d      	beq.n	8009ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a1d      	ldr	r2, [pc, #116]	; (8009b10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d018      	beq.n	8009ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a1b      	ldr	r2, [pc, #108]	; (8009b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d013      	beq.n	8009ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a1a      	ldr	r2, [pc, #104]	; (8009b18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d00e      	beq.n	8009ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a18      	ldr	r2, [pc, #96]	; (8009b1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d009      	beq.n	8009ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a17      	ldr	r2, [pc, #92]	; (8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d004      	beq.n	8009ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a15      	ldr	r2, [pc, #84]	; (8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d10c      	bne.n	8009aec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	40010000 	.word	0x40010000
 8009b10:	40000400 	.word	0x40000400
 8009b14:	40000800 	.word	0x40000800
 8009b18:	40000c00 	.word	0x40000c00
 8009b1c:	40010400 	.word	0x40010400
 8009b20:	40014000 	.word	0x40014000
 8009b24:	40001800 	.word	0x40001800

08009b28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d101      	bne.n	8009b44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b40:	2302      	movs	r3, #2
 8009b42:	e03d      	b.n	8009bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e03f      	b.n	8009c5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d106      	bne.n	8009bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7fb ffce 	bl	8005b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2224      	movs	r2, #36	; 0x24
 8009bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68da      	ldr	r2, [r3, #12]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 ff49 	bl	800aaa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	691a      	ldr	r2, [r3, #16]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	695a      	ldr	r2, [r3, #20]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68da      	ldr	r2, [r3, #12]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2220      	movs	r2, #32
 8009c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
	...

08009c68 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08c      	sub	sp, #48	; 0x30
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	4613      	mov	r3, r2
 8009c74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b20      	cmp	r3, #32
 8009c80:	d165      	bne.n	8009d4e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <HAL_UART_Transmit_DMA+0x26>
 8009c88:	88fb      	ldrh	r3, [r7, #6]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d101      	bne.n	8009c92 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e05e      	b.n	8009d50 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d101      	bne.n	8009ca0 <HAL_UART_Transmit_DMA+0x38>
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	e057      	b.n	8009d50 <HAL_UART_Transmit_DMA+0xe8>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	88fa      	ldrh	r2, [r7, #6]
 8009cb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	88fa      	ldrh	r2, [r7, #6]
 8009cb8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2221      	movs	r2, #33	; 0x21
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ccc:	4a22      	ldr	r2, [pc, #136]	; (8009d58 <HAL_UART_Transmit_DMA+0xf0>)
 8009cce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd4:	4a21      	ldr	r2, [pc, #132]	; (8009d5c <HAL_UART_Transmit_DMA+0xf4>)
 8009cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cdc:	4a20      	ldr	r2, [pc, #128]	; (8009d60 <HAL_UART_Transmit_DMA+0xf8>)
 8009cde:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8009ce8:	f107 0308 	add.w	r3, r7, #8
 8009cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	6819      	ldr	r1, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	88fb      	ldrh	r3, [r7, #6]
 8009d00:	f7fc ff46 	bl	8006b90 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d0c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3314      	adds	r3, #20
 8009d1c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	617b      	str	r3, [r7, #20]
   return(result);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3314      	adds	r3, #20
 8009d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d36:	627a      	str	r2, [r7, #36]	; 0x24
 8009d38:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3a:	6a39      	ldr	r1, [r7, #32]
 8009d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d3e:	e841 2300 	strex	r3, r2, [r1]
 8009d42:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1e5      	bne.n	8009d16 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e000      	b.n	8009d50 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009d4e:	2302      	movs	r3, #2
  }
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3730      	adds	r7, #48	; 0x30
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	0800a349 	.word	0x0800a349
 8009d5c:	0800a3e3 	.word	0x0800a3e3
 8009d60:	0800a55b 	.word	0x0800a55b

08009d64 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	d11d      	bne.n	8009dba <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <HAL_UART_Receive_DMA+0x26>
 8009d84:	88fb      	ldrh	r3, [r7, #6]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e016      	b.n	8009dbc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d101      	bne.n	8009d9c <HAL_UART_Receive_DMA+0x38>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e00f      	b.n	8009dbc <HAL_UART_Receive_DMA+0x58>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009daa:	88fb      	ldrh	r3, [r7, #6]
 8009dac:	461a      	mov	r2, r3
 8009dae:	68b9      	ldr	r1, [r7, #8]
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fc1d 	bl	800a5f0 <UART_Start_Receive_DMA>
 8009db6:	4603      	mov	r3, r0
 8009db8:	e000      	b.n	8009dbc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009dba:	2302      	movs	r3, #2
  }
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b0ba      	sub	sp, #232	; 0xe8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dfa:	f003 030f 	and.w	r3, r3, #15
 8009dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10f      	bne.n	8009e2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d009      	beq.n	8009e2a <HAL_UART_IRQHandler+0x66>
 8009e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e1a:	f003 0320 	and.w	r3, r3, #32
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fd85 	bl	800a932 <UART_Receive_IT>
      return;
 8009e28:	e256      	b.n	800a2d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f000 80de 	beq.w	8009ff0 <HAL_UART_IRQHandler+0x22c>
 8009e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d106      	bne.n	8009e4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 80d1 	beq.w	8009ff0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00b      	beq.n	8009e72 <HAL_UART_IRQHandler+0xae>
 8009e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d005      	beq.n	8009e72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6a:	f043 0201 	orr.w	r2, r3, #1
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e76:	f003 0304 	and.w	r3, r3, #4
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00b      	beq.n	8009e96 <HAL_UART_IRQHandler+0xd2>
 8009e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e82:	f003 0301 	and.w	r3, r3, #1
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d005      	beq.n	8009e96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	f043 0202 	orr.w	r2, r3, #2
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e9a:	f003 0302 	and.w	r3, r3, #2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00b      	beq.n	8009eba <HAL_UART_IRQHandler+0xf6>
 8009ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d005      	beq.n	8009eba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	f043 0204 	orr.w	r2, r3, #4
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ebe:	f003 0308 	and.w	r3, r3, #8
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d011      	beq.n	8009eea <HAL_UART_IRQHandler+0x126>
 8009ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eca:	f003 0320 	and.w	r3, r3, #32
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d105      	bne.n	8009ede <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d005      	beq.n	8009eea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee2:	f043 0208 	orr.w	r2, r3, #8
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 81ed 	beq.w	800a2ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ef8:	f003 0320 	and.w	r3, r3, #32
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d008      	beq.n	8009f12 <HAL_UART_IRQHandler+0x14e>
 8009f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fd10 	bl	800a932 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f1c:	2b40      	cmp	r3, #64	; 0x40
 8009f1e:	bf0c      	ite	eq
 8009f20:	2301      	moveq	r3, #1
 8009f22:	2300      	movne	r3, #0
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	f003 0308 	and.w	r3, r3, #8
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d103      	bne.n	8009f3e <HAL_UART_IRQHandler+0x17a>
 8009f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d04f      	beq.n	8009fde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fc18 	bl	800a774 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4e:	2b40      	cmp	r3, #64	; 0x40
 8009f50:	d141      	bne.n	8009fd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3314      	adds	r3, #20
 8009f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f60:	e853 3f00 	ldrex	r3, [r3]
 8009f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3314      	adds	r3, #20
 8009f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1d9      	bne.n	8009f52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d013      	beq.n	8009fce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	4a7d      	ldr	r2, [pc, #500]	; (800a1a0 <HAL_UART_IRQHandler+0x3dc>)
 8009fac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fc feb4 	bl	8006d20 <HAL_DMA_Abort_IT>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d016      	beq.n	8009fec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009fc8:	4610      	mov	r0, r2
 8009fca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fcc:	e00e      	b.n	8009fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f9a4 	bl	800a31c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd4:	e00a      	b.n	8009fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f9a0 	bl	800a31c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fdc:	e006      	b.n	8009fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f99c 	bl	800a31c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009fea:	e170      	b.n	800a2ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fec:	bf00      	nop
    return;
 8009fee:	e16e      	b.n	800a2ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	f040 814a 	bne.w	800a28e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ffe:	f003 0310 	and.w	r3, r3, #16
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 8143 	beq.w	800a28e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a00c:	f003 0310 	and.w	r3, r3, #16
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 813c 	beq.w	800a28e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a016:	2300      	movs	r3, #0
 800a018:	60bb      	str	r3, [r7, #8]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	60bb      	str	r3, [r7, #8]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	60bb      	str	r3, [r7, #8]
 800a02a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a036:	2b40      	cmp	r3, #64	; 0x40
 800a038:	f040 80b4 	bne.w	800a1a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a048:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 8140 	beq.w	800a2d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a05a:	429a      	cmp	r2, r3
 800a05c:	f080 8139 	bcs.w	800a2d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a066:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a072:	f000 8088 	beq.w	800a186 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	330c      	adds	r3, #12
 800a07c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a084:	e853 3f00 	ldrex	r3, [r3]
 800a088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a08c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a094:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	330c      	adds	r3, #12
 800a09e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a0a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a0a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a0ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a0ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1d9      	bne.n	800a076 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3314      	adds	r3, #20
 800a0c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0cc:	e853 3f00 	ldrex	r3, [r3]
 800a0d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0d4:	f023 0301 	bic.w	r3, r3, #1
 800a0d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3314      	adds	r3, #20
 800a0e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e1      	bne.n	800a0c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3314      	adds	r3, #20
 800a104:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a108:	e853 3f00 	ldrex	r3, [r3]
 800a10c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a10e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3314      	adds	r3, #20
 800a11e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a122:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a124:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a126:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a128:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a12a:	e841 2300 	strex	r3, r2, [r1]
 800a12e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1e3      	bne.n	800a0fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2220      	movs	r2, #32
 800a13a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	330c      	adds	r3, #12
 800a14a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a156:	f023 0310 	bic.w	r3, r3, #16
 800a15a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	330c      	adds	r3, #12
 800a164:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a168:	65ba      	str	r2, [r7, #88]	; 0x58
 800a16a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a16e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a170:	e841 2300 	strex	r3, r2, [r1]
 800a174:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1e3      	bne.n	800a144 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a180:	4618      	mov	r0, r3
 800a182:	f7fc fd5d 	bl	8006c40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a18e:	b29b      	uxth	r3, r3
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	b29b      	uxth	r3, r3
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f8ca 	bl	800a330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a19c:	e099      	b.n	800a2d2 <HAL_UART_IRQHandler+0x50e>
 800a19e:	bf00      	nop
 800a1a0:	0800a83b 	.word	0x0800a83b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 808b 	beq.w	800a2d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a1c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 8086 	beq.w	800a2d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	330c      	adds	r3, #12
 800a1d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d4:	e853 3f00 	ldrex	r3, [r3]
 800a1d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	330c      	adds	r3, #12
 800a1ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a1ee:	647a      	str	r2, [r7, #68]	; 0x44
 800a1f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1f6:	e841 2300 	strex	r3, r2, [r1]
 800a1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1e3      	bne.n	800a1ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3314      	adds	r3, #20
 800a208:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	e853 3f00 	ldrex	r3, [r3]
 800a210:	623b      	str	r3, [r7, #32]
   return(result);
 800a212:	6a3b      	ldr	r3, [r7, #32]
 800a214:	f023 0301 	bic.w	r3, r3, #1
 800a218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3314      	adds	r3, #20
 800a222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a226:	633a      	str	r2, [r7, #48]	; 0x30
 800a228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a22c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a22e:	e841 2300 	strex	r3, r2, [r1]
 800a232:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1e3      	bne.n	800a202 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	330c      	adds	r3, #12
 800a24e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	60fb      	str	r3, [r7, #12]
   return(result);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f023 0310 	bic.w	r3, r3, #16
 800a25e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	330c      	adds	r3, #12
 800a268:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a26c:	61fa      	str	r2, [r7, #28]
 800a26e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a270:	69b9      	ldr	r1, [r7, #24]
 800a272:	69fa      	ldr	r2, [r7, #28]
 800a274:	e841 2300 	strex	r3, r2, [r1]
 800a278:	617b      	str	r3, [r7, #20]
   return(result);
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1e3      	bne.n	800a248 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a284:	4619      	mov	r1, r3
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f852 	bl	800a330 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a28c:	e023      	b.n	800a2d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a28e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a296:	2b00      	cmp	r3, #0
 800a298:	d009      	beq.n	800a2ae <HAL_UART_IRQHandler+0x4ea>
 800a29a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d003      	beq.n	800a2ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fadb 	bl	800a862 <UART_Transmit_IT>
    return;
 800a2ac:	e014      	b.n	800a2d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00e      	beq.n	800a2d8 <HAL_UART_IRQHandler+0x514>
 800a2ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d008      	beq.n	800a2d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fb1b 	bl	800a902 <UART_EndTransmit_IT>
    return;
 800a2cc:	e004      	b.n	800a2d8 <HAL_UART_IRQHandler+0x514>
    return;
 800a2ce:	bf00      	nop
 800a2d0:	e002      	b.n	800a2d8 <HAL_UART_IRQHandler+0x514>
      return;
 800a2d2:	bf00      	nop
 800a2d4:	e000      	b.n	800a2d8 <HAL_UART_IRQHandler+0x514>
      return;
 800a2d6:	bf00      	nop
  }
}
 800a2d8:	37e8      	adds	r7, #232	; 0xe8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop

0800a2e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	460b      	mov	r3, r1
 800a33a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b090      	sub	sp, #64	; 0x40
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a354:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a360:	2b00      	cmp	r3, #0
 800a362:	d137      	bne.n	800a3d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a366:	2200      	movs	r2, #0
 800a368:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	3314      	adds	r3, #20
 800a370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a374:	e853 3f00 	ldrex	r3, [r3]
 800a378:	623b      	str	r3, [r7, #32]
   return(result);
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a380:	63bb      	str	r3, [r7, #56]	; 0x38
 800a382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	3314      	adds	r3, #20
 800a388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a38a:	633a      	str	r2, [r7, #48]	; 0x30
 800a38c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a392:	e841 2300 	strex	r3, r2, [r1]
 800a396:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1e5      	bne.n	800a36a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	330c      	adds	r3, #12
 800a3a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	e853 3f00 	ldrex	r3, [r3]
 800a3ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b4:	637b      	str	r3, [r7, #52]	; 0x34
 800a3b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	330c      	adds	r3, #12
 800a3bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3be:	61fa      	str	r2, [r7, #28]
 800a3c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c2:	69b9      	ldr	r1, [r7, #24]
 800a3c4:	69fa      	ldr	r2, [r7, #28]
 800a3c6:	e841 2300 	strex	r3, r2, [r1]
 800a3ca:	617b      	str	r3, [r7, #20]
   return(result);
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1e5      	bne.n	800a39e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3d2:	e002      	b.n	800a3da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a3d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a3d6:	f7ff ff83 	bl	800a2e0 <HAL_UART_TxCpltCallback>
}
 800a3da:	bf00      	nop
 800a3dc:	3740      	adds	r7, #64	; 0x40
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f7ff ff7f 	bl	800a2f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3f6:	bf00      	nop
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b09c      	sub	sp, #112	; 0x70
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a416:	2b00      	cmp	r3, #0
 800a418:	d172      	bne.n	800a500 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a41a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a41c:	2200      	movs	r2, #0
 800a41e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	330c      	adds	r3, #12
 800a426:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42a:	e853 3f00 	ldrex	r3, [r3]
 800a42e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a436:	66bb      	str	r3, [r7, #104]	; 0x68
 800a438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	330c      	adds	r3, #12
 800a43e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a440:	65ba      	str	r2, [r7, #88]	; 0x58
 800a442:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a444:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a446:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a448:	e841 2300 	strex	r3, r2, [r1]
 800a44c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a44e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e5      	bne.n	800a420 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3314      	adds	r3, #20
 800a45a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	e853 3f00 	ldrex	r3, [r3]
 800a462:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a466:	f023 0301 	bic.w	r3, r3, #1
 800a46a:	667b      	str	r3, [r7, #100]	; 0x64
 800a46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3314      	adds	r3, #20
 800a472:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a474:	647a      	str	r2, [r7, #68]	; 0x44
 800a476:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a478:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a47a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a47c:	e841 2300 	strex	r3, r2, [r1]
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1e5      	bne.n	800a454 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	3314      	adds	r3, #20
 800a48e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	e853 3f00 	ldrex	r3, [r3]
 800a496:	623b      	str	r3, [r7, #32]
   return(result);
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a49e:	663b      	str	r3, [r7, #96]	; 0x60
 800a4a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3314      	adds	r3, #20
 800a4a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a4a8:	633a      	str	r2, [r7, #48]	; 0x30
 800a4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b0:	e841 2300 	strex	r3, r2, [r1]
 800a4b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e5      	bne.n	800a488 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a4bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d119      	bne.n	800a500 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	330c      	adds	r3, #12
 800a4d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	e853 3f00 	ldrex	r3, [r3]
 800a4da:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f023 0310 	bic.w	r3, r3, #16
 800a4e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	330c      	adds	r3, #12
 800a4ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4ec:	61fa      	str	r2, [r7, #28]
 800a4ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f0:	69b9      	ldr	r1, [r7, #24]
 800a4f2:	69fa      	ldr	r2, [r7, #28]
 800a4f4:	e841 2300 	strex	r3, r2, [r1]
 800a4f8:	617b      	str	r3, [r7, #20]
   return(result);
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1e5      	bne.n	800a4cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a504:	2b01      	cmp	r3, #1
 800a506:	d106      	bne.n	800a516 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a50a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a50c:	4619      	mov	r1, r3
 800a50e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a510:	f7ff ff0e 	bl	800a330 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a514:	e002      	b.n	800a51c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a516:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a518:	f7f8 fbfc 	bl	8002d14 <HAL_UART_RxCpltCallback>
}
 800a51c:	bf00      	nop
 800a51e:	3770      	adds	r7, #112	; 0x70
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a530:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a536:	2b01      	cmp	r3, #1
 800a538:	d108      	bne.n	800a54c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a53e:	085b      	lsrs	r3, r3, #1
 800a540:	b29b      	uxth	r3, r3
 800a542:	4619      	mov	r1, r3
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f7ff fef3 	bl	800a330 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a54a:	e002      	b.n	800a552 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f7ff fedb 	bl	800a308 <HAL_UART_RxHalfCpltCallback>
}
 800a552:	bf00      	nop
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a562:	2300      	movs	r3, #0
 800a564:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a576:	2b80      	cmp	r3, #128	; 0x80
 800a578:	bf0c      	ite	eq
 800a57a:	2301      	moveq	r3, #1
 800a57c:	2300      	movne	r3, #0
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b21      	cmp	r3, #33	; 0x21
 800a58c:	d108      	bne.n	800a5a0 <UART_DMAError+0x46>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d005      	beq.n	800a5a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	2200      	movs	r2, #0
 800a598:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a59a:	68b8      	ldr	r0, [r7, #8]
 800a59c:	f000 f8c2 	bl	800a724 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5aa:	2b40      	cmp	r3, #64	; 0x40
 800a5ac:	bf0c      	ite	eq
 800a5ae:	2301      	moveq	r3, #1
 800a5b0:	2300      	movne	r3, #0
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b22      	cmp	r3, #34	; 0x22
 800a5c0:	d108      	bne.n	800a5d4 <UART_DMAError+0x7a>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d005      	beq.n	800a5d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a5ce:	68b8      	ldr	r0, [r7, #8]
 800a5d0:	f000 f8d0 	bl	800a774 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d8:	f043 0210 	orr.w	r2, r3, #16
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a5e0:	68b8      	ldr	r0, [r7, #8]
 800a5e2:	f7ff fe9b 	bl	800a31c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b098      	sub	sp, #96	; 0x60
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	88fa      	ldrh	r2, [r7, #6]
 800a608:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2222      	movs	r2, #34	; 0x22
 800a614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61c:	4a3e      	ldr	r2, [pc, #248]	; (800a718 <UART_Start_Receive_DMA+0x128>)
 800a61e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a624:	4a3d      	ldr	r2, [pc, #244]	; (800a71c <UART_Start_Receive_DMA+0x12c>)
 800a626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62c:	4a3c      	ldr	r2, [pc, #240]	; (800a720 <UART_Start_Receive_DMA+0x130>)
 800a62e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a634:	2200      	movs	r2, #0
 800a636:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a638:	f107 0308 	add.w	r3, r7, #8
 800a63c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	3304      	adds	r3, #4
 800a648:	4619      	mov	r1, r3
 800a64a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	88fb      	ldrh	r3, [r7, #6]
 800a650:	f7fc fa9e 	bl	8006b90 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a654:	2300      	movs	r3, #0
 800a656:	613b      	str	r3, [r7, #16]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	613b      	str	r3, [r7, #16]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	613b      	str	r3, [r7, #16]
 800a668:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	330c      	adds	r3, #12
 800a678:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a688:	65bb      	str	r3, [r7, #88]	; 0x58
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	330c      	adds	r3, #12
 800a690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a692:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a694:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a6a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e5      	bne.n	800a672 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3314      	adds	r3, #20
 800a6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b8:	f043 0301 	orr.w	r3, r3, #1
 800a6bc:	657b      	str	r3, [r7, #84]	; 0x54
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3314      	adds	r3, #20
 800a6c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6c6:	63ba      	str	r2, [r7, #56]	; 0x38
 800a6c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a6cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6ce:	e841 2300 	strex	r3, r2, [r1]
 800a6d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e5      	bne.n	800a6a6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3314      	adds	r3, #20
 800a6e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	e853 3f00 	ldrex	r3, [r3]
 800a6e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f0:	653b      	str	r3, [r7, #80]	; 0x50
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3314      	adds	r3, #20
 800a6f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6fa:	627a      	str	r2, [r7, #36]	; 0x24
 800a6fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	6a39      	ldr	r1, [r7, #32]
 800a700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	61fb      	str	r3, [r7, #28]
   return(result);
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e5      	bne.n	800a6da <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3760      	adds	r7, #96	; 0x60
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	0800a3ff 	.word	0x0800a3ff
 800a71c:	0800a525 	.word	0x0800a525
 800a720:	0800a55b 	.word	0x0800a55b

0800a724 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a724:	b480      	push	{r7}
 800a726:	b089      	sub	sp, #36	; 0x24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	330c      	adds	r3, #12
 800a732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	e853 3f00 	ldrex	r3, [r3]
 800a73a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a742:	61fb      	str	r3, [r7, #28]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	330c      	adds	r3, #12
 800a74a:	69fa      	ldr	r2, [r7, #28]
 800a74c:	61ba      	str	r2, [r7, #24]
 800a74e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a750:	6979      	ldr	r1, [r7, #20]
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	e841 2300 	strex	r3, r2, [r1]
 800a758:	613b      	str	r3, [r7, #16]
   return(result);
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e5      	bne.n	800a72c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2220      	movs	r2, #32
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a768:	bf00      	nop
 800a76a:	3724      	adds	r7, #36	; 0x24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a774:	b480      	push	{r7}
 800a776:	b095      	sub	sp, #84	; 0x54
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	330c      	adds	r3, #12
 800a782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a786:	e853 3f00 	ldrex	r3, [r3]
 800a78a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a792:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	330c      	adds	r3, #12
 800a79a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a79c:	643a      	str	r2, [r7, #64]	; 0x40
 800a79e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7a4:	e841 2300 	strex	r3, r2, [r1]
 800a7a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1e5      	bne.n	800a77c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3314      	adds	r3, #20
 800a7b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	e853 3f00 	ldrex	r3, [r3]
 800a7be:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	f023 0301 	bic.w	r3, r3, #1
 800a7c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3314      	adds	r3, #20
 800a7ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7d8:	e841 2300 	strex	r3, r2, [r1]
 800a7dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1e5      	bne.n	800a7b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d119      	bne.n	800a820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	330c      	adds	r3, #12
 800a7f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	e853 3f00 	ldrex	r3, [r3]
 800a7fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	f023 0310 	bic.w	r3, r3, #16
 800a802:	647b      	str	r3, [r7, #68]	; 0x44
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	330c      	adds	r3, #12
 800a80a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a80c:	61ba      	str	r2, [r7, #24]
 800a80e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a810:	6979      	ldr	r1, [r7, #20]
 800a812:	69ba      	ldr	r2, [r7, #24]
 800a814:	e841 2300 	strex	r3, r2, [r1]
 800a818:	613b      	str	r3, [r7, #16]
   return(result);
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1e5      	bne.n	800a7ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2220      	movs	r2, #32
 800a824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a82e:	bf00      	nop
 800a830:	3754      	adds	r7, #84	; 0x54
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a846:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f7ff fd61 	bl	800a31c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a862:	b480      	push	{r7}
 800a864:	b085      	sub	sp, #20
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b21      	cmp	r3, #33	; 0x21
 800a874:	d13e      	bne.n	800a8f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a87e:	d114      	bne.n	800a8aa <UART_Transmit_IT+0x48>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d110      	bne.n	800a8aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	881b      	ldrh	r3, [r3, #0]
 800a892:	461a      	mov	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a89c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	1c9a      	adds	r2, r3, #2
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	621a      	str	r2, [r3, #32]
 800a8a8:	e008      	b.n	800a8bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	1c59      	adds	r1, r3, #1
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	6211      	str	r1, [r2, #32]
 800a8b4:	781a      	ldrb	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10f      	bne.n	800a8f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68da      	ldr	r2, [r3, #12]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68da      	ldr	r2, [r3, #12]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	e000      	b.n	800a8f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a8f4:	2302      	movs	r3, #2
  }
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b082      	sub	sp, #8
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68da      	ldr	r2, [r3, #12]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a918:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2220      	movs	r2, #32
 800a91e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff fcdc 	bl	800a2e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b08c      	sub	sp, #48	; 0x30
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b22      	cmp	r3, #34	; 0x22
 800a944:	f040 80ab 	bne.w	800aa9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a950:	d117      	bne.n	800a982 <UART_Receive_IT+0x50>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d113      	bne.n	800a982 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a962:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a970:	b29a      	uxth	r2, r3
 800a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a974:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97a:	1c9a      	adds	r2, r3, #2
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	629a      	str	r2, [r3, #40]	; 0x28
 800a980:	e026      	b.n	800a9d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a986:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a988:	2300      	movs	r3, #0
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a994:	d007      	beq.n	800a9a6 <UART_Receive_IT+0x74>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <UART_Receive_IT+0x82>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d106      	bne.n	800a9b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	701a      	strb	r2, [r3, #0]
 800a9b2:	e008      	b.n	800a9c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	4619      	mov	r1, r3
 800a9de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d15a      	bne.n	800aa9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68da      	ldr	r2, [r3, #12]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f022 0220 	bic.w	r2, r2, #32
 800a9f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68da      	ldr	r2, [r3, #12]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	695a      	ldr	r2, [r3, #20]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f022 0201 	bic.w	r2, r2, #1
 800aa12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2220      	movs	r2, #32
 800aa18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d135      	bne.n	800aa90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	330c      	adds	r3, #12
 800aa30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	e853 3f00 	ldrex	r3, [r3]
 800aa38:	613b      	str	r3, [r7, #16]
   return(result);
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f023 0310 	bic.w	r3, r3, #16
 800aa40:	627b      	str	r3, [r7, #36]	; 0x24
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	330c      	adds	r3, #12
 800aa48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa4a:	623a      	str	r2, [r7, #32]
 800aa4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4e:	69f9      	ldr	r1, [r7, #28]
 800aa50:	6a3a      	ldr	r2, [r7, #32]
 800aa52:	e841 2300 	strex	r3, r2, [r1]
 800aa56:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1e5      	bne.n	800aa2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0310 	and.w	r3, r3, #16
 800aa68:	2b10      	cmp	r3, #16
 800aa6a:	d10a      	bne.n	800aa82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	60fb      	str	r3, [r7, #12]
 800aa80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff fc51 	bl	800a330 <HAL_UARTEx_RxEventCallback>
 800aa8e:	e002      	b.n	800aa96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7f8 f93f 	bl	8002d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aa96:	2300      	movs	r3, #0
 800aa98:	e002      	b.n	800aaa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	e000      	b.n	800aaa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800aa9e:	2302      	movs	r3, #2
  }
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3730      	adds	r7, #48	; 0x30
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	b09f      	sub	sp, #124	; 0x7c
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aabc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aabe:	68d9      	ldr	r1, [r3, #12]
 800aac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	ea40 0301 	orr.w	r3, r0, r1
 800aac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aaca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aacc:	689a      	ldr	r2, [r3, #8]
 800aace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	431a      	orrs	r2, r3
 800aad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aad6:	695b      	ldr	r3, [r3, #20]
 800aad8:	431a      	orrs	r2, r3
 800aada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	4313      	orrs	r3, r2
 800aae0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800aae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aaec:	f021 010c 	bic.w	r1, r1, #12
 800aaf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaf6:	430b      	orrs	r3, r1
 800aaf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ab04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab06:	6999      	ldr	r1, [r3, #24]
 800ab08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	ea40 0301 	orr.w	r3, r0, r1
 800ab10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	4bc5      	ldr	r3, [pc, #788]	; (800ae2c <UART_SetConfig+0x384>)
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d004      	beq.n	800ab26 <UART_SetConfig+0x7e>
 800ab1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	4bc3      	ldr	r3, [pc, #780]	; (800ae30 <UART_SetConfig+0x388>)
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d103      	bne.n	800ab2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab26:	f7fd f9cf 	bl	8007ec8 <HAL_RCC_GetPCLK2Freq>
 800ab2a:	6778      	str	r0, [r7, #116]	; 0x74
 800ab2c:	e002      	b.n	800ab34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab2e:	f7fd f9b7 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 800ab32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab3c:	f040 80b6 	bne.w	800acac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab42:	461c      	mov	r4, r3
 800ab44:	f04f 0500 	mov.w	r5, #0
 800ab48:	4622      	mov	r2, r4
 800ab4a:	462b      	mov	r3, r5
 800ab4c:	1891      	adds	r1, r2, r2
 800ab4e:	6439      	str	r1, [r7, #64]	; 0x40
 800ab50:	415b      	adcs	r3, r3
 800ab52:	647b      	str	r3, [r7, #68]	; 0x44
 800ab54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab58:	1912      	adds	r2, r2, r4
 800ab5a:	eb45 0303 	adc.w	r3, r5, r3
 800ab5e:	f04f 0000 	mov.w	r0, #0
 800ab62:	f04f 0100 	mov.w	r1, #0
 800ab66:	00d9      	lsls	r1, r3, #3
 800ab68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab6c:	00d0      	lsls	r0, r2, #3
 800ab6e:	4602      	mov	r2, r0
 800ab70:	460b      	mov	r3, r1
 800ab72:	1911      	adds	r1, r2, r4
 800ab74:	6639      	str	r1, [r7, #96]	; 0x60
 800ab76:	416b      	adcs	r3, r5
 800ab78:	667b      	str	r3, [r7, #100]	; 0x64
 800ab7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	f04f 0300 	mov.w	r3, #0
 800ab84:	1891      	adds	r1, r2, r2
 800ab86:	63b9      	str	r1, [r7, #56]	; 0x38
 800ab88:	415b      	adcs	r3, r3
 800ab8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ab94:	f7f6 f83a 	bl	8000c0c <__aeabi_uldivmod>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	4ba5      	ldr	r3, [pc, #660]	; (800ae34 <UART_SetConfig+0x38c>)
 800ab9e:	fba3 2302 	umull	r2, r3, r3, r2
 800aba2:	095b      	lsrs	r3, r3, #5
 800aba4:	011e      	lsls	r6, r3, #4
 800aba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aba8:	461c      	mov	r4, r3
 800abaa:	f04f 0500 	mov.w	r5, #0
 800abae:	4622      	mov	r2, r4
 800abb0:	462b      	mov	r3, r5
 800abb2:	1891      	adds	r1, r2, r2
 800abb4:	6339      	str	r1, [r7, #48]	; 0x30
 800abb6:	415b      	adcs	r3, r3
 800abb8:	637b      	str	r3, [r7, #52]	; 0x34
 800abba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800abbe:	1912      	adds	r2, r2, r4
 800abc0:	eb45 0303 	adc.w	r3, r5, r3
 800abc4:	f04f 0000 	mov.w	r0, #0
 800abc8:	f04f 0100 	mov.w	r1, #0
 800abcc:	00d9      	lsls	r1, r3, #3
 800abce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800abd2:	00d0      	lsls	r0, r2, #3
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	1911      	adds	r1, r2, r4
 800abda:	65b9      	str	r1, [r7, #88]	; 0x58
 800abdc:	416b      	adcs	r3, r5
 800abde:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	461a      	mov	r2, r3
 800abe6:	f04f 0300 	mov.w	r3, #0
 800abea:	1891      	adds	r1, r2, r2
 800abec:	62b9      	str	r1, [r7, #40]	; 0x28
 800abee:	415b      	adcs	r3, r3
 800abf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800abf6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800abfa:	f7f6 f807 	bl	8000c0c <__aeabi_uldivmod>
 800abfe:	4602      	mov	r2, r0
 800ac00:	460b      	mov	r3, r1
 800ac02:	4b8c      	ldr	r3, [pc, #560]	; (800ae34 <UART_SetConfig+0x38c>)
 800ac04:	fba3 1302 	umull	r1, r3, r3, r2
 800ac08:	095b      	lsrs	r3, r3, #5
 800ac0a:	2164      	movs	r1, #100	; 0x64
 800ac0c:	fb01 f303 	mul.w	r3, r1, r3
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	3332      	adds	r3, #50	; 0x32
 800ac16:	4a87      	ldr	r2, [pc, #540]	; (800ae34 <UART_SetConfig+0x38c>)
 800ac18:	fba2 2303 	umull	r2, r3, r2, r3
 800ac1c:	095b      	lsrs	r3, r3, #5
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ac24:	441e      	add	r6, r3
 800ac26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f04f 0100 	mov.w	r1, #0
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	1894      	adds	r4, r2, r2
 800ac34:	623c      	str	r4, [r7, #32]
 800ac36:	415b      	adcs	r3, r3
 800ac38:	627b      	str	r3, [r7, #36]	; 0x24
 800ac3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ac3e:	1812      	adds	r2, r2, r0
 800ac40:	eb41 0303 	adc.w	r3, r1, r3
 800ac44:	f04f 0400 	mov.w	r4, #0
 800ac48:	f04f 0500 	mov.w	r5, #0
 800ac4c:	00dd      	lsls	r5, r3, #3
 800ac4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ac52:	00d4      	lsls	r4, r2, #3
 800ac54:	4622      	mov	r2, r4
 800ac56:	462b      	mov	r3, r5
 800ac58:	1814      	adds	r4, r2, r0
 800ac5a:	653c      	str	r4, [r7, #80]	; 0x50
 800ac5c:	414b      	adcs	r3, r1
 800ac5e:	657b      	str	r3, [r7, #84]	; 0x54
 800ac60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	461a      	mov	r2, r3
 800ac66:	f04f 0300 	mov.w	r3, #0
 800ac6a:	1891      	adds	r1, r2, r2
 800ac6c:	61b9      	str	r1, [r7, #24]
 800ac6e:	415b      	adcs	r3, r3
 800ac70:	61fb      	str	r3, [r7, #28]
 800ac72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ac7a:	f7f5 ffc7 	bl	8000c0c <__aeabi_uldivmod>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4b6c      	ldr	r3, [pc, #432]	; (800ae34 <UART_SetConfig+0x38c>)
 800ac84:	fba3 1302 	umull	r1, r3, r3, r2
 800ac88:	095b      	lsrs	r3, r3, #5
 800ac8a:	2164      	movs	r1, #100	; 0x64
 800ac8c:	fb01 f303 	mul.w	r3, r1, r3
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	00db      	lsls	r3, r3, #3
 800ac94:	3332      	adds	r3, #50	; 0x32
 800ac96:	4a67      	ldr	r2, [pc, #412]	; (800ae34 <UART_SetConfig+0x38c>)
 800ac98:	fba2 2303 	umull	r2, r3, r2, r3
 800ac9c:	095b      	lsrs	r3, r3, #5
 800ac9e:	f003 0207 	and.w	r2, r3, #7
 800aca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4432      	add	r2, r6
 800aca8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800acaa:	e0b9      	b.n	800ae20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800acac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acae:	461c      	mov	r4, r3
 800acb0:	f04f 0500 	mov.w	r5, #0
 800acb4:	4622      	mov	r2, r4
 800acb6:	462b      	mov	r3, r5
 800acb8:	1891      	adds	r1, r2, r2
 800acba:	6139      	str	r1, [r7, #16]
 800acbc:	415b      	adcs	r3, r3
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800acc4:	1912      	adds	r2, r2, r4
 800acc6:	eb45 0303 	adc.w	r3, r5, r3
 800acca:	f04f 0000 	mov.w	r0, #0
 800acce:	f04f 0100 	mov.w	r1, #0
 800acd2:	00d9      	lsls	r1, r3, #3
 800acd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800acd8:	00d0      	lsls	r0, r2, #3
 800acda:	4602      	mov	r2, r0
 800acdc:	460b      	mov	r3, r1
 800acde:	eb12 0804 	adds.w	r8, r2, r4
 800ace2:	eb43 0905 	adc.w	r9, r3, r5
 800ace6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	4618      	mov	r0, r3
 800acec:	f04f 0100 	mov.w	r1, #0
 800acf0:	f04f 0200 	mov.w	r2, #0
 800acf4:	f04f 0300 	mov.w	r3, #0
 800acf8:	008b      	lsls	r3, r1, #2
 800acfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800acfe:	0082      	lsls	r2, r0, #2
 800ad00:	4640      	mov	r0, r8
 800ad02:	4649      	mov	r1, r9
 800ad04:	f7f5 ff82 	bl	8000c0c <__aeabi_uldivmod>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4b49      	ldr	r3, [pc, #292]	; (800ae34 <UART_SetConfig+0x38c>)
 800ad0e:	fba3 2302 	umull	r2, r3, r3, r2
 800ad12:	095b      	lsrs	r3, r3, #5
 800ad14:	011e      	lsls	r6, r3, #4
 800ad16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f04f 0100 	mov.w	r1, #0
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	1894      	adds	r4, r2, r2
 800ad24:	60bc      	str	r4, [r7, #8]
 800ad26:	415b      	adcs	r3, r3
 800ad28:	60fb      	str	r3, [r7, #12]
 800ad2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad2e:	1812      	adds	r2, r2, r0
 800ad30:	eb41 0303 	adc.w	r3, r1, r3
 800ad34:	f04f 0400 	mov.w	r4, #0
 800ad38:	f04f 0500 	mov.w	r5, #0
 800ad3c:	00dd      	lsls	r5, r3, #3
 800ad3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ad42:	00d4      	lsls	r4, r2, #3
 800ad44:	4622      	mov	r2, r4
 800ad46:	462b      	mov	r3, r5
 800ad48:	1814      	adds	r4, r2, r0
 800ad4a:	64bc      	str	r4, [r7, #72]	; 0x48
 800ad4c:	414b      	adcs	r3, r1
 800ad4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f04f 0100 	mov.w	r1, #0
 800ad5a:	f04f 0200 	mov.w	r2, #0
 800ad5e:	f04f 0300 	mov.w	r3, #0
 800ad62:	008b      	lsls	r3, r1, #2
 800ad64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ad68:	0082      	lsls	r2, r0, #2
 800ad6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800ad6e:	f7f5 ff4d 	bl	8000c0c <__aeabi_uldivmod>
 800ad72:	4602      	mov	r2, r0
 800ad74:	460b      	mov	r3, r1
 800ad76:	4b2f      	ldr	r3, [pc, #188]	; (800ae34 <UART_SetConfig+0x38c>)
 800ad78:	fba3 1302 	umull	r1, r3, r3, r2
 800ad7c:	095b      	lsrs	r3, r3, #5
 800ad7e:	2164      	movs	r1, #100	; 0x64
 800ad80:	fb01 f303 	mul.w	r3, r1, r3
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	011b      	lsls	r3, r3, #4
 800ad88:	3332      	adds	r3, #50	; 0x32
 800ad8a:	4a2a      	ldr	r2, [pc, #168]	; (800ae34 <UART_SetConfig+0x38c>)
 800ad8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad90:	095b      	lsrs	r3, r3, #5
 800ad92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad96:	441e      	add	r6, r3
 800ad98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f04f 0100 	mov.w	r1, #0
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	1894      	adds	r4, r2, r2
 800ada6:	603c      	str	r4, [r7, #0]
 800ada8:	415b      	adcs	r3, r3
 800adaa:	607b      	str	r3, [r7, #4]
 800adac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adb0:	1812      	adds	r2, r2, r0
 800adb2:	eb41 0303 	adc.w	r3, r1, r3
 800adb6:	f04f 0400 	mov.w	r4, #0
 800adba:	f04f 0500 	mov.w	r5, #0
 800adbe:	00dd      	lsls	r5, r3, #3
 800adc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800adc4:	00d4      	lsls	r4, r2, #3
 800adc6:	4622      	mov	r2, r4
 800adc8:	462b      	mov	r3, r5
 800adca:	eb12 0a00 	adds.w	sl, r2, r0
 800adce:	eb43 0b01 	adc.w	fp, r3, r1
 800add2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	4618      	mov	r0, r3
 800add8:	f04f 0100 	mov.w	r1, #0
 800addc:	f04f 0200 	mov.w	r2, #0
 800ade0:	f04f 0300 	mov.w	r3, #0
 800ade4:	008b      	lsls	r3, r1, #2
 800ade6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800adea:	0082      	lsls	r2, r0, #2
 800adec:	4650      	mov	r0, sl
 800adee:	4659      	mov	r1, fp
 800adf0:	f7f5 ff0c 	bl	8000c0c <__aeabi_uldivmod>
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	4b0e      	ldr	r3, [pc, #56]	; (800ae34 <UART_SetConfig+0x38c>)
 800adfa:	fba3 1302 	umull	r1, r3, r3, r2
 800adfe:	095b      	lsrs	r3, r3, #5
 800ae00:	2164      	movs	r1, #100	; 0x64
 800ae02:	fb01 f303 	mul.w	r3, r1, r3
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	011b      	lsls	r3, r3, #4
 800ae0a:	3332      	adds	r3, #50	; 0x32
 800ae0c:	4a09      	ldr	r2, [pc, #36]	; (800ae34 <UART_SetConfig+0x38c>)
 800ae0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	f003 020f 	and.w	r2, r3, #15
 800ae18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4432      	add	r2, r6
 800ae1e:	609a      	str	r2, [r3, #8]
}
 800ae20:	bf00      	nop
 800ae22:	377c      	adds	r7, #124	; 0x7c
 800ae24:	46bd      	mov	sp, r7
 800ae26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2a:	bf00      	nop
 800ae2c:	40011000 	.word	0x40011000
 800ae30:	40011400 	.word	0x40011400
 800ae34:	51eb851f 	.word	0x51eb851f

0800ae38 <cosf>:
 800ae38:	ee10 3a10 	vmov	r3, s0
 800ae3c:	b507      	push	{r0, r1, r2, lr}
 800ae3e:	4a1c      	ldr	r2, [pc, #112]	; (800aeb0 <cosf+0x78>)
 800ae40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae44:	4293      	cmp	r3, r2
 800ae46:	dc04      	bgt.n	800ae52 <cosf+0x1a>
 800ae48:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800aeb4 <cosf+0x7c>
 800ae4c:	f000 fb96 	bl	800b57c <__kernel_cosf>
 800ae50:	e004      	b.n	800ae5c <cosf+0x24>
 800ae52:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae56:	db04      	blt.n	800ae62 <cosf+0x2a>
 800ae58:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ae5c:	b003      	add	sp, #12
 800ae5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae62:	4668      	mov	r0, sp
 800ae64:	f000 fa4a 	bl	800b2fc <__ieee754_rem_pio2f>
 800ae68:	f000 0003 	and.w	r0, r0, #3
 800ae6c:	2801      	cmp	r0, #1
 800ae6e:	d007      	beq.n	800ae80 <cosf+0x48>
 800ae70:	2802      	cmp	r0, #2
 800ae72:	d00e      	beq.n	800ae92 <cosf+0x5a>
 800ae74:	b9a0      	cbnz	r0, 800aea0 <cosf+0x68>
 800ae76:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae7a:	ed9d 0a00 	vldr	s0, [sp]
 800ae7e:	e7e5      	b.n	800ae4c <cosf+0x14>
 800ae80:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae84:	ed9d 0a00 	vldr	s0, [sp]
 800ae88:	f000 fe62 	bl	800bb50 <__kernel_sinf>
 800ae8c:	eeb1 0a40 	vneg.f32	s0, s0
 800ae90:	e7e4      	b.n	800ae5c <cosf+0x24>
 800ae92:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae96:	ed9d 0a00 	vldr	s0, [sp]
 800ae9a:	f000 fb6f 	bl	800b57c <__kernel_cosf>
 800ae9e:	e7f5      	b.n	800ae8c <cosf+0x54>
 800aea0:	eddd 0a01 	vldr	s1, [sp, #4]
 800aea4:	ed9d 0a00 	vldr	s0, [sp]
 800aea8:	2001      	movs	r0, #1
 800aeaa:	f000 fe51 	bl	800bb50 <__kernel_sinf>
 800aeae:	e7d5      	b.n	800ae5c <cosf+0x24>
 800aeb0:	3f490fd8 	.word	0x3f490fd8
 800aeb4:	00000000 	.word	0x00000000

0800aeb8 <sinf>:
 800aeb8:	ee10 3a10 	vmov	r3, s0
 800aebc:	b507      	push	{r0, r1, r2, lr}
 800aebe:	4a1d      	ldr	r2, [pc, #116]	; (800af34 <sinf+0x7c>)
 800aec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aec4:	4293      	cmp	r3, r2
 800aec6:	dc05      	bgt.n	800aed4 <sinf+0x1c>
 800aec8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800af38 <sinf+0x80>
 800aecc:	2000      	movs	r0, #0
 800aece:	f000 fe3f 	bl	800bb50 <__kernel_sinf>
 800aed2:	e004      	b.n	800aede <sinf+0x26>
 800aed4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aed8:	db04      	blt.n	800aee4 <sinf+0x2c>
 800aeda:	ee30 0a40 	vsub.f32	s0, s0, s0
 800aede:	b003      	add	sp, #12
 800aee0:	f85d fb04 	ldr.w	pc, [sp], #4
 800aee4:	4668      	mov	r0, sp
 800aee6:	f000 fa09 	bl	800b2fc <__ieee754_rem_pio2f>
 800aeea:	f000 0003 	and.w	r0, r0, #3
 800aeee:	2801      	cmp	r0, #1
 800aef0:	d008      	beq.n	800af04 <sinf+0x4c>
 800aef2:	2802      	cmp	r0, #2
 800aef4:	d00d      	beq.n	800af12 <sinf+0x5a>
 800aef6:	b9b0      	cbnz	r0, 800af26 <sinf+0x6e>
 800aef8:	eddd 0a01 	vldr	s1, [sp, #4]
 800aefc:	ed9d 0a00 	vldr	s0, [sp]
 800af00:	2001      	movs	r0, #1
 800af02:	e7e4      	b.n	800aece <sinf+0x16>
 800af04:	eddd 0a01 	vldr	s1, [sp, #4]
 800af08:	ed9d 0a00 	vldr	s0, [sp]
 800af0c:	f000 fb36 	bl	800b57c <__kernel_cosf>
 800af10:	e7e5      	b.n	800aede <sinf+0x26>
 800af12:	eddd 0a01 	vldr	s1, [sp, #4]
 800af16:	ed9d 0a00 	vldr	s0, [sp]
 800af1a:	2001      	movs	r0, #1
 800af1c:	f000 fe18 	bl	800bb50 <__kernel_sinf>
 800af20:	eeb1 0a40 	vneg.f32	s0, s0
 800af24:	e7db      	b.n	800aede <sinf+0x26>
 800af26:	eddd 0a01 	vldr	s1, [sp, #4]
 800af2a:	ed9d 0a00 	vldr	s0, [sp]
 800af2e:	f000 fb25 	bl	800b57c <__kernel_cosf>
 800af32:	e7f5      	b.n	800af20 <sinf+0x68>
 800af34:	3f490fd8 	.word	0x3f490fd8
 800af38:	00000000 	.word	0x00000000

0800af3c <asinf>:
 800af3c:	b508      	push	{r3, lr}
 800af3e:	ed2d 8b02 	vpush	{d8}
 800af42:	eeb0 8a40 	vmov.f32	s16, s0
 800af46:	f000 f853 	bl	800aff0 <__ieee754_asinf>
 800af4a:	4b13      	ldr	r3, [pc, #76]	; (800af98 <asinf+0x5c>)
 800af4c:	f993 3000 	ldrsb.w	r3, [r3]
 800af50:	3301      	adds	r3, #1
 800af52:	eef0 8a40 	vmov.f32	s17, s0
 800af56:	d01a      	beq.n	800af8e <asinf+0x52>
 800af58:	eeb4 8a48 	vcmp.f32	s16, s16
 800af5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af60:	d615      	bvs.n	800af8e <asinf+0x52>
 800af62:	eeb0 0a48 	vmov.f32	s0, s16
 800af66:	f000 ff0f 	bl	800bd88 <fabsf>
 800af6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800af6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800af72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af76:	dd0a      	ble.n	800af8e <asinf+0x52>
 800af78:	f000 ffc8 	bl	800bf0c <__errno>
 800af7c:	ecbd 8b02 	vpop	{d8}
 800af80:	2321      	movs	r3, #33	; 0x21
 800af82:	6003      	str	r3, [r0, #0]
 800af84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800af88:	4804      	ldr	r0, [pc, #16]	; (800af9c <asinf+0x60>)
 800af8a:	f000 bf47 	b.w	800be1c <nanf>
 800af8e:	eeb0 0a68 	vmov.f32	s0, s17
 800af92:	ecbd 8b02 	vpop	{d8}
 800af96:	bd08      	pop	{r3, pc}
 800af98:	20000045 	.word	0x20000045
 800af9c:	0800d48d 	.word	0x0800d48d

0800afa0 <atan2f>:
 800afa0:	f000 b90c 	b.w	800b1bc <__ieee754_atan2f>

0800afa4 <sqrtf>:
 800afa4:	b508      	push	{r3, lr}
 800afa6:	ed2d 8b02 	vpush	{d8}
 800afaa:	eeb0 8a40 	vmov.f32	s16, s0
 800afae:	f000 fae1 	bl	800b574 <__ieee754_sqrtf>
 800afb2:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <sqrtf+0x44>)
 800afb4:	f993 3000 	ldrsb.w	r3, [r3]
 800afb8:	3301      	adds	r3, #1
 800afba:	d011      	beq.n	800afe0 <sqrtf+0x3c>
 800afbc:	eeb4 8a48 	vcmp.f32	s16, s16
 800afc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc4:	d60c      	bvs.n	800afe0 <sqrtf+0x3c>
 800afc6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800afec <sqrtf+0x48>
 800afca:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800afce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd2:	d505      	bpl.n	800afe0 <sqrtf+0x3c>
 800afd4:	f000 ff9a 	bl	800bf0c <__errno>
 800afd8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800afdc:	2321      	movs	r3, #33	; 0x21
 800afde:	6003      	str	r3, [r0, #0]
 800afe0:	ecbd 8b02 	vpop	{d8}
 800afe4:	bd08      	pop	{r3, pc}
 800afe6:	bf00      	nop
 800afe8:	20000045 	.word	0x20000045
 800afec:	00000000 	.word	0x00000000

0800aff0 <__ieee754_asinf>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	ee10 5a10 	vmov	r5, s0
 800aff6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800affa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800affe:	ed2d 8b04 	vpush	{d8-d9}
 800b002:	d10c      	bne.n	800b01e <__ieee754_asinf+0x2e>
 800b004:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800b17c <__ieee754_asinf+0x18c>
 800b008:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800b180 <__ieee754_asinf+0x190>
 800b00c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b010:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b014:	eeb0 0a67 	vmov.f32	s0, s15
 800b018:	ecbd 8b04 	vpop	{d8-d9}
 800b01c:	bd38      	pop	{r3, r4, r5, pc}
 800b01e:	dd04      	ble.n	800b02a <__ieee754_asinf+0x3a>
 800b020:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b024:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b028:	e7f6      	b.n	800b018 <__ieee754_asinf+0x28>
 800b02a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b02e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b032:	da0b      	bge.n	800b04c <__ieee754_asinf+0x5c>
 800b034:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b038:	da52      	bge.n	800b0e0 <__ieee754_asinf+0xf0>
 800b03a:	eddf 7a52 	vldr	s15, [pc, #328]	; 800b184 <__ieee754_asinf+0x194>
 800b03e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b042:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b04a:	dce5      	bgt.n	800b018 <__ieee754_asinf+0x28>
 800b04c:	f000 fe9c 	bl	800bd88 <fabsf>
 800b050:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800b054:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800b058:	ee20 8a08 	vmul.f32	s16, s0, s16
 800b05c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800b188 <__ieee754_asinf+0x198>
 800b060:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b18c <__ieee754_asinf+0x19c>
 800b064:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800b190 <__ieee754_asinf+0x1a0>
 800b068:	eea8 7a27 	vfma.f32	s14, s16, s15
 800b06c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800b194 <__ieee754_asinf+0x1a4>
 800b070:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b074:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b198 <__ieee754_asinf+0x1a8>
 800b078:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b07c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b19c <__ieee754_asinf+0x1ac>
 800b080:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b084:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b1a0 <__ieee754_asinf+0x1b0>
 800b088:	eea7 9a88 	vfma.f32	s18, s15, s16
 800b08c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800b1a4 <__ieee754_asinf+0x1b4>
 800b090:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b094:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b1a8 <__ieee754_asinf+0x1b8>
 800b098:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b09c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b1ac <__ieee754_asinf+0x1bc>
 800b0a0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b0a4:	eeb0 0a48 	vmov.f32	s0, s16
 800b0a8:	eee7 8a88 	vfma.f32	s17, s15, s16
 800b0ac:	f000 fa62 	bl	800b574 <__ieee754_sqrtf>
 800b0b0:	4b3f      	ldr	r3, [pc, #252]	; (800b1b0 <__ieee754_asinf+0x1c0>)
 800b0b2:	ee29 9a08 	vmul.f32	s18, s18, s16
 800b0b6:	429c      	cmp	r4, r3
 800b0b8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800b0bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b0c0:	dd3d      	ble.n	800b13e <__ieee754_asinf+0x14e>
 800b0c2:	eea0 0a06 	vfma.f32	s0, s0, s12
 800b0c6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800b1b4 <__ieee754_asinf+0x1c4>
 800b0ca:	eee0 7a26 	vfma.f32	s15, s0, s13
 800b0ce:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b180 <__ieee754_asinf+0x190>
 800b0d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b0d6:	2d00      	cmp	r5, #0
 800b0d8:	bfd8      	it	le
 800b0da:	eeb1 0a40 	vnegle.f32	s0, s0
 800b0de:	e79b      	b.n	800b018 <__ieee754_asinf+0x28>
 800b0e0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b0e4:	eddf 6a28 	vldr	s13, [pc, #160]	; 800b188 <__ieee754_asinf+0x198>
 800b0e8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b18c <__ieee754_asinf+0x19c>
 800b0ec:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800b1a0 <__ieee754_asinf+0x1b0>
 800b0f0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b0f4:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b194 <__ieee754_asinf+0x1a4>
 800b0f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b0fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b198 <__ieee754_asinf+0x1a8>
 800b100:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b104:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b19c <__ieee754_asinf+0x1ac>
 800b108:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b10c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b190 <__ieee754_asinf+0x1a0>
 800b110:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b114:	eddf 6a23 	vldr	s13, [pc, #140]	; 800b1a4 <__ieee754_asinf+0x1b4>
 800b118:	eee7 6a86 	vfma.f32	s13, s15, s12
 800b11c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b1a8 <__ieee754_asinf+0x1b8>
 800b120:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b124:	eddf 6a21 	vldr	s13, [pc, #132]	; 800b1ac <__ieee754_asinf+0x1bc>
 800b128:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b12c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b130:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b134:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b138:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b13c:	e76c      	b.n	800b018 <__ieee754_asinf+0x28>
 800b13e:	ee10 3a10 	vmov	r3, s0
 800b142:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b146:	f023 030f 	bic.w	r3, r3, #15
 800b14a:	ee07 3a10 	vmov	s14, r3
 800b14e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800b152:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b156:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b15a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800b15e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b17c <__ieee754_asinf+0x18c>
 800b162:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800b166:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800b16a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800b1b8 <__ieee754_asinf+0x1c8>
 800b16e:	eeb0 6a40 	vmov.f32	s12, s0
 800b172:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b176:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b17a:	e7aa      	b.n	800b0d2 <__ieee754_asinf+0xe2>
 800b17c:	b33bbd2e 	.word	0xb33bbd2e
 800b180:	3fc90fdb 	.word	0x3fc90fdb
 800b184:	7149f2ca 	.word	0x7149f2ca
 800b188:	3811ef08 	.word	0x3811ef08
 800b18c:	3a4f7f04 	.word	0x3a4f7f04
 800b190:	3e2aaaab 	.word	0x3e2aaaab
 800b194:	bd241146 	.word	0xbd241146
 800b198:	3e4e0aa8 	.word	0x3e4e0aa8
 800b19c:	bea6b090 	.word	0xbea6b090
 800b1a0:	3d9dc62e 	.word	0x3d9dc62e
 800b1a4:	bf303361 	.word	0xbf303361
 800b1a8:	4001572d 	.word	0x4001572d
 800b1ac:	c019d139 	.word	0xc019d139
 800b1b0:	3f799999 	.word	0x3f799999
 800b1b4:	333bbd2e 	.word	0x333bbd2e
 800b1b8:	3f490fdb 	.word	0x3f490fdb

0800b1bc <__ieee754_atan2f>:
 800b1bc:	ee10 2a90 	vmov	r2, s1
 800b1c0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b1c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	eef0 7a40 	vmov.f32	s15, s0
 800b1ce:	dc06      	bgt.n	800b1de <__ieee754_atan2f+0x22>
 800b1d0:	ee10 0a10 	vmov	r0, s0
 800b1d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b1d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b1dc:	dd04      	ble.n	800b1e8 <__ieee754_atan2f+0x2c>
 800b1de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b1e2:	eeb0 0a67 	vmov.f32	s0, s15
 800b1e6:	bd10      	pop	{r4, pc}
 800b1e8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800b1ec:	d103      	bne.n	800b1f6 <__ieee754_atan2f+0x3a>
 800b1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f2:	f000 bcf5 	b.w	800bbe0 <atanf>
 800b1f6:	1794      	asrs	r4, r2, #30
 800b1f8:	f004 0402 	and.w	r4, r4, #2
 800b1fc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b200:	b943      	cbnz	r3, 800b214 <__ieee754_atan2f+0x58>
 800b202:	2c02      	cmp	r4, #2
 800b204:	d05e      	beq.n	800b2c4 <__ieee754_atan2f+0x108>
 800b206:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b2d8 <__ieee754_atan2f+0x11c>
 800b20a:	2c03      	cmp	r4, #3
 800b20c:	bf08      	it	eq
 800b20e:	eef0 7a47 	vmoveq.f32	s15, s14
 800b212:	e7e6      	b.n	800b1e2 <__ieee754_atan2f+0x26>
 800b214:	b941      	cbnz	r1, 800b228 <__ieee754_atan2f+0x6c>
 800b216:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b2dc <__ieee754_atan2f+0x120>
 800b21a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b2e0 <__ieee754_atan2f+0x124>
 800b21e:	2800      	cmp	r0, #0
 800b220:	bfb8      	it	lt
 800b222:	eef0 7a40 	vmovlt.f32	s15, s0
 800b226:	e7dc      	b.n	800b1e2 <__ieee754_atan2f+0x26>
 800b228:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b22c:	d110      	bne.n	800b250 <__ieee754_atan2f+0x94>
 800b22e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b232:	f104 34ff 	add.w	r4, r4, #4294967295
 800b236:	d107      	bne.n	800b248 <__ieee754_atan2f+0x8c>
 800b238:	2c02      	cmp	r4, #2
 800b23a:	d846      	bhi.n	800b2ca <__ieee754_atan2f+0x10e>
 800b23c:	4b29      	ldr	r3, [pc, #164]	; (800b2e4 <__ieee754_atan2f+0x128>)
 800b23e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b242:	edd4 7a00 	vldr	s15, [r4]
 800b246:	e7cc      	b.n	800b1e2 <__ieee754_atan2f+0x26>
 800b248:	2c02      	cmp	r4, #2
 800b24a:	d841      	bhi.n	800b2d0 <__ieee754_atan2f+0x114>
 800b24c:	4b26      	ldr	r3, [pc, #152]	; (800b2e8 <__ieee754_atan2f+0x12c>)
 800b24e:	e7f6      	b.n	800b23e <__ieee754_atan2f+0x82>
 800b250:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b254:	d0df      	beq.n	800b216 <__ieee754_atan2f+0x5a>
 800b256:	1a5b      	subs	r3, r3, r1
 800b258:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800b25c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800b260:	da1a      	bge.n	800b298 <__ieee754_atan2f+0xdc>
 800b262:	2a00      	cmp	r2, #0
 800b264:	da01      	bge.n	800b26a <__ieee754_atan2f+0xae>
 800b266:	313c      	adds	r1, #60	; 0x3c
 800b268:	db19      	blt.n	800b29e <__ieee754_atan2f+0xe2>
 800b26a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b26e:	f000 fd8b 	bl	800bd88 <fabsf>
 800b272:	f000 fcb5 	bl	800bbe0 <atanf>
 800b276:	eef0 7a40 	vmov.f32	s15, s0
 800b27a:	2c01      	cmp	r4, #1
 800b27c:	d012      	beq.n	800b2a4 <__ieee754_atan2f+0xe8>
 800b27e:	2c02      	cmp	r4, #2
 800b280:	d017      	beq.n	800b2b2 <__ieee754_atan2f+0xf6>
 800b282:	2c00      	cmp	r4, #0
 800b284:	d0ad      	beq.n	800b1e2 <__ieee754_atan2f+0x26>
 800b286:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800b2ec <__ieee754_atan2f+0x130>
 800b28a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b28e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b2f0 <__ieee754_atan2f+0x134>
 800b292:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b296:	e7a4      	b.n	800b1e2 <__ieee754_atan2f+0x26>
 800b298:	eddf 7a10 	vldr	s15, [pc, #64]	; 800b2dc <__ieee754_atan2f+0x120>
 800b29c:	e7ed      	b.n	800b27a <__ieee754_atan2f+0xbe>
 800b29e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b2f4 <__ieee754_atan2f+0x138>
 800b2a2:	e7ea      	b.n	800b27a <__ieee754_atan2f+0xbe>
 800b2a4:	ee17 3a90 	vmov	r3, s15
 800b2a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2ac:	ee07 3a90 	vmov	s15, r3
 800b2b0:	e797      	b.n	800b1e2 <__ieee754_atan2f+0x26>
 800b2b2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b2ec <__ieee754_atan2f+0x130>
 800b2b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b2ba:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800b2f0 <__ieee754_atan2f+0x134>
 800b2be:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b2c2:	e78e      	b.n	800b1e2 <__ieee754_atan2f+0x26>
 800b2c4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800b2f0 <__ieee754_atan2f+0x134>
 800b2c8:	e78b      	b.n	800b1e2 <__ieee754_atan2f+0x26>
 800b2ca:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b2f8 <__ieee754_atan2f+0x13c>
 800b2ce:	e788      	b.n	800b1e2 <__ieee754_atan2f+0x26>
 800b2d0:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b2f4 <__ieee754_atan2f+0x138>
 800b2d4:	e785      	b.n	800b1e2 <__ieee754_atan2f+0x26>
 800b2d6:	bf00      	nop
 800b2d8:	c0490fdb 	.word	0xc0490fdb
 800b2dc:	3fc90fdb 	.word	0x3fc90fdb
 800b2e0:	bfc90fdb 	.word	0xbfc90fdb
 800b2e4:	0800cfd0 	.word	0x0800cfd0
 800b2e8:	0800cfdc 	.word	0x0800cfdc
 800b2ec:	33bbbd2e 	.word	0x33bbbd2e
 800b2f0:	40490fdb 	.word	0x40490fdb
 800b2f4:	00000000 	.word	0x00000000
 800b2f8:	3f490fdb 	.word	0x3f490fdb

0800b2fc <__ieee754_rem_pio2f>:
 800b2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2fe:	ee10 6a10 	vmov	r6, s0
 800b302:	4b8e      	ldr	r3, [pc, #568]	; (800b53c <__ieee754_rem_pio2f+0x240>)
 800b304:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b308:	429d      	cmp	r5, r3
 800b30a:	b087      	sub	sp, #28
 800b30c:	eef0 7a40 	vmov.f32	s15, s0
 800b310:	4604      	mov	r4, r0
 800b312:	dc05      	bgt.n	800b320 <__ieee754_rem_pio2f+0x24>
 800b314:	2300      	movs	r3, #0
 800b316:	ed80 0a00 	vstr	s0, [r0]
 800b31a:	6043      	str	r3, [r0, #4]
 800b31c:	2000      	movs	r0, #0
 800b31e:	e01a      	b.n	800b356 <__ieee754_rem_pio2f+0x5a>
 800b320:	4b87      	ldr	r3, [pc, #540]	; (800b540 <__ieee754_rem_pio2f+0x244>)
 800b322:	429d      	cmp	r5, r3
 800b324:	dc46      	bgt.n	800b3b4 <__ieee754_rem_pio2f+0xb8>
 800b326:	2e00      	cmp	r6, #0
 800b328:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b544 <__ieee754_rem_pio2f+0x248>
 800b32c:	4b86      	ldr	r3, [pc, #536]	; (800b548 <__ieee754_rem_pio2f+0x24c>)
 800b32e:	f025 050f 	bic.w	r5, r5, #15
 800b332:	dd1f      	ble.n	800b374 <__ieee754_rem_pio2f+0x78>
 800b334:	429d      	cmp	r5, r3
 800b336:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b33a:	d00e      	beq.n	800b35a <__ieee754_rem_pio2f+0x5e>
 800b33c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b54c <__ieee754_rem_pio2f+0x250>
 800b340:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b344:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b348:	ed80 0a00 	vstr	s0, [r0]
 800b34c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b350:	2001      	movs	r0, #1
 800b352:	edc4 7a01 	vstr	s15, [r4, #4]
 800b356:	b007      	add	sp, #28
 800b358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b35a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b550 <__ieee754_rem_pio2f+0x254>
 800b35e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b554 <__ieee754_rem_pio2f+0x258>
 800b362:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b366:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b36a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b36e:	edc0 6a00 	vstr	s13, [r0]
 800b372:	e7eb      	b.n	800b34c <__ieee754_rem_pio2f+0x50>
 800b374:	429d      	cmp	r5, r3
 800b376:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b37a:	d00e      	beq.n	800b39a <__ieee754_rem_pio2f+0x9e>
 800b37c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b54c <__ieee754_rem_pio2f+0x250>
 800b380:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b384:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b388:	ed80 0a00 	vstr	s0, [r0]
 800b38c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b390:	f04f 30ff 	mov.w	r0, #4294967295
 800b394:	edc4 7a01 	vstr	s15, [r4, #4]
 800b398:	e7dd      	b.n	800b356 <__ieee754_rem_pio2f+0x5a>
 800b39a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b550 <__ieee754_rem_pio2f+0x254>
 800b39e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b554 <__ieee754_rem_pio2f+0x258>
 800b3a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b3a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b3aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b3ae:	edc0 6a00 	vstr	s13, [r0]
 800b3b2:	e7eb      	b.n	800b38c <__ieee754_rem_pio2f+0x90>
 800b3b4:	4b68      	ldr	r3, [pc, #416]	; (800b558 <__ieee754_rem_pio2f+0x25c>)
 800b3b6:	429d      	cmp	r5, r3
 800b3b8:	dc72      	bgt.n	800b4a0 <__ieee754_rem_pio2f+0x1a4>
 800b3ba:	f000 fce5 	bl	800bd88 <fabsf>
 800b3be:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b55c <__ieee754_rem_pio2f+0x260>
 800b3c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b3c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b3ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b3d2:	ee17 0a90 	vmov	r0, s15
 800b3d6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b544 <__ieee754_rem_pio2f+0x248>
 800b3da:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b3de:	281f      	cmp	r0, #31
 800b3e0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b54c <__ieee754_rem_pio2f+0x250>
 800b3e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e8:	eeb1 6a47 	vneg.f32	s12, s14
 800b3ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b3f0:	ee16 2a90 	vmov	r2, s13
 800b3f4:	dc1c      	bgt.n	800b430 <__ieee754_rem_pio2f+0x134>
 800b3f6:	495a      	ldr	r1, [pc, #360]	; (800b560 <__ieee754_rem_pio2f+0x264>)
 800b3f8:	1e47      	subs	r7, r0, #1
 800b3fa:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b3fe:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b402:	428b      	cmp	r3, r1
 800b404:	d014      	beq.n	800b430 <__ieee754_rem_pio2f+0x134>
 800b406:	6022      	str	r2, [r4, #0]
 800b408:	ed94 7a00 	vldr	s14, [r4]
 800b40c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b410:	2e00      	cmp	r6, #0
 800b412:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b416:	ed84 0a01 	vstr	s0, [r4, #4]
 800b41a:	da9c      	bge.n	800b356 <__ieee754_rem_pio2f+0x5a>
 800b41c:	eeb1 7a47 	vneg.f32	s14, s14
 800b420:	eeb1 0a40 	vneg.f32	s0, s0
 800b424:	ed84 7a00 	vstr	s14, [r4]
 800b428:	ed84 0a01 	vstr	s0, [r4, #4]
 800b42c:	4240      	negs	r0, r0
 800b42e:	e792      	b.n	800b356 <__ieee754_rem_pio2f+0x5a>
 800b430:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b434:	15eb      	asrs	r3, r5, #23
 800b436:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b43a:	2d08      	cmp	r5, #8
 800b43c:	dde3      	ble.n	800b406 <__ieee754_rem_pio2f+0x10a>
 800b43e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b550 <__ieee754_rem_pio2f+0x254>
 800b442:	eef0 6a40 	vmov.f32	s13, s0
 800b446:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b44a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b44e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b452:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b554 <__ieee754_rem_pio2f+0x258>
 800b456:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800b45a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b45e:	eef0 7a40 	vmov.f32	s15, s0
 800b462:	ee15 2a90 	vmov	r2, s11
 800b466:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b46a:	1a5b      	subs	r3, r3, r1
 800b46c:	2b19      	cmp	r3, #25
 800b46e:	dc04      	bgt.n	800b47a <__ieee754_rem_pio2f+0x17e>
 800b470:	edc4 5a00 	vstr	s11, [r4]
 800b474:	eeb0 0a66 	vmov.f32	s0, s13
 800b478:	e7c6      	b.n	800b408 <__ieee754_rem_pio2f+0x10c>
 800b47a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b564 <__ieee754_rem_pio2f+0x268>
 800b47e:	eeb0 0a66 	vmov.f32	s0, s13
 800b482:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b486:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b48a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b568 <__ieee754_rem_pio2f+0x26c>
 800b48e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b492:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b496:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b49a:	ed84 7a00 	vstr	s14, [r4]
 800b49e:	e7b3      	b.n	800b408 <__ieee754_rem_pio2f+0x10c>
 800b4a0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b4a4:	db06      	blt.n	800b4b4 <__ieee754_rem_pio2f+0x1b8>
 800b4a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b4aa:	edc0 7a01 	vstr	s15, [r0, #4]
 800b4ae:	edc0 7a00 	vstr	s15, [r0]
 800b4b2:	e733      	b.n	800b31c <__ieee754_rem_pio2f+0x20>
 800b4b4:	15ea      	asrs	r2, r5, #23
 800b4b6:	3a86      	subs	r2, #134	; 0x86
 800b4b8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b4bc:	ee07 3a90 	vmov	s15, r3
 800b4c0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b4c4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b56c <__ieee754_rem_pio2f+0x270>
 800b4c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4d0:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b4d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b4dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4e4:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b4e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f4:	edcd 7a05 	vstr	s15, [sp, #20]
 800b4f8:	d11e      	bne.n	800b538 <__ieee754_rem_pio2f+0x23c>
 800b4fa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b502:	bf14      	ite	ne
 800b504:	2302      	movne	r3, #2
 800b506:	2301      	moveq	r3, #1
 800b508:	4919      	ldr	r1, [pc, #100]	; (800b570 <__ieee754_rem_pio2f+0x274>)
 800b50a:	9101      	str	r1, [sp, #4]
 800b50c:	2102      	movs	r1, #2
 800b50e:	9100      	str	r1, [sp, #0]
 800b510:	a803      	add	r0, sp, #12
 800b512:	4621      	mov	r1, r4
 800b514:	f000 f892 	bl	800b63c <__kernel_rem_pio2f>
 800b518:	2e00      	cmp	r6, #0
 800b51a:	f6bf af1c 	bge.w	800b356 <__ieee754_rem_pio2f+0x5a>
 800b51e:	edd4 7a00 	vldr	s15, [r4]
 800b522:	eef1 7a67 	vneg.f32	s15, s15
 800b526:	edc4 7a00 	vstr	s15, [r4]
 800b52a:	edd4 7a01 	vldr	s15, [r4, #4]
 800b52e:	eef1 7a67 	vneg.f32	s15, s15
 800b532:	edc4 7a01 	vstr	s15, [r4, #4]
 800b536:	e779      	b.n	800b42c <__ieee754_rem_pio2f+0x130>
 800b538:	2303      	movs	r3, #3
 800b53a:	e7e5      	b.n	800b508 <__ieee754_rem_pio2f+0x20c>
 800b53c:	3f490fd8 	.word	0x3f490fd8
 800b540:	4016cbe3 	.word	0x4016cbe3
 800b544:	3fc90f80 	.word	0x3fc90f80
 800b548:	3fc90fd0 	.word	0x3fc90fd0
 800b54c:	37354443 	.word	0x37354443
 800b550:	37354400 	.word	0x37354400
 800b554:	2e85a308 	.word	0x2e85a308
 800b558:	43490f80 	.word	0x43490f80
 800b55c:	3f22f984 	.word	0x3f22f984
 800b560:	0800cfe8 	.word	0x0800cfe8
 800b564:	2e85a300 	.word	0x2e85a300
 800b568:	248d3132 	.word	0x248d3132
 800b56c:	43800000 	.word	0x43800000
 800b570:	0800d068 	.word	0x0800d068

0800b574 <__ieee754_sqrtf>:
 800b574:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b578:	4770      	bx	lr
	...

0800b57c <__kernel_cosf>:
 800b57c:	ee10 3a10 	vmov	r3, s0
 800b580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b584:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b588:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b58c:	da05      	bge.n	800b59a <__kernel_cosf+0x1e>
 800b58e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b592:	ee17 2a90 	vmov	r2, s15
 800b596:	2a00      	cmp	r2, #0
 800b598:	d03d      	beq.n	800b616 <__kernel_cosf+0x9a>
 800b59a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800b59e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b61c <__kernel_cosf+0xa0>
 800b5a2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b620 <__kernel_cosf+0xa4>
 800b5a6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800b624 <__kernel_cosf+0xa8>
 800b5aa:	4a1f      	ldr	r2, [pc, #124]	; (800b628 <__kernel_cosf+0xac>)
 800b5ac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b62c <__kernel_cosf+0xb0>
 800b5b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b5ba:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b630 <__kernel_cosf+0xb4>
 800b5be:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b5c2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b634 <__kernel_cosf+0xb8>
 800b5c6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b5ca:	eeb0 7a66 	vmov.f32	s14, s13
 800b5ce:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b5d2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b5d6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800b5da:	ee67 6a25 	vmul.f32	s13, s14, s11
 800b5de:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800b5e2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b5e6:	dc04      	bgt.n	800b5f2 <__kernel_cosf+0x76>
 800b5e8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b5ec:	ee36 0a47 	vsub.f32	s0, s12, s14
 800b5f0:	4770      	bx	lr
 800b5f2:	4a11      	ldr	r2, [pc, #68]	; (800b638 <__kernel_cosf+0xbc>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	bfda      	itte	le
 800b5f8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b5fc:	ee06 3a90 	vmovle	s13, r3
 800b600:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800b604:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b608:	ee36 0a66 	vsub.f32	s0, s12, s13
 800b60c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b610:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b614:	4770      	bx	lr
 800b616:	eeb0 0a46 	vmov.f32	s0, s12
 800b61a:	4770      	bx	lr
 800b61c:	ad47d74e 	.word	0xad47d74e
 800b620:	310f74f6 	.word	0x310f74f6
 800b624:	3d2aaaab 	.word	0x3d2aaaab
 800b628:	3e999999 	.word	0x3e999999
 800b62c:	b493f27c 	.word	0xb493f27c
 800b630:	37d00d01 	.word	0x37d00d01
 800b634:	bab60b61 	.word	0xbab60b61
 800b638:	3f480000 	.word	0x3f480000

0800b63c <__kernel_rem_pio2f>:
 800b63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b640:	ed2d 8b04 	vpush	{d8-d9}
 800b644:	b0d7      	sub	sp, #348	; 0x15c
 800b646:	4616      	mov	r6, r2
 800b648:	4698      	mov	r8, r3
 800b64a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b64c:	4bbb      	ldr	r3, [pc, #748]	; (800b93c <__kernel_rem_pio2f+0x300>)
 800b64e:	9001      	str	r0, [sp, #4]
 800b650:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800b654:	1d33      	adds	r3, r6, #4
 800b656:	460d      	mov	r5, r1
 800b658:	f108 39ff 	add.w	r9, r8, #4294967295
 800b65c:	db29      	blt.n	800b6b2 <__kernel_rem_pio2f+0x76>
 800b65e:	1ef1      	subs	r1, r6, #3
 800b660:	bf48      	it	mi
 800b662:	1d31      	addmi	r1, r6, #4
 800b664:	10c9      	asrs	r1, r1, #3
 800b666:	1c4c      	adds	r4, r1, #1
 800b668:	00e3      	lsls	r3, r4, #3
 800b66a:	9302      	str	r3, [sp, #8]
 800b66c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800b66e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800b94c <__kernel_rem_pio2f+0x310>
 800b672:	eba1 0009 	sub.w	r0, r1, r9
 800b676:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800b67a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800b67e:	eb07 0c09 	add.w	ip, r7, r9
 800b682:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800b686:	2300      	movs	r3, #0
 800b688:	4563      	cmp	r3, ip
 800b68a:	dd14      	ble.n	800b6b6 <__kernel_rem_pio2f+0x7a>
 800b68c:	ab1a      	add	r3, sp, #104	; 0x68
 800b68e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800b692:	46cc      	mov	ip, r9
 800b694:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800b698:	f1c8 0b01 	rsb	fp, r8, #1
 800b69c:	eb0b 020c 	add.w	r2, fp, ip
 800b6a0:	4297      	cmp	r7, r2
 800b6a2:	db27      	blt.n	800b6f4 <__kernel_rem_pio2f+0xb8>
 800b6a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b6a8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800b94c <__kernel_rem_pio2f+0x310>
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	e016      	b.n	800b6e0 <__kernel_rem_pio2f+0xa4>
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	e7d7      	b.n	800b666 <__kernel_rem_pio2f+0x2a>
 800b6b6:	42d8      	cmn	r0, r3
 800b6b8:	bf5d      	ittte	pl
 800b6ba:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800b6be:	ee07 2a90 	vmovpl	s15, r2
 800b6c2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b6c6:	eef0 7a47 	vmovmi.f32	s15, s14
 800b6ca:	ecea 7a01 	vstmia	sl!, {s15}
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	e7da      	b.n	800b688 <__kernel_rem_pio2f+0x4c>
 800b6d2:	ecfe 6a01 	vldmia	lr!, {s13}
 800b6d6:	ed90 7a00 	vldr	s14, [r0]
 800b6da:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b6de:	3201      	adds	r2, #1
 800b6e0:	454a      	cmp	r2, r9
 800b6e2:	f1a0 0004 	sub.w	r0, r0, #4
 800b6e6:	ddf4      	ble.n	800b6d2 <__kernel_rem_pio2f+0x96>
 800b6e8:	ecea 7a01 	vstmia	sl!, {s15}
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	f10c 0c01 	add.w	ip, ip, #1
 800b6f2:	e7d3      	b.n	800b69c <__kernel_rem_pio2f+0x60>
 800b6f4:	ab06      	add	r3, sp, #24
 800b6f6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800b6fe:	eddf 8a92 	vldr	s17, [pc, #584]	; 800b948 <__kernel_rem_pio2f+0x30c>
 800b702:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800b944 <__kernel_rem_pio2f+0x308>
 800b706:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b70a:	9303      	str	r3, [sp, #12]
 800b70c:	46ba      	mov	sl, r7
 800b70e:	ab56      	add	r3, sp, #344	; 0x158
 800b710:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b714:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800b718:	ab06      	add	r3, sp, #24
 800b71a:	4618      	mov	r0, r3
 800b71c:	4652      	mov	r2, sl
 800b71e:	2a00      	cmp	r2, #0
 800b720:	dc51      	bgt.n	800b7c6 <__kernel_rem_pio2f+0x18a>
 800b722:	4620      	mov	r0, r4
 800b724:	9305      	str	r3, [sp, #20]
 800b726:	f000 fb7f 	bl	800be28 <scalbnf>
 800b72a:	eeb0 8a40 	vmov.f32	s16, s0
 800b72e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b732:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b736:	f000 fb2f 	bl	800bd98 <floorf>
 800b73a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b73e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b742:	2c00      	cmp	r4, #0
 800b744:	9b05      	ldr	r3, [sp, #20]
 800b746:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b74a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b74e:	edcd 7a00 	vstr	s15, [sp]
 800b752:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b756:	dd4b      	ble.n	800b7f0 <__kernel_rem_pio2f+0x1b4>
 800b758:	f10a 3cff 	add.w	ip, sl, #4294967295
 800b75c:	aa06      	add	r2, sp, #24
 800b75e:	f1c4 0e08 	rsb	lr, r4, #8
 800b762:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b766:	ee17 1a90 	vmov	r1, s15
 800b76a:	fa42 f00e 	asr.w	r0, r2, lr
 800b76e:	4401      	add	r1, r0
 800b770:	9100      	str	r1, [sp, #0]
 800b772:	fa00 f00e 	lsl.w	r0, r0, lr
 800b776:	a906      	add	r1, sp, #24
 800b778:	1a12      	subs	r2, r2, r0
 800b77a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b77e:	f1c4 0007 	rsb	r0, r4, #7
 800b782:	fa42 fb00 	asr.w	fp, r2, r0
 800b786:	f1bb 0f00 	cmp.w	fp, #0
 800b78a:	dd43      	ble.n	800b814 <__kernel_rem_pio2f+0x1d8>
 800b78c:	9a00      	ldr	r2, [sp, #0]
 800b78e:	f04f 0e00 	mov.w	lr, #0
 800b792:	3201      	adds	r2, #1
 800b794:	9200      	str	r2, [sp, #0]
 800b796:	4670      	mov	r0, lr
 800b798:	45f2      	cmp	sl, lr
 800b79a:	dc6c      	bgt.n	800b876 <__kernel_rem_pio2f+0x23a>
 800b79c:	2c00      	cmp	r4, #0
 800b79e:	dd04      	ble.n	800b7aa <__kernel_rem_pio2f+0x16e>
 800b7a0:	2c01      	cmp	r4, #1
 800b7a2:	d079      	beq.n	800b898 <__kernel_rem_pio2f+0x25c>
 800b7a4:	2c02      	cmp	r4, #2
 800b7a6:	f000 8082 	beq.w	800b8ae <__kernel_rem_pio2f+0x272>
 800b7aa:	f1bb 0f02 	cmp.w	fp, #2
 800b7ae:	d131      	bne.n	800b814 <__kernel_rem_pio2f+0x1d8>
 800b7b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b7b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b7b8:	b360      	cbz	r0, 800b814 <__kernel_rem_pio2f+0x1d8>
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 fb34 	bl	800be28 <scalbnf>
 800b7c0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b7c4:	e026      	b.n	800b814 <__kernel_rem_pio2f+0x1d8>
 800b7c6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b7ca:	3a01      	subs	r2, #1
 800b7cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7d0:	a942      	add	r1, sp, #264	; 0x108
 800b7d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7d6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800b7da:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b7de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b7e2:	eca0 0a01 	vstmia	r0!, {s0}
 800b7e6:	ed9c 0a00 	vldr	s0, [ip]
 800b7ea:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b7ee:	e796      	b.n	800b71e <__kernel_rem_pio2f+0xe2>
 800b7f0:	d107      	bne.n	800b802 <__kernel_rem_pio2f+0x1c6>
 800b7f2:	f10a 32ff 	add.w	r2, sl, #4294967295
 800b7f6:	a906      	add	r1, sp, #24
 800b7f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b7fc:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800b800:	e7c1      	b.n	800b786 <__kernel_rem_pio2f+0x14a>
 800b802:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b806:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b80e:	da2f      	bge.n	800b870 <__kernel_rem_pio2f+0x234>
 800b810:	f04f 0b00 	mov.w	fp, #0
 800b814:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b81c:	f040 8098 	bne.w	800b950 <__kernel_rem_pio2f+0x314>
 800b820:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b824:	469c      	mov	ip, r3
 800b826:	2200      	movs	r2, #0
 800b828:	45bc      	cmp	ip, r7
 800b82a:	da48      	bge.n	800b8be <__kernel_rem_pio2f+0x282>
 800b82c:	2a00      	cmp	r2, #0
 800b82e:	d05f      	beq.n	800b8f0 <__kernel_rem_pio2f+0x2b4>
 800b830:	aa06      	add	r2, sp, #24
 800b832:	3c08      	subs	r4, #8
 800b834:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b838:	2900      	cmp	r1, #0
 800b83a:	d07d      	beq.n	800b938 <__kernel_rem_pio2f+0x2fc>
 800b83c:	4620      	mov	r0, r4
 800b83e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	f000 faf0 	bl	800be28 <scalbnf>
 800b848:	9b01      	ldr	r3, [sp, #4]
 800b84a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b948 <__kernel_rem_pio2f+0x30c>
 800b84e:	4619      	mov	r1, r3
 800b850:	2900      	cmp	r1, #0
 800b852:	f280 80af 	bge.w	800b9b4 <__kernel_rem_pio2f+0x378>
 800b856:	4618      	mov	r0, r3
 800b858:	2400      	movs	r4, #0
 800b85a:	2800      	cmp	r0, #0
 800b85c:	f2c0 80d0 	blt.w	800ba00 <__kernel_rem_pio2f+0x3c4>
 800b860:	a942      	add	r1, sp, #264	; 0x108
 800b862:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800b866:	4a36      	ldr	r2, [pc, #216]	; (800b940 <__kernel_rem_pio2f+0x304>)
 800b868:	eddf 7a38 	vldr	s15, [pc, #224]	; 800b94c <__kernel_rem_pio2f+0x310>
 800b86c:	2100      	movs	r1, #0
 800b86e:	e0bb      	b.n	800b9e8 <__kernel_rem_pio2f+0x3ac>
 800b870:	f04f 0b02 	mov.w	fp, #2
 800b874:	e78a      	b.n	800b78c <__kernel_rem_pio2f+0x150>
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	b948      	cbnz	r0, 800b88e <__kernel_rem_pio2f+0x252>
 800b87a:	b11a      	cbz	r2, 800b884 <__kernel_rem_pio2f+0x248>
 800b87c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800b880:	601a      	str	r2, [r3, #0]
 800b882:	2201      	movs	r2, #1
 800b884:	f10e 0e01 	add.w	lr, lr, #1
 800b888:	3304      	adds	r3, #4
 800b88a:	4610      	mov	r0, r2
 800b88c:	e784      	b.n	800b798 <__kernel_rem_pio2f+0x15c>
 800b88e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	4602      	mov	r2, r0
 800b896:	e7f5      	b.n	800b884 <__kernel_rem_pio2f+0x248>
 800b898:	f10a 3cff 	add.w	ip, sl, #4294967295
 800b89c:	ab06      	add	r3, sp, #24
 800b89e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b8a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8a6:	aa06      	add	r2, sp, #24
 800b8a8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800b8ac:	e77d      	b.n	800b7aa <__kernel_rem_pio2f+0x16e>
 800b8ae:	f10a 3cff 	add.w	ip, sl, #4294967295
 800b8b2:	ab06      	add	r3, sp, #24
 800b8b4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b8b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8bc:	e7f3      	b.n	800b8a6 <__kernel_rem_pio2f+0x26a>
 800b8be:	a906      	add	r1, sp, #24
 800b8c0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800b8c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b8c8:	4302      	orrs	r2, r0
 800b8ca:	e7ad      	b.n	800b828 <__kernel_rem_pio2f+0x1ec>
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b8d2:	2a00      	cmp	r2, #0
 800b8d4:	d0fa      	beq.n	800b8cc <__kernel_rem_pio2f+0x290>
 800b8d6:	a91a      	add	r1, sp, #104	; 0x68
 800b8d8:	eb0a 0208 	add.w	r2, sl, r8
 800b8dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b8e0:	f10a 0301 	add.w	r3, sl, #1
 800b8e4:	eb0a 0100 	add.w	r1, sl, r0
 800b8e8:	4299      	cmp	r1, r3
 800b8ea:	da04      	bge.n	800b8f6 <__kernel_rem_pio2f+0x2ba>
 800b8ec:	468a      	mov	sl, r1
 800b8ee:	e70e      	b.n	800b70e <__kernel_rem_pio2f+0xd2>
 800b8f0:	9b04      	ldr	r3, [sp, #16]
 800b8f2:	2001      	movs	r0, #1
 800b8f4:	e7eb      	b.n	800b8ce <__kernel_rem_pio2f+0x292>
 800b8f6:	9803      	ldr	r0, [sp, #12]
 800b8f8:	f8dd c004 	ldr.w	ip, [sp, #4]
 800b8fc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800b900:	9000      	str	r0, [sp, #0]
 800b902:	ee07 0a90 	vmov	s15, r0
 800b906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b90a:	2000      	movs	r0, #0
 800b90c:	ece2 7a01 	vstmia	r2!, {s15}
 800b910:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b94c <__kernel_rem_pio2f+0x310>
 800b914:	4696      	mov	lr, r2
 800b916:	4548      	cmp	r0, r9
 800b918:	dd06      	ble.n	800b928 <__kernel_rem_pio2f+0x2ec>
 800b91a:	a842      	add	r0, sp, #264	; 0x108
 800b91c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b920:	edc0 7a00 	vstr	s15, [r0]
 800b924:	3301      	adds	r3, #1
 800b926:	e7df      	b.n	800b8e8 <__kernel_rem_pio2f+0x2ac>
 800b928:	ecfc 6a01 	vldmia	ip!, {s13}
 800b92c:	ed3e 7a01 	vldmdb	lr!, {s14}
 800b930:	3001      	adds	r0, #1
 800b932:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b936:	e7ee      	b.n	800b916 <__kernel_rem_pio2f+0x2da>
 800b938:	3b01      	subs	r3, #1
 800b93a:	e779      	b.n	800b830 <__kernel_rem_pio2f+0x1f4>
 800b93c:	0800d3ac 	.word	0x0800d3ac
 800b940:	0800d380 	.word	0x0800d380
 800b944:	43800000 	.word	0x43800000
 800b948:	3b800000 	.word	0x3b800000
 800b94c:	00000000 	.word	0x00000000
 800b950:	9b02      	ldr	r3, [sp, #8]
 800b952:	eeb0 0a48 	vmov.f32	s0, s16
 800b956:	1b98      	subs	r0, r3, r6
 800b958:	f000 fa66 	bl	800be28 <scalbnf>
 800b95c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b944 <__kernel_rem_pio2f+0x308>
 800b960:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b968:	db1b      	blt.n	800b9a2 <__kernel_rem_pio2f+0x366>
 800b96a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b948 <__kernel_rem_pio2f+0x30c>
 800b96e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b972:	aa06      	add	r2, sp, #24
 800b974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b978:	a906      	add	r1, sp, #24
 800b97a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b97e:	3408      	adds	r4, #8
 800b980:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b988:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b98c:	ee10 3a10 	vmov	r3, s0
 800b990:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800b994:	ee17 2a90 	vmov	r2, s15
 800b998:	f10a 0301 	add.w	r3, sl, #1
 800b99c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b9a0:	e74c      	b.n	800b83c <__kernel_rem_pio2f+0x200>
 800b9a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b9a6:	aa06      	add	r2, sp, #24
 800b9a8:	ee10 3a10 	vmov	r3, s0
 800b9ac:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800b9b0:	4653      	mov	r3, sl
 800b9b2:	e743      	b.n	800b83c <__kernel_rem_pio2f+0x200>
 800b9b4:	aa42      	add	r2, sp, #264	; 0x108
 800b9b6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800b9ba:	aa06      	add	r2, sp, #24
 800b9bc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b9c0:	9201      	str	r2, [sp, #4]
 800b9c2:	ee07 2a90 	vmov	s15, r2
 800b9c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ca:	3901      	subs	r1, #1
 800b9cc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b9d0:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b9d4:	edc0 7a00 	vstr	s15, [r0]
 800b9d8:	e73a      	b.n	800b850 <__kernel_rem_pio2f+0x214>
 800b9da:	ecf2 6a01 	vldmia	r2!, {s13}
 800b9de:	ecb6 7a01 	vldmia	r6!, {s14}
 800b9e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9e6:	3101      	adds	r1, #1
 800b9e8:	42b9      	cmp	r1, r7
 800b9ea:	dc01      	bgt.n	800b9f0 <__kernel_rem_pio2f+0x3b4>
 800b9ec:	428c      	cmp	r4, r1
 800b9ee:	daf4      	bge.n	800b9da <__kernel_rem_pio2f+0x39e>
 800b9f0:	aa56      	add	r2, sp, #344	; 0x158
 800b9f2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800b9f6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b9fa:	3801      	subs	r0, #1
 800b9fc:	3401      	adds	r4, #1
 800b9fe:	e72c      	b.n	800b85a <__kernel_rem_pio2f+0x21e>
 800ba00:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ba02:	2a02      	cmp	r2, #2
 800ba04:	dc0a      	bgt.n	800ba1c <__kernel_rem_pio2f+0x3e0>
 800ba06:	2a00      	cmp	r2, #0
 800ba08:	dc61      	bgt.n	800bace <__kernel_rem_pio2f+0x492>
 800ba0a:	d03c      	beq.n	800ba86 <__kernel_rem_pio2f+0x44a>
 800ba0c:	9b00      	ldr	r3, [sp, #0]
 800ba0e:	f003 0007 	and.w	r0, r3, #7
 800ba12:	b057      	add	sp, #348	; 0x15c
 800ba14:	ecbd 8b04 	vpop	{d8-d9}
 800ba18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ba1e:	2a03      	cmp	r2, #3
 800ba20:	d1f4      	bne.n	800ba0c <__kernel_rem_pio2f+0x3d0>
 800ba22:	aa2e      	add	r2, sp, #184	; 0xb8
 800ba24:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ba28:	4608      	mov	r0, r1
 800ba2a:	461c      	mov	r4, r3
 800ba2c:	2c00      	cmp	r4, #0
 800ba2e:	f1a0 0004 	sub.w	r0, r0, #4
 800ba32:	dc59      	bgt.n	800bae8 <__kernel_rem_pio2f+0x4ac>
 800ba34:	4618      	mov	r0, r3
 800ba36:	2801      	cmp	r0, #1
 800ba38:	f1a1 0104 	sub.w	r1, r1, #4
 800ba3c:	dc64      	bgt.n	800bb08 <__kernel_rem_pio2f+0x4cc>
 800ba3e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800b94c <__kernel_rem_pio2f+0x310>
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	dc70      	bgt.n	800bb28 <__kernel_rem_pio2f+0x4ec>
 800ba46:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800ba4a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800ba4e:	f1bb 0f00 	cmp.w	fp, #0
 800ba52:	d172      	bne.n	800bb3a <__kernel_rem_pio2f+0x4fe>
 800ba54:	edc5 6a00 	vstr	s13, [r5]
 800ba58:	ed85 7a01 	vstr	s14, [r5, #4]
 800ba5c:	edc5 7a02 	vstr	s15, [r5, #8]
 800ba60:	e7d4      	b.n	800ba0c <__kernel_rem_pio2f+0x3d0>
 800ba62:	aa2e      	add	r2, sp, #184	; 0xb8
 800ba64:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ba68:	ed91 7a00 	vldr	s14, [r1]
 800ba6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba70:	3b01      	subs	r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	daf5      	bge.n	800ba62 <__kernel_rem_pio2f+0x426>
 800ba76:	f1bb 0f00 	cmp.w	fp, #0
 800ba7a:	d001      	beq.n	800ba80 <__kernel_rem_pio2f+0x444>
 800ba7c:	eef1 7a67 	vneg.f32	s15, s15
 800ba80:	edc5 7a00 	vstr	s15, [r5]
 800ba84:	e7c2      	b.n	800ba0c <__kernel_rem_pio2f+0x3d0>
 800ba86:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800b94c <__kernel_rem_pio2f+0x310>
 800ba8a:	e7f2      	b.n	800ba72 <__kernel_rem_pio2f+0x436>
 800ba8c:	aa2e      	add	r2, sp, #184	; 0xb8
 800ba8e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800ba92:	edd0 7a00 	vldr	s15, [r0]
 800ba96:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ba9a:	3901      	subs	r1, #1
 800ba9c:	2900      	cmp	r1, #0
 800ba9e:	daf5      	bge.n	800ba8c <__kernel_rem_pio2f+0x450>
 800baa0:	f1bb 0f00 	cmp.w	fp, #0
 800baa4:	d017      	beq.n	800bad6 <__kernel_rem_pio2f+0x49a>
 800baa6:	eef1 7a47 	vneg.f32	s15, s14
 800baaa:	edc5 7a00 	vstr	s15, [r5]
 800baae:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800bab2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bab6:	a82f      	add	r0, sp, #188	; 0xbc
 800bab8:	2101      	movs	r1, #1
 800baba:	428b      	cmp	r3, r1
 800babc:	da0e      	bge.n	800badc <__kernel_rem_pio2f+0x4a0>
 800babe:	f1bb 0f00 	cmp.w	fp, #0
 800bac2:	d001      	beq.n	800bac8 <__kernel_rem_pio2f+0x48c>
 800bac4:	eef1 7a67 	vneg.f32	s15, s15
 800bac8:	edc5 7a01 	vstr	s15, [r5, #4]
 800bacc:	e79e      	b.n	800ba0c <__kernel_rem_pio2f+0x3d0>
 800bace:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800b94c <__kernel_rem_pio2f+0x310>
 800bad2:	4619      	mov	r1, r3
 800bad4:	e7e2      	b.n	800ba9c <__kernel_rem_pio2f+0x460>
 800bad6:	eef0 7a47 	vmov.f32	s15, s14
 800bada:	e7e6      	b.n	800baaa <__kernel_rem_pio2f+0x46e>
 800badc:	ecb0 7a01 	vldmia	r0!, {s14}
 800bae0:	3101      	adds	r1, #1
 800bae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bae6:	e7e8      	b.n	800baba <__kernel_rem_pio2f+0x47e>
 800bae8:	edd0 7a00 	vldr	s15, [r0]
 800baec:	edd0 6a01 	vldr	s13, [r0, #4]
 800baf0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800baf4:	3c01      	subs	r4, #1
 800baf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bafa:	ed80 7a00 	vstr	s14, [r0]
 800bafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb02:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb06:	e791      	b.n	800ba2c <__kernel_rem_pio2f+0x3f0>
 800bb08:	edd1 7a00 	vldr	s15, [r1]
 800bb0c:	edd1 6a01 	vldr	s13, [r1, #4]
 800bb10:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb14:	3801      	subs	r0, #1
 800bb16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb1a:	ed81 7a00 	vstr	s14, [r1]
 800bb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb22:	edc1 7a01 	vstr	s15, [r1, #4]
 800bb26:	e786      	b.n	800ba36 <__kernel_rem_pio2f+0x3fa>
 800bb28:	aa2e      	add	r2, sp, #184	; 0xb8
 800bb2a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800bb2e:	ed91 7a00 	vldr	s14, [r1]
 800bb32:	3b01      	subs	r3, #1
 800bb34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb38:	e783      	b.n	800ba42 <__kernel_rem_pio2f+0x406>
 800bb3a:	eef1 6a66 	vneg.f32	s13, s13
 800bb3e:	eeb1 7a47 	vneg.f32	s14, s14
 800bb42:	edc5 6a00 	vstr	s13, [r5]
 800bb46:	ed85 7a01 	vstr	s14, [r5, #4]
 800bb4a:	eef1 7a67 	vneg.f32	s15, s15
 800bb4e:	e785      	b.n	800ba5c <__kernel_rem_pio2f+0x420>

0800bb50 <__kernel_sinf>:
 800bb50:	ee10 3a10 	vmov	r3, s0
 800bb54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bb5c:	da04      	bge.n	800bb68 <__kernel_sinf+0x18>
 800bb5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bb62:	ee17 3a90 	vmov	r3, s15
 800bb66:	b35b      	cbz	r3, 800bbc0 <__kernel_sinf+0x70>
 800bb68:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bb6c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bbc4 <__kernel_sinf+0x74>
 800bb70:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800bbc8 <__kernel_sinf+0x78>
 800bb74:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bb78:	eddf 7a14 	vldr	s15, [pc, #80]	; 800bbcc <__kernel_sinf+0x7c>
 800bb7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bb80:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800bbd0 <__kernel_sinf+0x80>
 800bb84:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bb88:	eddf 7a12 	vldr	s15, [pc, #72]	; 800bbd4 <__kernel_sinf+0x84>
 800bb8c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bb90:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bb94:	b930      	cbnz	r0, 800bba4 <__kernel_sinf+0x54>
 800bb96:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800bbd8 <__kernel_sinf+0x88>
 800bb9a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bb9e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bba2:	4770      	bx	lr
 800bba4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bba8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bbac:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bbb0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bbb4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bbdc <__kernel_sinf+0x8c>
 800bbb8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bbbc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	2f2ec9d3 	.word	0x2f2ec9d3
 800bbc8:	b2d72f34 	.word	0xb2d72f34
 800bbcc:	3638ef1b 	.word	0x3638ef1b
 800bbd0:	b9500d01 	.word	0xb9500d01
 800bbd4:	3c088889 	.word	0x3c088889
 800bbd8:	be2aaaab 	.word	0xbe2aaaab
 800bbdc:	3e2aaaab 	.word	0x3e2aaaab

0800bbe0 <atanf>:
 800bbe0:	b538      	push	{r3, r4, r5, lr}
 800bbe2:	ee10 5a10 	vmov	r5, s0
 800bbe6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800bbea:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800bbee:	eef0 7a40 	vmov.f32	s15, s0
 800bbf2:	db10      	blt.n	800bc16 <atanf+0x36>
 800bbf4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800bbf8:	dd04      	ble.n	800bc04 <atanf+0x24>
 800bbfa:	ee70 7a00 	vadd.f32	s15, s0, s0
 800bbfe:	eeb0 0a67 	vmov.f32	s0, s15
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800bd3c <atanf+0x15c>
 800bc08:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800bd40 <atanf+0x160>
 800bc0c:	2d00      	cmp	r5, #0
 800bc0e:	bfd8      	it	le
 800bc10:	eef0 7a40 	vmovle.f32	s15, s0
 800bc14:	e7f3      	b.n	800bbfe <atanf+0x1e>
 800bc16:	4b4b      	ldr	r3, [pc, #300]	; (800bd44 <atanf+0x164>)
 800bc18:	429c      	cmp	r4, r3
 800bc1a:	dc10      	bgt.n	800bc3e <atanf+0x5e>
 800bc1c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800bc20:	da0a      	bge.n	800bc38 <atanf+0x58>
 800bc22:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800bd48 <atanf+0x168>
 800bc26:	ee30 7a07 	vadd.f32	s14, s0, s14
 800bc2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc2e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800bc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc36:	dce2      	bgt.n	800bbfe <atanf+0x1e>
 800bc38:	f04f 33ff 	mov.w	r3, #4294967295
 800bc3c:	e013      	b.n	800bc66 <atanf+0x86>
 800bc3e:	f000 f8a3 	bl	800bd88 <fabsf>
 800bc42:	4b42      	ldr	r3, [pc, #264]	; (800bd4c <atanf+0x16c>)
 800bc44:	429c      	cmp	r4, r3
 800bc46:	dc4f      	bgt.n	800bce8 <atanf+0x108>
 800bc48:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800bc4c:	429c      	cmp	r4, r3
 800bc4e:	dc41      	bgt.n	800bcd4 <atanf+0xf4>
 800bc50:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800bc54:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bc58:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bc66:	1c5a      	adds	r2, r3, #1
 800bc68:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800bc6c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800bd50 <atanf+0x170>
 800bc70:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800bd54 <atanf+0x174>
 800bc74:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800bd58 <atanf+0x178>
 800bc78:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800bd5c <atanf+0x17c>
 800bc7c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bc80:	eea7 6a25 	vfma.f32	s12, s14, s11
 800bc84:	eddf 5a36 	vldr	s11, [pc, #216]	; 800bd60 <atanf+0x180>
 800bc88:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bc8c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800bd64 <atanf+0x184>
 800bc90:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bc94:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bd68 <atanf+0x188>
 800bc98:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bc9c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800bd6c <atanf+0x18c>
 800bca0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bca4:	eddf 5a32 	vldr	s11, [pc, #200]	; 800bd70 <atanf+0x190>
 800bca8:	eee7 5a05 	vfma.f32	s11, s14, s10
 800bcac:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800bd74 <atanf+0x194>
 800bcb0:	eea5 5a87 	vfma.f32	s10, s11, s14
 800bcb4:	eddf 5a30 	vldr	s11, [pc, #192]	; 800bd78 <atanf+0x198>
 800bcb8:	eee5 5a07 	vfma.f32	s11, s10, s14
 800bcbc:	eea5 0a87 	vfma.f32	s0, s11, s14
 800bcc0:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bcc4:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bcc8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bccc:	d121      	bne.n	800bd12 <atanf+0x132>
 800bcce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bcd2:	e794      	b.n	800bbfe <atanf+0x1e>
 800bcd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bcd8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bcdc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bce0:	2301      	movs	r3, #1
 800bce2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bce6:	e7be      	b.n	800bc66 <atanf+0x86>
 800bce8:	4b24      	ldr	r3, [pc, #144]	; (800bd7c <atanf+0x19c>)
 800bcea:	429c      	cmp	r4, r3
 800bcec:	dc0b      	bgt.n	800bd06 <atanf+0x126>
 800bcee:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800bcf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcf6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bd00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd04:	e7af      	b.n	800bc66 <atanf+0x86>
 800bd06:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bd0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bd0e:	2303      	movs	r3, #3
 800bd10:	e7a9      	b.n	800bc66 <atanf+0x86>
 800bd12:	4a1b      	ldr	r2, [pc, #108]	; (800bd80 <atanf+0x1a0>)
 800bd14:	491b      	ldr	r1, [pc, #108]	; (800bd84 <atanf+0x1a4>)
 800bd16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bd1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bd1e:	ed93 7a00 	vldr	s14, [r3]
 800bd22:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bd26:	2d00      	cmp	r5, #0
 800bd28:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bd2c:	ed92 0a00 	vldr	s0, [r2]
 800bd30:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bd34:	bfb8      	it	lt
 800bd36:	eef1 7a67 	vneglt.f32	s15, s15
 800bd3a:	e760      	b.n	800bbfe <atanf+0x1e>
 800bd3c:	3fc90fdb 	.word	0x3fc90fdb
 800bd40:	bfc90fdb 	.word	0xbfc90fdb
 800bd44:	3edfffff 	.word	0x3edfffff
 800bd48:	7149f2ca 	.word	0x7149f2ca
 800bd4c:	3f97ffff 	.word	0x3f97ffff
 800bd50:	3c8569d7 	.word	0x3c8569d7
 800bd54:	3d4bda59 	.word	0x3d4bda59
 800bd58:	bd15a221 	.word	0xbd15a221
 800bd5c:	be4ccccd 	.word	0xbe4ccccd
 800bd60:	3d886b35 	.word	0x3d886b35
 800bd64:	3dba2e6e 	.word	0x3dba2e6e
 800bd68:	3e124925 	.word	0x3e124925
 800bd6c:	3eaaaaab 	.word	0x3eaaaaab
 800bd70:	bd6ef16b 	.word	0xbd6ef16b
 800bd74:	bd9d8795 	.word	0xbd9d8795
 800bd78:	bde38e38 	.word	0xbde38e38
 800bd7c:	401bffff 	.word	0x401bffff
 800bd80:	0800d3b8 	.word	0x0800d3b8
 800bd84:	0800d3c8 	.word	0x0800d3c8

0800bd88 <fabsf>:
 800bd88:	ee10 3a10 	vmov	r3, s0
 800bd8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd90:	ee00 3a10 	vmov	s0, r3
 800bd94:	4770      	bx	lr
	...

0800bd98 <floorf>:
 800bd98:	ee10 3a10 	vmov	r3, s0
 800bd9c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bda0:	3a7f      	subs	r2, #127	; 0x7f
 800bda2:	2a16      	cmp	r2, #22
 800bda4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bda8:	dc2a      	bgt.n	800be00 <floorf+0x68>
 800bdaa:	2a00      	cmp	r2, #0
 800bdac:	da11      	bge.n	800bdd2 <floorf+0x3a>
 800bdae:	eddf 7a18 	vldr	s15, [pc, #96]	; 800be10 <floorf+0x78>
 800bdb2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bdb6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bdba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdbe:	dd05      	ble.n	800bdcc <floorf+0x34>
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	da23      	bge.n	800be0c <floorf+0x74>
 800bdc4:	4a13      	ldr	r2, [pc, #76]	; (800be14 <floorf+0x7c>)
 800bdc6:	2900      	cmp	r1, #0
 800bdc8:	bf18      	it	ne
 800bdca:	4613      	movne	r3, r2
 800bdcc:	ee00 3a10 	vmov	s0, r3
 800bdd0:	4770      	bx	lr
 800bdd2:	4911      	ldr	r1, [pc, #68]	; (800be18 <floorf+0x80>)
 800bdd4:	4111      	asrs	r1, r2
 800bdd6:	420b      	tst	r3, r1
 800bdd8:	d0fa      	beq.n	800bdd0 <floorf+0x38>
 800bdda:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800be10 <floorf+0x78>
 800bdde:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bde2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdea:	ddef      	ble.n	800bdcc <floorf+0x34>
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	bfbe      	ittt	lt
 800bdf0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800bdf4:	fa40 f202 	asrlt.w	r2, r0, r2
 800bdf8:	189b      	addlt	r3, r3, r2
 800bdfa:	ea23 0301 	bic.w	r3, r3, r1
 800bdfe:	e7e5      	b.n	800bdcc <floorf+0x34>
 800be00:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800be04:	d3e4      	bcc.n	800bdd0 <floorf+0x38>
 800be06:	ee30 0a00 	vadd.f32	s0, s0, s0
 800be0a:	4770      	bx	lr
 800be0c:	2300      	movs	r3, #0
 800be0e:	e7dd      	b.n	800bdcc <floorf+0x34>
 800be10:	7149f2ca 	.word	0x7149f2ca
 800be14:	bf800000 	.word	0xbf800000
 800be18:	007fffff 	.word	0x007fffff

0800be1c <nanf>:
 800be1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800be24 <nanf+0x8>
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	7fc00000 	.word	0x7fc00000

0800be28 <scalbnf>:
 800be28:	ee10 3a10 	vmov	r3, s0
 800be2c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800be30:	d025      	beq.n	800be7e <scalbnf+0x56>
 800be32:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800be36:	d302      	bcc.n	800be3e <scalbnf+0x16>
 800be38:	ee30 0a00 	vadd.f32	s0, s0, s0
 800be3c:	4770      	bx	lr
 800be3e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800be42:	d122      	bne.n	800be8a <scalbnf+0x62>
 800be44:	4b2a      	ldr	r3, [pc, #168]	; (800bef0 <scalbnf+0xc8>)
 800be46:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800bef4 <scalbnf+0xcc>
 800be4a:	4298      	cmp	r0, r3
 800be4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be50:	db16      	blt.n	800be80 <scalbnf+0x58>
 800be52:	ee10 3a10 	vmov	r3, s0
 800be56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800be5a:	3a19      	subs	r2, #25
 800be5c:	4402      	add	r2, r0
 800be5e:	2afe      	cmp	r2, #254	; 0xfe
 800be60:	dd15      	ble.n	800be8e <scalbnf+0x66>
 800be62:	ee10 3a10 	vmov	r3, s0
 800be66:	eddf 7a24 	vldr	s15, [pc, #144]	; 800bef8 <scalbnf+0xd0>
 800be6a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800befc <scalbnf+0xd4>
 800be6e:	2b00      	cmp	r3, #0
 800be70:	eeb0 7a67 	vmov.f32	s14, s15
 800be74:	bfb8      	it	lt
 800be76:	eef0 7a66 	vmovlt.f32	s15, s13
 800be7a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800be7e:	4770      	bx	lr
 800be80:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bf00 <scalbnf+0xd8>
 800be84:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be88:	4770      	bx	lr
 800be8a:	0dd2      	lsrs	r2, r2, #23
 800be8c:	e7e6      	b.n	800be5c <scalbnf+0x34>
 800be8e:	2a00      	cmp	r2, #0
 800be90:	dd06      	ble.n	800bea0 <scalbnf+0x78>
 800be92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be96:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800be9a:	ee00 3a10 	vmov	s0, r3
 800be9e:	4770      	bx	lr
 800bea0:	f112 0f16 	cmn.w	r2, #22
 800bea4:	da1a      	bge.n	800bedc <scalbnf+0xb4>
 800bea6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800beaa:	4298      	cmp	r0, r3
 800beac:	ee10 3a10 	vmov	r3, s0
 800beb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800beb4:	dd0a      	ble.n	800becc <scalbnf+0xa4>
 800beb6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bef8 <scalbnf+0xd0>
 800beba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800befc <scalbnf+0xd4>
 800bebe:	eef0 7a40 	vmov.f32	s15, s0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	bf18      	it	ne
 800bec6:	eeb0 0a47 	vmovne.f32	s0, s14
 800beca:	e7db      	b.n	800be84 <scalbnf+0x5c>
 800becc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800bf00 <scalbnf+0xd8>
 800bed0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800bf04 <scalbnf+0xdc>
 800bed4:	eef0 7a40 	vmov.f32	s15, s0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	e7f3      	b.n	800bec4 <scalbnf+0x9c>
 800bedc:	3219      	adds	r2, #25
 800bede:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bee2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800bee6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bf08 <scalbnf+0xe0>
 800beea:	ee07 3a10 	vmov	s14, r3
 800beee:	e7c4      	b.n	800be7a <scalbnf+0x52>
 800bef0:	ffff3cb0 	.word	0xffff3cb0
 800bef4:	4c000000 	.word	0x4c000000
 800bef8:	7149f2ca 	.word	0x7149f2ca
 800befc:	f149f2ca 	.word	0xf149f2ca
 800bf00:	0da24260 	.word	0x0da24260
 800bf04:	8da24260 	.word	0x8da24260
 800bf08:	33000000 	.word	0x33000000

0800bf0c <__errno>:
 800bf0c:	4b01      	ldr	r3, [pc, #4]	; (800bf14 <__errno+0x8>)
 800bf0e:	6818      	ldr	r0, [r3, #0]
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	20000048 	.word	0x20000048

0800bf18 <__libc_init_array>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	4d0d      	ldr	r5, [pc, #52]	; (800bf50 <__libc_init_array+0x38>)
 800bf1c:	4c0d      	ldr	r4, [pc, #52]	; (800bf54 <__libc_init_array+0x3c>)
 800bf1e:	1b64      	subs	r4, r4, r5
 800bf20:	10a4      	asrs	r4, r4, #2
 800bf22:	2600      	movs	r6, #0
 800bf24:	42a6      	cmp	r6, r4
 800bf26:	d109      	bne.n	800bf3c <__libc_init_array+0x24>
 800bf28:	4d0b      	ldr	r5, [pc, #44]	; (800bf58 <__libc_init_array+0x40>)
 800bf2a:	4c0c      	ldr	r4, [pc, #48]	; (800bf5c <__libc_init_array+0x44>)
 800bf2c:	f001 f822 	bl	800cf74 <_init>
 800bf30:	1b64      	subs	r4, r4, r5
 800bf32:	10a4      	asrs	r4, r4, #2
 800bf34:	2600      	movs	r6, #0
 800bf36:	42a6      	cmp	r6, r4
 800bf38:	d105      	bne.n	800bf46 <__libc_init_array+0x2e>
 800bf3a:	bd70      	pop	{r4, r5, r6, pc}
 800bf3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf40:	4798      	blx	r3
 800bf42:	3601      	adds	r6, #1
 800bf44:	e7ee      	b.n	800bf24 <__libc_init_array+0xc>
 800bf46:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf4a:	4798      	blx	r3
 800bf4c:	3601      	adds	r6, #1
 800bf4e:	e7f2      	b.n	800bf36 <__libc_init_array+0x1e>
 800bf50:	0800d52c 	.word	0x0800d52c
 800bf54:	0800d52c 	.word	0x0800d52c
 800bf58:	0800d52c 	.word	0x0800d52c
 800bf5c:	0800d530 	.word	0x0800d530

0800bf60 <memset>:
 800bf60:	4402      	add	r2, r0
 800bf62:	4603      	mov	r3, r0
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d100      	bne.n	800bf6a <memset+0xa>
 800bf68:	4770      	bx	lr
 800bf6a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf6e:	e7f9      	b.n	800bf64 <memset+0x4>

0800bf70 <rand>:
 800bf70:	4b17      	ldr	r3, [pc, #92]	; (800bfd0 <rand+0x60>)
 800bf72:	b510      	push	{r4, lr}
 800bf74:	681c      	ldr	r4, [r3, #0]
 800bf76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf78:	b9b3      	cbnz	r3, 800bfa8 <rand+0x38>
 800bf7a:	2018      	movs	r0, #24
 800bf7c:	f000 f868 	bl	800c050 <malloc>
 800bf80:	63a0      	str	r0, [r4, #56]	; 0x38
 800bf82:	b928      	cbnz	r0, 800bf90 <rand+0x20>
 800bf84:	4602      	mov	r2, r0
 800bf86:	4b13      	ldr	r3, [pc, #76]	; (800bfd4 <rand+0x64>)
 800bf88:	4813      	ldr	r0, [pc, #76]	; (800bfd8 <rand+0x68>)
 800bf8a:	214e      	movs	r1, #78	; 0x4e
 800bf8c:	f000 f830 	bl	800bff0 <__assert_func>
 800bf90:	4a12      	ldr	r2, [pc, #72]	; (800bfdc <rand+0x6c>)
 800bf92:	4b13      	ldr	r3, [pc, #76]	; (800bfe0 <rand+0x70>)
 800bf94:	e9c0 2300 	strd	r2, r3, [r0]
 800bf98:	4b12      	ldr	r3, [pc, #72]	; (800bfe4 <rand+0x74>)
 800bf9a:	6083      	str	r3, [r0, #8]
 800bf9c:	230b      	movs	r3, #11
 800bf9e:	8183      	strh	r3, [r0, #12]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bfa8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bfaa:	480f      	ldr	r0, [pc, #60]	; (800bfe8 <rand+0x78>)
 800bfac:	690a      	ldr	r2, [r1, #16]
 800bfae:	694b      	ldr	r3, [r1, #20]
 800bfb0:	4c0e      	ldr	r4, [pc, #56]	; (800bfec <rand+0x7c>)
 800bfb2:	4350      	muls	r0, r2
 800bfb4:	fb04 0003 	mla	r0, r4, r3, r0
 800bfb8:	fba2 3404 	umull	r3, r4, r2, r4
 800bfbc:	1c5a      	adds	r2, r3, #1
 800bfbe:	4404      	add	r4, r0
 800bfc0:	f144 0000 	adc.w	r0, r4, #0
 800bfc4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800bfc8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	bf00      	nop
 800bfd0:	20000048 	.word	0x20000048
 800bfd4:	0800d3dc 	.word	0x0800d3dc
 800bfd8:	0800d3f3 	.word	0x0800d3f3
 800bfdc:	abcd330e 	.word	0xabcd330e
 800bfe0:	e66d1234 	.word	0xe66d1234
 800bfe4:	0005deec 	.word	0x0005deec
 800bfe8:	5851f42d 	.word	0x5851f42d
 800bfec:	4c957f2d 	.word	0x4c957f2d

0800bff0 <__assert_func>:
 800bff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bff2:	4614      	mov	r4, r2
 800bff4:	461a      	mov	r2, r3
 800bff6:	4b09      	ldr	r3, [pc, #36]	; (800c01c <__assert_func+0x2c>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4605      	mov	r5, r0
 800bffc:	68d8      	ldr	r0, [r3, #12]
 800bffe:	b14c      	cbz	r4, 800c014 <__assert_func+0x24>
 800c000:	4b07      	ldr	r3, [pc, #28]	; (800c020 <__assert_func+0x30>)
 800c002:	9100      	str	r1, [sp, #0]
 800c004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c008:	4906      	ldr	r1, [pc, #24]	; (800c024 <__assert_func+0x34>)
 800c00a:	462b      	mov	r3, r5
 800c00c:	f000 f80e 	bl	800c02c <fiprintf>
 800c010:	f000 fc8e 	bl	800c930 <abort>
 800c014:	4b04      	ldr	r3, [pc, #16]	; (800c028 <__assert_func+0x38>)
 800c016:	461c      	mov	r4, r3
 800c018:	e7f3      	b.n	800c002 <__assert_func+0x12>
 800c01a:	bf00      	nop
 800c01c:	20000048 	.word	0x20000048
 800c020:	0800d452 	.word	0x0800d452
 800c024:	0800d45f 	.word	0x0800d45f
 800c028:	0800d48d 	.word	0x0800d48d

0800c02c <fiprintf>:
 800c02c:	b40e      	push	{r1, r2, r3}
 800c02e:	b503      	push	{r0, r1, lr}
 800c030:	4601      	mov	r1, r0
 800c032:	ab03      	add	r3, sp, #12
 800c034:	4805      	ldr	r0, [pc, #20]	; (800c04c <fiprintf+0x20>)
 800c036:	f853 2b04 	ldr.w	r2, [r3], #4
 800c03a:	6800      	ldr	r0, [r0, #0]
 800c03c:	9301      	str	r3, [sp, #4]
 800c03e:	f000 f8e3 	bl	800c208 <_vfiprintf_r>
 800c042:	b002      	add	sp, #8
 800c044:	f85d eb04 	ldr.w	lr, [sp], #4
 800c048:	b003      	add	sp, #12
 800c04a:	4770      	bx	lr
 800c04c:	20000048 	.word	0x20000048

0800c050 <malloc>:
 800c050:	4b02      	ldr	r3, [pc, #8]	; (800c05c <malloc+0xc>)
 800c052:	4601      	mov	r1, r0
 800c054:	6818      	ldr	r0, [r3, #0]
 800c056:	f000 b853 	b.w	800c100 <_malloc_r>
 800c05a:	bf00      	nop
 800c05c:	20000048 	.word	0x20000048

0800c060 <_free_r>:
 800c060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c062:	2900      	cmp	r1, #0
 800c064:	d048      	beq.n	800c0f8 <_free_r+0x98>
 800c066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c06a:	9001      	str	r0, [sp, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f1a1 0404 	sub.w	r4, r1, #4
 800c072:	bfb8      	it	lt
 800c074:	18e4      	addlt	r4, r4, r3
 800c076:	f000 fe81 	bl	800cd7c <__malloc_lock>
 800c07a:	4a20      	ldr	r2, [pc, #128]	; (800c0fc <_free_r+0x9c>)
 800c07c:	9801      	ldr	r0, [sp, #4]
 800c07e:	6813      	ldr	r3, [r2, #0]
 800c080:	4615      	mov	r5, r2
 800c082:	b933      	cbnz	r3, 800c092 <_free_r+0x32>
 800c084:	6063      	str	r3, [r4, #4]
 800c086:	6014      	str	r4, [r2, #0]
 800c088:	b003      	add	sp, #12
 800c08a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c08e:	f000 be7b 	b.w	800cd88 <__malloc_unlock>
 800c092:	42a3      	cmp	r3, r4
 800c094:	d90b      	bls.n	800c0ae <_free_r+0x4e>
 800c096:	6821      	ldr	r1, [r4, #0]
 800c098:	1862      	adds	r2, r4, r1
 800c09a:	4293      	cmp	r3, r2
 800c09c:	bf04      	itt	eq
 800c09e:	681a      	ldreq	r2, [r3, #0]
 800c0a0:	685b      	ldreq	r3, [r3, #4]
 800c0a2:	6063      	str	r3, [r4, #4]
 800c0a4:	bf04      	itt	eq
 800c0a6:	1852      	addeq	r2, r2, r1
 800c0a8:	6022      	streq	r2, [r4, #0]
 800c0aa:	602c      	str	r4, [r5, #0]
 800c0ac:	e7ec      	b.n	800c088 <_free_r+0x28>
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	b10b      	cbz	r3, 800c0b8 <_free_r+0x58>
 800c0b4:	42a3      	cmp	r3, r4
 800c0b6:	d9fa      	bls.n	800c0ae <_free_r+0x4e>
 800c0b8:	6811      	ldr	r1, [r2, #0]
 800c0ba:	1855      	adds	r5, r2, r1
 800c0bc:	42a5      	cmp	r5, r4
 800c0be:	d10b      	bne.n	800c0d8 <_free_r+0x78>
 800c0c0:	6824      	ldr	r4, [r4, #0]
 800c0c2:	4421      	add	r1, r4
 800c0c4:	1854      	adds	r4, r2, r1
 800c0c6:	42a3      	cmp	r3, r4
 800c0c8:	6011      	str	r1, [r2, #0]
 800c0ca:	d1dd      	bne.n	800c088 <_free_r+0x28>
 800c0cc:	681c      	ldr	r4, [r3, #0]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	6053      	str	r3, [r2, #4]
 800c0d2:	4421      	add	r1, r4
 800c0d4:	6011      	str	r1, [r2, #0]
 800c0d6:	e7d7      	b.n	800c088 <_free_r+0x28>
 800c0d8:	d902      	bls.n	800c0e0 <_free_r+0x80>
 800c0da:	230c      	movs	r3, #12
 800c0dc:	6003      	str	r3, [r0, #0]
 800c0de:	e7d3      	b.n	800c088 <_free_r+0x28>
 800c0e0:	6825      	ldr	r5, [r4, #0]
 800c0e2:	1961      	adds	r1, r4, r5
 800c0e4:	428b      	cmp	r3, r1
 800c0e6:	bf04      	itt	eq
 800c0e8:	6819      	ldreq	r1, [r3, #0]
 800c0ea:	685b      	ldreq	r3, [r3, #4]
 800c0ec:	6063      	str	r3, [r4, #4]
 800c0ee:	bf04      	itt	eq
 800c0f0:	1949      	addeq	r1, r1, r5
 800c0f2:	6021      	streq	r1, [r4, #0]
 800c0f4:	6054      	str	r4, [r2, #4]
 800c0f6:	e7c7      	b.n	800c088 <_free_r+0x28>
 800c0f8:	b003      	add	sp, #12
 800c0fa:	bd30      	pop	{r4, r5, pc}
 800c0fc:	20000804 	.word	0x20000804

0800c100 <_malloc_r>:
 800c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c102:	1ccd      	adds	r5, r1, #3
 800c104:	f025 0503 	bic.w	r5, r5, #3
 800c108:	3508      	adds	r5, #8
 800c10a:	2d0c      	cmp	r5, #12
 800c10c:	bf38      	it	cc
 800c10e:	250c      	movcc	r5, #12
 800c110:	2d00      	cmp	r5, #0
 800c112:	4606      	mov	r6, r0
 800c114:	db01      	blt.n	800c11a <_malloc_r+0x1a>
 800c116:	42a9      	cmp	r1, r5
 800c118:	d903      	bls.n	800c122 <_malloc_r+0x22>
 800c11a:	230c      	movs	r3, #12
 800c11c:	6033      	str	r3, [r6, #0]
 800c11e:	2000      	movs	r0, #0
 800c120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c122:	f000 fe2b 	bl	800cd7c <__malloc_lock>
 800c126:	4921      	ldr	r1, [pc, #132]	; (800c1ac <_malloc_r+0xac>)
 800c128:	680a      	ldr	r2, [r1, #0]
 800c12a:	4614      	mov	r4, r2
 800c12c:	b99c      	cbnz	r4, 800c156 <_malloc_r+0x56>
 800c12e:	4f20      	ldr	r7, [pc, #128]	; (800c1b0 <_malloc_r+0xb0>)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	b923      	cbnz	r3, 800c13e <_malloc_r+0x3e>
 800c134:	4621      	mov	r1, r4
 800c136:	4630      	mov	r0, r6
 800c138:	f000 fb2a 	bl	800c790 <_sbrk_r>
 800c13c:	6038      	str	r0, [r7, #0]
 800c13e:	4629      	mov	r1, r5
 800c140:	4630      	mov	r0, r6
 800c142:	f000 fb25 	bl	800c790 <_sbrk_r>
 800c146:	1c43      	adds	r3, r0, #1
 800c148:	d123      	bne.n	800c192 <_malloc_r+0x92>
 800c14a:	230c      	movs	r3, #12
 800c14c:	6033      	str	r3, [r6, #0]
 800c14e:	4630      	mov	r0, r6
 800c150:	f000 fe1a 	bl	800cd88 <__malloc_unlock>
 800c154:	e7e3      	b.n	800c11e <_malloc_r+0x1e>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	1b5b      	subs	r3, r3, r5
 800c15a:	d417      	bmi.n	800c18c <_malloc_r+0x8c>
 800c15c:	2b0b      	cmp	r3, #11
 800c15e:	d903      	bls.n	800c168 <_malloc_r+0x68>
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	441c      	add	r4, r3
 800c164:	6025      	str	r5, [r4, #0]
 800c166:	e004      	b.n	800c172 <_malloc_r+0x72>
 800c168:	6863      	ldr	r3, [r4, #4]
 800c16a:	42a2      	cmp	r2, r4
 800c16c:	bf0c      	ite	eq
 800c16e:	600b      	streq	r3, [r1, #0]
 800c170:	6053      	strne	r3, [r2, #4]
 800c172:	4630      	mov	r0, r6
 800c174:	f000 fe08 	bl	800cd88 <__malloc_unlock>
 800c178:	f104 000b 	add.w	r0, r4, #11
 800c17c:	1d23      	adds	r3, r4, #4
 800c17e:	f020 0007 	bic.w	r0, r0, #7
 800c182:	1ac2      	subs	r2, r0, r3
 800c184:	d0cc      	beq.n	800c120 <_malloc_r+0x20>
 800c186:	1a1b      	subs	r3, r3, r0
 800c188:	50a3      	str	r3, [r4, r2]
 800c18a:	e7c9      	b.n	800c120 <_malloc_r+0x20>
 800c18c:	4622      	mov	r2, r4
 800c18e:	6864      	ldr	r4, [r4, #4]
 800c190:	e7cc      	b.n	800c12c <_malloc_r+0x2c>
 800c192:	1cc4      	adds	r4, r0, #3
 800c194:	f024 0403 	bic.w	r4, r4, #3
 800c198:	42a0      	cmp	r0, r4
 800c19a:	d0e3      	beq.n	800c164 <_malloc_r+0x64>
 800c19c:	1a21      	subs	r1, r4, r0
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f000 faf6 	bl	800c790 <_sbrk_r>
 800c1a4:	3001      	adds	r0, #1
 800c1a6:	d1dd      	bne.n	800c164 <_malloc_r+0x64>
 800c1a8:	e7cf      	b.n	800c14a <_malloc_r+0x4a>
 800c1aa:	bf00      	nop
 800c1ac:	20000804 	.word	0x20000804
 800c1b0:	20000808 	.word	0x20000808

0800c1b4 <__sfputc_r>:
 800c1b4:	6893      	ldr	r3, [r2, #8]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	b410      	push	{r4}
 800c1bc:	6093      	str	r3, [r2, #8]
 800c1be:	da08      	bge.n	800c1d2 <__sfputc_r+0x1e>
 800c1c0:	6994      	ldr	r4, [r2, #24]
 800c1c2:	42a3      	cmp	r3, r4
 800c1c4:	db01      	blt.n	800c1ca <__sfputc_r+0x16>
 800c1c6:	290a      	cmp	r1, #10
 800c1c8:	d103      	bne.n	800c1d2 <__sfputc_r+0x1e>
 800c1ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1ce:	f000 baef 	b.w	800c7b0 <__swbuf_r>
 800c1d2:	6813      	ldr	r3, [r2, #0]
 800c1d4:	1c58      	adds	r0, r3, #1
 800c1d6:	6010      	str	r0, [r2, #0]
 800c1d8:	7019      	strb	r1, [r3, #0]
 800c1da:	4608      	mov	r0, r1
 800c1dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1e0:	4770      	bx	lr

0800c1e2 <__sfputs_r>:
 800c1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e4:	4606      	mov	r6, r0
 800c1e6:	460f      	mov	r7, r1
 800c1e8:	4614      	mov	r4, r2
 800c1ea:	18d5      	adds	r5, r2, r3
 800c1ec:	42ac      	cmp	r4, r5
 800c1ee:	d101      	bne.n	800c1f4 <__sfputs_r+0x12>
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	e007      	b.n	800c204 <__sfputs_r+0x22>
 800c1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f8:	463a      	mov	r2, r7
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f7ff ffda 	bl	800c1b4 <__sfputc_r>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d1f3      	bne.n	800c1ec <__sfputs_r+0xa>
 800c204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c208 <_vfiprintf_r>:
 800c208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20c:	460d      	mov	r5, r1
 800c20e:	b09d      	sub	sp, #116	; 0x74
 800c210:	4614      	mov	r4, r2
 800c212:	4698      	mov	r8, r3
 800c214:	4606      	mov	r6, r0
 800c216:	b118      	cbz	r0, 800c220 <_vfiprintf_r+0x18>
 800c218:	6983      	ldr	r3, [r0, #24]
 800c21a:	b90b      	cbnz	r3, 800c220 <_vfiprintf_r+0x18>
 800c21c:	f000 fcaa 	bl	800cb74 <__sinit>
 800c220:	4b89      	ldr	r3, [pc, #548]	; (800c448 <_vfiprintf_r+0x240>)
 800c222:	429d      	cmp	r5, r3
 800c224:	d11b      	bne.n	800c25e <_vfiprintf_r+0x56>
 800c226:	6875      	ldr	r5, [r6, #4]
 800c228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c22a:	07d9      	lsls	r1, r3, #31
 800c22c:	d405      	bmi.n	800c23a <_vfiprintf_r+0x32>
 800c22e:	89ab      	ldrh	r3, [r5, #12]
 800c230:	059a      	lsls	r2, r3, #22
 800c232:	d402      	bmi.n	800c23a <_vfiprintf_r+0x32>
 800c234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c236:	f000 fd3b 	bl	800ccb0 <__retarget_lock_acquire_recursive>
 800c23a:	89ab      	ldrh	r3, [r5, #12]
 800c23c:	071b      	lsls	r3, r3, #28
 800c23e:	d501      	bpl.n	800c244 <_vfiprintf_r+0x3c>
 800c240:	692b      	ldr	r3, [r5, #16]
 800c242:	b9eb      	cbnz	r3, 800c280 <_vfiprintf_r+0x78>
 800c244:	4629      	mov	r1, r5
 800c246:	4630      	mov	r0, r6
 800c248:	f000 fb04 	bl	800c854 <__swsetup_r>
 800c24c:	b1c0      	cbz	r0, 800c280 <_vfiprintf_r+0x78>
 800c24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c250:	07dc      	lsls	r4, r3, #31
 800c252:	d50e      	bpl.n	800c272 <_vfiprintf_r+0x6a>
 800c254:	f04f 30ff 	mov.w	r0, #4294967295
 800c258:	b01d      	add	sp, #116	; 0x74
 800c25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25e:	4b7b      	ldr	r3, [pc, #492]	; (800c44c <_vfiprintf_r+0x244>)
 800c260:	429d      	cmp	r5, r3
 800c262:	d101      	bne.n	800c268 <_vfiprintf_r+0x60>
 800c264:	68b5      	ldr	r5, [r6, #8]
 800c266:	e7df      	b.n	800c228 <_vfiprintf_r+0x20>
 800c268:	4b79      	ldr	r3, [pc, #484]	; (800c450 <_vfiprintf_r+0x248>)
 800c26a:	429d      	cmp	r5, r3
 800c26c:	bf08      	it	eq
 800c26e:	68f5      	ldreq	r5, [r6, #12]
 800c270:	e7da      	b.n	800c228 <_vfiprintf_r+0x20>
 800c272:	89ab      	ldrh	r3, [r5, #12]
 800c274:	0598      	lsls	r0, r3, #22
 800c276:	d4ed      	bmi.n	800c254 <_vfiprintf_r+0x4c>
 800c278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c27a:	f000 fd1a 	bl	800ccb2 <__retarget_lock_release_recursive>
 800c27e:	e7e9      	b.n	800c254 <_vfiprintf_r+0x4c>
 800c280:	2300      	movs	r3, #0
 800c282:	9309      	str	r3, [sp, #36]	; 0x24
 800c284:	2320      	movs	r3, #32
 800c286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c28a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c28e:	2330      	movs	r3, #48	; 0x30
 800c290:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c454 <_vfiprintf_r+0x24c>
 800c294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c298:	f04f 0901 	mov.w	r9, #1
 800c29c:	4623      	mov	r3, r4
 800c29e:	469a      	mov	sl, r3
 800c2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2a4:	b10a      	cbz	r2, 800c2aa <_vfiprintf_r+0xa2>
 800c2a6:	2a25      	cmp	r2, #37	; 0x25
 800c2a8:	d1f9      	bne.n	800c29e <_vfiprintf_r+0x96>
 800c2aa:	ebba 0b04 	subs.w	fp, sl, r4
 800c2ae:	d00b      	beq.n	800c2c8 <_vfiprintf_r+0xc0>
 800c2b0:	465b      	mov	r3, fp
 800c2b2:	4622      	mov	r2, r4
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7ff ff93 	bl	800c1e2 <__sfputs_r>
 800c2bc:	3001      	adds	r0, #1
 800c2be:	f000 80aa 	beq.w	800c416 <_vfiprintf_r+0x20e>
 800c2c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2c4:	445a      	add	r2, fp
 800c2c6:	9209      	str	r2, [sp, #36]	; 0x24
 800c2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f000 80a2 	beq.w	800c416 <_vfiprintf_r+0x20e>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2dc:	f10a 0a01 	add.w	sl, sl, #1
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	9307      	str	r3, [sp, #28]
 800c2e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2e8:	931a      	str	r3, [sp, #104]	; 0x68
 800c2ea:	4654      	mov	r4, sl
 800c2ec:	2205      	movs	r2, #5
 800c2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f2:	4858      	ldr	r0, [pc, #352]	; (800c454 <_vfiprintf_r+0x24c>)
 800c2f4:	f7f3 ff6c 	bl	80001d0 <memchr>
 800c2f8:	9a04      	ldr	r2, [sp, #16]
 800c2fa:	b9d8      	cbnz	r0, 800c334 <_vfiprintf_r+0x12c>
 800c2fc:	06d1      	lsls	r1, r2, #27
 800c2fe:	bf44      	itt	mi
 800c300:	2320      	movmi	r3, #32
 800c302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c306:	0713      	lsls	r3, r2, #28
 800c308:	bf44      	itt	mi
 800c30a:	232b      	movmi	r3, #43	; 0x2b
 800c30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c310:	f89a 3000 	ldrb.w	r3, [sl]
 800c314:	2b2a      	cmp	r3, #42	; 0x2a
 800c316:	d015      	beq.n	800c344 <_vfiprintf_r+0x13c>
 800c318:	9a07      	ldr	r2, [sp, #28]
 800c31a:	4654      	mov	r4, sl
 800c31c:	2000      	movs	r0, #0
 800c31e:	f04f 0c0a 	mov.w	ip, #10
 800c322:	4621      	mov	r1, r4
 800c324:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c328:	3b30      	subs	r3, #48	; 0x30
 800c32a:	2b09      	cmp	r3, #9
 800c32c:	d94e      	bls.n	800c3cc <_vfiprintf_r+0x1c4>
 800c32e:	b1b0      	cbz	r0, 800c35e <_vfiprintf_r+0x156>
 800c330:	9207      	str	r2, [sp, #28]
 800c332:	e014      	b.n	800c35e <_vfiprintf_r+0x156>
 800c334:	eba0 0308 	sub.w	r3, r0, r8
 800c338:	fa09 f303 	lsl.w	r3, r9, r3
 800c33c:	4313      	orrs	r3, r2
 800c33e:	9304      	str	r3, [sp, #16]
 800c340:	46a2      	mov	sl, r4
 800c342:	e7d2      	b.n	800c2ea <_vfiprintf_r+0xe2>
 800c344:	9b03      	ldr	r3, [sp, #12]
 800c346:	1d19      	adds	r1, r3, #4
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	9103      	str	r1, [sp, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bfbb      	ittet	lt
 800c350:	425b      	neglt	r3, r3
 800c352:	f042 0202 	orrlt.w	r2, r2, #2
 800c356:	9307      	strge	r3, [sp, #28]
 800c358:	9307      	strlt	r3, [sp, #28]
 800c35a:	bfb8      	it	lt
 800c35c:	9204      	strlt	r2, [sp, #16]
 800c35e:	7823      	ldrb	r3, [r4, #0]
 800c360:	2b2e      	cmp	r3, #46	; 0x2e
 800c362:	d10c      	bne.n	800c37e <_vfiprintf_r+0x176>
 800c364:	7863      	ldrb	r3, [r4, #1]
 800c366:	2b2a      	cmp	r3, #42	; 0x2a
 800c368:	d135      	bne.n	800c3d6 <_vfiprintf_r+0x1ce>
 800c36a:	9b03      	ldr	r3, [sp, #12]
 800c36c:	1d1a      	adds	r2, r3, #4
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	9203      	str	r2, [sp, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	bfb8      	it	lt
 800c376:	f04f 33ff 	movlt.w	r3, #4294967295
 800c37a:	3402      	adds	r4, #2
 800c37c:	9305      	str	r3, [sp, #20]
 800c37e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c464 <_vfiprintf_r+0x25c>
 800c382:	7821      	ldrb	r1, [r4, #0]
 800c384:	2203      	movs	r2, #3
 800c386:	4650      	mov	r0, sl
 800c388:	f7f3 ff22 	bl	80001d0 <memchr>
 800c38c:	b140      	cbz	r0, 800c3a0 <_vfiprintf_r+0x198>
 800c38e:	2340      	movs	r3, #64	; 0x40
 800c390:	eba0 000a 	sub.w	r0, r0, sl
 800c394:	fa03 f000 	lsl.w	r0, r3, r0
 800c398:	9b04      	ldr	r3, [sp, #16]
 800c39a:	4303      	orrs	r3, r0
 800c39c:	3401      	adds	r4, #1
 800c39e:	9304      	str	r3, [sp, #16]
 800c3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a4:	482c      	ldr	r0, [pc, #176]	; (800c458 <_vfiprintf_r+0x250>)
 800c3a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3aa:	2206      	movs	r2, #6
 800c3ac:	f7f3 ff10 	bl	80001d0 <memchr>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d03f      	beq.n	800c434 <_vfiprintf_r+0x22c>
 800c3b4:	4b29      	ldr	r3, [pc, #164]	; (800c45c <_vfiprintf_r+0x254>)
 800c3b6:	bb1b      	cbnz	r3, 800c400 <_vfiprintf_r+0x1f8>
 800c3b8:	9b03      	ldr	r3, [sp, #12]
 800c3ba:	3307      	adds	r3, #7
 800c3bc:	f023 0307 	bic.w	r3, r3, #7
 800c3c0:	3308      	adds	r3, #8
 800c3c2:	9303      	str	r3, [sp, #12]
 800c3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c6:	443b      	add	r3, r7
 800c3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ca:	e767      	b.n	800c29c <_vfiprintf_r+0x94>
 800c3cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3d0:	460c      	mov	r4, r1
 800c3d2:	2001      	movs	r0, #1
 800c3d4:	e7a5      	b.n	800c322 <_vfiprintf_r+0x11a>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	3401      	adds	r4, #1
 800c3da:	9305      	str	r3, [sp, #20]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	f04f 0c0a 	mov.w	ip, #10
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3e8:	3a30      	subs	r2, #48	; 0x30
 800c3ea:	2a09      	cmp	r2, #9
 800c3ec:	d903      	bls.n	800c3f6 <_vfiprintf_r+0x1ee>
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0c5      	beq.n	800c37e <_vfiprintf_r+0x176>
 800c3f2:	9105      	str	r1, [sp, #20]
 800c3f4:	e7c3      	b.n	800c37e <_vfiprintf_r+0x176>
 800c3f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e7f0      	b.n	800c3e2 <_vfiprintf_r+0x1da>
 800c400:	ab03      	add	r3, sp, #12
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	462a      	mov	r2, r5
 800c406:	4b16      	ldr	r3, [pc, #88]	; (800c460 <_vfiprintf_r+0x258>)
 800c408:	a904      	add	r1, sp, #16
 800c40a:	4630      	mov	r0, r6
 800c40c:	f3af 8000 	nop.w
 800c410:	4607      	mov	r7, r0
 800c412:	1c78      	adds	r0, r7, #1
 800c414:	d1d6      	bne.n	800c3c4 <_vfiprintf_r+0x1bc>
 800c416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c418:	07d9      	lsls	r1, r3, #31
 800c41a:	d405      	bmi.n	800c428 <_vfiprintf_r+0x220>
 800c41c:	89ab      	ldrh	r3, [r5, #12]
 800c41e:	059a      	lsls	r2, r3, #22
 800c420:	d402      	bmi.n	800c428 <_vfiprintf_r+0x220>
 800c422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c424:	f000 fc45 	bl	800ccb2 <__retarget_lock_release_recursive>
 800c428:	89ab      	ldrh	r3, [r5, #12]
 800c42a:	065b      	lsls	r3, r3, #25
 800c42c:	f53f af12 	bmi.w	800c254 <_vfiprintf_r+0x4c>
 800c430:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c432:	e711      	b.n	800c258 <_vfiprintf_r+0x50>
 800c434:	ab03      	add	r3, sp, #12
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	462a      	mov	r2, r5
 800c43a:	4b09      	ldr	r3, [pc, #36]	; (800c460 <_vfiprintf_r+0x258>)
 800c43c:	a904      	add	r1, sp, #16
 800c43e:	4630      	mov	r0, r6
 800c440:	f000 f880 	bl	800c544 <_printf_i>
 800c444:	e7e4      	b.n	800c410 <_vfiprintf_r+0x208>
 800c446:	bf00      	nop
 800c448:	0800d4e4 	.word	0x0800d4e4
 800c44c:	0800d504 	.word	0x0800d504
 800c450:	0800d4c4 	.word	0x0800d4c4
 800c454:	0800d48e 	.word	0x0800d48e
 800c458:	0800d498 	.word	0x0800d498
 800c45c:	00000000 	.word	0x00000000
 800c460:	0800c1e3 	.word	0x0800c1e3
 800c464:	0800d494 	.word	0x0800d494

0800c468 <_printf_common>:
 800c468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c46c:	4616      	mov	r6, r2
 800c46e:	4699      	mov	r9, r3
 800c470:	688a      	ldr	r2, [r1, #8]
 800c472:	690b      	ldr	r3, [r1, #16]
 800c474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c478:	4293      	cmp	r3, r2
 800c47a:	bfb8      	it	lt
 800c47c:	4613      	movlt	r3, r2
 800c47e:	6033      	str	r3, [r6, #0]
 800c480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c484:	4607      	mov	r7, r0
 800c486:	460c      	mov	r4, r1
 800c488:	b10a      	cbz	r2, 800c48e <_printf_common+0x26>
 800c48a:	3301      	adds	r3, #1
 800c48c:	6033      	str	r3, [r6, #0]
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	0699      	lsls	r1, r3, #26
 800c492:	bf42      	ittt	mi
 800c494:	6833      	ldrmi	r3, [r6, #0]
 800c496:	3302      	addmi	r3, #2
 800c498:	6033      	strmi	r3, [r6, #0]
 800c49a:	6825      	ldr	r5, [r4, #0]
 800c49c:	f015 0506 	ands.w	r5, r5, #6
 800c4a0:	d106      	bne.n	800c4b0 <_printf_common+0x48>
 800c4a2:	f104 0a19 	add.w	sl, r4, #25
 800c4a6:	68e3      	ldr	r3, [r4, #12]
 800c4a8:	6832      	ldr	r2, [r6, #0]
 800c4aa:	1a9b      	subs	r3, r3, r2
 800c4ac:	42ab      	cmp	r3, r5
 800c4ae:	dc26      	bgt.n	800c4fe <_printf_common+0x96>
 800c4b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4b4:	1e13      	subs	r3, r2, #0
 800c4b6:	6822      	ldr	r2, [r4, #0]
 800c4b8:	bf18      	it	ne
 800c4ba:	2301      	movne	r3, #1
 800c4bc:	0692      	lsls	r2, r2, #26
 800c4be:	d42b      	bmi.n	800c518 <_printf_common+0xb0>
 800c4c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	47c0      	blx	r8
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	d01e      	beq.n	800c50c <_printf_common+0xa4>
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	68e5      	ldr	r5, [r4, #12]
 800c4d2:	6832      	ldr	r2, [r6, #0]
 800c4d4:	f003 0306 	and.w	r3, r3, #6
 800c4d8:	2b04      	cmp	r3, #4
 800c4da:	bf08      	it	eq
 800c4dc:	1aad      	subeq	r5, r5, r2
 800c4de:	68a3      	ldr	r3, [r4, #8]
 800c4e0:	6922      	ldr	r2, [r4, #16]
 800c4e2:	bf0c      	ite	eq
 800c4e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4e8:	2500      	movne	r5, #0
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	bfc4      	itt	gt
 800c4ee:	1a9b      	subgt	r3, r3, r2
 800c4f0:	18ed      	addgt	r5, r5, r3
 800c4f2:	2600      	movs	r6, #0
 800c4f4:	341a      	adds	r4, #26
 800c4f6:	42b5      	cmp	r5, r6
 800c4f8:	d11a      	bne.n	800c530 <_printf_common+0xc8>
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	e008      	b.n	800c510 <_printf_common+0xa8>
 800c4fe:	2301      	movs	r3, #1
 800c500:	4652      	mov	r2, sl
 800c502:	4649      	mov	r1, r9
 800c504:	4638      	mov	r0, r7
 800c506:	47c0      	blx	r8
 800c508:	3001      	adds	r0, #1
 800c50a:	d103      	bne.n	800c514 <_printf_common+0xac>
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295
 800c510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c514:	3501      	adds	r5, #1
 800c516:	e7c6      	b.n	800c4a6 <_printf_common+0x3e>
 800c518:	18e1      	adds	r1, r4, r3
 800c51a:	1c5a      	adds	r2, r3, #1
 800c51c:	2030      	movs	r0, #48	; 0x30
 800c51e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c522:	4422      	add	r2, r4
 800c524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c52c:	3302      	adds	r3, #2
 800c52e:	e7c7      	b.n	800c4c0 <_printf_common+0x58>
 800c530:	2301      	movs	r3, #1
 800c532:	4622      	mov	r2, r4
 800c534:	4649      	mov	r1, r9
 800c536:	4638      	mov	r0, r7
 800c538:	47c0      	blx	r8
 800c53a:	3001      	adds	r0, #1
 800c53c:	d0e6      	beq.n	800c50c <_printf_common+0xa4>
 800c53e:	3601      	adds	r6, #1
 800c540:	e7d9      	b.n	800c4f6 <_printf_common+0x8e>
	...

0800c544 <_printf_i>:
 800c544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c548:	460c      	mov	r4, r1
 800c54a:	4691      	mov	r9, r2
 800c54c:	7e27      	ldrb	r7, [r4, #24]
 800c54e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c550:	2f78      	cmp	r7, #120	; 0x78
 800c552:	4680      	mov	r8, r0
 800c554:	469a      	mov	sl, r3
 800c556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c55a:	d807      	bhi.n	800c56c <_printf_i+0x28>
 800c55c:	2f62      	cmp	r7, #98	; 0x62
 800c55e:	d80a      	bhi.n	800c576 <_printf_i+0x32>
 800c560:	2f00      	cmp	r7, #0
 800c562:	f000 80d8 	beq.w	800c716 <_printf_i+0x1d2>
 800c566:	2f58      	cmp	r7, #88	; 0x58
 800c568:	f000 80a3 	beq.w	800c6b2 <_printf_i+0x16e>
 800c56c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c574:	e03a      	b.n	800c5ec <_printf_i+0xa8>
 800c576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c57a:	2b15      	cmp	r3, #21
 800c57c:	d8f6      	bhi.n	800c56c <_printf_i+0x28>
 800c57e:	a001      	add	r0, pc, #4	; (adr r0, 800c584 <_printf_i+0x40>)
 800c580:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c584:	0800c5dd 	.word	0x0800c5dd
 800c588:	0800c5f1 	.word	0x0800c5f1
 800c58c:	0800c56d 	.word	0x0800c56d
 800c590:	0800c56d 	.word	0x0800c56d
 800c594:	0800c56d 	.word	0x0800c56d
 800c598:	0800c56d 	.word	0x0800c56d
 800c59c:	0800c5f1 	.word	0x0800c5f1
 800c5a0:	0800c56d 	.word	0x0800c56d
 800c5a4:	0800c56d 	.word	0x0800c56d
 800c5a8:	0800c56d 	.word	0x0800c56d
 800c5ac:	0800c56d 	.word	0x0800c56d
 800c5b0:	0800c6fd 	.word	0x0800c6fd
 800c5b4:	0800c621 	.word	0x0800c621
 800c5b8:	0800c6df 	.word	0x0800c6df
 800c5bc:	0800c56d 	.word	0x0800c56d
 800c5c0:	0800c56d 	.word	0x0800c56d
 800c5c4:	0800c71f 	.word	0x0800c71f
 800c5c8:	0800c56d 	.word	0x0800c56d
 800c5cc:	0800c621 	.word	0x0800c621
 800c5d0:	0800c56d 	.word	0x0800c56d
 800c5d4:	0800c56d 	.word	0x0800c56d
 800c5d8:	0800c6e7 	.word	0x0800c6e7
 800c5dc:	680b      	ldr	r3, [r1, #0]
 800c5de:	1d1a      	adds	r2, r3, #4
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	600a      	str	r2, [r1, #0]
 800c5e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c5e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e0a3      	b.n	800c738 <_printf_i+0x1f4>
 800c5f0:	6825      	ldr	r5, [r4, #0]
 800c5f2:	6808      	ldr	r0, [r1, #0]
 800c5f4:	062e      	lsls	r6, r5, #24
 800c5f6:	f100 0304 	add.w	r3, r0, #4
 800c5fa:	d50a      	bpl.n	800c612 <_printf_i+0xce>
 800c5fc:	6805      	ldr	r5, [r0, #0]
 800c5fe:	600b      	str	r3, [r1, #0]
 800c600:	2d00      	cmp	r5, #0
 800c602:	da03      	bge.n	800c60c <_printf_i+0xc8>
 800c604:	232d      	movs	r3, #45	; 0x2d
 800c606:	426d      	negs	r5, r5
 800c608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c60c:	485e      	ldr	r0, [pc, #376]	; (800c788 <_printf_i+0x244>)
 800c60e:	230a      	movs	r3, #10
 800c610:	e019      	b.n	800c646 <_printf_i+0x102>
 800c612:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c616:	6805      	ldr	r5, [r0, #0]
 800c618:	600b      	str	r3, [r1, #0]
 800c61a:	bf18      	it	ne
 800c61c:	b22d      	sxthne	r5, r5
 800c61e:	e7ef      	b.n	800c600 <_printf_i+0xbc>
 800c620:	680b      	ldr	r3, [r1, #0]
 800c622:	6825      	ldr	r5, [r4, #0]
 800c624:	1d18      	adds	r0, r3, #4
 800c626:	6008      	str	r0, [r1, #0]
 800c628:	0628      	lsls	r0, r5, #24
 800c62a:	d501      	bpl.n	800c630 <_printf_i+0xec>
 800c62c:	681d      	ldr	r5, [r3, #0]
 800c62e:	e002      	b.n	800c636 <_printf_i+0xf2>
 800c630:	0669      	lsls	r1, r5, #25
 800c632:	d5fb      	bpl.n	800c62c <_printf_i+0xe8>
 800c634:	881d      	ldrh	r5, [r3, #0]
 800c636:	4854      	ldr	r0, [pc, #336]	; (800c788 <_printf_i+0x244>)
 800c638:	2f6f      	cmp	r7, #111	; 0x6f
 800c63a:	bf0c      	ite	eq
 800c63c:	2308      	moveq	r3, #8
 800c63e:	230a      	movne	r3, #10
 800c640:	2100      	movs	r1, #0
 800c642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c646:	6866      	ldr	r6, [r4, #4]
 800c648:	60a6      	str	r6, [r4, #8]
 800c64a:	2e00      	cmp	r6, #0
 800c64c:	bfa2      	ittt	ge
 800c64e:	6821      	ldrge	r1, [r4, #0]
 800c650:	f021 0104 	bicge.w	r1, r1, #4
 800c654:	6021      	strge	r1, [r4, #0]
 800c656:	b90d      	cbnz	r5, 800c65c <_printf_i+0x118>
 800c658:	2e00      	cmp	r6, #0
 800c65a:	d04d      	beq.n	800c6f8 <_printf_i+0x1b4>
 800c65c:	4616      	mov	r6, r2
 800c65e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c662:	fb03 5711 	mls	r7, r3, r1, r5
 800c666:	5dc7      	ldrb	r7, [r0, r7]
 800c668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c66c:	462f      	mov	r7, r5
 800c66e:	42bb      	cmp	r3, r7
 800c670:	460d      	mov	r5, r1
 800c672:	d9f4      	bls.n	800c65e <_printf_i+0x11a>
 800c674:	2b08      	cmp	r3, #8
 800c676:	d10b      	bne.n	800c690 <_printf_i+0x14c>
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	07df      	lsls	r7, r3, #31
 800c67c:	d508      	bpl.n	800c690 <_printf_i+0x14c>
 800c67e:	6923      	ldr	r3, [r4, #16]
 800c680:	6861      	ldr	r1, [r4, #4]
 800c682:	4299      	cmp	r1, r3
 800c684:	bfde      	ittt	le
 800c686:	2330      	movle	r3, #48	; 0x30
 800c688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c68c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c690:	1b92      	subs	r2, r2, r6
 800c692:	6122      	str	r2, [r4, #16]
 800c694:	f8cd a000 	str.w	sl, [sp]
 800c698:	464b      	mov	r3, r9
 800c69a:	aa03      	add	r2, sp, #12
 800c69c:	4621      	mov	r1, r4
 800c69e:	4640      	mov	r0, r8
 800c6a0:	f7ff fee2 	bl	800c468 <_printf_common>
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	d14c      	bne.n	800c742 <_printf_i+0x1fe>
 800c6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ac:	b004      	add	sp, #16
 800c6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b2:	4835      	ldr	r0, [pc, #212]	; (800c788 <_printf_i+0x244>)
 800c6b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	680e      	ldr	r6, [r1, #0]
 800c6bc:	061f      	lsls	r7, r3, #24
 800c6be:	f856 5b04 	ldr.w	r5, [r6], #4
 800c6c2:	600e      	str	r6, [r1, #0]
 800c6c4:	d514      	bpl.n	800c6f0 <_printf_i+0x1ac>
 800c6c6:	07d9      	lsls	r1, r3, #31
 800c6c8:	bf44      	itt	mi
 800c6ca:	f043 0320 	orrmi.w	r3, r3, #32
 800c6ce:	6023      	strmi	r3, [r4, #0]
 800c6d0:	b91d      	cbnz	r5, 800c6da <_printf_i+0x196>
 800c6d2:	6823      	ldr	r3, [r4, #0]
 800c6d4:	f023 0320 	bic.w	r3, r3, #32
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	2310      	movs	r3, #16
 800c6dc:	e7b0      	b.n	800c640 <_printf_i+0xfc>
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	f043 0320 	orr.w	r3, r3, #32
 800c6e4:	6023      	str	r3, [r4, #0]
 800c6e6:	2378      	movs	r3, #120	; 0x78
 800c6e8:	4828      	ldr	r0, [pc, #160]	; (800c78c <_printf_i+0x248>)
 800c6ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6ee:	e7e3      	b.n	800c6b8 <_printf_i+0x174>
 800c6f0:	065e      	lsls	r6, r3, #25
 800c6f2:	bf48      	it	mi
 800c6f4:	b2ad      	uxthmi	r5, r5
 800c6f6:	e7e6      	b.n	800c6c6 <_printf_i+0x182>
 800c6f8:	4616      	mov	r6, r2
 800c6fa:	e7bb      	b.n	800c674 <_printf_i+0x130>
 800c6fc:	680b      	ldr	r3, [r1, #0]
 800c6fe:	6826      	ldr	r6, [r4, #0]
 800c700:	6960      	ldr	r0, [r4, #20]
 800c702:	1d1d      	adds	r5, r3, #4
 800c704:	600d      	str	r5, [r1, #0]
 800c706:	0635      	lsls	r5, r6, #24
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	d501      	bpl.n	800c710 <_printf_i+0x1cc>
 800c70c:	6018      	str	r0, [r3, #0]
 800c70e:	e002      	b.n	800c716 <_printf_i+0x1d2>
 800c710:	0671      	lsls	r1, r6, #25
 800c712:	d5fb      	bpl.n	800c70c <_printf_i+0x1c8>
 800c714:	8018      	strh	r0, [r3, #0]
 800c716:	2300      	movs	r3, #0
 800c718:	6123      	str	r3, [r4, #16]
 800c71a:	4616      	mov	r6, r2
 800c71c:	e7ba      	b.n	800c694 <_printf_i+0x150>
 800c71e:	680b      	ldr	r3, [r1, #0]
 800c720:	1d1a      	adds	r2, r3, #4
 800c722:	600a      	str	r2, [r1, #0]
 800c724:	681e      	ldr	r6, [r3, #0]
 800c726:	6862      	ldr	r2, [r4, #4]
 800c728:	2100      	movs	r1, #0
 800c72a:	4630      	mov	r0, r6
 800c72c:	f7f3 fd50 	bl	80001d0 <memchr>
 800c730:	b108      	cbz	r0, 800c736 <_printf_i+0x1f2>
 800c732:	1b80      	subs	r0, r0, r6
 800c734:	6060      	str	r0, [r4, #4]
 800c736:	6863      	ldr	r3, [r4, #4]
 800c738:	6123      	str	r3, [r4, #16]
 800c73a:	2300      	movs	r3, #0
 800c73c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c740:	e7a8      	b.n	800c694 <_printf_i+0x150>
 800c742:	6923      	ldr	r3, [r4, #16]
 800c744:	4632      	mov	r2, r6
 800c746:	4649      	mov	r1, r9
 800c748:	4640      	mov	r0, r8
 800c74a:	47d0      	blx	sl
 800c74c:	3001      	adds	r0, #1
 800c74e:	d0ab      	beq.n	800c6a8 <_printf_i+0x164>
 800c750:	6823      	ldr	r3, [r4, #0]
 800c752:	079b      	lsls	r3, r3, #30
 800c754:	d413      	bmi.n	800c77e <_printf_i+0x23a>
 800c756:	68e0      	ldr	r0, [r4, #12]
 800c758:	9b03      	ldr	r3, [sp, #12]
 800c75a:	4298      	cmp	r0, r3
 800c75c:	bfb8      	it	lt
 800c75e:	4618      	movlt	r0, r3
 800c760:	e7a4      	b.n	800c6ac <_printf_i+0x168>
 800c762:	2301      	movs	r3, #1
 800c764:	4632      	mov	r2, r6
 800c766:	4649      	mov	r1, r9
 800c768:	4640      	mov	r0, r8
 800c76a:	47d0      	blx	sl
 800c76c:	3001      	adds	r0, #1
 800c76e:	d09b      	beq.n	800c6a8 <_printf_i+0x164>
 800c770:	3501      	adds	r5, #1
 800c772:	68e3      	ldr	r3, [r4, #12]
 800c774:	9903      	ldr	r1, [sp, #12]
 800c776:	1a5b      	subs	r3, r3, r1
 800c778:	42ab      	cmp	r3, r5
 800c77a:	dcf2      	bgt.n	800c762 <_printf_i+0x21e>
 800c77c:	e7eb      	b.n	800c756 <_printf_i+0x212>
 800c77e:	2500      	movs	r5, #0
 800c780:	f104 0619 	add.w	r6, r4, #25
 800c784:	e7f5      	b.n	800c772 <_printf_i+0x22e>
 800c786:	bf00      	nop
 800c788:	0800d49f 	.word	0x0800d49f
 800c78c:	0800d4b0 	.word	0x0800d4b0

0800c790 <_sbrk_r>:
 800c790:	b538      	push	{r3, r4, r5, lr}
 800c792:	4d06      	ldr	r5, [pc, #24]	; (800c7ac <_sbrk_r+0x1c>)
 800c794:	2300      	movs	r3, #0
 800c796:	4604      	mov	r4, r0
 800c798:	4608      	mov	r0, r1
 800c79a:	602b      	str	r3, [r5, #0]
 800c79c:	f7f8 fec4 	bl	8005528 <_sbrk>
 800c7a0:	1c43      	adds	r3, r0, #1
 800c7a2:	d102      	bne.n	800c7aa <_sbrk_r+0x1a>
 800c7a4:	682b      	ldr	r3, [r5, #0]
 800c7a6:	b103      	cbz	r3, 800c7aa <_sbrk_r+0x1a>
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	bd38      	pop	{r3, r4, r5, pc}
 800c7ac:	20000ec8 	.word	0x20000ec8

0800c7b0 <__swbuf_r>:
 800c7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b2:	460e      	mov	r6, r1
 800c7b4:	4614      	mov	r4, r2
 800c7b6:	4605      	mov	r5, r0
 800c7b8:	b118      	cbz	r0, 800c7c2 <__swbuf_r+0x12>
 800c7ba:	6983      	ldr	r3, [r0, #24]
 800c7bc:	b90b      	cbnz	r3, 800c7c2 <__swbuf_r+0x12>
 800c7be:	f000 f9d9 	bl	800cb74 <__sinit>
 800c7c2:	4b21      	ldr	r3, [pc, #132]	; (800c848 <__swbuf_r+0x98>)
 800c7c4:	429c      	cmp	r4, r3
 800c7c6:	d12b      	bne.n	800c820 <__swbuf_r+0x70>
 800c7c8:	686c      	ldr	r4, [r5, #4]
 800c7ca:	69a3      	ldr	r3, [r4, #24]
 800c7cc:	60a3      	str	r3, [r4, #8]
 800c7ce:	89a3      	ldrh	r3, [r4, #12]
 800c7d0:	071a      	lsls	r2, r3, #28
 800c7d2:	d52f      	bpl.n	800c834 <__swbuf_r+0x84>
 800c7d4:	6923      	ldr	r3, [r4, #16]
 800c7d6:	b36b      	cbz	r3, 800c834 <__swbuf_r+0x84>
 800c7d8:	6923      	ldr	r3, [r4, #16]
 800c7da:	6820      	ldr	r0, [r4, #0]
 800c7dc:	1ac0      	subs	r0, r0, r3
 800c7de:	6963      	ldr	r3, [r4, #20]
 800c7e0:	b2f6      	uxtb	r6, r6
 800c7e2:	4283      	cmp	r3, r0
 800c7e4:	4637      	mov	r7, r6
 800c7e6:	dc04      	bgt.n	800c7f2 <__swbuf_r+0x42>
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f000 f92e 	bl	800ca4c <_fflush_r>
 800c7f0:	bb30      	cbnz	r0, 800c840 <__swbuf_r+0x90>
 800c7f2:	68a3      	ldr	r3, [r4, #8]
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	60a3      	str	r3, [r4, #8]
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	1c5a      	adds	r2, r3, #1
 800c7fc:	6022      	str	r2, [r4, #0]
 800c7fe:	701e      	strb	r6, [r3, #0]
 800c800:	6963      	ldr	r3, [r4, #20]
 800c802:	3001      	adds	r0, #1
 800c804:	4283      	cmp	r3, r0
 800c806:	d004      	beq.n	800c812 <__swbuf_r+0x62>
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	07db      	lsls	r3, r3, #31
 800c80c:	d506      	bpl.n	800c81c <__swbuf_r+0x6c>
 800c80e:	2e0a      	cmp	r6, #10
 800c810:	d104      	bne.n	800c81c <__swbuf_r+0x6c>
 800c812:	4621      	mov	r1, r4
 800c814:	4628      	mov	r0, r5
 800c816:	f000 f919 	bl	800ca4c <_fflush_r>
 800c81a:	b988      	cbnz	r0, 800c840 <__swbuf_r+0x90>
 800c81c:	4638      	mov	r0, r7
 800c81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c820:	4b0a      	ldr	r3, [pc, #40]	; (800c84c <__swbuf_r+0x9c>)
 800c822:	429c      	cmp	r4, r3
 800c824:	d101      	bne.n	800c82a <__swbuf_r+0x7a>
 800c826:	68ac      	ldr	r4, [r5, #8]
 800c828:	e7cf      	b.n	800c7ca <__swbuf_r+0x1a>
 800c82a:	4b09      	ldr	r3, [pc, #36]	; (800c850 <__swbuf_r+0xa0>)
 800c82c:	429c      	cmp	r4, r3
 800c82e:	bf08      	it	eq
 800c830:	68ec      	ldreq	r4, [r5, #12]
 800c832:	e7ca      	b.n	800c7ca <__swbuf_r+0x1a>
 800c834:	4621      	mov	r1, r4
 800c836:	4628      	mov	r0, r5
 800c838:	f000 f80c 	bl	800c854 <__swsetup_r>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	d0cb      	beq.n	800c7d8 <__swbuf_r+0x28>
 800c840:	f04f 37ff 	mov.w	r7, #4294967295
 800c844:	e7ea      	b.n	800c81c <__swbuf_r+0x6c>
 800c846:	bf00      	nop
 800c848:	0800d4e4 	.word	0x0800d4e4
 800c84c:	0800d504 	.word	0x0800d504
 800c850:	0800d4c4 	.word	0x0800d4c4

0800c854 <__swsetup_r>:
 800c854:	4b32      	ldr	r3, [pc, #200]	; (800c920 <__swsetup_r+0xcc>)
 800c856:	b570      	push	{r4, r5, r6, lr}
 800c858:	681d      	ldr	r5, [r3, #0]
 800c85a:	4606      	mov	r6, r0
 800c85c:	460c      	mov	r4, r1
 800c85e:	b125      	cbz	r5, 800c86a <__swsetup_r+0x16>
 800c860:	69ab      	ldr	r3, [r5, #24]
 800c862:	b913      	cbnz	r3, 800c86a <__swsetup_r+0x16>
 800c864:	4628      	mov	r0, r5
 800c866:	f000 f985 	bl	800cb74 <__sinit>
 800c86a:	4b2e      	ldr	r3, [pc, #184]	; (800c924 <__swsetup_r+0xd0>)
 800c86c:	429c      	cmp	r4, r3
 800c86e:	d10f      	bne.n	800c890 <__swsetup_r+0x3c>
 800c870:	686c      	ldr	r4, [r5, #4]
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c878:	0719      	lsls	r1, r3, #28
 800c87a:	d42c      	bmi.n	800c8d6 <__swsetup_r+0x82>
 800c87c:	06dd      	lsls	r5, r3, #27
 800c87e:	d411      	bmi.n	800c8a4 <__swsetup_r+0x50>
 800c880:	2309      	movs	r3, #9
 800c882:	6033      	str	r3, [r6, #0]
 800c884:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c888:	81a3      	strh	r3, [r4, #12]
 800c88a:	f04f 30ff 	mov.w	r0, #4294967295
 800c88e:	e03e      	b.n	800c90e <__swsetup_r+0xba>
 800c890:	4b25      	ldr	r3, [pc, #148]	; (800c928 <__swsetup_r+0xd4>)
 800c892:	429c      	cmp	r4, r3
 800c894:	d101      	bne.n	800c89a <__swsetup_r+0x46>
 800c896:	68ac      	ldr	r4, [r5, #8]
 800c898:	e7eb      	b.n	800c872 <__swsetup_r+0x1e>
 800c89a:	4b24      	ldr	r3, [pc, #144]	; (800c92c <__swsetup_r+0xd8>)
 800c89c:	429c      	cmp	r4, r3
 800c89e:	bf08      	it	eq
 800c8a0:	68ec      	ldreq	r4, [r5, #12]
 800c8a2:	e7e6      	b.n	800c872 <__swsetup_r+0x1e>
 800c8a4:	0758      	lsls	r0, r3, #29
 800c8a6:	d512      	bpl.n	800c8ce <__swsetup_r+0x7a>
 800c8a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8aa:	b141      	cbz	r1, 800c8be <__swsetup_r+0x6a>
 800c8ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8b0:	4299      	cmp	r1, r3
 800c8b2:	d002      	beq.n	800c8ba <__swsetup_r+0x66>
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	f7ff fbd3 	bl	800c060 <_free_r>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	6363      	str	r3, [r4, #52]	; 0x34
 800c8be:	89a3      	ldrh	r3, [r4, #12]
 800c8c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8c4:	81a3      	strh	r3, [r4, #12]
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	6063      	str	r3, [r4, #4]
 800c8ca:	6923      	ldr	r3, [r4, #16]
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	89a3      	ldrh	r3, [r4, #12]
 800c8d0:	f043 0308 	orr.w	r3, r3, #8
 800c8d4:	81a3      	strh	r3, [r4, #12]
 800c8d6:	6923      	ldr	r3, [r4, #16]
 800c8d8:	b94b      	cbnz	r3, 800c8ee <__swsetup_r+0x9a>
 800c8da:	89a3      	ldrh	r3, [r4, #12]
 800c8dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8e4:	d003      	beq.n	800c8ee <__swsetup_r+0x9a>
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f000 fa07 	bl	800ccfc <__smakebuf_r>
 800c8ee:	89a0      	ldrh	r0, [r4, #12]
 800c8f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8f4:	f010 0301 	ands.w	r3, r0, #1
 800c8f8:	d00a      	beq.n	800c910 <__swsetup_r+0xbc>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	60a3      	str	r3, [r4, #8]
 800c8fe:	6963      	ldr	r3, [r4, #20]
 800c900:	425b      	negs	r3, r3
 800c902:	61a3      	str	r3, [r4, #24]
 800c904:	6923      	ldr	r3, [r4, #16]
 800c906:	b943      	cbnz	r3, 800c91a <__swsetup_r+0xc6>
 800c908:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c90c:	d1ba      	bne.n	800c884 <__swsetup_r+0x30>
 800c90e:	bd70      	pop	{r4, r5, r6, pc}
 800c910:	0781      	lsls	r1, r0, #30
 800c912:	bf58      	it	pl
 800c914:	6963      	ldrpl	r3, [r4, #20]
 800c916:	60a3      	str	r3, [r4, #8]
 800c918:	e7f4      	b.n	800c904 <__swsetup_r+0xb0>
 800c91a:	2000      	movs	r0, #0
 800c91c:	e7f7      	b.n	800c90e <__swsetup_r+0xba>
 800c91e:	bf00      	nop
 800c920:	20000048 	.word	0x20000048
 800c924:	0800d4e4 	.word	0x0800d4e4
 800c928:	0800d504 	.word	0x0800d504
 800c92c:	0800d4c4 	.word	0x0800d4c4

0800c930 <abort>:
 800c930:	b508      	push	{r3, lr}
 800c932:	2006      	movs	r0, #6
 800c934:	f000 fa56 	bl	800cde4 <raise>
 800c938:	2001      	movs	r0, #1
 800c93a:	f7f8 fd7d 	bl	8005438 <_exit>
	...

0800c940 <__sflush_r>:
 800c940:	898a      	ldrh	r2, [r1, #12]
 800c942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c946:	4605      	mov	r5, r0
 800c948:	0710      	lsls	r0, r2, #28
 800c94a:	460c      	mov	r4, r1
 800c94c:	d458      	bmi.n	800ca00 <__sflush_r+0xc0>
 800c94e:	684b      	ldr	r3, [r1, #4]
 800c950:	2b00      	cmp	r3, #0
 800c952:	dc05      	bgt.n	800c960 <__sflush_r+0x20>
 800c954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c956:	2b00      	cmp	r3, #0
 800c958:	dc02      	bgt.n	800c960 <__sflush_r+0x20>
 800c95a:	2000      	movs	r0, #0
 800c95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c962:	2e00      	cmp	r6, #0
 800c964:	d0f9      	beq.n	800c95a <__sflush_r+0x1a>
 800c966:	2300      	movs	r3, #0
 800c968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c96c:	682f      	ldr	r7, [r5, #0]
 800c96e:	602b      	str	r3, [r5, #0]
 800c970:	d032      	beq.n	800c9d8 <__sflush_r+0x98>
 800c972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c974:	89a3      	ldrh	r3, [r4, #12]
 800c976:	075a      	lsls	r2, r3, #29
 800c978:	d505      	bpl.n	800c986 <__sflush_r+0x46>
 800c97a:	6863      	ldr	r3, [r4, #4]
 800c97c:	1ac0      	subs	r0, r0, r3
 800c97e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c980:	b10b      	cbz	r3, 800c986 <__sflush_r+0x46>
 800c982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c984:	1ac0      	subs	r0, r0, r3
 800c986:	2300      	movs	r3, #0
 800c988:	4602      	mov	r2, r0
 800c98a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c98c:	6a21      	ldr	r1, [r4, #32]
 800c98e:	4628      	mov	r0, r5
 800c990:	47b0      	blx	r6
 800c992:	1c43      	adds	r3, r0, #1
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	d106      	bne.n	800c9a6 <__sflush_r+0x66>
 800c998:	6829      	ldr	r1, [r5, #0]
 800c99a:	291d      	cmp	r1, #29
 800c99c:	d82c      	bhi.n	800c9f8 <__sflush_r+0xb8>
 800c99e:	4a2a      	ldr	r2, [pc, #168]	; (800ca48 <__sflush_r+0x108>)
 800c9a0:	40ca      	lsrs	r2, r1
 800c9a2:	07d6      	lsls	r6, r2, #31
 800c9a4:	d528      	bpl.n	800c9f8 <__sflush_r+0xb8>
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	6062      	str	r2, [r4, #4]
 800c9aa:	04d9      	lsls	r1, r3, #19
 800c9ac:	6922      	ldr	r2, [r4, #16]
 800c9ae:	6022      	str	r2, [r4, #0]
 800c9b0:	d504      	bpl.n	800c9bc <__sflush_r+0x7c>
 800c9b2:	1c42      	adds	r2, r0, #1
 800c9b4:	d101      	bne.n	800c9ba <__sflush_r+0x7a>
 800c9b6:	682b      	ldr	r3, [r5, #0]
 800c9b8:	b903      	cbnz	r3, 800c9bc <__sflush_r+0x7c>
 800c9ba:	6560      	str	r0, [r4, #84]	; 0x54
 800c9bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9be:	602f      	str	r7, [r5, #0]
 800c9c0:	2900      	cmp	r1, #0
 800c9c2:	d0ca      	beq.n	800c95a <__sflush_r+0x1a>
 800c9c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9c8:	4299      	cmp	r1, r3
 800c9ca:	d002      	beq.n	800c9d2 <__sflush_r+0x92>
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f7ff fb47 	bl	800c060 <_free_r>
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	6360      	str	r0, [r4, #52]	; 0x34
 800c9d6:	e7c1      	b.n	800c95c <__sflush_r+0x1c>
 800c9d8:	6a21      	ldr	r1, [r4, #32]
 800c9da:	2301      	movs	r3, #1
 800c9dc:	4628      	mov	r0, r5
 800c9de:	47b0      	blx	r6
 800c9e0:	1c41      	adds	r1, r0, #1
 800c9e2:	d1c7      	bne.n	800c974 <__sflush_r+0x34>
 800c9e4:	682b      	ldr	r3, [r5, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d0c4      	beq.n	800c974 <__sflush_r+0x34>
 800c9ea:	2b1d      	cmp	r3, #29
 800c9ec:	d001      	beq.n	800c9f2 <__sflush_r+0xb2>
 800c9ee:	2b16      	cmp	r3, #22
 800c9f0:	d101      	bne.n	800c9f6 <__sflush_r+0xb6>
 800c9f2:	602f      	str	r7, [r5, #0]
 800c9f4:	e7b1      	b.n	800c95a <__sflush_r+0x1a>
 800c9f6:	89a3      	ldrh	r3, [r4, #12]
 800c9f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9fc:	81a3      	strh	r3, [r4, #12]
 800c9fe:	e7ad      	b.n	800c95c <__sflush_r+0x1c>
 800ca00:	690f      	ldr	r7, [r1, #16]
 800ca02:	2f00      	cmp	r7, #0
 800ca04:	d0a9      	beq.n	800c95a <__sflush_r+0x1a>
 800ca06:	0793      	lsls	r3, r2, #30
 800ca08:	680e      	ldr	r6, [r1, #0]
 800ca0a:	bf08      	it	eq
 800ca0c:	694b      	ldreq	r3, [r1, #20]
 800ca0e:	600f      	str	r7, [r1, #0]
 800ca10:	bf18      	it	ne
 800ca12:	2300      	movne	r3, #0
 800ca14:	eba6 0807 	sub.w	r8, r6, r7
 800ca18:	608b      	str	r3, [r1, #8]
 800ca1a:	f1b8 0f00 	cmp.w	r8, #0
 800ca1e:	dd9c      	ble.n	800c95a <__sflush_r+0x1a>
 800ca20:	6a21      	ldr	r1, [r4, #32]
 800ca22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca24:	4643      	mov	r3, r8
 800ca26:	463a      	mov	r2, r7
 800ca28:	4628      	mov	r0, r5
 800ca2a:	47b0      	blx	r6
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	dc06      	bgt.n	800ca3e <__sflush_r+0xfe>
 800ca30:	89a3      	ldrh	r3, [r4, #12]
 800ca32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca36:	81a3      	strh	r3, [r4, #12]
 800ca38:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3c:	e78e      	b.n	800c95c <__sflush_r+0x1c>
 800ca3e:	4407      	add	r7, r0
 800ca40:	eba8 0800 	sub.w	r8, r8, r0
 800ca44:	e7e9      	b.n	800ca1a <__sflush_r+0xda>
 800ca46:	bf00      	nop
 800ca48:	20400001 	.word	0x20400001

0800ca4c <_fflush_r>:
 800ca4c:	b538      	push	{r3, r4, r5, lr}
 800ca4e:	690b      	ldr	r3, [r1, #16]
 800ca50:	4605      	mov	r5, r0
 800ca52:	460c      	mov	r4, r1
 800ca54:	b913      	cbnz	r3, 800ca5c <_fflush_r+0x10>
 800ca56:	2500      	movs	r5, #0
 800ca58:	4628      	mov	r0, r5
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	b118      	cbz	r0, 800ca66 <_fflush_r+0x1a>
 800ca5e:	6983      	ldr	r3, [r0, #24]
 800ca60:	b90b      	cbnz	r3, 800ca66 <_fflush_r+0x1a>
 800ca62:	f000 f887 	bl	800cb74 <__sinit>
 800ca66:	4b14      	ldr	r3, [pc, #80]	; (800cab8 <_fflush_r+0x6c>)
 800ca68:	429c      	cmp	r4, r3
 800ca6a:	d11b      	bne.n	800caa4 <_fflush_r+0x58>
 800ca6c:	686c      	ldr	r4, [r5, #4]
 800ca6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d0ef      	beq.n	800ca56 <_fflush_r+0xa>
 800ca76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca78:	07d0      	lsls	r0, r2, #31
 800ca7a:	d404      	bmi.n	800ca86 <_fflush_r+0x3a>
 800ca7c:	0599      	lsls	r1, r3, #22
 800ca7e:	d402      	bmi.n	800ca86 <_fflush_r+0x3a>
 800ca80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca82:	f000 f915 	bl	800ccb0 <__retarget_lock_acquire_recursive>
 800ca86:	4628      	mov	r0, r5
 800ca88:	4621      	mov	r1, r4
 800ca8a:	f7ff ff59 	bl	800c940 <__sflush_r>
 800ca8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca90:	07da      	lsls	r2, r3, #31
 800ca92:	4605      	mov	r5, r0
 800ca94:	d4e0      	bmi.n	800ca58 <_fflush_r+0xc>
 800ca96:	89a3      	ldrh	r3, [r4, #12]
 800ca98:	059b      	lsls	r3, r3, #22
 800ca9a:	d4dd      	bmi.n	800ca58 <_fflush_r+0xc>
 800ca9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca9e:	f000 f908 	bl	800ccb2 <__retarget_lock_release_recursive>
 800caa2:	e7d9      	b.n	800ca58 <_fflush_r+0xc>
 800caa4:	4b05      	ldr	r3, [pc, #20]	; (800cabc <_fflush_r+0x70>)
 800caa6:	429c      	cmp	r4, r3
 800caa8:	d101      	bne.n	800caae <_fflush_r+0x62>
 800caaa:	68ac      	ldr	r4, [r5, #8]
 800caac:	e7df      	b.n	800ca6e <_fflush_r+0x22>
 800caae:	4b04      	ldr	r3, [pc, #16]	; (800cac0 <_fflush_r+0x74>)
 800cab0:	429c      	cmp	r4, r3
 800cab2:	bf08      	it	eq
 800cab4:	68ec      	ldreq	r4, [r5, #12]
 800cab6:	e7da      	b.n	800ca6e <_fflush_r+0x22>
 800cab8:	0800d4e4 	.word	0x0800d4e4
 800cabc:	0800d504 	.word	0x0800d504
 800cac0:	0800d4c4 	.word	0x0800d4c4

0800cac4 <std>:
 800cac4:	2300      	movs	r3, #0
 800cac6:	b510      	push	{r4, lr}
 800cac8:	4604      	mov	r4, r0
 800caca:	e9c0 3300 	strd	r3, r3, [r0]
 800cace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cad2:	6083      	str	r3, [r0, #8]
 800cad4:	8181      	strh	r1, [r0, #12]
 800cad6:	6643      	str	r3, [r0, #100]	; 0x64
 800cad8:	81c2      	strh	r2, [r0, #14]
 800cada:	6183      	str	r3, [r0, #24]
 800cadc:	4619      	mov	r1, r3
 800cade:	2208      	movs	r2, #8
 800cae0:	305c      	adds	r0, #92	; 0x5c
 800cae2:	f7ff fa3d 	bl	800bf60 <memset>
 800cae6:	4b05      	ldr	r3, [pc, #20]	; (800cafc <std+0x38>)
 800cae8:	6263      	str	r3, [r4, #36]	; 0x24
 800caea:	4b05      	ldr	r3, [pc, #20]	; (800cb00 <std+0x3c>)
 800caec:	62a3      	str	r3, [r4, #40]	; 0x28
 800caee:	4b05      	ldr	r3, [pc, #20]	; (800cb04 <std+0x40>)
 800caf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800caf2:	4b05      	ldr	r3, [pc, #20]	; (800cb08 <std+0x44>)
 800caf4:	6224      	str	r4, [r4, #32]
 800caf6:	6323      	str	r3, [r4, #48]	; 0x30
 800caf8:	bd10      	pop	{r4, pc}
 800cafa:	bf00      	nop
 800cafc:	0800ce1d 	.word	0x0800ce1d
 800cb00:	0800ce3f 	.word	0x0800ce3f
 800cb04:	0800ce77 	.word	0x0800ce77
 800cb08:	0800ce9b 	.word	0x0800ce9b

0800cb0c <_cleanup_r>:
 800cb0c:	4901      	ldr	r1, [pc, #4]	; (800cb14 <_cleanup_r+0x8>)
 800cb0e:	f000 b8af 	b.w	800cc70 <_fwalk_reent>
 800cb12:	bf00      	nop
 800cb14:	0800ca4d 	.word	0x0800ca4d

0800cb18 <__sfmoreglue>:
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	1e4a      	subs	r2, r1, #1
 800cb1c:	2568      	movs	r5, #104	; 0x68
 800cb1e:	4355      	muls	r5, r2
 800cb20:	460e      	mov	r6, r1
 800cb22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb26:	f7ff faeb 	bl	800c100 <_malloc_r>
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	b140      	cbz	r0, 800cb40 <__sfmoreglue+0x28>
 800cb2e:	2100      	movs	r1, #0
 800cb30:	e9c0 1600 	strd	r1, r6, [r0]
 800cb34:	300c      	adds	r0, #12
 800cb36:	60a0      	str	r0, [r4, #8]
 800cb38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb3c:	f7ff fa10 	bl	800bf60 <memset>
 800cb40:	4620      	mov	r0, r4
 800cb42:	bd70      	pop	{r4, r5, r6, pc}

0800cb44 <__sfp_lock_acquire>:
 800cb44:	4801      	ldr	r0, [pc, #4]	; (800cb4c <__sfp_lock_acquire+0x8>)
 800cb46:	f000 b8b3 	b.w	800ccb0 <__retarget_lock_acquire_recursive>
 800cb4a:	bf00      	nop
 800cb4c:	20000ec4 	.word	0x20000ec4

0800cb50 <__sfp_lock_release>:
 800cb50:	4801      	ldr	r0, [pc, #4]	; (800cb58 <__sfp_lock_release+0x8>)
 800cb52:	f000 b8ae 	b.w	800ccb2 <__retarget_lock_release_recursive>
 800cb56:	bf00      	nop
 800cb58:	20000ec4 	.word	0x20000ec4

0800cb5c <__sinit_lock_acquire>:
 800cb5c:	4801      	ldr	r0, [pc, #4]	; (800cb64 <__sinit_lock_acquire+0x8>)
 800cb5e:	f000 b8a7 	b.w	800ccb0 <__retarget_lock_acquire_recursive>
 800cb62:	bf00      	nop
 800cb64:	20000ebf 	.word	0x20000ebf

0800cb68 <__sinit_lock_release>:
 800cb68:	4801      	ldr	r0, [pc, #4]	; (800cb70 <__sinit_lock_release+0x8>)
 800cb6a:	f000 b8a2 	b.w	800ccb2 <__retarget_lock_release_recursive>
 800cb6e:	bf00      	nop
 800cb70:	20000ebf 	.word	0x20000ebf

0800cb74 <__sinit>:
 800cb74:	b510      	push	{r4, lr}
 800cb76:	4604      	mov	r4, r0
 800cb78:	f7ff fff0 	bl	800cb5c <__sinit_lock_acquire>
 800cb7c:	69a3      	ldr	r3, [r4, #24]
 800cb7e:	b11b      	cbz	r3, 800cb88 <__sinit+0x14>
 800cb80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb84:	f7ff bff0 	b.w	800cb68 <__sinit_lock_release>
 800cb88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb8c:	6523      	str	r3, [r4, #80]	; 0x50
 800cb8e:	4b13      	ldr	r3, [pc, #76]	; (800cbdc <__sinit+0x68>)
 800cb90:	4a13      	ldr	r2, [pc, #76]	; (800cbe0 <__sinit+0x6c>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb96:	42a3      	cmp	r3, r4
 800cb98:	bf04      	itt	eq
 800cb9a:	2301      	moveq	r3, #1
 800cb9c:	61a3      	streq	r3, [r4, #24]
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f000 f820 	bl	800cbe4 <__sfp>
 800cba4:	6060      	str	r0, [r4, #4]
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 f81c 	bl	800cbe4 <__sfp>
 800cbac:	60a0      	str	r0, [r4, #8]
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f000 f818 	bl	800cbe4 <__sfp>
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	60e0      	str	r0, [r4, #12]
 800cbb8:	2104      	movs	r1, #4
 800cbba:	6860      	ldr	r0, [r4, #4]
 800cbbc:	f7ff ff82 	bl	800cac4 <std>
 800cbc0:	68a0      	ldr	r0, [r4, #8]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	2109      	movs	r1, #9
 800cbc6:	f7ff ff7d 	bl	800cac4 <std>
 800cbca:	68e0      	ldr	r0, [r4, #12]
 800cbcc:	2202      	movs	r2, #2
 800cbce:	2112      	movs	r1, #18
 800cbd0:	f7ff ff78 	bl	800cac4 <std>
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	61a3      	str	r3, [r4, #24]
 800cbd8:	e7d2      	b.n	800cb80 <__sinit+0xc>
 800cbda:	bf00      	nop
 800cbdc:	0800d3d8 	.word	0x0800d3d8
 800cbe0:	0800cb0d 	.word	0x0800cb0d

0800cbe4 <__sfp>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	4607      	mov	r7, r0
 800cbe8:	f7ff ffac 	bl	800cb44 <__sfp_lock_acquire>
 800cbec:	4b1e      	ldr	r3, [pc, #120]	; (800cc68 <__sfp+0x84>)
 800cbee:	681e      	ldr	r6, [r3, #0]
 800cbf0:	69b3      	ldr	r3, [r6, #24]
 800cbf2:	b913      	cbnz	r3, 800cbfa <__sfp+0x16>
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	f7ff ffbd 	bl	800cb74 <__sinit>
 800cbfa:	3648      	adds	r6, #72	; 0x48
 800cbfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	d503      	bpl.n	800cc0c <__sfp+0x28>
 800cc04:	6833      	ldr	r3, [r6, #0]
 800cc06:	b30b      	cbz	r3, 800cc4c <__sfp+0x68>
 800cc08:	6836      	ldr	r6, [r6, #0]
 800cc0a:	e7f7      	b.n	800cbfc <__sfp+0x18>
 800cc0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc10:	b9d5      	cbnz	r5, 800cc48 <__sfp+0x64>
 800cc12:	4b16      	ldr	r3, [pc, #88]	; (800cc6c <__sfp+0x88>)
 800cc14:	60e3      	str	r3, [r4, #12]
 800cc16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc1a:	6665      	str	r5, [r4, #100]	; 0x64
 800cc1c:	f000 f847 	bl	800ccae <__retarget_lock_init_recursive>
 800cc20:	f7ff ff96 	bl	800cb50 <__sfp_lock_release>
 800cc24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc2c:	6025      	str	r5, [r4, #0]
 800cc2e:	61a5      	str	r5, [r4, #24]
 800cc30:	2208      	movs	r2, #8
 800cc32:	4629      	mov	r1, r5
 800cc34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc38:	f7ff f992 	bl	800bf60 <memset>
 800cc3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc44:	4620      	mov	r0, r4
 800cc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc48:	3468      	adds	r4, #104	; 0x68
 800cc4a:	e7d9      	b.n	800cc00 <__sfp+0x1c>
 800cc4c:	2104      	movs	r1, #4
 800cc4e:	4638      	mov	r0, r7
 800cc50:	f7ff ff62 	bl	800cb18 <__sfmoreglue>
 800cc54:	4604      	mov	r4, r0
 800cc56:	6030      	str	r0, [r6, #0]
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d1d5      	bne.n	800cc08 <__sfp+0x24>
 800cc5c:	f7ff ff78 	bl	800cb50 <__sfp_lock_release>
 800cc60:	230c      	movs	r3, #12
 800cc62:	603b      	str	r3, [r7, #0]
 800cc64:	e7ee      	b.n	800cc44 <__sfp+0x60>
 800cc66:	bf00      	nop
 800cc68:	0800d3d8 	.word	0x0800d3d8
 800cc6c:	ffff0001 	.word	0xffff0001

0800cc70 <_fwalk_reent>:
 800cc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc74:	4606      	mov	r6, r0
 800cc76:	4688      	mov	r8, r1
 800cc78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc7c:	2700      	movs	r7, #0
 800cc7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc82:	f1b9 0901 	subs.w	r9, r9, #1
 800cc86:	d505      	bpl.n	800cc94 <_fwalk_reent+0x24>
 800cc88:	6824      	ldr	r4, [r4, #0]
 800cc8a:	2c00      	cmp	r4, #0
 800cc8c:	d1f7      	bne.n	800cc7e <_fwalk_reent+0xe>
 800cc8e:	4638      	mov	r0, r7
 800cc90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc94:	89ab      	ldrh	r3, [r5, #12]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d907      	bls.n	800ccaa <_fwalk_reent+0x3a>
 800cc9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	d003      	beq.n	800ccaa <_fwalk_reent+0x3a>
 800cca2:	4629      	mov	r1, r5
 800cca4:	4630      	mov	r0, r6
 800cca6:	47c0      	blx	r8
 800cca8:	4307      	orrs	r7, r0
 800ccaa:	3568      	adds	r5, #104	; 0x68
 800ccac:	e7e9      	b.n	800cc82 <_fwalk_reent+0x12>

0800ccae <__retarget_lock_init_recursive>:
 800ccae:	4770      	bx	lr

0800ccb0 <__retarget_lock_acquire_recursive>:
 800ccb0:	4770      	bx	lr

0800ccb2 <__retarget_lock_release_recursive>:
 800ccb2:	4770      	bx	lr

0800ccb4 <__swhatbuf_r>:
 800ccb4:	b570      	push	{r4, r5, r6, lr}
 800ccb6:	460e      	mov	r6, r1
 800ccb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccbc:	2900      	cmp	r1, #0
 800ccbe:	b096      	sub	sp, #88	; 0x58
 800ccc0:	4614      	mov	r4, r2
 800ccc2:	461d      	mov	r5, r3
 800ccc4:	da07      	bge.n	800ccd6 <__swhatbuf_r+0x22>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	602b      	str	r3, [r5, #0]
 800ccca:	89b3      	ldrh	r3, [r6, #12]
 800cccc:	061a      	lsls	r2, r3, #24
 800ccce:	d410      	bmi.n	800ccf2 <__swhatbuf_r+0x3e>
 800ccd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccd4:	e00e      	b.n	800ccf4 <__swhatbuf_r+0x40>
 800ccd6:	466a      	mov	r2, sp
 800ccd8:	f000 f906 	bl	800cee8 <_fstat_r>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	dbf2      	blt.n	800ccc6 <__swhatbuf_r+0x12>
 800cce0:	9a01      	ldr	r2, [sp, #4]
 800cce2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cce6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccea:	425a      	negs	r2, r3
 800ccec:	415a      	adcs	r2, r3
 800ccee:	602a      	str	r2, [r5, #0]
 800ccf0:	e7ee      	b.n	800ccd0 <__swhatbuf_r+0x1c>
 800ccf2:	2340      	movs	r3, #64	; 0x40
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	6023      	str	r3, [r4, #0]
 800ccf8:	b016      	add	sp, #88	; 0x58
 800ccfa:	bd70      	pop	{r4, r5, r6, pc}

0800ccfc <__smakebuf_r>:
 800ccfc:	898b      	ldrh	r3, [r1, #12]
 800ccfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd00:	079d      	lsls	r5, r3, #30
 800cd02:	4606      	mov	r6, r0
 800cd04:	460c      	mov	r4, r1
 800cd06:	d507      	bpl.n	800cd18 <__smakebuf_r+0x1c>
 800cd08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	6123      	str	r3, [r4, #16]
 800cd10:	2301      	movs	r3, #1
 800cd12:	6163      	str	r3, [r4, #20]
 800cd14:	b002      	add	sp, #8
 800cd16:	bd70      	pop	{r4, r5, r6, pc}
 800cd18:	ab01      	add	r3, sp, #4
 800cd1a:	466a      	mov	r2, sp
 800cd1c:	f7ff ffca 	bl	800ccb4 <__swhatbuf_r>
 800cd20:	9900      	ldr	r1, [sp, #0]
 800cd22:	4605      	mov	r5, r0
 800cd24:	4630      	mov	r0, r6
 800cd26:	f7ff f9eb 	bl	800c100 <_malloc_r>
 800cd2a:	b948      	cbnz	r0, 800cd40 <__smakebuf_r+0x44>
 800cd2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd30:	059a      	lsls	r2, r3, #22
 800cd32:	d4ef      	bmi.n	800cd14 <__smakebuf_r+0x18>
 800cd34:	f023 0303 	bic.w	r3, r3, #3
 800cd38:	f043 0302 	orr.w	r3, r3, #2
 800cd3c:	81a3      	strh	r3, [r4, #12]
 800cd3e:	e7e3      	b.n	800cd08 <__smakebuf_r+0xc>
 800cd40:	4b0d      	ldr	r3, [pc, #52]	; (800cd78 <__smakebuf_r+0x7c>)
 800cd42:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	6020      	str	r0, [r4, #0]
 800cd48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd4c:	81a3      	strh	r3, [r4, #12]
 800cd4e:	9b00      	ldr	r3, [sp, #0]
 800cd50:	6163      	str	r3, [r4, #20]
 800cd52:	9b01      	ldr	r3, [sp, #4]
 800cd54:	6120      	str	r0, [r4, #16]
 800cd56:	b15b      	cbz	r3, 800cd70 <__smakebuf_r+0x74>
 800cd58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f000 f8d5 	bl	800cf0c <_isatty_r>
 800cd62:	b128      	cbz	r0, 800cd70 <__smakebuf_r+0x74>
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	f023 0303 	bic.w	r3, r3, #3
 800cd6a:	f043 0301 	orr.w	r3, r3, #1
 800cd6e:	81a3      	strh	r3, [r4, #12]
 800cd70:	89a0      	ldrh	r0, [r4, #12]
 800cd72:	4305      	orrs	r5, r0
 800cd74:	81a5      	strh	r5, [r4, #12]
 800cd76:	e7cd      	b.n	800cd14 <__smakebuf_r+0x18>
 800cd78:	0800cb0d 	.word	0x0800cb0d

0800cd7c <__malloc_lock>:
 800cd7c:	4801      	ldr	r0, [pc, #4]	; (800cd84 <__malloc_lock+0x8>)
 800cd7e:	f7ff bf97 	b.w	800ccb0 <__retarget_lock_acquire_recursive>
 800cd82:	bf00      	nop
 800cd84:	20000ec0 	.word	0x20000ec0

0800cd88 <__malloc_unlock>:
 800cd88:	4801      	ldr	r0, [pc, #4]	; (800cd90 <__malloc_unlock+0x8>)
 800cd8a:	f7ff bf92 	b.w	800ccb2 <__retarget_lock_release_recursive>
 800cd8e:	bf00      	nop
 800cd90:	20000ec0 	.word	0x20000ec0

0800cd94 <_raise_r>:
 800cd94:	291f      	cmp	r1, #31
 800cd96:	b538      	push	{r3, r4, r5, lr}
 800cd98:	4604      	mov	r4, r0
 800cd9a:	460d      	mov	r5, r1
 800cd9c:	d904      	bls.n	800cda8 <_raise_r+0x14>
 800cd9e:	2316      	movs	r3, #22
 800cda0:	6003      	str	r3, [r0, #0]
 800cda2:	f04f 30ff 	mov.w	r0, #4294967295
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cdaa:	b112      	cbz	r2, 800cdb2 <_raise_r+0x1e>
 800cdac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdb0:	b94b      	cbnz	r3, 800cdc6 <_raise_r+0x32>
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 f830 	bl	800ce18 <_getpid_r>
 800cdb8:	462a      	mov	r2, r5
 800cdba:	4601      	mov	r1, r0
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdc2:	f000 b817 	b.w	800cdf4 <_kill_r>
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d00a      	beq.n	800cde0 <_raise_r+0x4c>
 800cdca:	1c59      	adds	r1, r3, #1
 800cdcc:	d103      	bne.n	800cdd6 <_raise_r+0x42>
 800cdce:	2316      	movs	r3, #22
 800cdd0:	6003      	str	r3, [r0, #0]
 800cdd2:	2001      	movs	r0, #1
 800cdd4:	e7e7      	b.n	800cda6 <_raise_r+0x12>
 800cdd6:	2400      	movs	r4, #0
 800cdd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cddc:	4628      	mov	r0, r5
 800cdde:	4798      	blx	r3
 800cde0:	2000      	movs	r0, #0
 800cde2:	e7e0      	b.n	800cda6 <_raise_r+0x12>

0800cde4 <raise>:
 800cde4:	4b02      	ldr	r3, [pc, #8]	; (800cdf0 <raise+0xc>)
 800cde6:	4601      	mov	r1, r0
 800cde8:	6818      	ldr	r0, [r3, #0]
 800cdea:	f7ff bfd3 	b.w	800cd94 <_raise_r>
 800cdee:	bf00      	nop
 800cdf0:	20000048 	.word	0x20000048

0800cdf4 <_kill_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4d07      	ldr	r5, [pc, #28]	; (800ce14 <_kill_r+0x20>)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	4608      	mov	r0, r1
 800cdfe:	4611      	mov	r1, r2
 800ce00:	602b      	str	r3, [r5, #0]
 800ce02:	f7f8 fb09 	bl	8005418 <_kill>
 800ce06:	1c43      	adds	r3, r0, #1
 800ce08:	d102      	bne.n	800ce10 <_kill_r+0x1c>
 800ce0a:	682b      	ldr	r3, [r5, #0]
 800ce0c:	b103      	cbz	r3, 800ce10 <_kill_r+0x1c>
 800ce0e:	6023      	str	r3, [r4, #0]
 800ce10:	bd38      	pop	{r3, r4, r5, pc}
 800ce12:	bf00      	nop
 800ce14:	20000ec8 	.word	0x20000ec8

0800ce18 <_getpid_r>:
 800ce18:	f7f8 baf6 	b.w	8005408 <_getpid>

0800ce1c <__sread>:
 800ce1c:	b510      	push	{r4, lr}
 800ce1e:	460c      	mov	r4, r1
 800ce20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce24:	f000 f894 	bl	800cf50 <_read_r>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	bfab      	itete	ge
 800ce2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ce30:	181b      	addge	r3, r3, r0
 800ce32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce36:	bfac      	ite	ge
 800ce38:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce3a:	81a3      	strhlt	r3, [r4, #12]
 800ce3c:	bd10      	pop	{r4, pc}

0800ce3e <__swrite>:
 800ce3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce42:	461f      	mov	r7, r3
 800ce44:	898b      	ldrh	r3, [r1, #12]
 800ce46:	05db      	lsls	r3, r3, #23
 800ce48:	4605      	mov	r5, r0
 800ce4a:	460c      	mov	r4, r1
 800ce4c:	4616      	mov	r6, r2
 800ce4e:	d505      	bpl.n	800ce5c <__swrite+0x1e>
 800ce50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce54:	2302      	movs	r3, #2
 800ce56:	2200      	movs	r2, #0
 800ce58:	f000 f868 	bl	800cf2c <_lseek_r>
 800ce5c:	89a3      	ldrh	r3, [r4, #12]
 800ce5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce66:	81a3      	strh	r3, [r4, #12]
 800ce68:	4632      	mov	r2, r6
 800ce6a:	463b      	mov	r3, r7
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce72:	f000 b817 	b.w	800cea4 <_write_r>

0800ce76 <__sseek>:
 800ce76:	b510      	push	{r4, lr}
 800ce78:	460c      	mov	r4, r1
 800ce7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce7e:	f000 f855 	bl	800cf2c <_lseek_r>
 800ce82:	1c43      	adds	r3, r0, #1
 800ce84:	89a3      	ldrh	r3, [r4, #12]
 800ce86:	bf15      	itete	ne
 800ce88:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce92:	81a3      	strheq	r3, [r4, #12]
 800ce94:	bf18      	it	ne
 800ce96:	81a3      	strhne	r3, [r4, #12]
 800ce98:	bd10      	pop	{r4, pc}

0800ce9a <__sclose>:
 800ce9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce9e:	f000 b813 	b.w	800cec8 <_close_r>
	...

0800cea4 <_write_r>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	4d07      	ldr	r5, [pc, #28]	; (800cec4 <_write_r+0x20>)
 800cea8:	4604      	mov	r4, r0
 800ceaa:	4608      	mov	r0, r1
 800ceac:	4611      	mov	r1, r2
 800ceae:	2200      	movs	r2, #0
 800ceb0:	602a      	str	r2, [r5, #0]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	f7f8 fae7 	bl	8005486 <_write>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d102      	bne.n	800cec2 <_write_r+0x1e>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b103      	cbz	r3, 800cec2 <_write_r+0x1e>
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	20000ec8 	.word	0x20000ec8

0800cec8 <_close_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	4d06      	ldr	r5, [pc, #24]	; (800cee4 <_close_r+0x1c>)
 800cecc:	2300      	movs	r3, #0
 800cece:	4604      	mov	r4, r0
 800ced0:	4608      	mov	r0, r1
 800ced2:	602b      	str	r3, [r5, #0]
 800ced4:	f7f8 faf3 	bl	80054be <_close>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d102      	bne.n	800cee2 <_close_r+0x1a>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	b103      	cbz	r3, 800cee2 <_close_r+0x1a>
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	bd38      	pop	{r3, r4, r5, pc}
 800cee4:	20000ec8 	.word	0x20000ec8

0800cee8 <_fstat_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4d07      	ldr	r5, [pc, #28]	; (800cf08 <_fstat_r+0x20>)
 800ceec:	2300      	movs	r3, #0
 800ceee:	4604      	mov	r4, r0
 800cef0:	4608      	mov	r0, r1
 800cef2:	4611      	mov	r1, r2
 800cef4:	602b      	str	r3, [r5, #0]
 800cef6:	f7f8 faee 	bl	80054d6 <_fstat>
 800cefa:	1c43      	adds	r3, r0, #1
 800cefc:	d102      	bne.n	800cf04 <_fstat_r+0x1c>
 800cefe:	682b      	ldr	r3, [r5, #0]
 800cf00:	b103      	cbz	r3, 800cf04 <_fstat_r+0x1c>
 800cf02:	6023      	str	r3, [r4, #0]
 800cf04:	bd38      	pop	{r3, r4, r5, pc}
 800cf06:	bf00      	nop
 800cf08:	20000ec8 	.word	0x20000ec8

0800cf0c <_isatty_r>:
 800cf0c:	b538      	push	{r3, r4, r5, lr}
 800cf0e:	4d06      	ldr	r5, [pc, #24]	; (800cf28 <_isatty_r+0x1c>)
 800cf10:	2300      	movs	r3, #0
 800cf12:	4604      	mov	r4, r0
 800cf14:	4608      	mov	r0, r1
 800cf16:	602b      	str	r3, [r5, #0]
 800cf18:	f7f8 faed 	bl	80054f6 <_isatty>
 800cf1c:	1c43      	adds	r3, r0, #1
 800cf1e:	d102      	bne.n	800cf26 <_isatty_r+0x1a>
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	b103      	cbz	r3, 800cf26 <_isatty_r+0x1a>
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	20000ec8 	.word	0x20000ec8

0800cf2c <_lseek_r>:
 800cf2c:	b538      	push	{r3, r4, r5, lr}
 800cf2e:	4d07      	ldr	r5, [pc, #28]	; (800cf4c <_lseek_r+0x20>)
 800cf30:	4604      	mov	r4, r0
 800cf32:	4608      	mov	r0, r1
 800cf34:	4611      	mov	r1, r2
 800cf36:	2200      	movs	r2, #0
 800cf38:	602a      	str	r2, [r5, #0]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	f7f8 fae6 	bl	800550c <_lseek>
 800cf40:	1c43      	adds	r3, r0, #1
 800cf42:	d102      	bne.n	800cf4a <_lseek_r+0x1e>
 800cf44:	682b      	ldr	r3, [r5, #0]
 800cf46:	b103      	cbz	r3, 800cf4a <_lseek_r+0x1e>
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	20000ec8 	.word	0x20000ec8

0800cf50 <_read_r>:
 800cf50:	b538      	push	{r3, r4, r5, lr}
 800cf52:	4d07      	ldr	r5, [pc, #28]	; (800cf70 <_read_r+0x20>)
 800cf54:	4604      	mov	r4, r0
 800cf56:	4608      	mov	r0, r1
 800cf58:	4611      	mov	r1, r2
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	602a      	str	r2, [r5, #0]
 800cf5e:	461a      	mov	r2, r3
 800cf60:	f7f8 fa74 	bl	800544c <_read>
 800cf64:	1c43      	adds	r3, r0, #1
 800cf66:	d102      	bne.n	800cf6e <_read_r+0x1e>
 800cf68:	682b      	ldr	r3, [r5, #0]
 800cf6a:	b103      	cbz	r3, 800cf6e <_read_r+0x1e>
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	bd38      	pop	{r3, r4, r5, pc}
 800cf70:	20000ec8 	.word	0x20000ec8

0800cf74 <_init>:
 800cf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf76:	bf00      	nop
 800cf78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf7a:	bc08      	pop	{r3}
 800cf7c:	469e      	mov	lr, r3
 800cf7e:	4770      	bx	lr

0800cf80 <_fini>:
 800cf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf82:	bf00      	nop
 800cf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf86:	bc08      	pop	{r3}
 800cf88:	469e      	mov	lr, r3
 800cf8a:	4770      	bx	lr
