
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800c350  0800c350  0001c350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7a0  0800c7a0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7a0  0800c7a0  0001c7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7a8  0800c7a8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7a8  0800c7a8  0001c7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7ac  0800c7ac  0001c7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800c7b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00000784  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000828  20000828  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181ee  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032b5  00000000  00000000  000382c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  0003b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001150  00000000  00000000  0003c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244ad  00000000  00000000  0003d948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017059  00000000  00000000  00061df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc5f5  00000000  00000000  00078e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00155443  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051ec  00000000  00000000  00155498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a4 	.word	0x200000a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c338 	.word	0x0800c338

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a8 	.word	0x200000a8
 80001c4:	0800c338 	.word	0x0800c338

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96e 	b.w	8000e58 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8083 	bne.w	8000caa <__udivmoddi4+0x116>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d947      	bls.n	8000c3a <__udivmoddi4+0xa6>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b142      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	f1c2 0020 	rsb	r0, r2, #32
 8000bb4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	4097      	lsls	r7, r2
 8000bbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bcc:	fa1f fe87 	uxth.w	lr, r7
 8000bd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000be6:	f080 8119 	bcs.w	8000e1c <__udivmoddi4+0x288>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8116 	bls.w	8000e1c <__udivmoddi4+0x288>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	443b      	add	r3, r7
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8105 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f240 8102 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	2600      	movs	r6, #0
 8000c2a:	b11d      	cbz	r5, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c5 4300 	strd	r4, r3, [r5]
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	b902      	cbnz	r2, 8000c3e <__udivmoddi4+0xaa>
 8000c3c:	deff      	udf	#255	; 0xff
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d150      	bne.n	8000ce8 <__udivmoddi4+0x154>
 8000c46:	1bcb      	subs	r3, r1, r7
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	2601      	movs	r6, #1
 8000c52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c56:	0c21      	lsrs	r1, r4, #16
 8000c58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c60:	fb08 f30c 	mul.w	r3, r8, ip
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0xe2>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	f200 80e9 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000c76:	4684      	mov	ip, r0
 8000c78:	1ac9      	subs	r1, r1, r3
 8000c7a:	b2a3      	uxth	r3, r4
 8000c7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c88:	fb08 f800 	mul.w	r8, r8, r0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x10c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x10a>
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	f200 80d9 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	eba4 0408 	sub.w	r4, r4, r8
 8000ca4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca8:	e7bf      	b.n	8000c2a <__udivmoddi4+0x96>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0x12e>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80b1 	beq.w	8000e16 <__udivmoddi4+0x282>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x1cc>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0x140>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80b8 	bhi.w	8000e44 <__udivmoddi4+0x2b0>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	468c      	mov	ip, r1
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0a8      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000ce2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfa:	40d9      	lsrs	r1, r3
 8000cfc:	4330      	orrs	r0, r6
 8000cfe:	0c03      	lsrs	r3, r0, #16
 8000d00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d10:	fb06 f108 	mul.w	r1, r6, r8
 8000d14:	4299      	cmp	r1, r3
 8000d16:	fa04 f402 	lsl.w	r4, r4, r2
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x19c>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d22:	f080 808d 	bcs.w	8000e40 <__udivmoddi4+0x2ac>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 808a 	bls.w	8000e40 <__udivmoddi4+0x2ac>
 8000d2c:	3e02      	subs	r6, #2
 8000d2e:	443b      	add	r3, r7
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b281      	uxth	r1, r0
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d40:	fb00 f308 	mul.w	r3, r0, r8
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x1c4>
 8000d48:	1879      	adds	r1, r7, r1
 8000d4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d4e:	d273      	bcs.n	8000e38 <__udivmoddi4+0x2a4>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d971      	bls.n	8000e38 <__udivmoddi4+0x2a4>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4439      	add	r1, r7
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d5e:	e778      	b.n	8000c52 <__udivmoddi4+0xbe>
 8000d60:	f1c6 0c20 	rsb	ip, r6, #32
 8000d64:	fa03 f406 	lsl.w	r4, r3, r6
 8000d68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d6c:	431c      	orrs	r4, r3
 8000d6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	0c3b      	lsrs	r3, r7, #16
 8000d82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d86:	fa1f f884 	uxth.w	r8, r4
 8000d8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d92:	fb09 fa08 	mul.w	sl, r9, r8
 8000d96:	458a      	cmp	sl, r1
 8000d98:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x220>
 8000da2:	1861      	adds	r1, r4, r1
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	d248      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000daa:	458a      	cmp	sl, r1
 8000dac:	d946      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000dae:	f1a9 0902 	sub.w	r9, r9, #2
 8000db2:	4421      	add	r1, r4
 8000db4:	eba1 010a 	sub.w	r1, r1, sl
 8000db8:	b2bf      	uxth	r7, r7
 8000dba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dc6:	fb00 f808 	mul.w	r8, r0, r8
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x24a>
 8000dce:	19e7      	adds	r7, r4, r7
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d22e      	bcs.n	8000e34 <__udivmoddi4+0x2a0>
 8000dd6:	45b8      	cmp	r8, r7
 8000dd8:	d92c      	bls.n	8000e34 <__udivmoddi4+0x2a0>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4427      	add	r7, r4
 8000dde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de2:	eba7 0708 	sub.w	r7, r7, r8
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	454f      	cmp	r7, r9
 8000dec:	46c6      	mov	lr, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	d31a      	bcc.n	8000e28 <__udivmoddi4+0x294>
 8000df2:	d017      	beq.n	8000e24 <__udivmoddi4+0x290>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x27a>
 8000df6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e02:	40f2      	lsrs	r2, r6
 8000e04:	ea4c 0202 	orr.w	r2, ip, r2
 8000e08:	40f7      	lsrs	r7, r6
 8000e0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e70b      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e9      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6fd      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e24:	4543      	cmp	r3, r8
 8000e26:	d2e5      	bcs.n	8000df4 <__udivmoddi4+0x260>
 8000e28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7df      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e7d2      	b.n	8000dde <__udivmoddi4+0x24a>
 8000e38:	4660      	mov	r0, ip
 8000e3a:	e78d      	b.n	8000d58 <__udivmoddi4+0x1c4>
 8000e3c:	4681      	mov	r9, r0
 8000e3e:	e7b9      	b.n	8000db4 <__udivmoddi4+0x220>
 8000e40:	4666      	mov	r6, ip
 8000e42:	e775      	b.n	8000d30 <__udivmoddi4+0x19c>
 8000e44:	4630      	mov	r0, r6
 8000e46:	e74a      	b.n	8000cde <__udivmoddi4+0x14a>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	4439      	add	r1, r7
 8000e4e:	e713      	b.n	8000c78 <__udivmoddi4+0xe4>
 8000e50:	3802      	subs	r0, #2
 8000e52:	443c      	add	r4, r7
 8000e54:	e724      	b.n	8000ca0 <__udivmoddi4+0x10c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b08b      	sub	sp, #44	; 0x2c
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <FusionAhrsInitialise+0x74>)
 8000e7a:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <FusionAhrsInitialise+0x78>)
 8000eb8:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000ec2:	bf00      	nop
 8000ec4:	372c      	adds	r7, #44	; 0x2c
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	7f7fffff 	.word	0x7f7fffff
 8000ed4:	41200000 	.word	0x41200000

08000ed8 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8000ed8:	b490      	push	{r4, r7}
 8000eda:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee4:	6018      	str	r0, [r3, #0]
 8000ee6:	f107 0120 	add.w	r1, r7, #32
 8000eea:	eeb0 5a61 	vmov.f32	s10, s3
 8000eee:	eef0 5a42 	vmov.f32	s11, s4
 8000ef2:	eeb0 6a62 	vmov.f32	s12, s5
 8000ef6:	f107 0214 	add.w	r2, r7, #20
 8000efa:	eef0 6a43 	vmov.f32	s13, s6
 8000efe:	eeb0 7a63 	vmov.f32	s14, s7
 8000f02:	eef0 7a44 	vmov.f32	s15, s8
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	1d38      	adds	r0, r7, #4
 8000f0c:	edc0 4a00 	vstr	s9, [r0]
 8000f10:	ed81 0a00 	vstr	s0, [r1]
 8000f14:	edc1 0a01 	vstr	s1, [r1, #4]
 8000f18:	ed81 1a02 	vstr	s2, [r1, #8]
 8000f1c:	ed82 5a00 	vstr	s10, [r2]
 8000f20:	edc2 5a01 	vstr	s11, [r2, #4]
 8000f24:	ed82 6a02 	vstr	s12, [r2, #8]
 8000f28:	edc3 6a00 	vstr	s13, [r3]
 8000f2c:	ed83 7a01 	vstr	s14, [r3, #4]
 8000f30:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8000f34:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	d112      	bne.n	8000f8a <FusionAhrsUpdate+0xb2>
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f74:	d109      	bne.n	8000f8a <FusionAhrsUpdate+0xb2>
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	f000 8437 	beq.w	80017f8 <FusionAhrsUpdate+0x920>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8000f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	edd3 6a03 	vldr	s13, [r3, #12]
 8000fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000fbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000fc2:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8000fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000ffa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000ffe:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8001002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	ed93 7a03 	vldr	s14, [r3, #12]
 800100c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	edd3 7a03 	vldr	s15, [r3, #12]
 8001016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800101e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	edd3 6a06 	vldr	s13, [r3, #24]
 800102c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	edd3 7a06 	vldr	s15, [r3, #24]
 8001036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800103a:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 800103e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001042:	edc3 7a02 	vstr	s15, [r3, #8]
 8001046:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800104a:	f107 0214 	add.w	r2, r7, #20
 800104e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001050:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001054:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001058:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800105c:	ca07      	ldmia	r2, {r0, r1, r2}
 800105e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001062:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001066:	ed93 7a00 	vldr	s14, [r3]
 800106a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001076:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800107a:	edd3 6a01 	vldr	s13, [r3, #4]
 800107e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001082:	edd3 7a01 	vldr	s15, [r3, #4]
 8001086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800108e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001092:	edd3 6a02 	vldr	s13, [r3, #8]
 8001096:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800109a:	edd3 7a02 	vldr	s15, [r3, #8]
 800109e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a6:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80010aa:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 80010ae:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 80010b2:	edd3 7a00 	vldr	s15, [r3]
 80010b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010be:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80010c2:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 80010c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010ca:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80010d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010dc:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80010de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	105a      	asrs	r2, r3, #1
 80010e6:	4b9a      	ldr	r3, [pc, #616]	; (8001350 <FusionAhrsUpdate+0x478>)
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80010ee:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80010f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010fa:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80010fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001100:	ed93 7a00 	vldr	s14, [r3]
 8001104:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001110:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001120:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001124:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001130:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001134:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001138:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800113c:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800113e:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001148:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800114c:	ca07      	ldmia	r2, {r0, r1, r2}
 800114e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001152:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800115c:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 800115e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001162:	ed93 7a00 	vldr	s14, [r3]
 8001166:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001172:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001176:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800117a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800117e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001182:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001192:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001196:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800119a:	ed93 7a02 	vldr	s14, [r3, #8]
 800119e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011ae:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80011b2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80011b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80011ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80011bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011c0:	f507 724a 	add.w	r2, r7, #808	; 0x328
 80011c4:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80011c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80011ce:	bf00      	nop
 80011d0:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80011d4:	461c      	mov	r4, r3
 80011d6:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80011da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011e6:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80011ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011f4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80011f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80011fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001202:	ed93 7a01 	vldr	s14, [r3, #4]
 8001206:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800120a:	edd3 7a02 	vldr	s15, [r3, #8]
 800120e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001212:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001216:	edd3 6a02 	vldr	s13, [r3, #8]
 800121a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800121e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800122e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001232:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001236:	ed93 7a02 	vldr	s14, [r3, #8]
 800123a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001246:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800124a:	edd3 6a00 	vldr	s13, [r3]
 800124e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001252:	edd3 7a02 	vldr	s15, [r3, #8]
 8001256:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800125a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800125e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001262:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800126a:	ed93 7a00 	vldr	s14, [r3]
 800126e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001272:	edd3 7a01 	vldr	s15, [r3, #4]
 8001276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800127e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001282:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001292:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001296:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800129a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800129e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80012a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012a8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80012ac:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 80012b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80012b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ba:	f107 0208 	add.w	r2, r7, #8
 80012be:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80012c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c8:	ed93 7a00 	vldr	s14, [r3]
 80012cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80012e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80012e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80012f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 8001308:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800130c:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 8001310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	edd3 7a01 	vldr	s15, [r3, #4]
 800131a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800131e:	ed93 7a00 	vldr	s14, [r3]
 8001322:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	f100 8266 	bmi.w	80017fa <FusionAhrsUpdate+0x922>
 800132e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	edd3 7a02 	vldr	s15, [r3, #8]
 8001338:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800133c:	ed93 7a00 	vldr	s14, [r3]
 8001340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	f300 8257 	bgt.w	80017fa <FusionAhrsUpdate+0x922>
 800134c:	e002      	b.n	8001354 <FusionAhrsUpdate+0x47c>
 800134e:	bf00      	nop
 8001350:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 8001354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	ed93 7a04 	vldr	s14, [r3, #16]
 800135e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	edd3 7a05 	vldr	s15, [r3, #20]
 8001368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	edd3 6a03 	vldr	s13, [r3, #12]
 8001376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001388:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800138c:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	ed93 7a03 	vldr	s14, [r3, #12]
 800139a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80013a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	edd3 6a05 	vldr	s13, [r3, #20]
 80013ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80013c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80013cc:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80013d0:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 80013d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	ed93 7a05 	vldr	s14, [r3, #20]
 80013de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	edd3 6a03 	vldr	s13, [r3, #12]
 80013f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001408:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800140c:	edc3 7a02 	vstr	s15, [r3, #8]
 8001410:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001414:	f107 0214 	add.w	r2, r7, #20
 8001418:	ca07      	ldmia	r2, {r0, r1, r2}
 800141a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800141e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001422:	f107 0208 	add.w	r2, r7, #8
 8001426:	ca07      	ldmia	r2, {r0, r1, r2}
 8001428:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 800142c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001430:	ed93 7a01 	vldr	s14, [r3, #4]
 8001434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001438:	edd3 7a02 	vldr	s15, [r3, #8]
 800143c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001440:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001444:	edd3 6a02 	vldr	s13, [r3, #8]
 8001448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800144c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001458:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800145c:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001460:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001464:	ed93 7a02 	vldr	s14, [r3, #8]
 8001468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001474:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001478:	edd3 6a00 	vldr	s13, [r3]
 800147c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001480:	edd3 7a02 	vldr	s15, [r3, #8]
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001490:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001494:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001498:	ed93 7a00 	vldr	s14, [r3]
 800149c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80014a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80014ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80014b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014c4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80014c8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80014cc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014d6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80014da:	461c      	mov	r4, r3
 80014dc:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014e8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80014ec:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80014f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014fa:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80014fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001500:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001504:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001508:	ed93 7a00 	vldr	s14, [r3]
 800150c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001518:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800151c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001520:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001524:	edd3 7a01 	vldr	s15, [r3, #4]
 8001528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001530:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001534:	edd3 6a02 	vldr	s13, [r3, #8]
 8001538:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800153c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800154c:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001550:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800155c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001560:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001564:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001568:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800156c:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001574:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800157e:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001580:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	105a      	asrs	r2, r3, #1
 8001588:	4b99      	ldr	r3, [pc, #612]	; (80017f0 <FusionAhrsUpdate+0x918>)
 800158a:	1a9b      	subs	r3, r3, r2
 800158c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001590:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001592:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800159c:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 800159e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015a2:	ed93 7a00 	vldr	s14, [r3]
 80015a6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015be:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80015c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015c6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015d6:	edc3 7a00 	vstr	s15, [r3]
    return y;
 80015da:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015de:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80015e0:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015ea:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80015ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80015f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015f4:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80015fe:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001600:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001604:	ed93 7a00 	vldr	s14, [r3]
 8001608:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001618:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800161c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001620:	ed93 7a01 	vldr	s14, [r3, #4]
 8001624:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001634:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001638:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800163c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001640:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001650:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001654:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001658:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800165c:	ca07      	ldmia	r2, {r0, r1, r2}
 800165e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001662:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001666:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800166a:	ca07      	ldmia	r2, {r0, r1, r2}
 800166c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001670:	bf00      	nop
 8001672:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8001676:	461c      	mov	r4, r3
 8001678:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800167c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001684:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001688:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 800168c:	ca07      	ldmia	r2, {r0, r1, r2}
 800168e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001692:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001696:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800169a:	ca07      	ldmia	r2, {r0, r1, r2}
 800169c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80016a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80016a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80016b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80016bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80016c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016d0:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 80016d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80016dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016ec:	edd3 6a00 	vldr	s13, [r3]
 80016f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001700:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001704:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001708:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001714:	edd3 7a01 	vldr	s15, [r3, #4]
 8001718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001720:	edd3 6a01 	vldr	s13, [r3, #4]
 8001724:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001734:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001738:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800173c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001740:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001744:	ca07      	ldmia	r2, {r0, r1, r2}
 8001746:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800174a:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800174e:	461c      	mov	r4, r3
 8001750:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001754:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800175c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001760:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8001764:	ca07      	ldmia	r2, {r0, r1, r2}
 8001766:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800176a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800176e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8001772:	ca07      	ldmia	r2, {r0, r1, r2}
 8001774:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001778:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800177c:	ed93 7a00 	vldr	s14, [r3]
 8001780:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001790:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001794:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001798:	ed93 7a01 	vldr	s14, [r3, #4]
 800179c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017ac:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80017b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80017b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017c8:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80017cc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80017d0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80017d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80017d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017da:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80017de:	461c      	mov	r4, r3
 80017e0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80017e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017ec:	e005      	b.n	80017fa <FusionAhrsUpdate+0x922>
 80017ee:	bf00      	nop
 80017f0:	5f3759df 	.word	0x5f3759df
 80017f4:	3c8efa35 	.word	0x3c8efa35
            break;
 80017f8:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 80017fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	d105      	bne.n	800181a <FusionAhrsUpdate+0x942>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 800180e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 800181a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8001826:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 8001828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	dd24      	ble.n	8001890 <FusionAhrsUpdate+0x9b8>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001850:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800185e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800186c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001870:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 8001882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800188e:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 8001890:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 80017f4 <FusionAhrsUpdate+0x91c>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 8001894:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80018a0:	f107 0220 	add.w	r2, r7, #32
 80018a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80018a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018aa:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 80018ae:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 80018ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018be:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80018c2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80018c6:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80018ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80018ce:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80018da:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80018de:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80018e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80018e6:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 80018ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ee:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80018f2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80018f6:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 80018fa:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80018fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001900:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001904:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001908:	461c      	mov	r4, r3
 800190a:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800190e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001916:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800191a:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800191e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001920:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001924:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 800192e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001932:	ed93 7a00 	vldr	s14, [r3]
 8001936:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001942:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001946:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800194a:	ed93 7a01 	vldr	s14, [r3, #4]
 800194e:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001956:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800195a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800195e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001962:	ed93 7a02 	vldr	s14, [r3, #8]
 8001966:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 800196a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001972:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001976:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800197a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800197e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001980:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001984:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001988:	461c      	mov	r4, r3
 800198a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800198e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001996:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800199a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800199e:	ca07      	ldmia	r2, {r0, r1, r2}
 80019a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019a4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80019a8:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 80019ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 80019b2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80019b6:	ed93 7a00 	vldr	s14, [r3]
 80019ba:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80019ca:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80019ce:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80019d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80019d6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80019da:	edd3 7a01 	vldr	s15, [r3, #4]
 80019de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80019e6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80019ea:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80019ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80019f2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80019f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80019fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fe:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001a02:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001a06:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8001a0a:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001a0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a14:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001a18:	461c      	mov	r4, r3
 8001a1a:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001a1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a26:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a2a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8001a2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 8001a3c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a40:	ed93 7a00 	vldr	s14, [r3]
 8001a44:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a50:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001a54:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a58:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a5c:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a64:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a68:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001a6c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a70:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a74:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001a80:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001a84:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001a88:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001a8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a92:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001a96:	461c      	mov	r4, r3
 8001a98:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001a9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001aa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001aa4:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001aa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4614      	mov	r4, r2
 8001ab0:	330c      	adds	r3, #12
 8001ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ab8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001abc:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8001ac0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ac2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001ac6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001aca:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ace:	eeb1 7a67 	vneg.f32	s14, s15
 8001ad2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ade:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001ae2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ae6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001aea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001af6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001afa:	edd3 6a03 	vldr	s13, [r3, #12]
 8001afe:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b02:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001b12:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 8001b16:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b1a:	ed93 7a00 	vldr	s14, [r3]
 8001b1e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b2e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b32:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b42:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b46:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b4a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001b5e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8001b62:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b66:	ed93 7a00 	vldr	s14, [r3]
 8001b6a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b76:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b7a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b7e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b82:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b8e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b92:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b96:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001baa:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 8001bae:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bb2:	ed93 7a00 	vldr	s14, [r3]
 8001bb6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001bba:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bc6:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bca:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001bce:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bda:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bde:	edd3 6a02 	vldr	s13, [r3, #8]
 8001be2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001bf6:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001bfa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001bfe:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8001c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c08:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001c0c:	461c      	mov	r4, r3
 8001c0e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c18:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8001c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4614      	mov	r4, r2
 8001c24:	330c      	adds	r3, #12
 8001c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c2c:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8001c30:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001c34:	4614      	mov	r4, r2
 8001c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8001c3c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001c40:	ed93 7a00 	vldr	s14, [r3]
 8001c44:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c50:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c54:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001c58:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001c5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c60:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001c64:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c70:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001c74:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001c78:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c7c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001c80:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c8c:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001c90:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001c94:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c98:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001c9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001ca8:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001cac:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001cb0:	f507 7466 	add.w	r4, r7, #920	; 0x398
 8001cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cba:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001cbe:	461c      	mov	r4, r3
 8001cc0:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001cc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 8001cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8001cd4:	f103 040c 	add.w	r4, r3, #12
 8001cd8:	4613      	mov	r3, r2
 8001cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ce0:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4614      	mov	r4, r2
 8001cec:	330c      	adds	r3, #12
 8001cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001cf4:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001cf8:	ed93 7a00 	vldr	s14, [r3]
 8001cfc:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d08:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d10:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d14:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d20:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d24:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d28:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d38:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d3c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d40:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d44:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d50:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 8001d54:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8001d58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d60:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 8001d64:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d68:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8001d6c:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001d6e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001d78:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001d7a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	105a      	asrs	r2, r3, #1
 8001d82:	4b98      	ldr	r3, [pc, #608]	; (8001fe4 <FusionAhrsUpdate+0x110c>)
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8001d8a:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001d8c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d96:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001d98:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001d9c:	ed93 7a00 	vldr	s14, [r3]
 8001da0:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8001da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001db8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dbc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dcc:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001dd0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dd4:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001dd6:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8001dda:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001dde:	ed93 7a00 	vldr	s14, [r3]
 8001de2:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dea:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001dee:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8001df2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001df6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dfa:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e02:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e06:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8001e0a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e12:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e1e:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8001e22:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e26:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e2a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e32:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e36:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 8001e3a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e3e:	f507 7462 	add.w	r4, r7, #904	; 0x388
 8001e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e48:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001e4c:	461c      	mov	r4, r3
 8001e4e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 8001e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8001e62:	f103 040c 	add.w	r4, r3, #12
 8001e66:	4613      	mov	r3, r2
 8001e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 8001e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ea2:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001ea6:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001eaa:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8001eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee2:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001ee6:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001eea:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 8001eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f0a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	edd3 6a06 	vldr	s13, [r3, #24]
 8001f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001f2e:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001f32:	edc3 7a02 	vstr	s15, [r3, #8]
 8001f36:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f3a:	f107 0214 	add.w	r2, r7, #20
 8001f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f44:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001f48:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8001f4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8001f52:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f56:	ed93 7a00 	vldr	s14, [r3]
 8001f5a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001f5e:	edd3 7a00 	vldr	s15, [r3]
 8001f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f66:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001f6a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8001f6e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f72:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f76:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001f7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f82:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001f86:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8001f8a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f8e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f92:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001f96:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001fa2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001fa6:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001faa:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001fae:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fb4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001fb8:	461c      	mov	r4, r3
 8001fba:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001fbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 8001fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001fd0:	331c      	adds	r3, #28
 8001fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 8001fd8:	bf00      	nop
 8001fda:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc90      	pop	{r4, r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	5f3759df 	.word	0x5f3759df

08001fe8 <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	; 0x30
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	61f8      	str	r0, [r7, #28]
 8001ff0:	eeb0 5a40 	vmov.f32	s10, s0
 8001ff4:	eef0 5a60 	vmov.f32	s11, s1
 8001ff8:	eeb0 6a41 	vmov.f32	s12, s2
 8001ffc:	eef0 6a61 	vmov.f32	s13, s3
 8002000:	eeb0 7a42 	vmov.f32	s14, s4
 8002004:	eef0 7a62 	vmov.f32	s15, s5
 8002008:	ed87 3a00 	vstr	s6, [r7]
 800200c:	ed87 5a04 	vstr	s10, [r7, #16]
 8002010:	edc7 5a05 	vstr	s11, [r7, #20]
 8002014:	ed87 6a06 	vstr	s12, [r7, #24]
 8002018:	edc7 6a01 	vstr	s13, [r7, #4]
 800201c:	ed87 7a02 	vstr	s14, [r7, #8]
 8002020:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002036:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 800203a:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 800203e:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8002042:	ed97 5a01 	vldr	s10, [r7, #4]
 8002046:	edd7 5a02 	vldr	s11, [r7, #8]
 800204a:	ed97 6a03 	vldr	s12, [r7, #12]
 800204e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002052:	ed97 7a05 	vldr	s14, [r7, #20]
 8002056:	edd7 7a06 	vldr	s15, [r7, #24]
 800205a:	edd7 4a00 	vldr	s9, [r7]
 800205e:	eef0 1a45 	vmov.f32	s3, s10
 8002062:	eeb0 2a65 	vmov.f32	s4, s11
 8002066:	eef0 2a46 	vmov.f32	s5, s12
 800206a:	eeb0 0a66 	vmov.f32	s0, s13
 800206e:	eef0 0a47 	vmov.f32	s1, s14
 8002072:	eeb0 1a67 	vmov.f32	s2, s15
 8002076:	69f8      	ldr	r0, [r7, #28]
 8002078:	f7fe ff2e 	bl	8000ed8 <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 800207c:	69f8      	ldr	r0, [r7, #28]
 800207e:	f000 f862 	bl	8002146 <FusionAhrsIsInitialising>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d004      	beq.n	8002092 <FusionAhrsUpdateWithoutMagnetometer+0xaa>
        fusionAhrs->zeroYawPending = true;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 8002090:	e00d      	b.n	80020ae <FusionAhrsUpdateWithoutMagnetometer+0xc6>
        if (fusionAhrs->zeroYawPending == true) {
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <FusionAhrsUpdateWithoutMagnetometer+0xc6>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 800209c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80020b8 <FusionAhrsUpdateWithoutMagnetometer+0xd0>
 80020a0:	69f8      	ldr	r0, [r7, #28]
 80020a2:	f000 f869 	bl	8002178 <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80020ae:	bf00      	nop
 80020b0:	3730      	adds	r7, #48	; 0x30
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	00000000 	.word	0x00000000

080020bc <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 80020bc:	b490      	push	{r4, r7}
 80020be:	b096      	sub	sp, #88	; 0x58
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6178      	str	r0, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80020ca:	330c      	adds	r3, #12
 80020cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d4:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 80020d6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020da:	eef1 7a67 	vneg.f32	s15, s15
 80020de:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 80020e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020e6:	eef1 7a67 	vneg.f32	s15, s15
 80020ea:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 80020ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020f2:	eef1 7a67 	vneg.f32	s15, s15
 80020f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 80020fa:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80020fe:	f107 0318 	add.w	r3, r7, #24
 8002102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002108:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800210c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002110:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 8002116:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002118:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800211a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800211c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211e:	ee06 0a10 	vmov	s12, r0
 8002122:	ee06 1a90 	vmov	s13, r1
 8002126:	ee07 2a10 	vmov	s14, r2
 800212a:	ee07 3a90 	vmov	s15, r3
}
 800212e:	eeb0 0a46 	vmov.f32	s0, s12
 8002132:	eef0 0a66 	vmov.f32	s1, s13
 8002136:	eeb0 1a47 	vmov.f32	s2, s14
 800213a:	eef0 1a67 	vmov.f32	s3, s15
 800213e:	3758      	adds	r7, #88	; 0x58
 8002140:	46bd      	mov	sp, r7
 8002142:	bc90      	pop	{r4, r7}
 8002144:	4770      	bx	lr

08002146 <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002162:	bfcc      	ite	gt
 8002164:	2301      	movgt	r3, #1
 8002166:	2300      	movle	r3, #0
 8002168:	b2db      	uxtb	r3, r3
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b0af      	sub	sp, #188	; 0xbc
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	ed87 0a00 	vstr	s0, [r7]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800218a:	330c      	adds	r3, #12
 800218c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800218e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002192:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002196:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800219a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800219e:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80021a2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80021a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ae:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80021b2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80021b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021be:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80021c2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80021c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ce:	eeb0 0a67 	vmov.f32	s0, s15
 80021d2:	f009 f8cb 	bl	800b36c <sqrtf>
 80021d6:	eeb0 7a40 	vmov.f32	s14, s0
 80021da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021e2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 80021e6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80021ea:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80021ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 80021f6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80021fa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80021fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002202:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8002206:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800220a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800220e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002212:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8002216:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800221a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002222:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return normalisedQuaternion;
 8002226:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800222a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800222e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002234:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002238:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800223c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800223e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f103 040c 	add.w	r4, r3, #12
 8002248:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800224c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800224e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	ed93 7a04 	vldr	s14, [r3, #16]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	edd3 7a05 	vldr	s15, [r3, #20]
 800225e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	edd3 6a03 	vldr	s13, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	edd3 7a06 	vldr	s15, [r3, #24]
 800226e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002272:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	ed93 7a03 	vldr	s14, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002286:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800228a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	edd3 6a04 	vldr	s13, [r3, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	edd3 7a04 	vldr	s15, [r3, #16]
 800229a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a2:	eef0 0a67 	vmov.f32	s1, s15
 80022a6:	eeb0 0a46 	vmov.f32	s0, s12
 80022aa:	f009 f85d 	bl	800b368 <atan2f>
 80022ae:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return degrees * ((float) M_PI / 180.0f);
 80022b8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80022bc:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800245c <FusionAhrsSetYaw+0x2e4>
 80022c0:	ee67 7a87 	vmul.f32	s15, s15, s14
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 80022c4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80022c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 80022d8:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80022dc:	f008 ff6a 	bl	800b1b4 <cosf>
 80022e0:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion inverseYawQuaternion = {
 80022e4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 80022f6:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80022fa:	f008 ffc1 	bl	800b280 <sinf>
 80022fe:	eef0 7a40 	vmov.f32	s15, s0
 8002302:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion inverseYawQuaternion = {
 8002306:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 800230a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800230e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800231e:	330c      	adds	r3, #12
 8002320:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002322:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 8002326:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800232a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800232e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002332:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002336:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800233a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002342:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002346:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800234a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800234e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002352:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002356:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800235a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800235e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002362:	edc7 7a02 	vstr	s15, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 8002366:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800236a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800236e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002372:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002376:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800237a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002382:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002386:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800238a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002392:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002396:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800239a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a2:	edc7 7a03 	vstr	s15, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 80023a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80023aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80023b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023c2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80023c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d2:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80023d6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e2:	edc7 7a04 	vstr	s15, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 80023e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80023ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80023f6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002402:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002406:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800240a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002412:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002416:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800241a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	edc7 7a05 	vstr	s15, [r7, #20]
    return result;
 8002426:	f107 0488 	add.w	r4, r7, #136	; 0x88
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002434:	f107 0418 	add.w	r4, r7, #24
 8002438:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800243c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800243e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f103 040c 	add.w	r4, r3, #12
 8002448:	f107 0318 	add.w	r3, r7, #24
 800244c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800244e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 8002452:	bf00      	nop
 8002454:	37bc      	adds	r7, #188	; 0xbc
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}
 800245a:	bf00      	nop
 800245c:	3c8efa35 	.word	0x3c8efa35

08002460 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	ed87 0a02 	vstr	s0, [r7, #8]
 800246c:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe f805 	bl	8000490 <__aeabi_f2d>
 8002486:	a312      	add	r3, pc, #72	; (adr r3, 80024d0 <FusionBiasInitialise+0x70>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	f7fe f858 	bl	8000540 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fb14 	bl	8000ac4 <__aeabi_d2f>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
}
 80024c2:	bf00      	nop
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	f3af 8000 	nop.w
 80024d0:	8c0eff43 	.word	0x8c0eff43
 80024d4:	3fc015bf 	.word	0x3fc015bf

080024d8 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 80024d8:	b490      	push	{r4, r7}
 80024da:	b0b4      	sub	sp, #208	; 0xd0
 80024dc:	af00      	add	r7, sp, #0
 80024de:	61f8      	str	r0, [r7, #28]
 80024e0:	eef0 6a40 	vmov.f32	s13, s0
 80024e4:	eeb0 7a60 	vmov.f32	s14, s1
 80024e8:	eef0 7a41 	vmov.f32	s15, s2
 80024ec:	edc7 6a04 	vstr	s13, [r7, #16]
 80024f0:	ed87 7a05 	vstr	s14, [r7, #20]
 80024f4:	edc7 7a06 	vstr	s15, [r7, #24]
 80024f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024fc:	f107 0210 	add.w	r2, r7, #16
 8002500:	ca07      	ldmia	r2, {r0, r1, r2}
 8002502:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800250c:	3210      	adds	r2, #16
 800250e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002510:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8002514:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002518:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800251c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002520:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8002524:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002528:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800252c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002530:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8002534:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002538:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800253c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002540:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 8002544:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002548:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800254c:	ca07      	ldmia	r2, {r0, r1, r2}
 800254e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800255a:	ca07      	ldmia	r2, {r0, r1, r2}
 800255c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002560:	edd7 7a04 	vldr	s15, [r7, #16]
 8002564:	eeb0 7ae7 	vabs.f32	s14, s15
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002576:	dc17      	bgt.n	80025a8 <FusionBiasUpdate+0xd0>
 8002578:	edd7 7a05 	vldr	s15, [r7, #20]
 800257c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	edd3 7a00 	vldr	s15, [r3]
 8002586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258e:	dc0b      	bgt.n	80025a8 <FusionBiasUpdate+0xd0>
 8002590:	edd7 7a06 	vldr	s15, [r7, #24]
 8002594:	eeb0 7ae7 	vabs.f32	s14, s15
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	dd0b      	ble.n	80025c0 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
        return gyroscope;
 80025b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025b4:	f107 0210 	add.w	r2, r7, #16
 80025b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80025ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80025be:	e08f      	b.n	80026e0 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80025c6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80025ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d2:	d512      	bpl.n	80025fa <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80025e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 80025ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80025ee:	f107 0210 	add.w	r2, r7, #16
 80025f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80025f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80025f8:	e072      	b.n	80026e0 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	689c      	ldr	r4, [r3, #8]
 80025fe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002602:	f107 0210 	add.w	r2, r7, #16
 8002606:	ca07      	ldmia	r2, {r0, r1, r2}
 8002608:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800260c:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 8002610:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002614:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 8002620:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002624:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 8002630:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002634:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 8002640:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002644:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002648:	ca07      	ldmia	r2, {r0, r1, r2}
 800264a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800264e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002652:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002656:	ca07      	ldmia	r2, {r0, r1, r2}
 8002658:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002662:	3210      	adds	r2, #16
 8002664:	ca07      	ldmia	r2, {r0, r1, r2}
 8002666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800266a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800266e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002672:	ca07      	ldmia	r2, {r0, r1, r2}
 8002674:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8002678:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800267c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8002688:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800268c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002694:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8002698:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800269c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80026a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 80026a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80026b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026ba:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80026be:	ca07      	ldmia	r2, {r0, r1, r2}
 80026c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3310      	adds	r3, #16
 80026c8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80026cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 80026d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80026d6:	f107 0210 	add.w	r2, r7, #16
 80026da:	ca07      	ldmia	r2, {r0, r1, r2}
 80026dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026ec:	ee06 1a90 	vmov	s13, r1
 80026f0:	ee07 2a10 	vmov	s14, r2
 80026f4:	ee07 3a90 	vmov	s15, r3
}
 80026f8:	eeb0 0a66 	vmov.f32	s0, s13
 80026fc:	eef0 0a47 	vmov.f32	s1, s14
 8002700:	eeb0 1a67 	vmov.f32	s2, s15
 8002704:	37d0      	adds	r7, #208	; 0xd0
 8002706:	46bd      	mov	sp, r7
 8002708:	bc90      	pop	{r4, r7}
 800270a:	4770      	bx	lr

0800270c <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8002710:	bf00      	nop
 8002712:	f000 f91f 	bl	8002954 <icm20948_who_am_i>
 8002716:	4603      	mov	r3, r0
 8002718:	f083 0301 	eor.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f7      	bne.n	8002712 <icm20948_init+0x6>

	icm20948_device_reset();
 8002722:	f000 f93c 	bl	800299e <icm20948_device_reset>
	icm20948_wakeup();
 8002726:	f000 f951 	bl	80029cc <icm20948_wakeup>

	icm20948_clock_source(1);
 800272a:	2001      	movs	r0, #1
 800272c:	f000 f9c9 	bl	8002ac2 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002730:	f000 f9e0 	bl	8002af4 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 8002734:	f000 f964 	bl	8002a00 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8002738:	2000      	movs	r0, #0
 800273a:	f000 f9e4 	bl	8002b06 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 800273e:	2000      	movs	r0, #0
 8002740:	f000 f9fe 	bl	8002b40 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8002744:	2000      	movs	r0, #0
 8002746:	f000 fa18 	bl	8002b7a <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 800274a:	2000      	movs	r0, #0
 800274c:	f000 fa24 	bl	8002b98 <icm20948_accel_sample_rate_divider>

	//icm20948_gyro_calibration();
	//icm20948_accel_calibration();

	icm20948_gyro_full_scale_select(_2000dps);
 8002750:	2003      	movs	r0, #3
 8002752:	f000 fa51 	bl	8002bf8 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_2g);
 8002756:	2000      	movs	r0, #0
 8002758:	f000 fa98 	bl	8002c8c <icm20948_accel_full_scale_select>
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}

08002760 <ak09916_init>:

void ak09916_init()
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8002764:	f000 f963 	bl	8002a2e <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8002768:	f000 f978 	bl	8002a5c <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 800276c:	2007      	movs	r0, #7
 800276e:	f000 f98f 	bl	8002a90 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8002772:	bf00      	nop
 8002774:	f000 f901 	bl	800297a <ak09916_who_am_i>
 8002778:	4603      	mov	r3, r0
 800277a:	f083 0301 	eor.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f7      	bne.n	8002774 <ak09916_init+0x14>

	ak09916_soft_reset();
 8002784:	f000 f917 	bl	80029b6 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8002788:	2008      	movs	r0, #8
 800278a:	f000 fa23 	bl	8002bd4 <ak09916_operation_mode_setting>
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}

08002792 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 800279a:	2206      	movs	r2, #6
 800279c:	2133      	movs	r1, #51	; 0x33
 800279e:	2000      	movs	r0, #0
 80027a0:	f000 fb3c 	bl	8002e1c <read_multiple_icm20948_reg>
 80027a4:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3301      	adds	r3, #1
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b21b      	sxth	r3, r3
 80027b6:	4313      	orrs	r3, r2
 80027b8:	b21b      	sxth	r3, r3
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3302      	adds	r3, #2
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	b21a      	sxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3303      	adds	r3, #3
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b21b      	sxth	r3, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	b21b      	sxth	r3, r3
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3304      	adds	r3, #4
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3305      	adds	r3, #5
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	4313      	orrs	r3, r2
 8002800:	b21b      	sxth	r3, r3
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8002820:	2206      	movs	r2, #6
 8002822:	212d      	movs	r1, #45	; 0x2d
 8002824:	2000      	movs	r0, #0
 8002826:	f000 faf9 	bl	8002e1c <read_multiple_icm20948_reg>
 800282a:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | (temp[1]));
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	b21a      	sxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3301      	adds	r3, #1
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b21b      	sxth	r3, r3
 800283c:	4313      	orrs	r3, r2
 800283e:	b21b      	sxth	r3, r3
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | (temp[3]));
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3302      	adds	r3, #2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	b21a      	sxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3303      	adds	r3, #3
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b21b      	sxth	r3, r3
 8002860:	4313      	orrs	r3, r2
 8002862:	b21b      	sxth	r3, r3
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | (temp[5]));
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3304      	adds	r3, #4
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	b21a      	sxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3305      	adds	r3, #5
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b21b      	sxth	r3, r3
 8002884:	4313      	orrs	r3, r2
 8002886:	b21b      	sxth	r3, r3
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b086      	sub	sp, #24
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 80028a6:	2010      	movs	r0, #16
 80028a8:	f000 fae8 	bl	8002e7c <read_single_ak09916_reg>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <ak09916_mag_read+0x20>
 80028ba:	2300      	movs	r3, #0
 80028bc:	e046      	b.n	800294c <ak09916_mag_read+0xae>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 80028be:	2106      	movs	r1, #6
 80028c0:	2011      	movs	r0, #17
 80028c2:	f000 fb1e 	bl	8002f02 <read_multiple_ak09916_reg>
 80028c6:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 80028c8:	2018      	movs	r0, #24
 80028ca:	f000 fad7 	bl	8002e7c <read_single_ak09916_reg>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <ak09916_mag_read+0x42>
 80028dc:	2300      	movs	r3, #0
 80028de:	e035      	b.n	800294c <ak09916_mag_read+0xae>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	3301      	adds	r3, #1
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	b21a      	sxth	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b21b      	sxth	r3, r3
 80028f0:	4313      	orrs	r3, r2
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	3303      	adds	r3, #3
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	b21a      	sxth	r2, r3
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	3302      	adds	r3, #2
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b21b      	sxth	r3, r3
 8002914:	4313      	orrs	r3, r2
 8002916:	b21b      	sxth	r3, r3
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	3305      	adds	r3, #5
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	b21a      	sxth	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	3304      	adds	r3, #4
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b21b      	sxth	r3, r3
 8002938:	4313      	orrs	r3, r2
 800293a:	b21b      	sxth	r3, r3
 800293c:	ee07 3a90 	vmov	s15, r3
 8002940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	edc3 7a02 	vstr	s15, [r3, #8]

	return true;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 800295a:	2100      	movs	r1, #0
 800295c:	2000      	movs	r0, #0
 800295e:	f000 fa0d 	bl	8002d7c <read_single_icm20948_reg>
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	2bea      	cmp	r3, #234	; 0xea
 800296a:	d101      	bne.n	8002970 <icm20948_who_am_i+0x1c>
		return true;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <icm20948_who_am_i+0x1e>
	else
		return false;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8002980:	2001      	movs	r0, #1
 8002982:	f000 fa7b 	bl	8002e7c <read_single_ak09916_reg>
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	2b09      	cmp	r3, #9
 800298e:	d101      	bne.n	8002994 <ak09916_who_am_i+0x1a>
		return true;
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <ak09916_who_am_i+0x1c>
	else
		return false;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <icm20948_device_reset>:

void icm20948_device_reset()
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 80029a2:	22c1      	movs	r2, #193	; 0xc1
 80029a4:	2106      	movs	r1, #6
 80029a6:	2000      	movs	r0, #0
 80029a8:	f000 fa14 	bl	8002dd4 <write_single_icm20948_reg>
	HAL_Delay(100);
 80029ac:	2064      	movs	r0, #100	; 0x64
 80029ae:	f003 ffa5 	bl	80068fc <HAL_Delay>
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 80029ba:	2101      	movs	r1, #1
 80029bc:	2032      	movs	r0, #50	; 0x32
 80029be:	f000 fa7e 	bl	8002ebe <write_single_ak09916_reg>
	HAL_Delay(100);
 80029c2:	2064      	movs	r0, #100	; 0x64
 80029c4:	f003 ff9a 	bl	80068fc <HAL_Delay>
}
 80029c8:	bf00      	nop
 80029ca:	bd80      	pop	{r7, pc}

080029cc <icm20948_wakeup>:

void icm20948_wakeup()
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 80029d2:	2106      	movs	r1, #6
 80029d4:	2000      	movs	r0, #0
 80029d6:	f000 f9d1 	bl	8002d7c <read_single_icm20948_reg>
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e4:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	461a      	mov	r2, r3
 80029ea:	2106      	movs	r1, #6
 80029ec:	2000      	movs	r0, #0
 80029ee:	f000 f9f1 	bl	8002dd4 <write_single_icm20948_reg>
	HAL_Delay(100);
 80029f2:	2064      	movs	r0, #100	; 0x64
 80029f4:	f003 ff82 	bl	80068fc <HAL_Delay>
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002a06:	2103      	movs	r1, #3
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f000 f9b7 	bl	8002d7c <read_single_icm20948_reg>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f043 0310 	orr.w	r3, r3, #16
 8002a18:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2103      	movs	r1, #3
 8002a20:	2000      	movs	r0, #0
 8002a22:	f000 f9d7 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002a34:	2103      	movs	r1, #3
 8002a36:	2000      	movs	r0, #0
 8002a38:	f000 f9a0 	bl	8002d7c <read_single_icm20948_reg>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2103      	movs	r1, #3
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f000 f9c0 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002a62:	2103      	movs	r1, #3
 8002a64:	2000      	movs	r0, #0
 8002a66:	f000 f989 	bl	8002d7c <read_single_icm20948_reg>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	f043 0320 	orr.w	r3, r3, #32
 8002a74:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2103      	movs	r1, #3
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f000 f9a9 	bl	8002dd4 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002a82:	2064      	movs	r0, #100	; 0x64
 8002a84:	f003 ff3a 	bl	80068fc <HAL_Delay>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	2030      	movs	r0, #48	; 0x30
 8002a9e:	f000 f96d 	bl	8002d7c <read_single_icm20948_reg>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	2030      	movs	r0, #48	; 0x30
 8002ab6:	f000 f98d 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002acc:	2106      	movs	r1, #6
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f000 f954 	bl	8002d7c <read_single_icm20948_reg>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2106      	movs	r1, #6
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f000 f974 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8002af8:	2201      	movs	r2, #1
 8002afa:	2109      	movs	r1, #9
 8002afc:	2020      	movs	r0, #32
 8002afe:	f000 f969 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8002b10:	2101      	movs	r1, #1
 8002b12:	2020      	movs	r0, #32
 8002b14:	f000 f932 	bl	8002d7c <read_single_icm20948_reg>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	b25a      	sxtb	r2, r3
 8002b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2101      	movs	r1, #1
 8002b32:	2020      	movs	r0, #32
 8002b34:	f000 f94e 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002b4a:	2114      	movs	r1, #20
 8002b4c:	2020      	movs	r0, #32
 8002b4e:	f000 f915 	bl	8002d7c <read_single_icm20948_reg>
 8002b52:	4603      	mov	r3, r0
 8002b54:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	b25a      	sxtb	r2, r3
 8002b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b25b      	sxtb	r3, r3
 8002b64:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	2020      	movs	r0, #32
 8002b6e:	f000 f931 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	461a      	mov	r2, r3
 8002b88:	2100      	movs	r1, #0
 8002b8a:	2020      	movs	r0, #32
 8002b8c:	f000 f922 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2110      	movs	r1, #16
 8002bba:	2020      	movs	r0, #32
 8002bbc:	f000 f90a 	bl	8002dd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8002bc0:	7bbb      	ldrb	r3, [r7, #14]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2111      	movs	r1, #17
 8002bc6:	2020      	movs	r0, #32
 8002bc8:	f000 f904 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	4619      	mov	r1, r3
 8002be2:	2031      	movs	r0, #49	; 0x31
 8002be4:	f000 f96b 	bl	8002ebe <write_single_ak09916_reg>
	HAL_Delay(100);
 8002be8:	2064      	movs	r0, #100	; 0x64
 8002bea:	f003 fe87 	bl	80068fc <HAL_Delay>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <icm20948_gyro_full_scale_select>:
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
}

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8002c02:	2101      	movs	r1, #1
 8002c04:	2020      	movs	r0, #32
 8002c06:	f000 f8b9 	bl	8002d7c <read_single_icm20948_reg>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d827      	bhi.n	8002c64 <icm20948_gyro_full_scale_select+0x6c>
 8002c14:	a201      	add	r2, pc, #4	; (adr r2, 8002c1c <icm20948_gyro_full_scale_select+0x24>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002c2d 	.word	0x08002c2d
 8002c20:	08002c35 	.word	0x08002c35
 8002c24:	08002c45 	.word	0x08002c45
 8002c28:	08002c55 	.word	0x08002c55
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <icm20948_gyro_full_scale_select+0x80>)
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <icm20948_gyro_full_scale_select+0x84>)
 8002c30:	601a      	str	r2, [r3, #0]
			break;
 8002c32:	e017      	b.n	8002c64 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	f043 0302 	orr.w	r3, r3, #2
 8002c3a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <icm20948_gyro_full_scale_select+0x80>)
 8002c3e:	4a10      	ldr	r2, [pc, #64]	; (8002c80 <icm20948_gyro_full_scale_select+0x88>)
 8002c40:	601a      	str	r2, [r3, #0]
			break;
 8002c42:	e00f      	b.n	8002c64 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <icm20948_gyro_full_scale_select+0x80>)
 8002c4e:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <icm20948_gyro_full_scale_select+0x8c>)
 8002c50:	601a      	str	r2, [r3, #0]
			break;
 8002c52:	e007      	b.n	8002c64 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	f043 0306 	orr.w	r3, r3, #6
 8002c5a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <icm20948_gyro_full_scale_select+0x80>)
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <icm20948_gyro_full_scale_select+0x90>)
 8002c60:	601a      	str	r2, [r3, #0]
			break;
 8002c62:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	461a      	mov	r2, r3
 8002c68:	2101      	movs	r1, #1
 8002c6a:	2020      	movs	r0, #32
 8002c6c:	f000 f8b2 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	200000c0 	.word	0x200000c0
 8002c7c:	43030000 	.word	0x43030000
 8002c80:	42830000 	.word	0x42830000
 8002c84:	42033333 	.word	0x42033333
 8002c88:	41833333 	.word	0x41833333

08002c8c <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002c96:	2114      	movs	r1, #20
 8002c98:	2020      	movs	r0, #32
 8002c9a:	f000 f86f 	bl	8002d7c <read_single_icm20948_reg>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d82b      	bhi.n	8002d00 <icm20948_accel_full_scale_select+0x74>
 8002ca8:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <icm20948_accel_full_scale_select+0x24>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002ccb 	.word	0x08002ccb
 8002cb8:	08002cdd 	.word	0x08002cdd
 8002cbc:	08002cef 	.word	0x08002cef
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <icm20948_accel_full_scale_select+0x88>)
 8002cc2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8002cc6:	601a      	str	r2, [r3, #0]
			break;
 8002cc8:	e01a      	b.n	8002d00 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <icm20948_accel_full_scale_select+0x88>)
 8002cd4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002cd8:	601a      	str	r2, [r3, #0]
			break;
 8002cda:	e011      	b.n	8002d00 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <icm20948_accel_full_scale_select+0x88>)
 8002ce6:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002cea:	601a      	str	r2, [r3, #0]
			break;
 8002cec:	e008      	b.n	8002d00 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	f043 0306 	orr.w	r3, r3, #6
 8002cf4:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <icm20948_accel_full_scale_select+0x88>)
 8002cf8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002cfc:	601a      	str	r2, [r3, #0]
			break;
 8002cfe:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	461a      	mov	r2, r3
 8002d04:	2114      	movs	r1, #20
 8002d06:	2020      	movs	r0, #32
 8002d08:	f000 f864 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200000c4 	.word	0x200000c4

08002d18 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	2104      	movs	r1, #4
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <cs_high+0x14>)
 8002d22:	f005 f8d7 	bl	8007ed4 <HAL_GPIO_WritePin>
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000

08002d30 <cs_low>:

static void cs_low()
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2104      	movs	r1, #4
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <cs_low+0x14>)
 8002d3a:	f005 f8cb 	bl	8007ed4 <HAL_GPIO_WritePin>
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000

08002d48 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8002d52:	237f      	movs	r3, #127	; 0x7f
 8002d54:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	737b      	strb	r3, [r7, #13]

	cs_low();
 8002d5a:	f7ff ffe9 	bl	8002d30 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8002d5e:	f107 010c 	add.w	r1, r7, #12
 8002d62:	230a      	movs	r3, #10
 8002d64:	2202      	movs	r2, #2
 8002d66:	4804      	ldr	r0, [pc, #16]	; (8002d78 <select_user_bank+0x30>)
 8002d68:	f005 fde5 	bl	8008936 <HAL_SPI_Transmit>
	cs_high();
 8002d6c:	f7ff ffd4 	bl	8002d18 <cs_high>
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	200003b4 	.word	0x200003b4

08002d7c <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	460a      	mov	r2, r1
 8002d86:	71fb      	strb	r3, [r7, #7]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8002d8c:	79bb      	ldrb	r3, [r7, #6]
 8002d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ffd5 	bl	8002d48 <select_user_bank>

	cs_low();
 8002d9e:	f7ff ffc7 	bl	8002d30 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002da2:	f107 010f 	add.w	r1, r7, #15
 8002da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002daa:	2201      	movs	r2, #1
 8002dac:	4808      	ldr	r0, [pc, #32]	; (8002dd0 <read_single_icm20948_reg+0x54>)
 8002dae:	f005 fdc2 	bl	8008936 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8002db2:	f107 010e 	add.w	r1, r7, #14
 8002db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4804      	ldr	r0, [pc, #16]	; (8002dd0 <read_single_icm20948_reg+0x54>)
 8002dbe:	f005 fef6 	bl	8008bae <HAL_SPI_Receive>
	cs_high();
 8002dc2:	f7ff ffa9 	bl	8002d18 <cs_high>

	return reg_val;
 8002dc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200003b4 	.word	0x200003b4

08002dd4 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
 8002dde:	460b      	mov	r3, r1
 8002de0:	71bb      	strb	r3, [r7, #6]
 8002de2:	4613      	mov	r3, r2
 8002de4:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8002de6:	79bb      	ldrb	r3, [r7, #6]
 8002de8:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8002dea:	797b      	ldrb	r3, [r7, #5]
 8002dec:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ffa9 	bl	8002d48 <select_user_bank>

	cs_low();
 8002df6:	f7ff ff9b 	bl	8002d30 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8002dfa:	f107 010c 	add.w	r1, r7, #12
 8002dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e02:	2202      	movs	r2, #2
 8002e04:	4804      	ldr	r0, [pc, #16]	; (8002e18 <write_single_icm20948_reg+0x44>)
 8002e06:	f005 fd96 	bl	8008936 <HAL_SPI_Transmit>
	cs_high();
 8002e0a:	f7ff ff85 	bl	8002d18 <cs_high>
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200003b4 	.word	0x200003b4

08002e1c <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	71fb      	strb	r3, [r7, #7]
 8002e26:	460b      	mov	r3, r1
 8002e28:	71bb      	strb	r3, [r7, #6]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 8002e2e:	79bb      	ldrb	r3, [r7, #6]
 8002e30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff84 	bl	8002d48 <select_user_bank>

	cs_low();
 8002e40:	f7ff ff76 	bl	8002d30 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002e44:	f107 010f 	add.w	r1, r7, #15
 8002e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	4809      	ldr	r0, [pc, #36]	; (8002e74 <read_multiple_icm20948_reg+0x58>)
 8002e50:	f005 fd71 	bl	8008936 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8002e54:	797b      	ldrb	r3, [r7, #5]
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5c:	4906      	ldr	r1, [pc, #24]	; (8002e78 <read_multiple_icm20948_reg+0x5c>)
 8002e5e:	4805      	ldr	r0, [pc, #20]	; (8002e74 <read_multiple_icm20948_reg+0x58>)
 8002e60:	f005 fea5 	bl	8008bae <HAL_SPI_Receive>
	cs_high();
 8002e64:	f7ff ff58 	bl	8002d18 <cs_high>

	return reg_val;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <read_multiple_icm20948_reg+0x5c>)
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200003b4 	.word	0x200003b4
 8002e78:	200000c8 	.word	0x200000c8

08002e7c <read_single_ak09916_reg>:
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
	cs_high();
}

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8002e86:	228c      	movs	r2, #140	; 0x8c
 8002e88:	2103      	movs	r1, #3
 8002e8a:	2030      	movs	r0, #48	; 0x30
 8002e8c:	f7ff ffa2 	bl	8002dd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	461a      	mov	r2, r3
 8002e94:	2104      	movs	r1, #4
 8002e96:	2030      	movs	r0, #48	; 0x30
 8002e98:	f7ff ff9c 	bl	8002dd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8002e9c:	2281      	movs	r2, #129	; 0x81
 8002e9e:	2105      	movs	r1, #5
 8002ea0:	2030      	movs	r0, #48	; 0x30
 8002ea2:	f7ff ff97 	bl	8002dd4 <write_single_icm20948_reg>

	HAL_Delay(1);
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f003 fd28 	bl	80068fc <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8002eac:	213b      	movs	r1, #59	; 0x3b
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7ff ff64 	bl	8002d7c <read_single_icm20948_reg>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	460a      	mov	r2, r1
 8002ec8:	71fb      	strb	r3, [r7, #7]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8002ece:	220c      	movs	r2, #12
 8002ed0:	2103      	movs	r1, #3
 8002ed2:	2030      	movs	r0, #48	; 0x30
 8002ed4:	f7ff ff7e 	bl	8002dd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	461a      	mov	r2, r3
 8002edc:	2104      	movs	r1, #4
 8002ede:	2030      	movs	r0, #48	; 0x30
 8002ee0:	f7ff ff78 	bl	8002dd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8002ee4:	79bb      	ldrb	r3, [r7, #6]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2106      	movs	r1, #6
 8002eea:	2030      	movs	r0, #48	; 0x30
 8002eec:	f7ff ff72 	bl	8002dd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8002ef0:	2281      	movs	r2, #129	; 0x81
 8002ef2:	2105      	movs	r1, #5
 8002ef4:	2030      	movs	r0, #48	; 0x30
 8002ef6:	f7ff ff6d 	bl	8002dd4 <write_single_icm20948_reg>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	460a      	mov	r2, r1
 8002f0c:	71fb      	strb	r3, [r7, #7]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8002f12:	228c      	movs	r2, #140	; 0x8c
 8002f14:	2103      	movs	r1, #3
 8002f16:	2030      	movs	r0, #48	; 0x30
 8002f18:	f7ff ff5c 	bl	8002dd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2104      	movs	r1, #4
 8002f22:	2030      	movs	r0, #48	; 0x30
 8002f24:	f7ff ff56 	bl	8002dd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8002f28:	79bb      	ldrb	r3, [r7, #6]
 8002f2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	2105      	movs	r1, #5
 8002f34:	2030      	movs	r0, #48	; 0x30
 8002f36:	f7ff ff4d 	bl	8002dd4 <write_single_icm20948_reg>

	HAL_Delay(1);
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f003 fcde 	bl	80068fc <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8002f40:	79bb      	ldrb	r3, [r7, #6]
 8002f42:	461a      	mov	r2, r3
 8002f44:	213b      	movs	r1, #59	; 0x3b
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7ff ff68 	bl	8002e1c <read_multiple_icm20948_reg>
 8002f4c:	4603      	mov	r3, r0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f5e:	463b      	mov	r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f6a:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002f6c:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <MX_ADC1_Init+0x9c>)
 8002f6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f70:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002f72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002f7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f84:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f8a:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002f9a:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <MX_ADC1_Init+0xa0>)
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002fa4:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002faa:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fb8:	480d      	ldr	r0, [pc, #52]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002fba:	f003 fcc3 	bl	8006944 <HAL_ADC_Init>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002fc4:	f002 fe46 	bl	8005c54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002fc8:	2308      	movs	r3, #8
 8002fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <MX_ADC1_Init+0x98>)
 8002fda:	f003 fe95 	bl	8006d08 <HAL_ADC_ConfigChannel>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002fe4:	f002 fe36 	bl	8005c54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000128 	.word	0x20000128
 8002ff4:	40012000 	.word	0x40012000
 8002ff8:	0f000001 	.word	0x0f000001

08002ffc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08c      	sub	sp, #48	; 0x30
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 031c 	add.w	r3, r7, #28
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a31      	ldr	r2, [pc, #196]	; (80030e0 <HAL_ADC_MspInit+0xe4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d15b      	bne.n	80030d6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	4a2f      	ldr	r2, [pc, #188]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 8003028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302c:	6453      	str	r3, [r2, #68]	; 0x44
 800302e:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a28      	ldr	r2, [pc, #160]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 8003044:	f043 0304 	orr.w	r3, r3, #4
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <HAL_ADC_MspInit+0xe8>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_6_Pin|ADC_7_Pin|ADC_8_Pin;
 800308e:	2307      	movs	r3, #7
 8003090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003092:	2303      	movs	r3, #3
 8003094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800309a:	f107 031c 	add.w	r3, r7, #28
 800309e:	4619      	mov	r1, r3
 80030a0:	4811      	ldr	r0, [pc, #68]	; (80030e8 <HAL_ADC_MspInit+0xec>)
 80030a2:	f004 fd63 	bl	8007b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|ADC_2_Pin|ADC_3_Pin;
 80030a6:	2307      	movs	r3, #7
 80030a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030aa:	2303      	movs	r3, #3
 80030ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b2:	f107 031c 	add.w	r3, r7, #28
 80030b6:	4619      	mov	r1, r3
 80030b8:	480c      	ldr	r0, [pc, #48]	; (80030ec <HAL_ADC_MspInit+0xf0>)
 80030ba:	f004 fd57 	bl	8007b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_4_Pin|ADC_5_Pin;
 80030be:	2303      	movs	r3, #3
 80030c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c2:	2303      	movs	r3, #3
 80030c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ca:	f107 031c 	add.w	r3, r7, #28
 80030ce:	4619      	mov	r1, r3
 80030d0:	4807      	ldr	r0, [pc, #28]	; (80030f0 <HAL_ADC_MspInit+0xf4>)
 80030d2:	f004 fd4b 	bl	8007b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80030d6:	bf00      	nop
 80030d8:	3730      	adds	r7, #48	; 0x30
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40012000 	.word	0x40012000
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020800 	.word	0x40020800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400

080030f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <MX_DMA_Init+0xc8>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a2e      	ldr	r2, [pc, #184]	; (80031bc <MX_DMA_Init+0xc8>)
 8003104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <MX_DMA_Init+0xc8>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	603b      	str	r3, [r7, #0]
 800311a:	4b28      	ldr	r3, [pc, #160]	; (80031bc <MX_DMA_Init+0xc8>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a27      	ldr	r2, [pc, #156]	; (80031bc <MX_DMA_Init+0xc8>)
 8003120:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b25      	ldr	r3, [pc, #148]	; (80031bc <MX_DMA_Init+0xc8>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	200c      	movs	r0, #12
 8003138:	f004 f8df 	bl	80072fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800313c:	200c      	movs	r0, #12
 800313e:	f004 f8f8 	bl	8007332 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	2100      	movs	r1, #0
 8003146:	200e      	movs	r0, #14
 8003148:	f004 f8d7 	bl	80072fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800314c:	200e      	movs	r0, #14
 800314e:	f004 f8f0 	bl	8007332 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2100      	movs	r1, #0
 8003156:	200f      	movs	r0, #15
 8003158:	f004 f8cf 	bl	80072fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800315c:	200f      	movs	r0, #15
 800315e:	f004 f8e8 	bl	8007332 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003162:	2200      	movs	r2, #0
 8003164:	2100      	movs	r1, #0
 8003166:	2010      	movs	r0, #16
 8003168:	f004 f8c7 	bl	80072fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800316c:	2010      	movs	r0, #16
 800316e:	f004 f8e0 	bl	8007332 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	2011      	movs	r0, #17
 8003178:	f004 f8bf 	bl	80072fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800317c:	2011      	movs	r0, #17
 800317e:	f004 f8d8 	bl	8007332 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2100      	movs	r1, #0
 8003186:	2039      	movs	r0, #57	; 0x39
 8003188:	f004 f8b7 	bl	80072fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800318c:	2039      	movs	r0, #57	; 0x39
 800318e:	f004 f8d0 	bl	8007332 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2100      	movs	r1, #0
 8003196:	203a      	movs	r0, #58	; 0x3a
 8003198:	f004 f8af 	bl	80072fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800319c:	203a      	movs	r0, #58	; 0x3a
 800319e:	f004 f8c8 	bl	8007332 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	2045      	movs	r0, #69	; 0x45
 80031a8:	f004 f8a7 	bl	80072fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80031ac:	2045      	movs	r0, #69	; 0x45
 80031ae:	f004 f8c0 	bl	8007332 <HAL_NVIC_EnableIRQ>

}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08c      	sub	sp, #48	; 0x30
 80031c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c6:	f107 031c 	add.w	r3, r7, #28
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	4b4f      	ldr	r3, [pc, #316]	; (8003318 <MX_GPIO_Init+0x158>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a4e      	ldr	r2, [pc, #312]	; (8003318 <MX_GPIO_Init+0x158>)
 80031e0:	f043 0310 	orr.w	r3, r3, #16
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <MX_GPIO_Init+0x158>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	4b48      	ldr	r3, [pc, #288]	; (8003318 <MX_GPIO_Init+0x158>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a47      	ldr	r2, [pc, #284]	; (8003318 <MX_GPIO_Init+0x158>)
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b45      	ldr	r3, [pc, #276]	; (8003318 <MX_GPIO_Init+0x158>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <MX_GPIO_Init+0x158>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a40      	ldr	r2, [pc, #256]	; (8003318 <MX_GPIO_Init+0x158>)
 8003218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <MX_GPIO_Init+0x158>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <MX_GPIO_Init+0x158>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a39      	ldr	r2, [pc, #228]	; (8003318 <MX_GPIO_Init+0x158>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b37      	ldr	r3, [pc, #220]	; (8003318 <MX_GPIO_Init+0x158>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	4b33      	ldr	r3, [pc, #204]	; (8003318 <MX_GPIO_Init+0x158>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a32      	ldr	r2, [pc, #200]	; (8003318 <MX_GPIO_Init+0x158>)
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b30      	ldr	r3, [pc, #192]	; (8003318 <MX_GPIO_Init+0x158>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <MX_GPIO_Init+0x158>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a2b      	ldr	r2, [pc, #172]	; (8003318 <MX_GPIO_Init+0x158>)
 800326c:	f043 0308 	orr.w	r3, r3, #8
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b29      	ldr	r3, [pc, #164]	; (8003318 <MX_GPIO_Init+0x158>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ICM20948_CS_Pin|DRIVER_EN_Pin, GPIO_PIN_RESET);
 800327e:	2200      	movs	r2, #0
 8003280:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003284:	4825      	ldr	r0, [pc, #148]	; (800331c <MX_GPIO_Init+0x15c>)
 8003286:	f004 fe25 	bl	8007ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 800328a:	2200      	movs	r2, #0
 800328c:	2130      	movs	r1, #48	; 0x30
 800328e:	4824      	ldr	r0, [pc, #144]	; (8003320 <MX_GPIO_Init+0x160>)
 8003290:	f004 fe20 	bl	8007ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8003294:	2200      	movs	r2, #0
 8003296:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800329a:	4822      	ldr	r0, [pc, #136]	; (8003324 <MX_GPIO_Init+0x164>)
 800329c:	f004 fe1a 	bl	8007ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin|DRIVER_EN_Pin;
 80032a0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80032a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a6:	2301      	movs	r3, #1
 80032a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ae:	2300      	movs	r3, #0
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032b2:	f107 031c 	add.w	r3, r7, #28
 80032b6:	4619      	mov	r1, r3
 80032b8:	4818      	ldr	r0, [pc, #96]	; (800331c <MX_GPIO_Init+0x15c>)
 80032ba:	f004 fc57 	bl	8007b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_PARK_UP_Pin|BTN_PARK_DOWN_Pin;
 80032be:	2330      	movs	r3, #48	; 0x30
 80032c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c2:	2300      	movs	r3, #0
 80032c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032c6:	2302      	movs	r3, #2
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032ca:	f107 031c 	add.w	r3, r7, #28
 80032ce:	4619      	mov	r1, r3
 80032d0:	4812      	ldr	r0, [pc, #72]	; (800331c <MX_GPIO_Init+0x15c>)
 80032d2:	f004 fc4b 	bl	8007b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin;
 80032d6:	2330      	movs	r3, #48	; 0x30
 80032d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032da:	2301      	movs	r3, #1
 80032dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e6:	f107 031c 	add.w	r3, r7, #28
 80032ea:	4619      	mov	r1, r3
 80032ec:	480c      	ldr	r0, [pc, #48]	; (8003320 <MX_GPIO_Init+0x160>)
 80032ee:	f004 fc3d 	bl	8007b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80032f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80032f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f8:	2301      	movs	r3, #1
 80032fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003300:	2300      	movs	r3, #0
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003304:	f107 031c 	add.w	r3, r7, #28
 8003308:	4619      	mov	r1, r3
 800330a:	4806      	ldr	r0, [pc, #24]	; (8003324 <MX_GPIO_Init+0x164>)
 800330c:	f004 fc2e 	bl	8007b6c <HAL_GPIO_Init>

}
 8003310:	bf00      	nop
 8003312:	3730      	adds	r7, #48	; 0x30
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40023800 	.word	0x40023800
 800331c:	40021000 	.word	0x40021000
 8003320:	40020800 	.word	0x40020800
 8003324:	40020c00 	.word	0x40020c00

08003328 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	if (UartHandle->Instance == SYSTEM_HARDWARE_UART_HIGH_INSTANSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a71      	ldr	r2, [pc, #452]	; (80034fc <HAL_UART_RxCpltCallback+0x1d4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d16b      	bne.n	8003412 <HAL_UART_RxCpltCallback+0xea>
	{
		if (UartHighReceiveState == 0)
 800333a:	4b71      	ldr	r3, [pc, #452]	; (8003500 <HAL_UART_RxCpltCallback+0x1d8>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d11f      	bne.n	8003384 <HAL_UART_RxCpltCallback+0x5c>
		{
			if ((SerialHighLevelRequest.CR != 13) || (SerialHighLevelRequest.LF != 10))
 8003344:	4b6f      	ldr	r3, [pc, #444]	; (8003504 <HAL_UART_RxCpltCallback+0x1dc>)
 8003346:	7b9b      	ldrb	r3, [r3, #14]
 8003348:	2b0d      	cmp	r3, #13
 800334a:	d103      	bne.n	8003354 <HAL_UART_RxCpltCallback+0x2c>
 800334c:	4b6d      	ldr	r3, [pc, #436]	; (8003504 <HAL_UART_RxCpltCallback+0x1dc>)
 800334e:	7bdb      	ldrb	r3, [r3, #15]
 8003350:	2b0a      	cmp	r3, #10
 8003352:	d00c      	beq.n	800336e <HAL_UART_RxCpltCallback+0x46>
			{
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, LostByte, 1);
 8003354:	4b6c      	ldr	r3, [pc, #432]	; (8003508 <HAL_UART_RxCpltCallback+0x1e0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2201      	movs	r2, #1
 800335a:	4619      	mov	r1, r3
 800335c:	486b      	ldr	r0, [pc, #428]	; (800350c <HAL_UART_RxCpltCallback+0x1e4>)
 800335e:	f006 febf 	bl	800a0e0 <HAL_UART_Receive_DMA>
 8003362:	4603      	mov	r3, r0
 8003364:	73fb      	strb	r3, [r7, #15]
				UartHighReceiveState = 1;
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_UART_RxCpltCallback+0x1d8>)
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e042      	b.n	80033f4 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				UartHighReceiveState = 10;
 800336e:	4b64      	ldr	r3, [pc, #400]	; (8003500 <HAL_UART_RxCpltCallback+0x1d8>)
 8003370:	220a      	movs	r2, #10
 8003372:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 8003374:	2210      	movs	r2, #16
 8003376:	4963      	ldr	r1, [pc, #396]	; (8003504 <HAL_UART_RxCpltCallback+0x1dc>)
 8003378:	4864      	ldr	r0, [pc, #400]	; (800350c <HAL_UART_RxCpltCallback+0x1e4>)
 800337a:	f006 feb1 	bl	800a0e0 <HAL_UART_Receive_DMA>
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]
 8003382:	e037      	b.n	80033f4 <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else
		{
			if(UartHighReceiveState == 1)
 8003384:	4b5e      	ldr	r3, [pc, #376]	; (8003500 <HAL_UART_RxCpltCallback+0x1d8>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b01      	cmp	r3, #1
 800338c:	d111      	bne.n	80033b2 <HAL_UART_RxCpltCallback+0x8a>
			{
				if (LostByte[0] == 13)
 800338e:	4b5e      	ldr	r3, [pc, #376]	; (8003508 <HAL_UART_RxCpltCallback+0x1e0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b0d      	cmp	r3, #13
 8003396:	d102      	bne.n	800339e <HAL_UART_RxCpltCallback+0x76>
				{
					UartHighReceiveState = 2;
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_UART_RxCpltCallback+0x1d8>)
 800339a:	2202      	movs	r2, #2
 800339c:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)LostByte, 1);
 800339e:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <HAL_UART_RxCpltCallback+0x1e0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2201      	movs	r2, #1
 80033a4:	4619      	mov	r1, r3
 80033a6:	4859      	ldr	r0, [pc, #356]	; (800350c <HAL_UART_RxCpltCallback+0x1e4>)
 80033a8:	f006 fe9a 	bl	800a0e0 <HAL_UART_Receive_DMA>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e020      	b.n	80033f4 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				if (UartHighReceiveState == 2)
 80033b2:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_UART_RxCpltCallback+0x1d8>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d11b      	bne.n	80033f4 <HAL_UART_RxCpltCallback+0xcc>
				{
					if (LostByte[0] == 10)
 80033bc:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_UART_RxCpltCallback+0x1e0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b0a      	cmp	r3, #10
 80033c4:	d10a      	bne.n	80033dc <HAL_UART_RxCpltCallback+0xb4>
					{
						UartHighReceiveState = 0;
 80033c6:	4b4e      	ldr	r3, [pc, #312]	; (8003500 <HAL_UART_RxCpltCallback+0x1d8>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 80033cc:	2210      	movs	r2, #16
 80033ce:	494d      	ldr	r1, [pc, #308]	; (8003504 <HAL_UART_RxCpltCallback+0x1dc>)
 80033d0:	484e      	ldr	r0, [pc, #312]	; (800350c <HAL_UART_RxCpltCallback+0x1e4>)
 80033d2:	f006 fe85 	bl	800a0e0 <HAL_UART_Receive_DMA>
 80033d6:	4603      	mov	r3, r0
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	e00b      	b.n	80033f4 <HAL_UART_RxCpltCallback+0xcc>
					}
					else
					{
						UartHighReceiveState = 1;
 80033dc:	4b48      	ldr	r3, [pc, #288]	; (8003500 <HAL_UART_RxCpltCallback+0x1d8>)
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)LostByte, 1);
 80033e2:	4b49      	ldr	r3, [pc, #292]	; (8003508 <HAL_UART_RxCpltCallback+0x1e0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2201      	movs	r2, #1
 80033e8:	4619      	mov	r1, r3
 80033ea:	4848      	ldr	r0, [pc, #288]	; (800350c <HAL_UART_RxCpltCallback+0x1e4>)
 80033ec:	f006 fe78 	bl	800a0e0 <HAL_UART_Receive_DMA>
 80033f0:	4603      	mov	r3, r0
 80033f2:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}
		if (Res != HAL_OK)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <HAL_UART_RxCpltCallback+0xea>
		{
			MX_USART3_UART_Init();
 80033fa:	f003 f83b 	bl	8006474 <MX_USART3_UART_Init>
			UartHighReceiveState = 0;
 80033fe:	4b40      	ldr	r3, [pc, #256]	; (8003500 <HAL_UART_RxCpltCallback+0x1d8>)
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 8003404:	2210      	movs	r2, #16
 8003406:	493f      	ldr	r1, [pc, #252]	; (8003504 <HAL_UART_RxCpltCallback+0x1dc>)
 8003408:	4840      	ldr	r0, [pc, #256]	; (800350c <HAL_UART_RxCpltCallback+0x1e4>)
 800340a:	f006 fe69 	bl	800a0e0 <HAL_UART_Receive_DMA>
 800340e:	4603      	mov	r3, r0
 8003410:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == SYSTEM_HARDWARE_UART_LOW_INSTANSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a3e      	ldr	r2, [pc, #248]	; (8003510 <HAL_UART_RxCpltCallback+0x1e8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d16b      	bne.n	80034f4 <HAL_UART_RxCpltCallback+0x1cc>
	{
		if (UartLowReceiveState == 0)
 800341c:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <HAL_UART_RxCpltCallback+0x1ec>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11f      	bne.n	8003466 <HAL_UART_RxCpltCallback+0x13e>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 8003426:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <HAL_UART_RxCpltCallback+0x1f0>)
 8003428:	7b9b      	ldrb	r3, [r3, #14]
 800342a:	2b0d      	cmp	r3, #13
 800342c:	d103      	bne.n	8003436 <HAL_UART_RxCpltCallback+0x10e>
 800342e:	4b3a      	ldr	r3, [pc, #232]	; (8003518 <HAL_UART_RxCpltCallback+0x1f0>)
 8003430:	7bdb      	ldrb	r3, [r3, #15]
 8003432:	2b0a      	cmp	r3, #10
 8003434:	d00c      	beq.n	8003450 <HAL_UART_RxCpltCallback+0x128>
			{
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, LostByte, 1);
 8003436:	4b34      	ldr	r3, [pc, #208]	; (8003508 <HAL_UART_RxCpltCallback+0x1e0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2201      	movs	r2, #1
 800343c:	4619      	mov	r1, r3
 800343e:	4837      	ldr	r0, [pc, #220]	; (800351c <HAL_UART_RxCpltCallback+0x1f4>)
 8003440:	f006 fe4e 	bl	800a0e0 <HAL_UART_Receive_DMA>
 8003444:	4603      	mov	r3, r0
 8003446:	73fb      	strb	r3, [r7, #15]
				UartLowReceiveState = 1;
 8003448:	4b32      	ldr	r3, [pc, #200]	; (8003514 <HAL_UART_RxCpltCallback+0x1ec>)
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e042      	b.n	80034d6 <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				UartLowReceiveState = 10;
 8003450:	4b30      	ldr	r3, [pc, #192]	; (8003514 <HAL_UART_RxCpltCallback+0x1ec>)
 8003452:	220a      	movs	r2, #10
 8003454:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8003456:	2210      	movs	r2, #16
 8003458:	492f      	ldr	r1, [pc, #188]	; (8003518 <HAL_UART_RxCpltCallback+0x1f0>)
 800345a:	4830      	ldr	r0, [pc, #192]	; (800351c <HAL_UART_RxCpltCallback+0x1f4>)
 800345c:	f006 fe40 	bl	800a0e0 <HAL_UART_Receive_DMA>
 8003460:	4603      	mov	r3, r0
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	e037      	b.n	80034d6 <HAL_UART_RxCpltCallback+0x1ae>
			}
		}
		else
		{
			if(UartLowReceiveState == 1)
 8003466:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <HAL_UART_RxCpltCallback+0x1ec>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d111      	bne.n	8003494 <HAL_UART_RxCpltCallback+0x16c>
			{
				if (LostByte[0] == 13)
 8003470:	4b25      	ldr	r3, [pc, #148]	; (8003508 <HAL_UART_RxCpltCallback+0x1e0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b0d      	cmp	r3, #13
 8003478:	d102      	bne.n	8003480 <HAL_UART_RxCpltCallback+0x158>
				{
					UartLowReceiveState = 2;
 800347a:	4b26      	ldr	r3, [pc, #152]	; (8003514 <HAL_UART_RxCpltCallback+0x1ec>)
 800347c:	2202      	movs	r2, #2
 800347e:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)LostByte, 1);
 8003480:	4b21      	ldr	r3, [pc, #132]	; (8003508 <HAL_UART_RxCpltCallback+0x1e0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2201      	movs	r2, #1
 8003486:	4619      	mov	r1, r3
 8003488:	4824      	ldr	r0, [pc, #144]	; (800351c <HAL_UART_RxCpltCallback+0x1f4>)
 800348a:	f006 fe29 	bl	800a0e0 <HAL_UART_Receive_DMA>
 800348e:	4603      	mov	r3, r0
 8003490:	73fb      	strb	r3, [r7, #15]
 8003492:	e020      	b.n	80034d6 <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				if (UartLowReceiveState == 2)
 8003494:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <HAL_UART_RxCpltCallback+0x1ec>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d11b      	bne.n	80034d6 <HAL_UART_RxCpltCallback+0x1ae>
				{
					if (LostByte[0] == 10)
 800349e:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <HAL_UART_RxCpltCallback+0x1e0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b0a      	cmp	r3, #10
 80034a6:	d10a      	bne.n	80034be <HAL_UART_RxCpltCallback+0x196>
					{
						UartLowReceiveState = 0;
 80034a8:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <HAL_UART_RxCpltCallback+0x1ec>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 80034ae:	2210      	movs	r2, #16
 80034b0:	4919      	ldr	r1, [pc, #100]	; (8003518 <HAL_UART_RxCpltCallback+0x1f0>)
 80034b2:	481a      	ldr	r0, [pc, #104]	; (800351c <HAL_UART_RxCpltCallback+0x1f4>)
 80034b4:	f006 fe14 	bl	800a0e0 <HAL_UART_Receive_DMA>
 80034b8:	4603      	mov	r3, r0
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e00b      	b.n	80034d6 <HAL_UART_RxCpltCallback+0x1ae>
					}
					else
					{
						UartLowReceiveState = 1;
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <HAL_UART_RxCpltCallback+0x1ec>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)LostByte, 1);
 80034c4:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_UART_RxCpltCallback+0x1e0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2201      	movs	r2, #1
 80034ca:	4619      	mov	r1, r3
 80034cc:	4813      	ldr	r0, [pc, #76]	; (800351c <HAL_UART_RxCpltCallback+0x1f4>)
 80034ce:	f006 fe07 	bl	800a0e0 <HAL_UART_Receive_DMA>
 80034d2:	4603      	mov	r3, r0
 80034d4:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00b      	beq.n	80034f4 <HAL_UART_RxCpltCallback+0x1cc>
		{
			MX_USART2_UART_Init();
 80034dc:	f002 ffa0 	bl	8006420 <MX_USART2_UART_Init>
			UartLowReceiveState = 0;
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <HAL_UART_RxCpltCallback+0x1ec>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 80034e6:	2210      	movs	r2, #16
 80034e8:	490b      	ldr	r1, [pc, #44]	; (8003518 <HAL_UART_RxCpltCallback+0x1f0>)
 80034ea:	480c      	ldr	r0, [pc, #48]	; (800351c <HAL_UART_RxCpltCallback+0x1f4>)
 80034ec:	f006 fdf8 	bl	800a0e0 <HAL_UART_Receive_DMA>
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40004800 	.word	0x40004800
 8003500:	200000d9 	.word	0x200000d9
 8003504:	200002e0 	.word	0x200002e0
 8003508:	200003a8 	.word	0x200003a8
 800350c:	200006dc 	.word	0x200006dc
 8003510:	40004400 	.word	0x40004400
 8003514:	200000d8 	.word	0x200000d8
 8003518:	200001d0 	.word	0x200001d0
 800351c:	200007e0 	.word	0x200007e0

08003520 <UartLowPrepareRaw>:
void UartLowPrepareRaw(uint16_t Difference, int32_t* InputHall, uint8_t Count)
{
 8003520:	b5b0      	push	{r4, r5, r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	6039      	str	r1, [r7, #0]
 800352a:	80fb      	strh	r3, [r7, #6]
 800352c:	4613      	mov	r3, r2
 800352e:	717b      	strb	r3, [r7, #5]
	if(InitionHall == 0)
 8003530:	4b7b      	ldr	r3, [pc, #492]	; (8003720 <UartLowPrepareRaw+0x200>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d115      	bne.n	8003564 <UartLowPrepareRaw+0x44>
	{
		for(int i = 0; i < Count; i++)
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e00b      	b.n	8003556 <UartLowPrepareRaw+0x36>
		{
			WheelsHall[i].LastHall = InputHall[i];
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	4413      	add	r3, r2
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4976      	ldr	r1, [pc, #472]	; (8003724 <UartLowPrepareRaw+0x204>)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		for(int i = 0; i < Count; i++)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3301      	adds	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	797b      	ldrb	r3, [r7, #5]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	429a      	cmp	r2, r3
 800355c:	dbef      	blt.n	800353e <UartLowPrepareRaw+0x1e>
		}
		InitionHall = 1;
 800355e:	4b70      	ldr	r3, [pc, #448]	; (8003720 <UartLowPrepareRaw+0x200>)
 8003560:	2201      	movs	r2, #1
 8003562:	701a      	strb	r2, [r3, #0]
	}
	for (int i = 0; i < Count; i++)
 8003564:	2300      	movs	r3, #0
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	e03e      	b.n	80035e8 <UartLowPrepareRaw+0xc8>
	{
		if (HallActualize(InputHall[i], WheelsHall[i].LastHall, Difference))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	4413      	add	r3, r2
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	4a6b      	ldr	r2, [pc, #428]	; (8003724 <UartLowPrepareRaw+0x204>)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800357c:	88fa      	ldrh	r2, [r7, #6]
 800357e:	4619      	mov	r1, r3
 8003580:	f000 f8da 	bl	8003738 <HallActualize>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d012      	beq.n	80035b0 <UartLowPrepareRaw+0x90>
		{
			WheelsHall[i].OutputHall = InputHall[i];
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4413      	add	r3, r2
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4963      	ldr	r1, [pc, #396]	; (8003724 <UartLowPrepareRaw+0x204>)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	605a      	str	r2, [r3, #4]
			WheelsHall[i].LastHall = InputHall[i];
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	4413      	add	r3, r2
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	495e      	ldr	r1, [pc, #376]	; (8003724 <UartLowPrepareRaw+0x204>)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		}
		if (!HallActualize(InputHall[i], WheelsHall[i].LastHall, Difference))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	4a5a      	ldr	r2, [pc, #360]	; (8003724 <UartLowPrepareRaw+0x204>)
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	4619      	mov	r1, r3
 80035c6:	f000 f8b7 	bl	8003738 <HallActualize>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d108      	bne.n	80035e2 <UartLowPrepareRaw+0xc2>
		{
			WheelsHall[i].LastHall = InputHall[i];
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4952      	ldr	r1, [pc, #328]	; (8003724 <UartLowPrepareRaw+0x204>)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < Count; i++)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	3301      	adds	r3, #1
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	797b      	ldrb	r3, [r7, #5]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	dbbc      	blt.n	800356a <UartLowPrepareRaw+0x4a>
		}
	}

	switch (SerialControlWheelsResponce.ParameterNumber)
 80035f0:	4b4d      	ldr	r3, [pc, #308]	; (8003728 <UartLowPrepareRaw+0x208>)
 80035f2:	785b      	ldrb	r3, [r3, #1]
 80035f4:	2b07      	cmp	r3, #7
 80035f6:	f200 8088 	bhi.w	800370a <UartLowPrepareRaw+0x1ea>
 80035fa:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <UartLowPrepareRaw+0xe0>)
 80035fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003600:	08003621 	.word	0x08003621
 8003604:	080036b7 	.word	0x080036b7
 8003608:	080036c3 	.word	0x080036c3
 800360c:	080036cf 	.word	0x080036cf
 8003610:	080036db 	.word	0x080036db
 8003614:	080036e7 	.word	0x080036e7
 8003618:	080036f3 	.word	0x080036f3
 800361c:	080036ff 	.word	0x080036ff
	{
		case 0:
			LowDiagnostic.Voltage = SerialControlWheelsResponce.ParameterValue;
 8003620:	4b41      	ldr	r3, [pc, #260]	; (8003728 <UartLowPrepareRaw+0x208>)
 8003622:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003626:	4a41      	ldr	r2, [pc, #260]	; (800372c <UartLowPrepareRaw+0x20c>)
 8003628:	6013      	str	r3, [r2, #0]
			LowDiagnostic.Battery += ((Interpolation(LowDiagnostic.Voltage, 28, 41) * 100.0) - LowDiagnostic.Battery) * 0.01;
 800362a:	4b40      	ldr	r3, [pc, #256]	; (800372c <UartLowPrepareRaw+0x20c>)
 800362c:	edd3 7a00 	vldr	s15, [r3]
 8003630:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8003730 <UartLowPrepareRaw+0x210>
 8003634:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 8003638:	eeb0 0a67 	vmov.f32	s0, s15
 800363c:	f000 f8b0 	bl	80037a0 <Interpolation>
 8003640:	ee10 3a10 	vmov	r3, s0
 8003644:	4618      	mov	r0, r3
 8003646:	f7fc ff23 	bl	8000490 <__aeabi_f2d>
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	4b39      	ldr	r3, [pc, #228]	; (8003734 <UartLowPrepareRaw+0x214>)
 8003650:	f7fc ff76 	bl	8000540 <__aeabi_dmul>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4614      	mov	r4, r2
 800365a:	461d      	mov	r5, r3
 800365c:	4b33      	ldr	r3, [pc, #204]	; (800372c <UartLowPrepareRaw+0x20c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fc ff15 	bl	8000490 <__aeabi_f2d>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4620      	mov	r0, r4
 800366c:	4629      	mov	r1, r5
 800366e:	f7fc fdaf 	bl	80001d0 <__aeabi_dsub>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	a327      	add	r3, pc, #156	; (adr r3, 8003718 <UartLowPrepareRaw+0x1f8>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f7fc ff5e 	bl	8000540 <__aeabi_dmul>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4614      	mov	r4, r2
 800368a:	461d      	mov	r5, r3
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <UartLowPrepareRaw+0x20c>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4618      	mov	r0, r3
 8003692:	f7fc fefd 	bl	8000490 <__aeabi_f2d>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4620      	mov	r0, r4
 800369c:	4629      	mov	r1, r5
 800369e:	f7fc fd99 	bl	80001d4 <__adddf3>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4610      	mov	r0, r2
 80036a8:	4619      	mov	r1, r3
 80036aa:	f7fd fa0b 	bl	8000ac4 <__aeabi_d2f>
 80036ae:	4603      	mov	r3, r0
 80036b0:	4a1e      	ldr	r2, [pc, #120]	; (800372c <UartLowPrepareRaw+0x20c>)
 80036b2:	6053      	str	r3, [r2, #4]
		  	break;
 80036b4:	e029      	b.n	800370a <UartLowPrepareRaw+0x1ea>
		case 1:
			LowDiagnostic.CurrentLeft = SerialControlWheelsResponce.ParameterValue;
 80036b6:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <UartLowPrepareRaw+0x208>)
 80036b8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80036bc:	4a1b      	ldr	r2, [pc, #108]	; (800372c <UartLowPrepareRaw+0x20c>)
 80036be:	6093      	str	r3, [r2, #8]
			break;
 80036c0:	e023      	b.n	800370a <UartLowPrepareRaw+0x1ea>
		case 2:
			LowDiagnostic.CurrentRight = SerialControlWheelsResponce.ParameterValue;
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <UartLowPrepareRaw+0x208>)
 80036c4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <UartLowPrepareRaw+0x20c>)
 80036ca:	60d3      	str	r3, [r2, #12]
			break;
 80036cc:	e01d      	b.n	800370a <UartLowPrepareRaw+0x1ea>
		case 3:
			LowDiagnostic.RPSLeft = SerialControlWheelsResponce.ParameterValue;
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <UartLowPrepareRaw+0x208>)
 80036d0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80036d4:	4a15      	ldr	r2, [pc, #84]	; (800372c <UartLowPrepareRaw+0x20c>)
 80036d6:	6113      	str	r3, [r2, #16]
			break;
 80036d8:	e017      	b.n	800370a <UartLowPrepareRaw+0x1ea>
		case 4:
			LowDiagnostic.RPSRight = SerialControlWheelsResponce.ParameterValue;
 80036da:	4b13      	ldr	r3, [pc, #76]	; (8003728 <UartLowPrepareRaw+0x208>)
 80036dc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80036e0:	4a12      	ldr	r2, [pc, #72]	; (800372c <UartLowPrepareRaw+0x20c>)
 80036e2:	6153      	str	r3, [r2, #20]
			break;
 80036e4:	e011      	b.n	800370a <UartLowPrepareRaw+0x1ea>
		case 5:
			LowDiagnostic.OverCurrCount = SerialControlWheelsResponce.ParameterValue;
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <UartLowPrepareRaw+0x208>)
 80036e8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80036ec:	4a0f      	ldr	r2, [pc, #60]	; (800372c <UartLowPrepareRaw+0x20c>)
 80036ee:	6193      	str	r3, [r2, #24]
			break;
 80036f0:	e00b      	b.n	800370a <UartLowPrepareRaw+0x1ea>
		case 6:
			LowDiagnostic.ConnErrCount = SerialControlWheelsResponce.ParameterValue;
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <UartLowPrepareRaw+0x208>)
 80036f4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80036f8:	4a0c      	ldr	r2, [pc, #48]	; (800372c <UartLowPrepareRaw+0x20c>)
 80036fa:	61d3      	str	r3, [r2, #28]
			break;
 80036fc:	e005      	b.n	800370a <UartLowPrepareRaw+0x1ea>
		case 7:
			LowDiagnostic.CommTime = SerialControlWheelsResponce.ParameterValue;
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <UartLowPrepareRaw+0x208>)
 8003700:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003704:	4a09      	ldr	r2, [pc, #36]	; (800372c <UartLowPrepareRaw+0x20c>)
 8003706:	6213      	str	r3, [r2, #32]
		  	break;
 8003708:	bf00      	nop
	}
}
 800370a:	bf00      	nop
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bdb0      	pop	{r4, r5, r7, pc}
 8003712:	bf00      	nop
 8003714:	f3af 8000 	nop.w
 8003718:	47ae147b 	.word	0x47ae147b
 800371c:	3f847ae1 	.word	0x3f847ae1
 8003720:	200000da 	.word	0x200000da
 8003724:	20000390 	.word	0x20000390
 8003728:	200001d0 	.word	0x200001d0
 800372c:	20000200 	.word	0x20000200
 8003730:	42240000 	.word	0x42240000
 8003734:	40590000 	.word	0x40590000

08003738 <HallActualize>:
int HallActualize(int32_t NewStep, int32_t LastStep, int32_t Difference)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
	int32_t CalcDiff = abs(LastStep - NewStep);
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	bfb8      	it	lt
 800374e:	425b      	neglt	r3, r3
 8003750:	617b      	str	r3, [r7, #20]
	if (CalcDiff <= Difference)
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	429a      	cmp	r2, r3
 8003758:	dc01      	bgt.n	800375e <HallActualize+0x26>
	{
		return 1;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HallActualize+0x28>
	}
	return 0;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <GPIOUpdate>:
void GPIOUpdate()
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
	FootButtonUp = HAL_GPIO_ReadPin(SYSTEM_HARDWARE_PARKING_LEG_UP_PORT, SYSTEM_HARDWARE_PARKING_LEG_UP_PIN);
 8003770:	2120      	movs	r1, #32
 8003772:	4808      	ldr	r0, [pc, #32]	; (8003794 <GPIOUpdate+0x28>)
 8003774:	f004 fb96 	bl	8007ea4 <HAL_GPIO_ReadPin>
 8003778:	4603      	mov	r3, r0
 800377a:	461a      	mov	r2, r3
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <GPIOUpdate+0x2c>)
 800377e:	701a      	strb	r2, [r3, #0]
	FootButtonDown = HAL_GPIO_ReadPin(SYSTEM_HARDWARE_PARKING_LEG_DOWN_PORT, SYSTEM_HARDWARE_PARKING_LEG_DOWN_PIN);
 8003780:	2110      	movs	r1, #16
 8003782:	4804      	ldr	r0, [pc, #16]	; (8003794 <GPIOUpdate+0x28>)
 8003784:	f004 fb8e 	bl	8007ea4 <HAL_GPIO_ReadPin>
 8003788:	4603      	mov	r3, r0
 800378a:	461a      	mov	r2, r3
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <GPIOUpdate+0x30>)
 800378e:	701a      	strb	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	200000db 	.word	0x200000db
 800379c:	200000dc 	.word	0x200000dc

080037a0 <Interpolation>:
float Interpolation(float Value, float Min, float Max)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80037aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80037ae:	ed87 1a01 	vstr	s2, [r7, #4]
    float Result = (Value - Min) / (Max - Min);
 80037b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80037b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80037be:	ed97 7a01 	vldr	s14, [r7, #4]
 80037c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ce:	edc7 7a05 	vstr	s15, [r7, #20]
    if (Result > 1)
 80037d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e2:	dd02      	ble.n	80037ea <Interpolation+0x4a>
    {
        return 1;
 80037e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80037e8:	e00a      	b.n	8003800 <Interpolation+0x60>
    }
    if (Result < 0)
 80037ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80037ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	d502      	bpl.n	80037fe <Interpolation+0x5e>
    {
        return 0;
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	e000      	b.n	8003800 <Interpolation+0x60>
    }
    return Result;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	ee07 3a90 	vmov	s15, r3
}
 8003804:	eeb0 0a67 	vmov.f32	s0, s15
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <ADCInit>:
void ADCInit()
{
 8003814:	b480      	push	{r7}
 8003816:	b08b      	sub	sp, #44	; 0x2c
 8003818:	af00      	add	r7, sp, #0
	uint16_t Raw[SYSTEM_HARDWARE_ADC_Channel_Count];
	uint16_t Sensors[SYSTEM_HARDWARE_ADC_Channel_Count - 3];
	float Amperage[SYSTEM_HARDWARE_ADC_Channel_Count - 5];
	AdcModule.Raw = Raw;
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <ADCInit+0x28>)
 800381c:	f107 0318 	add.w	r3, r7, #24
 8003820:	6013      	str	r3, [r2, #0]
	AdcModule.Sensors = Sensors;
 8003822:	4a06      	ldr	r2, [pc, #24]	; (800383c <ADCInit+0x28>)
 8003824:	f107 030c 	add.w	r3, r7, #12
 8003828:	6053      	str	r3, [r2, #4]
	AdcModule.Amperage = Amperage;
 800382a:	4a04      	ldr	r2, [pc, #16]	; (800383c <ADCInit+0x28>)
 800382c:	463b      	mov	r3, r7
 800382e:	6093      	str	r3, [r2, #8]
}
 8003830:	bf00      	nop
 8003832:	372c      	adds	r7, #44	; 0x2c
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	20000234 	.word	0x20000234

08003840 <ADCUpdate>:
void ADCUpdate()
{
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++)
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	e00e      	b.n	800386a <ADCUpdate+0x2a>
	{
		AdcModule.Raw[i] = ReadAdcChanel(i);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	b2d9      	uxtb	r1, r3
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <ADCUpdate+0x88>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	18d4      	adds	r4, r2, r3
 800385a:	4608      	mov	r0, r1
 800385c:	f000 f8ea 	bl	8003a34 <ReadAdcChanel>
 8003860:	4603      	mov	r3, r0
 8003862:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3301      	adds	r3, #1
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b07      	cmp	r3, #7
 800386e:	dded      	ble.n	800384c <ADCUpdate+0xc>
	}
#ifndef DEBUG_NO_ADC_ALL
#ifndef DEBUG_NO_ADC_RAW
	DebugADCRawFL = AdcModule.Raw[0];
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <ADCUpdate+0x88>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	881a      	ldrh	r2, [r3, #0]
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <ADCUpdate+0x8c>)
 8003878:	801a      	strh	r2, [r3, #0]
	DebugADCRawFR = AdcModule.Raw[1];
 800387a:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <ADCUpdate+0x88>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	885a      	ldrh	r2, [r3, #2]
 8003880:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <ADCUpdate+0x90>)
 8003882:	801a      	strh	r2, [r3, #0]
	DebugADCRawBL = AdcModule.Raw[2];
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <ADCUpdate+0x88>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	889a      	ldrh	r2, [r3, #4]
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <ADCUpdate+0x94>)
 800388c:	801a      	strh	r2, [r3, #0]
	DebugADCRawBR = AdcModule.Raw[3];
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <ADCUpdate+0x88>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	88da      	ldrh	r2, [r3, #6]
 8003894:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <ADCUpdate+0x98>)
 8003896:	801a      	strh	r2, [r3, #0]
	DebugADCRawCN = AdcModule.Raw[4];
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <ADCUpdate+0x88>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	891a      	ldrh	r2, [r3, #8]
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <ADCUpdate+0x9c>)
 80038a0:	801a      	strh	r2, [r3, #0]
	DebugADCRaw36 = AdcModule.Raw[5];
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <ADCUpdate+0x88>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	895a      	ldrh	r2, [r3, #10]
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <ADCUpdate+0xa0>)
 80038aa:	801a      	strh	r2, [r3, #0]
	DebugADCRaw12 = AdcModule.Raw[6];
 80038ac:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <ADCUpdate+0x88>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	899a      	ldrh	r2, [r3, #12]
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <ADCUpdate+0xa4>)
 80038b4:	801a      	strh	r2, [r3, #0]
	DebugADCRaw5 = AdcModule.Raw[7];
 80038b6:	4b04      	ldr	r3, [pc, #16]	; (80038c8 <ADCUpdate+0x88>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	89da      	ldrh	r2, [r3, #14]
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <ADCUpdate+0xa8>)
 80038be:	801a      	strh	r2, [r3, #0]
#endif
#endif
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd90      	pop	{r4, r7, pc}
 80038c8:	20000234 	.word	0x20000234
 80038cc:	20000174 	.word	0x20000174
 80038d0:	2000017c 	.word	0x2000017c
 80038d4:	200001c8 	.word	0x200001c8
 80038d8:	200001ac 	.word	0x200001ac
 80038dc:	200001ca 	.word	0x200001ca
 80038e0:	20000344 	.word	0x20000344
 80038e4:	200001e0 	.word	0x200001e0
 80038e8:	20000310 	.word	0x20000310
 80038ec:	00000000 	.word	0x00000000

080038f0 <ADCPrepare>:
void ADCPrepare()
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count - 3; i++) // Sensor
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e00e      	b.n	800391a <ADCPrepare+0x2a>
	{
		AdcModule.Sensors[i] = AdcModule.Raw[i] * 1; // No conversion
 80038fc:	4b4c      	ldr	r3, [pc, #304]	; (8003a30 <ADCPrepare+0x140>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	441a      	add	r2, r3
 8003906:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <ADCPrepare+0x140>)
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	440b      	add	r3, r1
 8003910:	8812      	ldrh	r2, [r2, #0]
 8003912:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count - 3; i++) // Sensor
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3301      	adds	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b04      	cmp	r3, #4
 800391e:	dded      	ble.n	80038fc <ADCPrepare+0xc>
	}
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 3; i < SYSTEM_HARDWARE_ADC_Channel_Count - 2; i++) // Current 30A
 8003920:	2305      	movs	r3, #5
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	e032      	b.n	800398c <ADCPrepare+0x9c>
	{
		AdcModule.Amperage[i - (SYSTEM_HARDWARE_ADC_Channel_Count - 3)] = (AdcModule.Raw[i] * 3.3 / 4095) * 0.066;
 8003926:	4b42      	ldr	r3, [pc, #264]	; (8003a30 <ADCPrepare+0x140>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc fd9a 	bl	800046c <__aeabi_i2d>
 8003938:	a335      	add	r3, pc, #212	; (adr r3, 8003a10 <ADCPrepare+0x120>)
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	f7fc fdff 	bl	8000540 <__aeabi_dmul>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4610      	mov	r0, r2
 8003948:	4619      	mov	r1, r3
 800394a:	a333      	add	r3, pc, #204	; (adr r3, 8003a18 <ADCPrepare+0x128>)
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	f7fc ff20 	bl	8000794 <__aeabi_ddiv>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	a330      	add	r3, pc, #192	; (adr r3, 8003a20 <ADCPrepare+0x130>)
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	f7fc fded 	bl	8000540 <__aeabi_dmul>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	4b30      	ldr	r3, [pc, #192]	; (8003a30 <ADCPrepare+0x140>)
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003978:	3b05      	subs	r3, #5
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	18d4      	adds	r4, r2, r3
 800397e:	f7fd f8a1 	bl	8000ac4 <__aeabi_d2f>
 8003982:	4603      	mov	r3, r0
 8003984:	6023      	str	r3, [r4, #0]
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 3; i < SYSTEM_HARDWARE_ADC_Channel_Count - 2; i++) // Current 30A
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3301      	adds	r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b05      	cmp	r3, #5
 8003990:	ddc9      	ble.n	8003926 <ADCPrepare+0x36>
	}
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 2; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++) // Current 20A
 8003992:	2306      	movs	r3, #6
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	e032      	b.n	80039fe <ADCPrepare+0x10e>
	{
		AdcModule.Amperage[i - (SYSTEM_HARDWARE_ADC_Channel_Count - 2)] = (AdcModule.Raw[i] * 3.3 / 4095) * 0.1;
 8003998:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <ADCPrepare+0x140>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fc fd61 	bl	800046c <__aeabi_i2d>
 80039aa:	a319      	add	r3, pc, #100	; (adr r3, 8003a10 <ADCPrepare+0x120>)
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f7fc fdc6 	bl	8000540 <__aeabi_dmul>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	a316      	add	r3, pc, #88	; (adr r3, 8003a18 <ADCPrepare+0x128>)
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	f7fc fee7 	bl	8000794 <__aeabi_ddiv>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4610      	mov	r0, r2
 80039cc:	4619      	mov	r1, r3
 80039ce:	a316      	add	r3, pc, #88	; (adr r3, 8003a28 <ADCPrepare+0x138>)
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f7fc fdb4 	bl	8000540 <__aeabi_dmul>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4610      	mov	r0, r2
 80039de:	4619      	mov	r1, r3
 80039e0:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <ADCPrepare+0x140>)
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039ea:	3b06      	subs	r3, #6
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	18d4      	adds	r4, r2, r3
 80039f0:	f7fd f868 	bl	8000ac4 <__aeabi_d2f>
 80039f4:	4603      	mov	r3, r0
 80039f6:	6023      	str	r3, [r4, #0]
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 2; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++) // Current 20A
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3301      	adds	r3, #1
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b07      	cmp	r3, #7
 8003a02:	ddc9      	ble.n	8003998 <ADCPrepare+0xa8>
	}
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd90      	pop	{r4, r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	66666666 	.word	0x66666666
 8003a14:	400a6666 	.word	0x400a6666
 8003a18:	00000000 	.word	0x00000000
 8003a1c:	40affe00 	.word	0x40affe00
 8003a20:	4189374c 	.word	0x4189374c
 8003a24:	3fb0e560 	.word	0x3fb0e560
 8003a28:	9999999a 	.word	0x9999999a
 8003a2c:	3fb99999 	.word	0x3fb99999
 8003a30:	20000234 	.word	0x20000234

08003a34 <ReadAdcChanel>:
uint16_t ReadAdcChanel(uint8_t Channel)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	60da      	str	r2, [r3, #12]

	uint16_t RetVal;

	switch(Channel)
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	2b07      	cmp	r3, #7
 8003a50:	d82a      	bhi.n	8003aa8 <ReadAdcChanel+0x74>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <ReadAdcChanel+0x24>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a79 	.word	0x08003a79
 8003a5c:	08003a7f 	.word	0x08003a7f
 8003a60:	08003a85 	.word	0x08003a85
 8003a64:	08003a8b 	.word	0x08003a8b
 8003a68:	08003a91 	.word	0x08003a91
 8003a6c:	08003a97 	.word	0x08003a97
 8003a70:	08003a9d 	.word	0x08003a9d
 8003a74:	08003aa3 	.word	0x08003aa3
	{
	case 0:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_FL;
 8003a78:	230b      	movs	r3, #11
 8003a7a:	60fb      	str	r3, [r7, #12]
		break;
 8003a7c:	e014      	b.n	8003aa8 <ReadAdcChanel+0x74>
	case 1:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_FR;
 8003a7e:	230c      	movs	r3, #12
 8003a80:	60fb      	str	r3, [r7, #12]
		break;
 8003a82:	e011      	b.n	8003aa8 <ReadAdcChanel+0x74>
	case 2:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_BL;
 8003a84:	2301      	movs	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
		break;
 8003a88:	e00e      	b.n	8003aa8 <ReadAdcChanel+0x74>
	case 3:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_BR;
 8003a8a:	230a      	movs	r3, #10
 8003a8c:	60fb      	str	r3, [r7, #12]
		break;
 8003a8e:	e00b      	b.n	8003aa8 <ReadAdcChanel+0x74>
	case 4:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_CN;
 8003a90:	2302      	movs	r3, #2
 8003a92:	60fb      	str	r3, [r7, #12]
		break;
 8003a94:	e008      	b.n	8003aa8 <ReadAdcChanel+0x74>
	case 5:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_36;
 8003a96:	2309      	movs	r3, #9
 8003a98:	60fb      	str	r3, [r7, #12]
		break;
 8003a9a:	e005      	b.n	8003aa8 <ReadAdcChanel+0x74>
	case 6:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_12;
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	60fb      	str	r3, [r7, #12]
		break;
 8003aa0:	e002      	b.n	8003aa8 <ReadAdcChanel+0x74>
	case 7:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_5;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
		break;
 8003aa6:	bf00      	nop
	}

	sConfig.Rank = 1;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(SYSTEM_HARDWARE_ADC, &sConfig) != HAL_OK)
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	480e      	ldr	r0, [pc, #56]	; (8003af0 <ReadAdcChanel+0xbc>)
 8003ab8:	f003 f926 	bl	8006d08 <HAL_ADC_ConfigChannel>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <ReadAdcChanel+0x92>
	{
		Error_Handler();
 8003ac2:	f002 f8c7 	bl	8005c54 <Error_Handler>
	}
	HAL_ADC_Start(SYSTEM_HARDWARE_ADC);
 8003ac6:	480a      	ldr	r0, [pc, #40]	; (8003af0 <ReadAdcChanel+0xbc>)
 8003ac8:	f002 ff80 	bl	80069cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(SYSTEM_HARDWARE_ADC, 1000);
 8003acc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ad0:	4807      	ldr	r0, [pc, #28]	; (8003af0 <ReadAdcChanel+0xbc>)
 8003ad2:	f003 f880 	bl	8006bd6 <HAL_ADC_PollForConversion>
	RetVal = HAL_ADC_GetValue(SYSTEM_HARDWARE_ADC);
 8003ad6:	4806      	ldr	r0, [pc, #24]	; (8003af0 <ReadAdcChanel+0xbc>)
 8003ad8:	f003 f908 	bl	8006cec <HAL_ADC_GetValue>
 8003adc:	4603      	mov	r3, r0
 8003ade:	83fb      	strh	r3, [r7, #30]
	HAL_ADC_Stop(SYSTEM_HARDWARE_ADC);
 8003ae0:	4803      	ldr	r0, [pc, #12]	; (8003af0 <ReadAdcChanel+0xbc>)
 8003ae2:	f003 f845 	bl	8006b70 <HAL_ADC_Stop>
	return RetVal;
 8003ae6:	8bfb      	ldrh	r3, [r7, #30]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000128 	.word	0x20000128

08003af4 <SerialLowControlLoop>:
void SerialLowControlLoop()
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
	SerialControlWheelsRequest.ControlMode = 0;
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <SerialLowControlLoop+0x2c>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
	SerialControlWheelsRequest.ParameterNumber = 0;
 8003afe:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <SerialLowControlLoop+0x2c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	705a      	strb	r2, [r3, #1]
	//SerialControlWheelsRequest.WheelLeft = BTControl.Front;
	//SerialControlWheelsRequest.WheelRight = BTControl.Turn;
	SerialControlWheelsRequest.CR=13;
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <SerialLowControlLoop+0x2c>)
 8003b06:	220d      	movs	r2, #13
 8003b08:	739a      	strb	r2, [r3, #14]
	SerialControlWheelsRequest.LF=10;
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <SerialLowControlLoop+0x2c>)
 8003b0c:	220a      	movs	r2, #10
 8003b0e:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsRequest.Buffer, WHEELS_REQUEST_SIZE);
 8003b10:	2210      	movs	r2, #16
 8003b12:	4903      	ldr	r1, [pc, #12]	; (8003b20 <SerialLowControlLoop+0x2c>)
 8003b14:	4803      	ldr	r0, [pc, #12]	; (8003b24 <SerialLowControlLoop+0x30>)
 8003b16:	f006 fa65 	bl	8009fe4 <HAL_UART_Transmit_DMA>
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200001ec 	.word	0x200001ec
 8003b24:	200007e0 	.word	0x200007e0

08003b28 <ImuAccelUpdate>:
void ImuAccelUpdate()
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	ed2d 8b02 	vpush	{d8}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
	axises NewData;
	icm20948_accel_read(&NewData);
 8003b32:	1d3b      	adds	r3, r7, #4
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe fe6f 	bl	8002818 <icm20948_accel_read>

	ResAccel.x += roundf((((NewData.x / 16384) - ResAccel.x) * SYSTEM_IMU_ACCEL_FILTER) * 100) / 100;
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003b3c:	ed93 8a00 	vldr	s16, [r3]
 8003b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b44:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8003cb4 <ImuAccelUpdate+0x18c>
 8003b48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b4c:	4b58      	ldr	r3, [pc, #352]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003b4e:	edd3 7a00 	vldr	s15, [r3]
 8003b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b56:	ee17 0a90 	vmov	r0, s15
 8003b5a:	f7fc fc99 	bl	8000490 <__aeabi_f2d>
 8003b5e:	a352      	add	r3, pc, #328	; (adr r3, 8003ca8 <ImuAccelUpdate+0x180>)
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f7fc fcec 	bl	8000540 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	4b50      	ldr	r3, [pc, #320]	; (8003cb8 <ImuAccelUpdate+0x190>)
 8003b76:	f7fc fce3 	bl	8000540 <__aeabi_dmul>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4619      	mov	r1, r3
 8003b82:	f7fc ff9f 	bl	8000ac4 <__aeabi_d2f>
 8003b86:	4603      	mov	r3, r0
 8003b88:	ee00 3a10 	vmov	s0, r3
 8003b8c:	f007 fb52 	bl	800b234 <roundf>
 8003b90:	eeb0 7a40 	vmov.f32	s14, s0
 8003b94:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003cbc <ImuAccelUpdate+0x194>
 8003b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b9c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003ba0:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003ba2:	edc3 7a00 	vstr	s15, [r3]
	ResAccel.y += roundf((((NewData.y / 16384) - ResAccel.y) * SYSTEM_IMU_ACCEL_FILTER) * 100) / 100;
 8003ba6:	4b42      	ldr	r3, [pc, #264]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003ba8:	ed93 8a01 	vldr	s16, [r3, #4]
 8003bac:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bb0:	eddf 6a40 	vldr	s13, [pc, #256]	; 8003cb4 <ImuAccelUpdate+0x18c>
 8003bb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bb8:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003bba:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bc2:	ee17 0a90 	vmov	r0, s15
 8003bc6:	f7fc fc63 	bl	8000490 <__aeabi_f2d>
 8003bca:	a337      	add	r3, pc, #220	; (adr r3, 8003ca8 <ImuAccelUpdate+0x180>)
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7fc fcb6 	bl	8000540 <__aeabi_dmul>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	4b35      	ldr	r3, [pc, #212]	; (8003cb8 <ImuAccelUpdate+0x190>)
 8003be2:	f7fc fcad 	bl	8000540 <__aeabi_dmul>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	f7fc ff69 	bl	8000ac4 <__aeabi_d2f>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	ee00 3a10 	vmov	s0, r3
 8003bf8:	f007 fb1c 	bl	800b234 <roundf>
 8003bfc:	eeb0 7a40 	vmov.f32	s14, s0
 8003c00:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8003cbc <ImuAccelUpdate+0x194>
 8003c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c08:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003c0c:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003c0e:	edc3 7a01 	vstr	s15, [r3, #4]
	ResAccel.z += roundf((((NewData.z / 16384) - ResAccel.z) * SYSTEM_IMU_ACCEL_FILTER) * 100) / 100;
 8003c12:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003c14:	ed93 8a02 	vldr	s16, [r3, #8]
 8003c18:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c1c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003cb4 <ImuAccelUpdate+0x18c>
 8003c20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c24:	4b22      	ldr	r3, [pc, #136]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003c26:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c2e:	ee17 0a90 	vmov	r0, s15
 8003c32:	f7fc fc2d 	bl	8000490 <__aeabi_f2d>
 8003c36:	a31c      	add	r3, pc, #112	; (adr r3, 8003ca8 <ImuAccelUpdate+0x180>)
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f7fc fc80 	bl	8000540 <__aeabi_dmul>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <ImuAccelUpdate+0x190>)
 8003c4e:	f7fc fc77 	bl	8000540 <__aeabi_dmul>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f7fc ff33 	bl	8000ac4 <__aeabi_d2f>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	ee00 3a10 	vmov	s0, r3
 8003c64:	f007 fae6 	bl	800b234 <roundf>
 8003c68:	eeb0 7a40 	vmov.f32	s14, s0
 8003c6c:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003cbc <ImuAccelUpdate+0x194>
 8003c70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c74:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003c78:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003c7a:	edc3 7a02 	vstr	s15, [r3, #8]

	DebugImuAccX = ResAccel.x;
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a0f      	ldr	r2, [pc, #60]	; (8003cc0 <ImuAccelUpdate+0x198>)
 8003c84:	6013      	str	r3, [r2, #0]
	DebugImuAccY = ResAccel.y;
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4a0e      	ldr	r2, [pc, #56]	; (8003cc4 <ImuAccelUpdate+0x19c>)
 8003c8c:	6013      	str	r3, [r2, #0]
	DebugImuAccZ = ResAccel.z;
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <ImuAccelUpdate+0x188>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	4a0d      	ldr	r2, [pc, #52]	; (8003cc8 <ImuAccelUpdate+0x1a0>)
 8003c94:	6013      	str	r3, [r2, #0]
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	ecbd 8b02 	vpop	{d8}
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	f3af 8000 	nop.w
 8003ca8:	9999999a 	.word	0x9999999a
 8003cac:	3fb99999 	.word	0x3fb99999
 8003cb0:	20000290 	.word	0x20000290
 8003cb4:	46800000 	.word	0x46800000
 8003cb8:	40590000 	.word	0x40590000
 8003cbc:	42c80000 	.word	0x42c80000
 8003cc0:	2000024c 	.word	0x2000024c
 8003cc4:	200002b8 	.word	0x200002b8
 8003cc8:	200001a8 	.word	0x200001a8
 8003ccc:	00000000 	.word	0x00000000

08003cd0 <ImuGyroUpdate>:
void ImuGyroUpdate()
{
 8003cd0:	b5b0      	push	{r4, r5, r7, lr}
 8003cd2:	ed2d 8b02 	vpush	{d8}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
	axises NewData;
	icm20948_gyro_read(&NewData);
 8003cda:	1d3b      	adds	r3, r7, #4
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe fd58 	bl	8002792 <icm20948_gyro_read>

	ResGyro.x += roundf((((NewData.x / 16.4) - ResGyro.x) * SYSTEM_IMU_GYRO_FILTER) * 100) / 100;
 8003ce2:	4b71      	ldr	r3, [pc, #452]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003ce4:	ed93 8a00 	vldr	s16, [r3]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fbd0 	bl	8000490 <__aeabi_f2d>
 8003cf0:	a369      	add	r3, pc, #420	; (adr r3, 8003e98 <ImuGyroUpdate+0x1c8>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f7fc fd4d 	bl	8000794 <__aeabi_ddiv>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4614      	mov	r4, r2
 8003d00:	461d      	mov	r5, r3
 8003d02:	4b69      	ldr	r3, [pc, #420]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fc fbc2 	bl	8000490 <__aeabi_f2d>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4620      	mov	r0, r4
 8003d12:	4629      	mov	r1, r5
 8003d14:	f7fc fa5c 	bl	80001d0 <__aeabi_dsub>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	a35f      	add	r3, pc, #380	; (adr r3, 8003ea0 <ImuGyroUpdate+0x1d0>)
 8003d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d26:	f7fc fc0b 	bl	8000540 <__aeabi_dmul>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <ImuGyroUpdate+0x1dc>)
 8003d38:	f7fc fc02 	bl	8000540 <__aeabi_dmul>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4610      	mov	r0, r2
 8003d42:	4619      	mov	r1, r3
 8003d44:	f7fc febe 	bl	8000ac4 <__aeabi_d2f>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	ee00 3a10 	vmov	s0, r3
 8003d4e:	f007 fa71 	bl	800b234 <roundf>
 8003d52:	eeb0 7a40 	vmov.f32	s14, s0
 8003d56:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003eb0 <ImuGyroUpdate+0x1e0>
 8003d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d5e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003d62:	4b51      	ldr	r3, [pc, #324]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003d64:	edc3 7a00 	vstr	s15, [r3]
	ResGyro.y += roundf((((NewData.y / 16.4) - ResGyro.y) * SYSTEM_IMU_GYRO_FILTER) * 100) / 100;
 8003d68:	4b4f      	ldr	r3, [pc, #316]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003d6a:	ed93 8a01 	vldr	s16, [r3, #4]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fc fb8d 	bl	8000490 <__aeabi_f2d>
 8003d76:	a348      	add	r3, pc, #288	; (adr r3, 8003e98 <ImuGyroUpdate+0x1c8>)
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f7fc fd0a 	bl	8000794 <__aeabi_ddiv>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4614      	mov	r4, r2
 8003d86:	461d      	mov	r5, r3
 8003d88:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc fb7f 	bl	8000490 <__aeabi_f2d>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4620      	mov	r0, r4
 8003d98:	4629      	mov	r1, r5
 8003d9a:	f7fc fa19 	bl	80001d0 <__aeabi_dsub>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4610      	mov	r0, r2
 8003da4:	4619      	mov	r1, r3
 8003da6:	a33e      	add	r3, pc, #248	; (adr r3, 8003ea0 <ImuGyroUpdate+0x1d0>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fbc8 	bl	8000540 <__aeabi_dmul>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <ImuGyroUpdate+0x1dc>)
 8003dbe:	f7fc fbbf 	bl	8000540 <__aeabi_dmul>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f7fc fe7b 	bl	8000ac4 <__aeabi_d2f>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	ee00 3a10 	vmov	s0, r3
 8003dd4:	f007 fa2e 	bl	800b234 <roundf>
 8003dd8:	eeb0 7a40 	vmov.f32	s14, s0
 8003ddc:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003eb0 <ImuGyroUpdate+0x1e0>
 8003de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003de4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003de8:	4b2f      	ldr	r3, [pc, #188]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003dea:	edc3 7a01 	vstr	s15, [r3, #4]
	ResGyro.z += roundf((((NewData.z / 16.4) - ResGyro.z) * SYSTEM_IMU_GYRO_FILTER) * 100) / 100;
 8003dee:	4b2e      	ldr	r3, [pc, #184]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003df0:	ed93 8a02 	vldr	s16, [r3, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fc fb4a 	bl	8000490 <__aeabi_f2d>
 8003dfc:	a326      	add	r3, pc, #152	; (adr r3, 8003e98 <ImuGyroUpdate+0x1c8>)
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f7fc fcc7 	bl	8000794 <__aeabi_ddiv>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4614      	mov	r4, r2
 8003e0c:	461d      	mov	r5, r3
 8003e0e:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fc fb3c 	bl	8000490 <__aeabi_f2d>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4620      	mov	r0, r4
 8003e1e:	4629      	mov	r1, r5
 8003e20:	f7fc f9d6 	bl	80001d0 <__aeabi_dsub>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	a31c      	add	r3, pc, #112	; (adr r3, 8003ea0 <ImuGyroUpdate+0x1d0>)
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	f7fc fb85 	bl	8000540 <__aeabi_dmul>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <ImuGyroUpdate+0x1dc>)
 8003e44:	f7fc fb7c 	bl	8000540 <__aeabi_dmul>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f7fc fe38 	bl	8000ac4 <__aeabi_d2f>
 8003e54:	4603      	mov	r3, r0
 8003e56:	ee00 3a10 	vmov	s0, r3
 8003e5a:	f007 f9eb 	bl	800b234 <roundf>
 8003e5e:	eeb0 7a40 	vmov.f32	s14, s0
 8003e62:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003eb0 <ImuGyroUpdate+0x1e0>
 8003e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e6a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003e70:	edc3 7a02 	vstr	s15, [r3, #8]

	DebugImuGyrX = ResGyro.x;
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a0e      	ldr	r2, [pc, #56]	; (8003eb4 <ImuGyroUpdate+0x1e4>)
 8003e7a:	6013      	str	r3, [r2, #0]
	DebugImuGyrY = ResGyro.y;
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a0d      	ldr	r2, [pc, #52]	; (8003eb8 <ImuGyroUpdate+0x1e8>)
 8003e82:	6013      	str	r3, [r2, #0]
	DebugImuGyrZ = ResGyro.z;
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <ImuGyroUpdate+0x1d8>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <ImuGyroUpdate+0x1ec>)
 8003e8a:	6013      	str	r3, [r2, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	ecbd 8b02 	vpop	{d8}
 8003e96:	bdb0      	pop	{r4, r5, r7, pc}
 8003e98:	66666666 	.word	0x66666666
 8003e9c:	40306666 	.word	0x40306666
 8003ea0:	9999999a 	.word	0x9999999a
 8003ea4:	3fb99999 	.word	0x3fb99999
 8003ea8:	200001b0 	.word	0x200001b0
 8003eac:	40590000 	.word	0x40590000
 8003eb0:	42c80000 	.word	0x42c80000
 8003eb4:	2000019c 	.word	0x2000019c
 8003eb8:	2000030c 	.word	0x2000030c
 8003ebc:	200002c8 	.word	0x200002c8

08003ec0 <ImuMagUpdate>:
void ImuMagUpdate()
{
 8003ec0:	b5b0      	push	{r4, r5, r7, lr}
 8003ec2:	ed2d 8b02 	vpush	{d8}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
	axises NewData;
	ak09916_mag_read(&NewData);
 8003eca:	1d3b      	adds	r3, r7, #4
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe fce6 	bl	800289e <ak09916_mag_read>

	ResMag.x += roundf((((NewData.x * 0.15) - ResMag.x) * SYSTEM_IMU_MAG_FILTER) * 100) / 100;
 8003ed2:	4b71      	ldr	r3, [pc, #452]	; (8004098 <ImuMagUpdate+0x1d8>)
 8003ed4:	ed93 8a00 	vldr	s16, [r3]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fad8 	bl	8000490 <__aeabi_f2d>
 8003ee0:	a369      	add	r3, pc, #420	; (adr r3, 8004088 <ImuMagUpdate+0x1c8>)
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f7fc fb2b 	bl	8000540 <__aeabi_dmul>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4614      	mov	r4, r2
 8003ef0:	461d      	mov	r5, r3
 8003ef2:	4b69      	ldr	r3, [pc, #420]	; (8004098 <ImuMagUpdate+0x1d8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fc faca 	bl	8000490 <__aeabi_f2d>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4620      	mov	r0, r4
 8003f02:	4629      	mov	r1, r5
 8003f04:	f7fc f964 	bl	80001d0 <__aeabi_dsub>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	a35f      	add	r3, pc, #380	; (adr r3, 8004090 <ImuMagUpdate+0x1d0>)
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f7fc fb13 	bl	8000540 <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4610      	mov	r0, r2
 8003f20:	4619      	mov	r1, r3
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	4b5d      	ldr	r3, [pc, #372]	; (800409c <ImuMagUpdate+0x1dc>)
 8003f28:	f7fc fb0a 	bl	8000540 <__aeabi_dmul>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4610      	mov	r0, r2
 8003f32:	4619      	mov	r1, r3
 8003f34:	f7fc fdc6 	bl	8000ac4 <__aeabi_d2f>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	ee00 3a10 	vmov	s0, r3
 8003f3e:	f007 f979 	bl	800b234 <roundf>
 8003f42:	eeb0 7a40 	vmov.f32	s14, s0
 8003f46:	eddf 6a56 	vldr	s13, [pc, #344]	; 80040a0 <ImuMagUpdate+0x1e0>
 8003f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f4e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003f52:	4b51      	ldr	r3, [pc, #324]	; (8004098 <ImuMagUpdate+0x1d8>)
 8003f54:	edc3 7a00 	vstr	s15, [r3]
	ResMag.y += roundf((((NewData.y * 0.15) - ResMag.y) * SYSTEM_IMU_MAG_FILTER) * 100) / 100;
 8003f58:	4b4f      	ldr	r3, [pc, #316]	; (8004098 <ImuMagUpdate+0x1d8>)
 8003f5a:	ed93 8a01 	vldr	s16, [r3, #4]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fc fa95 	bl	8000490 <__aeabi_f2d>
 8003f66:	a348      	add	r3, pc, #288	; (adr r3, 8004088 <ImuMagUpdate+0x1c8>)
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc fae8 	bl	8000540 <__aeabi_dmul>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4614      	mov	r4, r2
 8003f76:	461d      	mov	r5, r3
 8003f78:	4b47      	ldr	r3, [pc, #284]	; (8004098 <ImuMagUpdate+0x1d8>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc fa87 	bl	8000490 <__aeabi_f2d>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4620      	mov	r0, r4
 8003f88:	4629      	mov	r1, r5
 8003f8a:	f7fc f921 	bl	80001d0 <__aeabi_dsub>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4610      	mov	r0, r2
 8003f94:	4619      	mov	r1, r3
 8003f96:	a33e      	add	r3, pc, #248	; (adr r3, 8004090 <ImuMagUpdate+0x1d0>)
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f7fc fad0 	bl	8000540 <__aeabi_dmul>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	4b3b      	ldr	r3, [pc, #236]	; (800409c <ImuMagUpdate+0x1dc>)
 8003fae:	f7fc fac7 	bl	8000540 <__aeabi_dmul>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f7fc fd83 	bl	8000ac4 <__aeabi_d2f>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	ee00 3a10 	vmov	s0, r3
 8003fc4:	f007 f936 	bl	800b234 <roundf>
 8003fc8:	eeb0 7a40 	vmov.f32	s14, s0
 8003fcc:	eddf 6a34 	vldr	s13, [pc, #208]	; 80040a0 <ImuMagUpdate+0x1e0>
 8003fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003fd8:	4b2f      	ldr	r3, [pc, #188]	; (8004098 <ImuMagUpdate+0x1d8>)
 8003fda:	edc3 7a01 	vstr	s15, [r3, #4]
	ResMag.z += roundf((((NewData.z * 0.15) - ResMag.z) * SYSTEM_IMU_MAG_FILTER) * 100) / 100;
 8003fde:	4b2e      	ldr	r3, [pc, #184]	; (8004098 <ImuMagUpdate+0x1d8>)
 8003fe0:	ed93 8a02 	vldr	s16, [r3, #8]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fc fa52 	bl	8000490 <__aeabi_f2d>
 8003fec:	a326      	add	r3, pc, #152	; (adr r3, 8004088 <ImuMagUpdate+0x1c8>)
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	f7fc faa5 	bl	8000540 <__aeabi_dmul>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4614      	mov	r4, r2
 8003ffc:	461d      	mov	r5, r3
 8003ffe:	4b26      	ldr	r3, [pc, #152]	; (8004098 <ImuMagUpdate+0x1d8>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc fa44 	bl	8000490 <__aeabi_f2d>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4620      	mov	r0, r4
 800400e:	4629      	mov	r1, r5
 8004010:	f7fc f8de 	bl	80001d0 <__aeabi_dsub>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	a31c      	add	r3, pc, #112	; (adr r3, 8004090 <ImuMagUpdate+0x1d0>)
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f7fc fa8d 	bl	8000540 <__aeabi_dmul>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	4b1a      	ldr	r3, [pc, #104]	; (800409c <ImuMagUpdate+0x1dc>)
 8004034:	f7fc fa84 	bl	8000540 <__aeabi_dmul>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
 8004040:	f7fc fd40 	bl	8000ac4 <__aeabi_d2f>
 8004044:	4603      	mov	r3, r0
 8004046:	ee00 3a10 	vmov	s0, r3
 800404a:	f007 f8f3 	bl	800b234 <roundf>
 800404e:	eeb0 7a40 	vmov.f32	s14, s0
 8004052:	eddf 6a13 	vldr	s13, [pc, #76]	; 80040a0 <ImuMagUpdate+0x1e0>
 8004056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800405a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <ImuMagUpdate+0x1d8>)
 8004060:	edc3 7a02 	vstr	s15, [r3, #8]

	DebugImuMagX = ResMag.x;
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <ImuMagUpdate+0x1d8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <ImuMagUpdate+0x1e4>)
 800406a:	6013      	str	r3, [r2, #0]
	DebugImuMagY = ResMag.y;
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <ImuMagUpdate+0x1d8>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <ImuMagUpdate+0x1e8>)
 8004072:	6013      	str	r3, [r2, #0]
	DebugImuMagZ = ResMag.z;
 8004074:	4b08      	ldr	r3, [pc, #32]	; (8004098 <ImuMagUpdate+0x1d8>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a0c      	ldr	r2, [pc, #48]	; (80040ac <ImuMagUpdate+0x1ec>)
 800407a:	6013      	str	r3, [r2, #0]
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	ecbd 8b02 	vpop	{d8}
 8004086:	bdb0      	pop	{r4, r5, r7, pc}
 8004088:	33333333 	.word	0x33333333
 800408c:	3fc33333 	.word	0x3fc33333
 8004090:	9999999a 	.word	0x9999999a
 8004094:	3fb99999 	.word	0x3fb99999
 8004098:	200002f0 	.word	0x200002f0
 800409c:	40590000 	.word	0x40590000
 80040a0:	42c80000 	.word	0x42c80000
 80040a4:	200002c0 	.word	0x200002c0
 80040a8:	2000035c 	.word	0x2000035c
 80040ac:	20000358 	.word	0x20000358

080040b0 <ImuInit>:
void ImuInit()
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
	gyroscopeSensitivity.axis.x = 1.0f;
 80040b4:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <ImuInit+0x70>)
 80040b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040ba:	601a      	str	r2, [r3, #0]
	gyroscopeSensitivity.axis.y = 1.0f;
 80040bc:	4b18      	ldr	r3, [pc, #96]	; (8004120 <ImuInit+0x70>)
 80040be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040c2:	605a      	str	r2, [r3, #4]
	gyroscopeSensitivity.axis.z = 1.0f;
 80040c4:	4b16      	ldr	r3, [pc, #88]	; (8004120 <ImuInit+0x70>)
 80040c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040ca:	609a      	str	r2, [r3, #8]

	accelerometerSensitivity.axis.x = 1.0f;
 80040cc:	4b15      	ldr	r3, [pc, #84]	; (8004124 <ImuInit+0x74>)
 80040ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040d2:	601a      	str	r2, [r3, #0]
	accelerometerSensitivity.axis.y = 1.0f;
 80040d4:	4b13      	ldr	r3, [pc, #76]	; (8004124 <ImuInit+0x74>)
 80040d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040da:	605a      	str	r2, [r3, #4]
	accelerometerSensitivity.axis.z = 1.0f;
 80040dc:	4b11      	ldr	r3, [pc, #68]	; (8004124 <ImuInit+0x74>)
 80040de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040e2:	609a      	str	r2, [r3, #8]

	hardIronBias.axis.x = 0.0f;
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <ImuInit+0x78>)
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
	hardIronBias.axis.y = 0.0f;
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <ImuInit+0x78>)
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	605a      	str	r2, [r3, #4]
	hardIronBias.axis.z = 0.0f;
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <ImuInit+0x78>)
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	609a      	str	r2, [r3, #8]

	FusionBiasInitialise(&fusionBias, 0.5f, samplePeriod);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <ImuInit+0x7c>)
 80040fe:	edd3 7a00 	vldr	s15, [r3]
 8004102:	eef0 0a67 	vmov.f32	s1, s15
 8004106:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800410a:	4809      	ldr	r0, [pc, #36]	; (8004130 <ImuInit+0x80>)
 800410c:	f7fe f9a8 	bl	8002460 <FusionBiasInitialise>
	FusionAhrsInitialise(&fusionAhrs, 0.5f);
 8004110:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004114:	4807      	ldr	r0, [pc, #28]	; (8004134 <ImuInit+0x84>)
 8004116:	f7fc fea1 	bl	8000e5c <FusionAhrsInitialise>
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000334 	.word	0x20000334
 8004124:	20000384 	.word	0x20000384
 8004128:	20000348 	.word	0x20000348
 800412c:	20000000 	.word	0x20000000
 8004130:	2000029c 	.word	0x2000029c
 8004134:	20000250 	.word	0x20000250

08004138 <ImuUpdate>:
void ImuUpdate()
{
 8004138:	b5b0      	push	{r4, r5, r7, lr}
 800413a:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 800413e:	af00      	add	r7, sp, #0
	uncalibratedGyroscope.axis.x = ResGyro.x;
 8004140:	4bd6      	ldr	r3, [pc, #856]	; (800449c <ImuUpdate+0x364>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4ad6      	ldr	r2, [pc, #856]	; (80044a0 <ImuUpdate+0x368>)
 8004146:	6013      	str	r3, [r2, #0]
	uncalibratedGyroscope.axis.y = ResGyro.y;
 8004148:	4bd4      	ldr	r3, [pc, #848]	; (800449c <ImuUpdate+0x364>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4ad4      	ldr	r2, [pc, #848]	; (80044a0 <ImuUpdate+0x368>)
 800414e:	6053      	str	r3, [r2, #4]
	uncalibratedGyroscope.axis.z = ResGyro.z;
 8004150:	4bd2      	ldr	r3, [pc, #840]	; (800449c <ImuUpdate+0x364>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4ad2      	ldr	r2, [pc, #840]	; (80044a0 <ImuUpdate+0x368>)
 8004156:	6093      	str	r3, [r2, #8]

	uncalibratedAccelerometer.axis.x = ResAccel.x;
 8004158:	4bd2      	ldr	r3, [pc, #840]	; (80044a4 <ImuUpdate+0x36c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4ad2      	ldr	r2, [pc, #840]	; (80044a8 <ImuUpdate+0x370>)
 800415e:	6013      	str	r3, [r2, #0]
	uncalibratedAccelerometer.axis.y = ResAccel.y;
 8004160:	4bd0      	ldr	r3, [pc, #832]	; (80044a4 <ImuUpdate+0x36c>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4ad0      	ldr	r2, [pc, #832]	; (80044a8 <ImuUpdate+0x370>)
 8004166:	6053      	str	r3, [r2, #4]
	uncalibratedAccelerometer.axis.z = ResAccel.z;
 8004168:	4bce      	ldr	r3, [pc, #824]	; (80044a4 <ImuUpdate+0x36c>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4ace      	ldr	r2, [pc, #824]	; (80044a8 <ImuUpdate+0x370>)
 800416e:	6093      	str	r3, [r2, #8]

	//uncalibratedMagnetometer.axis.x = ResMag.x;
	//uncalibratedMagnetometer.axis.y = ResMag.y;
	//uncalibratedMagnetometer.axis.z = ResMag.z;

	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8004170:	4bce      	ldr	r3, [pc, #824]	; (80044ac <ImuUpdate+0x374>)
 8004172:	f507 74e2 	add.w	r4, r7, #452	; 0x1c4
 8004176:	461d      	mov	r5, r3
 8004178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800417c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	6023      	str	r3, [r4, #0]
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800419c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80041a0:	4abf      	ldr	r2, [pc, #764]	; (80044a0 <ImuUpdate+0x368>)
 80041a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	461d      	mov	r5, r3
 80041ac:	f507 74e2 	add.w	r4, r7, #452	; 0x1c4
 80041b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80041c0:	4abb      	ldr	r2, [pc, #748]	; (80044b0 <ImuUpdate+0x378>)
 80041c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80041c8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80041cc:	461c      	mov	r4, r3
 80041ce:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80041d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80041da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80041de:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80041e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80041e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80041e8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80041ec:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80041f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80041f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80041f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80041fa:	ed93 7a00 	vldr	s14, [r3]
 80041fe:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8004202:	edd3 7a00 	vldr	s15, [r3]
 8004206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800420e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8004212:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004216:	ed93 7a01 	vldr	s14, [r3, #4]
 800421a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800421e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004226:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800422a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800422e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004232:	ed93 7a02 	vldr	s14, [r3, #8]
 8004236:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800423a:	edd3 7a02 	vldr	s15, [r3, #8]
 800423e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004242:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8004246:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800424a:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800424e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004252:	ca07      	ldmia	r2, {r0, r1, r2}
 8004254:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004258:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800425c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8004260:	ca07      	ldmia	r2, {r0, r1, r2}
 8004262:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004266:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800426a:	461c      	mov	r4, r3
 800426c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8004270:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004278:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800427c:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004280:	ca07      	ldmia	r2, {r0, r1, r2}
 8004282:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8004286:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800428a:	ed93 7a00 	vldr	s14, [r3]
 800428e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004292:	edd3 7a00 	vldr	s15, [r3]
 8004296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800429e:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 80042a2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80042a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80042aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80042ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80042b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042ba:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 80042be:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80042c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80042c6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80042ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80042d6:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80042da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80042de:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80042e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80042e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80042e8:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80042ec:	f507 7219 	add.w	r2, r7, #612	; 0x264
 80042f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80042f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80042f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80042fa:	1d3b      	adds	r3, r7, #4
 80042fc:	4614      	mov	r4, r2
 80042fe:	461d      	mov	r5, r3
 8004300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	6023      	str	r3, [r4, #0]
 800430c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004310:	461c      	mov	r4, r3
 8004312:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8004316:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800431a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800431e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004322:	ed93 7a00 	vldr	s14, [r3]
 8004326:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800432a:	edd3 7a00 	vldr	s15, [r3]
 800432e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004336:	edd3 6a01 	vldr	s13, [r3, #4]
 800433a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800433e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004346:	ee37 7a27 	vadd.f32	s14, s14, s15
 800434a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800434e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004352:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004356:	edd3 7a02 	vldr	s15, [r3, #8]
 800435a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800435e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004362:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004366:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800436a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800436e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004372:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004376:	edd3 7a00 	vldr	s15, [r3]
 800437a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800437e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004382:	edd3 6a04 	vldr	s13, [r3, #16]
 8004386:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800438a:	edd3 7a01 	vldr	s15, [r3, #4]
 800438e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800439a:	edd3 6a05 	vldr	s13, [r3, #20]
 800439e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80043a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80043a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80043b2:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 80043b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80043be:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80043c2:	edd3 7a00 	vldr	s15, [r3]
 80043c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ce:	edd3 6a07 	vldr	s13, [r3, #28]
 80043d2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80043d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80043da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043e6:	edd3 6a08 	vldr	s13, [r3, #32]
 80043ea:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80043ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80043f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80043fe:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8004402:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8004406:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800440a:	ca07      	ldmia	r2, {r0, r1, r2}
 800440c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004410:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8004414:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8004418:	ca07      	ldmia	r2, {r0, r1, r2}
 800441a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 800441e:	bf00      	nop
 8004420:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8004424:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8004428:	ca07      	ldmia	r2, {r0, r1, r2}
 800442a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 800442e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004432:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <ImuUpdate+0x374>)
 8004434:	461c      	mov	r4, r3
 8004436:	4615      	mov	r5, r2
 8004438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800443a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800443c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800443e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	6023      	str	r3, [r4, #0]
 8004444:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	605a      	str	r2, [r3, #4]
 8004458:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	609a      	str	r2, [r3, #8]
 8004462:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <ImuUpdate+0x370>)
 8004468:	ca07      	ldmia	r2, {r0, r1, r2}
 800446a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800446e:	1d3a      	adds	r2, r7, #4
 8004470:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004474:	4614      	mov	r4, r2
 8004476:	461d      	mov	r5, r3
 8004478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800447a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800447c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800447e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004488:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <ImuUpdate+0x37c>)
 800448a:	ca07      	ldmia	r2, {r0, r1, r2}
 800448c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004490:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004494:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8004498:	ca07      	ldmia	r2, {r0, r1, r2}
 800449a:	e00d      	b.n	80044b8 <ImuUpdate+0x380>
 800449c:	200001b0 	.word	0x200001b0
 80044a0:	20000378 	.word	0x20000378
 80044a4:	20000290 	.word	0x20000290
 80044a8:	200002fc 	.word	0x200002fc
 80044ac:	0800c350 	.word	0x0800c350
 80044b0:	20000334 	.word	0x20000334
 80044b4:	20000384 	.word	0x20000384
 80044b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80044c0:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80044c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80044c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80044ce:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80044d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80044d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80044d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80044dc:	ed93 7a00 	vldr	s14, [r3]
 80044e0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80044e4:	edd3 7a00 	vldr	s15, [r3]
 80044e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80044f0:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80044f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80044f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80044fc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004500:	edd3 7a01 	vldr	s15, [r3, #4]
 8004504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004508:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800450c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8004510:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004514:	ed93 7a02 	vldr	s14, [r3, #8]
 8004518:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800451c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004524:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004528:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800452c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8004530:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004534:	ca07      	ldmia	r2, {r0, r1, r2}
 8004536:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800453a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800453e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8004542:	ca07      	ldmia	r2, {r0, r1, r2}
 8004544:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004548:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800454c:	461c      	mov	r4, r3
 800454e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8004552:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800455a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800455e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8004562:	ca07      	ldmia	r2, {r0, r1, r2}
 8004564:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8004568:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800456c:	ed93 7a00 	vldr	s14, [r3]
 8004570:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004574:	edd3 7a00 	vldr	s15, [r3]
 8004578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004580:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8004584:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004588:	ed93 7a01 	vldr	s14, [r3, #4]
 800458c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004590:	edd3 7a01 	vldr	s15, [r3, #4]
 8004594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004598:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800459c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 80045a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80045a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80045a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80045ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80045b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80045b8:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80045bc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80045c0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80045c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80045c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80045ca:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80045ce:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 80045d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80045d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80045d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	4614      	mov	r4, r2
 80045e0:	461d      	mov	r5, r3
 80045e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045ea:	682b      	ldr	r3, [r5, #0]
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80045f2:	461c      	mov	r4, r3
 80045f4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80045f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8004600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004604:	ed93 7a00 	vldr	s14, [r3]
 8004608:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800460c:	edd3 7a00 	vldr	s15, [r3]
 8004610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004614:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004618:	edd3 6a01 	vldr	s13, [r3, #4]
 800461c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004620:	edd3 7a01 	vldr	s15, [r3, #4]
 8004624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800462c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004630:	edd3 6a02 	vldr	s13, [r3, #8]
 8004634:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004638:	edd3 7a02 	vldr	s15, [r3, #8]
 800463c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004644:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004648:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800464c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004650:	ed93 7a03 	vldr	s14, [r3, #12]
 8004654:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004658:	edd3 7a00 	vldr	s15, [r3]
 800465c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004660:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004664:	edd3 6a04 	vldr	s13, [r3, #16]
 8004668:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800466c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004674:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800467c:	edd3 6a05 	vldr	s13, [r3, #20]
 8004680:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004684:	edd3 7a02 	vldr	s15, [r3, #8]
 8004688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800468c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004690:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004694:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8004698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800469c:	ed93 7a06 	vldr	s14, [r3, #24]
 80046a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80046a4:	edd3 7a00 	vldr	s15, [r3]
 80046a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046b0:	edd3 6a07 	vldr	s13, [r3, #28]
 80046b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80046b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80046bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046c8:	edd3 6a08 	vldr	s13, [r3, #32]
 80046cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80046d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80046d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80046e0:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80046e4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80046e8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80046ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80046ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80046f2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80046f6:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80046fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80046fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004700:	bf00      	nop
 8004702:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004706:	461c      	mov	r4, r3
 8004708:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800470c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	//FusionVector3 calibratedMagnetometer = FusionCalibrationMagnetic(uncalibratedMagnetometer, FUSION_ROTATION_MATRIX_IDENTITY, hardIronBias);

	calibratedGyroscope = FusionBiasUpdate(&fusionBias, calibratedGyroscope);
 8004714:	edd7 6a7a 	vldr	s13, [r7, #488]	; 0x1e8
 8004718:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 800471c:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 8004720:	eeb0 0a66 	vmov.f32	s0, s13
 8004724:	eef0 0a47 	vmov.f32	s1, s14
 8004728:	eeb0 1a67 	vmov.f32	s2, s15
 800472c:	488f      	ldr	r0, [pc, #572]	; (800496c <ImuUpdate+0x834>)
 800472e:	f7fd fed3 	bl	80024d8 <FusionBiasUpdate>
 8004732:	eef0 6a40 	vmov.f32	s13, s0
 8004736:	eeb0 7a60 	vmov.f32	s14, s1
 800473a:	eef0 7a41 	vmov.f32	s15, s2
 800473e:	edc7 6a7a 	vstr	s13, [r7, #488]	; 0x1e8
 8004742:	ed87 7a7b 	vstr	s14, [r7, #492]	; 0x1ec
 8004746:	edc7 7a7c 	vstr	s15, [r7, #496]	; 0x1f0
	FusionAhrsUpdateWithoutMagnetometer(&fusionAhrs, calibratedGyroscope, calibratedAccelerometer, samplePeriod);
 800474a:	4b89      	ldr	r3, [pc, #548]	; (8004970 <ImuUpdate+0x838>)
 800474c:	edd3 4a00 	vldr	s9, [r3]
 8004750:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004754:	ed93 5a00 	vldr	s10, [r3]
 8004758:	edd3 5a01 	vldr	s11, [r3, #4]
 800475c:	ed93 6a02 	vldr	s12, [r3, #8]
 8004760:	edd7 6a7a 	vldr	s13, [r7, #488]	; 0x1e8
 8004764:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 8004768:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 800476c:	eeb0 3a64 	vmov.f32	s6, s9
 8004770:	eef0 1a45 	vmov.f32	s3, s10
 8004774:	eeb0 2a65 	vmov.f32	s4, s11
 8004778:	eef0 2a46 	vmov.f32	s5, s12
 800477c:	eeb0 0a66 	vmov.f32	s0, s13
 8004780:	eef0 0a47 	vmov.f32	s1, s14
 8004784:	eeb0 1a67 	vmov.f32	s2, s15
 8004788:	487a      	ldr	r0, [pc, #488]	; (8004974 <ImuUpdate+0x83c>)
 800478a:	f7fd fc2d 	bl	8001fe8 <FusionAhrsUpdateWithoutMagnetometer>
	//FusionAhrsUpdate(&fusionAhrs, calibratedGyroscope, calibratedAccelerometer, calibratedMagnetometer, samplePeriod);
	eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(&fusionAhrs));
 800478e:	4879      	ldr	r0, [pc, #484]	; (8004974 <ImuUpdate+0x83c>)
 8004790:	f7fd fc94 	bl	80020bc <FusionAhrsGetQuaternion>
 8004794:	eeb0 6a40 	vmov.f32	s12, s0
 8004798:	eef0 6a60 	vmov.f32	s13, s1
 800479c:	eeb0 7a41 	vmov.f32	s14, s2
 80047a0:	eef0 7a61 	vmov.f32	s15, s3
 80047a4:	ed87 6a7d 	vstr	s12, [r7, #500]	; 0x1f4
 80047a8:	edc7 6a7e 	vstr	s13, [r7, #504]	; 0x1f8
 80047ac:	ed87 7a7f 	vstr	s14, [r7, #508]	; 0x1fc
 80047b0:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
 80047b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047b8:	461c      	mov	r4, r3
 80047ba:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80047be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 80047c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047c8:	ed93 7a00 	vldr	s14, [r3]
 80047cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047d0:	edd3 7a00 	vldr	s15, [r3]
 80047d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047e0:	edc7 7aab 	vstr	s15, [r7, #684]	; 0x2ac
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 80047e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80047ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80047f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047fc:	edd3 6a00 	vldr	s13, [r3]
 8004800:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004804:	edd3 7a01 	vldr	s15, [r3, #4]
 8004808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800480c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004810:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004814:	ed93 7a03 	vldr	s14, [r3, #12]
 8004818:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800481c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004820:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004824:	edd7 7aab 	vldr	s15, [r7, #684]	; 0x2ac
 8004828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482c:	eef0 0a67 	vmov.f32	s1, s15
 8004830:	eeb0 0a66 	vmov.f32	s0, s13
 8004834:	f006 fd98 	bl	800b368 <atan2f>
 8004838:	eef0 7a40 	vmov.f32	s15, s0
 800483c:	edc7 7aaa 	vstr	s15, [r7, #680]	; 0x2a8
    return radians * (180.0f / (float) M_PI);
 8004840:	edd7 7aaa 	vldr	s15, [r7, #680]	; 0x2a8
 8004844:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004978 <ImuUpdate+0x840>
 8004848:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 800484c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004850:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8004854:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004858:	ed93 7a01 	vldr	s14, [r3, #4]
 800485c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004860:	edd3 7a03 	vldr	s15, [r3, #12]
 8004864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004868:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800486c:	edd3 6a00 	vldr	s13, [r3]
 8004870:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004874:	edd3 7a02 	vldr	s15, [r3, #8]
 8004878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800487c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004880:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004884:	eeb0 0a67 	vmov.f32	s0, s15
 8004888:	f006 fd3c 	bl	800b304 <asinf>
 800488c:	eef0 7a40 	vmov.f32	s15, s0
 8004890:	eef1 7a67 	vneg.f32	s15, s15
 8004894:	edc7 7aa9 	vstr	s15, [r7, #676]	; 0x2a4
    return radians * (180.0f / (float) M_PI);
 8004898:	edd7 7aa9 	vldr	s15, [r7, #676]	; 0x2a4
 800489c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004978 <ImuUpdate+0x840>
 80048a0:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 80048a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048a8:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 80048ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80048b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80048bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048c4:	edd3 6a00 	vldr	s13, [r3]
 80048c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80048d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80048d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80048e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80048e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048ec:	edd7 7aab 	vldr	s15, [r7, #684]	; 0x2ac
 80048f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048f4:	eef0 0a67 	vmov.f32	s1, s15
 80048f8:	eeb0 0a66 	vmov.f32	s0, s13
 80048fc:	f006 fd34 	bl	800b368 <atan2f>
 8004900:	eef0 7a40 	vmov.f32	s15, s0
 8004904:	edc7 7aa8 	vstr	s15, [r7, #672]	; 0x2a0
    return radians * (180.0f / (float) M_PI);
 8004908:	edd7 7aa8 	vldr	s15, [r7, #672]	; 0x2a0
 800490c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004978 <ImuUpdate+0x840>
 8004910:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8004914:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004918:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 800491c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004920:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8004924:	ca07      	ldmia	r2, {r0, r1, r2}
 8004926:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800492a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800492e:	461c      	mov	r4, r3
 8004930:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8004934:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004938:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <ImuUpdate+0x844>)
 800493e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004942:	ca07      	ldmia	r2, {r0, r1, r2}
 8004944:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	DebugImuPitch = eulerAngles.angle.pitch;
 8004948:	4b0c      	ldr	r3, [pc, #48]	; (800497c <ImuUpdate+0x844>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	4a0c      	ldr	r2, [pc, #48]	; (8004980 <ImuUpdate+0x848>)
 800494e:	6013      	str	r3, [r2, #0]
	DebugImuRoll = eulerAngles.angle.roll;
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <ImuUpdate+0x844>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <ImuUpdate+0x84c>)
 8004956:	6013      	str	r3, [r2, #0]
	DebugImuYaw = eulerAngles.angle.yaw;
 8004958:	4b08      	ldr	r3, [pc, #32]	; (800497c <ImuUpdate+0x844>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <ImuUpdate+0x850>)
 800495e:	6013      	str	r3, [r2, #0]
}
 8004960:	bf00      	nop
 8004962:	f507 772c 	add.w	r7, r7, #688	; 0x2b0
 8004966:	46bd      	mov	sp, r7
 8004968:	bdb0      	pop	{r4, r5, r7, pc}
 800496a:	bf00      	nop
 800496c:	2000029c 	.word	0x2000029c
 8004970:	20000000 	.word	0x20000000
 8004974:	20000250 	.word	0x20000250
 8004978:	42652ee0 	.word	0x42652ee0
 800497c:	200001bc 	.word	0x200001bc
 8004980:	20000340 	.word	0x20000340
 8004984:	20000178 	.word	0x20000178
 8004988:	200002dc 	.word	0x200002dc

0800498c <StepControl>:
void StepControl(uint8_t dir, uint32_t period, uint32_t steps)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PIN, 1);
 800499a:	2201      	movs	r2, #1
 800499c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049a0:	4817      	ldr	r0, [pc, #92]	; (8004a00 <StepControl+0x74>)
 80049a2:	f003 fa97 	bl	8007ed4 <HAL_GPIO_WritePin>
	for(int i = 0; i <= steps; i++)
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e01a      	b.n	80049e2 <StepControl+0x56>
	{
		HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_DIR_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_DIR_PIN, dir);
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	461a      	mov	r2, r3
 80049b0:	2120      	movs	r1, #32
 80049b2:	4814      	ldr	r0, [pc, #80]	; (8004a04 <StepControl+0x78>)
 80049b4:	f003 fa8e 	bl	8007ed4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PIN, i);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	2110      	movs	r1, #16
 80049c0:	4810      	ldr	r0, [pc, #64]	; (8004a04 <StepControl+0x78>)
 80049c2:	f003 fa87 	bl	8007ed4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80049c6:	2001      	movs	r0, #1
 80049c8:	f001 ff98 	bl	80068fc <HAL_Delay>
		HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PIN, 0);
 80049cc:	2200      	movs	r2, #0
 80049ce:	2110      	movs	r1, #16
 80049d0:	480c      	ldr	r0, [pc, #48]	; (8004a04 <StepControl+0x78>)
 80049d2:	f003 fa7f 	bl	8007ed4 <HAL_GPIO_WritePin>
		HAL_Delay(period);
 80049d6:	68b8      	ldr	r0, [r7, #8]
 80049d8:	f001 ff90 	bl	80068fc <HAL_Delay>
	for(int i = 0; i <= steps; i++)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	3301      	adds	r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d2e0      	bcs.n	80049ac <StepControl+0x20>
	}
	HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PIN, 0);
 80049ea:	2200      	movs	r2, #0
 80049ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049f0:	4803      	ldr	r0, [pc, #12]	; (8004a00 <StepControl+0x74>)
 80049f2:	f003 fa6f 	bl	8007ed4 <HAL_GPIO_WritePin>
}
 80049f6:	bf00      	nop
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000
 8004a04:	40020800 	.word	0x40020800

08004a08 <MotopStop>:
void MotopStop()
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PIN, 0);
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2110      	movs	r1, #16
 8004a10:	4805      	ldr	r0, [pc, #20]	; (8004a28 <MotopStop+0x20>)
 8004a12:	f003 fa5f 	bl	8007ed4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PIN, 0);
 8004a16:	2200      	movs	r2, #0
 8004a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a1c:	4803      	ldr	r0, [pc, #12]	; (8004a2c <MotopStop+0x24>)
 8004a1e:	f003 fa59 	bl	8007ed4 <HAL_GPIO_WritePin>
}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40020800 	.word	0x40020800
 8004a2c:	40021000 	.word	0x40021000

08004a30 <BalancePrepare>:
void BalancePrepare()
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
	Front = BTControl.Front;
 8004a36:	4bb6      	ldr	r3, [pc, #728]	; (8004d10 <BalancePrepare+0x2e0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4ab6      	ldr	r2, [pc, #728]	; (8004d14 <BalancePrepare+0x2e4>)
 8004a3c:	6013      	str	r3, [r2, #0]
	Turn = BTControl.Turn;
 8004a3e:	4bb4      	ldr	r3, [pc, #720]	; (8004d10 <BalancePrepare+0x2e0>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4ab5      	ldr	r2, [pc, #724]	; (8004d18 <BalancePrepare+0x2e8>)
 8004a44:	6013      	str	r3, [r2, #0]

	if(LowDiagnostic.Battery)
 8004a46:	4bb5      	ldr	r3, [pc, #724]	; (8004d1c <BalancePrepare+0x2ec>)
 8004a48:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a54:	d007      	beq.n	8004a66 <BalancePrepare+0x36>
	{
		Front = 0;
 8004a56:	4baf      	ldr	r3, [pc, #700]	; (8004d14 <BalancePrepare+0x2e4>)
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
		Turn = 0;
 8004a5e:	4bae      	ldr	r3, [pc, #696]	; (8004d18 <BalancePrepare+0x2e8>)
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
	}

	if ((fabsf(Front) < 0.001) && (fabsf(Turn) < 0.001) && (fabsf(SpeedLinear) < 0.02) && (fabsf(LeftSpeed - RightSpeed) < 0.02))
 8004a66:	4bab      	ldr	r3, [pc, #684]	; (8004d14 <BalancePrepare+0x2e4>)
 8004a68:	edd3 7a00 	vldr	s15, [r3]
 8004a6c:	eef0 7ae7 	vabs.f32	s15, s15
 8004a70:	ee17 0a90 	vmov	r0, s15
 8004a74:	f7fb fd0c 	bl	8000490 <__aeabi_f2d>
 8004a78:	a39f      	add	r3, pc, #636	; (adr r3, 8004cf8 <BalancePrepare+0x2c8>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb ffd1 	bl	8000a24 <__aeabi_dcmplt>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d06a      	beq.n	8004b5e <BalancePrepare+0x12e>
 8004a88:	4ba3      	ldr	r3, [pc, #652]	; (8004d18 <BalancePrepare+0x2e8>)
 8004a8a:	edd3 7a00 	vldr	s15, [r3]
 8004a8e:	eef0 7ae7 	vabs.f32	s15, s15
 8004a92:	ee17 0a90 	vmov	r0, s15
 8004a96:	f7fb fcfb 	bl	8000490 <__aeabi_f2d>
 8004a9a:	a397      	add	r3, pc, #604	; (adr r3, 8004cf8 <BalancePrepare+0x2c8>)
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	f7fb ffc0 	bl	8000a24 <__aeabi_dcmplt>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d059      	beq.n	8004b5e <BalancePrepare+0x12e>
 8004aaa:	4b9d      	ldr	r3, [pc, #628]	; (8004d20 <BalancePrepare+0x2f0>)
 8004aac:	edd3 7a00 	vldr	s15, [r3]
 8004ab0:	eef0 7ae7 	vabs.f32	s15, s15
 8004ab4:	ee17 0a90 	vmov	r0, s15
 8004ab8:	f7fb fcea 	bl	8000490 <__aeabi_f2d>
 8004abc:	a390      	add	r3, pc, #576	; (adr r3, 8004d00 <BalancePrepare+0x2d0>)
 8004abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac2:	f7fb ffaf 	bl	8000a24 <__aeabi_dcmplt>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d048      	beq.n	8004b5e <BalancePrepare+0x12e>
 8004acc:	4b95      	ldr	r3, [pc, #596]	; (8004d24 <BalancePrepare+0x2f4>)
 8004ace:	ed93 7a00 	vldr	s14, [r3]
 8004ad2:	4b95      	ldr	r3, [pc, #596]	; (8004d28 <BalancePrepare+0x2f8>)
 8004ad4:	edd3 7a00 	vldr	s15, [r3]
 8004ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004adc:	eef0 7ae7 	vabs.f32	s15, s15
 8004ae0:	ee17 0a90 	vmov	r0, s15
 8004ae4:	f7fb fcd4 	bl	8000490 <__aeabi_f2d>
 8004ae8:	a385      	add	r3, pc, #532	; (adr r3, 8004d00 <BalancePrepare+0x2d0>)
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f7fb ff99 	bl	8000a24 <__aeabi_dcmplt>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d032      	beq.n	8004b5e <BalancePrepare+0x12e>
	{
		if ((LowDiagnostic.Battery < 4) && BalanceActiveDemand)
 8004af8:	4b88      	ldr	r3, [pc, #544]	; (8004d1c <BalancePrepare+0x2ec>)
 8004afa:	edd3 7a01 	vldr	s15, [r3, #4]
 8004afe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0a:	d507      	bpl.n	8004b1c <BalancePrepare+0xec>
 8004b0c:	4b87      	ldr	r3, [pc, #540]	; (8004d2c <BalancePrepare+0x2fc>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <BalancePrepare+0xec>
		{
			BalanceActiveDemand = false;
 8004b14:	4b85      	ldr	r3, [pc, #532]	; (8004d2c <BalancePrepare+0x2fc>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	e020      	b.n	8004b5e <BalancePrepare+0x12e>
		}
		else if (LowDiagnostic.Battery > 8)
 8004b1c:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <BalancePrepare+0x2ec>)
 8004b1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b22:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2e:	dd0b      	ble.n	8004b48 <BalancePrepare+0x118>
		{
			BalanceActiveDemand = BTControl.Drive;
 8004b30:	4b77      	ldr	r3, [pc, #476]	; (8004d10 <BalancePrepare+0x2e0>)
 8004b32:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8004b3e:	793b      	ldrb	r3, [r7, #4]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	4b7a      	ldr	r3, [pc, #488]	; (8004d2c <BalancePrepare+0x2fc>)
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e00a      	b.n	8004b5e <BalancePrepare+0x12e>
		}
		else if (!BTControl.Drive)
 8004b48:	4b71      	ldr	r3, [pc, #452]	; (8004d10 <BalancePrepare+0x2e0>)
 8004b4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b56:	d102      	bne.n	8004b5e <BalancePrepare+0x12e>
		{
			BalanceActiveDemand = false;
 8004b58:	4b74      	ldr	r3, [pc, #464]	; (8004d2c <BalancePrepare+0x2fc>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
		}
	}

	Turn = (Turn > 90) ? 90 : Turn;
 8004b5e:	4b6e      	ldr	r3, [pc, #440]	; (8004d18 <BalancePrepare+0x2e8>)
 8004b60:	edd3 7a00 	vldr	s15, [r3]
 8004b64:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8004d30 <BalancePrepare+0x300>
 8004b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b70:	dd01      	ble.n	8004b76 <BalancePrepare+0x146>
 8004b72:	4b70      	ldr	r3, [pc, #448]	; (8004d34 <BalancePrepare+0x304>)
 8004b74:	e001      	b.n	8004b7a <BalancePrepare+0x14a>
 8004b76:	4b68      	ldr	r3, [pc, #416]	; (8004d18 <BalancePrepare+0x2e8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a67      	ldr	r2, [pc, #412]	; (8004d18 <BalancePrepare+0x2e8>)
 8004b7c:	6013      	str	r3, [r2, #0]
	Turn = (Turn < -90) ? -90 : Turn;
 8004b7e:	4b66      	ldr	r3, [pc, #408]	; (8004d18 <BalancePrepare+0x2e8>)
 8004b80:	edd3 7a00 	vldr	s15, [r3]
 8004b84:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004d38 <BalancePrepare+0x308>
 8004b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b90:	d501      	bpl.n	8004b96 <BalancePrepare+0x166>
 8004b92:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <BalancePrepare+0x30c>)
 8004b94:	e001      	b.n	8004b9a <BalancePrepare+0x16a>
 8004b96:	4b60      	ldr	r3, [pc, #384]	; (8004d18 <BalancePrepare+0x2e8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a5f      	ldr	r2, [pc, #380]	; (8004d18 <BalancePrepare+0x2e8>)
 8004b9c:	6013      	str	r3, [r2, #0]
	Front = (Front > 2) ? 2 : Front;
 8004b9e:	4b5d      	ldr	r3, [pc, #372]	; (8004d14 <BalancePrepare+0x2e4>)
 8004ba0:	edd3 7a00 	vldr	s15, [r3]
 8004ba4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb0:	dd02      	ble.n	8004bb8 <BalancePrepare+0x188>
 8004bb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bb6:	e001      	b.n	8004bbc <BalancePrepare+0x18c>
 8004bb8:	4b56      	ldr	r3, [pc, #344]	; (8004d14 <BalancePrepare+0x2e4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a55      	ldr	r2, [pc, #340]	; (8004d14 <BalancePrepare+0x2e4>)
 8004bbe:	6013      	str	r3, [r2, #0]
	Front = (Front < -0.4) ? -0.4 : Front;
 8004bc0:	4b54      	ldr	r3, [pc, #336]	; (8004d14 <BalancePrepare+0x2e4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fb fc63 	bl	8000490 <__aeabi_f2d>
 8004bca:	a34f      	add	r3, pc, #316	; (adr r3, 8004d08 <BalancePrepare+0x2d8>)
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f7fb ff28 	bl	8000a24 <__aeabi_dcmplt>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <BalancePrepare+0x1ae>
 8004bda:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <BalancePrepare+0x310>)
 8004bdc:	e001      	b.n	8004be2 <BalancePrepare+0x1b2>
 8004bde:	4b4d      	ldr	r3, [pc, #308]	; (8004d14 <BalancePrepare+0x2e4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a4c      	ldr	r2, [pc, #304]	; (8004d14 <BalancePrepare+0x2e4>)
 8004be4:	6013      	str	r3, [r2, #0]

	if(!BalanceActiveDemand)
 8004be6:	4b51      	ldr	r3, [pc, #324]	; (8004d2c <BalancePrepare+0x2fc>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d12f      	bne.n	8004c4e <BalancePrepare+0x21e>
	{
		if(!FootButtonDown && !FootButtonUp)
 8004bee:	4b55      	ldr	r3, [pc, #340]	; (8004d44 <BalancePrepare+0x314>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10c      	bne.n	8004c10 <BalancePrepare+0x1e0>
 8004bf6:	4b54      	ldr	r3, [pc, #336]	; (8004d48 <BalancePrepare+0x318>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d108      	bne.n	8004c10 <BalancePrepare+0x1e0>
		{
			StepControl(0, 1, 10);
 8004bfe:	220a      	movs	r2, #10
 8004c00:	2101      	movs	r1, #1
 8004c02:	2000      	movs	r0, #0
 8004c04:	f7ff fec2 	bl	800498c <StepControl>
			FootDone = false;
 8004c08:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <BalancePrepare+0x31c>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e051      	b.n	8004cb4 <BalancePrepare+0x284>
		} else if (FootButtonDown && !FootButtonUp)
 8004c10:	4b4c      	ldr	r3, [pc, #304]	; (8004d44 <BalancePrepare+0x314>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d009      	beq.n	8004c2c <BalancePrepare+0x1fc>
 8004c18:	4b4b      	ldr	r3, [pc, #300]	; (8004d48 <BalancePrepare+0x318>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <BalancePrepare+0x1fc>
		{
			MotopStop();
 8004c20:	f7ff fef2 	bl	8004a08 <MotopStop>
			FootDone = true;
 8004c24:	4b49      	ldr	r3, [pc, #292]	; (8004d4c <BalancePrepare+0x31c>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e043      	b.n	8004cb4 <BalancePrepare+0x284>
		} else if (!FootButtonDown && FootButtonUp)
 8004c2c:	4b45      	ldr	r3, [pc, #276]	; (8004d44 <BalancePrepare+0x314>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d13f      	bne.n	8004cb4 <BalancePrepare+0x284>
 8004c34:	4b44      	ldr	r3, [pc, #272]	; (8004d48 <BalancePrepare+0x318>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d03b      	beq.n	8004cb4 <BalancePrepare+0x284>
		{
			StepControl(0, 1, 10);
 8004c3c:	220a      	movs	r2, #10
 8004c3e:	2101      	movs	r1, #1
 8004c40:	2000      	movs	r0, #0
 8004c42:	f7ff fea3 	bl	800498c <StepControl>
			FootDone = false;
 8004c46:	4b41      	ldr	r3, [pc, #260]	; (8004d4c <BalancePrepare+0x31c>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e032      	b.n	8004cb4 <BalancePrepare+0x284>
		}
	} else if (BalanceActiveDemand)
 8004c4e:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <BalancePrepare+0x2fc>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d02e      	beq.n	8004cb4 <BalancePrepare+0x284>
	{
		if(!FootButtonDown && !FootButtonUp)
 8004c56:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <BalancePrepare+0x314>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10c      	bne.n	8004c78 <BalancePrepare+0x248>
 8004c5e:	4b3a      	ldr	r3, [pc, #232]	; (8004d48 <BalancePrepare+0x318>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d108      	bne.n	8004c78 <BalancePrepare+0x248>
		{
			StepControl(1, 1, 10);
 8004c66:	220a      	movs	r2, #10
 8004c68:	2101      	movs	r1, #1
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	f7ff fe8e 	bl	800498c <StepControl>
			FootDone = false;
 8004c70:	4b36      	ldr	r3, [pc, #216]	; (8004d4c <BalancePrepare+0x31c>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	e01d      	b.n	8004cb4 <BalancePrepare+0x284>
		} else if (FootButtonDown && !FootButtonUp)
 8004c78:	4b32      	ldr	r3, [pc, #200]	; (8004d44 <BalancePrepare+0x314>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00c      	beq.n	8004c9a <BalancePrepare+0x26a>
 8004c80:	4b31      	ldr	r3, [pc, #196]	; (8004d48 <BalancePrepare+0x318>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d108      	bne.n	8004c9a <BalancePrepare+0x26a>
		{
			StepControl(1, 1, 10);
 8004c88:	220a      	movs	r2, #10
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	2001      	movs	r0, #1
 8004c8e:	f7ff fe7d 	bl	800498c <StepControl>
			FootDone = false;
 8004c92:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <BalancePrepare+0x31c>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e00c      	b.n	8004cb4 <BalancePrepare+0x284>
		} else if (!FootButtonDown && FootButtonUp)
 8004c9a:	4b2a      	ldr	r3, [pc, #168]	; (8004d44 <BalancePrepare+0x314>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d108      	bne.n	8004cb4 <BalancePrepare+0x284>
 8004ca2:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <BalancePrepare+0x318>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <BalancePrepare+0x284>
		{
			MotopStop();
 8004caa:	f7ff fead 	bl	8004a08 <MotopStop>
			FootDone = true;
 8004cae:	4b27      	ldr	r3, [pc, #156]	; (8004d4c <BalancePrepare+0x31c>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(FootDone)
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <BalancePrepare+0x31c>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d04f      	beq.n	8004d5c <BalancePrepare+0x32c>
	{
		BalanceActiveDemand = BTControl.Drive;
 8004cbc:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <BalancePrepare+0x2e0>)
 8004cbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc6:	edc7 7a01 	vstr	s15, [r7, #4]
 8004cca:	793b      	ldrb	r3, [r7, #4]
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	4b17      	ldr	r3, [pc, #92]	; (8004d2c <BalancePrepare+0x2fc>)
 8004cd0:	701a      	strb	r2, [r3, #0]
		BalanceActive = BTControl.Drive;
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <BalancePrepare+0x2e0>)
 8004cd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cdc:	edc7 7a01 	vstr	s15, [r7, #4]
 8004ce0:	793b      	ldrb	r3, [r7, #4]
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	4b1a      	ldr	r3, [pc, #104]	; (8004d50 <BalancePrepare+0x320>)
 8004ce6:	701a      	strb	r2, [r3, #0]
		PositionLinearDemand = PositionLinear;
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <BalancePrepare+0x324>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1a      	ldr	r2, [pc, #104]	; (8004d58 <BalancePrepare+0x328>)
 8004cee:	6013      	str	r3, [r2, #0]
	{
		BalanceActiveDemand = false;
		BalanceActive = false;
		PositionLinearDemand = PositionLinear;
	}
}
 8004cf0:	e03e      	b.n	8004d70 <BalancePrepare+0x340>
 8004cf2:	bf00      	nop
 8004cf4:	f3af 8000 	nop.w
 8004cf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004cfc:	3f50624d 	.word	0x3f50624d
 8004d00:	47ae147b 	.word	0x47ae147b
 8004d04:	3f947ae1 	.word	0x3f947ae1
 8004d08:	9999999a 	.word	0x9999999a
 8004d0c:	bfd99999 	.word	0xbfd99999
 8004d10:	20000188 	.word	0x20000188
 8004d14:	200000f4 	.word	0x200000f4
 8004d18:	200000f8 	.word	0x200000f8
 8004d1c:	20000200 	.word	0x20000200
 8004d20:	2000022c 	.word	0x2000022c
 8004d24:	2000028c 	.word	0x2000028c
 8004d28:	20000194 	.word	0x20000194
 8004d2c:	200001e8 	.word	0x200001e8
 8004d30:	42b40000 	.word	0x42b40000
 8004d34:	42b40000 	.word	0x42b40000
 8004d38:	c2b40000 	.word	0xc2b40000
 8004d3c:	c2b40000 	.word	0xc2b40000
 8004d40:	becccccd 	.word	0xbecccccd
 8004d44:	200000dc 	.word	0x200000dc
 8004d48:	200000db 	.word	0x200000db
 8004d4c:	200000f0 	.word	0x200000f0
 8004d50:	200002c4 	.word	0x200002c4
 8004d54:	20000244 	.word	0x20000244
 8004d58:	20000224 	.word	0x20000224
		BalanceActiveDemand = false;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <BalancePrepare+0x348>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
		BalanceActive = false;
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <BalancePrepare+0x34c>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
		PositionLinearDemand = PositionLinear;
 8004d68:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <BalancePrepare+0x350>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <BalancePrepare+0x354>)
 8004d6e:	6013      	str	r3, [r2, #0]
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	200001e8 	.word	0x200001e8
 8004d7c:	200002c4 	.word	0x200002c4
 8004d80:	20000244 	.word	0x20000244
 8004d84:	20000224 	.word	0x20000224

08004d88 <BalanceCalculateSpeeds>:
void BalanceCalculateSpeeds()
{
 8004d88:	b5b0      	push	{r4, r5, r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
	TimeS = (HAL_GetTick() - StepsLeftPreviousTime) / 1000.0;
 8004d8c:	f001 fdaa 	bl	80068e4 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b77      	ldr	r3, [pc, #476]	; (8004f70 <BalanceCalculateSpeeds+0x1e8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fb fb57 	bl	800044c <__aeabi_ui2d>
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	4b74      	ldr	r3, [pc, #464]	; (8004f74 <BalanceCalculateSpeeds+0x1ec>)
 8004da4:	f7fb fcf6 	bl	8000794 <__aeabi_ddiv>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4610      	mov	r0, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	f7fb fe88 	bl	8000ac4 <__aeabi_d2f>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4a70      	ldr	r2, [pc, #448]	; (8004f78 <BalanceCalculateSpeeds+0x1f0>)
 8004db8:	6013      	str	r3, [r2, #0]
	if (TimeS > BALANCE_SPEED_STEPS_MAX_TIME)
 8004dba:	4b6f      	ldr	r3, [pc, #444]	; (8004f78 <BalanceCalculateSpeeds+0x1f0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fb fb66 	bl	8000490 <__aeabi_f2d>
 8004dc4:	a366      	add	r3, pc, #408	; (adr r3, 8004f60 <BalanceCalculateSpeeds+0x1d8>)
 8004dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dca:	f7fb fe49 	bl	8000a60 <__aeabi_dcmpgt>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d006      	beq.n	8004de2 <BalanceCalculateSpeeds+0x5a>
	{
		TimeS = BALANCE_SPEED_STEPS_MAX_TIME;
 8004dd4:	4b68      	ldr	r3, [pc, #416]	; (8004f78 <BalanceCalculateSpeeds+0x1f0>)
 8004dd6:	4a69      	ldr	r2, [pc, #420]	; (8004f7c <BalanceCalculateSpeeds+0x1f4>)
 8004dd8:	601a      	str	r2, [r3, #0]
		LeftSpeed = 0;
 8004dda:	4b69      	ldr	r3, [pc, #420]	; (8004f80 <BalanceCalculateSpeeds+0x1f8>)
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
	}
	if (WheelsHall[0].OutputHall != StepsLeftPrevious)
 8004de2:	4b68      	ldr	r3, [pc, #416]	; (8004f84 <BalanceCalculateSpeeds+0x1fc>)
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	4b68      	ldr	r3, [pc, #416]	; (8004f88 <BalanceCalculateSpeeds+0x200>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d02d      	beq.n	8004e4a <BalanceCalculateSpeeds+0xc2>
	{
		LeftSpeed = ((WheelsHall[0].OutputHall - StepsLeftPrevious) * BALANCE_STEPS_TO_METERS) / TimeS;
 8004dee:	4b65      	ldr	r3, [pc, #404]	; (8004f84 <BalanceCalculateSpeeds+0x1fc>)
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	4b65      	ldr	r3, [pc, #404]	; (8004f88 <BalanceCalculateSpeeds+0x200>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fb fb37 	bl	800046c <__aeabi_i2d>
 8004dfe:	a35a      	add	r3, pc, #360	; (adr r3, 8004f68 <BalanceCalculateSpeeds+0x1e0>)
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f7fb fb9c 	bl	8000540 <__aeabi_dmul>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4614      	mov	r4, r2
 8004e0e:	461d      	mov	r5, r3
 8004e10:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <BalanceCalculateSpeeds+0x1f0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fb fb3b 	bl	8000490 <__aeabi_f2d>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4620      	mov	r0, r4
 8004e20:	4629      	mov	r1, r5
 8004e22:	f7fb fcb7 	bl	8000794 <__aeabi_ddiv>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	f7fb fe49 	bl	8000ac4 <__aeabi_d2f>
 8004e32:	4603      	mov	r3, r0
 8004e34:	4a52      	ldr	r2, [pc, #328]	; (8004f80 <BalanceCalculateSpeeds+0x1f8>)
 8004e36:	6013      	str	r3, [r2, #0]
		StepsLeftPrevious = WheelsHall[0].OutputHall;
 8004e38:	4b52      	ldr	r3, [pc, #328]	; (8004f84 <BalanceCalculateSpeeds+0x1fc>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4a52      	ldr	r2, [pc, #328]	; (8004f88 <BalanceCalculateSpeeds+0x200>)
 8004e3e:	6013      	str	r3, [r2, #0]
		StepsLeftPreviousTime = HAL_GetTick();
 8004e40:	f001 fd50 	bl	80068e4 <HAL_GetTick>
 8004e44:	4603      	mov	r3, r0
 8004e46:	4a4a      	ldr	r2, [pc, #296]	; (8004f70 <BalanceCalculateSpeeds+0x1e8>)
 8004e48:	6013      	str	r3, [r2, #0]
	}

	TimeS = (HAL_GetTick() - StepsRightPreviousTime) / 1000.0;
 8004e4a:	f001 fd4b 	bl	80068e4 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	4b4e      	ldr	r3, [pc, #312]	; (8004f8c <BalanceCalculateSpeeds+0x204>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fb faf8 	bl	800044c <__aeabi_ui2d>
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	4b44      	ldr	r3, [pc, #272]	; (8004f74 <BalanceCalculateSpeeds+0x1ec>)
 8004e62:	f7fb fc97 	bl	8000794 <__aeabi_ddiv>
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f7fb fe29 	bl	8000ac4 <__aeabi_d2f>
 8004e72:	4603      	mov	r3, r0
 8004e74:	4a40      	ldr	r2, [pc, #256]	; (8004f78 <BalanceCalculateSpeeds+0x1f0>)
 8004e76:	6013      	str	r3, [r2, #0]
	if (TimeS > BALANCE_SPEED_STEPS_MAX_TIME)
 8004e78:	4b3f      	ldr	r3, [pc, #252]	; (8004f78 <BalanceCalculateSpeeds+0x1f0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb fb07 	bl	8000490 <__aeabi_f2d>
 8004e82:	a337      	add	r3, pc, #220	; (adr r3, 8004f60 <BalanceCalculateSpeeds+0x1d8>)
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	f7fb fdea 	bl	8000a60 <__aeabi_dcmpgt>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d006      	beq.n	8004ea0 <BalanceCalculateSpeeds+0x118>
	{
		TimeS = BALANCE_SPEED_STEPS_MAX_TIME;
 8004e92:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <BalanceCalculateSpeeds+0x1f0>)
 8004e94:	4a39      	ldr	r2, [pc, #228]	; (8004f7c <BalanceCalculateSpeeds+0x1f4>)
 8004e96:	601a      	str	r2, [r3, #0]
		RightSpeed = 0;
 8004e98:	4b3d      	ldr	r3, [pc, #244]	; (8004f90 <BalanceCalculateSpeeds+0x208>)
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
	}
	if (WheelsHall[1].OutputHall != StepsRightPrevious)
 8004ea0:	4b38      	ldr	r3, [pc, #224]	; (8004f84 <BalanceCalculateSpeeds+0x1fc>)
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	4b3b      	ldr	r3, [pc, #236]	; (8004f94 <BalanceCalculateSpeeds+0x20c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d02d      	beq.n	8004f08 <BalanceCalculateSpeeds+0x180>
	{
		RightSpeed = ((WheelsHall[1].OutputHall - StepsRightPrevious) * BALANCE_STEPS_TO_METERS) / TimeS;
 8004eac:	4b35      	ldr	r3, [pc, #212]	; (8004f84 <BalanceCalculateSpeeds+0x1fc>)
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	4b38      	ldr	r3, [pc, #224]	; (8004f94 <BalanceCalculateSpeeds+0x20c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fb fad8 	bl	800046c <__aeabi_i2d>
 8004ebc:	a32a      	add	r3, pc, #168	; (adr r3, 8004f68 <BalanceCalculateSpeeds+0x1e0>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f7fb fb3d 	bl	8000540 <__aeabi_dmul>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4614      	mov	r4, r2
 8004ecc:	461d      	mov	r5, r3
 8004ece:	4b2a      	ldr	r3, [pc, #168]	; (8004f78 <BalanceCalculateSpeeds+0x1f0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fb fadc 	bl	8000490 <__aeabi_f2d>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4620      	mov	r0, r4
 8004ede:	4629      	mov	r1, r5
 8004ee0:	f7fb fc58 	bl	8000794 <__aeabi_ddiv>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	f7fb fdea 	bl	8000ac4 <__aeabi_d2f>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	4a27      	ldr	r2, [pc, #156]	; (8004f90 <BalanceCalculateSpeeds+0x208>)
 8004ef4:	6013      	str	r3, [r2, #0]
		StepsRightPrevious = WheelsHall[1].OutputHall;
 8004ef6:	4b23      	ldr	r3, [pc, #140]	; (8004f84 <BalanceCalculateSpeeds+0x1fc>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <BalanceCalculateSpeeds+0x20c>)
 8004efc:	6013      	str	r3, [r2, #0]
		StepsRightPreviousTime = HAL_GetTick();
 8004efe:	f001 fcf1 	bl	80068e4 <HAL_GetTick>
 8004f02:	4603      	mov	r3, r0
 8004f04:	4a21      	ldr	r2, [pc, #132]	; (8004f8c <BalanceCalculateSpeeds+0x204>)
 8004f06:	6013      	str	r3, [r2, #0]
	}

	PositionLinear = ((WheelsHall[0].OutputHall + WheelsHall[1].OutputHall) / 2) * BALANCE_STEPS_TO_METERS;
 8004f08:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <BalanceCalculateSpeeds+0x1fc>)
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	4b1d      	ldr	r3, [pc, #116]	; (8004f84 <BalanceCalculateSpeeds+0x1fc>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	0fda      	lsrs	r2, r3, #31
 8004f14:	4413      	add	r3, r2
 8004f16:	105b      	asrs	r3, r3, #1
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fb faa7 	bl	800046c <__aeabi_i2d>
 8004f1e:	a312      	add	r3, pc, #72	; (adr r3, 8004f68 <BalanceCalculateSpeeds+0x1e0>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f7fb fb0c 	bl	8000540 <__aeabi_dmul>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	4619      	mov	r1, r3
 8004f30:	f7fb fdc8 	bl	8000ac4 <__aeabi_d2f>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4a18      	ldr	r2, [pc, #96]	; (8004f98 <BalanceCalculateSpeeds+0x210>)
 8004f38:	6013      	str	r3, [r2, #0]
	SpeedLinear = (LeftSpeed + RightSpeed) / 2.0;
 8004f3a:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <BalanceCalculateSpeeds+0x1f8>)
 8004f3c:	ed93 7a00 	vldr	s14, [r3]
 8004f40:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <BalanceCalculateSpeeds+0x208>)
 8004f42:	edd3 7a00 	vldr	s15, [r3]
 8004f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f4a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <BalanceCalculateSpeeds+0x214>)
 8004f54:	edc3 7a00 	vstr	s15, [r3]
}
 8004f58:	bf00      	nop
 8004f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f5c:	f3af 8000 	nop.w
 8004f60:	9999999a 	.word	0x9999999a
 8004f64:	3fc99999 	.word	0x3fc99999
 8004f68:	8121fb7c 	.word	0x8121fb7c
 8004f6c:	3f821fb7 	.word	0x3f821fb7
 8004f70:	20000374 	.word	0x20000374
 8004f74:	408f4000 	.word	0x408f4000
 8004f78:	20000288 	.word	0x20000288
 8004f7c:	3e4ccccd 	.word	0x3e4ccccd
 8004f80:	2000028c 	.word	0x2000028c
 8004f84:	20000390 	.word	0x20000390
 8004f88:	200002d8 	.word	0x200002d8
 8004f8c:	20000354 	.word	0x20000354
 8004f90:	20000194 	.word	0x20000194
 8004f94:	20000170 	.word	0x20000170
 8004f98:	20000244 	.word	0x20000244
 8004f9c:	2000022c 	.word	0x2000022c

08004fa0 <BalancePositionLinearControl>:
void BalancePositionLinearControl()
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
	if (fabsf(Front) > 0.001)
 8004fa6:	4b48      	ldr	r3, [pc, #288]	; (80050c8 <BalancePositionLinearControl+0x128>)
 8004fa8:	edd3 7a00 	vldr	s15, [r3]
 8004fac:	eef0 7ae7 	vabs.f32	s15, s15
 8004fb0:	ee17 0a90 	vmov	r0, s15
 8004fb4:	f7fb fa6c 	bl	8000490 <__aeabi_f2d>
 8004fb8:	a33f      	add	r3, pc, #252	; (adr r3, 80050b8 <BalancePositionLinearControl+0x118>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f7fb fd4f 	bl	8000a60 <__aeabi_dcmpgt>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <BalancePositionLinearControl+0x30>
	{
		PositionLinearControlSwitch = 0;
 8004fc8:	4b40      	ldr	r3, [pc, #256]	; (80050cc <BalancePositionLinearControl+0x12c>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	e013      	b.n	8004ff8 <BalancePositionLinearControl+0x58>
	}
	else if (fabsf(SpeedLinear) < 0.02)
 8004fd0:	4b3f      	ldr	r3, [pc, #252]	; (80050d0 <BalancePositionLinearControl+0x130>)
 8004fd2:	edd3 7a00 	vldr	s15, [r3]
 8004fd6:	eef0 7ae7 	vabs.f32	s15, s15
 8004fda:	ee17 0a90 	vmov	r0, s15
 8004fde:	f7fb fa57 	bl	8000490 <__aeabi_f2d>
 8004fe2:	a337      	add	r3, pc, #220	; (adr r3, 80050c0 <BalancePositionLinearControl+0x120>)
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f7fb fd1c 	bl	8000a24 <__aeabi_dcmplt>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <BalancePositionLinearControl+0x58>
	{
		PositionLinearControlSwitch = 1;
 8004ff2:	4b36      	ldr	r3, [pc, #216]	; (80050cc <BalancePositionLinearControl+0x12c>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
	}

	if (BalanceActive)
 8004ff8:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <BalancePositionLinearControl+0x134>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d04c      	beq.n	800509a <BalancePositionLinearControl+0xfa>
	{
		float Error = PositionLinearDemand - PositionLinear;
 8005000:	4b35      	ldr	r3, [pc, #212]	; (80050d8 <BalancePositionLinearControl+0x138>)
 8005002:	ed93 7a00 	vldr	s14, [r3]
 8005006:	4b35      	ldr	r3, [pc, #212]	; (80050dc <BalancePositionLinearControl+0x13c>)
 8005008:	edd3 7a00 	vldr	s15, [r3]
 800500c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005010:	edc7 7a01 	vstr	s15, [r7, #4]
		if (Error > 0)
 8005014:	edd7 7a01 	vldr	s15, [r7, #4]
 8005018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800501c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005020:	dd0b      	ble.n	800503a <BalancePositionLinearControl+0x9a>
		{
			PositionIValue += PositionI;
 8005022:	4b2f      	ldr	r3, [pc, #188]	; (80050e0 <BalancePositionLinearControl+0x140>)
 8005024:	ed93 7a00 	vldr	s14, [r3]
 8005028:	4b2e      	ldr	r3, [pc, #184]	; (80050e4 <BalancePositionLinearControl+0x144>)
 800502a:	edd3 7a00 	vldr	s15, [r3]
 800502e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005032:	4b2b      	ldr	r3, [pc, #172]	; (80050e0 <BalancePositionLinearControl+0x140>)
 8005034:	edc3 7a00 	vstr	s15, [r3]
 8005038:	e00a      	b.n	8005050 <BalancePositionLinearControl+0xb0>
		}
		else
		{
			PositionIValue -= PositionI;
 800503a:	4b29      	ldr	r3, [pc, #164]	; (80050e0 <BalancePositionLinearControl+0x140>)
 800503c:	ed93 7a00 	vldr	s14, [r3]
 8005040:	4b28      	ldr	r3, [pc, #160]	; (80050e4 <BalancePositionLinearControl+0x144>)
 8005042:	edd3 7a00 	vldr	s15, [r3]
 8005046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800504a:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <BalancePositionLinearControl+0x140>)
 800504c:	edc3 7a00 	vstr	s15, [r3]
		}

		PositionPID = Error * PositionP + PositionIValue;
 8005050:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <BalancePositionLinearControl+0x148>)
 8005052:	ed93 7a00 	vldr	s14, [r3]
 8005056:	edd7 7a01 	vldr	s15, [r7, #4]
 800505a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800505e:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <BalancePositionLinearControl+0x140>)
 8005060:	edd3 7a00 	vldr	s15, [r3]
 8005064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005068:	4b20      	ldr	r3, [pc, #128]	; (80050ec <BalancePositionLinearControl+0x14c>)
 800506a:	edc3 7a00 	vstr	s15, [r3]
		if (PositionLinearControlSwitch)
 800506e:	4b17      	ldr	r3, [pc, #92]	; (80050cc <BalancePositionLinearControl+0x12c>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <BalancePositionLinearControl+0xe0>
		{
			SpeedLinearDemand = PositionPID;
 8005076:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <BalancePositionLinearControl+0x14c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <BalancePositionLinearControl+0x150>)
 800507c:	6013      	str	r3, [r2, #0]
	else
	{
		PositionLinearDemand = PositionLinear;
		PositionIValue = 0;
	}
}
 800507e:	e014      	b.n	80050aa <BalancePositionLinearControl+0x10a>
			SpeedLinearDemand = Front;
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <BalancePositionLinearControl+0x128>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1a      	ldr	r2, [pc, #104]	; (80050f0 <BalancePositionLinearControl+0x150>)
 8005086:	6013      	str	r3, [r2, #0]
			PositionLinearDemand = PositionLinear;
 8005088:	4b14      	ldr	r3, [pc, #80]	; (80050dc <BalancePositionLinearControl+0x13c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a12      	ldr	r2, [pc, #72]	; (80050d8 <BalancePositionLinearControl+0x138>)
 800508e:	6013      	str	r3, [r2, #0]
			PositionIValue = 0;
 8005090:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <BalancePositionLinearControl+0x140>)
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
}
 8005098:	e007      	b.n	80050aa <BalancePositionLinearControl+0x10a>
		PositionLinearDemand = PositionLinear;
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <BalancePositionLinearControl+0x13c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a0e      	ldr	r2, [pc, #56]	; (80050d8 <BalancePositionLinearControl+0x138>)
 80050a0:	6013      	str	r3, [r2, #0]
		PositionIValue = 0;
 80050a2:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <BalancePositionLinearControl+0x140>)
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
}
 80050aa:	bf00      	nop
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	f3af 8000 	nop.w
 80050b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80050bc:	3f50624d 	.word	0x3f50624d
 80050c0:	47ae147b 	.word	0x47ae147b
 80050c4:	3f947ae1 	.word	0x3f947ae1
 80050c8:	200000f4 	.word	0x200000f4
 80050cc:	200002d0 	.word	0x200002d0
 80050d0:	2000022c 	.word	0x2000022c
 80050d4:	200002c4 	.word	0x200002c4
 80050d8:	20000224 	.word	0x20000224
 80050dc:	20000244 	.word	0x20000244
 80050e0:	200003b0 	.word	0x200003b0
 80050e4:	200000fc 	.word	0x200000fc
 80050e8:	20000004 	.word	0x20000004
 80050ec:	200003a4 	.word	0x200003a4
 80050f0:	20000314 	.word	0x20000314
 80050f4:	00000000 	.word	0x00000000

080050f8 <BalanceSpeedLinearControl>:
void BalanceSpeedLinearControl()
{
 80050f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050fc:	b086      	sub	sp, #24
 80050fe:	af00      	add	r7, sp, #0
	float deltaTime = (HAL_GetTick() - linearTime) / 1000000.0;
 8005100:	f001 fbf0 	bl	80068e4 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	4bc0      	ldr	r3, [pc, #768]	; (8005408 <BalanceSpeedLinearControl+0x310>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	4618      	mov	r0, r3
 800510e:	f7fb f99d 	bl	800044c <__aeabi_ui2d>
 8005112:	a3bb      	add	r3, pc, #748	; (adr r3, 8005400 <BalanceSpeedLinearControl+0x308>)
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f7fb fb3c 	bl	8000794 <__aeabi_ddiv>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4610      	mov	r0, r2
 8005122:	4619      	mov	r1, r3
 8005124:	f7fb fcce 	bl	8000ac4 <__aeabi_d2f>
 8005128:	4603      	mov	r3, r0
 800512a:	617b      	str	r3, [r7, #20]
	linearTime = HAL_GetTick();
 800512c:	f001 fbda 	bl	80068e4 <HAL_GetTick>
 8005130:	4603      	mov	r3, r0
 8005132:	4ab5      	ldr	r2, [pc, #724]	; (8005408 <BalanceSpeedLinearControl+0x310>)
 8005134:	6013      	str	r3, [r2, #0]

	if (deltaTime < 0)
 8005136:	edd7 7a05 	vldr	s15, [r7, #20]
 800513a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005142:	d502      	bpl.n	800514a <BalanceSpeedLinearControl+0x52>
	{
		deltaTime = linearDeltaTimePrev;
 8005144:	4bb1      	ldr	r3, [pc, #708]	; (800540c <BalanceSpeedLinearControl+0x314>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	617b      	str	r3, [r7, #20]
	}
	linearDeltaTimePrev = deltaTime;
 800514a:	4ab0      	ldr	r2, [pc, #704]	; (800540c <BalanceSpeedLinearControl+0x314>)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	6013      	str	r3, [r2, #0]

	SpeedLinearDemand = SpeedLinearDemand > BALANCE_PLATFORM_Y_MAX ? BALANCE_PLATFORM_Y_MAX : SpeedLinearDemand;
 8005150:	4baf      	ldr	r3, [pc, #700]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 8005152:	edd3 7a00 	vldr	s15, [r3]
 8005156:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800515a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800515e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005162:	dd01      	ble.n	8005168 <BalanceSpeedLinearControl+0x70>
 8005164:	4bab      	ldr	r3, [pc, #684]	; (8005414 <BalanceSpeedLinearControl+0x31c>)
 8005166:	e001      	b.n	800516c <BalanceSpeedLinearControl+0x74>
 8005168:	4ba9      	ldr	r3, [pc, #676]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4aa8      	ldr	r2, [pc, #672]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 800516e:	6013      	str	r3, [r2, #0]
	SpeedLinearDemand = SpeedLinearDemand < -BALANCE_PLATFORM_Y_MAX ? -BALANCE_PLATFORM_Y_MAX : SpeedLinearDemand;
 8005170:	4ba7      	ldr	r3, [pc, #668]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 8005172:	edd3 7a00 	vldr	s15, [r3]
 8005176:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800517a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800517e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005182:	d501      	bpl.n	8005188 <BalanceSpeedLinearControl+0x90>
 8005184:	4ba4      	ldr	r3, [pc, #656]	; (8005418 <BalanceSpeedLinearControl+0x320>)
 8005186:	e001      	b.n	800518c <BalanceSpeedLinearControl+0x94>
 8005188:	4ba1      	ldr	r3, [pc, #644]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4aa0      	ldr	r2, [pc, #640]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 800518e:	6013      	str	r3, [r2, #0]

	if (BalanceActive)
 8005190:	4ba2      	ldr	r3, [pc, #648]	; (800541c <BalanceSpeedLinearControl+0x324>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8124 	beq.w	80053e2 <BalanceSpeedLinearControl+0x2ea>
	{
		float linearError = SpeedLinearDemand - SpeedLinear;
 800519a:	4b9d      	ldr	r3, [pc, #628]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 800519c:	ed93 7a00 	vldr	s14, [r3]
 80051a0:	4b9f      	ldr	r3, [pc, #636]	; (8005420 <BalanceSpeedLinearControl+0x328>)
 80051a2:	edd3 7a00 	vldr	s15, [r3]
 80051a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051aa:	edc7 7a04 	vstr	s15, [r7, #16]

		if ((SpeedLinearDemand * linearIntegral > 0) && (abs(SpeedLinear) > abs(SpeedLinearDemand * 1.5)))
 80051ae:	4b98      	ldr	r3, [pc, #608]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 80051b0:	ed93 7a00 	vldr	s14, [r3]
 80051b4:	4b9b      	ldr	r3, [pc, #620]	; (8005424 <BalanceSpeedLinearControl+0x32c>)
 80051b6:	edd3 7a00 	vldr	s15, [r3]
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c6:	dd26      	ble.n	8005216 <BalanceSpeedLinearControl+0x11e>
 80051c8:	4b95      	ldr	r3, [pc, #596]	; (8005420 <BalanceSpeedLinearControl+0x328>)
 80051ca:	edd3 7a00 	vldr	s15, [r3]
 80051ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051d2:	ee17 3a90 	vmov	r3, s15
 80051d6:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80051da:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 80051de:	4b8c      	ldr	r3, [pc, #560]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fb f954 	bl	8000490 <__aeabi_f2d>
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	4b8e      	ldr	r3, [pc, #568]	; (8005428 <BalanceSpeedLinearControl+0x330>)
 80051ee:	f7fb f9a7 	bl	8000540 <__aeabi_dmul>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4610      	mov	r0, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	f7fb fc3b 	bl	8000a74 <__aeabi_d2iz>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	bfb8      	it	lt
 8005204:	425b      	neglt	r3, r3
 8005206:	429c      	cmp	r4, r3
 8005208:	dd05      	ble.n	8005216 <BalanceSpeedLinearControl+0x11e>
		{
			linearIntegralerrorCoun++;
 800520a:	4b88      	ldr	r3, [pc, #544]	; (800542c <BalanceSpeedLinearControl+0x334>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3301      	adds	r3, #1
 8005210:	4a86      	ldr	r2, [pc, #536]	; (800542c <BalanceSpeedLinearControl+0x334>)
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	e002      	b.n	800521c <BalanceSpeedLinearControl+0x124>
		}
		else
		{
			linearIntegralerrorCoun = 0;
 8005216:	4b85      	ldr	r3, [pc, #532]	; (800542c <BalanceSpeedLinearControl+0x334>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
		}
		float diff = (linearError - linearLastError) / deltaTime;
 800521c:	4b84      	ldr	r3, [pc, #528]	; (8005430 <BalanceSpeedLinearControl+0x338>)
 800521e:	edd3 7a00 	vldr	s15, [r3]
 8005222:	ed97 7a04 	vldr	s14, [r7, #16]
 8005226:	ee77 6a67 	vsub.f32	s13, s14, s15
 800522a:	ed97 7a05 	vldr	s14, [r7, #20]
 800522e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005232:	edc7 7a03 	vstr	s15, [r7, #12]
		linearLastError = linearError;
 8005236:	4a7e      	ldr	r2, [pc, #504]	; (8005430 <BalanceSpeedLinearControl+0x338>)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	6013      	str	r3, [r2, #0]
		float RC = 1.0f / linearFcutDiff;
 800523c:	4b7d      	ldr	r3, [pc, #500]	; (8005434 <BalanceSpeedLinearControl+0x33c>)
 800523e:	ed93 7a00 	vldr	s14, [r3]
 8005242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800524a:	edc7 7a02 	vstr	s15, [r7, #8]
		float kExp = deltaTime / (RC + deltaTime);
 800524e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005252:	edd7 7a05 	vldr	s15, [r7, #20]
 8005256:	ee37 7a27 	vadd.f32	s14, s14, s15
 800525a:	edd7 6a05 	vldr	s13, [r7, #20]
 800525e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005262:	edc7 7a01 	vstr	s15, [r7, #4]
		linearSmoothDiff = (1.0f - kExp) * linearSmoothDiff + kExp * diff;
 8005266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800526a:	edd7 7a01 	vldr	s15, [r7, #4]
 800526e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005272:	4b71      	ldr	r3, [pc, #452]	; (8005438 <BalanceSpeedLinearControl+0x340>)
 8005274:	edd3 7a00 	vldr	s15, [r3]
 8005278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800527c:	edd7 6a01 	vldr	s13, [r7, #4]
 8005280:	edd7 7a03 	vldr	s15, [r7, #12]
 8005284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800528c:	4b6a      	ldr	r3, [pc, #424]	; (8005438 <BalanceSpeedLinearControl+0x340>)
 800528e:	edc3 7a00 	vstr	s15, [r3]

		linearIntegral += linearError * deltaTime;
 8005292:	ed97 7a04 	vldr	s14, [r7, #16]
 8005296:	edd7 7a05 	vldr	s15, [r7, #20]
 800529a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800529e:	4b61      	ldr	r3, [pc, #388]	; (8005424 <BalanceSpeedLinearControl+0x32c>)
 80052a0:	edd3 7a00 	vldr	s15, [r3]
 80052a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052a8:	4b5e      	ldr	r3, [pc, #376]	; (8005424 <BalanceSpeedLinearControl+0x32c>)
 80052aa:	edc3 7a00 	vstr	s15, [r3]
		if ((SpeedLinearDemand < minLinearValue) && (SpeedLinearDemand > -minLinearValue))
 80052ae:	4b58      	ldr	r3, [pc, #352]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 80052b0:	ed93 7a00 	vldr	s14, [r3]
 80052b4:	4b61      	ldr	r3, [pc, #388]	; (800543c <BalanceSpeedLinearControl+0x344>)
 80052b6:	edd3 7a00 	vldr	s15, [r3]
 80052ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c2:	d510      	bpl.n	80052e6 <BalanceSpeedLinearControl+0x1ee>
 80052c4:	4b5d      	ldr	r3, [pc, #372]	; (800543c <BalanceSpeedLinearControl+0x344>)
 80052c6:	edd3 7a00 	vldr	s15, [r3]
 80052ca:	eeb1 7a67 	vneg.f32	s14, s15
 80052ce:	4b50      	ldr	r3, [pc, #320]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 80052d0:	edd3 7a00 	vldr	s15, [r3]
 80052d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052dc:	d503      	bpl.n	80052e6 <BalanceSpeedLinearControl+0x1ee>
		{
			linearIntegral = 0;
 80052de:	4b51      	ldr	r3, [pc, #324]	; (8005424 <BalanceSpeedLinearControl+0x32c>)
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
		}

		if (linearIntegralerrorCoun > 3)
 80052e6:	4b51      	ldr	r3, [pc, #324]	; (800542c <BalanceSpeedLinearControl+0x334>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	dd03      	ble.n	80052f6 <BalanceSpeedLinearControl+0x1fe>
		{
			linearIntegral = 0;
 80052ee:	4b4d      	ldr	r3, [pc, #308]	; (8005424 <BalanceSpeedLinearControl+0x32c>)
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
		}
		SpeedPID = linearError * SpeedPNew + linearIntegral * SpeedINew + linearSmoothDiff * SpeedDNew;
 80052f6:	4b52      	ldr	r3, [pc, #328]	; (8005440 <BalanceSpeedLinearControl+0x348>)
 80052f8:	ed93 7a00 	vldr	s14, [r3]
 80052fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005300:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005304:	4b47      	ldr	r3, [pc, #284]	; (8005424 <BalanceSpeedLinearControl+0x32c>)
 8005306:	edd3 6a00 	vldr	s13, [r3]
 800530a:	4b4e      	ldr	r3, [pc, #312]	; (8005444 <BalanceSpeedLinearControl+0x34c>)
 800530c:	edd3 7a00 	vldr	s15, [r3]
 8005310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005314:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005318:	4b47      	ldr	r3, [pc, #284]	; (8005438 <BalanceSpeedLinearControl+0x340>)
 800531a:	edd3 6a00 	vldr	s13, [r3]
 800531e:	4b4a      	ldr	r3, [pc, #296]	; (8005448 <BalanceSpeedLinearControl+0x350>)
 8005320:	edd3 7a00 	vldr	s15, [r3]
 8005324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800532c:	4b47      	ldr	r3, [pc, #284]	; (800544c <BalanceSpeedLinearControl+0x354>)
 800532e:	edc3 7a00 	vstr	s15, [r3]

		PlatformYDemand += ((SpeedPID / 1.0) - PlatformYDemand) * SpeedFilter;
 8005332:	4b47      	ldr	r3, [pc, #284]	; (8005450 <BalanceSpeedLinearControl+0x358>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f7fb f8aa 	bl	8000490 <__aeabi_f2d>
 800533c:	4604      	mov	r4, r0
 800533e:	460d      	mov	r5, r1
 8005340:	4b42      	ldr	r3, [pc, #264]	; (800544c <BalanceSpeedLinearControl+0x354>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7fb f8a3 	bl	8000490 <__aeabi_f2d>
 800534a:	4680      	mov	r8, r0
 800534c:	4689      	mov	r9, r1
 800534e:	4b40      	ldr	r3, [pc, #256]	; (8005450 <BalanceSpeedLinearControl+0x358>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fb f89c 	bl	8000490 <__aeabi_f2d>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4640      	mov	r0, r8
 800535e:	4649      	mov	r1, r9
 8005360:	f7fa ff36 	bl	80001d0 <__aeabi_dsub>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4690      	mov	r8, r2
 800536a:	4699      	mov	r9, r3
 800536c:	4b39      	ldr	r3, [pc, #228]	; (8005454 <BalanceSpeedLinearControl+0x35c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f7fb f88d 	bl	8000490 <__aeabi_f2d>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4640      	mov	r0, r8
 800537c:	4649      	mov	r1, r9
 800537e:	f7fb f8df 	bl	8000540 <__aeabi_dmul>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4620      	mov	r0, r4
 8005388:	4629      	mov	r1, r5
 800538a:	f7fa ff23 	bl	80001d4 <__adddf3>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	f7fb fb95 	bl	8000ac4 <__aeabi_d2f>
 800539a:	4603      	mov	r3, r0
 800539c:	4a2c      	ldr	r2, [pc, #176]	; (8005450 <BalanceSpeedLinearControl+0x358>)
 800539e:	6013      	str	r3, [r2, #0]

		PlatformYDemand = (PlatformYDemand > BALANCE_PLATFORM_Y_MAX) ? BALANCE_PLATFORM_Y_MAX : PlatformYDemand;
 80053a0:	4b2b      	ldr	r3, [pc, #172]	; (8005450 <BalanceSpeedLinearControl+0x358>)
 80053a2:	edd3 7a00 	vldr	s15, [r3]
 80053a6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80053aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b2:	dd01      	ble.n	80053b8 <BalanceSpeedLinearControl+0x2c0>
 80053b4:	4b17      	ldr	r3, [pc, #92]	; (8005414 <BalanceSpeedLinearControl+0x31c>)
 80053b6:	e001      	b.n	80053bc <BalanceSpeedLinearControl+0x2c4>
 80053b8:	4b25      	ldr	r3, [pc, #148]	; (8005450 <BalanceSpeedLinearControl+0x358>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a24      	ldr	r2, [pc, #144]	; (8005450 <BalanceSpeedLinearControl+0x358>)
 80053be:	6013      	str	r3, [r2, #0]
		PlatformYDemand = (PlatformYDemand < -BALANCE_PLATFORM_Y_MAX) ? -BALANCE_PLATFORM_Y_MAX : PlatformYDemand;
 80053c0:	4b23      	ldr	r3, [pc, #140]	; (8005450 <BalanceSpeedLinearControl+0x358>)
 80053c2:	edd3 7a00 	vldr	s15, [r3]
 80053c6:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80053ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d2:	d501      	bpl.n	80053d8 <BalanceSpeedLinearControl+0x2e0>
 80053d4:	4b10      	ldr	r3, [pc, #64]	; (8005418 <BalanceSpeedLinearControl+0x320>)
 80053d6:	e001      	b.n	80053dc <BalanceSpeedLinearControl+0x2e4>
 80053d8:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <BalanceSpeedLinearControl+0x358>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1c      	ldr	r2, [pc, #112]	; (8005450 <BalanceSpeedLinearControl+0x358>)
 80053de:	6013      	str	r3, [r2, #0]
	else
	{
		SpeedLinearDemand = 0;
		linearIntegral = 0;
	}
}
 80053e0:	e007      	b.n	80053f2 <BalanceSpeedLinearControl+0x2fa>
		SpeedLinearDemand = 0;
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <BalanceSpeedLinearControl+0x318>)
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
		linearIntegral = 0;
 80053ea:	4b0e      	ldr	r3, [pc, #56]	; (8005424 <BalanceSpeedLinearControl+0x32c>)
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
}
 80053f2:	bf00      	nop
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053fc:	f3af 8000 	nop.w
 8005400:	00000000 	.word	0x00000000
 8005404:	412e8480 	.word	0x412e8480
 8005408:	20000100 	.word	0x20000100
 800540c:	20000104 	.word	0x20000104
 8005410:	20000314 	.word	0x20000314
 8005414:	40a00000 	.word	0x40a00000
 8005418:	c0a00000 	.word	0xc0a00000
 800541c:	200002c4 	.word	0x200002c4
 8005420:	2000022c 	.word	0x2000022c
 8005424:	20000108 	.word	0x20000108
 8005428:	3ff80000 	.word	0x3ff80000
 800542c:	2000010c 	.word	0x2000010c
 8005430:	20000110 	.word	0x20000110
 8005434:	20000008 	.word	0x20000008
 8005438:	20000114 	.word	0x20000114
 800543c:	2000000c 	.word	0x2000000c
 8005440:	20000010 	.word	0x20000010
 8005444:	20000014 	.word	0x20000014
 8005448:	20000018 	.word	0x20000018
 800544c:	200001e4 	.word	0x200001e4
 8005450:	20000118 	.word	0x20000118
 8005454:	2000001c 	.word	0x2000001c

08005458 <BalancePositionAngularControl>:
void BalancePositionAngularControl()
{
 8005458:	b5b0      	push	{r4, r5, r7, lr}
 800545a:	af00      	add	r7, sp, #0
	GyroZSpeed = eulerAngles.angle.yaw - GyroZPrevious;
 800545c:	4b44      	ldr	r3, [pc, #272]	; (8005570 <BalancePositionAngularControl+0x118>)
 800545e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005462:	4b44      	ldr	r3, [pc, #272]	; (8005574 <BalancePositionAngularControl+0x11c>)
 8005464:	edd3 7a00 	vldr	s15, [r3]
 8005468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800546c:	4b42      	ldr	r3, [pc, #264]	; (8005578 <BalancePositionAngularControl+0x120>)
 800546e:	edc3 7a00 	vstr	s15, [r3]
	GyroZPrevious = eulerAngles.angle.yaw;
 8005472:	4b3f      	ldr	r3, [pc, #252]	; (8005570 <BalancePositionAngularControl+0x118>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	4a3f      	ldr	r2, [pc, #252]	; (8005574 <BalancePositionAngularControl+0x11c>)
 8005478:	6013      	str	r3, [r2, #0]
	if (BalanceActive)
 800547a:	4b40      	ldr	r3, [pc, #256]	; (800557c <BalancePositionAngularControl+0x124>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d03e      	beq.n	8005500 <BalancePositionAngularControl+0xa8>
	{
		PositionAngularDemand -= Turn / 100.0;
 8005482:	4b3f      	ldr	r3, [pc, #252]	; (8005580 <BalancePositionAngularControl+0x128>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7fb f802 	bl	8000490 <__aeabi_f2d>
 800548c:	4604      	mov	r4, r0
 800548e:	460d      	mov	r5, r1
 8005490:	4b3c      	ldr	r3, [pc, #240]	; (8005584 <BalancePositionAngularControl+0x12c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f7fa fffb 	bl	8000490 <__aeabi_f2d>
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	4b3a      	ldr	r3, [pc, #232]	; (8005588 <BalancePositionAngularControl+0x130>)
 80054a0:	f7fb f978 	bl	8000794 <__aeabi_ddiv>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4620      	mov	r0, r4
 80054aa:	4629      	mov	r1, r5
 80054ac:	f7fa fe90 	bl	80001d0 <__aeabi_dsub>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4610      	mov	r0, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	f7fb fb04 	bl	8000ac4 <__aeabi_d2f>
 80054bc:	4603      	mov	r3, r0
 80054be:	4a30      	ldr	r2, [pc, #192]	; (8005580 <BalancePositionAngularControl+0x128>)
 80054c0:	6013      	str	r3, [r2, #0]

		RotationPID = (eulerAngles.angle.yaw - PositionAngularDemand) * RotationP + GyroZSpeed * RotationD;
 80054c2:	4b2b      	ldr	r3, [pc, #172]	; (8005570 <BalancePositionAngularControl+0x118>)
 80054c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80054c8:	4b2d      	ldr	r3, [pc, #180]	; (8005580 <BalancePositionAngularControl+0x128>)
 80054ca:	edd3 7a00 	vldr	s15, [r3]
 80054ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054d2:	4b2e      	ldr	r3, [pc, #184]	; (800558c <BalancePositionAngularControl+0x134>)
 80054d4:	edd3 7a00 	vldr	s15, [r3]
 80054d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054dc:	4b26      	ldr	r3, [pc, #152]	; (8005578 <BalancePositionAngularControl+0x120>)
 80054de:	edd3 6a00 	vldr	s13, [r3]
 80054e2:	4b2b      	ldr	r3, [pc, #172]	; (8005590 <BalancePositionAngularControl+0x138>)
 80054e4:	edd3 7a00 	vldr	s15, [r3]
 80054e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <BalancePositionAngularControl+0x13c>)
 80054f2:	edc3 7a00 	vstr	s15, [r3]
		DutyTurn = RotationPID;
 80054f6:	4b27      	ldr	r3, [pc, #156]	; (8005594 <BalancePositionAngularControl+0x13c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a27      	ldr	r2, [pc, #156]	; (8005598 <BalancePositionAngularControl+0x140>)
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e007      	b.n	8005510 <BalancePositionAngularControl+0xb8>
	}
	else
	{
		PositionAngularDemand = eulerAngles.angle.yaw;
 8005500:	4b1b      	ldr	r3, [pc, #108]	; (8005570 <BalancePositionAngularControl+0x118>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <BalancePositionAngularControl+0x128>)
 8005506:	6013      	str	r3, [r2, #0]
		DutyTurn = 0;
 8005508:	4b23      	ldr	r3, [pc, #140]	; (8005598 <BalancePositionAngularControl+0x140>)
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
	}
	DutyTurn = (DutyTurn > BALANCE_DUTY_MAX_ANGULAR) ? BALANCE_DUTY_MAX_ANGULAR : DutyTurn;
 8005510:	4b21      	ldr	r3, [pc, #132]	; (8005598 <BalancePositionAngularControl+0x140>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fa ffbb 	bl	8000490 <__aeabi_f2d>
 800551a:	a311      	add	r3, pc, #68	; (adr r3, 8005560 <BalancePositionAngularControl+0x108>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f7fb fa9e 	bl	8000a60 <__aeabi_dcmpgt>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <BalancePositionAngularControl+0xd6>
 800552a:	4b1c      	ldr	r3, [pc, #112]	; (800559c <BalancePositionAngularControl+0x144>)
 800552c:	e001      	b.n	8005532 <BalancePositionAngularControl+0xda>
 800552e:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <BalancePositionAngularControl+0x140>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a19      	ldr	r2, [pc, #100]	; (8005598 <BalancePositionAngularControl+0x140>)
 8005534:	6013      	str	r3, [r2, #0]
	DutyTurn = (DutyTurn < -BALANCE_DUTY_MAX_ANGULAR) ? -BALANCE_DUTY_MAX_ANGULAR : DutyTurn;
 8005536:	4b18      	ldr	r3, [pc, #96]	; (8005598 <BalancePositionAngularControl+0x140>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7fa ffa8 	bl	8000490 <__aeabi_f2d>
 8005540:	a309      	add	r3, pc, #36	; (adr r3, 8005568 <BalancePositionAngularControl+0x110>)
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	f7fb fa6d 	bl	8000a24 <__aeabi_dcmplt>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <BalancePositionAngularControl+0xfc>
 8005550:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <BalancePositionAngularControl+0x148>)
 8005552:	e001      	b.n	8005558 <BalancePositionAngularControl+0x100>
 8005554:	4b10      	ldr	r3, [pc, #64]	; (8005598 <BalancePositionAngularControl+0x140>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a0f      	ldr	r2, [pc, #60]	; (8005598 <BalancePositionAngularControl+0x140>)
 800555a:	6013      	str	r3, [r2, #0]
}
 800555c:	bf00      	nop
 800555e:	bdb0      	pop	{r4, r5, r7, pc}
 8005560:	9999999a 	.word	0x9999999a
 8005564:	3fb99999 	.word	0x3fb99999
 8005568:	9999999a 	.word	0x9999999a
 800556c:	bfb99999 	.word	0xbfb99999
 8005570:	200001bc 	.word	0x200001bc
 8005574:	20000240 	.word	0x20000240
 8005578:	200003a0 	.word	0x200003a0
 800557c:	200002c4 	.word	0x200002c4
 8005580:	200003ac 	.word	0x200003ac
 8005584:	200000f8 	.word	0x200000f8
 8005588:	40590000 	.word	0x40590000
 800558c:	2000002c 	.word	0x2000002c
 8005590:	20000030 	.word	0x20000030
 8005594:	200001a0 	.word	0x200001a0
 8005598:	200001fc 	.word	0x200001fc
 800559c:	3dcccccd 	.word	0x3dcccccd
 80055a0:	bdcccccd 	.word	0xbdcccccd
 80055a4:	00000000 	.word	0x00000000

080055a8 <BalanceLoop>:
void BalanceLoop()
{
 80055a8:	b5b0      	push	{r4, r5, r7, lr}
 80055aa:	af00      	add	r7, sp, #0
	GyroY = (eulerAngles.angle.pitch * 1) + PlatformYDemand + AngleCorrection - ParkingAngle;
 80055ac:	4b4e      	ldr	r3, [pc, #312]	; (80056e8 <BalanceLoop+0x140>)
 80055ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80055b2:	4b4e      	ldr	r3, [pc, #312]	; (80056ec <BalanceLoop+0x144>)
 80055b4:	edd3 7a00 	vldr	s15, [r3]
 80055b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055bc:	4b4c      	ldr	r3, [pc, #304]	; (80056f0 <BalanceLoop+0x148>)
 80055be:	edd3 7a00 	vldr	s15, [r3]
 80055c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055c6:	4b4b      	ldr	r3, [pc, #300]	; (80056f4 <BalanceLoop+0x14c>)
 80055c8:	edd3 7a00 	vldr	s15, [r3]
 80055cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055d0:	4b49      	ldr	r3, [pc, #292]	; (80056f8 <BalanceLoop+0x150>)
 80055d2:	edc3 7a00 	vstr	s15, [r3]

	GyroYSpeed = GyroY - GyroYPrevious;
 80055d6:	4b48      	ldr	r3, [pc, #288]	; (80056f8 <BalanceLoop+0x150>)
 80055d8:	ed93 7a00 	vldr	s14, [r3]
 80055dc:	4b47      	ldr	r3, [pc, #284]	; (80056fc <BalanceLoop+0x154>)
 80055de:	edd3 7a00 	vldr	s15, [r3]
 80055e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055e6:	4b46      	ldr	r3, [pc, #280]	; (8005700 <BalanceLoop+0x158>)
 80055e8:	edc3 7a00 	vstr	s15, [r3]
	GyroYPrevious = GyroY;
 80055ec:	4b42      	ldr	r3, [pc, #264]	; (80056f8 <BalanceLoop+0x150>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a42      	ldr	r2, [pc, #264]	; (80056fc <BalanceLoop+0x154>)
 80055f2:	6013      	str	r3, [r2, #0]

	if (BalanceActive)
 80055f4:	4b43      	ldr	r3, [pc, #268]	; (8005704 <BalanceLoop+0x15c>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d05d      	beq.n	80056b8 <BalanceLoop+0x110>
	{
		BalancePID = -GyroY * (float)BalanceP - GyroYSpeed * (float)BalanceD;
 80055fc:	4b3e      	ldr	r3, [pc, #248]	; (80056f8 <BalanceLoop+0x150>)
 80055fe:	edd3 7a00 	vldr	s15, [r3]
 8005602:	eeb1 7a67 	vneg.f32	s14, s15
 8005606:	4b40      	ldr	r3, [pc, #256]	; (8005708 <BalanceLoop+0x160>)
 8005608:	edd3 7a00 	vldr	s15, [r3]
 800560c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005610:	4b3b      	ldr	r3, [pc, #236]	; (8005700 <BalanceLoop+0x158>)
 8005612:	edd3 6a00 	vldr	s13, [r3]
 8005616:	4b3d      	ldr	r3, [pc, #244]	; (800570c <BalanceLoop+0x164>)
 8005618:	edd3 7a00 	vldr	s15, [r3]
 800561c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005624:	4b3a      	ldr	r3, [pc, #232]	; (8005710 <BalanceLoop+0x168>)
 8005626:	edc3 7a00 	vstr	s15, [r3]

		DutyFront += BalancePID * 0.000001;
 800562a:	4b3a      	ldr	r3, [pc, #232]	; (8005714 <BalanceLoop+0x16c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f7fa ff2e 	bl	8000490 <__aeabi_f2d>
 8005634:	4604      	mov	r4, r0
 8005636:	460d      	mov	r5, r1
 8005638:	4b35      	ldr	r3, [pc, #212]	; (8005710 <BalanceLoop+0x168>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f7fa ff27 	bl	8000490 <__aeabi_f2d>
 8005642:	a323      	add	r3, pc, #140	; (adr r3, 80056d0 <BalanceLoop+0x128>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa ff7a 	bl	8000540 <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4620      	mov	r0, r4
 8005652:	4629      	mov	r1, r5
 8005654:	f7fa fdbe 	bl	80001d4 <__adddf3>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	f7fb fa30 	bl	8000ac4 <__aeabi_d2f>
 8005664:	4603      	mov	r3, r0
 8005666:	4a2b      	ldr	r2, [pc, #172]	; (8005714 <BalanceLoop+0x16c>)
 8005668:	6013      	str	r3, [r2, #0]

		DutyFront = (DutyFront > BALANCE_DUTY_MAX_LINEAR) ? BALANCE_DUTY_MAX_LINEAR : DutyFront;
 800566a:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <BalanceLoop+0x16c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fa ff0e 	bl	8000490 <__aeabi_f2d>
 8005674:	a318      	add	r3, pc, #96	; (adr r3, 80056d8 <BalanceLoop+0x130>)
 8005676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567a:	f7fb f9f1 	bl	8000a60 <__aeabi_dcmpgt>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <BalanceLoop+0xe0>
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <BalanceLoop+0x170>)
 8005686:	e001      	b.n	800568c <BalanceLoop+0xe4>
 8005688:	4b22      	ldr	r3, [pc, #136]	; (8005714 <BalanceLoop+0x16c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a21      	ldr	r2, [pc, #132]	; (8005714 <BalanceLoop+0x16c>)
 800568e:	6013      	str	r3, [r2, #0]
		DutyFront = (DutyFront < -BALANCE_DUTY_MAX_LINEAR) ? -BALANCE_DUTY_MAX_LINEAR : DutyFront;
 8005690:	4b20      	ldr	r3, [pc, #128]	; (8005714 <BalanceLoop+0x16c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f7fa fefb 	bl	8000490 <__aeabi_f2d>
 800569a:	a311      	add	r3, pc, #68	; (adr r3, 80056e0 <BalanceLoop+0x138>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fb f9c0 	bl	8000a24 <__aeabi_dcmplt>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <BalanceLoop+0x106>
 80056aa:	4b1c      	ldr	r3, [pc, #112]	; (800571c <BalanceLoop+0x174>)
 80056ac:	e001      	b.n	80056b2 <BalanceLoop+0x10a>
 80056ae:	4b19      	ldr	r3, [pc, #100]	; (8005714 <BalanceLoop+0x16c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a18      	ldr	r2, [pc, #96]	; (8005714 <BalanceLoop+0x16c>)
 80056b4:	6013      	str	r3, [r2, #0]
	else
	{
		PlatformYDemand = 0;
		DutyFront = 0;
	}
}
 80056b6:	e007      	b.n	80056c8 <BalanceLoop+0x120>
		PlatformYDemand = 0;
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <BalanceLoop+0x144>)
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
		DutyFront = 0;
 80056c0:	4b14      	ldr	r3, [pc, #80]	; (8005714 <BalanceLoop+0x16c>)
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]
}
 80056c8:	bf00      	nop
 80056ca:	bdb0      	pop	{r4, r5, r7, pc}
 80056cc:	f3af 8000 	nop.w
 80056d0:	a0b5ed8d 	.word	0xa0b5ed8d
 80056d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80056d8:	33333333 	.word	0x33333333
 80056dc:	3fc33333 	.word	0x3fc33333
 80056e0:	33333333 	.word	0x33333333
 80056e4:	bfc33333 	.word	0xbfc33333
 80056e8:	200001bc 	.word	0x200001bc
 80056ec:	20000118 	.word	0x20000118
 80056f0:	2000011c 	.word	0x2000011c
 80056f4:	20000248 	.word	0x20000248
 80056f8:	20000308 	.word	0x20000308
 80056fc:	200001a4 	.word	0x200001a4
 8005700:	200002d4 	.word	0x200002d4
 8005704:	200002c4 	.word	0x200002c4
 8005708:	20000020 	.word	0x20000020
 800570c:	20000024 	.word	0x20000024
 8005710:	20000184 	.word	0x20000184
 8005714:	20000180 	.word	0x20000180
 8005718:	3e19999a 	.word	0x3e19999a
 800571c:	be19999a 	.word	0xbe19999a

08005720 <BalanceResultLoop>:
void BalanceResultLoop()
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
	ResultLeft += ((DutyFront + DutyTurn) - ResultLeft) * BalanceFilter;
 8005724:	4b55      	ldr	r3, [pc, #340]	; (800587c <BalanceResultLoop+0x15c>)
 8005726:	ed93 7a00 	vldr	s14, [r3]
 800572a:	4b55      	ldr	r3, [pc, #340]	; (8005880 <BalanceResultLoop+0x160>)
 800572c:	edd3 7a00 	vldr	s15, [r3]
 8005730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005734:	4b53      	ldr	r3, [pc, #332]	; (8005884 <BalanceResultLoop+0x164>)
 8005736:	edd3 7a00 	vldr	s15, [r3]
 800573a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800573e:	4b52      	ldr	r3, [pc, #328]	; (8005888 <BalanceResultLoop+0x168>)
 8005740:	edd3 7a00 	vldr	s15, [r3]
 8005744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005748:	4b4e      	ldr	r3, [pc, #312]	; (8005884 <BalanceResultLoop+0x164>)
 800574a:	edd3 7a00 	vldr	s15, [r3]
 800574e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005752:	4b4c      	ldr	r3, [pc, #304]	; (8005884 <BalanceResultLoop+0x164>)
 8005754:	edc3 7a00 	vstr	s15, [r3]
	ResultRight += ((DutyFront - DutyTurn) - ResultRight) * BalanceFilter;
 8005758:	4b48      	ldr	r3, [pc, #288]	; (800587c <BalanceResultLoop+0x15c>)
 800575a:	ed93 7a00 	vldr	s14, [r3]
 800575e:	4b48      	ldr	r3, [pc, #288]	; (8005880 <BalanceResultLoop+0x160>)
 8005760:	edd3 7a00 	vldr	s15, [r3]
 8005764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005768:	4b48      	ldr	r3, [pc, #288]	; (800588c <BalanceResultLoop+0x16c>)
 800576a:	edd3 7a00 	vldr	s15, [r3]
 800576e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005772:	4b45      	ldr	r3, [pc, #276]	; (8005888 <BalanceResultLoop+0x168>)
 8005774:	edd3 7a00 	vldr	s15, [r3]
 8005778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800577c:	4b43      	ldr	r3, [pc, #268]	; (800588c <BalanceResultLoop+0x16c>)
 800577e:	edd3 7a00 	vldr	s15, [r3]
 8005782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005786:	4b41      	ldr	r3, [pc, #260]	; (800588c <BalanceResultLoop+0x16c>)
 8005788:	edc3 7a00 	vstr	s15, [r3]

	SerialControlWheelsRequest.WheelLeft = ResultLeft;
 800578c:	4b3d      	ldr	r3, [pc, #244]	; (8005884 <BalanceResultLoop+0x164>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b3f      	ldr	r3, [pc, #252]	; (8005890 <BalanceResultLoop+0x170>)
 8005792:	3306      	adds	r3, #6
 8005794:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight = ResultRight;
 8005796:	4b3d      	ldr	r3, [pc, #244]	; (800588c <BalanceResultLoop+0x16c>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b3d      	ldr	r3, [pc, #244]	; (8005890 <BalanceResultLoop+0x170>)
 800579c:	330a      	adds	r3, #10
 800579e:	601a      	str	r2, [r3, #0]

	SerialControlWheelsRequest.WheelLeft += RotationI * (BTControl.Front);
 80057a0:	4b3b      	ldr	r3, [pc, #236]	; (8005890 <BalanceResultLoop+0x170>)
 80057a2:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80057a6:	4613      	mov	r3, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	4b3a      	ldr	r3, [pc, #232]	; (8005894 <BalanceResultLoop+0x174>)
 80057ac:	ed93 7a00 	vldr	s14, [r3]
 80057b0:	4b39      	ldr	r3, [pc, #228]	; (8005898 <BalanceResultLoop+0x178>)
 80057b2:	edd3 7a00 	vldr	s15, [r3]
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	ee07 2a10 	vmov	s14, r2
 80057be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057c2:	4b33      	ldr	r3, [pc, #204]	; (8005890 <BalanceResultLoop+0x170>)
 80057c4:	3306      	adds	r3, #6
 80057c6:	ee17 2a90 	vmov	r2, s15
 80057ca:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight += RotationI * (BTControl.Front);
 80057cc:	4b30      	ldr	r3, [pc, #192]	; (8005890 <BalanceResultLoop+0x170>)
 80057ce:	f8d3 200a 	ldr.w	r2, [r3, #10]
 80057d2:	4613      	mov	r3, r2
 80057d4:	461a      	mov	r2, r3
 80057d6:	4b2f      	ldr	r3, [pc, #188]	; (8005894 <BalanceResultLoop+0x174>)
 80057d8:	ed93 7a00 	vldr	s14, [r3]
 80057dc:	4b2e      	ldr	r3, [pc, #184]	; (8005898 <BalanceResultLoop+0x178>)
 80057de:	edd3 7a00 	vldr	s15, [r3]
 80057e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e6:	ee07 2a10 	vmov	s14, r2
 80057ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057ee:	4b28      	ldr	r3, [pc, #160]	; (8005890 <BalanceResultLoop+0x170>)
 80057f0:	330a      	adds	r3, #10
 80057f2:	ee17 2a90 	vmov	r2, s15
 80057f6:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelLeft += ManualDrive;
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <BalanceResultLoop+0x170>)
 80057fa:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80057fe:	4613      	mov	r3, r2
 8005800:	461a      	mov	r2, r3
 8005802:	4b26      	ldr	r3, [pc, #152]	; (800589c <BalanceResultLoop+0x17c>)
 8005804:	edd3 7a00 	vldr	s15, [r3]
 8005808:	ee07 2a10 	vmov	s14, r2
 800580c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005810:	4b1f      	ldr	r3, [pc, #124]	; (8005890 <BalanceResultLoop+0x170>)
 8005812:	3306      	adds	r3, #6
 8005814:	ee17 2a90 	vmov	r2, s15
 8005818:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight += ManualDrive;
 800581a:	4b1d      	ldr	r3, [pc, #116]	; (8005890 <BalanceResultLoop+0x170>)
 800581c:	f8d3 200a 	ldr.w	r2, [r3, #10]
 8005820:	4613      	mov	r3, r2
 8005822:	461a      	mov	r2, r3
 8005824:	4b1d      	ldr	r3, [pc, #116]	; (800589c <BalanceResultLoop+0x17c>)
 8005826:	edd3 7a00 	vldr	s15, [r3]
 800582a:	ee07 2a10 	vmov	s14, r2
 800582e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005832:	4b17      	ldr	r3, [pc, #92]	; (8005890 <BalanceResultLoop+0x170>)
 8005834:	330a      	adds	r3, #10
 8005836:	ee17 2a90 	vmov	r2, s15
 800583a:	601a      	str	r2, [r3, #0]

	if (eulerAngles.angle.pitch + AngleCorrection > 20)
 800583c:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <BalanceResultLoop+0x180>)
 800583e:	ed93 7a01 	vldr	s14, [r3, #4]
 8005842:	4b18      	ldr	r3, [pc, #96]	; (80058a4 <BalanceResultLoop+0x184>)
 8005844:	edd3 7a00 	vldr	s15, [r3]
 8005848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800584c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005858:	dc00      	bgt.n	800585c <BalanceResultLoop+0x13c>
	{
		SerialControlWheelsRequest.WheelLeft = 0;
		SerialControlWheelsRequest.WheelRight = 0;
	}
}
 800585a:	e009      	b.n	8005870 <BalanceResultLoop+0x150>
		SerialControlWheelsRequest.WheelLeft = 0;
 800585c:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <BalanceResultLoop+0x170>)
 800585e:	3306      	adds	r3, #6
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
		SerialControlWheelsRequest.WheelRight = 0;
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <BalanceResultLoop+0x170>)
 8005868:	330a      	adds	r3, #10
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
}
 8005870:	bf00      	nop
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000180 	.word	0x20000180
 8005880:	200001fc 	.word	0x200001fc
 8005884:	20000284 	.word	0x20000284
 8005888:	20000028 	.word	0x20000028
 800588c:	20000360 	.word	0x20000360
 8005890:	200001ec 	.word	0x200001ec
 8005894:	20000188 	.word	0x20000188
 8005898:	20000120 	.word	0x20000120
 800589c:	20000124 	.word	0x20000124
 80058a0:	200001bc 	.word	0x200001bc
 80058a4:	2000011c 	.word	0x2000011c

080058a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058ae:	f000 ffb3 	bl	8006818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058b2:	f000 f965 	bl	8005b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058b6:	f7fd fc83 	bl	80031c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80058ba:	f7fd fc1b 	bl	80030f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80058be:	f000 fdaf 	bl	8006420 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80058c2:	f000 f9cd 	bl	8005c60 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80058c6:	f000 fdd5 	bl	8006474 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80058ca:	f000 fb0f 	bl	8005eec <MX_TIM1_Init>
  MX_TIM4_Init();
 80058ce:	f000 fbc5 	bl	800605c <MX_TIM4_Init>
  MX_ADC1_Init();
 80058d2:	f7fd fb41 	bl	8002f58 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
#ifndef SYSTEM_NO_ADC_INIT
  ADCInit();
 80058d6:	f7fd ff9d 	bl	8003814 <ADCInit>
#endif
#ifndef SYSTEM_NO_IMU_HW_INIT
  icm20948_init();
 80058da:	f7fc ff17 	bl	800270c <icm20948_init>
  ak09916_init();
 80058de:	f7fc ff3f 	bl	8002760 <ak09916_init>
#endif
#ifndef SYSTEM_NO_IMU_INIT
  ImuInit();
 80058e2:	f7fe fbe5 	bl	80040b0 <ImuInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  if (HAL_GetTick() - LastPkgTimeUartLow > SYSTEM_TIMING_MS_UART_LOW)
 80058e6:	f000 fffd 	bl	80068e4 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	4b91      	ldr	r3, [pc, #580]	; (8005b34 <main+0x28c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b64      	cmp	r3, #100	; 0x64
 80058f4:	d90e      	bls.n	8005914 <main+0x6c>
	  {
		  MX_USART2_UART_Init();
 80058f6:	f000 fd93 	bl	8006420 <MX_USART2_UART_Init>
		  UartLowReceiveState = 0;
 80058fa:	4b8f      	ldr	r3, [pc, #572]	; (8005b38 <main+0x290>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8005900:	2210      	movs	r2, #16
 8005902:	498e      	ldr	r1, [pc, #568]	; (8005b3c <main+0x294>)
 8005904:	488e      	ldr	r0, [pc, #568]	; (8005b40 <main+0x298>)
 8005906:	f004 fbeb 	bl	800a0e0 <HAL_UART_Receive_DMA>
		  LastPkgTimeUartLow = HAL_GetTick();
 800590a:	f000 ffeb 	bl	80068e4 <HAL_GetTick>
 800590e:	4603      	mov	r3, r0
 8005910:	4a88      	ldr	r2, [pc, #544]	; (8005b34 <main+0x28c>)
 8005912:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_HIGH_UART_LOOP
	  if (HAL_GetTick() - LastPkgTimeUartHigh > SYSTEM_TIMING_MS_UART_HIGH)
 8005914:	f000 ffe6 	bl	80068e4 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	4b8a      	ldr	r3, [pc, #552]	; (8005b44 <main+0x29c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b64      	cmp	r3, #100	; 0x64
 8005922:	d90e      	bls.n	8005942 <main+0x9a>
	  {
		  MX_USART3_UART_Init();
 8005924:	f000 fda6 	bl	8006474 <MX_USART3_UART_Init>
		  UartHighReceiveState = 0;
 8005928:	4b87      	ldr	r3, [pc, #540]	; (8005b48 <main+0x2a0>)
 800592a:	2200      	movs	r2, #0
 800592c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 800592e:	2210      	movs	r2, #16
 8005930:	4986      	ldr	r1, [pc, #536]	; (8005b4c <main+0x2a4>)
 8005932:	4887      	ldr	r0, [pc, #540]	; (8005b50 <main+0x2a8>)
 8005934:	f004 fbd4 	bl	800a0e0 <HAL_UART_Receive_DMA>
		  LastPkgTimeUartHigh = HAL_GetTick();
 8005938:	f000 ffd4 	bl	80068e4 <HAL_GetTick>
 800593c:	4603      	mov	r3, r0
 800593e:	4a81      	ldr	r2, [pc, #516]	; (8005b44 <main+0x29c>)
 8005940:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  if ((UartLowReceiveState == 10) && (SerialControlWheelsResponce.CR == 13) && (SerialControlWheelsResponce.LF == 10))
 8005942:	4b7d      	ldr	r3, [pc, #500]	; (8005b38 <main+0x290>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b0a      	cmp	r3, #10
 800594a:	d126      	bne.n	800599a <main+0xf2>
 800594c:	4b7b      	ldr	r3, [pc, #492]	; (8005b3c <main+0x294>)
 800594e:	7b9b      	ldrb	r3, [r3, #14]
 8005950:	2b0d      	cmp	r3, #13
 8005952:	d122      	bne.n	800599a <main+0xf2>
 8005954:	4b79      	ldr	r3, [pc, #484]	; (8005b3c <main+0x294>)
 8005956:	7bdb      	ldrb	r3, [r3, #15]
 8005958:	2b0a      	cmp	r3, #10
 800595a:	d11e      	bne.n	800599a <main+0xf2>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800595c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005960:	487c      	ldr	r0, [pc, #496]	; (8005b54 <main+0x2ac>)
 8005962:	f002 fad0 	bl	8007f06 <HAL_GPIO_TogglePin>
		  UartLowReceiveState = 0;
 8005966:	4b74      	ldr	r3, [pc, #464]	; (8005b38 <main+0x290>)
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
		  int32_t TemplateWheels[2] = { (SerialControlWheelsResponce.WheelLeftSteps * -1), (SerialControlWheelsResponce.WheelRightSteps * -1) };
 800596c:	4b73      	ldr	r3, [pc, #460]	; (8005b3c <main+0x294>)
 800596e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8005972:	425b      	negs	r3, r3
 8005974:	60bb      	str	r3, [r7, #8]
 8005976:	4b71      	ldr	r3, [pc, #452]	; (8005b3c <main+0x294>)
 8005978:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800597c:	425b      	negs	r3, r3
 800597e:	60fb      	str	r3, [r7, #12]
		  UartLowPrepareRaw(SYSTEM_HALL_FILTER_MAX, TemplateWheels, 2);
 8005980:	f107 0308 	add.w	r3, r7, #8
 8005984:	2202      	movs	r2, #2
 8005986:	4619      	mov	r1, r3
 8005988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800598c:	f7fd fdc8 	bl	8003520 <UartLowPrepareRaw>
		  LastPkgTimeUartLow = HAL_GetTick();
 8005990:	f000 ffa8 	bl	80068e4 <HAL_GetTick>
 8005994:	4603      	mov	r3, r0
 8005996:	4a67      	ldr	r2, [pc, #412]	; (8005b34 <main+0x28c>)
 8005998:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_GPIO_LOOP
	  if (HAL_GetTick() - LastUpdateGPIO > SYSTEM_TIMING_MS_GPIO)
 800599a:	f000 ffa3 	bl	80068e4 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	4b6d      	ldr	r3, [pc, #436]	; (8005b58 <main+0x2b0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b64      	cmp	r3, #100	; 0x64
 80059a8:	d906      	bls.n	80059b8 <main+0x110>
	  {
		  GPIOUpdate();
 80059aa:	f7fd fedf 	bl	800376c <GPIOUpdate>
		  LastUpdateGPIO = HAL_GetTick();
 80059ae:	f000 ff99 	bl	80068e4 <HAL_GetTick>
 80059b2:	4603      	mov	r3, r0
 80059b4:	4a68      	ldr	r2, [pc, #416]	; (8005b58 <main+0x2b0>)
 80059b6:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_ADC_INIT
#ifndef SYSTEM_NO_ADC_LOOP
	  if (HAL_GetTick() - LastUpdateADC > SYSTEM_TIMING_MS_ADC)
 80059b8:	f000 ff94 	bl	80068e4 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	4b67      	ldr	r3, [pc, #412]	; (8005b5c <main+0x2b4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b0a      	cmp	r3, #10
 80059c6:	d908      	bls.n	80059da <main+0x132>
	  {
		  ADCUpdate();
 80059c8:	f7fd ff3a 	bl	8003840 <ADCUpdate>
		  ADCPrepare();
 80059cc:	f7fd ff90 	bl	80038f0 <ADCPrepare>
		  LastUpdateADC = HAL_GetTick();
 80059d0:	f000 ff88 	bl	80068e4 <HAL_GetTick>
 80059d4:	4603      	mov	r3, r0
 80059d6:	4a61      	ldr	r2, [pc, #388]	; (8005b5c <main+0x2b4>)
 80059d8:	6013      	str	r3, [r2, #0]
	  }
#endif
#endif

	  if(HAL_GetTick() - LastUpdateIMU > SYSTEM_TIMING_MS_IMU)
 80059da:	f000 ff83 	bl	80068e4 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	4b5f      	ldr	r3, [pc, #380]	; (8005b60 <main+0x2b8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b0a      	cmp	r3, #10
 80059e8:	d90c      	bls.n	8005a04 <main+0x15c>
	  {
		  ImuAccelUpdate();
 80059ea:	f7fe f89d 	bl	8003b28 <ImuAccelUpdate>
		  ImuGyroUpdate();
 80059ee:	f7fe f96f 	bl	8003cd0 <ImuGyroUpdate>
		  ImuMagUpdate();
 80059f2:	f7fe fa65 	bl	8003ec0 <ImuMagUpdate>
		  ImuUpdate();
 80059f6:	f7fe fb9f 	bl	8004138 <ImuUpdate>
		  LastUpdateIMU = HAL_GetTick();
 80059fa:	f000 ff73 	bl	80068e4 <HAL_GetTick>
 80059fe:	4603      	mov	r3, r0
 8005a00:	4a57      	ldr	r2, [pc, #348]	; (8005b60 <main+0x2b8>)
 8005a02:	6013      	str	r3, [r2, #0]
	  }

#ifndef SYSTEM_NO_HIGH_UART_LOOP
	  if ((UartHighReceiveState == 10) && (SerialHighLevelRequest.CR == 13) && (SerialHighLevelRequest.LF == 10))
 8005a04:	4b50      	ldr	r3, [pc, #320]	; (8005b48 <main+0x2a0>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b0a      	cmp	r3, #10
 8005a0c:	d174      	bne.n	8005af8 <main+0x250>
 8005a0e:	4b4f      	ldr	r3, [pc, #316]	; (8005b4c <main+0x2a4>)
 8005a10:	7b9b      	ldrb	r3, [r3, #14]
 8005a12:	2b0d      	cmp	r3, #13
 8005a14:	d170      	bne.n	8005af8 <main+0x250>
 8005a16:	4b4d      	ldr	r3, [pc, #308]	; (8005b4c <main+0x2a4>)
 8005a18:	7bdb      	ldrb	r3, [r3, #15]
 8005a1a:	2b0a      	cmp	r3, #10
 8005a1c:	d16c      	bne.n	8005af8 <main+0x250>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8005a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a22:	484c      	ldr	r0, [pc, #304]	; (8005b54 <main+0x2ac>)
 8005a24:	f002 fa6f 	bl	8007f06 <HAL_GPIO_TogglePin>

		  BTControl.Front = SerialHighLevelRequest.Linear;
 8005a28:	4b48      	ldr	r3, [pc, #288]	; (8005b4c <main+0x2a4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a4d      	ldr	r2, [pc, #308]	; (8005b64 <main+0x2bc>)
 8005a2e:	6013      	str	r3, [r2, #0]
		  BTControl.Turn = SerialHighLevelRequest.Angular;
 8005a30:	4b46      	ldr	r3, [pc, #280]	; (8005b4c <main+0x2a4>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4a4b      	ldr	r2, [pc, #300]	; (8005b64 <main+0x2bc>)
 8005a36:	6053      	str	r3, [r2, #4]
		  BTControl.Drive = SerialHighLevelRequest.DriveMode;
 8005a38:	4b44      	ldr	r3, [pc, #272]	; (8005b4c <main+0x2a4>)
 8005a3a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a46:	4b47      	ldr	r3, [pc, #284]	; (8005b64 <main+0x2bc>)
 8005a48:	edc3 7a02 	vstr	s15, [r3, #8]

		  UartHighReceiveState = 0;
 8005a4c:	4b3e      	ldr	r3, [pc, #248]	; (8005b48 <main+0x2a0>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	701a      	strb	r2, [r3, #0]
		  SerialHighLevelResponce.ControllerState = -1;
 8005a52:	4b45      	ldr	r3, [pc, #276]	; (8005b68 <main+0x2c0>)
 8005a54:	22ff      	movs	r2, #255	; 0xff
 8005a56:	701a      	strb	r2, [r3, #0]
		  SerialHighLevelResponce.WheelLeftSteps = WheelsHall[0].OutputHall;
 8005a58:	4b44      	ldr	r3, [pc, #272]	; (8005b6c <main+0x2c4>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	4a42      	ldr	r2, [pc, #264]	; (8005b68 <main+0x2c0>)
 8005a5e:	f8c2 3001 	str.w	r3, [r2, #1]
		  SerialHighLevelResponce.WheelRightSteps = WheelsHall[1].OutputHall;
 8005a62:	4b42      	ldr	r3, [pc, #264]	; (8005b6c <main+0x2c4>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	4a40      	ldr	r2, [pc, #256]	; (8005b68 <main+0x2c0>)
 8005a68:	f8c2 3005 	str.w	r3, [r2, #5]
		  SerialHighLevelResponce.BatteryPersentage = LowDiagnostic.Battery;
 8005a6c:	4b40      	ldr	r3, [pc, #256]	; (8005b70 <main+0x2c8>)
 8005a6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a76:	edc7 7a01 	vstr	s15, [r7, #4]
 8005a7a:	793b      	ldrb	r3, [r7, #4]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4b3a      	ldr	r3, [pc, #232]	; (8005b68 <main+0x2c0>)
 8005a80:	725a      	strb	r2, [r3, #9]
		  SerialHighLevelResponce.Roll = eulerAngles.angle.roll;
 8005a82:	4b3c      	ldr	r3, [pc, #240]	; (8005b74 <main+0x2cc>)
 8005a84:	edd3 7a00 	vldr	s15, [r3]
 8005a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a8c:	ee17 3a90 	vmov	r3, s15
 8005a90:	b21a      	sxth	r2, r3
 8005a92:	4b35      	ldr	r3, [pc, #212]	; (8005b68 <main+0x2c0>)
 8005a94:	815a      	strh	r2, [r3, #10]
		  SerialHighLevelResponce.Pitch = eulerAngles.angle.pitch;
 8005a96:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <main+0x2cc>)
 8005a98:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aa0:	ee17 3a90 	vmov	r3, s15
 8005aa4:	b21a      	sxth	r2, r3
 8005aa6:	4b30      	ldr	r3, [pc, #192]	; (8005b68 <main+0x2c0>)
 8005aa8:	819a      	strh	r2, [r3, #12]
		  SerialHighLevelResponce.Yaw = eulerAngles.angle.yaw;
 8005aaa:	4b32      	ldr	r3, [pc, #200]	; (8005b74 <main+0x2cc>)
 8005aac:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ab4:	ee17 3a90 	vmov	r3, s15
 8005ab8:	b21a      	sxth	r2, r3
 8005aba:	4b2b      	ldr	r3, [pc, #172]	; (8005b68 <main+0x2c0>)
 8005abc:	81da      	strh	r2, [r3, #14]
		  SerialHighLevelResponce.CenterIkSensor = AdcModule.Sensors[4];
 8005abe:	4b2e      	ldr	r3, [pc, #184]	; (8005b78 <main+0x2d0>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	891a      	ldrh	r2, [r3, #8]
 8005ac4:	4b28      	ldr	r3, [pc, #160]	; (8005b68 <main+0x2c0>)
 8005ac6:	821a      	strh	r2, [r3, #16]
		  SerialHighLevelResponce.ParameterNumber = 0;
 8005ac8:	4b27      	ldr	r3, [pc, #156]	; (8005b68 <main+0x2c0>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	749a      	strb	r2, [r3, #18]
		  SerialHighLevelResponce.ParametrValue = 0;
 8005ace:	4b26      	ldr	r3, [pc, #152]	; (8005b68 <main+0x2c0>)
 8005ad0:	3313      	adds	r3, #19
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
		  SerialHighLevelResponce.CR = 13;
 8005ad8:	4b23      	ldr	r3, [pc, #140]	; (8005b68 <main+0x2c0>)
 8005ada:	220d      	movs	r2, #13
 8005adc:	75da      	strb	r2, [r3, #23]
		  SerialHighLevelResponce.LF = 10;
 8005ade:	4b22      	ldr	r3, [pc, #136]	; (8005b68 <main+0x2c0>)
 8005ae0:	220a      	movs	r2, #10
 8005ae2:	761a      	strb	r2, [r3, #24]
 		  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)SerialHighLevelResponce.Buffer, HIGH_LEVEL_RESPONCE_SIZE);
 8005ae4:	2219      	movs	r2, #25
 8005ae6:	4920      	ldr	r1, [pc, #128]	; (8005b68 <main+0x2c0>)
 8005ae8:	4819      	ldr	r0, [pc, #100]	; (8005b50 <main+0x2a8>)
 8005aea:	f004 fa7b 	bl	8009fe4 <HAL_UART_Transmit_DMA>
		  LastPkgTimeUartHigh = HAL_GetTick();
 8005aee:	f000 fef9 	bl	80068e4 <HAL_GetTick>
 8005af2:	4603      	mov	r3, r0
 8005af4:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <main+0x29c>)
 8005af6:	6013      	str	r3, [r2, #0]
	  		  WS2812_UPDATE();
	  		  LastUpdateLed = HAL_GetTick();
	  	  }
*/

	  if (HAL_GetTick() - LastUpdateLogic > SYSTEM_TIMING_MS_LOGIC)
 8005af8:	f000 fef4 	bl	80068e4 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	4b1f      	ldr	r3, [pc, #124]	; (8005b7c <main+0x2d4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b0a      	cmp	r3, #10
 8005b06:	d912      	bls.n	8005b2e <main+0x286>
	  {
		  BalancePrepare();
 8005b08:	f7fe ff92 	bl	8004a30 <BalancePrepare>
		  BalanceCalculateSpeeds();
 8005b0c:	f7ff f93c 	bl	8004d88 <BalanceCalculateSpeeds>
		  BalancePositionLinearControl();
 8005b10:	f7ff fa46 	bl	8004fa0 <BalancePositionLinearControl>
		  BalanceSpeedLinearControl();
 8005b14:	f7ff faf0 	bl	80050f8 <BalanceSpeedLinearControl>
		  BalancePositionAngularControl();
 8005b18:	f7ff fc9e 	bl	8005458 <BalancePositionAngularControl>
		  BalanceLoop();
 8005b1c:	f7ff fd44 	bl	80055a8 <BalanceLoop>
		  BalanceResultLoop();
 8005b20:	f7ff fdfe 	bl	8005720 <BalanceResultLoop>
		  LastUpdateLogic = HAL_GetTick();
 8005b24:	f000 fede 	bl	80068e4 <HAL_GetTick>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	4a14      	ldr	r2, [pc, #80]	; (8005b7c <main+0x2d4>)
 8005b2c:	6013      	str	r3, [r2, #0]
	  }

#ifndef SYSTEM_NO_LOW_UART_LOOP
	  SerialLowControlLoop();
 8005b2e:	f7fd ffe1 	bl	8003af4 <SerialLowControlLoop>
	  if (HAL_GetTick() - LastPkgTimeUartLow > SYSTEM_TIMING_MS_UART_LOW)
 8005b32:	e6d8      	b.n	80058e6 <main+0x3e>
 8005b34:	200000d0 	.word	0x200000d0
 8005b38:	200000d8 	.word	0x200000d8
 8005b3c:	200001d0 	.word	0x200001d0
 8005b40:	200007e0 	.word	0x200007e0
 8005b44:	200000d4 	.word	0x200000d4
 8005b48:	200000d9 	.word	0x200000d9
 8005b4c:	200002e0 	.word	0x200002e0
 8005b50:	200006dc 	.word	0x200006dc
 8005b54:	40020c00 	.word	0x40020c00
 8005b58:	200000e0 	.word	0x200000e0
 8005b5c:	200000e4 	.word	0x200000e4
 8005b60:	200000e8 	.word	0x200000e8
 8005b64:	20000188 	.word	0x20000188
 8005b68:	20000318 	.word	0x20000318
 8005b6c:	20000390 	.word	0x20000390
 8005b70:	20000200 	.word	0x20000200
 8005b74:	200001bc 	.word	0x200001bc
 8005b78:	20000234 	.word	0x20000234
 8005b7c:	200000ec 	.word	0x200000ec

08005b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b094      	sub	sp, #80	; 0x50
 8005b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b86:	f107 0320 	add.w	r3, r7, #32
 8005b8a:	2230      	movs	r2, #48	; 0x30
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f006 fbca 	bl	800c328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b94:	f107 030c 	add.w	r3, r7, #12
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	605a      	str	r2, [r3, #4]
 8005b9e:	609a      	str	r2, [r3, #8]
 8005ba0:	60da      	str	r2, [r3, #12]
 8005ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60bb      	str	r3, [r7, #8]
 8005ba8:	4b28      	ldr	r3, [pc, #160]	; (8005c4c <SystemClock_Config+0xcc>)
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	4a27      	ldr	r2, [pc, #156]	; (8005c4c <SystemClock_Config+0xcc>)
 8005bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8005bb4:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <SystemClock_Config+0xcc>)
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	607b      	str	r3, [r7, #4]
 8005bc4:	4b22      	ldr	r3, [pc, #136]	; (8005c50 <SystemClock_Config+0xd0>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a21      	ldr	r2, [pc, #132]	; (8005c50 <SystemClock_Config+0xd0>)
 8005bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	; (8005c50 <SystemClock_Config+0xd0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bd8:	607b      	str	r3, [r7, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005be6:	2302      	movs	r3, #2
 8005be8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005bf4:	23a8      	movs	r3, #168	; 0xa8
 8005bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c00:	f107 0320 	add.w	r3, r7, #32
 8005c04:	4618      	mov	r0, r3
 8005c06:	f002 f999 	bl	8007f3c <HAL_RCC_OscConfig>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005c10:	f000 f820 	bl	8005c54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c14:	230f      	movs	r3, #15
 8005c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005c20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005c2c:	f107 030c 	add.w	r3, r7, #12
 8005c30:	2105      	movs	r1, #5
 8005c32:	4618      	mov	r0, r3
 8005c34:	f002 fbfa 	bl	800842c <HAL_RCC_ClockConfig>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005c3e:	f000 f809 	bl	8005c54 <Error_Handler>
  }
}
 8005c42:	bf00      	nop
 8005c44:	3750      	adds	r7, #80	; 0x50
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	40007000 	.word	0x40007000

08005c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c58:	b672      	cpsid	i
}
 8005c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005c5c:	e7fe      	b.n	8005c5c <Error_Handler+0x8>
	...

08005c60 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005c64:	4b17      	ldr	r3, [pc, #92]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005c66:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <MX_SPI2_Init+0x68>)
 8005c68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005c6a:	4b16      	ldr	r3, [pc, #88]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005c6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005c72:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005c78:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005c7e:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005c80:	2202      	movs	r2, #2
 8005c82:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005c84:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005c8a:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c90:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005c92:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005c94:	2210      	movs	r2, #16
 8005c96:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005c9e:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005cac:	220a      	movs	r2, #10
 8005cae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005cb0:	4804      	ldr	r0, [pc, #16]	; (8005cc4 <MX_SPI2_Init+0x64>)
 8005cb2:	f002 fdb7 	bl	8008824 <HAL_SPI_Init>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005cbc:	f7ff ffca 	bl	8005c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005cc0:	bf00      	nop
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	200003b4 	.word	0x200003b4
 8005cc8:	40003800 	.word	0x40003800

08005ccc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08a      	sub	sp, #40	; 0x28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cd4:	f107 0314 	add.w	r3, r7, #20
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	60da      	str	r2, [r3, #12]
 8005ce2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <HAL_SPI_MspInit+0x84>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d12c      	bne.n	8005d48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005cee:	2300      	movs	r3, #0
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <HAL_SPI_MspInit+0x88>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	4a17      	ldr	r2, [pc, #92]	; (8005d54 <HAL_SPI_MspInit+0x88>)
 8005cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <HAL_SPI_MspInit+0x88>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d06:	613b      	str	r3, [r7, #16]
 8005d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <HAL_SPI_MspInit+0x88>)
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	4a10      	ldr	r2, [pc, #64]	; (8005d54 <HAL_SPI_MspInit+0x88>)
 8005d14:	f043 0302 	orr.w	r3, r3, #2
 8005d18:	6313      	str	r3, [r2, #48]	; 0x30
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <HAL_SPI_MspInit+0x88>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 8005d26:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d34:	2303      	movs	r3, #3
 8005d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005d38:	2305      	movs	r3, #5
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d3c:	f107 0314 	add.w	r3, r7, #20
 8005d40:	4619      	mov	r1, r3
 8005d42:	4805      	ldr	r0, [pc, #20]	; (8005d58 <HAL_SPI_MspInit+0x8c>)
 8005d44:	f001 ff12 	bl	8007b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005d48:	bf00      	nop
 8005d4a:	3728      	adds	r7, #40	; 0x28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40003800 	.word	0x40003800
 8005d54:	40023800 	.word	0x40023800
 8005d58:	40020400 	.word	0x40020400

08005d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d62:	2300      	movs	r3, #0
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <HAL_MspInit+0x4c>)
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	4a0f      	ldr	r2, [pc, #60]	; (8005da8 <HAL_MspInit+0x4c>)
 8005d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d70:	6453      	str	r3, [r2, #68]	; 0x44
 8005d72:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <HAL_MspInit+0x4c>)
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d7a:	607b      	str	r3, [r7, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d7e:	2300      	movs	r3, #0
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <HAL_MspInit+0x4c>)
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	4a08      	ldr	r2, [pc, #32]	; (8005da8 <HAL_MspInit+0x4c>)
 8005d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d8e:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <HAL_MspInit+0x4c>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40023800 	.word	0x40023800

08005dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005db0:	e7fe      	b.n	8005db0 <NMI_Handler+0x4>

08005db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005db2:	b480      	push	{r7}
 8005db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005db6:	e7fe      	b.n	8005db6 <HardFault_Handler+0x4>

08005db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dbc:	e7fe      	b.n	8005dbc <MemManage_Handler+0x4>

08005dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dc2:	e7fe      	b.n	8005dc2 <BusFault_Handler+0x4>

08005dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005dc8:	e7fe      	b.n	8005dc8 <UsageFault_Handler+0x4>

08005dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005dce:	bf00      	nop
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ddc:	bf00      	nop
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005de6:	b480      	push	{r7}
 8005de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005dea:	bf00      	nop
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005df8:	f000 fd60 	bl	80068bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005dfc:	bf00      	nop
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005e04:	4802      	ldr	r0, [pc, #8]	; (8005e10 <DMA1_Stream1_IRQHandler+0x10>)
 8005e06:	f001 fc47 	bl	8007698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005e0a:	bf00      	nop
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	2000067c 	.word	0x2000067c

08005e14 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8005e18:	4802      	ldr	r0, [pc, #8]	; (8005e24 <DMA1_Stream3_IRQHandler+0x10>)
 8005e1a:	f001 fc3d 	bl	8007698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	2000040c 	.word	0x2000040c

08005e28 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005e2c:	4802      	ldr	r0, [pc, #8]	; (8005e38 <DMA1_Stream4_IRQHandler+0x10>)
 8005e2e:	f001 fc33 	bl	8007698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005e32:	bf00      	nop
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000720 	.word	0x20000720

08005e3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005e40:	4802      	ldr	r0, [pc, #8]	; (8005e4c <DMA1_Stream5_IRQHandler+0x10>)
 8005e42:	f001 fc29 	bl	8007698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005e46:	bf00      	nop
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	2000061c 	.word	0x2000061c

08005e50 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005e54:	4802      	ldr	r0, [pc, #8]	; (8005e60 <DMA1_Stream6_IRQHandler+0x10>)
 8005e56:	f001 fc1f 	bl	8007698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005e5a:	bf00      	nop
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000780 	.word	0x20000780

08005e64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005e68:	4802      	ldr	r0, [pc, #8]	; (8005e74 <USART2_IRQHandler+0x10>)
 8005e6a:	f004 f969 	bl	800a140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005e6e:	bf00      	nop
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	200007e0 	.word	0x200007e0

08005e78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005e7c:	4802      	ldr	r0, [pc, #8]	; (8005e88 <USART3_IRQHandler+0x10>)
 8005e7e:	f004 f95f 	bl	800a140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005e82:	bf00      	nop
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	200006dc 	.word	0x200006dc

08005e8c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8005e90:	4802      	ldr	r0, [pc, #8]	; (8005e9c <DMA2_Stream1_IRQHandler+0x10>)
 8005e92:	f001 fc01 	bl	8007698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005e96:	bf00      	nop
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	2000046c 	.word	0x2000046c

08005ea0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8005ea4:	4802      	ldr	r0, [pc, #8]	; (8005eb0 <DMA2_Stream2_IRQHandler+0x10>)
 8005ea6:	f001 fbf7 	bl	8007698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005eaa:	bf00      	nop
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000574 	.word	0x20000574

08005eb4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8005eb8:	4802      	ldr	r0, [pc, #8]	; (8005ec4 <DMA2_Stream6_IRQHandler+0x10>)
 8005eba:	f001 fbed 	bl	8007698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005ebe:	bf00      	nop
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000514 	.word	0x20000514

08005ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ecc:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <SystemInit+0x20>)
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed2:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <SystemInit+0x20>)
 8005ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005edc:	bf00      	nop
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	e000ed00 	.word	0xe000ed00

08005eec <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch3;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b096      	sub	sp, #88	; 0x58
 8005ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ef2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	605a      	str	r2, [r3, #4]
 8005efc:	609a      	str	r2, [r3, #8]
 8005efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	605a      	str	r2, [r3, #4]
 8005f14:	609a      	str	r2, [r3, #8]
 8005f16:	60da      	str	r2, [r3, #12]
 8005f18:	611a      	str	r2, [r3, #16]
 8005f1a:	615a      	str	r2, [r3, #20]
 8005f1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005f1e:	1d3b      	adds	r3, r7, #4
 8005f20:	2220      	movs	r2, #32
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f006 f9ff 	bl	800c328 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005f2a:	4b4a      	ldr	r3, [pc, #296]	; (8006054 <MX_TIM1_Init+0x168>)
 8005f2c:	4a4a      	ldr	r2, [pc, #296]	; (8006058 <MX_TIM1_Init+0x16c>)
 8005f2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8005f30:	4b48      	ldr	r3, [pc, #288]	; (8006054 <MX_TIM1_Init+0x168>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f36:	4b47      	ldr	r3, [pc, #284]	; (8006054 <MX_TIM1_Init+0x168>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 105;
 8005f3c:	4b45      	ldr	r3, [pc, #276]	; (8006054 <MX_TIM1_Init+0x168>)
 8005f3e:	2269      	movs	r2, #105	; 0x69
 8005f40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f42:	4b44      	ldr	r3, [pc, #272]	; (8006054 <MX_TIM1_Init+0x168>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005f48:	4b42      	ldr	r3, [pc, #264]	; (8006054 <MX_TIM1_Init+0x168>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f4e:	4b41      	ldr	r3, [pc, #260]	; (8006054 <MX_TIM1_Init+0x168>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005f54:	483f      	ldr	r0, [pc, #252]	; (8006054 <MX_TIM1_Init+0x168>)
 8005f56:	f003 fa0d 	bl	8009374 <HAL_TIM_Base_Init>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8005f60:	f7ff fe78 	bl	8005c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005f6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4838      	ldr	r0, [pc, #224]	; (8006054 <MX_TIM1_Init+0x168>)
 8005f72:	f003 fb69 	bl	8009648 <HAL_TIM_ConfigClockSource>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8005f7c:	f7ff fe6a 	bl	8005c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005f80:	4834      	ldr	r0, [pc, #208]	; (8006054 <MX_TIM1_Init+0x168>)
 8005f82:	f003 fa46 	bl	8009412 <HAL_TIM_PWM_Init>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8005f8c:	f7ff fe62 	bl	8005c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f90:	2300      	movs	r3, #0
 8005f92:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f94:	2300      	movs	r3, #0
 8005f96:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005f98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	482d      	ldr	r0, [pc, #180]	; (8006054 <MX_TIM1_Init+0x168>)
 8005fa0:	f003 ff04 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8005faa:	f7ff fe53 	bl	8005c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fae:	2360      	movs	r3, #96	; 0x60
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4820      	ldr	r0, [pc, #128]	; (8006054 <MX_TIM1_Init+0x168>)
 8005fd4:	f003 fa76 	bl	80094c4 <HAL_TIM_PWM_ConfigChannel>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8005fde:	f7ff fe39 	bl	8005c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fe6:	2204      	movs	r2, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	481a      	ldr	r0, [pc, #104]	; (8006054 <MX_TIM1_Init+0x168>)
 8005fec:	f003 fa6a 	bl	80094c4 <HAL_TIM_PWM_ConfigChannel>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8005ff6:	f7ff fe2d 	bl	8005c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ffe:	2208      	movs	r2, #8
 8006000:	4619      	mov	r1, r3
 8006002:	4814      	ldr	r0, [pc, #80]	; (8006054 <MX_TIM1_Init+0x168>)
 8006004:	f003 fa5e 	bl	80094c4 <HAL_TIM_PWM_ConfigChannel>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800600e:	f7ff fe21 	bl	8005c54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006012:	2300      	movs	r3, #0
 8006014:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006016:	2300      	movs	r3, #0
 8006018:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800602a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800602c:	2300      	movs	r3, #0
 800602e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006030:	1d3b      	adds	r3, r7, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4807      	ldr	r0, [pc, #28]	; (8006054 <MX_TIM1_Init+0x168>)
 8006036:	f003 ff35 	bl	8009ea4 <HAL_TIMEx_ConfigBreakDeadTime>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8006040:	f7ff fe08 	bl	8005c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006044:	4803      	ldr	r0, [pc, #12]	; (8006054 <MX_TIM1_Init+0x168>)
 8006046:	f000 f989 	bl	800635c <HAL_TIM_MspPostInit>

}
 800604a:	bf00      	nop
 800604c:	3758      	adds	r7, #88	; 0x58
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	200005d4 	.word	0x200005d4
 8006058:	40010000 	.word	0x40010000

0800605c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08e      	sub	sp, #56	; 0x38
 8006060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	605a      	str	r2, [r3, #4]
 800606c:	609a      	str	r2, [r3, #8]
 800606e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006070:	f107 0320 	add.w	r3, r7, #32
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800607a:	1d3b      	adds	r3, r7, #4
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	605a      	str	r2, [r3, #4]
 8006082:	609a      	str	r2, [r3, #8]
 8006084:	60da      	str	r2, [r3, #12]
 8006086:	611a      	str	r2, [r3, #16]
 8006088:	615a      	str	r2, [r3, #20]
 800608a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800608c:	4b2c      	ldr	r3, [pc, #176]	; (8006140 <MX_TIM4_Init+0xe4>)
 800608e:	4a2d      	ldr	r2, [pc, #180]	; (8006144 <MX_TIM4_Init+0xe8>)
 8006090:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006092:	4b2b      	ldr	r3, [pc, #172]	; (8006140 <MX_TIM4_Init+0xe4>)
 8006094:	2200      	movs	r2, #0
 8006096:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006098:	4b29      	ldr	r3, [pc, #164]	; (8006140 <MX_TIM4_Init+0xe4>)
 800609a:	2200      	movs	r2, #0
 800609c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 800609e:	4b28      	ldr	r3, [pc, #160]	; (8006140 <MX_TIM4_Init+0xe4>)
 80060a0:	2269      	movs	r2, #105	; 0x69
 80060a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060a4:	4b26      	ldr	r3, [pc, #152]	; (8006140 <MX_TIM4_Init+0xe4>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060aa:	4b25      	ldr	r3, [pc, #148]	; (8006140 <MX_TIM4_Init+0xe4>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80060b0:	4823      	ldr	r0, [pc, #140]	; (8006140 <MX_TIM4_Init+0xe4>)
 80060b2:	f003 f95f 	bl	8009374 <HAL_TIM_Base_Init>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80060bc:	f7ff fdca 	bl	8005c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80060c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060ca:	4619      	mov	r1, r3
 80060cc:	481c      	ldr	r0, [pc, #112]	; (8006140 <MX_TIM4_Init+0xe4>)
 80060ce:	f003 fabb 	bl	8009648 <HAL_TIM_ConfigClockSource>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80060d8:	f7ff fdbc 	bl	8005c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80060dc:	4818      	ldr	r0, [pc, #96]	; (8006140 <MX_TIM4_Init+0xe4>)
 80060de:	f003 f998 	bl	8009412 <HAL_TIM_PWM_Init>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80060e8:	f7ff fdb4 	bl	8005c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80060ec:	2300      	movs	r3, #0
 80060ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80060f4:	f107 0320 	add.w	r3, r7, #32
 80060f8:	4619      	mov	r1, r3
 80060fa:	4811      	ldr	r0, [pc, #68]	; (8006140 <MX_TIM4_Init+0xe4>)
 80060fc:	f003 fe56 	bl	8009dac <HAL_TIMEx_MasterConfigSynchronization>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8006106:	f7ff fda5 	bl	8005c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800610a:	2360      	movs	r3, #96	; 0x60
 800610c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	2204      	movs	r2, #4
 800611e:	4619      	mov	r1, r3
 8006120:	4807      	ldr	r0, [pc, #28]	; (8006140 <MX_TIM4_Init+0xe4>)
 8006122:	f003 f9cf 	bl	80094c4 <HAL_TIM_PWM_ConfigChannel>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800612c:	f7ff fd92 	bl	8005c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006130:	4803      	ldr	r0, [pc, #12]	; (8006140 <MX_TIM4_Init+0xe4>)
 8006132:	f000 f913 	bl	800635c <HAL_TIM_MspPostInit>

}
 8006136:	bf00      	nop
 8006138:	3738      	adds	r7, #56	; 0x38
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	200004cc 	.word	0x200004cc
 8006144:	40000800 	.word	0x40000800

08006148 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a76      	ldr	r2, [pc, #472]	; (8006330 <HAL_TIM_Base_MspInit+0x1e8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	f040 80a2 	bne.w	80062a0 <HAL_TIM_Base_MspInit+0x158>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800615c:	2300      	movs	r3, #0
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	4b74      	ldr	r3, [pc, #464]	; (8006334 <HAL_TIM_Base_MspInit+0x1ec>)
 8006162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006164:	4a73      	ldr	r2, [pc, #460]	; (8006334 <HAL_TIM_Base_MspInit+0x1ec>)
 8006166:	f043 0301 	orr.w	r3, r3, #1
 800616a:	6453      	str	r3, [r2, #68]	; 0x44
 800616c:	4b71      	ldr	r3, [pc, #452]	; (8006334 <HAL_TIM_Base_MspInit+0x1ec>)
 800616e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8006178:	4b6f      	ldr	r3, [pc, #444]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 800617a:	4a70      	ldr	r2, [pc, #448]	; (800633c <HAL_TIM_Base_MspInit+0x1f4>)
 800617c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 800617e:	4b6e      	ldr	r3, [pc, #440]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 8006180:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8006184:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006186:	4b6c      	ldr	r3, [pc, #432]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 8006188:	2240      	movs	r2, #64	; 0x40
 800618a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800618c:	4b6a      	ldr	r3, [pc, #424]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 800618e:	2200      	movs	r2, #0
 8006190:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006192:	4b69      	ldr	r3, [pc, #420]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 8006194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006198:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800619a:	4b67      	ldr	r3, [pc, #412]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 800619c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061a0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80061a2:	4b65      	ldr	r3, [pc, #404]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 80061a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061a8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 80061aa:	4b63      	ldr	r3, [pc, #396]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 80061ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061b0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80061b2:	4b61      	ldr	r3, [pc, #388]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061b8:	4b5f      	ldr	r3, [pc, #380]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80061be:	485e      	ldr	r0, [pc, #376]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 80061c0:	f001 f8d2 	bl	8007368 <HAL_DMA_Init>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 80061ca:	f7ff fd43 	bl	8005c54 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a59      	ldr	r2, [pc, #356]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 80061d2:	629a      	str	r2, [r3, #40]	; 0x28
 80061d4:	4a58      	ldr	r2, [pc, #352]	; (8006338 <HAL_TIM_Base_MspInit+0x1f0>)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80061da:	4b59      	ldr	r3, [pc, #356]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 80061dc:	4a59      	ldr	r2, [pc, #356]	; (8006344 <HAL_TIM_Base_MspInit+0x1fc>)
 80061de:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80061e0:	4b57      	ldr	r3, [pc, #348]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 80061e2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80061e6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061e8:	4b55      	ldr	r3, [pc, #340]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 80061ea:	2240      	movs	r2, #64	; 0x40
 80061ec:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80061ee:	4b54      	ldr	r3, [pc, #336]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80061f4:	4b52      	ldr	r3, [pc, #328]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 80061f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061fa:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80061fc:	4b50      	ldr	r3, [pc, #320]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 80061fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006202:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006204:	4b4e      	ldr	r3, [pc, #312]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 8006206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800620a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800620c:	4b4c      	ldr	r3, [pc, #304]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 800620e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006212:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006214:	4b4a      	ldr	r3, [pc, #296]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 8006216:	2200      	movs	r2, #0
 8006218:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800621a:	4b49      	ldr	r3, [pc, #292]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 800621c:	2200      	movs	r2, #0
 800621e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8006220:	4847      	ldr	r0, [pc, #284]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 8006222:	f001 f8a1 	bl	8007368 <HAL_DMA_Init>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <HAL_TIM_Base_MspInit+0xe8>
    {
      Error_Handler();
 800622c:	f7ff fd12 	bl	8005c54 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a43      	ldr	r2, [pc, #268]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 8006234:	625a      	str	r2, [r3, #36]	; 0x24
 8006236:	4a42      	ldr	r2, [pc, #264]	; (8006340 <HAL_TIM_Base_MspInit+0x1f8>)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 800623c:	4b42      	ldr	r3, [pc, #264]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 800623e:	4a43      	ldr	r2, [pc, #268]	; (800634c <HAL_TIM_Base_MspInit+0x204>)
 8006240:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8006242:	4b41      	ldr	r3, [pc, #260]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 8006244:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8006248:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800624a:	4b3f      	ldr	r3, [pc, #252]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 800624c:	2240      	movs	r2, #64	; 0x40
 800624e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006250:	4b3d      	ldr	r3, [pc, #244]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 8006252:	2200      	movs	r2, #0
 8006254:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8006256:	4b3c      	ldr	r3, [pc, #240]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 8006258:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800625c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800625e:	4b3a      	ldr	r3, [pc, #232]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 8006260:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006264:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006266:	4b38      	ldr	r3, [pc, #224]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 8006268:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800626c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 800626e:	4b36      	ldr	r3, [pc, #216]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 8006270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006274:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8006276:	4b34      	ldr	r3, [pc, #208]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 8006278:	2200      	movs	r2, #0
 800627a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800627c:	4b32      	ldr	r3, [pc, #200]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 800627e:	2200      	movs	r2, #0
 8006280:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8006282:	4831      	ldr	r0, [pc, #196]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 8006284:	f001 f870 	bl	8007368 <HAL_DMA_Init>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_TIM_Base_MspInit+0x14a>
    {
      Error_Handler();
 800628e:	f7ff fce1 	bl	8005c54 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a2c      	ldr	r2, [pc, #176]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 8006296:	62da      	str	r2, [r3, #44]	; 0x2c
 8006298:	4a2b      	ldr	r2, [pc, #172]	; (8006348 <HAL_TIM_Base_MspInit+0x200>)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800629e:	e043      	b.n	8006328 <HAL_TIM_Base_MspInit+0x1e0>
  else if(tim_baseHandle->Instance==TIM4)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a2a      	ldr	r2, [pc, #168]	; (8006350 <HAL_TIM_Base_MspInit+0x208>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d13e      	bne.n	8006328 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80062aa:	2300      	movs	r3, #0
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	4b21      	ldr	r3, [pc, #132]	; (8006334 <HAL_TIM_Base_MspInit+0x1ec>)
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	4a20      	ldr	r2, [pc, #128]	; (8006334 <HAL_TIM_Base_MspInit+0x1ec>)
 80062b4:	f043 0304 	orr.w	r3, r3, #4
 80062b8:	6413      	str	r3, [r2, #64]	; 0x40
 80062ba:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <HAL_TIM_Base_MspInit+0x1ec>)
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	60bb      	str	r3, [r7, #8]
 80062c4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 80062c6:	4b23      	ldr	r3, [pc, #140]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 80062c8:	4a23      	ldr	r2, [pc, #140]	; (8006358 <HAL_TIM_Base_MspInit+0x210>)
 80062ca:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 80062cc:	4b21      	ldr	r3, [pc, #132]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 80062ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80062d2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062d4:	4b1f      	ldr	r3, [pc, #124]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 80062d6:	2240      	movs	r2, #64	; 0x40
 80062d8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80062da:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 80062dc:	2200      	movs	r2, #0
 80062de:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80062e0:	4b1c      	ldr	r3, [pc, #112]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 80062e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062e6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80062e8:	4b1a      	ldr	r3, [pc, #104]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 80062ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062ee:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80062f0:	4b18      	ldr	r3, [pc, #96]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 80062f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062f6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80062f8:	4b16      	ldr	r3, [pc, #88]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 80062fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062fe:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8006300:	4b14      	ldr	r3, [pc, #80]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 8006302:	2200      	movs	r2, #0
 8006304:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 8006308:	2200      	movs	r2, #0
 800630a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800630c:	4811      	ldr	r0, [pc, #68]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 800630e:	f001 f82b 	bl	8007368 <HAL_DMA_Init>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_TIM_Base_MspInit+0x1d4>
      Error_Handler();
 8006318:	f7ff fc9c 	bl	8005c54 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a0d      	ldr	r2, [pc, #52]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 8006320:	629a      	str	r2, [r3, #40]	; 0x28
 8006322:	4a0c      	ldr	r2, [pc, #48]	; (8006354 <HAL_TIM_Base_MspInit+0x20c>)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006328:	bf00      	nop
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40010000 	.word	0x40010000
 8006334:	40023800 	.word	0x40023800
 8006338:	20000574 	.word	0x20000574
 800633c:	40026440 	.word	0x40026440
 8006340:	2000046c 	.word	0x2000046c
 8006344:	40026428 	.word	0x40026428
 8006348:	20000514 	.word	0x20000514
 800634c:	400264a0 	.word	0x400264a0
 8006350:	40000800 	.word	0x40000800
 8006354:	2000040c 	.word	0x2000040c
 8006358:	40026058 	.word	0x40026058

0800635c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006364:	f107 0314 	add.w	r3, r7, #20
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	609a      	str	r2, [r3, #8]
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a24      	ldr	r2, [pc, #144]	; (800640c <HAL_TIM_MspPostInit+0xb0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d11f      	bne.n	80063be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	4b23      	ldr	r3, [pc, #140]	; (8006410 <HAL_TIM_MspPostInit+0xb4>)
 8006384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006386:	4a22      	ldr	r2, [pc, #136]	; (8006410 <HAL_TIM_MspPostInit+0xb4>)
 8006388:	f043 0310 	orr.w	r3, r3, #16
 800638c:	6313      	str	r3, [r2, #48]	; 0x30
 800638e:	4b20      	ldr	r3, [pc, #128]	; (8006410 <HAL_TIM_MspPostInit+0xb4>)
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_LED1_Pin|PWM_LED2_Pin|PWM_LED3_Pin;
 800639a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800639e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063a0:	2302      	movs	r3, #2
 80063a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063a8:	2300      	movs	r3, #0
 80063aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80063ac:	2301      	movs	r3, #1
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80063b0:	f107 0314 	add.w	r3, r7, #20
 80063b4:	4619      	mov	r1, r3
 80063b6:	4817      	ldr	r0, [pc, #92]	; (8006414 <HAL_TIM_MspPostInit+0xb8>)
 80063b8:	f001 fbd8 	bl	8007b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80063bc:	e022      	b.n	8006404 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a15      	ldr	r2, [pc, #84]	; (8006418 <HAL_TIM_MspPostInit+0xbc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d11d      	bne.n	8006404 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	4b10      	ldr	r3, [pc, #64]	; (8006410 <HAL_TIM_MspPostInit+0xb4>)
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	4a0f      	ldr	r2, [pc, #60]	; (8006410 <HAL_TIM_MspPostInit+0xb4>)
 80063d2:	f043 0302 	orr.w	r3, r3, #2
 80063d6:	6313      	str	r3, [r2, #48]	; 0x30
 80063d8:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <HAL_TIM_MspPostInit+0xb4>)
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_LED4_Pin;
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063e8:	2302      	movs	r3, #2
 80063ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063f0:	2300      	movs	r3, #0
 80063f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80063f4:	2302      	movs	r3, #2
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LED4_GPIO_Port, &GPIO_InitStruct);
 80063f8:	f107 0314 	add.w	r3, r7, #20
 80063fc:	4619      	mov	r1, r3
 80063fe:	4807      	ldr	r0, [pc, #28]	; (800641c <HAL_TIM_MspPostInit+0xc0>)
 8006400:	f001 fbb4 	bl	8007b6c <HAL_GPIO_Init>
}
 8006404:	bf00      	nop
 8006406:	3728      	adds	r7, #40	; 0x28
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	40010000 	.word	0x40010000
 8006410:	40023800 	.word	0x40023800
 8006414:	40021000 	.word	0x40021000
 8006418:	40000800 	.word	0x40000800
 800641c:	40020400 	.word	0x40020400

08006420 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006424:	4b11      	ldr	r3, [pc, #68]	; (800646c <MX_USART2_UART_Init+0x4c>)
 8006426:	4a12      	ldr	r2, [pc, #72]	; (8006470 <MX_USART2_UART_Init+0x50>)
 8006428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800642a:	4b10      	ldr	r3, [pc, #64]	; (800646c <MX_USART2_UART_Init+0x4c>)
 800642c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8006430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006432:	4b0e      	ldr	r3, [pc, #56]	; (800646c <MX_USART2_UART_Init+0x4c>)
 8006434:	2200      	movs	r2, #0
 8006436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <MX_USART2_UART_Init+0x4c>)
 800643a:	2200      	movs	r2, #0
 800643c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <MX_USART2_UART_Init+0x4c>)
 8006440:	2200      	movs	r2, #0
 8006442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006444:	4b09      	ldr	r3, [pc, #36]	; (800646c <MX_USART2_UART_Init+0x4c>)
 8006446:	220c      	movs	r2, #12
 8006448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800644a:	4b08      	ldr	r3, [pc, #32]	; (800646c <MX_USART2_UART_Init+0x4c>)
 800644c:	2200      	movs	r2, #0
 800644e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006450:	4b06      	ldr	r3, [pc, #24]	; (800646c <MX_USART2_UART_Init+0x4c>)
 8006452:	2200      	movs	r2, #0
 8006454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006456:	4805      	ldr	r0, [pc, #20]	; (800646c <MX_USART2_UART_Init+0x4c>)
 8006458:	f003 fd76 	bl	8009f48 <HAL_UART_Init>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006462:	f7ff fbf7 	bl	8005c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	200007e0 	.word	0x200007e0
 8006470:	40004400 	.word	0x40004400

08006474 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006478:	4b11      	ldr	r3, [pc, #68]	; (80064c0 <MX_USART3_UART_Init+0x4c>)
 800647a:	4a12      	ldr	r2, [pc, #72]	; (80064c4 <MX_USART3_UART_Init+0x50>)
 800647c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800647e:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <MX_USART3_UART_Init+0x4c>)
 8006480:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8006484:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006486:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <MX_USART3_UART_Init+0x4c>)
 8006488:	2200      	movs	r2, #0
 800648a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800648c:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <MX_USART3_UART_Init+0x4c>)
 800648e:	2200      	movs	r2, #0
 8006490:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <MX_USART3_UART_Init+0x4c>)
 8006494:	2200      	movs	r2, #0
 8006496:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006498:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <MX_USART3_UART_Init+0x4c>)
 800649a:	220c      	movs	r2, #12
 800649c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <MX_USART3_UART_Init+0x4c>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80064a4:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <MX_USART3_UART_Init+0x4c>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80064aa:	4805      	ldr	r0, [pc, #20]	; (80064c0 <MX_USART3_UART_Init+0x4c>)
 80064ac:	f003 fd4c 	bl	8009f48 <HAL_UART_Init>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80064b6:	f7ff fbcd 	bl	8005c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80064ba:	bf00      	nop
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	200006dc 	.word	0x200006dc
 80064c4:	40004800 	.word	0x40004800

080064c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08c      	sub	sp, #48	; 0x30
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064d0:	f107 031c 	add.w	r3, r7, #28
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	605a      	str	r2, [r3, #4]
 80064da:	609a      	str	r2, [r3, #8]
 80064dc:	60da      	str	r2, [r3, #12]
 80064de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a4b      	ldr	r2, [pc, #300]	; (8006614 <HAL_UART_MspInit+0x14c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	f040 80a2 	bne.w	8006630 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80064ec:	2300      	movs	r3, #0
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	4b49      	ldr	r3, [pc, #292]	; (8006618 <HAL_UART_MspInit+0x150>)
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	4a48      	ldr	r2, [pc, #288]	; (8006618 <HAL_UART_MspInit+0x150>)
 80064f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fa:	6413      	str	r3, [r2, #64]	; 0x40
 80064fc:	4b46      	ldr	r3, [pc, #280]	; (8006618 <HAL_UART_MspInit+0x150>)
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006508:	2300      	movs	r3, #0
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	4b42      	ldr	r3, [pc, #264]	; (8006618 <HAL_UART_MspInit+0x150>)
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	4a41      	ldr	r2, [pc, #260]	; (8006618 <HAL_UART_MspInit+0x150>)
 8006512:	f043 0308 	orr.w	r3, r3, #8
 8006516:	6313      	str	r3, [r2, #48]	; 0x30
 8006518:	4b3f      	ldr	r3, [pc, #252]	; (8006618 <HAL_UART_MspInit+0x150>)
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOW_TX_Pin|LOW_RX_Pin;
 8006524:	2360      	movs	r3, #96	; 0x60
 8006526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006528:	2302      	movs	r3, #2
 800652a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652c:	2300      	movs	r3, #0
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006530:	2303      	movs	r3, #3
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006534:	2307      	movs	r3, #7
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006538:	f107 031c 	add.w	r3, r7, #28
 800653c:	4619      	mov	r1, r3
 800653e:	4837      	ldr	r0, [pc, #220]	; (800661c <HAL_UART_MspInit+0x154>)
 8006540:	f001 fb14 	bl	8007b6c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006544:	4b36      	ldr	r3, [pc, #216]	; (8006620 <HAL_UART_MspInit+0x158>)
 8006546:	4a37      	ldr	r2, [pc, #220]	; (8006624 <HAL_UART_MspInit+0x15c>)
 8006548:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800654a:	4b35      	ldr	r3, [pc, #212]	; (8006620 <HAL_UART_MspInit+0x158>)
 800654c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006550:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006552:	4b33      	ldr	r3, [pc, #204]	; (8006620 <HAL_UART_MspInit+0x158>)
 8006554:	2200      	movs	r2, #0
 8006556:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006558:	4b31      	ldr	r3, [pc, #196]	; (8006620 <HAL_UART_MspInit+0x158>)
 800655a:	2200      	movs	r2, #0
 800655c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800655e:	4b30      	ldr	r3, [pc, #192]	; (8006620 <HAL_UART_MspInit+0x158>)
 8006560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006564:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006566:	4b2e      	ldr	r3, [pc, #184]	; (8006620 <HAL_UART_MspInit+0x158>)
 8006568:	2200      	movs	r2, #0
 800656a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800656c:	4b2c      	ldr	r3, [pc, #176]	; (8006620 <HAL_UART_MspInit+0x158>)
 800656e:	2200      	movs	r2, #0
 8006570:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006572:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <HAL_UART_MspInit+0x158>)
 8006574:	2200      	movs	r2, #0
 8006576:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006578:	4b29      	ldr	r3, [pc, #164]	; (8006620 <HAL_UART_MspInit+0x158>)
 800657a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800657e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006580:	4b27      	ldr	r3, [pc, #156]	; (8006620 <HAL_UART_MspInit+0x158>)
 8006582:	2200      	movs	r2, #0
 8006584:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006586:	4826      	ldr	r0, [pc, #152]	; (8006620 <HAL_UART_MspInit+0x158>)
 8006588:	f000 feee 	bl	8007368 <HAL_DMA_Init>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8006592:	f7ff fb5f 	bl	8005c54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a21      	ldr	r2, [pc, #132]	; (8006620 <HAL_UART_MspInit+0x158>)
 800659a:	639a      	str	r2, [r3, #56]	; 0x38
 800659c:	4a20      	ldr	r2, [pc, #128]	; (8006620 <HAL_UART_MspInit+0x158>)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80065a2:	4b21      	ldr	r3, [pc, #132]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065a4:	4a21      	ldr	r2, [pc, #132]	; (800662c <HAL_UART_MspInit+0x164>)
 80065a6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80065a8:	4b1f      	ldr	r3, [pc, #124]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065b0:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065b2:	2240      	movs	r2, #64	; 0x40
 80065b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065b6:	4b1c      	ldr	r3, [pc, #112]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80065bc:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065c4:	4b18      	ldr	r3, [pc, #96]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065ca:	4b17      	ldr	r3, [pc, #92]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80065d0:	4b15      	ldr	r3, [pc, #84]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065dc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065de:	4b12      	ldr	r3, [pc, #72]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80065e4:	4810      	ldr	r0, [pc, #64]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065e6:	f000 febf 	bl	8007368 <HAL_DMA_Init>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80065f0:	f7ff fb30 	bl	8005c54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a0c      	ldr	r2, [pc, #48]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065f8:	635a      	str	r2, [r3, #52]	; 0x34
 80065fa:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <HAL_UART_MspInit+0x160>)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006600:	2200      	movs	r2, #0
 8006602:	2100      	movs	r1, #0
 8006604:	2026      	movs	r0, #38	; 0x26
 8006606:	f000 fe78 	bl	80072fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800660a:	2026      	movs	r0, #38	; 0x26
 800660c:	f000 fe91 	bl	8007332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006610:	e0c4      	b.n	800679c <HAL_UART_MspInit+0x2d4>
 8006612:	bf00      	nop
 8006614:	40004400 	.word	0x40004400
 8006618:	40023800 	.word	0x40023800
 800661c:	40020c00 	.word	0x40020c00
 8006620:	2000061c 	.word	0x2000061c
 8006624:	40026088 	.word	0x40026088
 8006628:	20000780 	.word	0x20000780
 800662c:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a5b      	ldr	r2, [pc, #364]	; (80067a4 <HAL_UART_MspInit+0x2dc>)
 8006636:	4293      	cmp	r3, r2
 8006638:	f040 80b0 	bne.w	800679c <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800663c:	2300      	movs	r3, #0
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	4b59      	ldr	r3, [pc, #356]	; (80067a8 <HAL_UART_MspInit+0x2e0>)
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	4a58      	ldr	r2, [pc, #352]	; (80067a8 <HAL_UART_MspInit+0x2e0>)
 8006646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800664a:	6413      	str	r3, [r2, #64]	; 0x40
 800664c:	4b56      	ldr	r3, [pc, #344]	; (80067a8 <HAL_UART_MspInit+0x2e0>)
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	4b52      	ldr	r3, [pc, #328]	; (80067a8 <HAL_UART_MspInit+0x2e0>)
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	4a51      	ldr	r2, [pc, #324]	; (80067a8 <HAL_UART_MspInit+0x2e0>)
 8006662:	f043 0302 	orr.w	r3, r3, #2
 8006666:	6313      	str	r3, [r2, #48]	; 0x30
 8006668:	4b4f      	ldr	r3, [pc, #316]	; (80067a8 <HAL_UART_MspInit+0x2e0>)
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006674:	2300      	movs	r3, #0
 8006676:	60bb      	str	r3, [r7, #8]
 8006678:	4b4b      	ldr	r3, [pc, #300]	; (80067a8 <HAL_UART_MspInit+0x2e0>)
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	4a4a      	ldr	r2, [pc, #296]	; (80067a8 <HAL_UART_MspInit+0x2e0>)
 800667e:	f043 0308 	orr.w	r3, r3, #8
 8006682:	6313      	str	r3, [r2, #48]	; 0x30
 8006684:	4b48      	ldr	r3, [pc, #288]	; (80067a8 <HAL_UART_MspInit+0x2e0>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	f003 0308 	and.w	r3, r3, #8
 800668c:	60bb      	str	r3, [r7, #8]
 800668e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HIGH_RX_Pin;
 8006690:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006696:	2302      	movs	r3, #2
 8006698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669a:	2300      	movs	r3, #0
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800669e:	2303      	movs	r3, #3
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80066a2:	2307      	movs	r3, #7
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_RX_GPIO_Port, &GPIO_InitStruct);
 80066a6:	f107 031c 	add.w	r3, r7, #28
 80066aa:	4619      	mov	r1, r3
 80066ac:	483f      	ldr	r0, [pc, #252]	; (80067ac <HAL_UART_MspInit+0x2e4>)
 80066ae:	f001 fa5d 	bl	8007b6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HIGH_TX_Pin;
 80066b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b8:	2302      	movs	r3, #2
 80066ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066c0:	2303      	movs	r3, #3
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80066c4:	2307      	movs	r3, #7
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_TX_GPIO_Port, &GPIO_InitStruct);
 80066c8:	f107 031c 	add.w	r3, r7, #28
 80066cc:	4619      	mov	r1, r3
 80066ce:	4838      	ldr	r0, [pc, #224]	; (80067b0 <HAL_UART_MspInit+0x2e8>)
 80066d0:	f001 fa4c 	bl	8007b6c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80066d4:	4b37      	ldr	r3, [pc, #220]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 80066d6:	4a38      	ldr	r2, [pc, #224]	; (80067b8 <HAL_UART_MspInit+0x2f0>)
 80066d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80066da:	4b36      	ldr	r3, [pc, #216]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 80066dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80066e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066e2:	4b34      	ldr	r3, [pc, #208]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066e8:	4b32      	ldr	r3, [pc, #200]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066ee:	4b31      	ldr	r3, [pc, #196]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 80066f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066f6:	4b2f      	ldr	r3, [pc, #188]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066fc:	4b2d      	ldr	r3, [pc, #180]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 80066fe:	2200      	movs	r2, #0
 8006700:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006702:	4b2c      	ldr	r3, [pc, #176]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 8006704:	2200      	movs	r2, #0
 8006706:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006708:	4b2a      	ldr	r3, [pc, #168]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 800670a:	2200      	movs	r2, #0
 800670c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800670e:	4b29      	ldr	r3, [pc, #164]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 8006710:	2200      	movs	r2, #0
 8006712:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006714:	4827      	ldr	r0, [pc, #156]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 8006716:	f000 fe27 	bl	8007368 <HAL_DMA_Init>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8006720:	f7ff fa98 	bl	8005c54 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a23      	ldr	r2, [pc, #140]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
 800672a:	4a22      	ldr	r2, [pc, #136]	; (80067b4 <HAL_UART_MspInit+0x2ec>)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8006730:	4b22      	ldr	r3, [pc, #136]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 8006732:	4a23      	ldr	r2, [pc, #140]	; (80067c0 <HAL_UART_MspInit+0x2f8>)
 8006734:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8006736:	4b21      	ldr	r3, [pc, #132]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 8006738:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800673c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800673e:	4b1f      	ldr	r3, [pc, #124]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 8006740:	2240      	movs	r2, #64	; 0x40
 8006742:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006744:	4b1d      	ldr	r3, [pc, #116]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 8006746:	2200      	movs	r2, #0
 8006748:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800674a:	4b1c      	ldr	r3, [pc, #112]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 800674c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006750:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006752:	4b1a      	ldr	r3, [pc, #104]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 8006754:	2200      	movs	r2, #0
 8006756:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006758:	4b18      	ldr	r3, [pc, #96]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 800675a:	2200      	movs	r2, #0
 800675c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800675e:	4b17      	ldr	r3, [pc, #92]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 8006760:	2200      	movs	r2, #0
 8006762:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006764:	4b15      	ldr	r3, [pc, #84]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 8006766:	2200      	movs	r2, #0
 8006768:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800676a:	4b14      	ldr	r3, [pc, #80]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 800676c:	2200      	movs	r2, #0
 800676e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006770:	4812      	ldr	r0, [pc, #72]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 8006772:	f000 fdf9 	bl	8007368 <HAL_DMA_Init>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 800677c:	f7ff fa6a 	bl	8005c54 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a0e      	ldr	r2, [pc, #56]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 8006784:	635a      	str	r2, [r3, #52]	; 0x34
 8006786:	4a0d      	ldr	r2, [pc, #52]	; (80067bc <HAL_UART_MspInit+0x2f4>)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800678c:	2200      	movs	r2, #0
 800678e:	2100      	movs	r1, #0
 8006790:	2027      	movs	r0, #39	; 0x27
 8006792:	f000 fdb2 	bl	80072fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006796:	2027      	movs	r0, #39	; 0x27
 8006798:	f000 fdcb 	bl	8007332 <HAL_NVIC_EnableIRQ>
}
 800679c:	bf00      	nop
 800679e:	3730      	adds	r7, #48	; 0x30
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40004800 	.word	0x40004800
 80067a8:	40023800 	.word	0x40023800
 80067ac:	40020400 	.word	0x40020400
 80067b0:	40020c00 	.word	0x40020c00
 80067b4:	2000067c 	.word	0x2000067c
 80067b8:	40026028 	.word	0x40026028
 80067bc:	20000720 	.word	0x20000720
 80067c0:	40026070 	.word	0x40026070

080067c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80067c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80067fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80067c8:	480d      	ldr	r0, [pc, #52]	; (8006800 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80067ca:	490e      	ldr	r1, [pc, #56]	; (8006804 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80067cc:	4a0e      	ldr	r2, [pc, #56]	; (8006808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80067ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80067d0:	e002      	b.n	80067d8 <LoopCopyDataInit>

080067d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80067d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80067d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80067d6:	3304      	adds	r3, #4

080067d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80067d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80067da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80067dc:	d3f9      	bcc.n	80067d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80067de:	4a0b      	ldr	r2, [pc, #44]	; (800680c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80067e0:	4c0b      	ldr	r4, [pc, #44]	; (8006810 <LoopFillZerobss+0x26>)
  movs r3, #0
 80067e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80067e4:	e001      	b.n	80067ea <LoopFillZerobss>

080067e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80067e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80067e8:	3204      	adds	r2, #4

080067ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80067ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80067ec:	d3fb      	bcc.n	80067e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80067ee:	f7ff fb6b 	bl	8005ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80067f2:	f005 fd75 	bl	800c2e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80067f6:	f7ff f857 	bl	80058a8 <main>
  bx  lr    
 80067fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80067fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006804:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8006808:	0800c7b0 	.word	0x0800c7b0
  ldr r2, =_sbss
 800680c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8006810:	20000828 	.word	0x20000828

08006814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006814:	e7fe      	b.n	8006814 <ADC_IRQHandler>
	...

08006818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800681c:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <HAL_Init+0x40>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a0d      	ldr	r2, [pc, #52]	; (8006858 <HAL_Init+0x40>)
 8006822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006828:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <HAL_Init+0x40>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a0a      	ldr	r2, [pc, #40]	; (8006858 <HAL_Init+0x40>)
 800682e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006834:	4b08      	ldr	r3, [pc, #32]	; (8006858 <HAL_Init+0x40>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a07      	ldr	r2, [pc, #28]	; (8006858 <HAL_Init+0x40>)
 800683a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006840:	2003      	movs	r0, #3
 8006842:	f000 fd4f 	bl	80072e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006846:	200f      	movs	r0, #15
 8006848:	f000 f808 	bl	800685c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800684c:	f7ff fa86 	bl	8005d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	40023c00 	.word	0x40023c00

0800685c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006864:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <HAL_InitTick+0x54>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <HAL_InitTick+0x58>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	4619      	mov	r1, r3
 800686e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006872:	fbb3 f3f1 	udiv	r3, r3, r1
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fd67 	bl	800734e <HAL_SYSTICK_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e00e      	b.n	80068a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b0f      	cmp	r3, #15
 800688e:	d80a      	bhi.n	80068a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006890:	2200      	movs	r2, #0
 8006892:	6879      	ldr	r1, [r7, #4]
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	f000 fd2f 	bl	80072fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800689c:	4a06      	ldr	r2, [pc, #24]	; (80068b8 <HAL_InitTick+0x5c>)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e000      	b.n	80068a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20000034 	.word	0x20000034
 80068b4:	2000003c 	.word	0x2000003c
 80068b8:	20000038 	.word	0x20000038

080068bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <HAL_IncTick+0x20>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <HAL_IncTick+0x24>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4413      	add	r3, r2
 80068cc:	4a04      	ldr	r2, [pc, #16]	; (80068e0 <HAL_IncTick+0x24>)
 80068ce:	6013      	str	r3, [r2, #0]
}
 80068d0:	bf00      	nop
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	2000003c 	.word	0x2000003c
 80068e0:	20000824 	.word	0x20000824

080068e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return uwTick;
 80068e8:	4b03      	ldr	r3, [pc, #12]	; (80068f8 <HAL_GetTick+0x14>)
 80068ea:	681b      	ldr	r3, [r3, #0]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	20000824 	.word	0x20000824

080068fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006904:	f7ff ffee 	bl	80068e4 <HAL_GetTick>
 8006908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d005      	beq.n	8006922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006916:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <HAL_Delay+0x44>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006922:	bf00      	nop
 8006924:	f7ff ffde 	bl	80068e4 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	429a      	cmp	r2, r3
 8006932:	d8f7      	bhi.n	8006924 <HAL_Delay+0x28>
  {
  }
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	2000003c 	.word	0x2000003c

08006944 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e033      	b.n	80069c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fc fb4a 	bl	8002ffc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f003 0310 	and.w	r3, r3, #16
 800697e:	2b00      	cmp	r3, #0
 8006980:	d118      	bne.n	80069b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800698a:	f023 0302 	bic.w	r3, r3, #2
 800698e:	f043 0202 	orr.w	r2, r3, #2
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fad8 	bl	8006f4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f023 0303 	bic.w	r3, r3, #3
 80069aa:	f043 0201 	orr.w	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	641a      	str	r2, [r3, #64]	; 0x40
 80069b2:	e001      	b.n	80069b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <HAL_ADC_Start+0x1a>
 80069e2:	2302      	movs	r3, #2
 80069e4:	e0b2      	b.n	8006b4c <HAL_ADC_Start+0x180>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d018      	beq.n	8006a2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006a0c:	4b52      	ldr	r3, [pc, #328]	; (8006b58 <HAL_ADC_Start+0x18c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a52      	ldr	r2, [pc, #328]	; (8006b5c <HAL_ADC_Start+0x190>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	0c9a      	lsrs	r2, r3, #18
 8006a18:	4613      	mov	r3, r2
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	4413      	add	r3, r2
 8006a1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006a20:	e002      	b.n	8006a28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f9      	bne.n	8006a22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d17a      	bne.n	8006b32 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7a:	d106      	bne.n	8006a8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a80:	f023 0206 	bic.w	r2, r3, #6
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	645a      	str	r2, [r3, #68]	; 0x44
 8006a88:	e002      	b.n	8006a90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a98:	4b31      	ldr	r3, [pc, #196]	; (8006b60 <HAL_ADC_Start+0x194>)
 8006a9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006aa4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d12a      	bne.n	8006b08 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a2b      	ldr	r2, [pc, #172]	; (8006b64 <HAL_ADC_Start+0x198>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d015      	beq.n	8006ae8 <HAL_ADC_Start+0x11c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a29      	ldr	r2, [pc, #164]	; (8006b68 <HAL_ADC_Start+0x19c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d105      	bne.n	8006ad2 <HAL_ADC_Start+0x106>
 8006ac6:	4b26      	ldr	r3, [pc, #152]	; (8006b60 <HAL_ADC_Start+0x194>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a25      	ldr	r2, [pc, #148]	; (8006b6c <HAL_ADC_Start+0x1a0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d136      	bne.n	8006b4a <HAL_ADC_Start+0x17e>
 8006adc:	4b20      	ldr	r3, [pc, #128]	; (8006b60 <HAL_ADC_Start+0x194>)
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d130      	bne.n	8006b4a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d129      	bne.n	8006b4a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006b04:	609a      	str	r2, [r3, #8]
 8006b06:	e020      	b.n	8006b4a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a15      	ldr	r2, [pc, #84]	; (8006b64 <HAL_ADC_Start+0x198>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d11b      	bne.n	8006b4a <HAL_ADC_Start+0x17e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d114      	bne.n	8006b4a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006b2e:	609a      	str	r2, [r3, #8]
 8006b30:	e00b      	b.n	8006b4a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	f043 0210 	orr.w	r2, r3, #16
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b42:	f043 0201 	orr.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	20000034 	.word	0x20000034
 8006b5c:	431bde83 	.word	0x431bde83
 8006b60:	40012300 	.word	0x40012300
 8006b64:	40012000 	.word	0x40012000
 8006b68:	40012100 	.word	0x40012100
 8006b6c:	40012200 	.word	0x40012200

08006b70 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_ADC_Stop+0x16>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e021      	b.n	8006bca <HAL_ADC_Stop+0x5a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0201 	bic.w	r2, r2, #1
 8006b9c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d109      	bne.n	8006bc0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006bb4:	f023 0301 	bic.w	r3, r3, #1
 8006bb8:	f043 0201 	orr.w	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf2:	d113      	bne.n	8006c1c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c02:	d10b      	bne.n	8006c1c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	f043 0220 	orr.w	r2, r3, #32
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e063      	b.n	8006ce4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006c1c:	f7ff fe62 	bl	80068e4 <HAL_GetTick>
 8006c20:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006c22:	e021      	b.n	8006c68 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2a:	d01d      	beq.n	8006c68 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <HAL_ADC_PollForConversion+0x6c>
 8006c32:	f7ff fe57 	bl	80068e4 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d212      	bcs.n	8006c68 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d00b      	beq.n	8006c68 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c54:	f043 0204 	orr.w	r2, r3, #4
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e03d      	b.n	8006ce4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d1d6      	bne.n	8006c24 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f06f 0212 	mvn.w	r2, #18
 8006c7e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d123      	bne.n	8006ce2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d11f      	bne.n	8006ce2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d006      	beq.n	8006cbe <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d111      	bne.n	8006ce2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d105      	bne.n	8006ce2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f043 0201 	orr.w	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_ADC_ConfigChannel+0x1c>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e105      	b.n	8006f30 <HAL_ADC_ConfigChannel+0x228>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b09      	cmp	r3, #9
 8006d32:	d925      	bls.n	8006d80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68d9      	ldr	r1, [r3, #12]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	461a      	mov	r2, r3
 8006d42:	4613      	mov	r3, r2
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	4413      	add	r3, r2
 8006d48:	3b1e      	subs	r3, #30
 8006d4a:	2207      	movs	r2, #7
 8006d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d50:	43da      	mvns	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	400a      	ands	r2, r1
 8006d58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68d9      	ldr	r1, [r3, #12]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	4403      	add	r3, r0
 8006d72:	3b1e      	subs	r3, #30
 8006d74:	409a      	lsls	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	60da      	str	r2, [r3, #12]
 8006d7e:	e022      	b.n	8006dc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6919      	ldr	r1, [r3, #16]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4613      	mov	r3, r2
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	4413      	add	r3, r2
 8006d94:	2207      	movs	r2, #7
 8006d96:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9a:	43da      	mvns	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	400a      	ands	r2, r1
 8006da2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6919      	ldr	r1, [r3, #16]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	4618      	mov	r0, r3
 8006db6:	4603      	mov	r3, r0
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	4403      	add	r3, r0
 8006dbc:	409a      	lsls	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	2b06      	cmp	r3, #6
 8006dcc:	d824      	bhi.n	8006e18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	3b05      	subs	r3, #5
 8006de0:	221f      	movs	r2, #31
 8006de2:	fa02 f303 	lsl.w	r3, r2, r3
 8006de6:	43da      	mvns	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	400a      	ands	r2, r1
 8006dee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	3b05      	subs	r3, #5
 8006e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	635a      	str	r2, [r3, #52]	; 0x34
 8006e16:	e04c      	b.n	8006eb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b0c      	cmp	r3, #12
 8006e1e:	d824      	bhi.n	8006e6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	3b23      	subs	r3, #35	; 0x23
 8006e32:	221f      	movs	r2, #31
 8006e34:	fa02 f303 	lsl.w	r3, r2, r3
 8006e38:	43da      	mvns	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	400a      	ands	r2, r1
 8006e40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4618      	mov	r0, r3
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	3b23      	subs	r3, #35	; 0x23
 8006e5c:	fa00 f203 	lsl.w	r2, r0, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
 8006e68:	e023      	b.n	8006eb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	3b41      	subs	r3, #65	; 0x41
 8006e7c:	221f      	movs	r2, #31
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	43da      	mvns	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	400a      	ands	r2, r1
 8006e8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	4618      	mov	r0, r3
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	3b41      	subs	r3, #65	; 0x41
 8006ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006eb2:	4b22      	ldr	r3, [pc, #136]	; (8006f3c <HAL_ADC_ConfigChannel+0x234>)
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <HAL_ADC_ConfigChannel+0x238>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d109      	bne.n	8006ed4 <HAL_ADC_ConfigChannel+0x1cc>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b12      	cmp	r3, #18
 8006ec6:	d105      	bne.n	8006ed4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a19      	ldr	r2, [pc, #100]	; (8006f40 <HAL_ADC_ConfigChannel+0x238>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d123      	bne.n	8006f26 <HAL_ADC_ConfigChannel+0x21e>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d003      	beq.n	8006eee <HAL_ADC_ConfigChannel+0x1e6>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b11      	cmp	r3, #17
 8006eec:	d11b      	bne.n	8006f26 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b10      	cmp	r3, #16
 8006f00:	d111      	bne.n	8006f26 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006f02:	4b10      	ldr	r3, [pc, #64]	; (8006f44 <HAL_ADC_ConfigChannel+0x23c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a10      	ldr	r2, [pc, #64]	; (8006f48 <HAL_ADC_ConfigChannel+0x240>)
 8006f08:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0c:	0c9a      	lsrs	r2, r3, #18
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006f18:	e002      	b.n	8006f20 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1f9      	bne.n	8006f1a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40012300 	.word	0x40012300
 8006f40:	40012000 	.word	0x40012000
 8006f44:	20000034 	.word	0x20000034
 8006f48:	431bde83 	.word	0x431bde83

08006f4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f54:	4b79      	ldr	r3, [pc, #484]	; (800713c <ADC_Init+0x1f0>)
 8006f56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6859      	ldr	r1, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	021a      	lsls	r2, r3, #8
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6859      	ldr	r1, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6899      	ldr	r1, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	4a58      	ldr	r2, [pc, #352]	; (8007140 <ADC_Init+0x1f4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d022      	beq.n	800702a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ff2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6899      	ldr	r1, [r3, #8]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6899      	ldr	r1, [r3, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	609a      	str	r2, [r3, #8]
 8007028:	e00f      	b.n	800704a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007048:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0202 	bic.w	r2, r2, #2
 8007058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6899      	ldr	r1, [r3, #8]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7e1b      	ldrb	r3, [r3, #24]
 8007064:	005a      	lsls	r2, r3, #1
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01b      	beq.n	80070b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007086:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007096:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6859      	ldr	r1, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	3b01      	subs	r3, #1
 80070a4:	035a      	lsls	r2, r3, #13
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	605a      	str	r2, [r3, #4]
 80070ae:	e007      	b.n	80070c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80070ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	3b01      	subs	r3, #1
 80070dc:	051a      	lsls	r2, r3, #20
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80070f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6899      	ldr	r1, [r3, #8]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007102:	025a      	lsls	r2, r3, #9
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6899      	ldr	r1, [r3, #8]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	029a      	lsls	r2, r3, #10
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	609a      	str	r2, [r3, #8]
}
 8007130:	bf00      	nop
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	40012300 	.word	0x40012300
 8007140:	0f000001 	.word	0x0f000001

08007144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <__NVIC_SetPriorityGrouping+0x44>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007160:	4013      	ands	r3, r2
 8007162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800716c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007176:	4a04      	ldr	r2, [pc, #16]	; (8007188 <__NVIC_SetPriorityGrouping+0x44>)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	60d3      	str	r3, [r2, #12]
}
 800717c:	bf00      	nop
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	e000ed00 	.word	0xe000ed00

0800718c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007190:	4b04      	ldr	r3, [pc, #16]	; (80071a4 <__NVIC_GetPriorityGrouping+0x18>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	0a1b      	lsrs	r3, r3, #8
 8007196:	f003 0307 	and.w	r3, r3, #7
}
 800719a:	4618      	mov	r0, r3
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	e000ed00 	.word	0xe000ed00

080071a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	db0b      	blt.n	80071d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	f003 021f 	and.w	r2, r3, #31
 80071c0:	4907      	ldr	r1, [pc, #28]	; (80071e0 <__NVIC_EnableIRQ+0x38>)
 80071c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	2001      	movs	r0, #1
 80071ca:	fa00 f202 	lsl.w	r2, r0, r2
 80071ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	e000e100 	.word	0xe000e100

080071e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	6039      	str	r1, [r7, #0]
 80071ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	db0a      	blt.n	800720e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	490c      	ldr	r1, [pc, #48]	; (8007230 <__NVIC_SetPriority+0x4c>)
 80071fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007202:	0112      	lsls	r2, r2, #4
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	440b      	add	r3, r1
 8007208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800720c:	e00a      	b.n	8007224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	b2da      	uxtb	r2, r3
 8007212:	4908      	ldr	r1, [pc, #32]	; (8007234 <__NVIC_SetPriority+0x50>)
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	3b04      	subs	r3, #4
 800721c:	0112      	lsls	r2, r2, #4
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	440b      	add	r3, r1
 8007222:	761a      	strb	r2, [r3, #24]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	e000e100 	.word	0xe000e100
 8007234:	e000ed00 	.word	0xe000ed00

08007238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007238:	b480      	push	{r7}
 800723a:	b089      	sub	sp, #36	; 0x24
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	f1c3 0307 	rsb	r3, r3, #7
 8007252:	2b04      	cmp	r3, #4
 8007254:	bf28      	it	cs
 8007256:	2304      	movcs	r3, #4
 8007258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	3304      	adds	r3, #4
 800725e:	2b06      	cmp	r3, #6
 8007260:	d902      	bls.n	8007268 <NVIC_EncodePriority+0x30>
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	3b03      	subs	r3, #3
 8007266:	e000      	b.n	800726a <NVIC_EncodePriority+0x32>
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800726c:	f04f 32ff 	mov.w	r2, #4294967295
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	43da      	mvns	r2, r3
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	401a      	ands	r2, r3
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007280:	f04f 31ff 	mov.w	r1, #4294967295
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	fa01 f303 	lsl.w	r3, r1, r3
 800728a:	43d9      	mvns	r1, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007290:	4313      	orrs	r3, r2
         );
}
 8007292:	4618      	mov	r0, r3
 8007294:	3724      	adds	r7, #36	; 0x24
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
	...

080072a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072b0:	d301      	bcc.n	80072b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072b2:	2301      	movs	r3, #1
 80072b4:	e00f      	b.n	80072d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072b6:	4a0a      	ldr	r2, [pc, #40]	; (80072e0 <SysTick_Config+0x40>)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072be:	210f      	movs	r1, #15
 80072c0:	f04f 30ff 	mov.w	r0, #4294967295
 80072c4:	f7ff ff8e 	bl	80071e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <SysTick_Config+0x40>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072ce:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <SysTick_Config+0x40>)
 80072d0:	2207      	movs	r2, #7
 80072d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	e000e010 	.word	0xe000e010

080072e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff ff29 	bl	8007144 <__NVIC_SetPriorityGrouping>
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b086      	sub	sp, #24
 80072fe:	af00      	add	r7, sp, #0
 8007300:	4603      	mov	r3, r0
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	607a      	str	r2, [r7, #4]
 8007306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007308:	2300      	movs	r3, #0
 800730a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800730c:	f7ff ff3e 	bl	800718c <__NVIC_GetPriorityGrouping>
 8007310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	68b9      	ldr	r1, [r7, #8]
 8007316:	6978      	ldr	r0, [r7, #20]
 8007318:	f7ff ff8e 	bl	8007238 <NVIC_EncodePriority>
 800731c:	4602      	mov	r2, r0
 800731e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007322:	4611      	mov	r1, r2
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff ff5d 	bl	80071e4 <__NVIC_SetPriority>
}
 800732a:	bf00      	nop
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	4603      	mov	r3, r0
 800733a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800733c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff ff31 	bl	80071a8 <__NVIC_EnableIRQ>
}
 8007346:	bf00      	nop
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff ffa2 	bl	80072a0 <SysTick_Config>
 800735c:	4603      	mov	r3, r0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007374:	f7ff fab6 	bl	80068e4 <HAL_GetTick>
 8007378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e099      	b.n	80074b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0201 	bic.w	r2, r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073a4:	e00f      	b.n	80073c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073a6:	f7ff fa9d 	bl	80068e4 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b05      	cmp	r3, #5
 80073b2:	d908      	bls.n	80073c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2220      	movs	r2, #32
 80073b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2203      	movs	r2, #3
 80073be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e078      	b.n	80074b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e8      	bne.n	80073a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4b38      	ldr	r3, [pc, #224]	; (80074c0 <HAL_DMA_Init+0x158>)
 80073e0:	4013      	ands	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800740a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	2b04      	cmp	r3, #4
 800741e:	d107      	bne.n	8007430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007428:	4313      	orrs	r3, r2
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	4313      	orrs	r3, r2
 800742e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f023 0307 	bic.w	r3, r3, #7
 8007446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	2b04      	cmp	r3, #4
 8007458:	d117      	bne.n	800748a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	4313      	orrs	r3, r2
 8007462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00e      	beq.n	800748a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fb01 	bl	8007a74 <DMA_CheckFifoParam>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d008      	beq.n	800748a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2240      	movs	r2, #64	; 0x40
 800747c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007486:	2301      	movs	r3, #1
 8007488:	e016      	b.n	80074b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fab8 	bl	8007a08 <DMA_CalcBaseAndBitshift>
 8007498:	4603      	mov	r3, r0
 800749a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a0:	223f      	movs	r2, #63	; 0x3f
 80074a2:	409a      	lsls	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	f010803f 	.word	0xf010803f

080074c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d101      	bne.n	80074ea <HAL_DMA_Start_IT+0x26>
 80074e6:	2302      	movs	r3, #2
 80074e8:	e040      	b.n	800756c <HAL_DMA_Start_IT+0xa8>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d12f      	bne.n	800755e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2202      	movs	r2, #2
 8007502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 fa4a 	bl	80079ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800751c:	223f      	movs	r2, #63	; 0x3f
 800751e:	409a      	lsls	r2, r3
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0216 	orr.w	r2, r2, #22
 8007532:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	d007      	beq.n	800754c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0208 	orr.w	r2, r2, #8
 800754a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0201 	orr.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e005      	b.n	800756a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007566:	2302      	movs	r3, #2
 8007568:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800756a:	7dfb      	ldrb	r3, [r7, #23]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007580:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007582:	f7ff f9af 	bl	80068e4 <HAL_GetTick>
 8007586:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d008      	beq.n	80075a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2280      	movs	r2, #128	; 0x80
 8007598:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e052      	b.n	800764c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0216 	bic.w	r2, r2, #22
 80075b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	695a      	ldr	r2, [r3, #20]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d103      	bne.n	80075d6 <HAL_DMA_Abort+0x62>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d007      	beq.n	80075e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0208 	bic.w	r2, r2, #8
 80075e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0201 	bic.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075f6:	e013      	b.n	8007620 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075f8:	f7ff f974 	bl	80068e4 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b05      	cmp	r3, #5
 8007604:	d90c      	bls.n	8007620 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2203      	movs	r2, #3
 8007610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e015      	b.n	800764c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1e4      	bne.n	80075f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007632:	223f      	movs	r2, #63	; 0x3f
 8007634:	409a      	lsls	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d004      	beq.n	8007672 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2280      	movs	r2, #128	; 0x80
 800766c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e00c      	b.n	800768c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2205      	movs	r2, #5
 8007676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0201 	bic.w	r2, r2, #1
 8007688:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80076a4:	4b92      	ldr	r3, [pc, #584]	; (80078f0 <HAL_DMA_IRQHandler+0x258>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a92      	ldr	r2, [pc, #584]	; (80078f4 <HAL_DMA_IRQHandler+0x25c>)
 80076aa:	fba2 2303 	umull	r2, r3, r2, r3
 80076ae:	0a9b      	lsrs	r3, r3, #10
 80076b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c2:	2208      	movs	r2, #8
 80076c4:	409a      	lsls	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4013      	ands	r3, r2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01a      	beq.n	8007704 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0304 	and.w	r3, r3, #4
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d013      	beq.n	8007704 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0204 	bic.w	r2, r2, #4
 80076ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f0:	2208      	movs	r2, #8
 80076f2:	409a      	lsls	r2, r3
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fc:	f043 0201 	orr.w	r2, r3, #1
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007708:	2201      	movs	r2, #1
 800770a:	409a      	lsls	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4013      	ands	r3, r2
 8007710:	2b00      	cmp	r3, #0
 8007712:	d012      	beq.n	800773a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007726:	2201      	movs	r2, #1
 8007728:	409a      	lsls	r2, r3
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007732:	f043 0202 	orr.w	r2, r3, #2
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800773e:	2204      	movs	r2, #4
 8007740:	409a      	lsls	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4013      	ands	r3, r2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d012      	beq.n	8007770 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00b      	beq.n	8007770 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775c:	2204      	movs	r2, #4
 800775e:	409a      	lsls	r2, r3
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007768:	f043 0204 	orr.w	r2, r3, #4
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007774:	2210      	movs	r2, #16
 8007776:	409a      	lsls	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4013      	ands	r3, r2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d043      	beq.n	8007808 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0308 	and.w	r3, r3, #8
 800778a:	2b00      	cmp	r3, #0
 800778c:	d03c      	beq.n	8007808 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007792:	2210      	movs	r2, #16
 8007794:	409a      	lsls	r2, r3
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d018      	beq.n	80077da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d108      	bne.n	80077c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d024      	beq.n	8007808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
 80077c6:	e01f      	b.n	8007808 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01b      	beq.n	8007808 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	4798      	blx	r3
 80077d8:	e016      	b.n	8007808 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d107      	bne.n	80077f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0208 	bic.w	r2, r2, #8
 80077f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780c:	2220      	movs	r2, #32
 800780e:	409a      	lsls	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4013      	ands	r3, r2
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 808e 	beq.w	8007936 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8086 	beq.w	8007936 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800782e:	2220      	movs	r2, #32
 8007830:	409a      	lsls	r2, r3
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b05      	cmp	r3, #5
 8007840:	d136      	bne.n	80078b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0216 	bic.w	r2, r2, #22
 8007850:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695a      	ldr	r2, [r3, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007860:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <HAL_DMA_IRQHandler+0x1da>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0208 	bic.w	r2, r2, #8
 8007880:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007886:	223f      	movs	r2, #63	; 0x3f
 8007888:	409a      	lsls	r2, r3
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d07d      	beq.n	80079a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	4798      	blx	r3
        }
        return;
 80078ae:	e078      	b.n	80079a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01c      	beq.n	80078f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d108      	bne.n	80078de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d030      	beq.n	8007936 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	4798      	blx	r3
 80078dc:	e02b      	b.n	8007936 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d027      	beq.n	8007936 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	4798      	blx	r3
 80078ee:	e022      	b.n	8007936 <HAL_DMA_IRQHandler+0x29e>
 80078f0:	20000034 	.word	0x20000034
 80078f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10f      	bne.n	8007926 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0210 	bic.w	r2, r2, #16
 8007914:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d003      	beq.n	8007936 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793a:	2b00      	cmp	r3, #0
 800793c:	d032      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d022      	beq.n	8007990 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2205      	movs	r2, #5
 800794e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0201 	bic.w	r2, r2, #1
 8007960:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	3301      	adds	r3, #1
 8007966:	60bb      	str	r3, [r7, #8]
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	429a      	cmp	r2, r3
 800796c:	d307      	bcc.n	800797e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1f2      	bne.n	8007962 <HAL_DMA_IRQHandler+0x2ca>
 800797c:	e000      	b.n	8007980 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800797e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d005      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	4798      	blx	r3
 80079a0:	e000      	b.n	80079a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80079a2:	bf00      	nop
    }
  }
}
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop

080079ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	2b40      	cmp	r3, #64	; 0x40
 80079d8:	d108      	bne.n	80079ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80079ea:	e007      	b.n	80079fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	60da      	str	r2, [r3, #12]
}
 80079fc:	bf00      	nop
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	3b10      	subs	r3, #16
 8007a18:	4a14      	ldr	r2, [pc, #80]	; (8007a6c <DMA_CalcBaseAndBitshift+0x64>)
 8007a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1e:	091b      	lsrs	r3, r3, #4
 8007a20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007a22:	4a13      	ldr	r2, [pc, #76]	; (8007a70 <DMA_CalcBaseAndBitshift+0x68>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d909      	bls.n	8007a4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007a3e:	f023 0303 	bic.w	r3, r3, #3
 8007a42:	1d1a      	adds	r2, r3, #4
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	659a      	str	r2, [r3, #88]	; 0x58
 8007a48:	e007      	b.n	8007a5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	aaaaaaab 	.word	0xaaaaaaab
 8007a70:	0800c38c 	.word	0x0800c38c

08007a74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d11f      	bne.n	8007ace <DMA_CheckFifoParam+0x5a>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d856      	bhi.n	8007b42 <DMA_CheckFifoParam+0xce>
 8007a94:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <DMA_CheckFifoParam+0x28>)
 8007a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9a:	bf00      	nop
 8007a9c:	08007aad 	.word	0x08007aad
 8007aa0:	08007abf 	.word	0x08007abf
 8007aa4:	08007aad 	.word	0x08007aad
 8007aa8:	08007b43 	.word	0x08007b43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d046      	beq.n	8007b46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007abc:	e043      	b.n	8007b46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ac6:	d140      	bne.n	8007b4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007acc:	e03d      	b.n	8007b4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ad6:	d121      	bne.n	8007b1c <DMA_CheckFifoParam+0xa8>
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d837      	bhi.n	8007b4e <DMA_CheckFifoParam+0xda>
 8007ade:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <DMA_CheckFifoParam+0x70>)
 8007ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae4:	08007af5 	.word	0x08007af5
 8007ae8:	08007afb 	.word	0x08007afb
 8007aec:	08007af5 	.word	0x08007af5
 8007af0:	08007b0d 	.word	0x08007b0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
      break;
 8007af8:	e030      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d025      	beq.n	8007b52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b0a:	e022      	b.n	8007b52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b14:	d11f      	bne.n	8007b56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007b1a:	e01c      	b.n	8007b56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d903      	bls.n	8007b2a <DMA_CheckFifoParam+0xb6>
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d003      	beq.n	8007b30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007b28:	e018      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b2e:	e015      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00e      	beq.n	8007b5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b40:	e00b      	b.n	8007b5a <DMA_CheckFifoParam+0xe6>
      break;
 8007b42:	bf00      	nop
 8007b44:	e00a      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
      break;
 8007b46:	bf00      	nop
 8007b48:	e008      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
      break;
 8007b4a:	bf00      	nop
 8007b4c:	e006      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
      break;
 8007b4e:	bf00      	nop
 8007b50:	e004      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
      break;
 8007b52:	bf00      	nop
 8007b54:	e002      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
      break;   
 8007b56:	bf00      	nop
 8007b58:	e000      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
      break;
 8007b5a:	bf00      	nop
    }
  } 
  
  return status; 
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop

08007b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b089      	sub	sp, #36	; 0x24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b82:	2300      	movs	r3, #0
 8007b84:	61fb      	str	r3, [r7, #28]
 8007b86:	e16b      	b.n	8007e60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007b88:	2201      	movs	r2, #1
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4013      	ands	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	f040 815a 	bne.w	8007e5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d005      	beq.n	8007bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d130      	bne.n	8007c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	2203      	movs	r2, #3
 8007bca:	fa02 f303 	lsl.w	r3, r2, r3
 8007bce:	43db      	mvns	r3, r3
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	fa02 f303 	lsl.w	r3, r2, r3
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	43db      	mvns	r3, r3
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	4013      	ands	r3, r2
 8007c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	091b      	lsrs	r3, r3, #4
 8007c0a:	f003 0201 	and.w	r2, r3, #1
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	fa02 f303 	lsl.w	r3, r2, r3
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f003 0303 	and.w	r3, r3, #3
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d017      	beq.n	8007c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	2203      	movs	r2, #3
 8007c38:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	4013      	ands	r3, r2
 8007c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d123      	bne.n	8007cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	08da      	lsrs	r2, r3, #3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3208      	adds	r2, #8
 8007c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	220f      	movs	r2, #15
 8007c80:	fa02 f303 	lsl.w	r3, r2, r3
 8007c84:	43db      	mvns	r3, r3
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	08da      	lsrs	r2, r3, #3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3208      	adds	r2, #8
 8007caa:	69b9      	ldr	r1, [r7, #24]
 8007cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	2203      	movs	r2, #3
 8007cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f003 0203 	and.w	r2, r3, #3
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 80b4 	beq.w	8007e5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	4b60      	ldr	r3, [pc, #384]	; (8007e78 <HAL_GPIO_Init+0x30c>)
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfa:	4a5f      	ldr	r2, [pc, #380]	; (8007e78 <HAL_GPIO_Init+0x30c>)
 8007cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d00:	6453      	str	r3, [r2, #68]	; 0x44
 8007d02:	4b5d      	ldr	r3, [pc, #372]	; (8007e78 <HAL_GPIO_Init+0x30c>)
 8007d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d0e:	4a5b      	ldr	r2, [pc, #364]	; (8007e7c <HAL_GPIO_Init+0x310>)
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	089b      	lsrs	r3, r3, #2
 8007d14:	3302      	adds	r3, #2
 8007d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	220f      	movs	r2, #15
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	43db      	mvns	r3, r3
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a52      	ldr	r2, [pc, #328]	; (8007e80 <HAL_GPIO_Init+0x314>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d02b      	beq.n	8007d92 <HAL_GPIO_Init+0x226>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a51      	ldr	r2, [pc, #324]	; (8007e84 <HAL_GPIO_Init+0x318>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d025      	beq.n	8007d8e <HAL_GPIO_Init+0x222>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a50      	ldr	r2, [pc, #320]	; (8007e88 <HAL_GPIO_Init+0x31c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d01f      	beq.n	8007d8a <HAL_GPIO_Init+0x21e>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a4f      	ldr	r2, [pc, #316]	; (8007e8c <HAL_GPIO_Init+0x320>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d019      	beq.n	8007d86 <HAL_GPIO_Init+0x21a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a4e      	ldr	r2, [pc, #312]	; (8007e90 <HAL_GPIO_Init+0x324>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d013      	beq.n	8007d82 <HAL_GPIO_Init+0x216>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a4d      	ldr	r2, [pc, #308]	; (8007e94 <HAL_GPIO_Init+0x328>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00d      	beq.n	8007d7e <HAL_GPIO_Init+0x212>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a4c      	ldr	r2, [pc, #304]	; (8007e98 <HAL_GPIO_Init+0x32c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d007      	beq.n	8007d7a <HAL_GPIO_Init+0x20e>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a4b      	ldr	r2, [pc, #300]	; (8007e9c <HAL_GPIO_Init+0x330>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d101      	bne.n	8007d76 <HAL_GPIO_Init+0x20a>
 8007d72:	2307      	movs	r3, #7
 8007d74:	e00e      	b.n	8007d94 <HAL_GPIO_Init+0x228>
 8007d76:	2308      	movs	r3, #8
 8007d78:	e00c      	b.n	8007d94 <HAL_GPIO_Init+0x228>
 8007d7a:	2306      	movs	r3, #6
 8007d7c:	e00a      	b.n	8007d94 <HAL_GPIO_Init+0x228>
 8007d7e:	2305      	movs	r3, #5
 8007d80:	e008      	b.n	8007d94 <HAL_GPIO_Init+0x228>
 8007d82:	2304      	movs	r3, #4
 8007d84:	e006      	b.n	8007d94 <HAL_GPIO_Init+0x228>
 8007d86:	2303      	movs	r3, #3
 8007d88:	e004      	b.n	8007d94 <HAL_GPIO_Init+0x228>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e002      	b.n	8007d94 <HAL_GPIO_Init+0x228>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e000      	b.n	8007d94 <HAL_GPIO_Init+0x228>
 8007d92:	2300      	movs	r3, #0
 8007d94:	69fa      	ldr	r2, [r7, #28]
 8007d96:	f002 0203 	and.w	r2, r2, #3
 8007d9a:	0092      	lsls	r2, r2, #2
 8007d9c:	4093      	lsls	r3, r2
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007da4:	4935      	ldr	r1, [pc, #212]	; (8007e7c <HAL_GPIO_Init+0x310>)
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	089b      	lsrs	r3, r3, #2
 8007daa:	3302      	adds	r3, #2
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007db2:	4b3b      	ldr	r3, [pc, #236]	; (8007ea0 <HAL_GPIO_Init+0x334>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	43db      	mvns	r3, r3
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007dd6:	4a32      	ldr	r2, [pc, #200]	; (8007ea0 <HAL_GPIO_Init+0x334>)
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007ddc:	4b30      	ldr	r3, [pc, #192]	; (8007ea0 <HAL_GPIO_Init+0x334>)
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	43db      	mvns	r3, r3
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	4013      	ands	r3, r2
 8007dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007e00:	4a27      	ldr	r2, [pc, #156]	; (8007ea0 <HAL_GPIO_Init+0x334>)
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e06:	4b26      	ldr	r3, [pc, #152]	; (8007ea0 <HAL_GPIO_Init+0x334>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	43db      	mvns	r3, r3
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	4013      	ands	r3, r2
 8007e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007e2a:	4a1d      	ldr	r2, [pc, #116]	; (8007ea0 <HAL_GPIO_Init+0x334>)
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007e30:	4b1b      	ldr	r3, [pc, #108]	; (8007ea0 <HAL_GPIO_Init+0x334>)
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	43db      	mvns	r3, r3
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007e54:	4a12      	ldr	r2, [pc, #72]	; (8007ea0 <HAL_GPIO_Init+0x334>)
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	2b0f      	cmp	r3, #15
 8007e64:	f67f ae90 	bls.w	8007b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
 8007e6c:	3724      	adds	r7, #36	; 0x24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40023800 	.word	0x40023800
 8007e7c:	40013800 	.word	0x40013800
 8007e80:	40020000 	.word	0x40020000
 8007e84:	40020400 	.word	0x40020400
 8007e88:	40020800 	.word	0x40020800
 8007e8c:	40020c00 	.word	0x40020c00
 8007e90:	40021000 	.word	0x40021000
 8007e94:	40021400 	.word	0x40021400
 8007e98:	40021800 	.word	0x40021800
 8007e9c:	40021c00 	.word	0x40021c00
 8007ea0:	40013c00 	.word	0x40013c00

08007ea4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	887b      	ldrh	r3, [r7, #2]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	73fb      	strb	r3, [r7, #15]
 8007ec0:	e001      	b.n	8007ec6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	807b      	strh	r3, [r7, #2]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ee4:	787b      	ldrb	r3, [r7, #1]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007eea:	887a      	ldrh	r2, [r7, #2]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ef0:	e003      	b.n	8007efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ef2:	887b      	ldrh	r3, [r7, #2]
 8007ef4:	041a      	lsls	r2, r3, #16
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	619a      	str	r2, [r3, #24]
}
 8007efa:	bf00      	nop
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007f18:	887a      	ldrh	r2, [r7, #2]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	041a      	lsls	r2, r3, #16
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	43d9      	mvns	r1, r3
 8007f24:	887b      	ldrh	r3, [r7, #2]
 8007f26:	400b      	ands	r3, r1
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	619a      	str	r2, [r3, #24]
}
 8007f2e:	bf00      	nop
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
	...

08007f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e264      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d075      	beq.n	8008046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f5a:	4ba3      	ldr	r3, [pc, #652]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 030c 	and.w	r3, r3, #12
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d00c      	beq.n	8007f80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f66:	4ba0      	ldr	r3, [pc, #640]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f6e:	2b08      	cmp	r3, #8
 8007f70:	d112      	bne.n	8007f98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f72:	4b9d      	ldr	r3, [pc, #628]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f7e:	d10b      	bne.n	8007f98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f80:	4b99      	ldr	r3, [pc, #612]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d05b      	beq.n	8008044 <HAL_RCC_OscConfig+0x108>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d157      	bne.n	8008044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e23f      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fa0:	d106      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x74>
 8007fa2:	4b91      	ldr	r3, [pc, #580]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a90      	ldr	r2, [pc, #576]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	e01d      	b.n	8007fec <HAL_RCC_OscConfig+0xb0>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fb8:	d10c      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x98>
 8007fba:	4b8b      	ldr	r3, [pc, #556]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a8a      	ldr	r2, [pc, #552]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	4b88      	ldr	r3, [pc, #544]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a87      	ldr	r2, [pc, #540]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	e00b      	b.n	8007fec <HAL_RCC_OscConfig+0xb0>
 8007fd4:	4b84      	ldr	r3, [pc, #528]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a83      	ldr	r2, [pc, #524]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	4b81      	ldr	r3, [pc, #516]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a80      	ldr	r2, [pc, #512]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8007fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d013      	beq.n	800801c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ff4:	f7fe fc76 	bl	80068e4 <HAL_GetTick>
 8007ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ffa:	e008      	b.n	800800e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ffc:	f7fe fc72 	bl	80068e4 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	2b64      	cmp	r3, #100	; 0x64
 8008008:	d901      	bls.n	800800e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e204      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800800e:	4b76      	ldr	r3, [pc, #472]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0f0      	beq.n	8007ffc <HAL_RCC_OscConfig+0xc0>
 800801a:	e014      	b.n	8008046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800801c:	f7fe fc62 	bl	80068e4 <HAL_GetTick>
 8008020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008022:	e008      	b.n	8008036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008024:	f7fe fc5e 	bl	80068e4 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b64      	cmp	r3, #100	; 0x64
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e1f0      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008036:	4b6c      	ldr	r3, [pc, #432]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1f0      	bne.n	8008024 <HAL_RCC_OscConfig+0xe8>
 8008042:	e000      	b.n	8008046 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d063      	beq.n	800811a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008052:	4b65      	ldr	r3, [pc, #404]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f003 030c 	and.w	r3, r3, #12
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00b      	beq.n	8008076 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800805e:	4b62      	ldr	r3, [pc, #392]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008066:	2b08      	cmp	r3, #8
 8008068:	d11c      	bne.n	80080a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800806a:	4b5f      	ldr	r3, [pc, #380]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d116      	bne.n	80080a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008076:	4b5c      	ldr	r3, [pc, #368]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <HAL_RCC_OscConfig+0x152>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d001      	beq.n	800808e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e1c4      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800808e:	4b56      	ldr	r3, [pc, #344]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	4952      	ldr	r1, [pc, #328]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080a2:	e03a      	b.n	800811a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d020      	beq.n	80080ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080ac:	4b4f      	ldr	r3, [pc, #316]	; (80081ec <HAL_RCC_OscConfig+0x2b0>)
 80080ae:	2201      	movs	r2, #1
 80080b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b2:	f7fe fc17 	bl	80068e4 <HAL_GetTick>
 80080b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080b8:	e008      	b.n	80080cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080ba:	f7fe fc13 	bl	80068e4 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d901      	bls.n	80080cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e1a5      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080cc:	4b46      	ldr	r3, [pc, #280]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d0f0      	beq.n	80080ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d8:	4b43      	ldr	r3, [pc, #268]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	00db      	lsls	r3, r3, #3
 80080e6:	4940      	ldr	r1, [pc, #256]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	600b      	str	r3, [r1, #0]
 80080ec:	e015      	b.n	800811a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080ee:	4b3f      	ldr	r3, [pc, #252]	; (80081ec <HAL_RCC_OscConfig+0x2b0>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f4:	f7fe fbf6 	bl	80068e4 <HAL_GetTick>
 80080f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080fa:	e008      	b.n	800810e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080fc:	f7fe fbf2 	bl	80068e4 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e184      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800810e:	4b36      	ldr	r3, [pc, #216]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1f0      	bne.n	80080fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b00      	cmp	r3, #0
 8008124:	d030      	beq.n	8008188 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d016      	beq.n	800815c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800812e:	4b30      	ldr	r3, [pc, #192]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 8008130:	2201      	movs	r2, #1
 8008132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008134:	f7fe fbd6 	bl	80068e4 <HAL_GetTick>
 8008138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800813c:	f7fe fbd2 	bl	80068e4 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e164      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800814e:	4b26      	ldr	r3, [pc, #152]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 8008150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0f0      	beq.n	800813c <HAL_RCC_OscConfig+0x200>
 800815a:	e015      	b.n	8008188 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800815c:	4b24      	ldr	r3, [pc, #144]	; (80081f0 <HAL_RCC_OscConfig+0x2b4>)
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008162:	f7fe fbbf 	bl	80068e4 <HAL_GetTick>
 8008166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008168:	e008      	b.n	800817c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800816a:	f7fe fbbb 	bl	80068e4 <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	2b02      	cmp	r3, #2
 8008176:	d901      	bls.n	800817c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e14d      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800817c:	4b1a      	ldr	r3, [pc, #104]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 800817e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008180:	f003 0302 	and.w	r3, r3, #2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1f0      	bne.n	800816a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 80a0 	beq.w	80082d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008196:	2300      	movs	r3, #0
 8008198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800819a:	4b13      	ldr	r3, [pc, #76]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 800819c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10f      	bne.n	80081c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081a6:	2300      	movs	r3, #0
 80081a8:	60bb      	str	r3, [r7, #8]
 80081aa:	4b0f      	ldr	r3, [pc, #60]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	4a0e      	ldr	r2, [pc, #56]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 80081b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b4:	6413      	str	r3, [r2, #64]	; 0x40
 80081b6:	4b0c      	ldr	r3, [pc, #48]	; (80081e8 <HAL_RCC_OscConfig+0x2ac>)
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081be:	60bb      	str	r3, [r7, #8]
 80081c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081c2:	2301      	movs	r3, #1
 80081c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081c6:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <HAL_RCC_OscConfig+0x2b8>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d121      	bne.n	8008216 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081d2:	4b08      	ldr	r3, [pc, #32]	; (80081f4 <HAL_RCC_OscConfig+0x2b8>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a07      	ldr	r2, [pc, #28]	; (80081f4 <HAL_RCC_OscConfig+0x2b8>)
 80081d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081de:	f7fe fb81 	bl	80068e4 <HAL_GetTick>
 80081e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081e4:	e011      	b.n	800820a <HAL_RCC_OscConfig+0x2ce>
 80081e6:	bf00      	nop
 80081e8:	40023800 	.word	0x40023800
 80081ec:	42470000 	.word	0x42470000
 80081f0:	42470e80 	.word	0x42470e80
 80081f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081f8:	f7fe fb74 	bl	80068e4 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d901      	bls.n	800820a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e106      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800820a:	4b85      	ldr	r3, [pc, #532]	; (8008420 <HAL_RCC_OscConfig+0x4e4>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0f0      	beq.n	80081f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d106      	bne.n	800822c <HAL_RCC_OscConfig+0x2f0>
 800821e:	4b81      	ldr	r3, [pc, #516]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 8008220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008222:	4a80      	ldr	r2, [pc, #512]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 8008224:	f043 0301 	orr.w	r3, r3, #1
 8008228:	6713      	str	r3, [r2, #112]	; 0x70
 800822a:	e01c      	b.n	8008266 <HAL_RCC_OscConfig+0x32a>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	2b05      	cmp	r3, #5
 8008232:	d10c      	bne.n	800824e <HAL_RCC_OscConfig+0x312>
 8008234:	4b7b      	ldr	r3, [pc, #492]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 8008236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008238:	4a7a      	ldr	r2, [pc, #488]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 800823a:	f043 0304 	orr.w	r3, r3, #4
 800823e:	6713      	str	r3, [r2, #112]	; 0x70
 8008240:	4b78      	ldr	r3, [pc, #480]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 8008242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008244:	4a77      	ldr	r2, [pc, #476]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 8008246:	f043 0301 	orr.w	r3, r3, #1
 800824a:	6713      	str	r3, [r2, #112]	; 0x70
 800824c:	e00b      	b.n	8008266 <HAL_RCC_OscConfig+0x32a>
 800824e:	4b75      	ldr	r3, [pc, #468]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 8008250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008252:	4a74      	ldr	r2, [pc, #464]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	6713      	str	r3, [r2, #112]	; 0x70
 800825a:	4b72      	ldr	r3, [pc, #456]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 800825c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825e:	4a71      	ldr	r2, [pc, #452]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 8008260:	f023 0304 	bic.w	r3, r3, #4
 8008264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d015      	beq.n	800829a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800826e:	f7fe fb39 	bl	80068e4 <HAL_GetTick>
 8008272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008274:	e00a      	b.n	800828c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008276:	f7fe fb35 	bl	80068e4 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	f241 3288 	movw	r2, #5000	; 0x1388
 8008284:	4293      	cmp	r3, r2
 8008286:	d901      	bls.n	800828c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e0c5      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800828c:	4b65      	ldr	r3, [pc, #404]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 800828e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0ee      	beq.n	8008276 <HAL_RCC_OscConfig+0x33a>
 8008298:	e014      	b.n	80082c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800829a:	f7fe fb23 	bl	80068e4 <HAL_GetTick>
 800829e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082a0:	e00a      	b.n	80082b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082a2:	f7fe fb1f 	bl	80068e4 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e0af      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082b8:	4b5a      	ldr	r3, [pc, #360]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 80082ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1ee      	bne.n	80082a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d105      	bne.n	80082d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082ca:	4b56      	ldr	r3, [pc, #344]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	4a55      	ldr	r2, [pc, #340]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 80082d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 809b 	beq.w	8008416 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082e0:	4b50      	ldr	r3, [pc, #320]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f003 030c 	and.w	r3, r3, #12
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d05c      	beq.n	80083a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d141      	bne.n	8008378 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082f4:	4b4c      	ldr	r3, [pc, #304]	; (8008428 <HAL_RCC_OscConfig+0x4ec>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082fa:	f7fe faf3 	bl	80068e4 <HAL_GetTick>
 80082fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008300:	e008      	b.n	8008314 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008302:	f7fe faef 	bl	80068e4 <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d901      	bls.n	8008314 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e081      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008314:	4b43      	ldr	r3, [pc, #268]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1f0      	bne.n	8008302 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	69da      	ldr	r2, [r3, #28]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	019b      	lsls	r3, r3, #6
 8008330:	431a      	orrs	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008336:	085b      	lsrs	r3, r3, #1
 8008338:	3b01      	subs	r3, #1
 800833a:	041b      	lsls	r3, r3, #16
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	061b      	lsls	r3, r3, #24
 8008344:	4937      	ldr	r1, [pc, #220]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 8008346:	4313      	orrs	r3, r2
 8008348:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800834a:	4b37      	ldr	r3, [pc, #220]	; (8008428 <HAL_RCC_OscConfig+0x4ec>)
 800834c:	2201      	movs	r2, #1
 800834e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008350:	f7fe fac8 	bl	80068e4 <HAL_GetTick>
 8008354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008356:	e008      	b.n	800836a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008358:	f7fe fac4 	bl	80068e4 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b02      	cmp	r3, #2
 8008364:	d901      	bls.n	800836a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e056      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800836a:	4b2e      	ldr	r3, [pc, #184]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0f0      	beq.n	8008358 <HAL_RCC_OscConfig+0x41c>
 8008376:	e04e      	b.n	8008416 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008378:	4b2b      	ldr	r3, [pc, #172]	; (8008428 <HAL_RCC_OscConfig+0x4ec>)
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800837e:	f7fe fab1 	bl	80068e4 <HAL_GetTick>
 8008382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008384:	e008      	b.n	8008398 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008386:	f7fe faad 	bl	80068e4 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e03f      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008398:	4b22      	ldr	r3, [pc, #136]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1f0      	bne.n	8008386 <HAL_RCC_OscConfig+0x44a>
 80083a4:	e037      	b.n	8008416 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d101      	bne.n	80083b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e032      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083b2:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <HAL_RCC_OscConfig+0x4e8>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d028      	beq.n	8008412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d121      	bne.n	8008412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083d8:	429a      	cmp	r2, r3
 80083da:	d11a      	bne.n	8008412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80083e2:	4013      	ands	r3, r2
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d111      	bne.n	8008412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f8:	085b      	lsrs	r3, r3, #1
 80083fa:	3b01      	subs	r3, #1
 80083fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083fe:	429a      	cmp	r2, r3
 8008400:	d107      	bne.n	8008412 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800840e:	429a      	cmp	r2, r3
 8008410:	d001      	beq.n	8008416 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e000      	b.n	8008418 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	40007000 	.word	0x40007000
 8008424:	40023800 	.word	0x40023800
 8008428:	42470060 	.word	0x42470060

0800842c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e0cc      	b.n	80085da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008440:	4b68      	ldr	r3, [pc, #416]	; (80085e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0307 	and.w	r3, r3, #7
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d90c      	bls.n	8008468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800844e:	4b65      	ldr	r3, [pc, #404]	; (80085e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008456:	4b63      	ldr	r3, [pc, #396]	; (80085e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0307 	and.w	r3, r3, #7
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	d001      	beq.n	8008468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e0b8      	b.n	80085da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d020      	beq.n	80084b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b00      	cmp	r3, #0
 800847e:	d005      	beq.n	800848c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008480:	4b59      	ldr	r3, [pc, #356]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	4a58      	ldr	r2, [pc, #352]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800848a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0308 	and.w	r3, r3, #8
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008498:	4b53      	ldr	r3, [pc, #332]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	4a52      	ldr	r2, [pc, #328]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 800849e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084a4:	4b50      	ldr	r3, [pc, #320]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	494d      	ldr	r1, [pc, #308]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d044      	beq.n	800854c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d107      	bne.n	80084da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084ca:	4b47      	ldr	r3, [pc, #284]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d119      	bne.n	800850a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e07f      	b.n	80085da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d003      	beq.n	80084ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d107      	bne.n	80084fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084ea:	4b3f      	ldr	r3, [pc, #252]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d109      	bne.n	800850a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e06f      	b.n	80085da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084fa:	4b3b      	ldr	r3, [pc, #236]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e067      	b.n	80085da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800850a:	4b37      	ldr	r3, [pc, #220]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f023 0203 	bic.w	r2, r3, #3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	4934      	ldr	r1, [pc, #208]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008518:	4313      	orrs	r3, r2
 800851a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800851c:	f7fe f9e2 	bl	80068e4 <HAL_GetTick>
 8008520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008522:	e00a      	b.n	800853a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008524:	f7fe f9de 	bl	80068e4 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008532:	4293      	cmp	r3, r2
 8008534:	d901      	bls.n	800853a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e04f      	b.n	80085da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800853a:	4b2b      	ldr	r3, [pc, #172]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f003 020c 	and.w	r2, r3, #12
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	429a      	cmp	r2, r3
 800854a:	d1eb      	bne.n	8008524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800854c:	4b25      	ldr	r3, [pc, #148]	; (80085e4 <HAL_RCC_ClockConfig+0x1b8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d20c      	bcs.n	8008574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800855a:	4b22      	ldr	r3, [pc, #136]	; (80085e4 <HAL_RCC_ClockConfig+0x1b8>)
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	b2d2      	uxtb	r2, r2
 8008560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008562:	4b20      	ldr	r3, [pc, #128]	; (80085e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d001      	beq.n	8008574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e032      	b.n	80085da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	2b00      	cmp	r3, #0
 800857e:	d008      	beq.n	8008592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008580:	4b19      	ldr	r3, [pc, #100]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	4916      	ldr	r1, [pc, #88]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 800858e:	4313      	orrs	r3, r2
 8008590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0308 	and.w	r3, r3, #8
 800859a:	2b00      	cmp	r3, #0
 800859c:	d009      	beq.n	80085b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800859e:	4b12      	ldr	r3, [pc, #72]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	490e      	ldr	r1, [pc, #56]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085b2:	f000 f821 	bl	80085f8 <HAL_RCC_GetSysClockFreq>
 80085b6:	4602      	mov	r2, r0
 80085b8:	4b0b      	ldr	r3, [pc, #44]	; (80085e8 <HAL_RCC_ClockConfig+0x1bc>)
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	091b      	lsrs	r3, r3, #4
 80085be:	f003 030f 	and.w	r3, r3, #15
 80085c2:	490a      	ldr	r1, [pc, #40]	; (80085ec <HAL_RCC_ClockConfig+0x1c0>)
 80085c4:	5ccb      	ldrb	r3, [r1, r3]
 80085c6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ca:	4a09      	ldr	r2, [pc, #36]	; (80085f0 <HAL_RCC_ClockConfig+0x1c4>)
 80085cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80085ce:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <HAL_RCC_ClockConfig+0x1c8>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe f942 	bl	800685c <HAL_InitTick>

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	40023c00 	.word	0x40023c00
 80085e8:	40023800 	.word	0x40023800
 80085ec:	0800c374 	.word	0x0800c374
 80085f0:	20000034 	.word	0x20000034
 80085f4:	20000038 	.word	0x20000038

080085f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	607b      	str	r3, [r7, #4]
 8008604:	2300      	movs	r3, #0
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	2300      	movs	r3, #0
 800860a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008610:	4b67      	ldr	r3, [pc, #412]	; (80087b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f003 030c 	and.w	r3, r3, #12
 8008618:	2b08      	cmp	r3, #8
 800861a:	d00d      	beq.n	8008638 <HAL_RCC_GetSysClockFreq+0x40>
 800861c:	2b08      	cmp	r3, #8
 800861e:	f200 80bd 	bhi.w	800879c <HAL_RCC_GetSysClockFreq+0x1a4>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d002      	beq.n	800862c <HAL_RCC_GetSysClockFreq+0x34>
 8008626:	2b04      	cmp	r3, #4
 8008628:	d003      	beq.n	8008632 <HAL_RCC_GetSysClockFreq+0x3a>
 800862a:	e0b7      	b.n	800879c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800862c:	4b61      	ldr	r3, [pc, #388]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800862e:	60bb      	str	r3, [r7, #8]
       break;
 8008630:	e0b7      	b.n	80087a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008632:	4b61      	ldr	r3, [pc, #388]	; (80087b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008634:	60bb      	str	r3, [r7, #8]
      break;
 8008636:	e0b4      	b.n	80087a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008638:	4b5d      	ldr	r3, [pc, #372]	; (80087b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008640:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008642:	4b5b      	ldr	r3, [pc, #364]	; (80087b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d04d      	beq.n	80086ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800864e:	4b58      	ldr	r3, [pc, #352]	; (80087b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	099b      	lsrs	r3, r3, #6
 8008654:	461a      	mov	r2, r3
 8008656:	f04f 0300 	mov.w	r3, #0
 800865a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800865e:	f04f 0100 	mov.w	r1, #0
 8008662:	ea02 0800 	and.w	r8, r2, r0
 8008666:	ea03 0901 	and.w	r9, r3, r1
 800866a:	4640      	mov	r0, r8
 800866c:	4649      	mov	r1, r9
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	f04f 0300 	mov.w	r3, #0
 8008676:	014b      	lsls	r3, r1, #5
 8008678:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800867c:	0142      	lsls	r2, r0, #5
 800867e:	4610      	mov	r0, r2
 8008680:	4619      	mov	r1, r3
 8008682:	ebb0 0008 	subs.w	r0, r0, r8
 8008686:	eb61 0109 	sbc.w	r1, r1, r9
 800868a:	f04f 0200 	mov.w	r2, #0
 800868e:	f04f 0300 	mov.w	r3, #0
 8008692:	018b      	lsls	r3, r1, #6
 8008694:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008698:	0182      	lsls	r2, r0, #6
 800869a:	1a12      	subs	r2, r2, r0
 800869c:	eb63 0301 	sbc.w	r3, r3, r1
 80086a0:	f04f 0000 	mov.w	r0, #0
 80086a4:	f04f 0100 	mov.w	r1, #0
 80086a8:	00d9      	lsls	r1, r3, #3
 80086aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086ae:	00d0      	lsls	r0, r2, #3
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	eb12 0208 	adds.w	r2, r2, r8
 80086b8:	eb43 0309 	adc.w	r3, r3, r9
 80086bc:	f04f 0000 	mov.w	r0, #0
 80086c0:	f04f 0100 	mov.w	r1, #0
 80086c4:	0259      	lsls	r1, r3, #9
 80086c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80086ca:	0250      	lsls	r0, r2, #9
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4610      	mov	r0, r2
 80086d2:	4619      	mov	r1, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	461a      	mov	r2, r3
 80086d8:	f04f 0300 	mov.w	r3, #0
 80086dc:	f7f8 fa42 	bl	8000b64 <__aeabi_uldivmod>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4613      	mov	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	e04a      	b.n	8008780 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086ea:	4b31      	ldr	r3, [pc, #196]	; (80087b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	099b      	lsrs	r3, r3, #6
 80086f0:	461a      	mov	r2, r3
 80086f2:	f04f 0300 	mov.w	r3, #0
 80086f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80086fa:	f04f 0100 	mov.w	r1, #0
 80086fe:	ea02 0400 	and.w	r4, r2, r0
 8008702:	ea03 0501 	and.w	r5, r3, r1
 8008706:	4620      	mov	r0, r4
 8008708:	4629      	mov	r1, r5
 800870a:	f04f 0200 	mov.w	r2, #0
 800870e:	f04f 0300 	mov.w	r3, #0
 8008712:	014b      	lsls	r3, r1, #5
 8008714:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008718:	0142      	lsls	r2, r0, #5
 800871a:	4610      	mov	r0, r2
 800871c:	4619      	mov	r1, r3
 800871e:	1b00      	subs	r0, r0, r4
 8008720:	eb61 0105 	sbc.w	r1, r1, r5
 8008724:	f04f 0200 	mov.w	r2, #0
 8008728:	f04f 0300 	mov.w	r3, #0
 800872c:	018b      	lsls	r3, r1, #6
 800872e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008732:	0182      	lsls	r2, r0, #6
 8008734:	1a12      	subs	r2, r2, r0
 8008736:	eb63 0301 	sbc.w	r3, r3, r1
 800873a:	f04f 0000 	mov.w	r0, #0
 800873e:	f04f 0100 	mov.w	r1, #0
 8008742:	00d9      	lsls	r1, r3, #3
 8008744:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008748:	00d0      	lsls	r0, r2, #3
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	1912      	adds	r2, r2, r4
 8008750:	eb45 0303 	adc.w	r3, r5, r3
 8008754:	f04f 0000 	mov.w	r0, #0
 8008758:	f04f 0100 	mov.w	r1, #0
 800875c:	0299      	lsls	r1, r3, #10
 800875e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008762:	0290      	lsls	r0, r2, #10
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4610      	mov	r0, r2
 800876a:	4619      	mov	r1, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	461a      	mov	r2, r3
 8008770:	f04f 0300 	mov.w	r3, #0
 8008774:	f7f8 f9f6 	bl	8000b64 <__aeabi_uldivmod>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4613      	mov	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008780:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	0c1b      	lsrs	r3, r3, #16
 8008786:	f003 0303 	and.w	r3, r3, #3
 800878a:	3301      	adds	r3, #1
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	fbb2 f3f3 	udiv	r3, r2, r3
 8008798:	60bb      	str	r3, [r7, #8]
      break;
 800879a:	e002      	b.n	80087a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800879c:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800879e:	60bb      	str	r3, [r7, #8]
      break;
 80087a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087a2:	68bb      	ldr	r3, [r7, #8]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80087ae:	bf00      	nop
 80087b0:	40023800 	.word	0x40023800
 80087b4:	00f42400 	.word	0x00f42400
 80087b8:	007a1200 	.word	0x007a1200

080087bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087c0:	4b03      	ldr	r3, [pc, #12]	; (80087d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80087c2:	681b      	ldr	r3, [r3, #0]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	20000034 	.word	0x20000034

080087d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80087d8:	f7ff fff0 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 80087dc:	4602      	mov	r2, r0
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	0a9b      	lsrs	r3, r3, #10
 80087e4:	f003 0307 	and.w	r3, r3, #7
 80087e8:	4903      	ldr	r1, [pc, #12]	; (80087f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087ea:	5ccb      	ldrb	r3, [r1, r3]
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	40023800 	.word	0x40023800
 80087f8:	0800c384 	.word	0x0800c384

080087fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008800:	f7ff ffdc 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 8008804:	4602      	mov	r2, r0
 8008806:	4b05      	ldr	r3, [pc, #20]	; (800881c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	0b5b      	lsrs	r3, r3, #13
 800880c:	f003 0307 	and.w	r3, r3, #7
 8008810:	4903      	ldr	r1, [pc, #12]	; (8008820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008812:	5ccb      	ldrb	r3, [r1, r3]
 8008814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008818:	4618      	mov	r0, r3
 800881a:	bd80      	pop	{r7, pc}
 800881c:	40023800 	.word	0x40023800
 8008820:	0800c384 	.word	0x0800c384

08008824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e07b      	b.n	800892e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	2b00      	cmp	r3, #0
 800883c:	d108      	bne.n	8008850 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008846:	d009      	beq.n	800885c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	61da      	str	r2, [r3, #28]
 800884e:	e005      	b.n	800885c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7fd fa28 	bl	8005ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2202      	movs	r2, #2
 8008880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008892:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088a4:	431a      	orrs	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	431a      	orrs	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	431a      	orrs	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088cc:	431a      	orrs	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088d6:	431a      	orrs	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e0:	ea42 0103 	orr.w	r1, r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	0c1b      	lsrs	r3, r3, #16
 80088fa:	f003 0104 	and.w	r1, r3, #4
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008902:	f003 0210 	and.w	r2, r3, #16
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	69da      	ldr	r2, [r3, #28]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800891c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b088      	sub	sp, #32
 800893a:	af00      	add	r7, sp, #0
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	603b      	str	r3, [r7, #0]
 8008942:	4613      	mov	r3, r2
 8008944:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008950:	2b01      	cmp	r3, #1
 8008952:	d101      	bne.n	8008958 <HAL_SPI_Transmit+0x22>
 8008954:	2302      	movs	r3, #2
 8008956:	e126      	b.n	8008ba6 <HAL_SPI_Transmit+0x270>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008960:	f7fd ffc0 	bl	80068e4 <HAL_GetTick>
 8008964:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b01      	cmp	r3, #1
 8008974:	d002      	beq.n	800897c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008976:	2302      	movs	r3, #2
 8008978:	77fb      	strb	r3, [r7, #31]
    goto error;
 800897a:	e10b      	b.n	8008b94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <HAL_SPI_Transmit+0x52>
 8008982:	88fb      	ldrh	r3, [r7, #6]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d102      	bne.n	800898e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800898c:	e102      	b.n	8008b94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2203      	movs	r2, #3
 8008992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	88fa      	ldrh	r2, [r7, #6]
 80089a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	88fa      	ldrh	r2, [r7, #6]
 80089ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d4:	d10f      	bne.n	80089f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a00:	2b40      	cmp	r3, #64	; 0x40
 8008a02:	d007      	beq.n	8008a14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a1c:	d14b      	bne.n	8008ab6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <HAL_SPI_Transmit+0xf6>
 8008a26:	8afb      	ldrh	r3, [r7, #22]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d13e      	bne.n	8008aaa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a30:	881a      	ldrh	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3c:	1c9a      	adds	r2, r3, #2
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a50:	e02b      	b.n	8008aaa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d112      	bne.n	8008a86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a64:	881a      	ldrh	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a70:	1c9a      	adds	r2, r3, #2
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a84:	e011      	b.n	8008aaa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a86:	f7fd ff2d 	bl	80068e4 <HAL_GetTick>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d803      	bhi.n	8008a9e <HAL_SPI_Transmit+0x168>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9c:	d102      	bne.n	8008aa4 <HAL_SPI_Transmit+0x16e>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d102      	bne.n	8008aaa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008aa8:	e074      	b.n	8008b94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1ce      	bne.n	8008a52 <HAL_SPI_Transmit+0x11c>
 8008ab4:	e04c      	b.n	8008b50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <HAL_SPI_Transmit+0x18e>
 8008abe:	8afb      	ldrh	r3, [r7, #22]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d140      	bne.n	8008b46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	330c      	adds	r3, #12
 8008ace:	7812      	ldrb	r2, [r2, #0]
 8008ad0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008aea:	e02c      	b.n	8008b46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d113      	bne.n	8008b22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	330c      	adds	r3, #12
 8008b04:	7812      	ldrb	r2, [r2, #0]
 8008b06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b20:	e011      	b.n	8008b46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b22:	f7fd fedf 	bl	80068e4 <HAL_GetTick>
 8008b26:	4602      	mov	r2, r0
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d803      	bhi.n	8008b3a <HAL_SPI_Transmit+0x204>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b38:	d102      	bne.n	8008b40 <HAL_SPI_Transmit+0x20a>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008b44:	e026      	b.n	8008b94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1cd      	bne.n	8008aec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 fbcb 	bl	80092f0 <SPI_EndRxTxTransaction>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2220      	movs	r2, #32
 8008b64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b6e:	2300      	movs	r3, #0
 8008b70:	613b      	str	r3, [r7, #16]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	613b      	str	r3, [r7, #16]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	613b      	str	r3, [r7, #16]
 8008b82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d002      	beq.n	8008b92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	77fb      	strb	r3, [r7, #31]
 8008b90:	e000      	b.n	8008b94 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008b92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ba4:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3720      	adds	r7, #32
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b088      	sub	sp, #32
 8008bb2:	af02      	add	r7, sp, #8
 8008bb4:	60f8      	str	r0, [r7, #12]
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	603b      	str	r3, [r7, #0]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bca:	d112      	bne.n	8008bf2 <HAL_SPI_Receive+0x44>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10e      	bne.n	8008bf2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2204      	movs	r2, #4
 8008bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008bdc:	88fa      	ldrh	r2, [r7, #6]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	4613      	mov	r3, r2
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f8f1 	bl	8008dd0 <HAL_SPI_TransmitReceive>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	e0ea      	b.n	8008dc8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <HAL_SPI_Receive+0x52>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e0e3      	b.n	8008dc8 <HAL_SPI_Receive+0x21a>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c08:	f7fd fe6c 	bl	80068e4 <HAL_GetTick>
 8008c0c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d002      	beq.n	8008c20 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c1e:	e0ca      	b.n	8008db6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <HAL_SPI_Receive+0x7e>
 8008c26:	88fb      	ldrh	r3, [r7, #6]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d102      	bne.n	8008c32 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c30:	e0c1      	b.n	8008db6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2204      	movs	r2, #4
 8008c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	88fa      	ldrh	r2, [r7, #6]
 8008c4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	88fa      	ldrh	r2, [r7, #6]
 8008c50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c78:	d10f      	bne.n	8008c9a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c98:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca4:	2b40      	cmp	r3, #64	; 0x40
 8008ca6:	d007      	beq.n	8008cb8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d162      	bne.n	8008d86 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008cc0:	e02e      	b.n	8008d20 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d115      	bne.n	8008cfc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f103 020c 	add.w	r2, r3, #12
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cdc:	7812      	ldrb	r2, [r2, #0]
 8008cde:	b2d2      	uxtb	r2, r2
 8008ce0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cfa:	e011      	b.n	8008d20 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cfc:	f7fd fdf2 	bl	80068e4 <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d803      	bhi.n	8008d14 <HAL_SPI_Receive+0x166>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d12:	d102      	bne.n	8008d1a <HAL_SPI_Receive+0x16c>
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d102      	bne.n	8008d20 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d1e:	e04a      	b.n	8008db6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1cb      	bne.n	8008cc2 <HAL_SPI_Receive+0x114>
 8008d2a:	e031      	b.n	8008d90 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d113      	bne.n	8008d62 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	b292      	uxth	r2, r2
 8008d46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4c:	1c9a      	adds	r2, r3, #2
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d60:	e011      	b.n	8008d86 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d62:	f7fd fdbf 	bl	80068e4 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d803      	bhi.n	8008d7a <HAL_SPI_Receive+0x1cc>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d78:	d102      	bne.n	8008d80 <HAL_SPI_Receive+0x1d2>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008d84:	e017      	b.n	8008db6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1cd      	bne.n	8008d2c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 fa45 	bl	8009224 <SPI_EndRxTransaction>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2220      	movs	r2, #32
 8008da4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	75fb      	strb	r3, [r7, #23]
 8008db2:	e000      	b.n	8008db6 <HAL_SPI_Receive+0x208>
  }

error :
 8008db4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08c      	sub	sp, #48	; 0x30
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008dde:	2301      	movs	r3, #1
 8008de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d101      	bne.n	8008df6 <HAL_SPI_TransmitReceive+0x26>
 8008df2:	2302      	movs	r3, #2
 8008df4:	e18a      	b.n	800910c <HAL_SPI_TransmitReceive+0x33c>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008dfe:	f7fd fd71 	bl	80068e4 <HAL_GetTick>
 8008e02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008e14:	887b      	ldrh	r3, [r7, #2]
 8008e16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d00f      	beq.n	8008e40 <HAL_SPI_TransmitReceive+0x70>
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e26:	d107      	bne.n	8008e38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d103      	bne.n	8008e38 <HAL_SPI_TransmitReceive+0x68>
 8008e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	d003      	beq.n	8008e40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008e3e:	e15b      	b.n	80090f8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <HAL_SPI_TransmitReceive+0x82>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <HAL_SPI_TransmitReceive+0x82>
 8008e4c:	887b      	ldrh	r3, [r7, #2]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d103      	bne.n	8008e5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008e58:	e14e      	b.n	80090f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	d003      	beq.n	8008e6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2205      	movs	r2, #5
 8008e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	887a      	ldrh	r2, [r7, #2]
 8008e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	887a      	ldrh	r2, [r7, #2]
 8008e84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	887a      	ldrh	r2, [r7, #2]
 8008e90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	887a      	ldrh	r2, [r7, #2]
 8008e96:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eae:	2b40      	cmp	r3, #64	; 0x40
 8008eb0:	d007      	beq.n	8008ec2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ec0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eca:	d178      	bne.n	8008fbe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <HAL_SPI_TransmitReceive+0x10a>
 8008ed4:	8b7b      	ldrh	r3, [r7, #26]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d166      	bne.n	8008fa8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	881a      	ldrh	r2, [r3, #0]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eea:	1c9a      	adds	r2, r3, #2
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008efe:	e053      	b.n	8008fa8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d11b      	bne.n	8008f46 <HAL_SPI_TransmitReceive+0x176>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d016      	beq.n	8008f46 <HAL_SPI_TransmitReceive+0x176>
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d113      	bne.n	8008f46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	881a      	ldrh	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	1c9a      	adds	r2, r3, #2
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d119      	bne.n	8008f88 <HAL_SPI_TransmitReceive+0x1b8>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d014      	beq.n	8008f88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68da      	ldr	r2, [r3, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	b292      	uxth	r2, r2
 8008f6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f70:	1c9a      	adds	r2, r3, #2
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f84:	2301      	movs	r3, #1
 8008f86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f88:	f7fd fcac 	bl	80068e4 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d807      	bhi.n	8008fa8 <HAL_SPI_TransmitReceive+0x1d8>
 8008f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9e:	d003      	beq.n	8008fa8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008fa6:	e0a7      	b.n	80090f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1a6      	bne.n	8008f00 <HAL_SPI_TransmitReceive+0x130>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1a1      	bne.n	8008f00 <HAL_SPI_TransmitReceive+0x130>
 8008fbc:	e07c      	b.n	80090b8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <HAL_SPI_TransmitReceive+0x1fc>
 8008fc6:	8b7b      	ldrh	r3, [r7, #26]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d16b      	bne.n	80090a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	330c      	adds	r3, #12
 8008fd6:	7812      	ldrb	r2, [r2, #0]
 8008fd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	3b01      	subs	r3, #1
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ff2:	e057      	b.n	80090a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d11c      	bne.n	800903c <HAL_SPI_TransmitReceive+0x26c>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009006:	b29b      	uxth	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d017      	beq.n	800903c <HAL_SPI_TransmitReceive+0x26c>
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	2b01      	cmp	r3, #1
 8009010:	d114      	bne.n	800903c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	330c      	adds	r3, #12
 800901c:	7812      	ldrb	r2, [r2, #0]
 800901e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800902e:	b29b      	uxth	r3, r3
 8009030:	3b01      	subs	r3, #1
 8009032:	b29a      	uxth	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009038:	2300      	movs	r3, #0
 800903a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b01      	cmp	r3, #1
 8009048:	d119      	bne.n	800907e <HAL_SPI_TransmitReceive+0x2ae>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800904e:	b29b      	uxth	r3, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	d014      	beq.n	800907e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68da      	ldr	r2, [r3, #12]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905e:	b2d2      	uxtb	r2, r2
 8009060:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009070:	b29b      	uxth	r3, r3
 8009072:	3b01      	subs	r3, #1
 8009074:	b29a      	uxth	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800907a:	2301      	movs	r3, #1
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800907e:	f7fd fc31 	bl	80068e4 <HAL_GetTick>
 8009082:	4602      	mov	r2, r0
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800908a:	429a      	cmp	r2, r3
 800908c:	d803      	bhi.n	8009096 <HAL_SPI_TransmitReceive+0x2c6>
 800908e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009094:	d102      	bne.n	800909c <HAL_SPI_TransmitReceive+0x2cc>
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	2b00      	cmp	r3, #0
 800909a:	d103      	bne.n	80090a4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80090a2:	e029      	b.n	80090f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1a2      	bne.n	8008ff4 <HAL_SPI_TransmitReceive+0x224>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d19d      	bne.n	8008ff4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 f917 	bl	80092f0 <SPI_EndRxTxTransaction>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d006      	beq.n	80090d6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2220      	movs	r2, #32
 80090d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80090d4:	e010      	b.n	80090f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10b      	bne.n	80090f6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	e000      	b.n	80090f8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80090f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009108:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800910c:	4618      	mov	r0, r3
 800910e:	3730      	adds	r7, #48	; 0x30
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	4613      	mov	r3, r2
 8009122:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009124:	f7fd fbde 	bl	80068e4 <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	683a      	ldr	r2, [r7, #0]
 8009130:	4413      	add	r3, r2
 8009132:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009134:	f7fd fbd6 	bl	80068e4 <HAL_GetTick>
 8009138:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800913a:	4b39      	ldr	r3, [pc, #228]	; (8009220 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	015b      	lsls	r3, r3, #5
 8009140:	0d1b      	lsrs	r3, r3, #20
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	fb02 f303 	mul.w	r3, r2, r3
 8009148:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800914a:	e054      	b.n	80091f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009152:	d050      	beq.n	80091f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009154:	f7fd fbc6 	bl	80068e4 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	429a      	cmp	r2, r3
 8009162:	d902      	bls.n	800916a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d13d      	bne.n	80091e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009178:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009182:	d111      	bne.n	80091a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800918c:	d004      	beq.n	8009198 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009196:	d107      	bne.n	80091a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091b0:	d10f      	bne.n	80091d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e017      	b.n	8009216 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	4013      	ands	r3, r2
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	429a      	cmp	r2, r3
 8009204:	bf0c      	ite	eq
 8009206:	2301      	moveq	r3, #1
 8009208:	2300      	movne	r3, #0
 800920a:	b2db      	uxtb	r3, r3
 800920c:	461a      	mov	r2, r3
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	429a      	cmp	r2, r3
 8009212:	d19b      	bne.n	800914c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3720      	adds	r7, #32
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20000034 	.word	0x20000034

08009224 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af02      	add	r7, sp, #8
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009238:	d111      	bne.n	800925e <SPI_EndRxTransaction+0x3a>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009242:	d004      	beq.n	800924e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800924c:	d107      	bne.n	800925e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800925c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009266:	d12a      	bne.n	80092be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009270:	d012      	beq.n	8009298 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2200      	movs	r2, #0
 800927a:	2180      	movs	r1, #128	; 0x80
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7ff ff49 	bl	8009114 <SPI_WaitFlagStateUntilTimeout>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d02d      	beq.n	80092e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928c:	f043 0220 	orr.w	r2, r3, #32
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e026      	b.n	80092e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2200      	movs	r2, #0
 80092a0:	2101      	movs	r1, #1
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff ff36 	bl	8009114 <SPI_WaitFlagStateUntilTimeout>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d01a      	beq.n	80092e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b2:	f043 0220 	orr.w	r2, r3, #32
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e013      	b.n	80092e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2200      	movs	r2, #0
 80092c6:	2101      	movs	r1, #1
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f7ff ff23 	bl	8009114 <SPI_WaitFlagStateUntilTimeout>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d007      	beq.n	80092e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092d8:	f043 0220 	orr.w	r2, r3, #32
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e000      	b.n	80092e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af02      	add	r7, sp, #8
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80092fc:	4b1b      	ldr	r3, [pc, #108]	; (800936c <SPI_EndRxTxTransaction+0x7c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a1b      	ldr	r2, [pc, #108]	; (8009370 <SPI_EndRxTxTransaction+0x80>)
 8009302:	fba2 2303 	umull	r2, r3, r2, r3
 8009306:	0d5b      	lsrs	r3, r3, #21
 8009308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800930c:	fb02 f303 	mul.w	r3, r2, r3
 8009310:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800931a:	d112      	bne.n	8009342 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2200      	movs	r2, #0
 8009324:	2180      	movs	r1, #128	; 0x80
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f7ff fef4 	bl	8009114 <SPI_WaitFlagStateUntilTimeout>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d016      	beq.n	8009360 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009336:	f043 0220 	orr.w	r2, r3, #32
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e00f      	b.n	8009362 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00a      	beq.n	800935e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	3b01      	subs	r3, #1
 800934c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009358:	2b80      	cmp	r3, #128	; 0x80
 800935a:	d0f2      	beq.n	8009342 <SPI_EndRxTxTransaction+0x52>
 800935c:	e000      	b.n	8009360 <SPI_EndRxTxTransaction+0x70>
        break;
 800935e:	bf00      	nop
  }

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000034 	.word	0x20000034
 8009370:	165e9f81 	.word	0x165e9f81

08009374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e041      	b.n	800940a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7fc fed4 	bl	8006148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3304      	adds	r3, #4
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f000 fa10 	bl	80097d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d101      	bne.n	8009424 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e041      	b.n	80094a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	d106      	bne.n	800943e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f839 	bl	80094b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2202      	movs	r2, #2
 8009442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3304      	adds	r3, #4
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	f000 f9c1 	bl	80097d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d101      	bne.n	80094e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094de:	2302      	movs	r3, #2
 80094e0:	e0ae      	b.n	8009640 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2b0c      	cmp	r3, #12
 80094ee:	f200 809f 	bhi.w	8009630 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80094f2:	a201      	add	r2, pc, #4	; (adr r2, 80094f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f8:	0800952d 	.word	0x0800952d
 80094fc:	08009631 	.word	0x08009631
 8009500:	08009631 	.word	0x08009631
 8009504:	08009631 	.word	0x08009631
 8009508:	0800956d 	.word	0x0800956d
 800950c:	08009631 	.word	0x08009631
 8009510:	08009631 	.word	0x08009631
 8009514:	08009631 	.word	0x08009631
 8009518:	080095af 	.word	0x080095af
 800951c:	08009631 	.word	0x08009631
 8009520:	08009631 	.word	0x08009631
 8009524:	08009631 	.word	0x08009631
 8009528:	080095ef 	.word	0x080095ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68b9      	ldr	r1, [r7, #8]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f9f0 	bl	8009918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	699a      	ldr	r2, [r3, #24]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f042 0208 	orr.w	r2, r2, #8
 8009546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0204 	bic.w	r2, r2, #4
 8009556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6999      	ldr	r1, [r3, #24]
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	691a      	ldr	r2, [r3, #16]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	619a      	str	r2, [r3, #24]
      break;
 800956a:	e064      	b.n	8009636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68b9      	ldr	r1, [r7, #8]
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fa40 	bl	80099f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	699a      	ldr	r2, [r3, #24]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	699a      	ldr	r2, [r3, #24]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6999      	ldr	r1, [r3, #24]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	021a      	lsls	r2, r3, #8
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	430a      	orrs	r2, r1
 80095aa:	619a      	str	r2, [r3, #24]
      break;
 80095ac:	e043      	b.n	8009636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68b9      	ldr	r1, [r7, #8]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 fa95 	bl	8009ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	69da      	ldr	r2, [r3, #28]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f042 0208 	orr.w	r2, r2, #8
 80095c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69da      	ldr	r2, [r3, #28]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f022 0204 	bic.w	r2, r2, #4
 80095d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69d9      	ldr	r1, [r3, #28]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	691a      	ldr	r2, [r3, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	61da      	str	r2, [r3, #28]
      break;
 80095ec:	e023      	b.n	8009636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68b9      	ldr	r1, [r7, #8]
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 fae9 	bl	8009bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	69da      	ldr	r2, [r3, #28]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	69da      	ldr	r2, [r3, #28]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	69d9      	ldr	r1, [r3, #28]
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	021a      	lsls	r2, r3, #8
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	430a      	orrs	r2, r1
 800962c:	61da      	str	r2, [r3, #28]
      break;
 800962e:	e002      	b.n	8009636 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	75fb      	strb	r3, [r7, #23]
      break;
 8009634:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800963e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3718      	adds	r7, #24
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800965c:	2b01      	cmp	r3, #1
 800965e:	d101      	bne.n	8009664 <HAL_TIM_ConfigClockSource+0x1c>
 8009660:	2302      	movs	r3, #2
 8009662:	e0b4      	b.n	80097ce <HAL_TIM_ConfigClockSource+0x186>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009682:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800968a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800969c:	d03e      	beq.n	800971c <HAL_TIM_ConfigClockSource+0xd4>
 800969e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096a2:	f200 8087 	bhi.w	80097b4 <HAL_TIM_ConfigClockSource+0x16c>
 80096a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096aa:	f000 8086 	beq.w	80097ba <HAL_TIM_ConfigClockSource+0x172>
 80096ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096b2:	d87f      	bhi.n	80097b4 <HAL_TIM_ConfigClockSource+0x16c>
 80096b4:	2b70      	cmp	r3, #112	; 0x70
 80096b6:	d01a      	beq.n	80096ee <HAL_TIM_ConfigClockSource+0xa6>
 80096b8:	2b70      	cmp	r3, #112	; 0x70
 80096ba:	d87b      	bhi.n	80097b4 <HAL_TIM_ConfigClockSource+0x16c>
 80096bc:	2b60      	cmp	r3, #96	; 0x60
 80096be:	d050      	beq.n	8009762 <HAL_TIM_ConfigClockSource+0x11a>
 80096c0:	2b60      	cmp	r3, #96	; 0x60
 80096c2:	d877      	bhi.n	80097b4 <HAL_TIM_ConfigClockSource+0x16c>
 80096c4:	2b50      	cmp	r3, #80	; 0x50
 80096c6:	d03c      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0xfa>
 80096c8:	2b50      	cmp	r3, #80	; 0x50
 80096ca:	d873      	bhi.n	80097b4 <HAL_TIM_ConfigClockSource+0x16c>
 80096cc:	2b40      	cmp	r3, #64	; 0x40
 80096ce:	d058      	beq.n	8009782 <HAL_TIM_ConfigClockSource+0x13a>
 80096d0:	2b40      	cmp	r3, #64	; 0x40
 80096d2:	d86f      	bhi.n	80097b4 <HAL_TIM_ConfigClockSource+0x16c>
 80096d4:	2b30      	cmp	r3, #48	; 0x30
 80096d6:	d064      	beq.n	80097a2 <HAL_TIM_ConfigClockSource+0x15a>
 80096d8:	2b30      	cmp	r3, #48	; 0x30
 80096da:	d86b      	bhi.n	80097b4 <HAL_TIM_ConfigClockSource+0x16c>
 80096dc:	2b20      	cmp	r3, #32
 80096de:	d060      	beq.n	80097a2 <HAL_TIM_ConfigClockSource+0x15a>
 80096e0:	2b20      	cmp	r3, #32
 80096e2:	d867      	bhi.n	80097b4 <HAL_TIM_ConfigClockSource+0x16c>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d05c      	beq.n	80097a2 <HAL_TIM_ConfigClockSource+0x15a>
 80096e8:	2b10      	cmp	r3, #16
 80096ea:	d05a      	beq.n	80097a2 <HAL_TIM_ConfigClockSource+0x15a>
 80096ec:	e062      	b.n	80097b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	6899      	ldr	r1, [r3, #8]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f000 fb35 	bl	8009d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009710:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	609a      	str	r2, [r3, #8]
      break;
 800971a:	e04f      	b.n	80097bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	6899      	ldr	r1, [r3, #8]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f000 fb1e 	bl	8009d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689a      	ldr	r2, [r3, #8]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800973e:	609a      	str	r2, [r3, #8]
      break;
 8009740:	e03c      	b.n	80097bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6818      	ldr	r0, [r3, #0]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	6859      	ldr	r1, [r3, #4]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	461a      	mov	r2, r3
 8009750:	f000 fa92 	bl	8009c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2150      	movs	r1, #80	; 0x50
 800975a:	4618      	mov	r0, r3
 800975c:	f000 faeb 	bl	8009d36 <TIM_ITRx_SetConfig>
      break;
 8009760:	e02c      	b.n	80097bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6818      	ldr	r0, [r3, #0]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	6859      	ldr	r1, [r3, #4]
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	461a      	mov	r2, r3
 8009770:	f000 fab1 	bl	8009cd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2160      	movs	r1, #96	; 0x60
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fadb 	bl	8009d36 <TIM_ITRx_SetConfig>
      break;
 8009780:	e01c      	b.n	80097bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6818      	ldr	r0, [r3, #0]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	6859      	ldr	r1, [r3, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	461a      	mov	r2, r3
 8009790:	f000 fa72 	bl	8009c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2140      	movs	r1, #64	; 0x40
 800979a:	4618      	mov	r0, r3
 800979c:	f000 facb 	bl	8009d36 <TIM_ITRx_SetConfig>
      break;
 80097a0:	e00c      	b.n	80097bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4619      	mov	r1, r3
 80097ac:	4610      	mov	r0, r2
 80097ae:	f000 fac2 	bl	8009d36 <TIM_ITRx_SetConfig>
      break;
 80097b2:	e003      	b.n	80097bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
      break;
 80097b8:	e000      	b.n	80097bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
	...

080097d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a40      	ldr	r2, [pc, #256]	; (80098ec <TIM_Base_SetConfig+0x114>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d013      	beq.n	8009818 <TIM_Base_SetConfig+0x40>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097f6:	d00f      	beq.n	8009818 <TIM_Base_SetConfig+0x40>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a3d      	ldr	r2, [pc, #244]	; (80098f0 <TIM_Base_SetConfig+0x118>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00b      	beq.n	8009818 <TIM_Base_SetConfig+0x40>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a3c      	ldr	r2, [pc, #240]	; (80098f4 <TIM_Base_SetConfig+0x11c>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d007      	beq.n	8009818 <TIM_Base_SetConfig+0x40>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a3b      	ldr	r2, [pc, #236]	; (80098f8 <TIM_Base_SetConfig+0x120>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d003      	beq.n	8009818 <TIM_Base_SetConfig+0x40>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a3a      	ldr	r2, [pc, #232]	; (80098fc <TIM_Base_SetConfig+0x124>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d108      	bne.n	800982a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4313      	orrs	r3, r2
 8009828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a2f      	ldr	r2, [pc, #188]	; (80098ec <TIM_Base_SetConfig+0x114>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d02b      	beq.n	800988a <TIM_Base_SetConfig+0xb2>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009838:	d027      	beq.n	800988a <TIM_Base_SetConfig+0xb2>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a2c      	ldr	r2, [pc, #176]	; (80098f0 <TIM_Base_SetConfig+0x118>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d023      	beq.n	800988a <TIM_Base_SetConfig+0xb2>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a2b      	ldr	r2, [pc, #172]	; (80098f4 <TIM_Base_SetConfig+0x11c>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d01f      	beq.n	800988a <TIM_Base_SetConfig+0xb2>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a2a      	ldr	r2, [pc, #168]	; (80098f8 <TIM_Base_SetConfig+0x120>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d01b      	beq.n	800988a <TIM_Base_SetConfig+0xb2>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a29      	ldr	r2, [pc, #164]	; (80098fc <TIM_Base_SetConfig+0x124>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d017      	beq.n	800988a <TIM_Base_SetConfig+0xb2>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a28      	ldr	r2, [pc, #160]	; (8009900 <TIM_Base_SetConfig+0x128>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d013      	beq.n	800988a <TIM_Base_SetConfig+0xb2>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a27      	ldr	r2, [pc, #156]	; (8009904 <TIM_Base_SetConfig+0x12c>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00f      	beq.n	800988a <TIM_Base_SetConfig+0xb2>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a26      	ldr	r2, [pc, #152]	; (8009908 <TIM_Base_SetConfig+0x130>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d00b      	beq.n	800988a <TIM_Base_SetConfig+0xb2>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a25      	ldr	r2, [pc, #148]	; (800990c <TIM_Base_SetConfig+0x134>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d007      	beq.n	800988a <TIM_Base_SetConfig+0xb2>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a24      	ldr	r2, [pc, #144]	; (8009910 <TIM_Base_SetConfig+0x138>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d003      	beq.n	800988a <TIM_Base_SetConfig+0xb2>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a23      	ldr	r2, [pc, #140]	; (8009914 <TIM_Base_SetConfig+0x13c>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d108      	bne.n	800989c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	4313      	orrs	r3, r2
 800989a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a0a      	ldr	r2, [pc, #40]	; (80098ec <TIM_Base_SetConfig+0x114>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d003      	beq.n	80098d0 <TIM_Base_SetConfig+0xf8>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a0c      	ldr	r2, [pc, #48]	; (80098fc <TIM_Base_SetConfig+0x124>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d103      	bne.n	80098d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	691a      	ldr	r2, [r3, #16]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	615a      	str	r2, [r3, #20]
}
 80098de:	bf00      	nop
 80098e0:	3714      	adds	r7, #20
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	40010000 	.word	0x40010000
 80098f0:	40000400 	.word	0x40000400
 80098f4:	40000800 	.word	0x40000800
 80098f8:	40000c00 	.word	0x40000c00
 80098fc:	40010400 	.word	0x40010400
 8009900:	40014000 	.word	0x40014000
 8009904:	40014400 	.word	0x40014400
 8009908:	40014800 	.word	0x40014800
 800990c:	40001800 	.word	0x40001800
 8009910:	40001c00 	.word	0x40001c00
 8009914:	40002000 	.word	0x40002000

08009918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009918:	b480      	push	{r7}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	f023 0201 	bic.w	r2, r3, #1
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f023 0303 	bic.w	r3, r3, #3
 800994e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	4313      	orrs	r3, r2
 8009958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f023 0302 	bic.w	r3, r3, #2
 8009960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	4313      	orrs	r3, r2
 800996a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a20      	ldr	r2, [pc, #128]	; (80099f0 <TIM_OC1_SetConfig+0xd8>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d003      	beq.n	800997c <TIM_OC1_SetConfig+0x64>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a1f      	ldr	r2, [pc, #124]	; (80099f4 <TIM_OC1_SetConfig+0xdc>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d10c      	bne.n	8009996 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	f023 0308 	bic.w	r3, r3, #8
 8009982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	4313      	orrs	r3, r2
 800998c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f023 0304 	bic.w	r3, r3, #4
 8009994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a15      	ldr	r2, [pc, #84]	; (80099f0 <TIM_OC1_SetConfig+0xd8>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d003      	beq.n	80099a6 <TIM_OC1_SetConfig+0x8e>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a14      	ldr	r2, [pc, #80]	; (80099f4 <TIM_OC1_SetConfig+0xdc>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d111      	bne.n	80099ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	4313      	orrs	r3, r2
 80099be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	693a      	ldr	r2, [r7, #16]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	621a      	str	r2, [r3, #32]
}
 80099e4:	bf00      	nop
 80099e6:	371c      	adds	r7, #28
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	40010000 	.word	0x40010000
 80099f4:	40010400 	.word	0x40010400

080099f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b087      	sub	sp, #28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	f023 0210 	bic.w	r2, r3, #16
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	021b      	lsls	r3, r3, #8
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f023 0320 	bic.w	r3, r3, #32
 8009a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	011b      	lsls	r3, r3, #4
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a22      	ldr	r2, [pc, #136]	; (8009adc <TIM_OC2_SetConfig+0xe4>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d003      	beq.n	8009a60 <TIM_OC2_SetConfig+0x68>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a21      	ldr	r2, [pc, #132]	; (8009ae0 <TIM_OC2_SetConfig+0xe8>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d10d      	bne.n	8009a7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	011b      	lsls	r3, r3, #4
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a17      	ldr	r2, [pc, #92]	; (8009adc <TIM_OC2_SetConfig+0xe4>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d003      	beq.n	8009a8c <TIM_OC2_SetConfig+0x94>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a16      	ldr	r2, [pc, #88]	; (8009ae0 <TIM_OC2_SetConfig+0xe8>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d113      	bne.n	8009ab4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	621a      	str	r2, [r3, #32]
}
 8009ace:	bf00      	nop
 8009ad0:	371c      	adds	r7, #28
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	40010000 	.word	0x40010000
 8009ae0:	40010400 	.word	0x40010400

08009ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f023 0303 	bic.w	r3, r3, #3
 8009b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	021b      	lsls	r3, r3, #8
 8009b34:	697a      	ldr	r2, [r7, #20]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a21      	ldr	r2, [pc, #132]	; (8009bc4 <TIM_OC3_SetConfig+0xe0>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d003      	beq.n	8009b4a <TIM_OC3_SetConfig+0x66>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a20      	ldr	r2, [pc, #128]	; (8009bc8 <TIM_OC3_SetConfig+0xe4>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d10d      	bne.n	8009b66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	021b      	lsls	r3, r3, #8
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a16      	ldr	r2, [pc, #88]	; (8009bc4 <TIM_OC3_SetConfig+0xe0>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d003      	beq.n	8009b76 <TIM_OC3_SetConfig+0x92>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a15      	ldr	r2, [pc, #84]	; (8009bc8 <TIM_OC3_SetConfig+0xe4>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d113      	bne.n	8009b9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	011b      	lsls	r3, r3, #4
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	699b      	ldr	r3, [r3, #24]
 8009b96:	011b      	lsls	r3, r3, #4
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	621a      	str	r2, [r3, #32]
}
 8009bb8:	bf00      	nop
 8009bba:	371c      	adds	r7, #28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	40010000 	.word	0x40010000
 8009bc8:	40010400 	.word	0x40010400

08009bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	021b      	lsls	r3, r3, #8
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	031b      	lsls	r3, r3, #12
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a12      	ldr	r2, [pc, #72]	; (8009c70 <TIM_OC4_SetConfig+0xa4>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d003      	beq.n	8009c34 <TIM_OC4_SetConfig+0x68>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a11      	ldr	r2, [pc, #68]	; (8009c74 <TIM_OC4_SetConfig+0xa8>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d109      	bne.n	8009c48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	019b      	lsls	r3, r3, #6
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	621a      	str	r2, [r3, #32]
}
 8009c62:	bf00      	nop
 8009c64:	371c      	adds	r7, #28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	40010000 	.word	0x40010000
 8009c74:	40010400 	.word	0x40010400

08009c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6a1b      	ldr	r3, [r3, #32]
 8009c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	f023 0201 	bic.w	r2, r3, #1
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	011b      	lsls	r3, r3, #4
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	f023 030a 	bic.w	r3, r3, #10
 8009cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cb6:	697a      	ldr	r2, [r7, #20]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	621a      	str	r2, [r3, #32]
}
 8009cca:	bf00      	nop
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b087      	sub	sp, #28
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	60f8      	str	r0, [r7, #12]
 8009cde:	60b9      	str	r1, [r7, #8]
 8009ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	f023 0210 	bic.w	r2, r3, #16
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	031b      	lsls	r3, r3, #12
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	011b      	lsls	r3, r3, #4
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	621a      	str	r2, [r3, #32]
}
 8009d2a:	bf00      	nop
 8009d2c:	371c      	adds	r7, #28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	f043 0307 	orr.w	r3, r3, #7
 8009d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	609a      	str	r2, [r3, #8]
}
 8009d60:	bf00      	nop
 8009d62:	3714      	adds	r7, #20
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
 8009d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	021a      	lsls	r2, r3, #8
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	431a      	orrs	r2, r3
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	609a      	str	r2, [r3, #8]
}
 8009da0:	bf00      	nop
 8009da2:	371c      	adds	r7, #28
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d101      	bne.n	8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e05a      	b.n	8009e7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a21      	ldr	r2, [pc, #132]	; (8009e88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d022      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e10:	d01d      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a1d      	ldr	r2, [pc, #116]	; (8009e8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d018      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a1b      	ldr	r2, [pc, #108]	; (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d013      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a1a      	ldr	r2, [pc, #104]	; (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d00e      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a18      	ldr	r2, [pc, #96]	; (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d009      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a17      	ldr	r2, [pc, #92]	; (8009e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d004      	beq.n	8009e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a15      	ldr	r2, [pc, #84]	; (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d10c      	bne.n	8009e68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	40010000 	.word	0x40010000
 8009e8c:	40000400 	.word	0x40000400
 8009e90:	40000800 	.word	0x40000800
 8009e94:	40000c00 	.word	0x40000c00
 8009e98:	40010400 	.word	0x40010400
 8009e9c:	40014000 	.word	0x40014000
 8009ea0:	40001800 	.word	0x40001800

08009ea4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d101      	bne.n	8009ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	e03d      	b.n	8009f3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e03f      	b.n	8009fda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d106      	bne.n	8009f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7fc faaa 	bl	80064c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2224      	movs	r2, #36	; 0x24
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68da      	ldr	r2, [r3, #12]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 ff49 	bl	800ae24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	691a      	ldr	r2, [r3, #16]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	695a      	ldr	r2, [r3, #20]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2220      	movs	r2, #32
 8009fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2220      	movs	r2, #32
 8009fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
	...

08009fe4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08c      	sub	sp, #48	; 0x30
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b20      	cmp	r3, #32
 8009ffc:	d165      	bne.n	800a0ca <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <HAL_UART_Transmit_DMA+0x26>
 800a004:	88fb      	ldrh	r3, [r7, #6]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d101      	bne.n	800a00e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e05e      	b.n	800a0cc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a014:	2b01      	cmp	r3, #1
 800a016:	d101      	bne.n	800a01c <HAL_UART_Transmit_DMA+0x38>
 800a018:	2302      	movs	r3, #2
 800a01a:	e057      	b.n	800a0cc <HAL_UART_Transmit_DMA+0xe8>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	88fa      	ldrh	r2, [r7, #6]
 800a02e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	88fa      	ldrh	r2, [r7, #6]
 800a034:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2221      	movs	r2, #33	; 0x21
 800a040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a048:	4a22      	ldr	r2, [pc, #136]	; (800a0d4 <HAL_UART_Transmit_DMA+0xf0>)
 800a04a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a050:	4a21      	ldr	r2, [pc, #132]	; (800a0d8 <HAL_UART_Transmit_DMA+0xf4>)
 800a052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a058:	4a20      	ldr	r2, [pc, #128]	; (800a0dc <HAL_UART_Transmit_DMA+0xf8>)
 800a05a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a060:	2200      	movs	r2, #0
 800a062:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a064:	f107 0308 	add.w	r3, r7, #8
 800a068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a070:	6819      	ldr	r1, [r3, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3304      	adds	r3, #4
 800a078:	461a      	mov	r2, r3
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	f7fd fa22 	bl	80074c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a088:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3314      	adds	r3, #20
 800a098:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	e853 3f00 	ldrex	r3, [r3]
 800a0a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3314      	adds	r3, #20
 800a0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0b2:	627a      	str	r2, [r7, #36]	; 0x24
 800a0b4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b6:	6a39      	ldr	r1, [r7, #32]
 800a0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ba:	e841 2300 	strex	r3, r2, [r1]
 800a0be:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d1e5      	bne.n	800a092 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e000      	b.n	800a0cc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a0ca:	2302      	movs	r3, #2
  }
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3730      	adds	r7, #48	; 0x30
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	0800a6c5 	.word	0x0800a6c5
 800a0d8:	0800a75f 	.word	0x0800a75f
 800a0dc:	0800a8d7 	.word	0x0800a8d7

0800a0e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	d11d      	bne.n	800a136 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <HAL_UART_Receive_DMA+0x26>
 800a100:	88fb      	ldrh	r3, [r7, #6]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e016      	b.n	800a138 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a110:	2b01      	cmp	r3, #1
 800a112:	d101      	bne.n	800a118 <HAL_UART_Receive_DMA+0x38>
 800a114:	2302      	movs	r3, #2
 800a116:	e00f      	b.n	800a138 <HAL_UART_Receive_DMA+0x58>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a126:	88fb      	ldrh	r3, [r7, #6]
 800a128:	461a      	mov	r2, r3
 800a12a:	68b9      	ldr	r1, [r7, #8]
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f000 fc1d 	bl	800a96c <UART_Start_Receive_DMA>
 800a132:	4603      	mov	r3, r0
 800a134:	e000      	b.n	800a138 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a136:	2302      	movs	r3, #2
  }
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b0ba      	sub	sp, #232	; 0xe8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a166:	2300      	movs	r3, #0
 800a168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a16c:	2300      	movs	r3, #0
 800a16e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a176:	f003 030f 	and.w	r3, r3, #15
 800a17a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a17e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10f      	bne.n	800a1a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a18a:	f003 0320 	and.w	r3, r3, #32
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d009      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x66>
 800a192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a196:	f003 0320 	and.w	r3, r3, #32
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fd85 	bl	800acae <UART_Receive_IT>
      return;
 800a1a4:	e256      	b.n	800a654 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a1a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 80de 	beq.w	800a36c <HAL_UART_IRQHandler+0x22c>
 800a1b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1b4:	f003 0301 	and.w	r3, r3, #1
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d106      	bne.n	800a1ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a1bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 80d1 	beq.w	800a36c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00b      	beq.n	800a1ee <HAL_UART_IRQHandler+0xae>
 800a1d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d005      	beq.n	800a1ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e6:	f043 0201 	orr.w	r2, r3, #1
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1f2:	f003 0304 	and.w	r3, r3, #4
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00b      	beq.n	800a212 <HAL_UART_IRQHandler+0xd2>
 800a1fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20a:	f043 0202 	orr.w	r2, r3, #2
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00b      	beq.n	800a236 <HAL_UART_IRQHandler+0xf6>
 800a21e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d005      	beq.n	800a236 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	f043 0204 	orr.w	r2, r3, #4
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a23a:	f003 0308 	and.w	r3, r3, #8
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d011      	beq.n	800a266 <HAL_UART_IRQHandler+0x126>
 800a242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a246:	f003 0320 	and.w	r3, r3, #32
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d105      	bne.n	800a25a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a24e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a25e:	f043 0208 	orr.w	r2, r3, #8
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 81ed 	beq.w	800a64a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a274:	f003 0320 	and.w	r3, r3, #32
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d008      	beq.n	800a28e <HAL_UART_IRQHandler+0x14e>
 800a27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a280:	f003 0320 	and.w	r3, r3, #32
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 fd10 	bl	800acae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	695b      	ldr	r3, [r3, #20]
 800a294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a298:	2b40      	cmp	r3, #64	; 0x40
 800a29a:	bf0c      	ite	eq
 800a29c:	2301      	moveq	r3, #1
 800a29e:	2300      	movne	r3, #0
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2aa:	f003 0308 	and.w	r3, r3, #8
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d103      	bne.n	800a2ba <HAL_UART_IRQHandler+0x17a>
 800a2b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d04f      	beq.n	800a35a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fc18 	bl	800aaf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	695b      	ldr	r3, [r3, #20]
 800a2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ca:	2b40      	cmp	r3, #64	; 0x40
 800a2cc:	d141      	bne.n	800a352 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	3314      	adds	r3, #20
 800a2d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a2e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3314      	adds	r3, #20
 800a2f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a2fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a2fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a30a:	e841 2300 	strex	r3, r2, [r1]
 800a30e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1d9      	bne.n	800a2ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d013      	beq.n	800a34a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a326:	4a7d      	ldr	r2, [pc, #500]	; (800a51c <HAL_UART_IRQHandler+0x3dc>)
 800a328:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	4618      	mov	r0, r3
 800a330:	f7fd f990 	bl	8007654 <HAL_DMA_Abort_IT>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d016      	beq.n	800a368 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a344:	4610      	mov	r0, r2
 800a346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a348:	e00e      	b.n	800a368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f9a4 	bl	800a698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a350:	e00a      	b.n	800a368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f9a0 	bl	800a698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a358:	e006      	b.n	800a368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f99c 	bl	800a698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a366:	e170      	b.n	800a64a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a368:	bf00      	nop
    return;
 800a36a:	e16e      	b.n	800a64a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a370:	2b01      	cmp	r3, #1
 800a372:	f040 814a 	bne.w	800a60a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a37a:	f003 0310 	and.w	r3, r3, #16
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 8143 	beq.w	800a60a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a388:	f003 0310 	and.w	r3, r3, #16
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f000 813c 	beq.w	800a60a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a392:	2300      	movs	r3, #0
 800a394:	60bb      	str	r3, [r7, #8]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	60bb      	str	r3, [r7, #8]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	60bb      	str	r3, [r7, #8]
 800a3a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b2:	2b40      	cmp	r3, #64	; 0x40
 800a3b4:	f040 80b4 	bne.w	800a520 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 8140 	beq.w	800a64e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	f080 8139 	bcs.w	800a64e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ee:	f000 8088 	beq.w	800a502 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	330c      	adds	r3, #12
 800a3f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a400:	e853 3f00 	ldrex	r3, [r3]
 800a404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a40c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	330c      	adds	r3, #12
 800a41a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a41e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a426:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a42a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1d9      	bne.n	800a3f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3314      	adds	r3, #20
 800a444:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a448:	e853 3f00 	ldrex	r3, [r3]
 800a44c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a44e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a450:	f023 0301 	bic.w	r3, r3, #1
 800a454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3314      	adds	r3, #20
 800a45e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a462:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a466:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a468:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a46a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e1      	bne.n	800a43e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3314      	adds	r3, #20
 800a480:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a484:	e853 3f00 	ldrex	r3, [r3]
 800a488:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a48a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a48c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3314      	adds	r3, #20
 800a49a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a49e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a4a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a4a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a4a6:	e841 2300 	strex	r3, r2, [r1]
 800a4aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a4ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1e3      	bne.n	800a47a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	330c      	adds	r3, #12
 800a4c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a4d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4d2:	f023 0310 	bic.w	r3, r3, #16
 800a4d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	330c      	adds	r3, #12
 800a4e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a4e4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a4e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4ec:	e841 2300 	strex	r3, r2, [r1]
 800a4f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e3      	bne.n	800a4c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fd f839 	bl	8007574 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	b29b      	uxth	r3, r3
 800a510:	4619      	mov	r1, r3
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f8ca 	bl	800a6ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a518:	e099      	b.n	800a64e <HAL_UART_IRQHandler+0x50e>
 800a51a:	bf00      	nop
 800a51c:	0800abb7 	.word	0x0800abb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a528:	b29b      	uxth	r3, r3
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a534:	b29b      	uxth	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 808b 	beq.w	800a652 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a53c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 8086 	beq.w	800a652 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	330c      	adds	r3, #12
 800a54c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	e853 3f00 	ldrex	r3, [r3]
 800a554:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a55c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	330c      	adds	r3, #12
 800a566:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a56a:	647a      	str	r2, [r7, #68]	; 0x44
 800a56c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a572:	e841 2300 	strex	r3, r2, [r1]
 800a576:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e3      	bne.n	800a546 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3314      	adds	r3, #20
 800a584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	e853 3f00 	ldrex	r3, [r3]
 800a58c:	623b      	str	r3, [r7, #32]
   return(result);
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	f023 0301 	bic.w	r3, r3, #1
 800a594:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3314      	adds	r3, #20
 800a59e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a5a2:	633a      	str	r2, [r7, #48]	; 0x30
 800a5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5aa:	e841 2300 	strex	r3, r2, [r1]
 800a5ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1e3      	bne.n	800a57e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	330c      	adds	r3, #12
 800a5ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	e853 3f00 	ldrex	r3, [r3]
 800a5d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f023 0310 	bic.w	r3, r3, #16
 800a5da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	330c      	adds	r3, #12
 800a5e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a5e8:	61fa      	str	r2, [r7, #28]
 800a5ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	69b9      	ldr	r1, [r7, #24]
 800a5ee:	69fa      	ldr	r2, [r7, #28]
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e3      	bne.n	800a5c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f852 	bl	800a6ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a608:	e023      	b.n	800a652 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a612:	2b00      	cmp	r3, #0
 800a614:	d009      	beq.n	800a62a <HAL_UART_IRQHandler+0x4ea>
 800a616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a61a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d003      	beq.n	800a62a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fadb 	bl	800abde <UART_Transmit_IT>
    return;
 800a628:	e014      	b.n	800a654 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a62a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00e      	beq.n	800a654 <HAL_UART_IRQHandler+0x514>
 800a636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d008      	beq.n	800a654 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fb1b 	bl	800ac7e <UART_EndTransmit_IT>
    return;
 800a648:	e004      	b.n	800a654 <HAL_UART_IRQHandler+0x514>
    return;
 800a64a:	bf00      	nop
 800a64c:	e002      	b.n	800a654 <HAL_UART_IRQHandler+0x514>
      return;
 800a64e:	bf00      	nop
 800a650:	e000      	b.n	800a654 <HAL_UART_IRQHandler+0x514>
      return;
 800a652:	bf00      	nop
  }
}
 800a654:	37e8      	adds	r7, #232	; 0xe8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop

0800a65c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a68c:	bf00      	nop
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b090      	sub	sp, #64	; 0x40
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d137      	bne.n	800a750 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	3314      	adds	r3, #20
 800a6ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	623b      	str	r3, [r7, #32]
   return(result);
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3314      	adds	r3, #20
 800a704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a706:	633a      	str	r2, [r7, #48]	; 0x30
 800a708:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a70e:	e841 2300 	strex	r3, r2, [r1]
 800a712:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e5      	bne.n	800a6e6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	330c      	adds	r3, #12
 800a720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	e853 3f00 	ldrex	r3, [r3]
 800a728:	60fb      	str	r3, [r7, #12]
   return(result);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a730:	637b      	str	r3, [r7, #52]	; 0x34
 800a732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	330c      	adds	r3, #12
 800a738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a73a:	61fa      	str	r2, [r7, #28]
 800a73c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73e:	69b9      	ldr	r1, [r7, #24]
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	617b      	str	r3, [r7, #20]
   return(result);
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1e5      	bne.n	800a71a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a74e:	e002      	b.n	800a756 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a750:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a752:	f7ff ff83 	bl	800a65c <HAL_UART_TxCpltCallback>
}
 800a756:	bf00      	nop
 800a758:	3740      	adds	r7, #64	; 0x40
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7ff ff7f 	bl	800a670 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b09c      	sub	sp, #112	; 0x70
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a786:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a792:	2b00      	cmp	r3, #0
 800a794:	d172      	bne.n	800a87c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a798:	2200      	movs	r2, #0
 800a79a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a79c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	330c      	adds	r3, #12
 800a7a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7a6:	e853 3f00 	ldrex	r3, [r3]
 800a7aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a7ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	330c      	adds	r3, #12
 800a7ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7bc:	65ba      	str	r2, [r7, #88]	; 0x58
 800a7be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7c4:	e841 2300 	strex	r3, r2, [r1]
 800a7c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a7ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e5      	bne.n	800a79c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3314      	adds	r3, #20
 800a7d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7da:	e853 3f00 	ldrex	r3, [r3]
 800a7de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e2:	f023 0301 	bic.w	r3, r3, #1
 800a7e6:	667b      	str	r3, [r7, #100]	; 0x64
 800a7e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3314      	adds	r3, #20
 800a7ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a7f0:	647a      	str	r2, [r7, #68]	; 0x44
 800a7f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7f8:	e841 2300 	strex	r3, r2, [r1]
 800a7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1e5      	bne.n	800a7d0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3314      	adds	r3, #20
 800a80a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80e:	e853 3f00 	ldrex	r3, [r3]
 800a812:	623b      	str	r3, [r7, #32]
   return(result);
 800a814:	6a3b      	ldr	r3, [r7, #32]
 800a816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a81a:	663b      	str	r3, [r7, #96]	; 0x60
 800a81c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3314      	adds	r3, #20
 800a822:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a824:	633a      	str	r2, [r7, #48]	; 0x30
 800a826:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a82c:	e841 2300 	strex	r3, r2, [r1]
 800a830:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1e5      	bne.n	800a804 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a83a:	2220      	movs	r2, #32
 800a83c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a844:	2b01      	cmp	r3, #1
 800a846:	d119      	bne.n	800a87c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	330c      	adds	r3, #12
 800a84e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	e853 3f00 	ldrex	r3, [r3]
 800a856:	60fb      	str	r3, [r7, #12]
   return(result);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f023 0310 	bic.w	r3, r3, #16
 800a85e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	330c      	adds	r3, #12
 800a866:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a868:	61fa      	str	r2, [r7, #28]
 800a86a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86c:	69b9      	ldr	r1, [r7, #24]
 800a86e:	69fa      	ldr	r2, [r7, #28]
 800a870:	e841 2300 	strex	r3, r2, [r1]
 800a874:	617b      	str	r3, [r7, #20]
   return(result);
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1e5      	bne.n	800a848 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a87c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a880:	2b01      	cmp	r3, #1
 800a882:	d106      	bne.n	800a892 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a886:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a888:	4619      	mov	r1, r3
 800a88a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a88c:	f7ff ff0e 	bl	800a6ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a890:	e002      	b.n	800a898 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a892:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a894:	f7f8 fd48 	bl	8003328 <HAL_UART_RxCpltCallback>
}
 800a898:	bf00      	nop
 800a89a:	3770      	adds	r7, #112	; 0x70
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d108      	bne.n	800a8c8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8ba:	085b      	lsrs	r3, r3, #1
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	4619      	mov	r1, r3
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f7ff fef3 	bl	800a6ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8c6:	e002      	b.n	800a8ce <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7ff fedb 	bl	800a684 <HAL_UART_RxHalfCpltCallback>
}
 800a8ce:	bf00      	nop
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8f2:	2b80      	cmp	r3, #128	; 0x80
 800a8f4:	bf0c      	ite	eq
 800a8f6:	2301      	moveq	r3, #1
 800a8f8:	2300      	movne	r3, #0
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b21      	cmp	r3, #33	; 0x21
 800a908:	d108      	bne.n	800a91c <UART_DMAError+0x46>
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d005      	beq.n	800a91c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2200      	movs	r2, #0
 800a914:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a916:	68b8      	ldr	r0, [r7, #8]
 800a918:	f000 f8c2 	bl	800aaa0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a926:	2b40      	cmp	r3, #64	; 0x40
 800a928:	bf0c      	ite	eq
 800a92a:	2301      	moveq	r3, #1
 800a92c:	2300      	movne	r3, #0
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b22      	cmp	r3, #34	; 0x22
 800a93c:	d108      	bne.n	800a950 <UART_DMAError+0x7a>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d005      	beq.n	800a950 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2200      	movs	r2, #0
 800a948:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a94a:	68b8      	ldr	r0, [r7, #8]
 800a94c:	f000 f8d0 	bl	800aaf0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a954:	f043 0210 	orr.w	r2, r3, #16
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a95c:	68b8      	ldr	r0, [r7, #8]
 800a95e:	f7ff fe9b 	bl	800a698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
	...

0800a96c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b098      	sub	sp, #96	; 0x60
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	4613      	mov	r3, r2
 800a978:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	88fa      	ldrh	r2, [r7, #6]
 800a984:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2222      	movs	r2, #34	; 0x22
 800a990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a998:	4a3e      	ldr	r2, [pc, #248]	; (800aa94 <UART_Start_Receive_DMA+0x128>)
 800a99a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a0:	4a3d      	ldr	r2, [pc, #244]	; (800aa98 <UART_Start_Receive_DMA+0x12c>)
 800a9a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a8:	4a3c      	ldr	r2, [pc, #240]	; (800aa9c <UART_Start_Receive_DMA+0x130>)
 800a9aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a9b4:	f107 0308 	add.w	r3, r7, #8
 800a9b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	88fb      	ldrh	r3, [r7, #6]
 800a9cc:	f7fc fd7a 	bl	80074c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	613b      	str	r3, [r7, #16]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	613b      	str	r3, [r7, #16]
 800a9e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	330c      	adds	r3, #12
 800a9f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9f8:	e853 3f00 	ldrex	r3, [r3]
 800a9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa04:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	330c      	adds	r3, #12
 800aa0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa0e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800aa10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aa14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa16:	e841 2300 	strex	r3, r2, [r1]
 800aa1a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800aa1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1e5      	bne.n	800a9ee <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3314      	adds	r3, #20
 800aa28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2c:	e853 3f00 	ldrex	r3, [r3]
 800aa30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	f043 0301 	orr.w	r3, r3, #1
 800aa38:	657b      	str	r3, [r7, #84]	; 0x54
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	3314      	adds	r3, #20
 800aa40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa42:	63ba      	str	r2, [r7, #56]	; 0x38
 800aa44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa4a:	e841 2300 	strex	r3, r2, [r1]
 800aa4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1e5      	bne.n	800aa22 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3314      	adds	r3, #20
 800aa5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	e853 3f00 	ldrex	r3, [r3]
 800aa64:	617b      	str	r3, [r7, #20]
   return(result);
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa6c:	653b      	str	r3, [r7, #80]	; 0x50
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3314      	adds	r3, #20
 800aa74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa76:	627a      	str	r2, [r7, #36]	; 0x24
 800aa78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7a:	6a39      	ldr	r1, [r7, #32]
 800aa7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa7e:	e841 2300 	strex	r3, r2, [r1]
 800aa82:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1e5      	bne.n	800aa56 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3760      	adds	r7, #96	; 0x60
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	0800a77b 	.word	0x0800a77b
 800aa98:	0800a8a1 	.word	0x0800a8a1
 800aa9c:	0800a8d7 	.word	0x0800a8d7

0800aaa0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b089      	sub	sp, #36	; 0x24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	330c      	adds	r3, #12
 800aaae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	e853 3f00 	ldrex	r3, [r3]
 800aab6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aabe:	61fb      	str	r3, [r7, #28]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	330c      	adds	r3, #12
 800aac6:	69fa      	ldr	r2, [r7, #28]
 800aac8:	61ba      	str	r2, [r7, #24]
 800aaca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	6979      	ldr	r1, [r7, #20]
 800aace:	69ba      	ldr	r2, [r7, #24]
 800aad0:	e841 2300 	strex	r3, r2, [r1]
 800aad4:	613b      	str	r3, [r7, #16]
   return(result);
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1e5      	bne.n	800aaa8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2220      	movs	r2, #32
 800aae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800aae4:	bf00      	nop
 800aae6:	3724      	adds	r7, #36	; 0x24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b095      	sub	sp, #84	; 0x54
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	330c      	adds	r3, #12
 800aafe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab02:	e853 3f00 	ldrex	r3, [r3]
 800ab06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	330c      	adds	r3, #12
 800ab16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab18:	643a      	str	r2, [r7, #64]	; 0x40
 800ab1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab20:	e841 2300 	strex	r3, r2, [r1]
 800ab24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1e5      	bne.n	800aaf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3314      	adds	r3, #20
 800ab32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	e853 3f00 	ldrex	r3, [r3]
 800ab3a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	f023 0301 	bic.w	r3, r3, #1
 800ab42:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3314      	adds	r3, #20
 800ab4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab54:	e841 2300 	strex	r3, r2, [r1]
 800ab58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1e5      	bne.n	800ab2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d119      	bne.n	800ab9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	330c      	adds	r3, #12
 800ab6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	e853 3f00 	ldrex	r3, [r3]
 800ab76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f023 0310 	bic.w	r3, r3, #16
 800ab7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	330c      	adds	r3, #12
 800ab86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab88:	61ba      	str	r2, [r7, #24]
 800ab8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8c:	6979      	ldr	r1, [r7, #20]
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	e841 2300 	strex	r3, r2, [r1]
 800ab94:	613b      	str	r3, [r7, #16]
   return(result);
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1e5      	bne.n	800ab68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800abaa:	bf00      	nop
 800abac:	3754      	adds	r7, #84	; 0x54
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b084      	sub	sp, #16
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f7ff fd61 	bl	800a698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abd6:	bf00      	nop
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800abde:	b480      	push	{r7}
 800abe0:	b085      	sub	sp, #20
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b21      	cmp	r3, #33	; 0x21
 800abf0:	d13e      	bne.n	800ac70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abfa:	d114      	bne.n	800ac26 <UART_Transmit_IT+0x48>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d110      	bne.n	800ac26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a1b      	ldr	r3, [r3, #32]
 800ac1e:	1c9a      	adds	r2, r3, #2
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	621a      	str	r2, [r3, #32]
 800ac24:	e008      	b.n	800ac38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	1c59      	adds	r1, r3, #1
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	6211      	str	r1, [r2, #32]
 800ac30:	781a      	ldrb	r2, [r3, #0]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	4619      	mov	r1, r3
 800ac46:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10f      	bne.n	800ac6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	68da      	ldr	r2, [r3, #12]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68da      	ldr	r2, [r3, #12]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	e000      	b.n	800ac72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ac70:	2302      	movs	r3, #2
  }
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b082      	sub	sp, #8
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68da      	ldr	r2, [r3, #12]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2220      	movs	r2, #32
 800ac9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7ff fcdc 	bl	800a65c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b08c      	sub	sp, #48	; 0x30
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b22      	cmp	r3, #34	; 0x22
 800acc0:	f040 80ab 	bne.w	800ae1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800accc:	d117      	bne.n	800acfe <UART_Receive_IT+0x50>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d113      	bne.n	800acfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800acd6:	2300      	movs	r3, #0
 800acd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acec:	b29a      	uxth	r2, r3
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf6:	1c9a      	adds	r2, r3, #2
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	629a      	str	r2, [r3, #40]	; 0x28
 800acfc:	e026      	b.n	800ad4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ad04:	2300      	movs	r3, #0
 800ad06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad10:	d007      	beq.n	800ad22 <UART_Receive_IT+0x74>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10a      	bne.n	800ad30 <UART_Receive_IT+0x82>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d106      	bne.n	800ad30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	701a      	strb	r2, [r3, #0]
 800ad2e:	e008      	b.n	800ad42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad46:	1c5a      	adds	r2, r3, #1
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	3b01      	subs	r3, #1
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	4619      	mov	r1, r3
 800ad5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d15a      	bne.n	800ae16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68da      	ldr	r2, [r3, #12]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f022 0220 	bic.w	r2, r2, #32
 800ad6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	68da      	ldr	r2, [r3, #12]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	695a      	ldr	r2, [r3, #20]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f022 0201 	bic.w	r2, r2, #1
 800ad8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2220      	movs	r2, #32
 800ad94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d135      	bne.n	800ae0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	330c      	adds	r3, #12
 800adac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	e853 3f00 	ldrex	r3, [r3]
 800adb4:	613b      	str	r3, [r7, #16]
   return(result);
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f023 0310 	bic.w	r3, r3, #16
 800adbc:	627b      	str	r3, [r7, #36]	; 0x24
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	330c      	adds	r3, #12
 800adc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adc6:	623a      	str	r2, [r7, #32]
 800adc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adca:	69f9      	ldr	r1, [r7, #28]
 800adcc:	6a3a      	ldr	r2, [r7, #32]
 800adce:	e841 2300 	strex	r3, r2, [r1]
 800add2:	61bb      	str	r3, [r7, #24]
   return(result);
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1e5      	bne.n	800ada6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0310 	and.w	r3, r3, #16
 800ade4:	2b10      	cmp	r3, #16
 800ade6:	d10a      	bne.n	800adfe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ade8:	2300      	movs	r3, #0
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	60fb      	str	r3, [r7, #12]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	60fb      	str	r3, [r7, #12]
 800adfc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7ff fc51 	bl	800a6ac <HAL_UARTEx_RxEventCallback>
 800ae0a:	e002      	b.n	800ae12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7f8 fa8b 	bl	8003328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	e002      	b.n	800ae1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	e000      	b.n	800ae1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ae1a:	2302      	movs	r3, #2
  }
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3730      	adds	r7, #48	; 0x30
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae28:	b09f      	sub	sp, #124	; 0x7c
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae3a:	68d9      	ldr	r1, [r3, #12]
 800ae3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	ea40 0301 	orr.w	r3, r0, r1
 800ae44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae48:	689a      	ldr	r2, [r3, #8]
 800ae4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	431a      	orrs	r2, r3
 800ae56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae58:	69db      	ldr	r3, [r3, #28]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ae5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ae68:	f021 010c 	bic.w	r1, r1, #12
 800ae6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae72:	430b      	orrs	r3, r1
 800ae74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ae80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae82:	6999      	ldr	r1, [r3, #24]
 800ae84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	ea40 0301 	orr.w	r3, r0, r1
 800ae8c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ae8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	4bc5      	ldr	r3, [pc, #788]	; (800b1a8 <UART_SetConfig+0x384>)
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d004      	beq.n	800aea2 <UART_SetConfig+0x7e>
 800ae98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	4bc3      	ldr	r3, [pc, #780]	; (800b1ac <UART_SetConfig+0x388>)
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d103      	bne.n	800aeaa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aea2:	f7fd fcab 	bl	80087fc <HAL_RCC_GetPCLK2Freq>
 800aea6:	6778      	str	r0, [r7, #116]	; 0x74
 800aea8:	e002      	b.n	800aeb0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aeaa:	f7fd fc93 	bl	80087d4 <HAL_RCC_GetPCLK1Freq>
 800aeae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeb2:	69db      	ldr	r3, [r3, #28]
 800aeb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeb8:	f040 80b6 	bne.w	800b028 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aebe:	461c      	mov	r4, r3
 800aec0:	f04f 0500 	mov.w	r5, #0
 800aec4:	4622      	mov	r2, r4
 800aec6:	462b      	mov	r3, r5
 800aec8:	1891      	adds	r1, r2, r2
 800aeca:	6439      	str	r1, [r7, #64]	; 0x40
 800aecc:	415b      	adcs	r3, r3
 800aece:	647b      	str	r3, [r7, #68]	; 0x44
 800aed0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aed4:	1912      	adds	r2, r2, r4
 800aed6:	eb45 0303 	adc.w	r3, r5, r3
 800aeda:	f04f 0000 	mov.w	r0, #0
 800aede:	f04f 0100 	mov.w	r1, #0
 800aee2:	00d9      	lsls	r1, r3, #3
 800aee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aee8:	00d0      	lsls	r0, r2, #3
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	1911      	adds	r1, r2, r4
 800aef0:	6639      	str	r1, [r7, #96]	; 0x60
 800aef2:	416b      	adcs	r3, r5
 800aef4:	667b      	str	r3, [r7, #100]	; 0x64
 800aef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	461a      	mov	r2, r3
 800aefc:	f04f 0300 	mov.w	r3, #0
 800af00:	1891      	adds	r1, r2, r2
 800af02:	63b9      	str	r1, [r7, #56]	; 0x38
 800af04:	415b      	adcs	r3, r3
 800af06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800af0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800af10:	f7f5 fe28 	bl	8000b64 <__aeabi_uldivmod>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	4ba5      	ldr	r3, [pc, #660]	; (800b1b0 <UART_SetConfig+0x38c>)
 800af1a:	fba3 2302 	umull	r2, r3, r3, r2
 800af1e:	095b      	lsrs	r3, r3, #5
 800af20:	011e      	lsls	r6, r3, #4
 800af22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af24:	461c      	mov	r4, r3
 800af26:	f04f 0500 	mov.w	r5, #0
 800af2a:	4622      	mov	r2, r4
 800af2c:	462b      	mov	r3, r5
 800af2e:	1891      	adds	r1, r2, r2
 800af30:	6339      	str	r1, [r7, #48]	; 0x30
 800af32:	415b      	adcs	r3, r3
 800af34:	637b      	str	r3, [r7, #52]	; 0x34
 800af36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800af3a:	1912      	adds	r2, r2, r4
 800af3c:	eb45 0303 	adc.w	r3, r5, r3
 800af40:	f04f 0000 	mov.w	r0, #0
 800af44:	f04f 0100 	mov.w	r1, #0
 800af48:	00d9      	lsls	r1, r3, #3
 800af4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af4e:	00d0      	lsls	r0, r2, #3
 800af50:	4602      	mov	r2, r0
 800af52:	460b      	mov	r3, r1
 800af54:	1911      	adds	r1, r2, r4
 800af56:	65b9      	str	r1, [r7, #88]	; 0x58
 800af58:	416b      	adcs	r3, r5
 800af5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	461a      	mov	r2, r3
 800af62:	f04f 0300 	mov.w	r3, #0
 800af66:	1891      	adds	r1, r2, r2
 800af68:	62b9      	str	r1, [r7, #40]	; 0x28
 800af6a:	415b      	adcs	r3, r3
 800af6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800af72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800af76:	f7f5 fdf5 	bl	8000b64 <__aeabi_uldivmod>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4b8c      	ldr	r3, [pc, #560]	; (800b1b0 <UART_SetConfig+0x38c>)
 800af80:	fba3 1302 	umull	r1, r3, r3, r2
 800af84:	095b      	lsrs	r3, r3, #5
 800af86:	2164      	movs	r1, #100	; 0x64
 800af88:	fb01 f303 	mul.w	r3, r1, r3
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	00db      	lsls	r3, r3, #3
 800af90:	3332      	adds	r3, #50	; 0x32
 800af92:	4a87      	ldr	r2, [pc, #540]	; (800b1b0 <UART_SetConfig+0x38c>)
 800af94:	fba2 2303 	umull	r2, r3, r2, r3
 800af98:	095b      	lsrs	r3, r3, #5
 800af9a:	005b      	lsls	r3, r3, #1
 800af9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800afa0:	441e      	add	r6, r3
 800afa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afa4:	4618      	mov	r0, r3
 800afa6:	f04f 0100 	mov.w	r1, #0
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	1894      	adds	r4, r2, r2
 800afb0:	623c      	str	r4, [r7, #32]
 800afb2:	415b      	adcs	r3, r3
 800afb4:	627b      	str	r3, [r7, #36]	; 0x24
 800afb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800afba:	1812      	adds	r2, r2, r0
 800afbc:	eb41 0303 	adc.w	r3, r1, r3
 800afc0:	f04f 0400 	mov.w	r4, #0
 800afc4:	f04f 0500 	mov.w	r5, #0
 800afc8:	00dd      	lsls	r5, r3, #3
 800afca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800afce:	00d4      	lsls	r4, r2, #3
 800afd0:	4622      	mov	r2, r4
 800afd2:	462b      	mov	r3, r5
 800afd4:	1814      	adds	r4, r2, r0
 800afd6:	653c      	str	r4, [r7, #80]	; 0x50
 800afd8:	414b      	adcs	r3, r1
 800afda:	657b      	str	r3, [r7, #84]	; 0x54
 800afdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	461a      	mov	r2, r3
 800afe2:	f04f 0300 	mov.w	r3, #0
 800afe6:	1891      	adds	r1, r2, r2
 800afe8:	61b9      	str	r1, [r7, #24]
 800afea:	415b      	adcs	r3, r3
 800afec:	61fb      	str	r3, [r7, #28]
 800afee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aff2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800aff6:	f7f5 fdb5 	bl	8000b64 <__aeabi_uldivmod>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	4b6c      	ldr	r3, [pc, #432]	; (800b1b0 <UART_SetConfig+0x38c>)
 800b000:	fba3 1302 	umull	r1, r3, r3, r2
 800b004:	095b      	lsrs	r3, r3, #5
 800b006:	2164      	movs	r1, #100	; 0x64
 800b008:	fb01 f303 	mul.w	r3, r1, r3
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	00db      	lsls	r3, r3, #3
 800b010:	3332      	adds	r3, #50	; 0x32
 800b012:	4a67      	ldr	r2, [pc, #412]	; (800b1b0 <UART_SetConfig+0x38c>)
 800b014:	fba2 2303 	umull	r2, r3, r2, r3
 800b018:	095b      	lsrs	r3, r3, #5
 800b01a:	f003 0207 	and.w	r2, r3, #7
 800b01e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4432      	add	r2, r6
 800b024:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b026:	e0b9      	b.n	800b19c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b02a:	461c      	mov	r4, r3
 800b02c:	f04f 0500 	mov.w	r5, #0
 800b030:	4622      	mov	r2, r4
 800b032:	462b      	mov	r3, r5
 800b034:	1891      	adds	r1, r2, r2
 800b036:	6139      	str	r1, [r7, #16]
 800b038:	415b      	adcs	r3, r3
 800b03a:	617b      	str	r3, [r7, #20]
 800b03c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b040:	1912      	adds	r2, r2, r4
 800b042:	eb45 0303 	adc.w	r3, r5, r3
 800b046:	f04f 0000 	mov.w	r0, #0
 800b04a:	f04f 0100 	mov.w	r1, #0
 800b04e:	00d9      	lsls	r1, r3, #3
 800b050:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b054:	00d0      	lsls	r0, r2, #3
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	eb12 0804 	adds.w	r8, r2, r4
 800b05e:	eb43 0905 	adc.w	r9, r3, r5
 800b062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	4618      	mov	r0, r3
 800b068:	f04f 0100 	mov.w	r1, #0
 800b06c:	f04f 0200 	mov.w	r2, #0
 800b070:	f04f 0300 	mov.w	r3, #0
 800b074:	008b      	lsls	r3, r1, #2
 800b076:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b07a:	0082      	lsls	r2, r0, #2
 800b07c:	4640      	mov	r0, r8
 800b07e:	4649      	mov	r1, r9
 800b080:	f7f5 fd70 	bl	8000b64 <__aeabi_uldivmod>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4b49      	ldr	r3, [pc, #292]	; (800b1b0 <UART_SetConfig+0x38c>)
 800b08a:	fba3 2302 	umull	r2, r3, r3, r2
 800b08e:	095b      	lsrs	r3, r3, #5
 800b090:	011e      	lsls	r6, r3, #4
 800b092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b094:	4618      	mov	r0, r3
 800b096:	f04f 0100 	mov.w	r1, #0
 800b09a:	4602      	mov	r2, r0
 800b09c:	460b      	mov	r3, r1
 800b09e:	1894      	adds	r4, r2, r2
 800b0a0:	60bc      	str	r4, [r7, #8]
 800b0a2:	415b      	adcs	r3, r3
 800b0a4:	60fb      	str	r3, [r7, #12]
 800b0a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b0aa:	1812      	adds	r2, r2, r0
 800b0ac:	eb41 0303 	adc.w	r3, r1, r3
 800b0b0:	f04f 0400 	mov.w	r4, #0
 800b0b4:	f04f 0500 	mov.w	r5, #0
 800b0b8:	00dd      	lsls	r5, r3, #3
 800b0ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b0be:	00d4      	lsls	r4, r2, #3
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	462b      	mov	r3, r5
 800b0c4:	1814      	adds	r4, r2, r0
 800b0c6:	64bc      	str	r4, [r7, #72]	; 0x48
 800b0c8:	414b      	adcs	r3, r1
 800b0ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f04f 0100 	mov.w	r1, #0
 800b0d6:	f04f 0200 	mov.w	r2, #0
 800b0da:	f04f 0300 	mov.w	r3, #0
 800b0de:	008b      	lsls	r3, r1, #2
 800b0e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b0e4:	0082      	lsls	r2, r0, #2
 800b0e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b0ea:	f7f5 fd3b 	bl	8000b64 <__aeabi_uldivmod>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4b2f      	ldr	r3, [pc, #188]	; (800b1b0 <UART_SetConfig+0x38c>)
 800b0f4:	fba3 1302 	umull	r1, r3, r3, r2
 800b0f8:	095b      	lsrs	r3, r3, #5
 800b0fa:	2164      	movs	r1, #100	; 0x64
 800b0fc:	fb01 f303 	mul.w	r3, r1, r3
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	3332      	adds	r3, #50	; 0x32
 800b106:	4a2a      	ldr	r2, [pc, #168]	; (800b1b0 <UART_SetConfig+0x38c>)
 800b108:	fba2 2303 	umull	r2, r3, r2, r3
 800b10c:	095b      	lsrs	r3, r3, #5
 800b10e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b112:	441e      	add	r6, r3
 800b114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b116:	4618      	mov	r0, r3
 800b118:	f04f 0100 	mov.w	r1, #0
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	1894      	adds	r4, r2, r2
 800b122:	603c      	str	r4, [r7, #0]
 800b124:	415b      	adcs	r3, r3
 800b126:	607b      	str	r3, [r7, #4]
 800b128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b12c:	1812      	adds	r2, r2, r0
 800b12e:	eb41 0303 	adc.w	r3, r1, r3
 800b132:	f04f 0400 	mov.w	r4, #0
 800b136:	f04f 0500 	mov.w	r5, #0
 800b13a:	00dd      	lsls	r5, r3, #3
 800b13c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b140:	00d4      	lsls	r4, r2, #3
 800b142:	4622      	mov	r2, r4
 800b144:	462b      	mov	r3, r5
 800b146:	eb12 0a00 	adds.w	sl, r2, r0
 800b14a:	eb43 0b01 	adc.w	fp, r3, r1
 800b14e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	4618      	mov	r0, r3
 800b154:	f04f 0100 	mov.w	r1, #0
 800b158:	f04f 0200 	mov.w	r2, #0
 800b15c:	f04f 0300 	mov.w	r3, #0
 800b160:	008b      	lsls	r3, r1, #2
 800b162:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b166:	0082      	lsls	r2, r0, #2
 800b168:	4650      	mov	r0, sl
 800b16a:	4659      	mov	r1, fp
 800b16c:	f7f5 fcfa 	bl	8000b64 <__aeabi_uldivmod>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	4b0e      	ldr	r3, [pc, #56]	; (800b1b0 <UART_SetConfig+0x38c>)
 800b176:	fba3 1302 	umull	r1, r3, r3, r2
 800b17a:	095b      	lsrs	r3, r3, #5
 800b17c:	2164      	movs	r1, #100	; 0x64
 800b17e:	fb01 f303 	mul.w	r3, r1, r3
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	011b      	lsls	r3, r3, #4
 800b186:	3332      	adds	r3, #50	; 0x32
 800b188:	4a09      	ldr	r2, [pc, #36]	; (800b1b0 <UART_SetConfig+0x38c>)
 800b18a:	fba2 2303 	umull	r2, r3, r2, r3
 800b18e:	095b      	lsrs	r3, r3, #5
 800b190:	f003 020f 	and.w	r2, r3, #15
 800b194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4432      	add	r2, r6
 800b19a:	609a      	str	r2, [r3, #8]
}
 800b19c:	bf00      	nop
 800b19e:	377c      	adds	r7, #124	; 0x7c
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a6:	bf00      	nop
 800b1a8:	40011000 	.word	0x40011000
 800b1ac:	40011400 	.word	0x40011400
 800b1b0:	51eb851f 	.word	0x51eb851f

0800b1b4 <cosf>:
 800b1b4:	ee10 3a10 	vmov	r3, s0
 800b1b8:	b507      	push	{r0, r1, r2, lr}
 800b1ba:	4a1c      	ldr	r2, [pc, #112]	; (800b22c <cosf+0x78>)
 800b1bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	dc04      	bgt.n	800b1ce <cosf+0x1a>
 800b1c4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800b230 <cosf+0x7c>
 800b1c8:	f000 fbbc 	bl	800b944 <__kernel_cosf>
 800b1cc:	e004      	b.n	800b1d8 <cosf+0x24>
 800b1ce:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b1d2:	db04      	blt.n	800b1de <cosf+0x2a>
 800b1d4:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b1d8:	b003      	add	sp, #12
 800b1da:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1de:	4668      	mov	r0, sp
 800b1e0:	f000 fa70 	bl	800b6c4 <__ieee754_rem_pio2f>
 800b1e4:	f000 0003 	and.w	r0, r0, #3
 800b1e8:	2801      	cmp	r0, #1
 800b1ea:	d007      	beq.n	800b1fc <cosf+0x48>
 800b1ec:	2802      	cmp	r0, #2
 800b1ee:	d00e      	beq.n	800b20e <cosf+0x5a>
 800b1f0:	b9a0      	cbnz	r0, 800b21c <cosf+0x68>
 800b1f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1f6:	ed9d 0a00 	vldr	s0, [sp]
 800b1fa:	e7e5      	b.n	800b1c8 <cosf+0x14>
 800b1fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800b200:	ed9d 0a00 	vldr	s0, [sp]
 800b204:	f000 fe88 	bl	800bf18 <__kernel_sinf>
 800b208:	eeb1 0a40 	vneg.f32	s0, s0
 800b20c:	e7e4      	b.n	800b1d8 <cosf+0x24>
 800b20e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b212:	ed9d 0a00 	vldr	s0, [sp]
 800b216:	f000 fb95 	bl	800b944 <__kernel_cosf>
 800b21a:	e7f5      	b.n	800b208 <cosf+0x54>
 800b21c:	eddd 0a01 	vldr	s1, [sp, #4]
 800b220:	ed9d 0a00 	vldr	s0, [sp]
 800b224:	2001      	movs	r0, #1
 800b226:	f000 fe77 	bl	800bf18 <__kernel_sinf>
 800b22a:	e7d5      	b.n	800b1d8 <cosf+0x24>
 800b22c:	3f490fd8 	.word	0x3f490fd8
 800b230:	00000000 	.word	0x00000000

0800b234 <roundf>:
 800b234:	ee10 0a10 	vmov	r0, s0
 800b238:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b23c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b240:	2a16      	cmp	r2, #22
 800b242:	dc15      	bgt.n	800b270 <roundf+0x3c>
 800b244:	2a00      	cmp	r2, #0
 800b246:	da08      	bge.n	800b25a <roundf+0x26>
 800b248:	3201      	adds	r2, #1
 800b24a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b24e:	d101      	bne.n	800b254 <roundf+0x20>
 800b250:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b254:	ee00 3a10 	vmov	s0, r3
 800b258:	4770      	bx	lr
 800b25a:	4908      	ldr	r1, [pc, #32]	; (800b27c <roundf+0x48>)
 800b25c:	4111      	asrs	r1, r2
 800b25e:	4208      	tst	r0, r1
 800b260:	d0fa      	beq.n	800b258 <roundf+0x24>
 800b262:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b266:	4113      	asrs	r3, r2
 800b268:	4403      	add	r3, r0
 800b26a:	ea23 0301 	bic.w	r3, r3, r1
 800b26e:	e7f1      	b.n	800b254 <roundf+0x20>
 800b270:	2a80      	cmp	r2, #128	; 0x80
 800b272:	d1f1      	bne.n	800b258 <roundf+0x24>
 800b274:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	007fffff 	.word	0x007fffff

0800b280 <sinf>:
 800b280:	ee10 3a10 	vmov	r3, s0
 800b284:	b507      	push	{r0, r1, r2, lr}
 800b286:	4a1d      	ldr	r2, [pc, #116]	; (800b2fc <sinf+0x7c>)
 800b288:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b28c:	4293      	cmp	r3, r2
 800b28e:	dc05      	bgt.n	800b29c <sinf+0x1c>
 800b290:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800b300 <sinf+0x80>
 800b294:	2000      	movs	r0, #0
 800b296:	f000 fe3f 	bl	800bf18 <__kernel_sinf>
 800b29a:	e004      	b.n	800b2a6 <sinf+0x26>
 800b29c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b2a0:	db04      	blt.n	800b2ac <sinf+0x2c>
 800b2a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b2a6:	b003      	add	sp, #12
 800b2a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2ac:	4668      	mov	r0, sp
 800b2ae:	f000 fa09 	bl	800b6c4 <__ieee754_rem_pio2f>
 800b2b2:	f000 0003 	and.w	r0, r0, #3
 800b2b6:	2801      	cmp	r0, #1
 800b2b8:	d008      	beq.n	800b2cc <sinf+0x4c>
 800b2ba:	2802      	cmp	r0, #2
 800b2bc:	d00d      	beq.n	800b2da <sinf+0x5a>
 800b2be:	b9b0      	cbnz	r0, 800b2ee <sinf+0x6e>
 800b2c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2c4:	ed9d 0a00 	vldr	s0, [sp]
 800b2c8:	2001      	movs	r0, #1
 800b2ca:	e7e4      	b.n	800b296 <sinf+0x16>
 800b2cc:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2d0:	ed9d 0a00 	vldr	s0, [sp]
 800b2d4:	f000 fb36 	bl	800b944 <__kernel_cosf>
 800b2d8:	e7e5      	b.n	800b2a6 <sinf+0x26>
 800b2da:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2de:	ed9d 0a00 	vldr	s0, [sp]
 800b2e2:	2001      	movs	r0, #1
 800b2e4:	f000 fe18 	bl	800bf18 <__kernel_sinf>
 800b2e8:	eeb1 0a40 	vneg.f32	s0, s0
 800b2ec:	e7db      	b.n	800b2a6 <sinf+0x26>
 800b2ee:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2f2:	ed9d 0a00 	vldr	s0, [sp]
 800b2f6:	f000 fb25 	bl	800b944 <__kernel_cosf>
 800b2fa:	e7f5      	b.n	800b2e8 <sinf+0x68>
 800b2fc:	3f490fd8 	.word	0x3f490fd8
 800b300:	00000000 	.word	0x00000000

0800b304 <asinf>:
 800b304:	b508      	push	{r3, lr}
 800b306:	ed2d 8b02 	vpush	{d8}
 800b30a:	eeb0 8a40 	vmov.f32	s16, s0
 800b30e:	f000 f853 	bl	800b3b8 <__ieee754_asinf>
 800b312:	4b13      	ldr	r3, [pc, #76]	; (800b360 <asinf+0x5c>)
 800b314:	f993 3000 	ldrsb.w	r3, [r3]
 800b318:	3301      	adds	r3, #1
 800b31a:	eef0 8a40 	vmov.f32	s17, s0
 800b31e:	d01a      	beq.n	800b356 <asinf+0x52>
 800b320:	eeb4 8a48 	vcmp.f32	s16, s16
 800b324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b328:	d615      	bvs.n	800b356 <asinf+0x52>
 800b32a:	eeb0 0a48 	vmov.f32	s0, s16
 800b32e:	f000 ff0f 	bl	800c150 <fabsf>
 800b332:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b336:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b33e:	dd0a      	ble.n	800b356 <asinf+0x52>
 800b340:	f000 ffc8 	bl	800c2d4 <__errno>
 800b344:	ecbd 8b02 	vpop	{d8}
 800b348:	2321      	movs	r3, #33	; 0x21
 800b34a:	6003      	str	r3, [r0, #0]
 800b34c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b350:	4804      	ldr	r0, [pc, #16]	; (800b364 <asinf+0x60>)
 800b352:	f000 bf47 	b.w	800c1e4 <nanf>
 800b356:	eeb0 0a68 	vmov.f32	s0, s17
 800b35a:	ecbd 8b02 	vpop	{d8}
 800b35e:	bd08      	pop	{r3, pc}
 800b360:	2000003d 	.word	0x2000003d
 800b364:	0800c394 	.word	0x0800c394

0800b368 <atan2f>:
 800b368:	f000 b90c 	b.w	800b584 <__ieee754_atan2f>

0800b36c <sqrtf>:
 800b36c:	b508      	push	{r3, lr}
 800b36e:	ed2d 8b02 	vpush	{d8}
 800b372:	eeb0 8a40 	vmov.f32	s16, s0
 800b376:	f000 fae1 	bl	800b93c <__ieee754_sqrtf>
 800b37a:	4b0d      	ldr	r3, [pc, #52]	; (800b3b0 <sqrtf+0x44>)
 800b37c:	f993 3000 	ldrsb.w	r3, [r3]
 800b380:	3301      	adds	r3, #1
 800b382:	d011      	beq.n	800b3a8 <sqrtf+0x3c>
 800b384:	eeb4 8a48 	vcmp.f32	s16, s16
 800b388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b38c:	d60c      	bvs.n	800b3a8 <sqrtf+0x3c>
 800b38e:	eddf 8a09 	vldr	s17, [pc, #36]	; 800b3b4 <sqrtf+0x48>
 800b392:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b39a:	d505      	bpl.n	800b3a8 <sqrtf+0x3c>
 800b39c:	f000 ff9a 	bl	800c2d4 <__errno>
 800b3a0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b3a4:	2321      	movs	r3, #33	; 0x21
 800b3a6:	6003      	str	r3, [r0, #0]
 800b3a8:	ecbd 8b02 	vpop	{d8}
 800b3ac:	bd08      	pop	{r3, pc}
 800b3ae:	bf00      	nop
 800b3b0:	2000003d 	.word	0x2000003d
 800b3b4:	00000000 	.word	0x00000000

0800b3b8 <__ieee754_asinf>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	ee10 5a10 	vmov	r5, s0
 800b3be:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800b3c2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b3c6:	ed2d 8b04 	vpush	{d8-d9}
 800b3ca:	d10c      	bne.n	800b3e6 <__ieee754_asinf+0x2e>
 800b3cc:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800b544 <__ieee754_asinf+0x18c>
 800b3d0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800b548 <__ieee754_asinf+0x190>
 800b3d4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b3d8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b3dc:	eeb0 0a67 	vmov.f32	s0, s15
 800b3e0:	ecbd 8b04 	vpop	{d8-d9}
 800b3e4:	bd38      	pop	{r3, r4, r5, pc}
 800b3e6:	dd04      	ble.n	800b3f2 <__ieee754_asinf+0x3a>
 800b3e8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b3ec:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b3f0:	e7f6      	b.n	800b3e0 <__ieee754_asinf+0x28>
 800b3f2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b3f6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b3fa:	da0b      	bge.n	800b414 <__ieee754_asinf+0x5c>
 800b3fc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800b400:	da52      	bge.n	800b4a8 <__ieee754_asinf+0xf0>
 800b402:	eddf 7a52 	vldr	s15, [pc, #328]	; 800b54c <__ieee754_asinf+0x194>
 800b406:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b40a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b412:	dce5      	bgt.n	800b3e0 <__ieee754_asinf+0x28>
 800b414:	f000 fe9c 	bl	800c150 <fabsf>
 800b418:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800b41c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800b420:	ee20 8a08 	vmul.f32	s16, s0, s16
 800b424:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800b550 <__ieee754_asinf+0x198>
 800b428:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800b554 <__ieee754_asinf+0x19c>
 800b42c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800b558 <__ieee754_asinf+0x1a0>
 800b430:	eea8 7a27 	vfma.f32	s14, s16, s15
 800b434:	eddf 7a49 	vldr	s15, [pc, #292]	; 800b55c <__ieee754_asinf+0x1a4>
 800b438:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b43c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b560 <__ieee754_asinf+0x1a8>
 800b440:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b444:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b564 <__ieee754_asinf+0x1ac>
 800b448:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b44c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b568 <__ieee754_asinf+0x1b0>
 800b450:	eea7 9a88 	vfma.f32	s18, s15, s16
 800b454:	eddf 7a45 	vldr	s15, [pc, #276]	; 800b56c <__ieee754_asinf+0x1b4>
 800b458:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b45c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b570 <__ieee754_asinf+0x1b8>
 800b460:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b464:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b574 <__ieee754_asinf+0x1bc>
 800b468:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b46c:	eeb0 0a48 	vmov.f32	s0, s16
 800b470:	eee7 8a88 	vfma.f32	s17, s15, s16
 800b474:	f000 fa62 	bl	800b93c <__ieee754_sqrtf>
 800b478:	4b3f      	ldr	r3, [pc, #252]	; (800b578 <__ieee754_asinf+0x1c0>)
 800b47a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800b47e:	429c      	cmp	r4, r3
 800b480:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800b484:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b488:	dd3d      	ble.n	800b506 <__ieee754_asinf+0x14e>
 800b48a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800b48e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800b57c <__ieee754_asinf+0x1c4>
 800b492:	eee0 7a26 	vfma.f32	s15, s0, s13
 800b496:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b548 <__ieee754_asinf+0x190>
 800b49a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b49e:	2d00      	cmp	r5, #0
 800b4a0:	bfd8      	it	le
 800b4a2:	eeb1 0a40 	vnegle.f32	s0, s0
 800b4a6:	e79b      	b.n	800b3e0 <__ieee754_asinf+0x28>
 800b4a8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b4ac:	eddf 6a28 	vldr	s13, [pc, #160]	; 800b550 <__ieee754_asinf+0x198>
 800b4b0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b554 <__ieee754_asinf+0x19c>
 800b4b4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800b568 <__ieee754_asinf+0x1b0>
 800b4b8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b4bc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800b55c <__ieee754_asinf+0x1a4>
 800b4c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b4c4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800b560 <__ieee754_asinf+0x1a8>
 800b4c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4cc:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b564 <__ieee754_asinf+0x1ac>
 800b4d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b4d4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800b558 <__ieee754_asinf+0x1a0>
 800b4d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b4dc:	eddf 6a23 	vldr	s13, [pc, #140]	; 800b56c <__ieee754_asinf+0x1b4>
 800b4e0:	eee7 6a86 	vfma.f32	s13, s15, s12
 800b4e4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b570 <__ieee754_asinf+0x1b8>
 800b4e8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b4ec:	eddf 6a21 	vldr	s13, [pc, #132]	; 800b574 <__ieee754_asinf+0x1bc>
 800b4f0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b4f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4f8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b4fc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b500:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b504:	e76c      	b.n	800b3e0 <__ieee754_asinf+0x28>
 800b506:	ee10 3a10 	vmov	r3, s0
 800b50a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b50e:	f023 030f 	bic.w	r3, r3, #15
 800b512:	ee07 3a10 	vmov	s14, r3
 800b516:	eea7 8a47 	vfms.f32	s16, s14, s14
 800b51a:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b51e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b522:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800b526:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b544 <__ieee754_asinf+0x18c>
 800b52a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800b52e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800b532:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800b580 <__ieee754_asinf+0x1c8>
 800b536:	eeb0 6a40 	vmov.f32	s12, s0
 800b53a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b53e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b542:	e7aa      	b.n	800b49a <__ieee754_asinf+0xe2>
 800b544:	b33bbd2e 	.word	0xb33bbd2e
 800b548:	3fc90fdb 	.word	0x3fc90fdb
 800b54c:	7149f2ca 	.word	0x7149f2ca
 800b550:	3811ef08 	.word	0x3811ef08
 800b554:	3a4f7f04 	.word	0x3a4f7f04
 800b558:	3e2aaaab 	.word	0x3e2aaaab
 800b55c:	bd241146 	.word	0xbd241146
 800b560:	3e4e0aa8 	.word	0x3e4e0aa8
 800b564:	bea6b090 	.word	0xbea6b090
 800b568:	3d9dc62e 	.word	0x3d9dc62e
 800b56c:	bf303361 	.word	0xbf303361
 800b570:	4001572d 	.word	0x4001572d
 800b574:	c019d139 	.word	0xc019d139
 800b578:	3f799999 	.word	0x3f799999
 800b57c:	333bbd2e 	.word	0x333bbd2e
 800b580:	3f490fdb 	.word	0x3f490fdb

0800b584 <__ieee754_atan2f>:
 800b584:	ee10 2a90 	vmov	r2, s1
 800b588:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b58c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b590:	b510      	push	{r4, lr}
 800b592:	eef0 7a40 	vmov.f32	s15, s0
 800b596:	dc06      	bgt.n	800b5a6 <__ieee754_atan2f+0x22>
 800b598:	ee10 0a10 	vmov	r0, s0
 800b59c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b5a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b5a4:	dd04      	ble.n	800b5b0 <__ieee754_atan2f+0x2c>
 800b5a6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b5aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b5ae:	bd10      	pop	{r4, pc}
 800b5b0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800b5b4:	d103      	bne.n	800b5be <__ieee754_atan2f+0x3a>
 800b5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5ba:	f000 bcf5 	b.w	800bfa8 <atanf>
 800b5be:	1794      	asrs	r4, r2, #30
 800b5c0:	f004 0402 	and.w	r4, r4, #2
 800b5c4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b5c8:	b943      	cbnz	r3, 800b5dc <__ieee754_atan2f+0x58>
 800b5ca:	2c02      	cmp	r4, #2
 800b5cc:	d05e      	beq.n	800b68c <__ieee754_atan2f+0x108>
 800b5ce:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b6a0 <__ieee754_atan2f+0x11c>
 800b5d2:	2c03      	cmp	r4, #3
 800b5d4:	bf08      	it	eq
 800b5d6:	eef0 7a47 	vmoveq.f32	s15, s14
 800b5da:	e7e6      	b.n	800b5aa <__ieee754_atan2f+0x26>
 800b5dc:	b941      	cbnz	r1, 800b5f0 <__ieee754_atan2f+0x6c>
 800b5de:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b6a4 <__ieee754_atan2f+0x120>
 800b5e2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800b6a8 <__ieee754_atan2f+0x124>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	bfb8      	it	lt
 800b5ea:	eef0 7a40 	vmovlt.f32	s15, s0
 800b5ee:	e7dc      	b.n	800b5aa <__ieee754_atan2f+0x26>
 800b5f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b5f4:	d110      	bne.n	800b618 <__ieee754_atan2f+0x94>
 800b5f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b5fa:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5fe:	d107      	bne.n	800b610 <__ieee754_atan2f+0x8c>
 800b600:	2c02      	cmp	r4, #2
 800b602:	d846      	bhi.n	800b692 <__ieee754_atan2f+0x10e>
 800b604:	4b29      	ldr	r3, [pc, #164]	; (800b6ac <__ieee754_atan2f+0x128>)
 800b606:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b60a:	edd4 7a00 	vldr	s15, [r4]
 800b60e:	e7cc      	b.n	800b5aa <__ieee754_atan2f+0x26>
 800b610:	2c02      	cmp	r4, #2
 800b612:	d841      	bhi.n	800b698 <__ieee754_atan2f+0x114>
 800b614:	4b26      	ldr	r3, [pc, #152]	; (800b6b0 <__ieee754_atan2f+0x12c>)
 800b616:	e7f6      	b.n	800b606 <__ieee754_atan2f+0x82>
 800b618:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b61c:	d0df      	beq.n	800b5de <__ieee754_atan2f+0x5a>
 800b61e:	1a5b      	subs	r3, r3, r1
 800b620:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800b624:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800b628:	da1a      	bge.n	800b660 <__ieee754_atan2f+0xdc>
 800b62a:	2a00      	cmp	r2, #0
 800b62c:	da01      	bge.n	800b632 <__ieee754_atan2f+0xae>
 800b62e:	313c      	adds	r1, #60	; 0x3c
 800b630:	db19      	blt.n	800b666 <__ieee754_atan2f+0xe2>
 800b632:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800b636:	f000 fd8b 	bl	800c150 <fabsf>
 800b63a:	f000 fcb5 	bl	800bfa8 <atanf>
 800b63e:	eef0 7a40 	vmov.f32	s15, s0
 800b642:	2c01      	cmp	r4, #1
 800b644:	d012      	beq.n	800b66c <__ieee754_atan2f+0xe8>
 800b646:	2c02      	cmp	r4, #2
 800b648:	d017      	beq.n	800b67a <__ieee754_atan2f+0xf6>
 800b64a:	2c00      	cmp	r4, #0
 800b64c:	d0ad      	beq.n	800b5aa <__ieee754_atan2f+0x26>
 800b64e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800b6b4 <__ieee754_atan2f+0x130>
 800b652:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b656:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800b6b8 <__ieee754_atan2f+0x134>
 800b65a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b65e:	e7a4      	b.n	800b5aa <__ieee754_atan2f+0x26>
 800b660:	eddf 7a10 	vldr	s15, [pc, #64]	; 800b6a4 <__ieee754_atan2f+0x120>
 800b664:	e7ed      	b.n	800b642 <__ieee754_atan2f+0xbe>
 800b666:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b6bc <__ieee754_atan2f+0x138>
 800b66a:	e7ea      	b.n	800b642 <__ieee754_atan2f+0xbe>
 800b66c:	ee17 3a90 	vmov	r3, s15
 800b670:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b674:	ee07 3a90 	vmov	s15, r3
 800b678:	e797      	b.n	800b5aa <__ieee754_atan2f+0x26>
 800b67a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b6b4 <__ieee754_atan2f+0x130>
 800b67e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b682:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800b6b8 <__ieee754_atan2f+0x134>
 800b686:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b68a:	e78e      	b.n	800b5aa <__ieee754_atan2f+0x26>
 800b68c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800b6b8 <__ieee754_atan2f+0x134>
 800b690:	e78b      	b.n	800b5aa <__ieee754_atan2f+0x26>
 800b692:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800b6c0 <__ieee754_atan2f+0x13c>
 800b696:	e788      	b.n	800b5aa <__ieee754_atan2f+0x26>
 800b698:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b6bc <__ieee754_atan2f+0x138>
 800b69c:	e785      	b.n	800b5aa <__ieee754_atan2f+0x26>
 800b69e:	bf00      	nop
 800b6a0:	c0490fdb 	.word	0xc0490fdb
 800b6a4:	3fc90fdb 	.word	0x3fc90fdb
 800b6a8:	bfc90fdb 	.word	0xbfc90fdb
 800b6ac:	0800c398 	.word	0x0800c398
 800b6b0:	0800c3a4 	.word	0x0800c3a4
 800b6b4:	33bbbd2e 	.word	0x33bbbd2e
 800b6b8:	40490fdb 	.word	0x40490fdb
 800b6bc:	00000000 	.word	0x00000000
 800b6c0:	3f490fdb 	.word	0x3f490fdb

0800b6c4 <__ieee754_rem_pio2f>:
 800b6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6c6:	ee10 6a10 	vmov	r6, s0
 800b6ca:	4b8e      	ldr	r3, [pc, #568]	; (800b904 <__ieee754_rem_pio2f+0x240>)
 800b6cc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b6d0:	429d      	cmp	r5, r3
 800b6d2:	b087      	sub	sp, #28
 800b6d4:	eef0 7a40 	vmov.f32	s15, s0
 800b6d8:	4604      	mov	r4, r0
 800b6da:	dc05      	bgt.n	800b6e8 <__ieee754_rem_pio2f+0x24>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	ed80 0a00 	vstr	s0, [r0]
 800b6e2:	6043      	str	r3, [r0, #4]
 800b6e4:	2000      	movs	r0, #0
 800b6e6:	e01a      	b.n	800b71e <__ieee754_rem_pio2f+0x5a>
 800b6e8:	4b87      	ldr	r3, [pc, #540]	; (800b908 <__ieee754_rem_pio2f+0x244>)
 800b6ea:	429d      	cmp	r5, r3
 800b6ec:	dc46      	bgt.n	800b77c <__ieee754_rem_pio2f+0xb8>
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b90c <__ieee754_rem_pio2f+0x248>
 800b6f4:	4b86      	ldr	r3, [pc, #536]	; (800b910 <__ieee754_rem_pio2f+0x24c>)
 800b6f6:	f025 050f 	bic.w	r5, r5, #15
 800b6fa:	dd1f      	ble.n	800b73c <__ieee754_rem_pio2f+0x78>
 800b6fc:	429d      	cmp	r5, r3
 800b6fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b702:	d00e      	beq.n	800b722 <__ieee754_rem_pio2f+0x5e>
 800b704:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b914 <__ieee754_rem_pio2f+0x250>
 800b708:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b70c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b710:	ed80 0a00 	vstr	s0, [r0]
 800b714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b718:	2001      	movs	r0, #1
 800b71a:	edc4 7a01 	vstr	s15, [r4, #4]
 800b71e:	b007      	add	sp, #28
 800b720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b722:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b918 <__ieee754_rem_pio2f+0x254>
 800b726:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b91c <__ieee754_rem_pio2f+0x258>
 800b72a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b72e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b732:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b736:	edc0 6a00 	vstr	s13, [r0]
 800b73a:	e7eb      	b.n	800b714 <__ieee754_rem_pio2f+0x50>
 800b73c:	429d      	cmp	r5, r3
 800b73e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b742:	d00e      	beq.n	800b762 <__ieee754_rem_pio2f+0x9e>
 800b744:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b914 <__ieee754_rem_pio2f+0x250>
 800b748:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b74c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b750:	ed80 0a00 	vstr	s0, [r0]
 800b754:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b758:	f04f 30ff 	mov.w	r0, #4294967295
 800b75c:	edc4 7a01 	vstr	s15, [r4, #4]
 800b760:	e7dd      	b.n	800b71e <__ieee754_rem_pio2f+0x5a>
 800b762:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b918 <__ieee754_rem_pio2f+0x254>
 800b766:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b91c <__ieee754_rem_pio2f+0x258>
 800b76a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b76e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b772:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b776:	edc0 6a00 	vstr	s13, [r0]
 800b77a:	e7eb      	b.n	800b754 <__ieee754_rem_pio2f+0x90>
 800b77c:	4b68      	ldr	r3, [pc, #416]	; (800b920 <__ieee754_rem_pio2f+0x25c>)
 800b77e:	429d      	cmp	r5, r3
 800b780:	dc72      	bgt.n	800b868 <__ieee754_rem_pio2f+0x1a4>
 800b782:	f000 fce5 	bl	800c150 <fabsf>
 800b786:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b924 <__ieee754_rem_pio2f+0x260>
 800b78a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b78e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b79a:	ee17 0a90 	vmov	r0, s15
 800b79e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b90c <__ieee754_rem_pio2f+0x248>
 800b7a2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b7a6:	281f      	cmp	r0, #31
 800b7a8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b914 <__ieee754_rem_pio2f+0x250>
 800b7ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b0:	eeb1 6a47 	vneg.f32	s12, s14
 800b7b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b7b8:	ee16 2a90 	vmov	r2, s13
 800b7bc:	dc1c      	bgt.n	800b7f8 <__ieee754_rem_pio2f+0x134>
 800b7be:	495a      	ldr	r1, [pc, #360]	; (800b928 <__ieee754_rem_pio2f+0x264>)
 800b7c0:	1e47      	subs	r7, r0, #1
 800b7c2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b7c6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b7ca:	428b      	cmp	r3, r1
 800b7cc:	d014      	beq.n	800b7f8 <__ieee754_rem_pio2f+0x134>
 800b7ce:	6022      	str	r2, [r4, #0]
 800b7d0:	ed94 7a00 	vldr	s14, [r4]
 800b7d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b7d8:	2e00      	cmp	r6, #0
 800b7da:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b7de:	ed84 0a01 	vstr	s0, [r4, #4]
 800b7e2:	da9c      	bge.n	800b71e <__ieee754_rem_pio2f+0x5a>
 800b7e4:	eeb1 7a47 	vneg.f32	s14, s14
 800b7e8:	eeb1 0a40 	vneg.f32	s0, s0
 800b7ec:	ed84 7a00 	vstr	s14, [r4]
 800b7f0:	ed84 0a01 	vstr	s0, [r4, #4]
 800b7f4:	4240      	negs	r0, r0
 800b7f6:	e792      	b.n	800b71e <__ieee754_rem_pio2f+0x5a>
 800b7f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b7fc:	15eb      	asrs	r3, r5, #23
 800b7fe:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b802:	2d08      	cmp	r5, #8
 800b804:	dde3      	ble.n	800b7ce <__ieee754_rem_pio2f+0x10a>
 800b806:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b918 <__ieee754_rem_pio2f+0x254>
 800b80a:	eef0 6a40 	vmov.f32	s13, s0
 800b80e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b812:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b816:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b81a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b91c <__ieee754_rem_pio2f+0x258>
 800b81e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800b822:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b826:	eef0 7a40 	vmov.f32	s15, s0
 800b82a:	ee15 2a90 	vmov	r2, s11
 800b82e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b832:	1a5b      	subs	r3, r3, r1
 800b834:	2b19      	cmp	r3, #25
 800b836:	dc04      	bgt.n	800b842 <__ieee754_rem_pio2f+0x17e>
 800b838:	edc4 5a00 	vstr	s11, [r4]
 800b83c:	eeb0 0a66 	vmov.f32	s0, s13
 800b840:	e7c6      	b.n	800b7d0 <__ieee754_rem_pio2f+0x10c>
 800b842:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b92c <__ieee754_rem_pio2f+0x268>
 800b846:	eeb0 0a66 	vmov.f32	s0, s13
 800b84a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b84e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b852:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b930 <__ieee754_rem_pio2f+0x26c>
 800b856:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b85a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b85e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b862:	ed84 7a00 	vstr	s14, [r4]
 800b866:	e7b3      	b.n	800b7d0 <__ieee754_rem_pio2f+0x10c>
 800b868:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b86c:	db06      	blt.n	800b87c <__ieee754_rem_pio2f+0x1b8>
 800b86e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b872:	edc0 7a01 	vstr	s15, [r0, #4]
 800b876:	edc0 7a00 	vstr	s15, [r0]
 800b87a:	e733      	b.n	800b6e4 <__ieee754_rem_pio2f+0x20>
 800b87c:	15ea      	asrs	r2, r5, #23
 800b87e:	3a86      	subs	r2, #134	; 0x86
 800b880:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b884:	ee07 3a90 	vmov	s15, r3
 800b888:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b88c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b934 <__ieee754_rem_pio2f+0x270>
 800b890:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b894:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b898:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b89c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b8a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b8a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b8a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8ac:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b8b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b8b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8bc:	edcd 7a05 	vstr	s15, [sp, #20]
 800b8c0:	d11e      	bne.n	800b900 <__ieee754_rem_pio2f+0x23c>
 800b8c2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ca:	bf14      	ite	ne
 800b8cc:	2302      	movne	r3, #2
 800b8ce:	2301      	moveq	r3, #1
 800b8d0:	4919      	ldr	r1, [pc, #100]	; (800b938 <__ieee754_rem_pio2f+0x274>)
 800b8d2:	9101      	str	r1, [sp, #4]
 800b8d4:	2102      	movs	r1, #2
 800b8d6:	9100      	str	r1, [sp, #0]
 800b8d8:	a803      	add	r0, sp, #12
 800b8da:	4621      	mov	r1, r4
 800b8dc:	f000 f892 	bl	800ba04 <__kernel_rem_pio2f>
 800b8e0:	2e00      	cmp	r6, #0
 800b8e2:	f6bf af1c 	bge.w	800b71e <__ieee754_rem_pio2f+0x5a>
 800b8e6:	edd4 7a00 	vldr	s15, [r4]
 800b8ea:	eef1 7a67 	vneg.f32	s15, s15
 800b8ee:	edc4 7a00 	vstr	s15, [r4]
 800b8f2:	edd4 7a01 	vldr	s15, [r4, #4]
 800b8f6:	eef1 7a67 	vneg.f32	s15, s15
 800b8fa:	edc4 7a01 	vstr	s15, [r4, #4]
 800b8fe:	e779      	b.n	800b7f4 <__ieee754_rem_pio2f+0x130>
 800b900:	2303      	movs	r3, #3
 800b902:	e7e5      	b.n	800b8d0 <__ieee754_rem_pio2f+0x20c>
 800b904:	3f490fd8 	.word	0x3f490fd8
 800b908:	4016cbe3 	.word	0x4016cbe3
 800b90c:	3fc90f80 	.word	0x3fc90f80
 800b910:	3fc90fd0 	.word	0x3fc90fd0
 800b914:	37354443 	.word	0x37354443
 800b918:	37354400 	.word	0x37354400
 800b91c:	2e85a308 	.word	0x2e85a308
 800b920:	43490f80 	.word	0x43490f80
 800b924:	3f22f984 	.word	0x3f22f984
 800b928:	0800c3b0 	.word	0x0800c3b0
 800b92c:	2e85a300 	.word	0x2e85a300
 800b930:	248d3132 	.word	0x248d3132
 800b934:	43800000 	.word	0x43800000
 800b938:	0800c430 	.word	0x0800c430

0800b93c <__ieee754_sqrtf>:
 800b93c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b940:	4770      	bx	lr
	...

0800b944 <__kernel_cosf>:
 800b944:	ee10 3a10 	vmov	r3, s0
 800b948:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b94c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b950:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b954:	da05      	bge.n	800b962 <__kernel_cosf+0x1e>
 800b956:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b95a:	ee17 2a90 	vmov	r2, s15
 800b95e:	2a00      	cmp	r2, #0
 800b960:	d03d      	beq.n	800b9de <__kernel_cosf+0x9a>
 800b962:	ee60 5a00 	vmul.f32	s11, s0, s0
 800b966:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b9e4 <__kernel_cosf+0xa0>
 800b96a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b9e8 <__kernel_cosf+0xa4>
 800b96e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800b9ec <__kernel_cosf+0xa8>
 800b972:	4a1f      	ldr	r2, [pc, #124]	; (800b9f0 <__kernel_cosf+0xac>)
 800b974:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b978:	4293      	cmp	r3, r2
 800b97a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b9f4 <__kernel_cosf+0xb0>
 800b97e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b982:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b9f8 <__kernel_cosf+0xb4>
 800b986:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b98a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b9fc <__kernel_cosf+0xb8>
 800b98e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b992:	eeb0 7a66 	vmov.f32	s14, s13
 800b996:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b99a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b99e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800b9a2:	ee67 6a25 	vmul.f32	s13, s14, s11
 800b9a6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800b9aa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b9ae:	dc04      	bgt.n	800b9ba <__kernel_cosf+0x76>
 800b9b0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b9b4:	ee36 0a47 	vsub.f32	s0, s12, s14
 800b9b8:	4770      	bx	lr
 800b9ba:	4a11      	ldr	r2, [pc, #68]	; (800ba00 <__kernel_cosf+0xbc>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	bfda      	itte	le
 800b9c0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b9c4:	ee06 3a90 	vmovle	s13, r3
 800b9c8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800b9cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b9d0:	ee36 0a66 	vsub.f32	s0, s12, s13
 800b9d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b9dc:	4770      	bx	lr
 800b9de:	eeb0 0a46 	vmov.f32	s0, s12
 800b9e2:	4770      	bx	lr
 800b9e4:	ad47d74e 	.word	0xad47d74e
 800b9e8:	310f74f6 	.word	0x310f74f6
 800b9ec:	3d2aaaab 	.word	0x3d2aaaab
 800b9f0:	3e999999 	.word	0x3e999999
 800b9f4:	b493f27c 	.word	0xb493f27c
 800b9f8:	37d00d01 	.word	0x37d00d01
 800b9fc:	bab60b61 	.word	0xbab60b61
 800ba00:	3f480000 	.word	0x3f480000

0800ba04 <__kernel_rem_pio2f>:
 800ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba08:	ed2d 8b04 	vpush	{d8-d9}
 800ba0c:	b0d7      	sub	sp, #348	; 0x15c
 800ba0e:	4616      	mov	r6, r2
 800ba10:	4698      	mov	r8, r3
 800ba12:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ba14:	4bbb      	ldr	r3, [pc, #748]	; (800bd04 <__kernel_rem_pio2f+0x300>)
 800ba16:	9001      	str	r0, [sp, #4]
 800ba18:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800ba1c:	1d33      	adds	r3, r6, #4
 800ba1e:	460d      	mov	r5, r1
 800ba20:	f108 39ff 	add.w	r9, r8, #4294967295
 800ba24:	db29      	blt.n	800ba7a <__kernel_rem_pio2f+0x76>
 800ba26:	1ef1      	subs	r1, r6, #3
 800ba28:	bf48      	it	mi
 800ba2a:	1d31      	addmi	r1, r6, #4
 800ba2c:	10c9      	asrs	r1, r1, #3
 800ba2e:	1c4c      	adds	r4, r1, #1
 800ba30:	00e3      	lsls	r3, r4, #3
 800ba32:	9302      	str	r3, [sp, #8]
 800ba34:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ba36:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800bd14 <__kernel_rem_pio2f+0x310>
 800ba3a:	eba1 0009 	sub.w	r0, r1, r9
 800ba3e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800ba42:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800ba46:	eb07 0c09 	add.w	ip, r7, r9
 800ba4a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800ba4e:	2300      	movs	r3, #0
 800ba50:	4563      	cmp	r3, ip
 800ba52:	dd14      	ble.n	800ba7e <__kernel_rem_pio2f+0x7a>
 800ba54:	ab1a      	add	r3, sp, #104	; 0x68
 800ba56:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800ba5a:	46cc      	mov	ip, r9
 800ba5c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800ba60:	f1c8 0b01 	rsb	fp, r8, #1
 800ba64:	eb0b 020c 	add.w	r2, fp, ip
 800ba68:	4297      	cmp	r7, r2
 800ba6a:	db27      	blt.n	800babc <__kernel_rem_pio2f+0xb8>
 800ba6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ba70:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800bd14 <__kernel_rem_pio2f+0x310>
 800ba74:	4618      	mov	r0, r3
 800ba76:	2200      	movs	r2, #0
 800ba78:	e016      	b.n	800baa8 <__kernel_rem_pio2f+0xa4>
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	e7d7      	b.n	800ba2e <__kernel_rem_pio2f+0x2a>
 800ba7e:	42d8      	cmn	r0, r3
 800ba80:	bf5d      	ittte	pl
 800ba82:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800ba86:	ee07 2a90 	vmovpl	s15, r2
 800ba8a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ba8e:	eef0 7a47 	vmovmi.f32	s15, s14
 800ba92:	ecea 7a01 	vstmia	sl!, {s15}
 800ba96:	3301      	adds	r3, #1
 800ba98:	e7da      	b.n	800ba50 <__kernel_rem_pio2f+0x4c>
 800ba9a:	ecfe 6a01 	vldmia	lr!, {s13}
 800ba9e:	ed90 7a00 	vldr	s14, [r0]
 800baa2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800baa6:	3201      	adds	r2, #1
 800baa8:	454a      	cmp	r2, r9
 800baaa:	f1a0 0004 	sub.w	r0, r0, #4
 800baae:	ddf4      	ble.n	800ba9a <__kernel_rem_pio2f+0x96>
 800bab0:	ecea 7a01 	vstmia	sl!, {s15}
 800bab4:	3304      	adds	r3, #4
 800bab6:	f10c 0c01 	add.w	ip, ip, #1
 800baba:	e7d3      	b.n	800ba64 <__kernel_rem_pio2f+0x60>
 800babc:	ab06      	add	r3, sp, #24
 800babe:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800bac2:	9304      	str	r3, [sp, #16]
 800bac4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800bac6:	eddf 8a92 	vldr	s17, [pc, #584]	; 800bd10 <__kernel_rem_pio2f+0x30c>
 800baca:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800bd0c <__kernel_rem_pio2f+0x308>
 800bace:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800bad2:	9303      	str	r3, [sp, #12]
 800bad4:	46ba      	mov	sl, r7
 800bad6:	ab56      	add	r3, sp, #344	; 0x158
 800bad8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800badc:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800bae0:	ab06      	add	r3, sp, #24
 800bae2:	4618      	mov	r0, r3
 800bae4:	4652      	mov	r2, sl
 800bae6:	2a00      	cmp	r2, #0
 800bae8:	dc51      	bgt.n	800bb8e <__kernel_rem_pio2f+0x18a>
 800baea:	4620      	mov	r0, r4
 800baec:	9305      	str	r3, [sp, #20]
 800baee:	f000 fb7f 	bl	800c1f0 <scalbnf>
 800baf2:	eeb0 8a40 	vmov.f32	s16, s0
 800baf6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800bafa:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bafe:	f000 fb2f 	bl	800c160 <floorf>
 800bb02:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bb06:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bb0a:	2c00      	cmp	r4, #0
 800bb0c:	9b05      	ldr	r3, [sp, #20]
 800bb0e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bb12:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800bb16:	edcd 7a00 	vstr	s15, [sp]
 800bb1a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bb1e:	dd4b      	ble.n	800bbb8 <__kernel_rem_pio2f+0x1b4>
 800bb20:	f10a 3cff 	add.w	ip, sl, #4294967295
 800bb24:	aa06      	add	r2, sp, #24
 800bb26:	f1c4 0e08 	rsb	lr, r4, #8
 800bb2a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bb2e:	ee17 1a90 	vmov	r1, s15
 800bb32:	fa42 f00e 	asr.w	r0, r2, lr
 800bb36:	4401      	add	r1, r0
 800bb38:	9100      	str	r1, [sp, #0]
 800bb3a:	fa00 f00e 	lsl.w	r0, r0, lr
 800bb3e:	a906      	add	r1, sp, #24
 800bb40:	1a12      	subs	r2, r2, r0
 800bb42:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bb46:	f1c4 0007 	rsb	r0, r4, #7
 800bb4a:	fa42 fb00 	asr.w	fp, r2, r0
 800bb4e:	f1bb 0f00 	cmp.w	fp, #0
 800bb52:	dd43      	ble.n	800bbdc <__kernel_rem_pio2f+0x1d8>
 800bb54:	9a00      	ldr	r2, [sp, #0]
 800bb56:	f04f 0e00 	mov.w	lr, #0
 800bb5a:	3201      	adds	r2, #1
 800bb5c:	9200      	str	r2, [sp, #0]
 800bb5e:	4670      	mov	r0, lr
 800bb60:	45f2      	cmp	sl, lr
 800bb62:	dc6c      	bgt.n	800bc3e <__kernel_rem_pio2f+0x23a>
 800bb64:	2c00      	cmp	r4, #0
 800bb66:	dd04      	ble.n	800bb72 <__kernel_rem_pio2f+0x16e>
 800bb68:	2c01      	cmp	r4, #1
 800bb6a:	d079      	beq.n	800bc60 <__kernel_rem_pio2f+0x25c>
 800bb6c:	2c02      	cmp	r4, #2
 800bb6e:	f000 8082 	beq.w	800bc76 <__kernel_rem_pio2f+0x272>
 800bb72:	f1bb 0f02 	cmp.w	fp, #2
 800bb76:	d131      	bne.n	800bbdc <__kernel_rem_pio2f+0x1d8>
 800bb78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bb7c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bb80:	b360      	cbz	r0, 800bbdc <__kernel_rem_pio2f+0x1d8>
 800bb82:	4620      	mov	r0, r4
 800bb84:	f000 fb34 	bl	800c1f0 <scalbnf>
 800bb88:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bb8c:	e026      	b.n	800bbdc <__kernel_rem_pio2f+0x1d8>
 800bb8e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bb92:	3a01      	subs	r2, #1
 800bb94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb98:	a942      	add	r1, sp, #264	; 0x108
 800bb9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb9e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800bba2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bba6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bbaa:	eca0 0a01 	vstmia	r0!, {s0}
 800bbae:	ed9c 0a00 	vldr	s0, [ip]
 800bbb2:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bbb6:	e796      	b.n	800bae6 <__kernel_rem_pio2f+0xe2>
 800bbb8:	d107      	bne.n	800bbca <__kernel_rem_pio2f+0x1c6>
 800bbba:	f10a 32ff 	add.w	r2, sl, #4294967295
 800bbbe:	a906      	add	r1, sp, #24
 800bbc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bbc4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800bbc8:	e7c1      	b.n	800bb4e <__kernel_rem_pio2f+0x14a>
 800bbca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bbce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd6:	da2f      	bge.n	800bc38 <__kernel_rem_pio2f+0x234>
 800bbd8:	f04f 0b00 	mov.w	fp, #0
 800bbdc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe4:	f040 8098 	bne.w	800bd18 <__kernel_rem_pio2f+0x314>
 800bbe8:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bbec:	469c      	mov	ip, r3
 800bbee:	2200      	movs	r2, #0
 800bbf0:	45bc      	cmp	ip, r7
 800bbf2:	da48      	bge.n	800bc86 <__kernel_rem_pio2f+0x282>
 800bbf4:	2a00      	cmp	r2, #0
 800bbf6:	d05f      	beq.n	800bcb8 <__kernel_rem_pio2f+0x2b4>
 800bbf8:	aa06      	add	r2, sp, #24
 800bbfa:	3c08      	subs	r4, #8
 800bbfc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bc00:	2900      	cmp	r1, #0
 800bc02:	d07d      	beq.n	800bd00 <__kernel_rem_pio2f+0x2fc>
 800bc04:	4620      	mov	r0, r4
 800bc06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bc0a:	9301      	str	r3, [sp, #4]
 800bc0c:	f000 faf0 	bl	800c1f0 <scalbnf>
 800bc10:	9b01      	ldr	r3, [sp, #4]
 800bc12:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800bd10 <__kernel_rem_pio2f+0x30c>
 800bc16:	4619      	mov	r1, r3
 800bc18:	2900      	cmp	r1, #0
 800bc1a:	f280 80af 	bge.w	800bd7c <__kernel_rem_pio2f+0x378>
 800bc1e:	4618      	mov	r0, r3
 800bc20:	2400      	movs	r4, #0
 800bc22:	2800      	cmp	r0, #0
 800bc24:	f2c0 80d0 	blt.w	800bdc8 <__kernel_rem_pio2f+0x3c4>
 800bc28:	a942      	add	r1, sp, #264	; 0x108
 800bc2a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800bc2e:	4a36      	ldr	r2, [pc, #216]	; (800bd08 <__kernel_rem_pio2f+0x304>)
 800bc30:	eddf 7a38 	vldr	s15, [pc, #224]	; 800bd14 <__kernel_rem_pio2f+0x310>
 800bc34:	2100      	movs	r1, #0
 800bc36:	e0bb      	b.n	800bdb0 <__kernel_rem_pio2f+0x3ac>
 800bc38:	f04f 0b02 	mov.w	fp, #2
 800bc3c:	e78a      	b.n	800bb54 <__kernel_rem_pio2f+0x150>
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	b948      	cbnz	r0, 800bc56 <__kernel_rem_pio2f+0x252>
 800bc42:	b11a      	cbz	r2, 800bc4c <__kernel_rem_pio2f+0x248>
 800bc44:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f10e 0e01 	add.w	lr, lr, #1
 800bc50:	3304      	adds	r3, #4
 800bc52:	4610      	mov	r0, r2
 800bc54:	e784      	b.n	800bb60 <__kernel_rem_pio2f+0x15c>
 800bc56:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800bc5a:	601a      	str	r2, [r3, #0]
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	e7f5      	b.n	800bc4c <__kernel_rem_pio2f+0x248>
 800bc60:	f10a 3cff 	add.w	ip, sl, #4294967295
 800bc64:	ab06      	add	r3, sp, #24
 800bc66:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bc6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc6e:	aa06      	add	r2, sp, #24
 800bc70:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800bc74:	e77d      	b.n	800bb72 <__kernel_rem_pio2f+0x16e>
 800bc76:	f10a 3cff 	add.w	ip, sl, #4294967295
 800bc7a:	ab06      	add	r3, sp, #24
 800bc7c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800bc80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc84:	e7f3      	b.n	800bc6e <__kernel_rem_pio2f+0x26a>
 800bc86:	a906      	add	r1, sp, #24
 800bc88:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800bc8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bc90:	4302      	orrs	r2, r0
 800bc92:	e7ad      	b.n	800bbf0 <__kernel_rem_pio2f+0x1ec>
 800bc94:	3001      	adds	r0, #1
 800bc96:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bc9a:	2a00      	cmp	r2, #0
 800bc9c:	d0fa      	beq.n	800bc94 <__kernel_rem_pio2f+0x290>
 800bc9e:	a91a      	add	r1, sp, #104	; 0x68
 800bca0:	eb0a 0208 	add.w	r2, sl, r8
 800bca4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bca8:	f10a 0301 	add.w	r3, sl, #1
 800bcac:	eb0a 0100 	add.w	r1, sl, r0
 800bcb0:	4299      	cmp	r1, r3
 800bcb2:	da04      	bge.n	800bcbe <__kernel_rem_pio2f+0x2ba>
 800bcb4:	468a      	mov	sl, r1
 800bcb6:	e70e      	b.n	800bad6 <__kernel_rem_pio2f+0xd2>
 800bcb8:	9b04      	ldr	r3, [sp, #16]
 800bcba:	2001      	movs	r0, #1
 800bcbc:	e7eb      	b.n	800bc96 <__kernel_rem_pio2f+0x292>
 800bcbe:	9803      	ldr	r0, [sp, #12]
 800bcc0:	f8dd c004 	ldr.w	ip, [sp, #4]
 800bcc4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800bcc8:	9000      	str	r0, [sp, #0]
 800bcca:	ee07 0a90 	vmov	s15, r0
 800bcce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	ece2 7a01 	vstmia	r2!, {s15}
 800bcd8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800bd14 <__kernel_rem_pio2f+0x310>
 800bcdc:	4696      	mov	lr, r2
 800bcde:	4548      	cmp	r0, r9
 800bce0:	dd06      	ble.n	800bcf0 <__kernel_rem_pio2f+0x2ec>
 800bce2:	a842      	add	r0, sp, #264	; 0x108
 800bce4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800bce8:	edc0 7a00 	vstr	s15, [r0]
 800bcec:	3301      	adds	r3, #1
 800bcee:	e7df      	b.n	800bcb0 <__kernel_rem_pio2f+0x2ac>
 800bcf0:	ecfc 6a01 	vldmia	ip!, {s13}
 800bcf4:	ed3e 7a01 	vldmdb	lr!, {s14}
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bcfe:	e7ee      	b.n	800bcde <__kernel_rem_pio2f+0x2da>
 800bd00:	3b01      	subs	r3, #1
 800bd02:	e779      	b.n	800bbf8 <__kernel_rem_pio2f+0x1f4>
 800bd04:	0800c774 	.word	0x0800c774
 800bd08:	0800c748 	.word	0x0800c748
 800bd0c:	43800000 	.word	0x43800000
 800bd10:	3b800000 	.word	0x3b800000
 800bd14:	00000000 	.word	0x00000000
 800bd18:	9b02      	ldr	r3, [sp, #8]
 800bd1a:	eeb0 0a48 	vmov.f32	s0, s16
 800bd1e:	1b98      	subs	r0, r3, r6
 800bd20:	f000 fa66 	bl	800c1f0 <scalbnf>
 800bd24:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800bd0c <__kernel_rem_pio2f+0x308>
 800bd28:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd30:	db1b      	blt.n	800bd6a <__kernel_rem_pio2f+0x366>
 800bd32:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bd10 <__kernel_rem_pio2f+0x30c>
 800bd36:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bd3a:	aa06      	add	r2, sp, #24
 800bd3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd40:	a906      	add	r1, sp, #24
 800bd42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd46:	3408      	adds	r4, #8
 800bd48:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bd4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd50:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bd54:	ee10 3a10 	vmov	r3, s0
 800bd58:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800bd5c:	ee17 2a90 	vmov	r2, s15
 800bd60:	f10a 0301 	add.w	r3, sl, #1
 800bd64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bd68:	e74c      	b.n	800bc04 <__kernel_rem_pio2f+0x200>
 800bd6a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bd6e:	aa06      	add	r2, sp, #24
 800bd70:	ee10 3a10 	vmov	r3, s0
 800bd74:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800bd78:	4653      	mov	r3, sl
 800bd7a:	e743      	b.n	800bc04 <__kernel_rem_pio2f+0x200>
 800bd7c:	aa42      	add	r2, sp, #264	; 0x108
 800bd7e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800bd82:	aa06      	add	r2, sp, #24
 800bd84:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bd88:	9201      	str	r2, [sp, #4]
 800bd8a:	ee07 2a90 	vmov	s15, r2
 800bd8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd92:	3901      	subs	r1, #1
 800bd94:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bd98:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bd9c:	edc0 7a00 	vstr	s15, [r0]
 800bda0:	e73a      	b.n	800bc18 <__kernel_rem_pio2f+0x214>
 800bda2:	ecf2 6a01 	vldmia	r2!, {s13}
 800bda6:	ecb6 7a01 	vldmia	r6!, {s14}
 800bdaa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bdae:	3101      	adds	r1, #1
 800bdb0:	42b9      	cmp	r1, r7
 800bdb2:	dc01      	bgt.n	800bdb8 <__kernel_rem_pio2f+0x3b4>
 800bdb4:	428c      	cmp	r4, r1
 800bdb6:	daf4      	bge.n	800bda2 <__kernel_rem_pio2f+0x39e>
 800bdb8:	aa56      	add	r2, sp, #344	; 0x158
 800bdba:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800bdbe:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800bdc2:	3801      	subs	r0, #1
 800bdc4:	3401      	adds	r4, #1
 800bdc6:	e72c      	b.n	800bc22 <__kernel_rem_pio2f+0x21e>
 800bdc8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800bdca:	2a02      	cmp	r2, #2
 800bdcc:	dc0a      	bgt.n	800bde4 <__kernel_rem_pio2f+0x3e0>
 800bdce:	2a00      	cmp	r2, #0
 800bdd0:	dc61      	bgt.n	800be96 <__kernel_rem_pio2f+0x492>
 800bdd2:	d03c      	beq.n	800be4e <__kernel_rem_pio2f+0x44a>
 800bdd4:	9b00      	ldr	r3, [sp, #0]
 800bdd6:	f003 0007 	and.w	r0, r3, #7
 800bdda:	b057      	add	sp, #348	; 0x15c
 800bddc:	ecbd 8b04 	vpop	{d8-d9}
 800bde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800bde6:	2a03      	cmp	r2, #3
 800bde8:	d1f4      	bne.n	800bdd4 <__kernel_rem_pio2f+0x3d0>
 800bdea:	aa2e      	add	r2, sp, #184	; 0xb8
 800bdec:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800bdf0:	4608      	mov	r0, r1
 800bdf2:	461c      	mov	r4, r3
 800bdf4:	2c00      	cmp	r4, #0
 800bdf6:	f1a0 0004 	sub.w	r0, r0, #4
 800bdfa:	dc59      	bgt.n	800beb0 <__kernel_rem_pio2f+0x4ac>
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	2801      	cmp	r0, #1
 800be00:	f1a1 0104 	sub.w	r1, r1, #4
 800be04:	dc64      	bgt.n	800bed0 <__kernel_rem_pio2f+0x4cc>
 800be06:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800bd14 <__kernel_rem_pio2f+0x310>
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	dc70      	bgt.n	800bef0 <__kernel_rem_pio2f+0x4ec>
 800be0e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800be12:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800be16:	f1bb 0f00 	cmp.w	fp, #0
 800be1a:	d172      	bne.n	800bf02 <__kernel_rem_pio2f+0x4fe>
 800be1c:	edc5 6a00 	vstr	s13, [r5]
 800be20:	ed85 7a01 	vstr	s14, [r5, #4]
 800be24:	edc5 7a02 	vstr	s15, [r5, #8]
 800be28:	e7d4      	b.n	800bdd4 <__kernel_rem_pio2f+0x3d0>
 800be2a:	aa2e      	add	r2, sp, #184	; 0xb8
 800be2c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800be30:	ed91 7a00 	vldr	s14, [r1]
 800be34:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be38:	3b01      	subs	r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	daf5      	bge.n	800be2a <__kernel_rem_pio2f+0x426>
 800be3e:	f1bb 0f00 	cmp.w	fp, #0
 800be42:	d001      	beq.n	800be48 <__kernel_rem_pio2f+0x444>
 800be44:	eef1 7a67 	vneg.f32	s15, s15
 800be48:	edc5 7a00 	vstr	s15, [r5]
 800be4c:	e7c2      	b.n	800bdd4 <__kernel_rem_pio2f+0x3d0>
 800be4e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800bd14 <__kernel_rem_pio2f+0x310>
 800be52:	e7f2      	b.n	800be3a <__kernel_rem_pio2f+0x436>
 800be54:	aa2e      	add	r2, sp, #184	; 0xb8
 800be56:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800be5a:	edd0 7a00 	vldr	s15, [r0]
 800be5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800be62:	3901      	subs	r1, #1
 800be64:	2900      	cmp	r1, #0
 800be66:	daf5      	bge.n	800be54 <__kernel_rem_pio2f+0x450>
 800be68:	f1bb 0f00 	cmp.w	fp, #0
 800be6c:	d017      	beq.n	800be9e <__kernel_rem_pio2f+0x49a>
 800be6e:	eef1 7a47 	vneg.f32	s15, s14
 800be72:	edc5 7a00 	vstr	s15, [r5]
 800be76:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800be7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be7e:	a82f      	add	r0, sp, #188	; 0xbc
 800be80:	2101      	movs	r1, #1
 800be82:	428b      	cmp	r3, r1
 800be84:	da0e      	bge.n	800bea4 <__kernel_rem_pio2f+0x4a0>
 800be86:	f1bb 0f00 	cmp.w	fp, #0
 800be8a:	d001      	beq.n	800be90 <__kernel_rem_pio2f+0x48c>
 800be8c:	eef1 7a67 	vneg.f32	s15, s15
 800be90:	edc5 7a01 	vstr	s15, [r5, #4]
 800be94:	e79e      	b.n	800bdd4 <__kernel_rem_pio2f+0x3d0>
 800be96:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800bd14 <__kernel_rem_pio2f+0x310>
 800be9a:	4619      	mov	r1, r3
 800be9c:	e7e2      	b.n	800be64 <__kernel_rem_pio2f+0x460>
 800be9e:	eef0 7a47 	vmov.f32	s15, s14
 800bea2:	e7e6      	b.n	800be72 <__kernel_rem_pio2f+0x46e>
 800bea4:	ecb0 7a01 	vldmia	r0!, {s14}
 800bea8:	3101      	adds	r1, #1
 800beaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800beae:	e7e8      	b.n	800be82 <__kernel_rem_pio2f+0x47e>
 800beb0:	edd0 7a00 	vldr	s15, [r0]
 800beb4:	edd0 6a01 	vldr	s13, [r0, #4]
 800beb8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bebc:	3c01      	subs	r4, #1
 800bebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bec2:	ed80 7a00 	vstr	s14, [r0]
 800bec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beca:	edc0 7a01 	vstr	s15, [r0, #4]
 800bece:	e791      	b.n	800bdf4 <__kernel_rem_pio2f+0x3f0>
 800bed0:	edd1 7a00 	vldr	s15, [r1]
 800bed4:	edd1 6a01 	vldr	s13, [r1, #4]
 800bed8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bedc:	3801      	subs	r0, #1
 800bede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bee2:	ed81 7a00 	vstr	s14, [r1]
 800bee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beea:	edc1 7a01 	vstr	s15, [r1, #4]
 800beee:	e786      	b.n	800bdfe <__kernel_rem_pio2f+0x3fa>
 800bef0:	aa2e      	add	r2, sp, #184	; 0xb8
 800bef2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800bef6:	ed91 7a00 	vldr	s14, [r1]
 800befa:	3b01      	subs	r3, #1
 800befc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf00:	e783      	b.n	800be0a <__kernel_rem_pio2f+0x406>
 800bf02:	eef1 6a66 	vneg.f32	s13, s13
 800bf06:	eeb1 7a47 	vneg.f32	s14, s14
 800bf0a:	edc5 6a00 	vstr	s13, [r5]
 800bf0e:	ed85 7a01 	vstr	s14, [r5, #4]
 800bf12:	eef1 7a67 	vneg.f32	s15, s15
 800bf16:	e785      	b.n	800be24 <__kernel_rem_pio2f+0x420>

0800bf18 <__kernel_sinf>:
 800bf18:	ee10 3a10 	vmov	r3, s0
 800bf1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf20:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bf24:	da04      	bge.n	800bf30 <__kernel_sinf+0x18>
 800bf26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bf2a:	ee17 3a90 	vmov	r3, s15
 800bf2e:	b35b      	cbz	r3, 800bf88 <__kernel_sinf+0x70>
 800bf30:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bf34:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bf8c <__kernel_sinf+0x74>
 800bf38:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800bf90 <__kernel_sinf+0x78>
 800bf3c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bf40:	eddf 7a14 	vldr	s15, [pc, #80]	; 800bf94 <__kernel_sinf+0x7c>
 800bf44:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bf48:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800bf98 <__kernel_sinf+0x80>
 800bf4c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bf50:	eddf 7a12 	vldr	s15, [pc, #72]	; 800bf9c <__kernel_sinf+0x84>
 800bf54:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bf58:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bf5c:	b930      	cbnz	r0, 800bf6c <__kernel_sinf+0x54>
 800bf5e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800bfa0 <__kernel_sinf+0x88>
 800bf62:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bf66:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bf6a:	4770      	bx	lr
 800bf6c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bf70:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bf74:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bf78:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bf7c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bfa4 <__kernel_sinf+0x8c>
 800bf80:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bf84:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	2f2ec9d3 	.word	0x2f2ec9d3
 800bf90:	b2d72f34 	.word	0xb2d72f34
 800bf94:	3638ef1b 	.word	0x3638ef1b
 800bf98:	b9500d01 	.word	0xb9500d01
 800bf9c:	3c088889 	.word	0x3c088889
 800bfa0:	be2aaaab 	.word	0xbe2aaaab
 800bfa4:	3e2aaaab 	.word	0x3e2aaaab

0800bfa8 <atanf>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	ee10 5a10 	vmov	r5, s0
 800bfae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800bfb2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800bfb6:	eef0 7a40 	vmov.f32	s15, s0
 800bfba:	db10      	blt.n	800bfde <atanf+0x36>
 800bfbc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800bfc0:	dd04      	ble.n	800bfcc <atanf+0x24>
 800bfc2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800bfc6:	eeb0 0a67 	vmov.f32	s0, s15
 800bfca:	bd38      	pop	{r3, r4, r5, pc}
 800bfcc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c104 <atanf+0x15c>
 800bfd0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c108 <atanf+0x160>
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	bfd8      	it	le
 800bfd8:	eef0 7a40 	vmovle.f32	s15, s0
 800bfdc:	e7f3      	b.n	800bfc6 <atanf+0x1e>
 800bfde:	4b4b      	ldr	r3, [pc, #300]	; (800c10c <atanf+0x164>)
 800bfe0:	429c      	cmp	r4, r3
 800bfe2:	dc10      	bgt.n	800c006 <atanf+0x5e>
 800bfe4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800bfe8:	da0a      	bge.n	800c000 <atanf+0x58>
 800bfea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c110 <atanf+0x168>
 800bfee:	ee30 7a07 	vadd.f32	s14, s0, s14
 800bff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bff6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800bffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bffe:	dce2      	bgt.n	800bfc6 <atanf+0x1e>
 800c000:	f04f 33ff 	mov.w	r3, #4294967295
 800c004:	e013      	b.n	800c02e <atanf+0x86>
 800c006:	f000 f8a3 	bl	800c150 <fabsf>
 800c00a:	4b42      	ldr	r3, [pc, #264]	; (800c114 <atanf+0x16c>)
 800c00c:	429c      	cmp	r4, r3
 800c00e:	dc4f      	bgt.n	800c0b0 <atanf+0x108>
 800c010:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c014:	429c      	cmp	r4, r3
 800c016:	dc41      	bgt.n	800c09c <atanf+0xf4>
 800c018:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c01c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c020:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c024:	2300      	movs	r3, #0
 800c026:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c02a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c02e:	1c5a      	adds	r2, r3, #1
 800c030:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c034:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c118 <atanf+0x170>
 800c038:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800c11c <atanf+0x174>
 800c03c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c120 <atanf+0x178>
 800c040:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800c124 <atanf+0x17c>
 800c044:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c048:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c04c:	eddf 5a36 	vldr	s11, [pc, #216]	; 800c128 <atanf+0x180>
 800c050:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c054:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800c12c <atanf+0x184>
 800c058:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c05c:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c130 <atanf+0x188>
 800c060:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c064:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800c134 <atanf+0x18c>
 800c068:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c06c:	eddf 5a32 	vldr	s11, [pc, #200]	; 800c138 <atanf+0x190>
 800c070:	eee7 5a05 	vfma.f32	s11, s14, s10
 800c074:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800c13c <atanf+0x194>
 800c078:	eea5 5a87 	vfma.f32	s10, s11, s14
 800c07c:	eddf 5a30 	vldr	s11, [pc, #192]	; 800c140 <atanf+0x198>
 800c080:	eee5 5a07 	vfma.f32	s11, s10, s14
 800c084:	eea5 0a87 	vfma.f32	s0, s11, s14
 800c088:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c08c:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c090:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c094:	d121      	bne.n	800c0da <atanf+0x132>
 800c096:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c09a:	e794      	b.n	800bfc6 <atanf+0x1e>
 800c09c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c0a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c0a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c0ae:	e7be      	b.n	800c02e <atanf+0x86>
 800c0b0:	4b24      	ldr	r3, [pc, #144]	; (800c144 <atanf+0x19c>)
 800c0b2:	429c      	cmp	r4, r3
 800c0b4:	dc0b      	bgt.n	800c0ce <atanf+0x126>
 800c0b6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c0ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0be:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c0c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0cc:	e7af      	b.n	800c02e <atanf+0x86>
 800c0ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c0d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	e7a9      	b.n	800c02e <atanf+0x86>
 800c0da:	4a1b      	ldr	r2, [pc, #108]	; (800c148 <atanf+0x1a0>)
 800c0dc:	491b      	ldr	r1, [pc, #108]	; (800c14c <atanf+0x1a4>)
 800c0de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c0e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c0e6:	ed93 7a00 	vldr	s14, [r3]
 800c0ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c0ee:	2d00      	cmp	r5, #0
 800c0f0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c0f4:	ed92 0a00 	vldr	s0, [r2]
 800c0f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c0fc:	bfb8      	it	lt
 800c0fe:	eef1 7a67 	vneglt.f32	s15, s15
 800c102:	e760      	b.n	800bfc6 <atanf+0x1e>
 800c104:	3fc90fdb 	.word	0x3fc90fdb
 800c108:	bfc90fdb 	.word	0xbfc90fdb
 800c10c:	3edfffff 	.word	0x3edfffff
 800c110:	7149f2ca 	.word	0x7149f2ca
 800c114:	3f97ffff 	.word	0x3f97ffff
 800c118:	3c8569d7 	.word	0x3c8569d7
 800c11c:	3d4bda59 	.word	0x3d4bda59
 800c120:	bd15a221 	.word	0xbd15a221
 800c124:	be4ccccd 	.word	0xbe4ccccd
 800c128:	3d886b35 	.word	0x3d886b35
 800c12c:	3dba2e6e 	.word	0x3dba2e6e
 800c130:	3e124925 	.word	0x3e124925
 800c134:	3eaaaaab 	.word	0x3eaaaaab
 800c138:	bd6ef16b 	.word	0xbd6ef16b
 800c13c:	bd9d8795 	.word	0xbd9d8795
 800c140:	bde38e38 	.word	0xbde38e38
 800c144:	401bffff 	.word	0x401bffff
 800c148:	0800c780 	.word	0x0800c780
 800c14c:	0800c790 	.word	0x0800c790

0800c150 <fabsf>:
 800c150:	ee10 3a10 	vmov	r3, s0
 800c154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c158:	ee00 3a10 	vmov	s0, r3
 800c15c:	4770      	bx	lr
	...

0800c160 <floorf>:
 800c160:	ee10 3a10 	vmov	r3, s0
 800c164:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c168:	3a7f      	subs	r2, #127	; 0x7f
 800c16a:	2a16      	cmp	r2, #22
 800c16c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c170:	dc2a      	bgt.n	800c1c8 <floorf+0x68>
 800c172:	2a00      	cmp	r2, #0
 800c174:	da11      	bge.n	800c19a <floorf+0x3a>
 800c176:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c1d8 <floorf+0x78>
 800c17a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c17e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c186:	dd05      	ble.n	800c194 <floorf+0x34>
 800c188:	2b00      	cmp	r3, #0
 800c18a:	da23      	bge.n	800c1d4 <floorf+0x74>
 800c18c:	4a13      	ldr	r2, [pc, #76]	; (800c1dc <floorf+0x7c>)
 800c18e:	2900      	cmp	r1, #0
 800c190:	bf18      	it	ne
 800c192:	4613      	movne	r3, r2
 800c194:	ee00 3a10 	vmov	s0, r3
 800c198:	4770      	bx	lr
 800c19a:	4911      	ldr	r1, [pc, #68]	; (800c1e0 <floorf+0x80>)
 800c19c:	4111      	asrs	r1, r2
 800c19e:	420b      	tst	r3, r1
 800c1a0:	d0fa      	beq.n	800c198 <floorf+0x38>
 800c1a2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c1d8 <floorf+0x78>
 800c1a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c1aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b2:	ddef      	ble.n	800c194 <floorf+0x34>
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	bfbe      	ittt	lt
 800c1b8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c1bc:	fa40 f202 	asrlt.w	r2, r0, r2
 800c1c0:	189b      	addlt	r3, r3, r2
 800c1c2:	ea23 0301 	bic.w	r3, r3, r1
 800c1c6:	e7e5      	b.n	800c194 <floorf+0x34>
 800c1c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c1cc:	d3e4      	bcc.n	800c198 <floorf+0x38>
 800c1ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c1d2:	4770      	bx	lr
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	e7dd      	b.n	800c194 <floorf+0x34>
 800c1d8:	7149f2ca 	.word	0x7149f2ca
 800c1dc:	bf800000 	.word	0xbf800000
 800c1e0:	007fffff 	.word	0x007fffff

0800c1e4 <nanf>:
 800c1e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c1ec <nanf+0x8>
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	7fc00000 	.word	0x7fc00000

0800c1f0 <scalbnf>:
 800c1f0:	ee10 3a10 	vmov	r3, s0
 800c1f4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c1f8:	d025      	beq.n	800c246 <scalbnf+0x56>
 800c1fa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c1fe:	d302      	bcc.n	800c206 <scalbnf+0x16>
 800c200:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c204:	4770      	bx	lr
 800c206:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c20a:	d122      	bne.n	800c252 <scalbnf+0x62>
 800c20c:	4b2a      	ldr	r3, [pc, #168]	; (800c2b8 <scalbnf+0xc8>)
 800c20e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c2bc <scalbnf+0xcc>
 800c212:	4298      	cmp	r0, r3
 800c214:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c218:	db16      	blt.n	800c248 <scalbnf+0x58>
 800c21a:	ee10 3a10 	vmov	r3, s0
 800c21e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c222:	3a19      	subs	r2, #25
 800c224:	4402      	add	r2, r0
 800c226:	2afe      	cmp	r2, #254	; 0xfe
 800c228:	dd15      	ble.n	800c256 <scalbnf+0x66>
 800c22a:	ee10 3a10 	vmov	r3, s0
 800c22e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c2c0 <scalbnf+0xd0>
 800c232:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c2c4 <scalbnf+0xd4>
 800c236:	2b00      	cmp	r3, #0
 800c238:	eeb0 7a67 	vmov.f32	s14, s15
 800c23c:	bfb8      	it	lt
 800c23e:	eef0 7a66 	vmovlt.f32	s15, s13
 800c242:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c246:	4770      	bx	lr
 800c248:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c2c8 <scalbnf+0xd8>
 800c24c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c250:	4770      	bx	lr
 800c252:	0dd2      	lsrs	r2, r2, #23
 800c254:	e7e6      	b.n	800c224 <scalbnf+0x34>
 800c256:	2a00      	cmp	r2, #0
 800c258:	dd06      	ble.n	800c268 <scalbnf+0x78>
 800c25a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c25e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c262:	ee00 3a10 	vmov	s0, r3
 800c266:	4770      	bx	lr
 800c268:	f112 0f16 	cmn.w	r2, #22
 800c26c:	da1a      	bge.n	800c2a4 <scalbnf+0xb4>
 800c26e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c272:	4298      	cmp	r0, r3
 800c274:	ee10 3a10 	vmov	r3, s0
 800c278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c27c:	dd0a      	ble.n	800c294 <scalbnf+0xa4>
 800c27e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c2c0 <scalbnf+0xd0>
 800c282:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c2c4 <scalbnf+0xd4>
 800c286:	eef0 7a40 	vmov.f32	s15, s0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	bf18      	it	ne
 800c28e:	eeb0 0a47 	vmovne.f32	s0, s14
 800c292:	e7db      	b.n	800c24c <scalbnf+0x5c>
 800c294:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c2c8 <scalbnf+0xd8>
 800c298:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c2cc <scalbnf+0xdc>
 800c29c:	eef0 7a40 	vmov.f32	s15, s0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	e7f3      	b.n	800c28c <scalbnf+0x9c>
 800c2a4:	3219      	adds	r2, #25
 800c2a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2aa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c2ae:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c2d0 <scalbnf+0xe0>
 800c2b2:	ee07 3a10 	vmov	s14, r3
 800c2b6:	e7c4      	b.n	800c242 <scalbnf+0x52>
 800c2b8:	ffff3cb0 	.word	0xffff3cb0
 800c2bc:	4c000000 	.word	0x4c000000
 800c2c0:	7149f2ca 	.word	0x7149f2ca
 800c2c4:	f149f2ca 	.word	0xf149f2ca
 800c2c8:	0da24260 	.word	0x0da24260
 800c2cc:	8da24260 	.word	0x8da24260
 800c2d0:	33000000 	.word	0x33000000

0800c2d4 <__errno>:
 800c2d4:	4b01      	ldr	r3, [pc, #4]	; (800c2dc <__errno+0x8>)
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	20000040 	.word	0x20000040

0800c2e0 <__libc_init_array>:
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	4d0d      	ldr	r5, [pc, #52]	; (800c318 <__libc_init_array+0x38>)
 800c2e4:	4c0d      	ldr	r4, [pc, #52]	; (800c31c <__libc_init_array+0x3c>)
 800c2e6:	1b64      	subs	r4, r4, r5
 800c2e8:	10a4      	asrs	r4, r4, #2
 800c2ea:	2600      	movs	r6, #0
 800c2ec:	42a6      	cmp	r6, r4
 800c2ee:	d109      	bne.n	800c304 <__libc_init_array+0x24>
 800c2f0:	4d0b      	ldr	r5, [pc, #44]	; (800c320 <__libc_init_array+0x40>)
 800c2f2:	4c0c      	ldr	r4, [pc, #48]	; (800c324 <__libc_init_array+0x44>)
 800c2f4:	f000 f820 	bl	800c338 <_init>
 800c2f8:	1b64      	subs	r4, r4, r5
 800c2fa:	10a4      	asrs	r4, r4, #2
 800c2fc:	2600      	movs	r6, #0
 800c2fe:	42a6      	cmp	r6, r4
 800c300:	d105      	bne.n	800c30e <__libc_init_array+0x2e>
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	f855 3b04 	ldr.w	r3, [r5], #4
 800c308:	4798      	blx	r3
 800c30a:	3601      	adds	r6, #1
 800c30c:	e7ee      	b.n	800c2ec <__libc_init_array+0xc>
 800c30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c312:	4798      	blx	r3
 800c314:	3601      	adds	r6, #1
 800c316:	e7f2      	b.n	800c2fe <__libc_init_array+0x1e>
 800c318:	0800c7a8 	.word	0x0800c7a8
 800c31c:	0800c7a8 	.word	0x0800c7a8
 800c320:	0800c7a8 	.word	0x0800c7a8
 800c324:	0800c7ac 	.word	0x0800c7ac

0800c328 <memset>:
 800c328:	4402      	add	r2, r0
 800c32a:	4603      	mov	r3, r0
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d100      	bne.n	800c332 <memset+0xa>
 800c330:	4770      	bx	lr
 800c332:	f803 1b01 	strb.w	r1, [r3], #1
 800c336:	e7f9      	b.n	800c32c <memset+0x4>

0800c338 <_init>:
 800c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33a:	bf00      	nop
 800c33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c33e:	bc08      	pop	{r3}
 800c340:	469e      	mov	lr, r3
 800c342:	4770      	bx	lr

0800c344 <_fini>:
 800c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c346:	bf00      	nop
 800c348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c34a:	bc08      	pop	{r3}
 800c34c:	469e      	mov	lr, r3
 800c34e:	4770      	bx	lr
