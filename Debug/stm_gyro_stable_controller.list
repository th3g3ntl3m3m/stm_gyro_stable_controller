
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005950  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af8  08005af8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b00  08005b00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b04  08005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000564  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000570  20000570  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011103  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff4  00000000  00000000  0003113f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  00033138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  00034088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021dad  00000000  00000000  00034f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113ae  00000000  00000000  00056ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6216  00000000  00000000  0006807b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013e291  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042bc  00000000  00000000  0013e2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ac0 	.word	0x08005ac0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005ac0 	.word	0x08005ac0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_uldivmod>:
 8000650:	b953      	cbnz	r3, 8000668 <__aeabi_uldivmod+0x18>
 8000652:	b94a      	cbnz	r2, 8000668 <__aeabi_uldivmod+0x18>
 8000654:	2900      	cmp	r1, #0
 8000656:	bf08      	it	eq
 8000658:	2800      	cmpeq	r0, #0
 800065a:	bf1c      	itt	ne
 800065c:	f04f 31ff 	movne.w	r1, #4294967295
 8000660:	f04f 30ff 	movne.w	r0, #4294967295
 8000664:	f000 b96e 	b.w	8000944 <__aeabi_idiv0>
 8000668:	f1ad 0c08 	sub.w	ip, sp, #8
 800066c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000670:	f000 f806 	bl	8000680 <__udivmoddi4>
 8000674:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800067c:	b004      	add	sp, #16
 800067e:	4770      	bx	lr

08000680 <__udivmoddi4>:
 8000680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000684:	9d08      	ldr	r5, [sp, #32]
 8000686:	4604      	mov	r4, r0
 8000688:	468c      	mov	ip, r1
 800068a:	2b00      	cmp	r3, #0
 800068c:	f040 8083 	bne.w	8000796 <__udivmoddi4+0x116>
 8000690:	428a      	cmp	r2, r1
 8000692:	4617      	mov	r7, r2
 8000694:	d947      	bls.n	8000726 <__udivmoddi4+0xa6>
 8000696:	fab2 f282 	clz	r2, r2
 800069a:	b142      	cbz	r2, 80006ae <__udivmoddi4+0x2e>
 800069c:	f1c2 0020 	rsb	r0, r2, #32
 80006a0:	fa24 f000 	lsr.w	r0, r4, r0
 80006a4:	4091      	lsls	r1, r2
 80006a6:	4097      	lsls	r7, r2
 80006a8:	ea40 0c01 	orr.w	ip, r0, r1
 80006ac:	4094      	lsls	r4, r2
 80006ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006b2:	0c23      	lsrs	r3, r4, #16
 80006b4:	fbbc f6f8 	udiv	r6, ip, r8
 80006b8:	fa1f fe87 	uxth.w	lr, r7
 80006bc:	fb08 c116 	mls	r1, r8, r6, ip
 80006c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c4:	fb06 f10e 	mul.w	r1, r6, lr
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d909      	bls.n	80006e0 <__udivmoddi4+0x60>
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80006d2:	f080 8119 	bcs.w	8000908 <__udivmoddi4+0x288>
 80006d6:	4299      	cmp	r1, r3
 80006d8:	f240 8116 	bls.w	8000908 <__udivmoddi4+0x288>
 80006dc:	3e02      	subs	r6, #2
 80006de:	443b      	add	r3, r7
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	b2a4      	uxth	r4, r4
 80006e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e8:	fb08 3310 	mls	r3, r8, r0, r3
 80006ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80006f4:	45a6      	cmp	lr, r4
 80006f6:	d909      	bls.n	800070c <__udivmoddi4+0x8c>
 80006f8:	193c      	adds	r4, r7, r4
 80006fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fe:	f080 8105 	bcs.w	800090c <__udivmoddi4+0x28c>
 8000702:	45a6      	cmp	lr, r4
 8000704:	f240 8102 	bls.w	800090c <__udivmoddi4+0x28c>
 8000708:	3802      	subs	r0, #2
 800070a:	443c      	add	r4, r7
 800070c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000710:	eba4 040e 	sub.w	r4, r4, lr
 8000714:	2600      	movs	r6, #0
 8000716:	b11d      	cbz	r5, 8000720 <__udivmoddi4+0xa0>
 8000718:	40d4      	lsrs	r4, r2
 800071a:	2300      	movs	r3, #0
 800071c:	e9c5 4300 	strd	r4, r3, [r5]
 8000720:	4631      	mov	r1, r6
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	b902      	cbnz	r2, 800072a <__udivmoddi4+0xaa>
 8000728:	deff      	udf	#255	; 0xff
 800072a:	fab2 f282 	clz	r2, r2
 800072e:	2a00      	cmp	r2, #0
 8000730:	d150      	bne.n	80007d4 <__udivmoddi4+0x154>
 8000732:	1bcb      	subs	r3, r1, r7
 8000734:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000738:	fa1f f887 	uxth.w	r8, r7
 800073c:	2601      	movs	r6, #1
 800073e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000742:	0c21      	lsrs	r1, r4, #16
 8000744:	fb0e 331c 	mls	r3, lr, ip, r3
 8000748:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800074c:	fb08 f30c 	mul.w	r3, r8, ip
 8000750:	428b      	cmp	r3, r1
 8000752:	d907      	bls.n	8000764 <__udivmoddi4+0xe4>
 8000754:	1879      	adds	r1, r7, r1
 8000756:	f10c 30ff 	add.w	r0, ip, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0xe2>
 800075c:	428b      	cmp	r3, r1
 800075e:	f200 80e9 	bhi.w	8000934 <__udivmoddi4+0x2b4>
 8000762:	4684      	mov	ip, r0
 8000764:	1ac9      	subs	r1, r1, r3
 8000766:	b2a3      	uxth	r3, r4
 8000768:	fbb1 f0fe 	udiv	r0, r1, lr
 800076c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000770:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000774:	fb08 f800 	mul.w	r8, r8, r0
 8000778:	45a0      	cmp	r8, r4
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x10c>
 800077c:	193c      	adds	r4, r7, r4
 800077e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x10a>
 8000784:	45a0      	cmp	r8, r4
 8000786:	f200 80d9 	bhi.w	800093c <__udivmoddi4+0x2bc>
 800078a:	4618      	mov	r0, r3
 800078c:	eba4 0408 	sub.w	r4, r4, r8
 8000790:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000794:	e7bf      	b.n	8000716 <__udivmoddi4+0x96>
 8000796:	428b      	cmp	r3, r1
 8000798:	d909      	bls.n	80007ae <__udivmoddi4+0x12e>
 800079a:	2d00      	cmp	r5, #0
 800079c:	f000 80b1 	beq.w	8000902 <__udivmoddi4+0x282>
 80007a0:	2600      	movs	r6, #0
 80007a2:	e9c5 0100 	strd	r0, r1, [r5]
 80007a6:	4630      	mov	r0, r6
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	fab3 f683 	clz	r6, r3
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d14a      	bne.n	800084c <__udivmoddi4+0x1cc>
 80007b6:	428b      	cmp	r3, r1
 80007b8:	d302      	bcc.n	80007c0 <__udivmoddi4+0x140>
 80007ba:	4282      	cmp	r2, r0
 80007bc:	f200 80b8 	bhi.w	8000930 <__udivmoddi4+0x2b0>
 80007c0:	1a84      	subs	r4, r0, r2
 80007c2:	eb61 0103 	sbc.w	r1, r1, r3
 80007c6:	2001      	movs	r0, #1
 80007c8:	468c      	mov	ip, r1
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d0a8      	beq.n	8000720 <__udivmoddi4+0xa0>
 80007ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80007d2:	e7a5      	b.n	8000720 <__udivmoddi4+0xa0>
 80007d4:	f1c2 0320 	rsb	r3, r2, #32
 80007d8:	fa20 f603 	lsr.w	r6, r0, r3
 80007dc:	4097      	lsls	r7, r2
 80007de:	fa01 f002 	lsl.w	r0, r1, r2
 80007e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e6:	40d9      	lsrs	r1, r3
 80007e8:	4330      	orrs	r0, r6
 80007ea:	0c03      	lsrs	r3, r0, #16
 80007ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fc:	fb06 f108 	mul.w	r1, r6, r8
 8000800:	4299      	cmp	r1, r3
 8000802:	fa04 f402 	lsl.w	r4, r4, r2
 8000806:	d909      	bls.n	800081c <__udivmoddi4+0x19c>
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	f106 3cff 	add.w	ip, r6, #4294967295
 800080e:	f080 808d 	bcs.w	800092c <__udivmoddi4+0x2ac>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 808a 	bls.w	800092c <__udivmoddi4+0x2ac>
 8000818:	3e02      	subs	r6, #2
 800081a:	443b      	add	r3, r7
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	b281      	uxth	r1, r0
 8000820:	fbb3 f0fe 	udiv	r0, r3, lr
 8000824:	fb0e 3310 	mls	r3, lr, r0, r3
 8000828:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800082c:	fb00 f308 	mul.w	r3, r0, r8
 8000830:	428b      	cmp	r3, r1
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x1c4>
 8000834:	1879      	adds	r1, r7, r1
 8000836:	f100 3cff 	add.w	ip, r0, #4294967295
 800083a:	d273      	bcs.n	8000924 <__udivmoddi4+0x2a4>
 800083c:	428b      	cmp	r3, r1
 800083e:	d971      	bls.n	8000924 <__udivmoddi4+0x2a4>
 8000840:	3802      	subs	r0, #2
 8000842:	4439      	add	r1, r7
 8000844:	1acb      	subs	r3, r1, r3
 8000846:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800084a:	e778      	b.n	800073e <__udivmoddi4+0xbe>
 800084c:	f1c6 0c20 	rsb	ip, r6, #32
 8000850:	fa03 f406 	lsl.w	r4, r3, r6
 8000854:	fa22 f30c 	lsr.w	r3, r2, ip
 8000858:	431c      	orrs	r4, r3
 800085a:	fa20 f70c 	lsr.w	r7, r0, ip
 800085e:	fa01 f306 	lsl.w	r3, r1, r6
 8000862:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000866:	fa21 f10c 	lsr.w	r1, r1, ip
 800086a:	431f      	orrs	r7, r3
 800086c:	0c3b      	lsrs	r3, r7, #16
 800086e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000872:	fa1f f884 	uxth.w	r8, r4
 8000876:	fb0e 1119 	mls	r1, lr, r9, r1
 800087a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800087e:	fb09 fa08 	mul.w	sl, r9, r8
 8000882:	458a      	cmp	sl, r1
 8000884:	fa02 f206 	lsl.w	r2, r2, r6
 8000888:	fa00 f306 	lsl.w	r3, r0, r6
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x220>
 800088e:	1861      	adds	r1, r4, r1
 8000890:	f109 30ff 	add.w	r0, r9, #4294967295
 8000894:	d248      	bcs.n	8000928 <__udivmoddi4+0x2a8>
 8000896:	458a      	cmp	sl, r1
 8000898:	d946      	bls.n	8000928 <__udivmoddi4+0x2a8>
 800089a:	f1a9 0902 	sub.w	r9, r9, #2
 800089e:	4421      	add	r1, r4
 80008a0:	eba1 010a 	sub.w	r1, r1, sl
 80008a4:	b2bf      	uxth	r7, r7
 80008a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80008aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80008ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008b2:	fb00 f808 	mul.w	r8, r0, r8
 80008b6:	45b8      	cmp	r8, r7
 80008b8:	d907      	bls.n	80008ca <__udivmoddi4+0x24a>
 80008ba:	19e7      	adds	r7, r4, r7
 80008bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c0:	d22e      	bcs.n	8000920 <__udivmoddi4+0x2a0>
 80008c2:	45b8      	cmp	r8, r7
 80008c4:	d92c      	bls.n	8000920 <__udivmoddi4+0x2a0>
 80008c6:	3802      	subs	r0, #2
 80008c8:	4427      	add	r7, r4
 80008ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008ce:	eba7 0708 	sub.w	r7, r7, r8
 80008d2:	fba0 8902 	umull	r8, r9, r0, r2
 80008d6:	454f      	cmp	r7, r9
 80008d8:	46c6      	mov	lr, r8
 80008da:	4649      	mov	r1, r9
 80008dc:	d31a      	bcc.n	8000914 <__udivmoddi4+0x294>
 80008de:	d017      	beq.n	8000910 <__udivmoddi4+0x290>
 80008e0:	b15d      	cbz	r5, 80008fa <__udivmoddi4+0x27a>
 80008e2:	ebb3 020e 	subs.w	r2, r3, lr
 80008e6:	eb67 0701 	sbc.w	r7, r7, r1
 80008ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008ee:	40f2      	lsrs	r2, r6
 80008f0:	ea4c 0202 	orr.w	r2, ip, r2
 80008f4:	40f7      	lsrs	r7, r6
 80008f6:	e9c5 2700 	strd	r2, r7, [r5]
 80008fa:	2600      	movs	r6, #0
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	462e      	mov	r6, r5
 8000904:	4628      	mov	r0, r5
 8000906:	e70b      	b.n	8000720 <__udivmoddi4+0xa0>
 8000908:	4606      	mov	r6, r0
 800090a:	e6e9      	b.n	80006e0 <__udivmoddi4+0x60>
 800090c:	4618      	mov	r0, r3
 800090e:	e6fd      	b.n	800070c <__udivmoddi4+0x8c>
 8000910:	4543      	cmp	r3, r8
 8000912:	d2e5      	bcs.n	80008e0 <__udivmoddi4+0x260>
 8000914:	ebb8 0e02 	subs.w	lr, r8, r2
 8000918:	eb69 0104 	sbc.w	r1, r9, r4
 800091c:	3801      	subs	r0, #1
 800091e:	e7df      	b.n	80008e0 <__udivmoddi4+0x260>
 8000920:	4608      	mov	r0, r1
 8000922:	e7d2      	b.n	80008ca <__udivmoddi4+0x24a>
 8000924:	4660      	mov	r0, ip
 8000926:	e78d      	b.n	8000844 <__udivmoddi4+0x1c4>
 8000928:	4681      	mov	r9, r0
 800092a:	e7b9      	b.n	80008a0 <__udivmoddi4+0x220>
 800092c:	4666      	mov	r6, ip
 800092e:	e775      	b.n	800081c <__udivmoddi4+0x19c>
 8000930:	4630      	mov	r0, r6
 8000932:	e74a      	b.n	80007ca <__udivmoddi4+0x14a>
 8000934:	f1ac 0c02 	sub.w	ip, ip, #2
 8000938:	4439      	add	r1, r7
 800093a:	e713      	b.n	8000764 <__udivmoddi4+0xe4>
 800093c:	3802      	subs	r0, #2
 800093e:	443c      	add	r4, r7
 8000940:	e724      	b.n	800078c <__udivmoddi4+0x10c>
 8000942:	bf00      	nop

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <HAL_UART_RxCpltCallback>:
uint32_t PackageLastTimeReset_Motherboard;
uint32_t PackageLastTimeReset_GYRO;
uint32_t PackageLastTimeReset_OnBoardPC;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	if (UartHandle->Instance == USART1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4aab      	ldr	r2, [pc, #684]	; (8000c04 <HAL_UART_RxCpltCallback+0x2bc>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d16b      	bne.n	8000a32 <HAL_UART_RxCpltCallback+0xea>
	{
		if (USART1ReceiveState == 0)
 800095a:	4bab      	ldr	r3, [pc, #684]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d11f      	bne.n	80009a4 <HAL_UART_RxCpltCallback+0x5c>
		{
			if ((SerialOnBoardRequest.CR != 13) || (SerialOnBoardRequest.LF != 10))
 8000964:	4ba9      	ldr	r3, [pc, #676]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000966:	7a1b      	ldrb	r3, [r3, #8]
 8000968:	2b0d      	cmp	r3, #13
 800096a:	d103      	bne.n	8000974 <HAL_UART_RxCpltCallback+0x2c>
 800096c:	4ba7      	ldr	r3, [pc, #668]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 800096e:	7a5b      	ldrb	r3, [r3, #9]
 8000970:	2b0a      	cmp	r3, #10
 8000972:	d00c      	beq.n	800098e <HAL_UART_RxCpltCallback+0x46>
			{
				Res = HAL_UART_Receive_DMA(&huart1, LostByte, 1);
 8000974:	4ba6      	ldr	r3, [pc, #664]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	4619      	mov	r1, r3
 800097c:	48a5      	ldr	r0, [pc, #660]	; (8000c14 <HAL_UART_RxCpltCallback+0x2cc>)
 800097e:	f004 f809 	bl	8004994 <HAL_UART_Receive_DMA>
 8000982:	4603      	mov	r3, r0
 8000984:	73fb      	strb	r3, [r7, #15]
				USART1ReceiveState = 1;
 8000986:	4ba0      	ldr	r3, [pc, #640]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	e042      	b.n	8000a14 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
 				USART1ReceiveState = 10;
 800098e:	4b9e      	ldr	r3, [pc, #632]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 8000990:	220a      	movs	r2, #10
 8000992:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart1, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST);
 8000994:	220a      	movs	r2, #10
 8000996:	499d      	ldr	r1, [pc, #628]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000998:	489e      	ldr	r0, [pc, #632]	; (8000c14 <HAL_UART_RxCpltCallback+0x2cc>)
 800099a:	f003 fffb 	bl	8004994 <HAL_UART_Receive_DMA>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	e037      	b.n	8000a14 <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else
		{
			if(USART1ReceiveState == 1)
 80009a4:	4b98      	ldr	r3, [pc, #608]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d111      	bne.n	80009d2 <HAL_UART_RxCpltCallback+0x8a>
			{
				if (LostByte[0] == 13)
 80009ae:	4b98      	ldr	r3, [pc, #608]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b0d      	cmp	r3, #13
 80009b6:	d102      	bne.n	80009be <HAL_UART_RxCpltCallback+0x76>
				{
					USART1ReceiveState = 2;
 80009b8:	4b93      	ldr	r3, [pc, #588]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart1, (uint8_t*)LostByte, 1);
 80009be:	4b94      	ldr	r3, [pc, #592]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2201      	movs	r2, #1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4893      	ldr	r0, [pc, #588]	; (8000c14 <HAL_UART_RxCpltCallback+0x2cc>)
 80009c8:	f003 ffe4 	bl	8004994 <HAL_UART_Receive_DMA>
 80009cc:	4603      	mov	r3, r0
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e020      	b.n	8000a14 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				if (USART1ReceiveState == 2)
 80009d2:	4b8d      	ldr	r3, [pc, #564]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d11b      	bne.n	8000a14 <HAL_UART_RxCpltCallback+0xcc>
				{
					if (LostByte[0] == 10)
 80009dc:	4b8c      	ldr	r3, [pc, #560]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b0a      	cmp	r3, #10
 80009e4:	d10a      	bne.n	80009fc <HAL_UART_RxCpltCallback+0xb4>
					{
						USART1ReceiveState = 0;
 80009e6:	4b88      	ldr	r3, [pc, #544]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart1, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST);
 80009ec:	220a      	movs	r2, #10
 80009ee:	4987      	ldr	r1, [pc, #540]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 80009f0:	4888      	ldr	r0, [pc, #544]	; (8000c14 <HAL_UART_RxCpltCallback+0x2cc>)
 80009f2:	f003 ffcf 	bl	8004994 <HAL_UART_Receive_DMA>
 80009f6:	4603      	mov	r3, r0
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e00b      	b.n	8000a14 <HAL_UART_RxCpltCallback+0xcc>
					}
					else
					{
						USART1ReceiveState = 1;
 80009fc:	4b82      	ldr	r3, [pc, #520]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart1, (uint8_t*)LostByte, 1);
 8000a02:	4b83      	ldr	r3, [pc, #524]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2201      	movs	r2, #1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4882      	ldr	r0, [pc, #520]	; (8000c14 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a0c:	f003 ffc2 	bl	8004994 <HAL_UART_Receive_DMA>
 8000a10:	4603      	mov	r3, r0
 8000a12:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d00b      	beq.n	8000a32 <HAL_UART_RxCpltCallback+0xea>
		{
			MX_USART1_UART_Init();
 8000a1a:	f000 fc79 	bl	8001310 <MX_USART1_UART_Init>
			USART1ReceiveState = 0;
 8000a1e:	4b7a      	ldr	r3, [pc, #488]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart1, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST);
 8000a24:	220a      	movs	r2, #10
 8000a26:	4979      	ldr	r1, [pc, #484]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000a28:	487a      	ldr	r0, [pc, #488]	; (8000c14 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a2a:	f003 ffb3 	bl	8004994 <HAL_UART_Receive_DMA>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == USART2)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a78      	ldr	r2, [pc, #480]	; (8000c18 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d16b      	bne.n	8000b14 <HAL_UART_RxCpltCallback+0x1cc>
	{
		if (USART2ReceiveState == 0)
 8000a3c:	4b77      	ldr	r3, [pc, #476]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d11f      	bne.n	8000a86 <HAL_UART_RxCpltCallback+0x13e>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 8000a46:	4b76      	ldr	r3, [pc, #472]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d8>)
 8000a48:	7b9b      	ldrb	r3, [r3, #14]
 8000a4a:	2b0d      	cmp	r3, #13
 8000a4c:	d103      	bne.n	8000a56 <HAL_UART_RxCpltCallback+0x10e>
 8000a4e:	4b74      	ldr	r3, [pc, #464]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d8>)
 8000a50:	7bdb      	ldrb	r3, [r3, #15]
 8000a52:	2b0a      	cmp	r3, #10
 8000a54:	d00c      	beq.n	8000a70 <HAL_UART_RxCpltCallback+0x128>
			{
				Res = HAL_UART_Receive_DMA(&huart2, LostByte, 1);
 8000a56:	4b6e      	ldr	r3, [pc, #440]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4871      	ldr	r0, [pc, #452]	; (8000c24 <HAL_UART_RxCpltCallback+0x2dc>)
 8000a60:	f003 ff98 	bl	8004994 <HAL_UART_Receive_DMA>
 8000a64:	4603      	mov	r3, r0
 8000a66:	73fb      	strb	r3, [r7, #15]
				USART2ReceiveState = 1;
 8000a68:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	e042      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				USART2ReceiveState = 10;
 8000a70:	4b6a      	ldr	r3, [pc, #424]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000a72:	220a      	movs	r2, #10
 8000a74:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8000a76:	2210      	movs	r2, #16
 8000a78:	4969      	ldr	r1, [pc, #420]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d8>)
 8000a7a:	486a      	ldr	r0, [pc, #424]	; (8000c24 <HAL_UART_RxCpltCallback+0x2dc>)
 8000a7c:	f003 ff8a 	bl	8004994 <HAL_UART_Receive_DMA>
 8000a80:	4603      	mov	r3, r0
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	e037      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ae>
			}
		}
		else
		{
			if(USART2ReceiveState == 1)
 8000a86:	4b65      	ldr	r3, [pc, #404]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d111      	bne.n	8000ab4 <HAL_UART_RxCpltCallback+0x16c>
			{
				if (LostByte[0] == 13)
 8000a90:	4b5f      	ldr	r3, [pc, #380]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b0d      	cmp	r3, #13
 8000a98:	d102      	bne.n	8000aa0 <HAL_UART_RxCpltCallback+0x158>
				{
					USART2ReceiveState = 2;
 8000a9a:	4b60      	ldr	r3, [pc, #384]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8000aa0:	4b5b      	ldr	r3, [pc, #364]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	485e      	ldr	r0, [pc, #376]	; (8000c24 <HAL_UART_RxCpltCallback+0x2dc>)
 8000aaa:	f003 ff73 	bl	8004994 <HAL_UART_Receive_DMA>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
 8000ab2:	e020      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				if (USART2ReceiveState == 2)
 8000ab4:	4b59      	ldr	r3, [pc, #356]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d11b      	bne.n	8000af6 <HAL_UART_RxCpltCallback+0x1ae>
				{
					if (LostByte[0] == 10)
 8000abe:	4b54      	ldr	r3, [pc, #336]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b0a      	cmp	r3, #10
 8000ac6:	d10a      	bne.n	8000ade <HAL_UART_RxCpltCallback+0x196>
					{
						USART2ReceiveState = 0;
 8000ac8:	4b54      	ldr	r3, [pc, #336]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8000ace:	2210      	movs	r2, #16
 8000ad0:	4953      	ldr	r1, [pc, #332]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d8>)
 8000ad2:	4854      	ldr	r0, [pc, #336]	; (8000c24 <HAL_UART_RxCpltCallback+0x2dc>)
 8000ad4:	f003 ff5e 	bl	8004994 <HAL_UART_Receive_DMA>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e00b      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ae>
					}
					else
					{
						USART2ReceiveState = 1;
 8000ade:	4b4f      	ldr	r3, [pc, #316]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4619      	mov	r1, r3
 8000aec:	484d      	ldr	r0, [pc, #308]	; (8000c24 <HAL_UART_RxCpltCallback+0x2dc>)
 8000aee:	f003 ff51 	bl	8004994 <HAL_UART_Receive_DMA>
 8000af2:	4603      	mov	r3, r0
 8000af4:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00b      	beq.n	8000b14 <HAL_UART_RxCpltCallback+0x1cc>
		{
			MX_USART2_UART_Init();
 8000afc:	f000 fc32 	bl	8001364 <MX_USART2_UART_Init>
			USART2ReceiveState = 0;
 8000b00:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8000b06:	2210      	movs	r2, #16
 8000b08:	4945      	ldr	r1, [pc, #276]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d8>)
 8000b0a:	4846      	ldr	r0, [pc, #280]	; (8000c24 <HAL_UART_RxCpltCallback+0x2dc>)
 8000b0c:	f003 ff42 	bl	8004994 <HAL_UART_Receive_DMA>
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == USART3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a43      	ldr	r2, [pc, #268]	; (8000c28 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d16d      	bne.n	8000bfa <HAL_UART_RxCpltCallback+0x2b2>
	{
		if (USART3ReceiveState == 0)
 8000b1e:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d121      	bne.n	8000b6c <HAL_UART_RxCpltCallback+0x224>
		{
			if ((SerialArduinoGyroResponce.CR != 13) || (SerialArduinoGyroResponce.LF != 10))
 8000b28:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000b2e:	2b0d      	cmp	r3, #13
 8000b30:	d104      	bne.n	8000b3c <HAL_UART_RxCpltCallback+0x1f4>
 8000b32:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b34:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000b38:	2b0a      	cmp	r3, #10
 8000b3a:	d00c      	beq.n	8000b56 <HAL_UART_RxCpltCallback+0x20e>
			{
				Res = HAL_UART_Receive_DMA(&huart3, LostByte, 1);
 8000b3c:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2201      	movs	r2, #1
 8000b42:	4619      	mov	r1, r3
 8000b44:	483b      	ldr	r0, [pc, #236]	; (8000c34 <HAL_UART_RxCpltCallback+0x2ec>)
 8000b46:	f003 ff25 	bl	8004994 <HAL_UART_Receive_DMA>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	73fb      	strb	r3, [r7, #15]
				USART3ReceiveState = 1;
 8000b4e:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e042      	b.n	8000bdc <HAL_UART_RxCpltCallback+0x294>
			}
			else
			{
				USART3ReceiveState = 10;
 8000b56:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000b58:	220a      	movs	r2, #10
 8000b5a:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart3, (uint8_t*)SerialArduinoGyroResponce.Buffer, GYRO_ARDUINO_RESPONCE_SIZE);
 8000b5c:	222a      	movs	r2, #42	; 0x2a
 8000b5e:	4934      	ldr	r1, [pc, #208]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b60:	4834      	ldr	r0, [pc, #208]	; (8000c34 <HAL_UART_RxCpltCallback+0x2ec>)
 8000b62:	f003 ff17 	bl	8004994 <HAL_UART_Receive_DMA>
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e037      	b.n	8000bdc <HAL_UART_RxCpltCallback+0x294>
			}
		}
		else
		{
			if(USART3ReceiveState == 1)
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d111      	bne.n	8000b9a <HAL_UART_RxCpltCallback+0x252>
			{
				if (LostByte[0] == 13)
 8000b76:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b0d      	cmp	r3, #13
 8000b7e:	d102      	bne.n	8000b86 <HAL_UART_RxCpltCallback+0x23e>
				{
					USART3ReceiveState = 2;
 8000b80:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart3, (uint8_t*)LostByte, 1);
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4829      	ldr	r0, [pc, #164]	; (8000c34 <HAL_UART_RxCpltCallback+0x2ec>)
 8000b90:	f003 ff00 	bl	8004994 <HAL_UART_Receive_DMA>
 8000b94:	4603      	mov	r3, r0
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	e020      	b.n	8000bdc <HAL_UART_RxCpltCallback+0x294>
			}
			else
			{
				if (USART3ReceiveState == 2)
 8000b9a:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d11b      	bne.n	8000bdc <HAL_UART_RxCpltCallback+0x294>
				{
					if (LostByte[0] == 10)
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b0a      	cmp	r3, #10
 8000bac:	d10a      	bne.n	8000bc4 <HAL_UART_RxCpltCallback+0x27c>
					{
						USART3ReceiveState = 0;
 8000bae:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart3, (uint8_t*)SerialArduinoGyroResponce.Buffer, GYRO_ARDUINO_RESPONCE_SIZE);
 8000bb4:	222a      	movs	r2, #42	; 0x2a
 8000bb6:	491e      	ldr	r1, [pc, #120]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e8>)
 8000bb8:	481e      	ldr	r0, [pc, #120]	; (8000c34 <HAL_UART_RxCpltCallback+0x2ec>)
 8000bba:	f003 feeb 	bl	8004994 <HAL_UART_Receive_DMA>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e00b      	b.n	8000bdc <HAL_UART_RxCpltCallback+0x294>
					}
					else
					{
						USART3ReceiveState = 1;
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart3, (uint8_t*)LostByte, 1);
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4818      	ldr	r0, [pc, #96]	; (8000c34 <HAL_UART_RxCpltCallback+0x2ec>)
 8000bd4:	f003 fede 	bl	8004994 <HAL_UART_Receive_DMA>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00b      	beq.n	8000bfa <HAL_UART_RxCpltCallback+0x2b2>
		{
			MX_USART3_UART_Init();
 8000be2:	f000 fbe9 	bl	80013b8 <MX_USART3_UART_Init>
			USART3ReceiveState = 0;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart3, (uint8_t*)SerialArduinoGyroResponce.Buffer, GYRO_ARDUINO_RESPONCE_SIZE);
 8000bec:	222a      	movs	r2, #42	; 0x2a
 8000bee:	4910      	ldr	r1, [pc, #64]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e8>)
 8000bf0:	4810      	ldr	r0, [pc, #64]	; (8000c34 <HAL_UART_RxCpltCallback+0x2ec>)
 8000bf2:	f003 fecf 	bl	8004994 <HAL_UART_Receive_DMA>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40011000 	.word	0x40011000
 8000c08:	20000028 	.word	0x20000028
 8000c0c:	200003dc 	.word	0x200003dc
 8000c10:	20000568 	.word	0x20000568
 8000c14:	20000324 	.word	0x20000324
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	20000029 	.word	0x20000029
 8000c20:	20000134 	.word	0x20000134
 8000c24:	2000048c 	.word	0x2000048c
 8000c28:	40004800 	.word	0x40004800
 8000c2c:	2000002a 	.word	0x2000002a
 8000c30:	20000368 	.word	0x20000368
 8000c34:	200000f0 	.word	0x200000f0

08000c38 <LoopLoadPkgUART2>:
float Right;

uint8_t ParameterNumber;

void LoopLoadPkgUART2()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	SerialControlWheelsRequest.ControlMode = 0;
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <LoopLoadPkgUART2+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
	SerialControlWheelsRequest.ParameterNumber = 0;
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <LoopLoadPkgUART2+0x40>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	705a      	strb	r2, [r3, #1]
	SerialControlWheelsRequest.WheelLeft = Left;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <LoopLoadPkgUART2+0x44>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <LoopLoadPkgUART2+0x40>)
 8000c4e:	3306      	adds	r3, #6
 8000c50:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight = Right;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <LoopLoadPkgUART2+0x48>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <LoopLoadPkgUART2+0x40>)
 8000c58:	330a      	adds	r3, #10
 8000c5a:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.CR=13;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <LoopLoadPkgUART2+0x40>)
 8000c5e:	220d      	movs	r2, #13
 8000c60:	739a      	strb	r2, [r3, #14]
	SerialControlWheelsRequest.LF=10;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <LoopLoadPkgUART2+0x40>)
 8000c64:	220a      	movs	r2, #10
 8000c66:	73da      	strb	r2, [r3, #15]

	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)SerialControlWheelsRequest.Buffer, WHEELS_REQUEST_SIZE);
 8000c68:	2210      	movs	r2, #16
 8000c6a:	4903      	ldr	r1, [pc, #12]	; (8000c78 <LoopLoadPkgUART2+0x40>)
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <LoopLoadPkgUART2+0x4c>)
 8000c6e:	f003 fe13 	bl	8004898 <HAL_UART_Transmit_DMA>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000144 	.word	0x20000144
 8000c7c:	200001b8 	.word	0x200001b8
 8000c80:	2000008c 	.word	0x2000008c
 8000c84:	2000048c 	.word	0x2000048c

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f001 f968 	bl	8001f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f8fc 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f000 fc10 	bl	80014b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c98:	f000 fbb8 	bl	800140c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c9c:	f000 fb62 	bl	8001364 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000ca0:	f000 fb36 	bl	8001310 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000ca4:	f000 f9ae 	bl	8001004 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ca8:	f000 fb86 	bl	80013b8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000cac:	f000 f958 	bl	8000f60 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000cb0:	f000 f9de 	bl	8001070 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000cb4:	f000 fa72 	bl	800119c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000cb8:	f000 faa6 	bl	8001208 <MX_TIM7_Init>
  MX_TIM14_Init();
 8000cbc:	f000 fada 	bl	8001274 <MX_TIM14_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GetTick() - PackageLastTimeReset_OnBoardPC > 1000)
 8000cc0:	f001 f9b4 	bl	800202c <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	4b62      	ldr	r3, [pc, #392]	; (8000e50 <main+0x1c8>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cd0:	d90e      	bls.n	8000cf0 <main+0x68>
	  {
		  MX_USART1_UART_Init();
 8000cd2:	f000 fb1d 	bl	8001310 <MX_USART1_UART_Init>
		  USART1ReceiveState = 0;
 8000cd6:	4b5f      	ldr	r3, [pc, #380]	; (8000e54 <main+0x1cc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(&huart1, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST);
 8000cdc:	220a      	movs	r2, #10
 8000cde:	495e      	ldr	r1, [pc, #376]	; (8000e58 <main+0x1d0>)
 8000ce0:	485e      	ldr	r0, [pc, #376]	; (8000e5c <main+0x1d4>)
 8000ce2:	f003 fe57 	bl	8004994 <HAL_UART_Receive_DMA>
		  PackageLastTimeReset_OnBoardPC = HAL_GetTick();
 8000ce6:	f001 f9a1 	bl	800202c <HAL_GetTick>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a58      	ldr	r2, [pc, #352]	; (8000e50 <main+0x1c8>)
 8000cee:	6013      	str	r3, [r2, #0]
	  }

	  if (HAL_GetTick() - PackageLastTimeReset_Motherboard > 1000) // UART2 RECEIVE FEEDBACK
 8000cf0:	f001 f99c 	bl	800202c <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	4b5a      	ldr	r3, [pc, #360]	; (8000e60 <main+0x1d8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d00:	d90e      	bls.n	8000d20 <main+0x98>
	  {
		  MX_USART2_UART_Init();
 8000d02:	f000 fb2f 	bl	8001364 <MX_USART2_UART_Init>
		  USART2ReceiveState = 0;
 8000d06:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <main+0x1dc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8000d0c:	2210      	movs	r2, #16
 8000d0e:	4956      	ldr	r1, [pc, #344]	; (8000e68 <main+0x1e0>)
 8000d10:	4856      	ldr	r0, [pc, #344]	; (8000e6c <main+0x1e4>)
 8000d12:	f003 fe3f 	bl	8004994 <HAL_UART_Receive_DMA>
		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 8000d16:	f001 f989 	bl	800202c <HAL_GetTick>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a50      	ldr	r2, [pc, #320]	; (8000e60 <main+0x1d8>)
 8000d1e:	6013      	str	r3, [r2, #0]
	  }

	  if (HAL_GetTick() - PackageLastTimeReset_GYRO > 1000)
 8000d20:	f001 f984 	bl	800202c <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	4b52      	ldr	r3, [pc, #328]	; (8000e70 <main+0x1e8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d30:	d90e      	bls.n	8000d50 <main+0xc8>
	  {
		  MX_USART3_UART_Init();
 8000d32:	f000 fb41 	bl	80013b8 <MX_USART3_UART_Init>
		  USART3ReceiveState = 0;
 8000d36:	4b4f      	ldr	r3, [pc, #316]	; (8000e74 <main+0x1ec>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(&huart3, (uint8_t*)SerialArduinoGyroResponce.Buffer, GYRO_ARDUINO_RESPONCE_SIZE);
 8000d3c:	222a      	movs	r2, #42	; 0x2a
 8000d3e:	494e      	ldr	r1, [pc, #312]	; (8000e78 <main+0x1f0>)
 8000d40:	484e      	ldr	r0, [pc, #312]	; (8000e7c <main+0x1f4>)
 8000d42:	f003 fe27 	bl	8004994 <HAL_UART_Receive_DMA>
		  PackageLastTimeReset_GYRO = HAL_GetTick();
 8000d46:	f001 f971 	bl	800202c <HAL_GetTick>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a48      	ldr	r2, [pc, #288]	; (8000e70 <main+0x1e8>)
 8000d4e:	6013      	str	r3, [r2, #0]
	  }

	  if ((USART2ReceiveState == 10) && (SerialControlWheelsResponce.CR == 13) && (SerialControlWheelsResponce.LF == 10))
 8000d50:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <main+0x1dc>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b0a      	cmp	r3, #10
 8000d58:	d114      	bne.n	8000d84 <main+0xfc>
 8000d5a:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <main+0x1e0>)
 8000d5c:	7b9b      	ldrb	r3, [r3, #14]
 8000d5e:	2b0d      	cmp	r3, #13
 8000d60:	d110      	bne.n	8000d84 <main+0xfc>
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <main+0x1e0>)
 8000d64:	7bdb      	ldrb	r3, [r3, #15]
 8000d66:	2b0a      	cmp	r3, #10
 8000d68:	d10c      	bne.n	8000d84 <main+0xfc>
	  {
		  USART2ReceiveState = 0;
 8000d6a:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <main+0x1dc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d74:	4842      	ldr	r0, [pc, #264]	; (8000e80 <main+0x1f8>)
 8000d76:	f002 fa90 	bl	800329a <HAL_GPIO_TogglePin>

		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 8000d7a:	f001 f957 	bl	800202c <HAL_GetTick>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4a37      	ldr	r2, [pc, #220]	; (8000e60 <main+0x1d8>)
 8000d82:	6013      	str	r3, [r2, #0]
	  }

	  if ((USART3ReceiveState == 10) && (SerialArduinoGyroResponce.CR == 13) && (SerialArduinoGyroResponce.LF == 10))
 8000d84:	4b3b      	ldr	r3, [pc, #236]	; (8000e74 <main+0x1ec>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b0a      	cmp	r3, #10
 8000d8c:	d116      	bne.n	8000dbc <main+0x134>
 8000d8e:	4b3a      	ldr	r3, [pc, #232]	; (8000e78 <main+0x1f0>)
 8000d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000d94:	2b0d      	cmp	r3, #13
 8000d96:	d111      	bne.n	8000dbc <main+0x134>
 8000d98:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <main+0x1f0>)
 8000d9a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000d9e:	2b0a      	cmp	r3, #10
 8000da0:	d10c      	bne.n	8000dbc <main+0x134>
	  {
		  USART3ReceiveState = 0;
 8000da2:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <main+0x1ec>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000da8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dac:	4834      	ldr	r0, [pc, #208]	; (8000e80 <main+0x1f8>)
 8000dae:	f002 fa74 	bl	800329a <HAL_GPIO_TogglePin>

		  PackageLastTimeReset_GYRO = HAL_GetTick();
 8000db2:	f001 f93b 	bl	800202c <HAL_GetTick>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a2d      	ldr	r2, [pc, #180]	; (8000e70 <main+0x1e8>)
 8000dba:	6013      	str	r3, [r2, #0]
	  }

	  if ((USART1ReceiveState == 10) && (SerialOnBoardRequest.CR == 13) && (SerialOnBoardRequest.LF == 10))
 8000dbc:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <main+0x1cc>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b0a      	cmp	r3, #10
 8000dc4:	d136      	bne.n	8000e34 <main+0x1ac>
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <main+0x1d0>)
 8000dc8:	7a1b      	ldrb	r3, [r3, #8]
 8000dca:	2b0d      	cmp	r3, #13
 8000dcc:	d132      	bne.n	8000e34 <main+0x1ac>
 8000dce:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <main+0x1d0>)
 8000dd0:	7a5b      	ldrb	r3, [r3, #9]
 8000dd2:	2b0a      	cmp	r3, #10
 8000dd4:	d12e      	bne.n	8000e34 <main+0x1ac>
	  {
		  USART1ReceiveState = 0;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <main+0x1cc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de0:	4827      	ldr	r0, [pc, #156]	; (8000e80 <main+0x1f8>)
 8000de2:	f002 fa5a 	bl	800329a <HAL_GPIO_TogglePin>

		  if ((SerialOnBoardRequest.Linear <= 0.3) && (SerialOnBoardRequest.Linear >= -0.3))
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <main+0x1d0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fb50 	bl	8000490 <__aeabi_f2d>
 8000df0:	a313      	add	r3, pc, #76	; (adr r3, 8000e40 <main+0x1b8>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	f7ff fc0d 	bl	8000614 <__aeabi_dcmple>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d014      	beq.n	8000e2a <main+0x1a2>
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <main+0x1d0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fb43 	bl	8000490 <__aeabi_f2d>
 8000e0a:	a30f      	add	r3, pc, #60	; (adr r3, 8000e48 <main+0x1c0>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	f7ff fc0a 	bl	8000628 <__aeabi_dcmpge>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d007      	beq.n	8000e2a <main+0x1a2>
		  {
			  Left = SerialOnBoardRequest.Linear;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <main+0x1d0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <main+0x1fc>)
 8000e20:	6013      	str	r3, [r2, #0]
			  Right = SerialOnBoardRequest.Linear;
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <main+0x1d0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <main+0x200>)
 8000e28:	6013      	str	r3, [r2, #0]
		  }

		  PackageLastTimeReset_OnBoardPC = HAL_GetTick();
 8000e2a:	f001 f8ff 	bl	800202c <HAL_GetTick>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <main+0x1c8>)
 8000e32:	6013      	str	r3, [r2, #0]
	  }

	  LoopLoadPkgUART2();
 8000e34:	f7ff ff00 	bl	8000c38 <LoopLoadPkgUART2>
	  if (HAL_GetTick() - PackageLastTimeReset_OnBoardPC > 1000)
 8000e38:	e742      	b.n	8000cc0 <main+0x38>
 8000e3a:	bf00      	nop
 8000e3c:	f3af 8000 	nop.w
 8000e40:	33333333 	.word	0x33333333
 8000e44:	3fd33333 	.word	0x3fd33333
 8000e48:	33333333 	.word	0x33333333
 8000e4c:	bfd33333 	.word	0xbfd33333
 8000e50:	200001b4 	.word	0x200001b4
 8000e54:	20000028 	.word	0x20000028
 8000e58:	200003dc 	.word	0x200003dc
 8000e5c:	20000324 	.word	0x20000324
 8000e60:	200003e8 	.word	0x200003e8
 8000e64:	20000029 	.word	0x20000029
 8000e68:	20000134 	.word	0x20000134
 8000e6c:	2000048c 	.word	0x2000048c
 8000e70:	20000560 	.word	0x20000560
 8000e74:	2000002a 	.word	0x2000002a
 8000e78:	20000368 	.word	0x20000368
 8000e7c:	200000f0 	.word	0x200000f0
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	200001b8 	.word	0x200001b8
 8000e88:	2000008c 	.word	0x2000008c

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	2230      	movs	r2, #48	; 0x30
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f004 fe08 	bl	8005ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <SystemClock_Config+0xcc>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a27      	ldr	r2, [pc, #156]	; (8000f58 <SystemClock_Config+0xcc>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <SystemClock_Config+0xcc>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <SystemClock_Config+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <SystemClock_Config+0xd0>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <SystemClock_Config+0xd0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f00:	23a8      	movs	r3, #168	; 0xa8
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 f9dd 	bl	80032d0 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f1c:	f000 fbaa 	bl	8001674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	230f      	movs	r3, #15
 8000f22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f24:	2302      	movs	r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fc3e 	bl	80037c0 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f4a:	f000 fb93 	bl	8001674 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	; 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <MX_ADC1_Init+0x9c>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <MX_ADC1_Init+0xa0>)
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fc2:	f001 f83f 	bl	8002044 <HAL_ADC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fcc:	f000 fb52 	bl	8001674 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_ADC1_Init+0x98>)
 8000fe2:	f001 f873 	bl	80020cc <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fec:	f000 fb42 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000021c 	.word	0x2000021c
 8000ffc:	40012000 	.word	0x40012000
 8001000:	0f000001 	.word	0x0f000001

08001004 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_SPI1_Init+0x64>)
 800100a:	4a18      	ldr	r2, [pc, #96]	; (800106c <MX_SPI1_Init+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_SPI1_Init+0x64>)
 8001010:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001014:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_SPI1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_SPI1_Init+0x64>)
 8001030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001034:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_SPI1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_SPI1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_SPI1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_SPI1_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_SPI1_Init+0x64>)
 8001050:	220a      	movs	r2, #10
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_SPI1_Init+0x64>)
 8001056:	f002 fdaf 	bl	8003bb8 <HAL_SPI_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001060:	f000 fb08 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200003ec 	.word	0x200003ec
 800106c:	40013000 	.word	0x40013000

08001070 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	; 0x38
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <MX_TIM2_Init+0x128>)
 80010a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a8:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <MX_TIM2_Init+0x128>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <MX_TIM2_Init+0x128>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 80010b4:	4b38      	ldr	r3, [pc, #224]	; (8001198 <MX_TIM2_Init+0x128>)
 80010b6:	2259      	movs	r2, #89	; 0x59
 80010b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b37      	ldr	r3, [pc, #220]	; (8001198 <MX_TIM2_Init+0x128>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c0:	4b35      	ldr	r3, [pc, #212]	; (8001198 <MX_TIM2_Init+0x128>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c6:	4834      	ldr	r0, [pc, #208]	; (8001198 <MX_TIM2_Init+0x128>)
 80010c8:	f002 fdff 	bl	8003cca <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80010d2:	f000 facf 	bl	8001674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e0:	4619      	mov	r1, r3
 80010e2:	482d      	ldr	r0, [pc, #180]	; (8001198 <MX_TIM2_Init+0x128>)
 80010e4:	f002 ff5c 	bl	8003fa0 <HAL_TIM_ConfigClockSource>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80010ee:	f000 fac1 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f2:	4829      	ldr	r0, [pc, #164]	; (8001198 <MX_TIM2_Init+0x128>)
 80010f4:	f002 fe38 	bl	8003d68 <HAL_TIM_PWM_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80010fe:	f000 fab9 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	4619      	mov	r1, r3
 8001110:	4821      	ldr	r0, [pc, #132]	; (8001198 <MX_TIM2_Init+0x128>)
 8001112:	f003 faf7 	bl	8004704 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800111c:	f000 faaa 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	2360      	movs	r3, #96	; 0x60
 8001122:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	4818      	ldr	r0, [pc, #96]	; (8001198 <MX_TIM2_Init+0x128>)
 8001138:	f002 fe70 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001142:	f000 fa97 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2204      	movs	r2, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4812      	ldr	r0, [pc, #72]	; (8001198 <MX_TIM2_Init+0x128>)
 800114e:	f002 fe65 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001158:	f000 fa8c 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2208      	movs	r2, #8
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_TIM2_Init+0x128>)
 8001164:	f002 fe5a 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800116e:	f000 fa81 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	220c      	movs	r2, #12
 8001176:	4619      	mov	r1, r3
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <MX_TIM2_Init+0x128>)
 800117a:	f002 fe4f 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001184:	f000 fa76 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <MX_TIM2_Init+0x128>)
 800118a:	f000 fbc7 	bl	800191c <HAL_TIM_MspPostInit>

}
 800118e:	bf00      	nop
 8001190:	3738      	adds	r7, #56	; 0x38
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000444 	.word	0x20000444

0800119c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_TIM6_Init+0x64>)
 80011ac:	4a15      	ldr	r2, [pc, #84]	; (8001204 <MX_TIM6_Init+0x68>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_TIM6_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_TIM6_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_TIM6_Init+0x64>)
 80011be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_TIM6_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <MX_TIM6_Init+0x64>)
 80011cc:	f002 fd7d 	bl	8003cca <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80011d6:	f000 fa4d 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <MX_TIM6_Init+0x64>)
 80011e8:	f003 fa8c 	bl	8004704 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80011f2:	f000 fa3f 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000394 	.word	0x20000394
 8001204:	40001000 	.word	0x40001000

08001208 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_TIM7_Init+0x64>)
 8001218:	4a15      	ldr	r2, [pc, #84]	; (8001270 <MX_TIM7_Init+0x68>)
 800121a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_TIM7_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_TIM7_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_TIM7_Init+0x64>)
 800122a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_TIM7_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_TIM7_Init+0x64>)
 8001238:	f002 fd47 	bl	8003cca <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001242:	f000 fa17 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_TIM7_Init+0x64>)
 8001254:	f003 fa56 	bl	8004704 <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800125e:	f000 fa09 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000518 	.word	0x20000518
 8001270:	40001400 	.word	0x40001400

08001274 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	615a      	str	r2, [r3, #20]
 800128a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800128c:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <MX_TIM14_Init+0x94>)
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <MX_TIM14_Init+0x98>)
 8001290:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 720;
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_TIM14_Init+0x94>)
 8001294:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001298:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <MX_TIM14_Init+0x94>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_TIM14_Init+0x94>)
 80012a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012a6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_TIM14_Init+0x94>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_TIM14_Init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80012b4:	4814      	ldr	r0, [pc, #80]	; (8001308 <MX_TIM14_Init+0x94>)
 80012b6:	f002 fd08 	bl	8003cca <HAL_TIM_Base_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 80012c0:	f000 f9d8 	bl	8001674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80012c4:	4810      	ldr	r0, [pc, #64]	; (8001308 <MX_TIM14_Init+0x94>)
 80012c6:	f002 fd4f 	bl	8003d68 <HAL_TIM_PWM_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80012d0:	f000 f9d0 	bl	8001674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d4:	2360      	movs	r3, #96	; 0x60
 80012d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80012d8:	2332      	movs	r3, #50	; 0x32
 80012da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <MX_TIM14_Init+0x94>)
 80012ec:	f002 fd96 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80012f6:	f000 f9bd 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <MX_TIM14_Init+0x94>)
 80012fc:	f000 fb0e 	bl	800191c <HAL_TIM_MspPostInit>

}
 8001300:	bf00      	nop
 8001302:	3720      	adds	r7, #32
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200004d0 	.word	0x200004d0
 800130c:	40002000 	.word	0x40002000

08001310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_USART1_UART_Init+0x50>)
 8001318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_USART1_UART_Init+0x4c>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_USART1_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_USART1_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_USART1_UART_Init+0x4c>)
 8001348:	f003 fa58 	bl	80047fc <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001352:	f000 f98f 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000324 	.word	0x20000324
 8001360:	40011000 	.word	0x40011000

08001364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_USART2_UART_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001370:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USART2_UART_Init+0x4c>)
 800139c:	f003 fa2e 	bl	80047fc <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013a6:	f000 f965 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000048c 	.word	0x2000048c
 80013b4:	40004400 	.word	0x40004400

080013b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <MX_USART3_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013f0:	f003 fa04 	bl	80047fc <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f000 f93b 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200000f0 	.word	0x200000f0
 8001408:	40004800 	.word	0x40004800

0800140c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <MX_DMA_Init+0xa8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <MX_DMA_Init+0xa8>)
 800141c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <MX_DMA_Init+0xa8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <MX_DMA_Init+0xa8>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <MX_DMA_Init+0xa8>)
 8001438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_DMA_Init+0xa8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	200c      	movs	r0, #12
 8001450:	f001 f935 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001454:	200c      	movs	r0, #12
 8001456:	f001 f94e 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	200e      	movs	r0, #14
 8001460:	f001 f92d 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001464:	200e      	movs	r0, #14
 8001466:	f001 f946 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2010      	movs	r0, #16
 8001470:	f001 f925 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001474:	2010      	movs	r0, #16
 8001476:	f001 f93e 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2011      	movs	r0, #17
 8001480:	f001 f91d 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001484:	2011      	movs	r0, #17
 8001486:	f001 f936 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	203a      	movs	r0, #58	; 0x3a
 8001490:	f001 f915 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001494:	203a      	movs	r0, #58	; 0x3a
 8001496:	f001 f92e 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2046      	movs	r0, #70	; 0x46
 80014a0:	f001 f90d 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80014a4:	2046      	movs	r0, #70	; 0x46
 80014a6:	f001 f926 	bl	80026f6 <HAL_NVIC_EnableIRQ>

}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	4b62      	ldr	r3, [pc, #392]	; (800165c <MX_GPIO_Init+0x1a4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a61      	ldr	r2, [pc, #388]	; (800165c <MX_GPIO_Init+0x1a4>)
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b5f      	ldr	r3, [pc, #380]	; (800165c <MX_GPIO_Init+0x1a4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <MX_GPIO_Init+0x1a4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a5a      	ldr	r2, [pc, #360]	; (800165c <MX_GPIO_Init+0x1a4>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b58      	ldr	r3, [pc, #352]	; (800165c <MX_GPIO_Init+0x1a4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b54      	ldr	r3, [pc, #336]	; (800165c <MX_GPIO_Init+0x1a4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a53      	ldr	r2, [pc, #332]	; (800165c <MX_GPIO_Init+0x1a4>)
 8001510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b51      	ldr	r3, [pc, #324]	; (800165c <MX_GPIO_Init+0x1a4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b4d      	ldr	r3, [pc, #308]	; (800165c <MX_GPIO_Init+0x1a4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a4c      	ldr	r2, [pc, #304]	; (800165c <MX_GPIO_Init+0x1a4>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b4a      	ldr	r3, [pc, #296]	; (800165c <MX_GPIO_Init+0x1a4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b46      	ldr	r3, [pc, #280]	; (800165c <MX_GPIO_Init+0x1a4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a45      	ldr	r2, [pc, #276]	; (800165c <MX_GPIO_Init+0x1a4>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b43      	ldr	r3, [pc, #268]	; (800165c <MX_GPIO_Init+0x1a4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b3f      	ldr	r3, [pc, #252]	; (800165c <MX_GPIO_Init+0x1a4>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a3e      	ldr	r2, [pc, #248]	; (800165c <MX_GPIO_Init+0x1a4>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b3c      	ldr	r3, [pc, #240]	; (800165c <MX_GPIO_Init+0x1a4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2104      	movs	r1, #4
 800157a:	4839      	ldr	r0, [pc, #228]	; (8001660 <MX_GPIO_Init+0x1a8>)
 800157c:	f001 fe74 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin|PLATFORM_PWR_ON_RELAY_Pin|PWR_STATION_RELAY_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001586:	4837      	ldr	r0, [pc, #220]	; (8001664 <MX_GPIO_Init+0x1ac>)
 8001588:	f001 fe6e 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001592:	4835      	ldr	r0, [pc, #212]	; (8001668 <MX_GPIO_Init+0x1b0>)
 8001594:	f001 fe68 	bl	8003268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM20948_CS_Pin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 8001598:	2304      	movs	r3, #4
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	482c      	ldr	r0, [pc, #176]	; (8001660 <MX_GPIO_Init+0x1a8>)
 80015b0:	f001 fcbe 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : J11_RESERVED_Pin J12_RESERVED_Pin J13_RESERVED_Pin J14_RESERVED_Pin
                           J2_GYRO_SELECTOR_Pin J3_SERVO_SELECTOR_Pin J4_POWER_LOGIC_Pin J5_LED_LINE_Pin
                           J6_IK_SENSORS_Pin J7_UART_PROTO_Pin J8_AUTO_PARKING_Pin J9_GYRO_STABLE_Pin
                           J10_FACTORY_MODE_Pin */
  GPIO_InitStruct.Pin = J11_RESERVED_Pin|J12_RESERVED_Pin|J13_RESERVED_Pin|J14_RESERVED_Pin
 80015b4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80015b8:	61fb      	str	r3, [r7, #28]
                          |J2_GYRO_SELECTOR_Pin|J3_SERVO_SELECTOR_Pin|J4_POWER_LOGIC_Pin|J5_LED_LINE_Pin
                          |J6_IK_SENSORS_Pin|J7_UART_PROTO_Pin|J8_AUTO_PARKING_Pin|J9_GYRO_STABLE_Pin
                          |J10_FACTORY_MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c2:	f107 031c 	add.w	r3, r7, #28
 80015c6:	4619      	mov	r1, r3
 80015c8:	4825      	ldr	r0, [pc, #148]	; (8001660 <MX_GPIO_Init+0x1a8>)
 80015ca:	f001 fcb1 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_2_PWR_ON_Pin J15_RESERVED_Pin */
  GPIO_InitStruct.Pin = BTN_2_PWR_ON_Pin|J15_RESERVED_Pin;
 80015ce:	f240 2302 	movw	r3, #514	; 0x202
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <MX_GPIO_Init+0x1ac>)
 80015e4:	f001 fca4 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_LED_Pin */
  GPIO_InitStruct.Pin = BTN_1_LED_Pin;
 80015e8:	2301      	movs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_1_LED_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	481c      	ldr	r0, [pc, #112]	; (800166c <MX_GPIO_Init+0x1b4>)
 80015fc:	f001 fc98 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRIVER_STEP_Pin DRIVER_DIR_Pin PLATFORM_PWR_ON_RELAY_Pin PWR_STATION_RELAY_Pin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin|PLATFORM_PWR_ON_RELAY_Pin|PWR_STATION_RELAY_Pin;
 8001600:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4812      	ldr	r0, [pc, #72]	; (8001664 <MX_GPIO_Init+0x1ac>)
 800161a:	f001 fc89 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_SERVICE_LED_Pin */
  GPIO_InitStruct.Pin = J1_SERVICE_LED_Pin;
 800161e:	2304      	movs	r3, #4
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(J1_SERVICE_LED_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	480f      	ldr	r0, [pc, #60]	; (8001670 <MX_GPIO_Init+0x1b8>)
 8001632:	f001 fc7d 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8001636:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	; (8001668 <MX_GPIO_Init+0x1b0>)
 8001650:	f001 fc6e 	bl	8002f30 <HAL_GPIO_Init>

}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	; 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	40021000 	.word	0x40021000
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40020000 	.word	0x40020000
 8001670:	40020400 	.word	0x40020400

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	e7fe      	b.n	800167c <Error_Handler+0x8>
	...

08001680 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_MspInit+0x4c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_MspInit+0x4c>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x4c>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x4c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x4c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a31      	ldr	r2, [pc, #196]	; (80017b4 <HAL_ADC_MspInit+0xe4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d15b      	bne.n	80017aa <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a21      	ldr	r2, [pc, #132]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_ADC_MspInit+0xe8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_AMP_36V_Pin|ADC_VOLT_BAT_Pin|ADC_VOLT_PWR_ST_Pin;
 8001762:	230d      	movs	r3, #13
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001766:	2303      	movs	r3, #3
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	4811      	ldr	r0, [pc, #68]	; (80017bc <HAL_ADC_MspInit+0xec>)
 8001776:	f001 fbdb 	bl	8002f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IK_CENTER_Pin|ADC_IK_BACK_LEFT_Pin|ADC_IK_BACK_RIGHT_Pin|ADC_IK_FRONT_LEFT_Pin
 800177a:	237c      	movs	r3, #124	; 0x7c
 800177c:	61fb      	str	r3, [r7, #28]
                          |ADC_IK_FRONT_RIGHT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177e:	2303      	movs	r3, #3
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <HAL_ADC_MspInit+0xf0>)
 800178e:	f001 fbcf 	bl	8002f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_AMP_5V_Pin|ADC_AMP_12V_Pin;
 8001792:	2303      	movs	r3, #3
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001796:	2303      	movs	r3, #3
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4807      	ldr	r0, [pc, #28]	; (80017c4 <HAL_ADC_MspInit+0xf4>)
 80017a6:	f001 fbc3 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3730      	adds	r7, #48	; 0x30
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40012000 	.word	0x40012000
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020800 	.word	0x40020800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400

080017c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_SPI_MspInit+0x84>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d12b      	bne.n	8001842 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_SPI_MspInit+0x88>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a17      	ldr	r2, [pc, #92]	; (8001850 <HAL_SPI_MspInit+0x88>)
 80017f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_SPI_MspInit+0x88>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_SPI_MspInit+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a10      	ldr	r2, [pc, #64]	; (8001850 <HAL_SPI_MspInit+0x88>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_SPI_MspInit+0x88>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 8001822:	2338      	movs	r3, #56	; 0x38
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001832:	2305      	movs	r3, #5
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <HAL_SPI_MspInit+0x8c>)
 800183e:	f001 fb77 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40013000 	.word	0x40013000
 8001850:	40023800 	.word	0x40023800
 8001854:	40020400 	.word	0x40020400

08001858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001868:	d10e      	bne.n	8001888 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a26      	ldr	r2, [pc, #152]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b24      	ldr	r3, [pc, #144]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001886:	e03a      	b.n	80018fe <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a20      	ldr	r2, [pc, #128]	; (8001910 <HAL_TIM_Base_MspInit+0xb8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d10e      	bne.n	80018b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 800189c:	f043 0310 	orr.w	r3, r3, #16
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
}
 80018ae:	e026      	b.n	80018fe <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_TIM_Base_MspInit+0xbc>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10e      	bne.n	80018d8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a12      	ldr	r2, [pc, #72]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 80018c4:	f043 0320 	orr.w	r3, r3, #32
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
}
 80018d6:	e012      	b.n	80018fe <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <HAL_TIM_Base_MspInit+0xc0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10d      	bne.n	80018fe <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a08      	ldr	r2, [pc, #32]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 80018ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_TIM_Base_MspInit+0xb4>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
}
 80018fe:	bf00      	nop
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40001000 	.word	0x40001000
 8001914:	40001400 	.word	0x40001400
 8001918:	40002000 	.word	0x40002000

0800191c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193c:	d13e      	bne.n	80019bc <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a2a      	ldr	r2, [pc, #168]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_2_Pin|LED_PWM_1_Pin;
 8001976:	f248 0302 	movw	r3, #32770	; 0x8002
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001988:	2301      	movs	r3, #1
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	481f      	ldr	r0, [pc, #124]	; (8001a10 <HAL_TIM_MspPostInit+0xf4>)
 8001994:	f001 facc 	bl	8002f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_PWM_3_Pin|LED_PWM_4_Pin;
 8001998:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800199c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019aa:	2301      	movs	r3, #1
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4619      	mov	r1, r3
 80019b4:	4817      	ldr	r0, [pc, #92]	; (8001a14 <HAL_TIM_MspPostInit+0xf8>)
 80019b6:	f001 fabb 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80019ba:	e022      	b.n	8001a02 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM14)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_TIM_MspPostInit+0xfc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d11d      	bne.n	8001a02 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_TIM_MspPostInit+0xf0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80019f2:	2309      	movs	r3, #9
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <HAL_TIM_MspPostInit+0xf4>)
 80019fe:	f001 fa97 	bl	8002f30 <HAL_GPIO_Init>
}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40002000 	.word	0x40002000

08001a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08e      	sub	sp, #56	; 0x38
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a94      	ldr	r2, [pc, #592]	; (8001c8c <HAL_UART_MspInit+0x270>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	f040 808c 	bne.w	8001b58 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
 8001a44:	4b92      	ldr	r3, [pc, #584]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	4a91      	ldr	r2, [pc, #580]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a50:	4b8f      	ldr	r3, [pc, #572]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	4b8b      	ldr	r3, [pc, #556]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	4a8a      	ldr	r2, [pc, #552]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6c:	4b88      	ldr	r3, [pc, #544]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = JETSON_TX_Pin|JETSON_RX_Pin;
 8001a78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a92:	4619      	mov	r1, r3
 8001a94:	487f      	ldr	r0, [pc, #508]	; (8001c94 <HAL_UART_MspInit+0x278>)
 8001a96:	f001 fa4b 	bl	8002f30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001a9a:	4b7f      	ldr	r3, [pc, #508]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001a9c:	4a7f      	ldr	r2, [pc, #508]	; (8001c9c <HAL_UART_MspInit+0x280>)
 8001a9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001aa0:	4b7d      	ldr	r3, [pc, #500]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa8:	4b7b      	ldr	r3, [pc, #492]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aae:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ab4:	4b78      	ldr	r3, [pc, #480]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001abc:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ac2:	4b75      	ldr	r3, [pc, #468]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ac8:	4b73      	ldr	r3, [pc, #460]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ace:	4b72      	ldr	r3, [pc, #456]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001ad0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ad6:	4b70      	ldr	r3, [pc, #448]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001adc:	486e      	ldr	r0, [pc, #440]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001ade:	f000 fe25 	bl	800272c <HAL_DMA_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001ae8:	f7ff fdc4 	bl	8001674 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a6a      	ldr	r2, [pc, #424]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
 8001af2:	4a69      	ldr	r2, [pc, #420]	; (8001c98 <HAL_UART_MspInit+0x27c>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001af8:	4b69      	ldr	r3, [pc, #420]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001afa:	4a6a      	ldr	r2, [pc, #424]	; (8001ca4 <HAL_UART_MspInit+0x288>)
 8001afc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001afe:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b04:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b06:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b08:	2240      	movs	r2, #64	; 0x40
 8001b0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b0c:	4b64      	ldr	r3, [pc, #400]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b12:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b18:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b1a:	4b61      	ldr	r3, [pc, #388]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b20:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b26:	4b5e      	ldr	r3, [pc, #376]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b32:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b34:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b3a:	4859      	ldr	r0, [pc, #356]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b3c:	f000 fdf6 	bl	800272c <HAL_DMA_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001b46:	f7ff fd95 	bl	8001674 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a54      	ldr	r2, [pc, #336]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001b50:	4a53      	ldr	r2, [pc, #332]	; (8001ca0 <HAL_UART_MspInit+0x284>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b56:	e144      	b.n	8001de2 <HAL_UART_MspInit+0x3c6>
  else if(huart->Instance==USART2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_UART_MspInit+0x28c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	f040 80ae 	bne.w	8001cc0 <HAL_UART_MspInit+0x2a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	4b49      	ldr	r3, [pc, #292]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	4a48      	ldr	r2, [pc, #288]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b72:	6413      	str	r3, [r2, #64]	; 0x40
 8001b74:	4b46      	ldr	r3, [pc, #280]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	4a41      	ldr	r2, [pc, #260]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001b8a:	f043 0308 	orr.w	r3, r3, #8
 8001b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b90:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <HAL_UART_MspInit+0x274>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GYROSCOOTER_TX_Pin|GYROSCOOTER_RX_Pin;
 8001b9c:	2360      	movs	r3, #96	; 0x60
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bac:	2307      	movs	r3, #7
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	483d      	ldr	r0, [pc, #244]	; (8001cac <HAL_UART_MspInit+0x290>)
 8001bb8:	f001 f9ba 	bl	8002f30 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001bbc:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001bbe:	4a3d      	ldr	r2, [pc, #244]	; (8001cb4 <HAL_UART_MspInit+0x298>)
 8001bc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001bc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bca:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd0:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bd6:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bdc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bde:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be4:	4b32      	ldr	r3, [pc, #200]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001bf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bfe:	482c      	ldr	r0, [pc, #176]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001c00:	f000 fd94 	bl	800272c <HAL_DMA_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 8001c0a:	f7ff fd33 	bl	8001674 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001c12:	639a      	str	r2, [r3, #56]	; 0x38
 8001c14:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <HAL_UART_MspInit+0x294>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c1c:	4a27      	ldr	r2, [pc, #156]	; (8001cbc <HAL_UART_MspInit+0x2a0>)
 8001c1e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c26:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c28:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c2a:	2240      	movs	r2, #64	; 0x40
 8001c2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2e:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c3a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c54:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c5c:	4816      	ldr	r0, [pc, #88]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c5e:	f000 fd65 	bl	800272c <HAL_DMA_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_MspInit+0x250>
      Error_Handler();
 8001c68:	f7ff fd04 	bl	8001674 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
 8001c72:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <HAL_UART_MspInit+0x29c>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2026      	movs	r0, #38	; 0x26
 8001c7e:	f000 fd1e 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c82:	2026      	movs	r0, #38	; 0x26
 8001c84:	f000 fd37 	bl	80026f6 <HAL_NVIC_EnableIRQ>
}
 8001c88:	e0ab      	b.n	8001de2 <HAL_UART_MspInit+0x3c6>
 8001c8a:	bf00      	nop
 8001c8c:	40011000 	.word	0x40011000
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	20000264 	.word	0x20000264
 8001c9c:	40026440 	.word	0x40026440
 8001ca0:	200001bc 	.word	0x200001bc
 8001ca4:	400264b8 	.word	0x400264b8
 8001ca8:	40004400 	.word	0x40004400
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	2000002c 	.word	0x2000002c
 8001cb4:	40026088 	.word	0x40026088
 8001cb8:	200002c4 	.word	0x200002c4
 8001cbc:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_UART_MspInit+0x3d0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	f040 808b 	bne.w	8001de2 <HAL_UART_MspInit+0x3c6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_UART_MspInit+0x3d4>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	4a46      	ldr	r2, [pc, #280]	; (8001df0 <HAL_UART_MspInit+0x3d4>)
 8001cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cda:	6413      	str	r3, [r2, #64]	; 0x40
 8001cdc:	4b44      	ldr	r3, [pc, #272]	; (8001df0 <HAL_UART_MspInit+0x3d4>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <HAL_UART_MspInit+0x3d4>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	4a3f      	ldr	r2, [pc, #252]	; (8001df0 <HAL_UART_MspInit+0x3d4>)
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf8:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_UART_MspInit+0x3d4>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_MPU9250_TX_Pin|ARDUINO_MPU9250_RX_Pin;
 8001d04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d16:	2307      	movs	r3, #7
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4834      	ldr	r0, [pc, #208]	; (8001df4 <HAL_UART_MspInit+0x3d8>)
 8001d22:	f001 f905 	bl	8002f30 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d28:	4a34      	ldr	r2, [pc, #208]	; (8001dfc <HAL_UART_MspInit+0x3e0>)
 8001d2a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001d2c:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d32:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d34:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d3a:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d40:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d46:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001d54:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d60:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d68:	4823      	ldr	r0, [pc, #140]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d6a:	f000 fcdf 	bl	800272c <HAL_DMA_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8001d74:	f7ff fc7e 	bl	8001674 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <HAL_UART_MspInit+0x3dc>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001d86:	4a1f      	ldr	r2, [pc, #124]	; (8001e04 <HAL_UART_MspInit+0x3e8>)
 8001d88:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001d8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d90:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001dba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dbe:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001dc6:	480e      	ldr	r0, [pc, #56]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001dc8:	f000 fcb0 	bl	800272c <HAL_DMA_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8001dd2:	f7ff fc4f 	bl	8001674 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34
 8001ddc:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_UART_MspInit+0x3e4>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001de2:	bf00      	nop
 8001de4:	3738      	adds	r7, #56	; 0x38
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40004800 	.word	0x40004800
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020c00 	.word	0x40020c00
 8001df8:	20000090 	.word	0x20000090
 8001dfc:	40026028 	.word	0x40026028
 8001e00:	20000154 	.word	0x20000154
 8001e04:	40026058 	.word	0x40026058

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <NMI_Handler+0x4>

08001e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e54:	f000 f8d6 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <DMA1_Stream1_IRQHandler+0x10>)
 8001e62:	f000 fdfb 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000090 	.word	0x20000090

08001e70 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <DMA1_Stream3_IRQHandler+0x10>)
 8001e76:	f000 fdf1 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000154 	.word	0x20000154

08001e84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <DMA1_Stream5_IRQHandler+0x10>)
 8001e8a:	f000 fde7 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000002c 	.word	0x2000002c

08001e98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <DMA1_Stream6_IRQHandler+0x10>)
 8001e9e:	f000 fddd 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002c4 	.word	0x200002c4

08001eac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <USART2_IRQHandler+0x10>)
 8001eb2:	f002 fd9f 	bl	80049f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000048c 	.word	0x2000048c

08001ec0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <DMA2_Stream2_IRQHandler+0x10>)
 8001ec6:	f000 fdc9 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000264 	.word	0x20000264

08001ed4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <DMA2_Stream7_IRQHandler+0x10>)
 8001eda:	f000 fdbf 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200001bc 	.word	0x200001bc

08001ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <SystemInit+0x20>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <SystemInit+0x20>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f12:	490e      	ldr	r1, [pc, #56]	; (8001f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f18:	e002      	b.n	8001f20 <LoopCopyDataInit>

08001f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1e:	3304      	adds	r3, #4

08001f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f24:	d3f9      	bcc.n	8001f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f28:	4c0b      	ldr	r4, [pc, #44]	; (8001f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f2c:	e001      	b.n	8001f32 <LoopFillZerobss>

08001f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f30:	3204      	adds	r2, #4

08001f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f36:	f7ff ffd7 	bl	8001ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f003 fd95 	bl	8005a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3e:	f7fe fea3 	bl	8000c88 <main>
  bx  lr    
 8001f42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f50:	08005b08 	.word	0x08005b08
  ldr r2, =_sbss
 8001f54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f58:	20000570 	.word	0x20000570

08001f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC_IRQHandler>
	...

08001f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <HAL_Init+0x40>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_Init+0x40>)
 8001f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <HAL_Init+0x40>)
 8001f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 fb8d 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8e:	200f      	movs	r0, #15
 8001f90:	f000 f808 	bl	8001fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f94:	f7ff fb74 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_InitTick+0x54>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_InitTick+0x58>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fba5 	bl	8002712 <HAL_SYSTICK_Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00e      	b.n	8001ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d80a      	bhi.n	8001fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f000 fb6d 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe4:	4a06      	ldr	r2, [pc, #24]	; (8002000 <HAL_InitTick+0x5c>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000008 	.word	0x20000008
 8002000:	20000004 	.word	0x20000004

08002004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x20>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_IncTick+0x24>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	4a04      	ldr	r2, [pc, #16]	; (8002028 <HAL_IncTick+0x24>)
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000008 	.word	0x20000008
 8002028:	2000056c 	.word	0x2000056c

0800202c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return uwTick;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_GetTick+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	2000056c 	.word	0x2000056c

08002044 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e033      	b.n	80020c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fb34 	bl	80016d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800208a:	f023 0302 	bic.w	r3, r3, #2
 800208e:	f043 0202 	orr.w	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f93a 	bl	8002310 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
 80020b2:	e001      	b.n	80020b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x1c>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e105      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x228>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d925      	bls.n	8002144 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68d9      	ldr	r1, [r3, #12]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	3b1e      	subs	r3, #30
 800210e:	2207      	movs	r2, #7
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43da      	mvns	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	400a      	ands	r2, r1
 800211c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68d9      	ldr	r1, [r3, #12]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	4618      	mov	r0, r3
 8002130:	4603      	mov	r3, r0
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4403      	add	r3, r0
 8002136:	3b1e      	subs	r3, #30
 8002138:	409a      	lsls	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	e022      	b.n	800218a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6919      	ldr	r1, [r3, #16]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	2207      	movs	r2, #7
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	400a      	ands	r2, r1
 8002166:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6919      	ldr	r1, [r3, #16]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	4618      	mov	r0, r3
 800217a:	4603      	mov	r3, r0
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4403      	add	r3, r0
 8002180:	409a      	lsls	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b06      	cmp	r3, #6
 8002190:	d824      	bhi.n	80021dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	3b05      	subs	r3, #5
 80021a4:	221f      	movs	r2, #31
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	400a      	ands	r2, r1
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	4618      	mov	r0, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	3b05      	subs	r3, #5
 80021ce:	fa00 f203 	lsl.w	r2, r0, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
 80021da:	e04c      	b.n	8002276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	d824      	bhi.n	800222e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	3b23      	subs	r3, #35	; 0x23
 80021f6:	221f      	movs	r2, #31
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43da      	mvns	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	400a      	ands	r2, r1
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	4618      	mov	r0, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	3b23      	subs	r3, #35	; 0x23
 8002220:	fa00 f203 	lsl.w	r2, r0, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
 800222c:	e023      	b.n	8002276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	3b41      	subs	r3, #65	; 0x41
 8002240:	221f      	movs	r2, #31
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	400a      	ands	r2, r1
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	4618      	mov	r0, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	3b41      	subs	r3, #65	; 0x41
 800226a:	fa00 f203 	lsl.w	r2, r0, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_ADC_ConfigChannel+0x234>)
 8002278:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a21      	ldr	r2, [pc, #132]	; (8002304 <HAL_ADC_ConfigChannel+0x238>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d109      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x1cc>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b12      	cmp	r3, #18
 800228a:	d105      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a19      	ldr	r2, [pc, #100]	; (8002304 <HAL_ADC_ConfigChannel+0x238>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d123      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x21e>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d003      	beq.n	80022b2 <HAL_ADC_ConfigChannel+0x1e6>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b11      	cmp	r3, #17
 80022b0:	d11b      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d111      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_ADC_ConfigChannel+0x23c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_ADC_ConfigChannel+0x240>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	0c9a      	lsrs	r2, r3, #18
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022dc:	e002      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f9      	bne.n	80022de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40012300 	.word	0x40012300
 8002304:	40012000 	.word	0x40012000
 8002308:	20000000 	.word	0x20000000
 800230c:	431bde83 	.word	0x431bde83

08002310 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002318:	4b79      	ldr	r3, [pc, #484]	; (8002500 <ADC_Init+0x1f0>)
 800231a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	431a      	orrs	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	021a      	lsls	r2, r3, #8
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002368:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800238a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6899      	ldr	r1, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	4a58      	ldr	r2, [pc, #352]	; (8002504 <ADC_Init+0x1f4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d022      	beq.n	80023ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6899      	ldr	r1, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	e00f      	b.n	800240e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800240c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0202 	bic.w	r2, r2, #2
 800241c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7e1b      	ldrb	r3, [r3, #24]
 8002428:	005a      	lsls	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01b      	beq.n	8002474 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800245a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	3b01      	subs	r3, #1
 8002468:	035a      	lsls	r2, r3, #13
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	e007      	b.n	8002484 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002482:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	3b01      	subs	r3, #1
 80024a0:	051a      	lsls	r2, r3, #20
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6899      	ldr	r1, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024c6:	025a      	lsls	r2, r3, #9
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6899      	ldr	r1, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	029a      	lsls	r2, r3, #10
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	609a      	str	r2, [r3, #8]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	40012300 	.word	0x40012300
 8002504:	0f000001 	.word	0x0f000001

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff3e 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff31 	bl	800256c <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa2 	bl	8002664 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff fc78 	bl	800202c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e099      	b.n	800287c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002768:	e00f      	b.n	800278a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800276a:	f7ff fc5f 	bl	800202c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b05      	cmp	r3, #5
 8002776:	d908      	bls.n	800278a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2203      	movs	r2, #3
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e078      	b.n	800287c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e8      	bne.n	800276a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4b38      	ldr	r3, [pc, #224]	; (8002884 <HAL_DMA_Init+0x158>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d107      	bne.n	80027f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	4313      	orrs	r3, r2
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 0307 	bic.w	r3, r3, #7
 800280a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	2b04      	cmp	r3, #4
 800281c:	d117      	bne.n	800284e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00e      	beq.n	800284e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fb01 	bl	8002e38 <DMA_CheckFifoParam>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2240      	movs	r2, #64	; 0x40
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800284a:	2301      	movs	r3, #1
 800284c:	e016      	b.n	800287c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fab8 	bl	8002dcc <DMA_CalcBaseAndBitshift>
 800285c:	4603      	mov	r3, r0
 800285e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	223f      	movs	r2, #63	; 0x3f
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	f010803f 	.word	0xf010803f

08002888 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_DMA_Start_IT+0x26>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e040      	b.n	8002930 <HAL_DMA_Start_IT+0xa8>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d12f      	bne.n	8002922 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2202      	movs	r2, #2
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fa4a 	bl	8002d70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	223f      	movs	r2, #63	; 0x3f
 80028e2:	409a      	lsls	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0216 	orr.w	r2, r2, #22
 80028f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0208 	orr.w	r2, r2, #8
 800290e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e005      	b.n	800292e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800292a:	2302      	movs	r3, #2
 800292c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002946:	f7ff fb71 	bl	800202c <HAL_GetTick>
 800294a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d008      	beq.n	800296a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e052      	b.n	8002a10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0216 	bic.w	r2, r2, #22
 8002978:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002988:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d103      	bne.n	800299a <HAL_DMA_Abort+0x62>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0208 	bic.w	r2, r2, #8
 80029a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ba:	e013      	b.n	80029e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029bc:	f7ff fb36 	bl	800202c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b05      	cmp	r3, #5
 80029c8:	d90c      	bls.n	80029e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2203      	movs	r2, #3
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e015      	b.n	8002a10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1e4      	bne.n	80029bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	223f      	movs	r2, #63	; 0x3f
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d004      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00c      	b.n	8002a50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2205      	movs	r2, #5
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a68:	4b92      	ldr	r3, [pc, #584]	; (8002cb4 <HAL_DMA_IRQHandler+0x258>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a92      	ldr	r2, [pc, #584]	; (8002cb8 <HAL_DMA_IRQHandler+0x25c>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0a9b      	lsrs	r3, r3, #10
 8002a74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	2208      	movs	r2, #8
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01a      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0204 	bic.w	r2, r2, #4
 8002aae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f043 0201 	orr.w	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2201      	movs	r2, #1
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d012      	beq.n	8002afe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	2201      	movs	r2, #1
 8002aec:	409a      	lsls	r2, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f043 0202 	orr.w	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	2204      	movs	r2, #4
 8002b04:	409a      	lsls	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d012      	beq.n	8002b34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	2204      	movs	r2, #4
 8002b22:	409a      	lsls	r2, r3
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f043 0204 	orr.w	r2, r3, #4
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	2210      	movs	r2, #16
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d043      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d03c      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b56:	2210      	movs	r2, #16
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d018      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d108      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d024      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4798      	blx	r3
 8002b8a:	e01f      	b.n	8002bcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01b      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
 8002b9c:	e016      	b.n	8002bcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0208 	bic.w	r2, r2, #8
 8002bba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 808e 	beq.w	8002cfa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8086 	beq.w	8002cfa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d136      	bne.n	8002c74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0216 	bic.w	r2, r2, #22
 8002c14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <HAL_DMA_IRQHandler+0x1da>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0208 	bic.w	r2, r2, #8
 8002c44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	223f      	movs	r2, #63	; 0x3f
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d07d      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4798      	blx	r3
        }
        return;
 8002c72:	e078      	b.n	8002d66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01c      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d108      	bne.n	8002ca2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d030      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	4798      	blx	r3
 8002ca0:	e02b      	b.n	8002cfa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d027      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
 8002cb2:	e022      	b.n	8002cfa <HAL_DMA_IRQHandler+0x29e>
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10f      	bne.n	8002cea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0210 	bic.w	r2, r2, #16
 8002cd8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d032      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d022      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2205      	movs	r2, #5
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d307      	bcc.n	8002d42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f2      	bne.n	8002d26 <HAL_DMA_IRQHandler+0x2ca>
 8002d40:	e000      	b.n	8002d44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d42:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
 8002d64:	e000      	b.n	8002d68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d66:	bf00      	nop
    }
  }
}
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop

08002d70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d108      	bne.n	8002db0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dae:	e007      	b.n	8002dc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	60da      	str	r2, [r3, #12]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	3b10      	subs	r3, #16
 8002ddc:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <DMA_CalcBaseAndBitshift+0x64>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002de6:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <DMA_CalcBaseAndBitshift+0x68>)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d909      	bls.n	8002e0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e02:	f023 0303 	bic.w	r3, r3, #3
 8002e06:	1d1a      	adds	r2, r3, #4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e0c:	e007      	b.n	8002e1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	aaaaaaab 	.word	0xaaaaaaab
 8002e34:	08005af0 	.word	0x08005af0

08002e38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11f      	bne.n	8002e92 <DMA_CheckFifoParam+0x5a>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d856      	bhi.n	8002f06 <DMA_CheckFifoParam+0xce>
 8002e58:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <DMA_CheckFifoParam+0x28>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e83 	.word	0x08002e83
 8002e68:	08002e71 	.word	0x08002e71
 8002e6c:	08002f07 	.word	0x08002f07
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d046      	beq.n	8002f0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e80:	e043      	b.n	8002f0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e8a:	d140      	bne.n	8002f0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e90:	e03d      	b.n	8002f0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e9a:	d121      	bne.n	8002ee0 <DMA_CheckFifoParam+0xa8>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d837      	bhi.n	8002f12 <DMA_CheckFifoParam+0xda>
 8002ea2:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <DMA_CheckFifoParam+0x70>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ebf 	.word	0x08002ebf
 8002eb0:	08002eb9 	.word	0x08002eb9
 8002eb4:	08002ed1 	.word	0x08002ed1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebc:	e030      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d025      	beq.n	8002f16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ece:	e022      	b.n	8002f16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ed8:	d11f      	bne.n	8002f1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ede:	e01c      	b.n	8002f1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d903      	bls.n	8002eee <DMA_CheckFifoParam+0xb6>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d003      	beq.n	8002ef4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eec:	e018      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef2:	e015      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00e      	beq.n	8002f1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e00b      	b.n	8002f1e <DMA_CheckFifoParam+0xe6>
      break;
 8002f06:	bf00      	nop
 8002f08:	e00a      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e008      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e006      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;
 8002f12:	bf00      	nop
 8002f14:	e004      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;
 8002f16:	bf00      	nop
 8002f18:	e002      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <DMA_CheckFifoParam+0xe8>
      break;
 8002f1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop

08002f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	; 0x24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	e16b      	b.n	8003224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f040 815a 	bne.w	800321e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d005      	beq.n	8002f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d130      	bne.n	8002fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb8:	2201      	movs	r2, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 0201 	and.w	r2, r3, #1
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d017      	beq.n	8003020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d123      	bne.n	8003074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80b4 	beq.w	800321e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	4b60      	ldr	r3, [pc, #384]	; (800323c <HAL_GPIO_Init+0x30c>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	4a5f      	ldr	r2, [pc, #380]	; (800323c <HAL_GPIO_Init+0x30c>)
 80030c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030c4:	6453      	str	r3, [r2, #68]	; 0x44
 80030c6:	4b5d      	ldr	r3, [pc, #372]	; (800323c <HAL_GPIO_Init+0x30c>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030d2:	4a5b      	ldr	r2, [pc, #364]	; (8003240 <HAL_GPIO_Init+0x310>)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	3302      	adds	r3, #2
 80030da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	220f      	movs	r2, #15
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a52      	ldr	r2, [pc, #328]	; (8003244 <HAL_GPIO_Init+0x314>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d02b      	beq.n	8003156 <HAL_GPIO_Init+0x226>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a51      	ldr	r2, [pc, #324]	; (8003248 <HAL_GPIO_Init+0x318>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d025      	beq.n	8003152 <HAL_GPIO_Init+0x222>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a50      	ldr	r2, [pc, #320]	; (800324c <HAL_GPIO_Init+0x31c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01f      	beq.n	800314e <HAL_GPIO_Init+0x21e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4f      	ldr	r2, [pc, #316]	; (8003250 <HAL_GPIO_Init+0x320>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d019      	beq.n	800314a <HAL_GPIO_Init+0x21a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4e      	ldr	r2, [pc, #312]	; (8003254 <HAL_GPIO_Init+0x324>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0x216>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4d      	ldr	r2, [pc, #308]	; (8003258 <HAL_GPIO_Init+0x328>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00d      	beq.n	8003142 <HAL_GPIO_Init+0x212>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_GPIO_Init+0x32c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0x20e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4b      	ldr	r2, [pc, #300]	; (8003260 <HAL_GPIO_Init+0x330>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_GPIO_Init+0x20a>
 8003136:	2307      	movs	r3, #7
 8003138:	e00e      	b.n	8003158 <HAL_GPIO_Init+0x228>
 800313a:	2308      	movs	r3, #8
 800313c:	e00c      	b.n	8003158 <HAL_GPIO_Init+0x228>
 800313e:	2306      	movs	r3, #6
 8003140:	e00a      	b.n	8003158 <HAL_GPIO_Init+0x228>
 8003142:	2305      	movs	r3, #5
 8003144:	e008      	b.n	8003158 <HAL_GPIO_Init+0x228>
 8003146:	2304      	movs	r3, #4
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x228>
 800314a:	2303      	movs	r3, #3
 800314c:	e004      	b.n	8003158 <HAL_GPIO_Init+0x228>
 800314e:	2302      	movs	r3, #2
 8003150:	e002      	b.n	8003158 <HAL_GPIO_Init+0x228>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_GPIO_Init+0x228>
 8003156:	2300      	movs	r3, #0
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f002 0203 	and.w	r2, r2, #3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4093      	lsls	r3, r2
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003168:	4935      	ldr	r1, [pc, #212]	; (8003240 <HAL_GPIO_Init+0x310>)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003176:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_GPIO_Init+0x334>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800319a:	4a32      	ldr	r2, [pc, #200]	; (8003264 <HAL_GPIO_Init+0x334>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031a0:	4b30      	ldr	r3, [pc, #192]	; (8003264 <HAL_GPIO_Init+0x334>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <HAL_GPIO_Init+0x334>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ca:	4b26      	ldr	r3, [pc, #152]	; (8003264 <HAL_GPIO_Init+0x334>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ee:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <HAL_GPIO_Init+0x334>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <HAL_GPIO_Init+0x334>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003218:	4a12      	ldr	r2, [pc, #72]	; (8003264 <HAL_GPIO_Init+0x334>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	f67f ae90 	bls.w	8002f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	40013800 	.word	0x40013800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020400 	.word	0x40020400
 800324c:	40020800 	.word	0x40020800
 8003250:	40020c00 	.word	0x40020c00
 8003254:	40021000 	.word	0x40021000
 8003258:	40021400 	.word	0x40021400
 800325c:	40021800 	.word	0x40021800
 8003260:	40021c00 	.word	0x40021c00
 8003264:	40013c00 	.word	0x40013c00

08003268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	4613      	mov	r3, r2
 8003276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003278:	787b      	ldrb	r3, [r7, #1]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327e:	887a      	ldrh	r2, [r7, #2]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003284:	e003      	b.n	800328e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003286:	887b      	ldrh	r3, [r7, #2]
 8003288:	041a      	lsls	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	619a      	str	r2, [r3, #24]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032ac:	887a      	ldrh	r2, [r7, #2]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4013      	ands	r3, r2
 80032b2:	041a      	lsls	r2, r3, #16
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	43d9      	mvns	r1, r3
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	400b      	ands	r3, r1
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	619a      	str	r2, [r3, #24]
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e264      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d075      	beq.n	80033da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ee:	4ba3      	ldr	r3, [pc, #652]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d00c      	beq.n	8003314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032fa:	4ba0      	ldr	r3, [pc, #640]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003302:	2b08      	cmp	r3, #8
 8003304:	d112      	bne.n	800332c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003306:	4b9d      	ldr	r3, [pc, #628]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003312:	d10b      	bne.n	800332c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	4b99      	ldr	r3, [pc, #612]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d05b      	beq.n	80033d8 <HAL_RCC_OscConfig+0x108>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d157      	bne.n	80033d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e23f      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003334:	d106      	bne.n	8003344 <HAL_RCC_OscConfig+0x74>
 8003336:	4b91      	ldr	r3, [pc, #580]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a90      	ldr	r2, [pc, #576]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e01d      	b.n	8003380 <HAL_RCC_OscConfig+0xb0>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x98>
 800334e:	4b8b      	ldr	r3, [pc, #556]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a8a      	ldr	r2, [pc, #552]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b88      	ldr	r3, [pc, #544]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a87      	ldr	r2, [pc, #540]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0xb0>
 8003368:	4b84      	ldr	r3, [pc, #528]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a83      	ldr	r2, [pc, #524]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b81      	ldr	r3, [pc, #516]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a80      	ldr	r2, [pc, #512]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 800337a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fe fe50 	bl	800202c <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003390:	f7fe fe4c 	bl	800202c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e204      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	4b76      	ldr	r3, [pc, #472]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0xc0>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe fe3c 	bl	800202c <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe fe38 	bl	800202c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e1f0      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	4b6c      	ldr	r3, [pc, #432]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0xe8>
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d063      	beq.n	80034ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033e6:	4b65      	ldr	r3, [pc, #404]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f2:	4b62      	ldr	r3, [pc, #392]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d11c      	bne.n	8003438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fe:	4b5f      	ldr	r3, [pc, #380]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d116      	bne.n	8003438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340a:	4b5c      	ldr	r3, [pc, #368]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_RCC_OscConfig+0x152>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e1c4      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003422:	4b56      	ldr	r3, [pc, #344]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4952      	ldr	r1, [pc, #328]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	e03a      	b.n	80034ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003440:	4b4f      	ldr	r3, [pc, #316]	; (8003580 <HAL_RCC_OscConfig+0x2b0>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fe fdf1 	bl	800202c <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344e:	f7fe fded 	bl	800202c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e1a5      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	4b46      	ldr	r3, [pc, #280]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346c:	4b43      	ldr	r3, [pc, #268]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4940      	ldr	r1, [pc, #256]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
 8003480:	e015      	b.n	80034ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003482:	4b3f      	ldr	r3, [pc, #252]	; (8003580 <HAL_RCC_OscConfig+0x2b0>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fdd0 	bl	800202c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003490:	f7fe fdcc 	bl	800202c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e184      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	4b36      	ldr	r3, [pc, #216]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d030      	beq.n	800351c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c2:	4b30      	ldr	r3, [pc, #192]	; (8003584 <HAL_RCC_OscConfig+0x2b4>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe fdb0 	bl	800202c <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fe fdac 	bl	800202c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e164      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	4b26      	ldr	r3, [pc, #152]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x200>
 80034ee:	e015      	b.n	800351c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f0:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCC_OscConfig+0x2b4>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f6:	f7fe fd99 	bl	800202c <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fe:	f7fe fd95 	bl	800202c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e14d      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f0      	bne.n	80034fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80a0 	beq.w	800366a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	6413      	str	r3, [r2, #64]	; 0x40
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <HAL_RCC_OscConfig+0x2ac>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_OscConfig+0x2b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d121      	bne.n	80035aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_RCC_OscConfig+0x2b8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a07      	ldr	r2, [pc, #28]	; (8003588 <HAL_RCC_OscConfig+0x2b8>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fe fd5b 	bl	800202c <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e011      	b.n	800359e <HAL_RCC_OscConfig+0x2ce>
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800
 8003580:	42470000 	.word	0x42470000
 8003584:	42470e80 	.word	0x42470e80
 8003588:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358c:	f7fe fd4e 	bl	800202c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e106      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b85      	ldr	r3, [pc, #532]	; (80037b4 <HAL_RCC_OscConfig+0x4e4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d106      	bne.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
 80035b2:	4b81      	ldr	r3, [pc, #516]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6713      	str	r3, [r2, #112]	; 0x70
 80035be:	e01c      	b.n	80035fa <HAL_RCC_OscConfig+0x32a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d10c      	bne.n	80035e2 <HAL_RCC_OscConfig+0x312>
 80035c8:	4b7b      	ldr	r3, [pc, #492]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80035ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035cc:	4a7a      	ldr	r2, [pc, #488]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	6713      	str	r3, [r2, #112]	; 0x70
 80035d4:	4b78      	ldr	r3, [pc, #480]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	4a77      	ldr	r2, [pc, #476]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6713      	str	r3, [r2, #112]	; 0x70
 80035e0:	e00b      	b.n	80035fa <HAL_RCC_OscConfig+0x32a>
 80035e2:	4b75      	ldr	r3, [pc, #468]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	4a74      	ldr	r2, [pc, #464]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6713      	str	r3, [r2, #112]	; 0x70
 80035ee:	4b72      	ldr	r3, [pc, #456]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4a71      	ldr	r2, [pc, #452]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d015      	beq.n	800362e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003602:	f7fe fd13 	bl	800202c <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	e00a      	b.n	8003620 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7fe fd0f 	bl	800202c <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0c5      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003620:	4b65      	ldr	r3, [pc, #404]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0ee      	beq.n	800360a <HAL_RCC_OscConfig+0x33a>
 800362c:	e014      	b.n	8003658 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362e:	f7fe fcfd 	bl	800202c <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003636:	f7fe fcf9 	bl	800202c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	f241 3288 	movw	r2, #5000	; 0x1388
 8003644:	4293      	cmp	r3, r2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e0af      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364c:	4b5a      	ldr	r3, [pc, #360]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ee      	bne.n	8003636 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d105      	bne.n	800366a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365e:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a55      	ldr	r2, [pc, #340]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 809b 	beq.w	80037aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003674:	4b50      	ldr	r3, [pc, #320]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b08      	cmp	r3, #8
 800367e:	d05c      	beq.n	800373a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d141      	bne.n	800370c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003688:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <HAL_RCC_OscConfig+0x4ec>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe fccd 	bl	800202c <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003696:	f7fe fcc9 	bl	800202c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e081      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a8:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	019b      	lsls	r3, r3, #6
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	3b01      	subs	r3, #1
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d6:	061b      	lsls	r3, r3, #24
 80036d8:	4937      	ldr	r1, [pc, #220]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036de:	4b37      	ldr	r3, [pc, #220]	; (80037bc <HAL_RCC_OscConfig+0x4ec>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe fca2 	bl	800202c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fc9e 	bl	800202c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e056      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4b2e      	ldr	r3, [pc, #184]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x41c>
 800370a:	e04e      	b.n	80037aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <HAL_RCC_OscConfig+0x4ec>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003712:	f7fe fc8b 	bl	800202c <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371a:	f7fe fc87 	bl	800202c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e03f      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f0      	bne.n	800371a <HAL_RCC_OscConfig+0x44a>
 8003738:	e037      	b.n	80037aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e032      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003746:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <HAL_RCC_OscConfig+0x4e8>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d028      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d121      	bne.n	80037a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d11a      	bne.n	80037a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003776:	4013      	ands	r3, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800377c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800377e:	4293      	cmp	r3, r2
 8003780:	d111      	bne.n	80037a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	3b01      	subs	r3, #1
 8003790:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003792:	429a      	cmp	r2, r3
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d001      	beq.n	80037aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40007000 	.word	0x40007000
 80037b8:	40023800 	.word	0x40023800
 80037bc:	42470060 	.word	0x42470060

080037c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0cc      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d4:	4b68      	ldr	r3, [pc, #416]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d90c      	bls.n	80037fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b65      	ldr	r3, [pc, #404]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b63      	ldr	r3, [pc, #396]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0b8      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d020      	beq.n	800384a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003814:	4b59      	ldr	r3, [pc, #356]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a58      	ldr	r2, [pc, #352]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800381e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800382c:	4b53      	ldr	r3, [pc, #332]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a52      	ldr	r2, [pc, #328]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003838:	4b50      	ldr	r3, [pc, #320]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	494d      	ldr	r1, [pc, #308]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d044      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d107      	bne.n	800386e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385e:	4b47      	ldr	r3, [pc, #284]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d119      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e07f      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d003      	beq.n	800387e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387a:	2b03      	cmp	r3, #3
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387e:	4b3f      	ldr	r3, [pc, #252]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e06f      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	4b3b      	ldr	r3, [pc, #236]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e067      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389e:	4b37      	ldr	r3, [pc, #220]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f023 0203 	bic.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4934      	ldr	r1, [pc, #208]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b0:	f7fe fbbc 	bl	800202c <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b8:	f7fe fbb8 	bl	800202c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e04f      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 020c 	and.w	r2, r3, #12
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	429a      	cmp	r2, r3
 80038de:	d1eb      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e0:	4b25      	ldr	r3, [pc, #148]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d20c      	bcs.n	8003908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b22      	ldr	r3, [pc, #136]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e032      	b.n	800396e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d008      	beq.n	8003926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003914:	4b19      	ldr	r3, [pc, #100]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4916      	ldr	r1, [pc, #88]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003932:	4b12      	ldr	r3, [pc, #72]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	490e      	ldr	r1, [pc, #56]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003946:	f000 f821 	bl	800398c <HAL_RCC_GetSysClockFreq>
 800394a:	4602      	mov	r2, r0
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	490a      	ldr	r1, [pc, #40]	; (8003980 <HAL_RCC_ClockConfig+0x1c0>)
 8003958:	5ccb      	ldrb	r3, [r1, r3]
 800395a:	fa22 f303 	lsr.w	r3, r2, r3
 800395e:	4a09      	ldr	r2, [pc, #36]	; (8003984 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_RCC_ClockConfig+0x1c8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fb1c 	bl	8001fa4 <HAL_InitTick>

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023c00 	.word	0x40023c00
 800397c:	40023800 	.word	0x40023800
 8003980:	08005ad8 	.word	0x08005ad8
 8003984:	20000000 	.word	0x20000000
 8003988:	20000004 	.word	0x20000004

0800398c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800398c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	2300      	movs	r3, #0
 800399e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a4:	4b67      	ldr	r3, [pc, #412]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d00d      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x40>
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	f200 80bd 	bhi.w	8003b30 <HAL_RCC_GetSysClockFreq+0x1a4>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x34>
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80039be:	e0b7      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039c2:	60bb      	str	r3, [r7, #8]
       break;
 80039c4:	e0b7      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c6:	4b61      	ldr	r3, [pc, #388]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80039c8:	60bb      	str	r3, [r7, #8]
      break;
 80039ca:	e0b4      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039cc:	4b5d      	ldr	r3, [pc, #372]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d6:	4b5b      	ldr	r3, [pc, #364]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d04d      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e2:	4b58      	ldr	r3, [pc, #352]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	461a      	mov	r2, r3
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039f2:	f04f 0100 	mov.w	r1, #0
 80039f6:	ea02 0800 	and.w	r8, r2, r0
 80039fa:	ea03 0901 	and.w	r9, r3, r1
 80039fe:	4640      	mov	r0, r8
 8003a00:	4649      	mov	r1, r9
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	014b      	lsls	r3, r1, #5
 8003a0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a10:	0142      	lsls	r2, r0, #5
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	ebb0 0008 	subs.w	r0, r0, r8
 8003a1a:	eb61 0109 	sbc.w	r1, r1, r9
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	018b      	lsls	r3, r1, #6
 8003a28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a2c:	0182      	lsls	r2, r0, #6
 8003a2e:	1a12      	subs	r2, r2, r0
 8003a30:	eb63 0301 	sbc.w	r3, r3, r1
 8003a34:	f04f 0000 	mov.w	r0, #0
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	00d9      	lsls	r1, r3, #3
 8003a3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a42:	00d0      	lsls	r0, r2, #3
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	eb12 0208 	adds.w	r2, r2, r8
 8003a4c:	eb43 0309 	adc.w	r3, r3, r9
 8003a50:	f04f 0000 	mov.w	r0, #0
 8003a54:	f04f 0100 	mov.w	r1, #0
 8003a58:	0259      	lsls	r1, r3, #9
 8003a5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a5e:	0250      	lsls	r0, r2, #9
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	f7fc fdee 	bl	8000650 <__aeabi_uldivmod>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4613      	mov	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e04a      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7e:	4b31      	ldr	r3, [pc, #196]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	099b      	lsrs	r3, r3, #6
 8003a84:	461a      	mov	r2, r3
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	ea02 0400 	and.w	r4, r2, r0
 8003a96:	ea03 0501 	and.w	r5, r3, r1
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	014b      	lsls	r3, r1, #5
 8003aa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003aac:	0142      	lsls	r2, r0, #5
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	1b00      	subs	r0, r0, r4
 8003ab4:	eb61 0105 	sbc.w	r1, r1, r5
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	018b      	lsls	r3, r1, #6
 8003ac2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ac6:	0182      	lsls	r2, r0, #6
 8003ac8:	1a12      	subs	r2, r2, r0
 8003aca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ace:	f04f 0000 	mov.w	r0, #0
 8003ad2:	f04f 0100 	mov.w	r1, #0
 8003ad6:	00d9      	lsls	r1, r3, #3
 8003ad8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003adc:	00d0      	lsls	r0, r2, #3
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	1912      	adds	r2, r2, r4
 8003ae4:	eb45 0303 	adc.w	r3, r5, r3
 8003ae8:	f04f 0000 	mov.w	r0, #0
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	0299      	lsls	r1, r3, #10
 8003af2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003af6:	0290      	lsls	r0, r2, #10
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	461a      	mov	r2, r3
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	f7fc fda2 	bl	8000650 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4613      	mov	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	60bb      	str	r3, [r7, #8]
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b32:	60bb      	str	r3, [r7, #8]
      break;
 8003b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b36:	68bb      	ldr	r3, [r7, #8]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	00f42400 	.word	0x00f42400
 8003b4c:	007a1200 	.word	0x007a1200

08003b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000000 	.word	0x20000000

08003b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b6c:	f7ff fff0 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0a9b      	lsrs	r3, r3, #10
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	08005ae8 	.word	0x08005ae8

08003b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b94:	f7ff ffdc 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	0b5b      	lsrs	r3, r3, #13
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	08005ae8 	.word	0x08005ae8

08003bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e07b      	b.n	8003cc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d009      	beq.n	8003bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	61da      	str	r2, [r3, #28]
 8003be2:	e005      	b.n	8003bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd fddc 	bl	80017c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	ea42 0103 	orr.w	r1, r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	0c1b      	lsrs	r3, r3, #16
 8003c8e:	f003 0104 	and.w	r1, r3, #4
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f003 0210 	and.w	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e041      	b.n	8003d60 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d106      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fd fdb1 	bl	8001858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f000 fa11 	bl	8004130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e041      	b.n	8003dfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f839 	bl	8003e06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f000 f9c2 	bl	8004130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e0ae      	b.n	8003f98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	f200 809f 	bhi.w	8003f88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e85 	.word	0x08003e85
 8003e54:	08003f89 	.word	0x08003f89
 8003e58:	08003f89 	.word	0x08003f89
 8003e5c:	08003f89 	.word	0x08003f89
 8003e60:	08003ec5 	.word	0x08003ec5
 8003e64:	08003f89 	.word	0x08003f89
 8003e68:	08003f89 	.word	0x08003f89
 8003e6c:	08003f89 	.word	0x08003f89
 8003e70:	08003f07 	.word	0x08003f07
 8003e74:	08003f89 	.word	0x08003f89
 8003e78:	08003f89 	.word	0x08003f89
 8003e7c:	08003f89 	.word	0x08003f89
 8003e80:	08003f47 	.word	0x08003f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f9f0 	bl	8004270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0208 	orr.w	r2, r2, #8
 8003e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0204 	bic.w	r2, r2, #4
 8003eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6999      	ldr	r1, [r3, #24]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	619a      	str	r2, [r3, #24]
      break;
 8003ec2:	e064      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fa40 	bl	8004350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6999      	ldr	r1, [r3, #24]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	021a      	lsls	r2, r3, #8
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	619a      	str	r2, [r3, #24]
      break;
 8003f04:	e043      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fa95 	bl	800443c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0208 	orr.w	r2, r2, #8
 8003f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0204 	bic.w	r2, r2, #4
 8003f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69d9      	ldr	r1, [r3, #28]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	61da      	str	r2, [r3, #28]
      break;
 8003f44:	e023      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fae9 	bl	8004524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69d9      	ldr	r1, [r3, #28]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	021a      	lsls	r2, r3, #8
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	61da      	str	r2, [r3, #28]
      break;
 8003f86:	e002      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_TIM_ConfigClockSource+0x1c>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e0b4      	b.n	8004126 <HAL_TIM_ConfigClockSource+0x186>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff4:	d03e      	beq.n	8004074 <HAL_TIM_ConfigClockSource+0xd4>
 8003ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffa:	f200 8087 	bhi.w	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8003ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004002:	f000 8086 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x172>
 8004006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400a:	d87f      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b70      	cmp	r3, #112	; 0x70
 800400e:	d01a      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0xa6>
 8004010:	2b70      	cmp	r3, #112	; 0x70
 8004012:	d87b      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b60      	cmp	r3, #96	; 0x60
 8004016:	d050      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x11a>
 8004018:	2b60      	cmp	r3, #96	; 0x60
 800401a:	d877      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b50      	cmp	r3, #80	; 0x50
 800401e:	d03c      	beq.n	800409a <HAL_TIM_ConfigClockSource+0xfa>
 8004020:	2b50      	cmp	r3, #80	; 0x50
 8004022:	d873      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d058      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x13a>
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d86f      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800402c:	2b30      	cmp	r3, #48	; 0x30
 800402e:	d064      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004030:	2b30      	cmp	r3, #48	; 0x30
 8004032:	d86b      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8004034:	2b20      	cmp	r3, #32
 8004036:	d060      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004038:	2b20      	cmp	r3, #32
 800403a:	d867      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05c      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004040:	2b10      	cmp	r3, #16
 8004042:	d05a      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004044:	e062      	b.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6899      	ldr	r1, [r3, #8]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f000 fb35 	bl	80046c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	609a      	str	r2, [r3, #8]
      break;
 8004072:	e04f      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6899      	ldr	r1, [r3, #8]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f000 fb1e 	bl	80046c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004096:	609a      	str	r2, [r3, #8]
      break;
 8004098:	e03c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 fa92 	bl	80045d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2150      	movs	r1, #80	; 0x50
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 faeb 	bl	800468e <TIM_ITRx_SetConfig>
      break;
 80040b8:	e02c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f000 fab1 	bl	800462e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2160      	movs	r1, #96	; 0x60
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fadb 	bl	800468e <TIM_ITRx_SetConfig>
      break;
 80040d8:	e01c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6859      	ldr	r1, [r3, #4]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f000 fa72 	bl	80045d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2140      	movs	r1, #64	; 0x40
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 facb 	bl	800468e <TIM_ITRx_SetConfig>
      break;
 80040f8:	e00c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f000 fac2 	bl	800468e <TIM_ITRx_SetConfig>
      break;
 800410a:	e003      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      break;
 8004110:	e000      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a40      	ldr	r2, [pc, #256]	; (8004244 <TIM_Base_SetConfig+0x114>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <TIM_Base_SetConfig+0x40>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414e:	d00f      	beq.n	8004170 <TIM_Base_SetConfig+0x40>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3d      	ldr	r2, [pc, #244]	; (8004248 <TIM_Base_SetConfig+0x118>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00b      	beq.n	8004170 <TIM_Base_SetConfig+0x40>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3c      	ldr	r2, [pc, #240]	; (800424c <TIM_Base_SetConfig+0x11c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d007      	beq.n	8004170 <TIM_Base_SetConfig+0x40>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a3b      	ldr	r2, [pc, #236]	; (8004250 <TIM_Base_SetConfig+0x120>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d003      	beq.n	8004170 <TIM_Base_SetConfig+0x40>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a3a      	ldr	r2, [pc, #232]	; (8004254 <TIM_Base_SetConfig+0x124>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d108      	bne.n	8004182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a2f      	ldr	r2, [pc, #188]	; (8004244 <TIM_Base_SetConfig+0x114>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d02b      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004190:	d027      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a2c      	ldr	r2, [pc, #176]	; (8004248 <TIM_Base_SetConfig+0x118>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d023      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a2b      	ldr	r2, [pc, #172]	; (800424c <TIM_Base_SetConfig+0x11c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01f      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a2a      	ldr	r2, [pc, #168]	; (8004250 <TIM_Base_SetConfig+0x120>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01b      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a29      	ldr	r2, [pc, #164]	; (8004254 <TIM_Base_SetConfig+0x124>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d017      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a28      	ldr	r2, [pc, #160]	; (8004258 <TIM_Base_SetConfig+0x128>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a27      	ldr	r2, [pc, #156]	; (800425c <TIM_Base_SetConfig+0x12c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00f      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a26      	ldr	r2, [pc, #152]	; (8004260 <TIM_Base_SetConfig+0x130>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00b      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a25      	ldr	r2, [pc, #148]	; (8004264 <TIM_Base_SetConfig+0x134>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d007      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a24      	ldr	r2, [pc, #144]	; (8004268 <TIM_Base_SetConfig+0x138>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a23      	ldr	r2, [pc, #140]	; (800426c <TIM_Base_SetConfig+0x13c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d108      	bne.n	80041f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <TIM_Base_SetConfig+0x114>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_Base_SetConfig+0xf8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <TIM_Base_SetConfig+0x124>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d103      	bne.n	8004230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	615a      	str	r2, [r3, #20]
}
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40010400 	.word	0x40010400
 8004258:	40014000 	.word	0x40014000
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800
 8004264:	40001800 	.word	0x40001800
 8004268:	40001c00 	.word	0x40001c00
 800426c:	40002000 	.word	0x40002000

08004270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f023 0302 	bic.w	r3, r3, #2
 80042b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a20      	ldr	r2, [pc, #128]	; (8004348 <TIM_OC1_SetConfig+0xd8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_OC1_SetConfig+0x64>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a1f      	ldr	r2, [pc, #124]	; (800434c <TIM_OC1_SetConfig+0xdc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d10c      	bne.n	80042ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0308 	bic.w	r3, r3, #8
 80042da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f023 0304 	bic.w	r3, r3, #4
 80042ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a15      	ldr	r2, [pc, #84]	; (8004348 <TIM_OC1_SetConfig+0xd8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d003      	beq.n	80042fe <TIM_OC1_SetConfig+0x8e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a14      	ldr	r2, [pc, #80]	; (800434c <TIM_OC1_SetConfig+0xdc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d111      	bne.n	8004322 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800430c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	621a      	str	r2, [r3, #32]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40010000 	.word	0x40010000
 800434c:	40010400 	.word	0x40010400

08004350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f023 0210 	bic.w	r2, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0320 	bic.w	r3, r3, #32
 800439a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a22      	ldr	r2, [pc, #136]	; (8004434 <TIM_OC2_SetConfig+0xe4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d003      	beq.n	80043b8 <TIM_OC2_SetConfig+0x68>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a21      	ldr	r2, [pc, #132]	; (8004438 <TIM_OC2_SetConfig+0xe8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d10d      	bne.n	80043d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a17      	ldr	r2, [pc, #92]	; (8004434 <TIM_OC2_SetConfig+0xe4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_OC2_SetConfig+0x94>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a16      	ldr	r2, [pc, #88]	; (8004438 <TIM_OC2_SetConfig+0xe8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d113      	bne.n	800440c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	621a      	str	r2, [r3, #32]
}
 8004426:	bf00      	nop
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40010000 	.word	0x40010000
 8004438:	40010400 	.word	0x40010400

0800443c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a21      	ldr	r2, [pc, #132]	; (800451c <TIM_OC3_SetConfig+0xe0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d003      	beq.n	80044a2 <TIM_OC3_SetConfig+0x66>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a20      	ldr	r2, [pc, #128]	; (8004520 <TIM_OC3_SetConfig+0xe4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d10d      	bne.n	80044be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a16      	ldr	r2, [pc, #88]	; (800451c <TIM_OC3_SetConfig+0xe0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_OC3_SetConfig+0x92>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a15      	ldr	r2, [pc, #84]	; (8004520 <TIM_OC3_SetConfig+0xe4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d113      	bne.n	80044f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	621a      	str	r2, [r3, #32]
}
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40010000 	.word	0x40010000
 8004520:	40010400 	.word	0x40010400

08004524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	031b      	lsls	r3, r3, #12
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <TIM_OC4_SetConfig+0xa4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <TIM_OC4_SetConfig+0x68>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a11      	ldr	r2, [pc, #68]	; (80045cc <TIM_OC4_SetConfig+0xa8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d109      	bne.n	80045a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	019b      	lsls	r3, r3, #6
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40010400 	.word	0x40010400

080045d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0201 	bic.w	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 030a 	bic.w	r3, r3, #10
 800460c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800462e:	b480      	push	{r7}
 8004630:	b087      	sub	sp, #28
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f023 0210 	bic.w	r2, r3, #16
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004658:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	031b      	lsls	r3, r3, #12
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800466a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f043 0307 	orr.w	r3, r3, #7
 80046b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	609a      	str	r2, [r3, #8]
}
 80046b8:	bf00      	nop
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	021a      	lsls	r2, r3, #8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	609a      	str	r2, [r3, #8]
}
 80046f8:	bf00      	nop
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004718:	2302      	movs	r3, #2
 800471a:	e05a      	b.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a21      	ldr	r2, [pc, #132]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d022      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004768:	d01d      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d018      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1a      	ldr	r2, [pc, #104]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00e      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a18      	ldr	r2, [pc, #96]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d009      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a17      	ldr	r2, [pc, #92]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d10c      	bne.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40010400 	.word	0x40010400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40001800 	.word	0x40001800

080047fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e03f      	b.n	800488e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fd f8fa 	bl	8001a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2224      	movs	r2, #36	; 0x24
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800483e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 ff49 	bl	80056d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08c      	sub	sp, #48	; 0x30
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d165      	bne.n	800497e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_UART_Transmit_DMA+0x26>
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e05e      	b.n	8004980 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_UART_Transmit_DMA+0x38>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e057      	b.n	8004980 <HAL_UART_Transmit_DMA+0xe8>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	88fa      	ldrh	r2, [r7, #6]
 80048e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2221      	movs	r2, #33	; 0x21
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fc:	4a22      	ldr	r2, [pc, #136]	; (8004988 <HAL_UART_Transmit_DMA+0xf0>)
 80048fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004904:	4a21      	ldr	r2, [pc, #132]	; (800498c <HAL_UART_Transmit_DMA+0xf4>)
 8004906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	4a20      	ldr	r2, [pc, #128]	; (8004990 <HAL_UART_Transmit_DMA+0xf8>)
 800490e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004914:	2200      	movs	r2, #0
 8004916:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004918:	f107 0308 	add.w	r3, r7, #8
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	6819      	ldr	r1, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3304      	adds	r3, #4
 800492c:	461a      	mov	r2, r3
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	f7fd ffaa 	bl	8002888 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800493c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3314      	adds	r3, #20
 800494c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	617b      	str	r3, [r7, #20]
   return(result);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3314      	adds	r3, #20
 8004964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004966:	627a      	str	r2, [r7, #36]	; 0x24
 8004968:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6a39      	ldr	r1, [r7, #32]
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	61fb      	str	r3, [r7, #28]
   return(result);
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e5      	bne.n	8004946 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	e000      	b.n	8004980 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800497e:	2302      	movs	r3, #2
  }
}
 8004980:	4618      	mov	r0, r3
 8004982:	3730      	adds	r7, #48	; 0x30
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	08004f79 	.word	0x08004f79
 800498c:	08005013 	.word	0x08005013
 8004990:	0800518b 	.word	0x0800518b

08004994 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d11d      	bne.n	80049ea <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_UART_Receive_DMA+0x26>
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e016      	b.n	80049ec <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_UART_Receive_DMA+0x38>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e00f      	b.n	80049ec <HAL_UART_Receive_DMA+0x58>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	461a      	mov	r2, r3
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fc1d 	bl	8005220 <UART_Start_Receive_DMA>
 80049e6:	4603      	mov	r3, r0
 80049e8:	e000      	b.n	80049ec <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
  }
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b0ba      	sub	sp, #232	; 0xe8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10f      	bne.n	8004a5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_UART_IRQHandler+0x66>
 8004a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fd85 	bl	8005562 <UART_Receive_IT>
      return;
 8004a58:	e256      	b.n	8004f08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80de 	beq.w	8004c20 <HAL_UART_IRQHandler+0x22c>
 8004a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80d1 	beq.w	8004c20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00b      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xae>
 8004a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xd2>
 8004aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f043 0202 	orr.w	r2, r3, #2
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00b      	beq.n	8004aea <HAL_UART_IRQHandler+0xf6>
 8004ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f043 0204 	orr.w	r2, r3, #4
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d011      	beq.n	8004b1a <HAL_UART_IRQHandler+0x126>
 8004af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d105      	bne.n	8004b0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f043 0208 	orr.w	r2, r3, #8
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 81ed 	beq.w	8004efe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_UART_IRQHandler+0x14e>
 8004b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fd10 	bl	8005562 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d103      	bne.n	8004b6e <HAL_UART_IRQHandler+0x17a>
 8004b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d04f      	beq.n	8004c0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fc18 	bl	80053a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d141      	bne.n	8004c06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3314      	adds	r3, #20
 8004b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1d9      	bne.n	8004b82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d013      	beq.n	8004bfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	4a7d      	ldr	r2, [pc, #500]	; (8004dd0 <HAL_UART_IRQHandler+0x3dc>)
 8004bdc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fd ff18 	bl	8002a18 <HAL_DMA_Abort_IT>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d016      	beq.n	8004c1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bfc:	e00e      	b.n	8004c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f9a4 	bl	8004f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	e00a      	b.n	8004c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9a0 	bl	8004f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	e006      	b.n	8004c1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f99c 	bl	8004f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c1a:	e170      	b.n	8004efe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1c:	bf00      	nop
    return;
 8004c1e:	e16e      	b.n	8004efe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f040 814a 	bne.w	8004ebe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 8143 	beq.w	8004ebe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3c:	f003 0310 	and.w	r3, r3, #16
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 813c 	beq.w	8004ebe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c46:	2300      	movs	r3, #0
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60bb      	str	r3, [r7, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	f040 80b4 	bne.w	8004dd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8140 	beq.w	8004f02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	f080 8139 	bcs.w	8004f02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca2:	f000 8088 	beq.w	8004db6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004cd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1d9      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d04:	f023 0301 	bic.w	r3, r3, #1
 8004d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3314      	adds	r3, #20
 8004d12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e1      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3314      	adds	r3, #20
 8004d34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e3      	bne.n	8004d2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d86:	f023 0310 	bic.w	r3, r3, #16
 8004d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	330c      	adds	r3, #12
 8004d94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d98:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004da0:	e841 2300 	strex	r3, r2, [r1]
 8004da4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e3      	bne.n	8004d74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fd fdc1 	bl	8002938 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8ca 	bl	8004f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dcc:	e099      	b.n	8004f02 <HAL_UART_IRQHandler+0x50e>
 8004dce:	bf00      	nop
 8004dd0:	0800546b 	.word	0x0800546b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 808b 	beq.w	8004f06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004df0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8086 	beq.w	8004f06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e1e:	647a      	str	r2, [r7, #68]	; 0x44
 8004e20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e3      	bne.n	8004dfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3314      	adds	r3, #20
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	623b      	str	r3, [r7, #32]
   return(result);
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3314      	adds	r3, #20
 8004e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e56:	633a      	str	r2, [r7, #48]	; 0x30
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e3      	bne.n	8004e32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0310 	bic.w	r3, r3, #16
 8004e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	330c      	adds	r3, #12
 8004e98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e9c:	61fa      	str	r2, [r7, #28]
 8004e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea0:	69b9      	ldr	r1, [r7, #24]
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e3      	bne.n	8004e78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f852 	bl	8004f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ebc:	e023      	b.n	8004f06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_UART_IRQHandler+0x4ea>
 8004eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fadb 	bl	8005492 <UART_Transmit_IT>
    return;
 8004edc:	e014      	b.n	8004f08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00e      	beq.n	8004f08 <HAL_UART_IRQHandler+0x514>
 8004eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fb1b 	bl	8005532 <UART_EndTransmit_IT>
    return;
 8004efc:	e004      	b.n	8004f08 <HAL_UART_IRQHandler+0x514>
    return;
 8004efe:	bf00      	nop
 8004f00:	e002      	b.n	8004f08 <HAL_UART_IRQHandler+0x514>
      return;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <HAL_UART_IRQHandler+0x514>
      return;
 8004f06:	bf00      	nop
  }
}
 8004f08:	37e8      	adds	r7, #232	; 0xe8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop

08004f10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b090      	sub	sp, #64	; 0x40
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d137      	bne.n	8005004 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f96:	2200      	movs	r2, #0
 8004f98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3314      	adds	r3, #20
 8004fa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fba:	633a      	str	r2, [r7, #48]	; 0x30
 8004fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e5      	bne.n	8004f9a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	330c      	adds	r3, #12
 8004fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fee:	61fa      	str	r2, [r7, #28]
 8004ff0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	69b9      	ldr	r1, [r7, #24]
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	617b      	str	r3, [r7, #20]
   return(result);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e5      	bne.n	8004fce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005002:	e002      	b.n	800500a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005004:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005006:	f7ff ff83 	bl	8004f10 <HAL_UART_TxCpltCallback>
}
 800500a:	bf00      	nop
 800500c:	3740      	adds	r7, #64	; 0x40
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7ff ff7f 	bl	8004f24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b09c      	sub	sp, #112	; 0x70
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d172      	bne.n	8005130 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800504a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504c:	2200      	movs	r2, #0
 800504e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005066:	66bb      	str	r3, [r7, #104]	; 0x68
 8005068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005070:	65ba      	str	r2, [r7, #88]	; 0x58
 8005072:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005076:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800507e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e5      	bne.n	8005050 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3314      	adds	r3, #20
 800508a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	667b      	str	r3, [r7, #100]	; 0x64
 800509c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3314      	adds	r3, #20
 80050a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050a4:	647a      	str	r2, [r7, #68]	; 0x44
 80050a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3314      	adds	r3, #20
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	623b      	str	r3, [r7, #32]
   return(result);
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ce:	663b      	str	r3, [r7, #96]	; 0x60
 80050d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050d8:	633a      	str	r2, [r7, #48]	; 0x30
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d119      	bne.n	8005130 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	60fb      	str	r3, [r7, #12]
   return(result);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0310 	bic.w	r3, r3, #16
 8005112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800511c:	61fa      	str	r2, [r7, #28]
 800511e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	69b9      	ldr	r1, [r7, #24]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	617b      	str	r3, [r7, #20]
   return(result);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	2b01      	cmp	r3, #1
 8005136:	d106      	bne.n	8005146 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800513c:	4619      	mov	r1, r3
 800513e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005140:	f7ff ff0e 	bl	8004f60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005144:	e002      	b.n	800514c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005146:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005148:	f7fb fbfe 	bl	8000948 <HAL_UART_RxCpltCallback>
}
 800514c:	bf00      	nop
 800514e:	3770      	adds	r7, #112	; 0x70
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	2b01      	cmp	r3, #1
 8005168:	d108      	bne.n	800517c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	b29b      	uxth	r3, r3
 8005172:	4619      	mov	r1, r3
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff fef3 	bl	8004f60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800517a:	e002      	b.n	8005182 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff fedb 	bl	8004f38 <HAL_UART_RxHalfCpltCallback>
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b80      	cmp	r3, #128	; 0x80
 80051a8:	bf0c      	ite	eq
 80051aa:	2301      	moveq	r3, #1
 80051ac:	2300      	movne	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b21      	cmp	r3, #33	; 0x21
 80051bc:	d108      	bne.n	80051d0 <UART_DMAError+0x46>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2200      	movs	r2, #0
 80051c8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80051ca:	68b8      	ldr	r0, [r7, #8]
 80051cc:	f000 f8c2 	bl	8005354 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b22      	cmp	r3, #34	; 0x22
 80051f0:	d108      	bne.n	8005204 <UART_DMAError+0x7a>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2200      	movs	r2, #0
 80051fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80051fe:	68b8      	ldr	r0, [r7, #8]
 8005200:	f000 f8d0 	bl	80053a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	f043 0210 	orr.w	r2, r3, #16
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005210:	68b8      	ldr	r0, [r7, #8]
 8005212:	f7ff fe9b 	bl	8004f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b098      	sub	sp, #96	; 0x60
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	88fa      	ldrh	r2, [r7, #6]
 8005238:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2222      	movs	r2, #34	; 0x22
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	4a3e      	ldr	r2, [pc, #248]	; (8005348 <UART_Start_Receive_DMA+0x128>)
 800524e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	4a3d      	ldr	r2, [pc, #244]	; (800534c <UART_Start_Receive_DMA+0x12c>)
 8005256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	4a3c      	ldr	r2, [pc, #240]	; (8005350 <UART_Start_Receive_DMA+0x130>)
 800525e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	2200      	movs	r2, #0
 8005266:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005268:	f107 0308 	add.w	r3, r7, #8
 800526c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3304      	adds	r3, #4
 8005278:	4619      	mov	r1, r3
 800527a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	f7fd fb02 	bl	8002888 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330c      	adds	r3, #12
 80052a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ac:	e853 3f00 	ldrex	r3, [r3]
 80052b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052c2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80052c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80052c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052ca:	e841 2300 	strex	r3, r2, [r1]
 80052ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80052d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1e5      	bne.n	80052a2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3314      	adds	r3, #20
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	657b      	str	r3, [r7, #84]	; 0x54
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3314      	adds	r3, #20
 80052f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052f6:	63ba      	str	r2, [r7, #56]	; 0x38
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e5      	bne.n	80052d6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3314      	adds	r3, #20
 8005310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	617b      	str	r3, [r7, #20]
   return(result);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005320:	653b      	str	r3, [r7, #80]	; 0x50
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3314      	adds	r3, #20
 8005328:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800532a:	627a      	str	r2, [r7, #36]	; 0x24
 800532c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6a39      	ldr	r1, [r7, #32]
 8005330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	61fb      	str	r3, [r7, #28]
   return(result);
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e5      	bne.n	800530a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3760      	adds	r7, #96	; 0x60
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	0800502f 	.word	0x0800502f
 800534c:	08005155 	.word	0x08005155
 8005350:	0800518b 	.word	0x0800518b

08005354 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b089      	sub	sp, #36	; 0x24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	330c      	adds	r3, #12
 8005362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	60bb      	str	r3, [r7, #8]
   return(result);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	330c      	adds	r3, #12
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	61ba      	str	r2, [r7, #24]
 800537e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6979      	ldr	r1, [r7, #20]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	613b      	str	r3, [r7, #16]
   return(result);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e5      	bne.n	800535c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005398:	bf00      	nop
 800539a:	3724      	adds	r7, #36	; 0x24
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b095      	sub	sp, #84	; 0x54
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053cc:	643a      	str	r2, [r7, #64]	; 0x40
 80053ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e5      	bne.n	80053ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3314      	adds	r3, #20
 80053e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3314      	adds	r3, #20
 80053fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005400:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	2b01      	cmp	r3, #1
 800541a:	d119      	bne.n	8005450 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	60bb      	str	r3, [r7, #8]
   return(result);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f023 0310 	bic.w	r3, r3, #16
 8005432:	647b      	str	r3, [r7, #68]	; 0x44
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	330c      	adds	r3, #12
 800543a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800543c:	61ba      	str	r2, [r7, #24]
 800543e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6979      	ldr	r1, [r7, #20]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	613b      	str	r3, [r7, #16]
   return(result);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e5      	bne.n	800541c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800545e:	bf00      	nop
 8005460:	3754      	adds	r7, #84	; 0x54
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff fd61 	bl	8004f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800548a:	bf00      	nop
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b21      	cmp	r3, #33	; 0x21
 80054a4:	d13e      	bne.n	8005524 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	d114      	bne.n	80054da <UART_Transmit_IT+0x48>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d110      	bne.n	80054da <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	1c9a      	adds	r2, r3, #2
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	621a      	str	r2, [r3, #32]
 80054d8:	e008      	b.n	80054ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	1c59      	adds	r1, r3, #1
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6211      	str	r1, [r2, #32]
 80054e4:	781a      	ldrb	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4619      	mov	r1, r3
 80054fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10f      	bne.n	8005520 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800550e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800551e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005548:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fcdc 	bl	8004f10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b08c      	sub	sp, #48	; 0x30
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b22      	cmp	r3, #34	; 0x22
 8005574:	f040 80ab 	bne.w	80056ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005580:	d117      	bne.n	80055b2 <UART_Receive_IT+0x50>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d113      	bne.n	80055b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800558a:	2300      	movs	r3, #0
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	b29b      	uxth	r3, r3
 800559c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	1c9a      	adds	r2, r3, #2
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28
 80055b0:	e026      	b.n	8005600 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055b8:	2300      	movs	r3, #0
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c4:	d007      	beq.n	80055d6 <UART_Receive_IT+0x74>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10a      	bne.n	80055e4 <UART_Receive_IT+0x82>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e008      	b.n	80055f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29b      	uxth	r3, r3
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	4619      	mov	r1, r3
 800560e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005610:	2b00      	cmp	r3, #0
 8005612:	d15a      	bne.n	80056ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0220 	bic.w	r2, r2, #32
 8005622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695a      	ldr	r2, [r3, #20]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	2b01      	cmp	r3, #1
 8005652:	d135      	bne.n	80056c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	613b      	str	r3, [r7, #16]
   return(result);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f023 0310 	bic.w	r3, r3, #16
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567a:	623a      	str	r2, [r7, #32]
 800567c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	69f9      	ldr	r1, [r7, #28]
 8005680:	6a3a      	ldr	r2, [r7, #32]
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	61bb      	str	r3, [r7, #24]
   return(result);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b10      	cmp	r3, #16
 800569a:	d10a      	bne.n	80056b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fc51 	bl	8004f60 <HAL_UARTEx_RxEventCallback>
 80056be:	e002      	b.n	80056c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fb f941 	bl	8000948 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e002      	b.n	80056d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e000      	b.n	80056d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
  }
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3730      	adds	r7, #48	; 0x30
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056dc:	b09f      	sub	sp, #124	; 0x7c
 80056de:	af00      	add	r7, sp, #0
 80056e0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ee:	68d9      	ldr	r1, [r3, #12]
 80056f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	ea40 0301 	orr.w	r3, r0, r1
 80056f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	431a      	orrs	r2, r3
 8005704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	431a      	orrs	r2, r3
 800570a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4313      	orrs	r3, r2
 8005710:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800571c:	f021 010c 	bic.w	r1, r1, #12
 8005720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005726:	430b      	orrs	r3, r1
 8005728:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005736:	6999      	ldr	r1, [r3, #24]
 8005738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	ea40 0301 	orr.w	r3, r0, r1
 8005740:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4bc5      	ldr	r3, [pc, #788]	; (8005a5c <UART_SetConfig+0x384>)
 8005748:	429a      	cmp	r2, r3
 800574a:	d004      	beq.n	8005756 <UART_SetConfig+0x7e>
 800574c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4bc3      	ldr	r3, [pc, #780]	; (8005a60 <UART_SetConfig+0x388>)
 8005752:	429a      	cmp	r2, r3
 8005754:	d103      	bne.n	800575e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005756:	f7fe fa1b 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 800575a:	6778      	str	r0, [r7, #116]	; 0x74
 800575c:	e002      	b.n	8005764 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800575e:	f7fe fa03 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 8005762:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800576c:	f040 80b6 	bne.w	80058dc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005772:	461c      	mov	r4, r3
 8005774:	f04f 0500 	mov.w	r5, #0
 8005778:	4622      	mov	r2, r4
 800577a:	462b      	mov	r3, r5
 800577c:	1891      	adds	r1, r2, r2
 800577e:	6439      	str	r1, [r7, #64]	; 0x40
 8005780:	415b      	adcs	r3, r3
 8005782:	647b      	str	r3, [r7, #68]	; 0x44
 8005784:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005788:	1912      	adds	r2, r2, r4
 800578a:	eb45 0303 	adc.w	r3, r5, r3
 800578e:	f04f 0000 	mov.w	r0, #0
 8005792:	f04f 0100 	mov.w	r1, #0
 8005796:	00d9      	lsls	r1, r3, #3
 8005798:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800579c:	00d0      	lsls	r0, r2, #3
 800579e:	4602      	mov	r2, r0
 80057a0:	460b      	mov	r3, r1
 80057a2:	1911      	adds	r1, r2, r4
 80057a4:	6639      	str	r1, [r7, #96]	; 0x60
 80057a6:	416b      	adcs	r3, r5
 80057a8:	667b      	str	r3, [r7, #100]	; 0x64
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	1891      	adds	r1, r2, r2
 80057b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057b8:	415b      	adcs	r3, r3
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80057c4:	f7fa ff44 	bl	8000650 <__aeabi_uldivmod>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4ba5      	ldr	r3, [pc, #660]	; (8005a64 <UART_SetConfig+0x38c>)
 80057ce:	fba3 2302 	umull	r2, r3, r3, r2
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	011e      	lsls	r6, r3, #4
 80057d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d8:	461c      	mov	r4, r3
 80057da:	f04f 0500 	mov.w	r5, #0
 80057de:	4622      	mov	r2, r4
 80057e0:	462b      	mov	r3, r5
 80057e2:	1891      	adds	r1, r2, r2
 80057e4:	6339      	str	r1, [r7, #48]	; 0x30
 80057e6:	415b      	adcs	r3, r3
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
 80057ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80057ee:	1912      	adds	r2, r2, r4
 80057f0:	eb45 0303 	adc.w	r3, r5, r3
 80057f4:	f04f 0000 	mov.w	r0, #0
 80057f8:	f04f 0100 	mov.w	r1, #0
 80057fc:	00d9      	lsls	r1, r3, #3
 80057fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005802:	00d0      	lsls	r0, r2, #3
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	1911      	adds	r1, r2, r4
 800580a:	65b9      	str	r1, [r7, #88]	; 0x58
 800580c:	416b      	adcs	r3, r5
 800580e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	461a      	mov	r2, r3
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	1891      	adds	r1, r2, r2
 800581c:	62b9      	str	r1, [r7, #40]	; 0x28
 800581e:	415b      	adcs	r3, r3
 8005820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005826:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800582a:	f7fa ff11 	bl	8000650 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4b8c      	ldr	r3, [pc, #560]	; (8005a64 <UART_SetConfig+0x38c>)
 8005834:	fba3 1302 	umull	r1, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	2164      	movs	r1, #100	; 0x64
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	3332      	adds	r3, #50	; 0x32
 8005846:	4a87      	ldr	r2, [pc, #540]	; (8005a64 <UART_SetConfig+0x38c>)
 8005848:	fba2 2303 	umull	r2, r3, r2, r3
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005854:	441e      	add	r6, r3
 8005856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005858:	4618      	mov	r0, r3
 800585a:	f04f 0100 	mov.w	r1, #0
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	1894      	adds	r4, r2, r2
 8005864:	623c      	str	r4, [r7, #32]
 8005866:	415b      	adcs	r3, r3
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
 800586a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800586e:	1812      	adds	r2, r2, r0
 8005870:	eb41 0303 	adc.w	r3, r1, r3
 8005874:	f04f 0400 	mov.w	r4, #0
 8005878:	f04f 0500 	mov.w	r5, #0
 800587c:	00dd      	lsls	r5, r3, #3
 800587e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005882:	00d4      	lsls	r4, r2, #3
 8005884:	4622      	mov	r2, r4
 8005886:	462b      	mov	r3, r5
 8005888:	1814      	adds	r4, r2, r0
 800588a:	653c      	str	r4, [r7, #80]	; 0x50
 800588c:	414b      	adcs	r3, r1
 800588e:	657b      	str	r3, [r7, #84]	; 0x54
 8005890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	461a      	mov	r2, r3
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	1891      	adds	r1, r2, r2
 800589c:	61b9      	str	r1, [r7, #24]
 800589e:	415b      	adcs	r3, r3
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058aa:	f7fa fed1 	bl	8000650 <__aeabi_uldivmod>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4b6c      	ldr	r3, [pc, #432]	; (8005a64 <UART_SetConfig+0x38c>)
 80058b4:	fba3 1302 	umull	r1, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	2164      	movs	r1, #100	; 0x64
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	3332      	adds	r3, #50	; 0x32
 80058c6:	4a67      	ldr	r2, [pc, #412]	; (8005a64 <UART_SetConfig+0x38c>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	f003 0207 	and.w	r2, r3, #7
 80058d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4432      	add	r2, r6
 80058d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058da:	e0b9      	b.n	8005a50 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058de:	461c      	mov	r4, r3
 80058e0:	f04f 0500 	mov.w	r5, #0
 80058e4:	4622      	mov	r2, r4
 80058e6:	462b      	mov	r3, r5
 80058e8:	1891      	adds	r1, r2, r2
 80058ea:	6139      	str	r1, [r7, #16]
 80058ec:	415b      	adcs	r3, r3
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058f4:	1912      	adds	r2, r2, r4
 80058f6:	eb45 0303 	adc.w	r3, r5, r3
 80058fa:	f04f 0000 	mov.w	r0, #0
 80058fe:	f04f 0100 	mov.w	r1, #0
 8005902:	00d9      	lsls	r1, r3, #3
 8005904:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005908:	00d0      	lsls	r0, r2, #3
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	eb12 0804 	adds.w	r8, r2, r4
 8005912:	eb43 0905 	adc.w	r9, r3, r5
 8005916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4618      	mov	r0, r3
 800591c:	f04f 0100 	mov.w	r1, #0
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	008b      	lsls	r3, r1, #2
 800592a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800592e:	0082      	lsls	r2, r0, #2
 8005930:	4640      	mov	r0, r8
 8005932:	4649      	mov	r1, r9
 8005934:	f7fa fe8c 	bl	8000650 <__aeabi_uldivmod>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4b49      	ldr	r3, [pc, #292]	; (8005a64 <UART_SetConfig+0x38c>)
 800593e:	fba3 2302 	umull	r2, r3, r3, r2
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	011e      	lsls	r6, r3, #4
 8005946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005948:	4618      	mov	r0, r3
 800594a:	f04f 0100 	mov.w	r1, #0
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	1894      	adds	r4, r2, r2
 8005954:	60bc      	str	r4, [r7, #8]
 8005956:	415b      	adcs	r3, r3
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800595e:	1812      	adds	r2, r2, r0
 8005960:	eb41 0303 	adc.w	r3, r1, r3
 8005964:	f04f 0400 	mov.w	r4, #0
 8005968:	f04f 0500 	mov.w	r5, #0
 800596c:	00dd      	lsls	r5, r3, #3
 800596e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005972:	00d4      	lsls	r4, r2, #3
 8005974:	4622      	mov	r2, r4
 8005976:	462b      	mov	r3, r5
 8005978:	1814      	adds	r4, r2, r0
 800597a:	64bc      	str	r4, [r7, #72]	; 0x48
 800597c:	414b      	adcs	r3, r1
 800597e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4618      	mov	r0, r3
 8005986:	f04f 0100 	mov.w	r1, #0
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	008b      	lsls	r3, r1, #2
 8005994:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005998:	0082      	lsls	r2, r0, #2
 800599a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800599e:	f7fa fe57 	bl	8000650 <__aeabi_uldivmod>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <UART_SetConfig+0x38c>)
 80059a8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	2164      	movs	r1, #100	; 0x64
 80059b0:	fb01 f303 	mul.w	r3, r1, r3
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	3332      	adds	r3, #50	; 0x32
 80059ba:	4a2a      	ldr	r2, [pc, #168]	; (8005a64 <UART_SetConfig+0x38c>)
 80059bc:	fba2 2303 	umull	r2, r3, r2, r3
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c6:	441e      	add	r6, r3
 80059c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ca:	4618      	mov	r0, r3
 80059cc:	f04f 0100 	mov.w	r1, #0
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	1894      	adds	r4, r2, r2
 80059d6:	603c      	str	r4, [r7, #0]
 80059d8:	415b      	adcs	r3, r3
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e0:	1812      	adds	r2, r2, r0
 80059e2:	eb41 0303 	adc.w	r3, r1, r3
 80059e6:	f04f 0400 	mov.w	r4, #0
 80059ea:	f04f 0500 	mov.w	r5, #0
 80059ee:	00dd      	lsls	r5, r3, #3
 80059f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059f4:	00d4      	lsls	r4, r2, #3
 80059f6:	4622      	mov	r2, r4
 80059f8:	462b      	mov	r3, r5
 80059fa:	eb12 0a00 	adds.w	sl, r2, r0
 80059fe:	eb43 0b01 	adc.w	fp, r3, r1
 8005a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f04f 0100 	mov.w	r1, #0
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	008b      	lsls	r3, r1, #2
 8005a16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a1a:	0082      	lsls	r2, r0, #2
 8005a1c:	4650      	mov	r0, sl
 8005a1e:	4659      	mov	r1, fp
 8005a20:	f7fa fe16 	bl	8000650 <__aeabi_uldivmod>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4b0e      	ldr	r3, [pc, #56]	; (8005a64 <UART_SetConfig+0x38c>)
 8005a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	2164      	movs	r1, #100	; 0x64
 8005a32:	fb01 f303 	mul.w	r3, r1, r3
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	3332      	adds	r3, #50	; 0x32
 8005a3c:	4a09      	ldr	r2, [pc, #36]	; (8005a64 <UART_SetConfig+0x38c>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	f003 020f 	and.w	r2, r3, #15
 8005a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4432      	add	r2, r6
 8005a4e:	609a      	str	r2, [r3, #8]
}
 8005a50:	bf00      	nop
 8005a52:	377c      	adds	r7, #124	; 0x7c
 8005a54:	46bd      	mov	sp, r7
 8005a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40011000 	.word	0x40011000
 8005a60:	40011400 	.word	0x40011400
 8005a64:	51eb851f 	.word	0x51eb851f

08005a68 <__libc_init_array>:
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	4d0d      	ldr	r5, [pc, #52]	; (8005aa0 <__libc_init_array+0x38>)
 8005a6c:	4c0d      	ldr	r4, [pc, #52]	; (8005aa4 <__libc_init_array+0x3c>)
 8005a6e:	1b64      	subs	r4, r4, r5
 8005a70:	10a4      	asrs	r4, r4, #2
 8005a72:	2600      	movs	r6, #0
 8005a74:	42a6      	cmp	r6, r4
 8005a76:	d109      	bne.n	8005a8c <__libc_init_array+0x24>
 8005a78:	4d0b      	ldr	r5, [pc, #44]	; (8005aa8 <__libc_init_array+0x40>)
 8005a7a:	4c0c      	ldr	r4, [pc, #48]	; (8005aac <__libc_init_array+0x44>)
 8005a7c:	f000 f820 	bl	8005ac0 <_init>
 8005a80:	1b64      	subs	r4, r4, r5
 8005a82:	10a4      	asrs	r4, r4, #2
 8005a84:	2600      	movs	r6, #0
 8005a86:	42a6      	cmp	r6, r4
 8005a88:	d105      	bne.n	8005a96 <__libc_init_array+0x2e>
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
 8005a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a90:	4798      	blx	r3
 8005a92:	3601      	adds	r6, #1
 8005a94:	e7ee      	b.n	8005a74 <__libc_init_array+0xc>
 8005a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9a:	4798      	blx	r3
 8005a9c:	3601      	adds	r6, #1
 8005a9e:	e7f2      	b.n	8005a86 <__libc_init_array+0x1e>
 8005aa0:	08005b00 	.word	0x08005b00
 8005aa4:	08005b00 	.word	0x08005b00
 8005aa8:	08005b00 	.word	0x08005b00
 8005aac:	08005b04 	.word	0x08005b04

08005ab0 <memset>:
 8005ab0:	4402      	add	r2, r0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d100      	bne.n	8005aba <memset+0xa>
 8005ab8:	4770      	bx	lr
 8005aba:	f803 1b01 	strb.w	r1, [r3], #1
 8005abe:	e7f9      	b.n	8005ab4 <memset+0x4>

08005ac0 <_init>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	bf00      	nop
 8005ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac6:	bc08      	pop	{r3}
 8005ac8:	469e      	mov	lr, r3
 8005aca:	4770      	bx	lr

08005acc <_fini>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	bf00      	nop
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr
