
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006750  08006750  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006750  08006750  00016750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006758  08006758  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006758  08006758  00016758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000005b0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005bc  200005bc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002949  00000000  00000000  0003406c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  000369b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f10  00000000  00000000  000379e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002faf  00000000  00000000  000388f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014231  00000000  00000000  0003b89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dabe2  00000000  00000000  0004fad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012a6b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004408  00000000  00000000  0012a708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006718 	.word	0x08006718

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006718 	.word	0x08006718

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d02:	463b      	mov	r3, r7
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d10:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <MX_ADC1_Init+0x9c>)
 8000d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <MX_ADC1_Init+0xa0>)
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d5e:	f001 fd95 	bl	800288c <HAL_ADC_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d68:	f000 ff3c 	bl	8001be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_ADC1_Init+0x98>)
 8000d7e:	f001 ff67 	bl	8002c50 <HAL_ADC_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d88:	f000 ff2c 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000040 	.word	0x20000040
 8000d98:	40012000 	.word	0x40012000
 8000d9c:	0f000001 	.word	0x0f000001

08000da0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <HAL_ADC_MspInit+0xe4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d15b      	bne.n	8000e7a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a2f      	ldr	r2, [pc, #188]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a28      	ldr	r2, [pc, #160]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_ADC_MspInit+0xe8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_6_Pin|ADC_7_Pin|ADC_8_Pin;
 8000e32:	2307      	movs	r3, #7
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4811      	ldr	r0, [pc, #68]	; (8000e8c <HAL_ADC_MspInit+0xec>)
 8000e46:	f002 fe35 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|ADC_2_Pin|ADC_3_Pin;
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <HAL_ADC_MspInit+0xf0>)
 8000e5e:	f002 fe29 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_4_Pin|ADC_5_Pin;
 8000e62:	2303      	movs	r3, #3
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <HAL_ADC_MspInit+0xf4>)
 8000e76:	f002 fe1d 	bl	8003ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	; 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40012000 	.word	0x40012000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400

08000e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <MX_DMA_Init+0xc8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a2e      	ldr	r2, [pc, #184]	; (8000f60 <MX_DMA_Init+0xc8>)
 8000ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <MX_DMA_Init+0xc8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <MX_DMA_Init+0xc8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a27      	ldr	r2, [pc, #156]	; (8000f60 <MX_DMA_Init+0xc8>)
 8000ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <MX_DMA_Init+0xc8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	200c      	movs	r0, #12
 8000edc:	f002 f9b1 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ee0:	200c      	movs	r0, #12
 8000ee2:	f002 f9ca 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	200e      	movs	r0, #14
 8000eec:	f002 f9a9 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ef0:	200e      	movs	r0, #14
 8000ef2:	f002 f9c2 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	200f      	movs	r0, #15
 8000efc:	f002 f9a1 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f00:	200f      	movs	r0, #15
 8000f02:	f002 f9ba 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2010      	movs	r0, #16
 8000f0c:	f002 f999 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f10:	2010      	movs	r0, #16
 8000f12:	f002 f9b2 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2011      	movs	r0, #17
 8000f1c:	f002 f991 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f20:	2011      	movs	r0, #17
 8000f22:	f002 f9aa 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2039      	movs	r0, #57	; 0x39
 8000f2c:	f002 f989 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f30:	2039      	movs	r0, #57	; 0x39
 8000f32:	f002 f9a2 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	203a      	movs	r0, #58	; 0x3a
 8000f3c:	f002 f981 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f40:	203a      	movs	r0, #58	; 0x3a
 8000f42:	f002 f99a 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2045      	movs	r0, #69	; 0x45
 8000f4c:	f002 f979 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f50:	2045      	movs	r0, #69	; 0x45
 8000f52:	f002 f992 	bl	800327a <HAL_NVIC_EnableIRQ>

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	; 0x30
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
 8000f7e:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <MX_GPIO_Init+0x158>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a4e      	ldr	r2, [pc, #312]	; (80010bc <MX_GPIO_Init+0x158>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <MX_GPIO_Init+0x158>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	4b48      	ldr	r3, [pc, #288]	; (80010bc <MX_GPIO_Init+0x158>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a47      	ldr	r2, [pc, #284]	; (80010bc <MX_GPIO_Init+0x158>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b45      	ldr	r3, [pc, #276]	; (80010bc <MX_GPIO_Init+0x158>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b41      	ldr	r3, [pc, #260]	; (80010bc <MX_GPIO_Init+0x158>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a40      	ldr	r2, [pc, #256]	; (80010bc <MX_GPIO_Init+0x158>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <MX_GPIO_Init+0x158>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <MX_GPIO_Init+0x158>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a39      	ldr	r2, [pc, #228]	; (80010bc <MX_GPIO_Init+0x158>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b37      	ldr	r3, [pc, #220]	; (80010bc <MX_GPIO_Init+0x158>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <MX_GPIO_Init+0x158>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a32      	ldr	r2, [pc, #200]	; (80010bc <MX_GPIO_Init+0x158>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b30      	ldr	r3, [pc, #192]	; (80010bc <MX_GPIO_Init+0x158>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <MX_GPIO_Init+0x158>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a2b      	ldr	r2, [pc, #172]	; (80010bc <MX_GPIO_Init+0x158>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b29      	ldr	r3, [pc, #164]	; (80010bc <MX_GPIO_Init+0x158>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ICM20948_CS_Pin|DRIVER_EN_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001028:	4825      	ldr	r0, [pc, #148]	; (80010c0 <MX_GPIO_Init+0x15c>)
 800102a:	f002 fef7 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2130      	movs	r1, #48	; 0x30
 8001032:	4824      	ldr	r0, [pc, #144]	; (80010c4 <MX_GPIO_Init+0x160>)
 8001034:	f002 fef2 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800103e:	4822      	ldr	r0, [pc, #136]	; (80010c8 <MX_GPIO_Init+0x164>)
 8001040:	f002 feec 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin|DRIVER_EN_Pin;
 8001044:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	4818      	ldr	r0, [pc, #96]	; (80010c0 <MX_GPIO_Init+0x15c>)
 800105e:	f002 fd29 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_PARK_UP_Pin|BTN_PARK_DOWN_Pin;
 8001062:	2330      	movs	r3, #48	; 0x30
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800106a:	2302      	movs	r3, #2
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	4812      	ldr	r0, [pc, #72]	; (80010c0 <MX_GPIO_Init+0x15c>)
 8001076:	f002 fd1d 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin;
 800107a:	2330      	movs	r3, #48	; 0x30
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_GPIO_Init+0x160>)
 8001092:	f002 fd0f 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8001096:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_GPIO_Init+0x164>)
 80010b0:	f002 fd00 	bl	8003ab4 <HAL_GPIO_Init>

}
 80010b4:	bf00      	nop
 80010b6:	3730      	adds	r7, #48	; 0x30
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00

080010cc <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	if (UartHandle->Instance == SYSTEM_HARDWARE_UART_HIGH_INSTANSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a71      	ldr	r2, [pc, #452]	; (80012a0 <HAL_UART_RxCpltCallback+0x1d4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d16b      	bne.n	80011b6 <HAL_UART_RxCpltCallback+0xea>
	{
		if (UartHighReceiveState == 0)
 80010de:	4b71      	ldr	r3, [pc, #452]	; (80012a4 <HAL_UART_RxCpltCallback+0x1d8>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d11f      	bne.n	8001128 <HAL_UART_RxCpltCallback+0x5c>
		{
			if ((SerialHighLevelRequest.CR != 13) || (SerialHighLevelRequest.LF != 10))
 80010e8:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <HAL_UART_RxCpltCallback+0x1dc>)
 80010ea:	7b9b      	ldrb	r3, [r3, #14]
 80010ec:	2b0d      	cmp	r3, #13
 80010ee:	d103      	bne.n	80010f8 <HAL_UART_RxCpltCallback+0x2c>
 80010f0:	4b6d      	ldr	r3, [pc, #436]	; (80012a8 <HAL_UART_RxCpltCallback+0x1dc>)
 80010f2:	7bdb      	ldrb	r3, [r3, #15]
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d00c      	beq.n	8001112 <HAL_UART_RxCpltCallback+0x46>
			{
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, LostByte, 1);
 80010f8:	4b6c      	ldr	r3, [pc, #432]	; (80012ac <HAL_UART_RxCpltCallback+0x1e0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	486b      	ldr	r0, [pc, #428]	; (80012b0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001102:	f004 fa73 	bl	80055ec <HAL_UART_Receive_DMA>
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]
				UartHighReceiveState = 1;
 800110a:	4b66      	ldr	r3, [pc, #408]	; (80012a4 <HAL_UART_RxCpltCallback+0x1d8>)
 800110c:	2201      	movs	r2, #1
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e042      	b.n	8001198 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				UartHighReceiveState = 10;
 8001112:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001114:	220a      	movs	r2, #10
 8001116:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 8001118:	2210      	movs	r2, #16
 800111a:	4963      	ldr	r1, [pc, #396]	; (80012a8 <HAL_UART_RxCpltCallback+0x1dc>)
 800111c:	4864      	ldr	r0, [pc, #400]	; (80012b0 <HAL_UART_RxCpltCallback+0x1e4>)
 800111e:	f004 fa65 	bl	80055ec <HAL_UART_Receive_DMA>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e037      	b.n	8001198 <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else
		{
			if(UartHighReceiveState == 1)
 8001128:	4b5e      	ldr	r3, [pc, #376]	; (80012a4 <HAL_UART_RxCpltCallback+0x1d8>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b01      	cmp	r3, #1
 8001130:	d111      	bne.n	8001156 <HAL_UART_RxCpltCallback+0x8a>
			{
				if (LostByte[0] == 13)
 8001132:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <HAL_UART_RxCpltCallback+0x1e0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b0d      	cmp	r3, #13
 800113a:	d102      	bne.n	8001142 <HAL_UART_RxCpltCallback+0x76>
				{
					UartHighReceiveState = 2;
 800113c:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <HAL_UART_RxCpltCallback+0x1d8>)
 800113e:	2202      	movs	r2, #2
 8001140:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)LostByte, 1);
 8001142:	4b5a      	ldr	r3, [pc, #360]	; (80012ac <HAL_UART_RxCpltCallback+0x1e0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2201      	movs	r2, #1
 8001148:	4619      	mov	r1, r3
 800114a:	4859      	ldr	r0, [pc, #356]	; (80012b0 <HAL_UART_RxCpltCallback+0x1e4>)
 800114c:	f004 fa4e 	bl	80055ec <HAL_UART_Receive_DMA>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e020      	b.n	8001198 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				if (UartHighReceiveState == 2)
 8001156:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d11b      	bne.n	8001198 <HAL_UART_RxCpltCallback+0xcc>
				{
					if (LostByte[0] == 10)
 8001160:	4b52      	ldr	r3, [pc, #328]	; (80012ac <HAL_UART_RxCpltCallback+0x1e0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b0a      	cmp	r3, #10
 8001168:	d10a      	bne.n	8001180 <HAL_UART_RxCpltCallback+0xb4>
					{
						UartHighReceiveState = 0;
 800116a:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <HAL_UART_RxCpltCallback+0x1d8>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 8001170:	2210      	movs	r2, #16
 8001172:	494d      	ldr	r1, [pc, #308]	; (80012a8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001174:	484e      	ldr	r0, [pc, #312]	; (80012b0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001176:	f004 fa39 	bl	80055ec <HAL_UART_Receive_DMA>
 800117a:	4603      	mov	r3, r0
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	e00b      	b.n	8001198 <HAL_UART_RxCpltCallback+0xcc>
					}
					else
					{
						UartHighReceiveState = 1;
 8001180:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)LostByte, 1);
 8001186:	4b49      	ldr	r3, [pc, #292]	; (80012ac <HAL_UART_RxCpltCallback+0x1e0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2201      	movs	r2, #1
 800118c:	4619      	mov	r1, r3
 800118e:	4848      	ldr	r0, [pc, #288]	; (80012b0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001190:	f004 fa2c 	bl	80055ec <HAL_UART_Receive_DMA>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}
		if (Res != HAL_OK)
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_UART_RxCpltCallback+0xea>
		{
			MX_USART3_UART_Init();
 800119e:	f001 f931 	bl	8002404 <MX_USART3_UART_Init>
			UartHighReceiveState = 0;
 80011a2:	4b40      	ldr	r3, [pc, #256]	; (80012a4 <HAL_UART_RxCpltCallback+0x1d8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 80011a8:	2210      	movs	r2, #16
 80011aa:	493f      	ldr	r1, [pc, #252]	; (80012a8 <HAL_UART_RxCpltCallback+0x1dc>)
 80011ac:	4840      	ldr	r0, [pc, #256]	; (80012b0 <HAL_UART_RxCpltCallback+0x1e4>)
 80011ae:	f004 fa1d 	bl	80055ec <HAL_UART_Receive_DMA>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == SYSTEM_HARDWARE_UART_LOW_INSTANSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a3e      	ldr	r2, [pc, #248]	; (80012b4 <HAL_UART_RxCpltCallback+0x1e8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d16b      	bne.n	8001298 <HAL_UART_RxCpltCallback+0x1cc>
	{
		if (UartLowReceiveState == 0)
 80011c0:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <HAL_UART_RxCpltCallback+0x1ec>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d11f      	bne.n	800120a <HAL_UART_RxCpltCallback+0x13e>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 80011ca:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <HAL_UART_RxCpltCallback+0x1f0>)
 80011cc:	7b9b      	ldrb	r3, [r3, #14]
 80011ce:	2b0d      	cmp	r3, #13
 80011d0:	d103      	bne.n	80011da <HAL_UART_RxCpltCallback+0x10e>
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <HAL_UART_RxCpltCallback+0x1f0>)
 80011d4:	7bdb      	ldrb	r3, [r3, #15]
 80011d6:	2b0a      	cmp	r3, #10
 80011d8:	d00c      	beq.n	80011f4 <HAL_UART_RxCpltCallback+0x128>
			{
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, LostByte, 1);
 80011da:	4b34      	ldr	r3, [pc, #208]	; (80012ac <HAL_UART_RxCpltCallback+0x1e0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2201      	movs	r2, #1
 80011e0:	4619      	mov	r1, r3
 80011e2:	4837      	ldr	r0, [pc, #220]	; (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 80011e4:	f004 fa02 	bl	80055ec <HAL_UART_Receive_DMA>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
				UartLowReceiveState = 1;
 80011ec:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <HAL_UART_RxCpltCallback+0x1ec>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e042      	b.n	800127a <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				UartLowReceiveState = 10;
 80011f4:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <HAL_UART_RxCpltCallback+0x1ec>)
 80011f6:	220a      	movs	r2, #10
 80011f8:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 80011fa:	2210      	movs	r2, #16
 80011fc:	492f      	ldr	r1, [pc, #188]	; (80012bc <HAL_UART_RxCpltCallback+0x1f0>)
 80011fe:	4830      	ldr	r0, [pc, #192]	; (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001200:	f004 f9f4 	bl	80055ec <HAL_UART_Receive_DMA>
 8001204:	4603      	mov	r3, r0
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e037      	b.n	800127a <HAL_UART_RxCpltCallback+0x1ae>
			}
		}
		else
		{
			if(UartLowReceiveState == 1)
 800120a:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <HAL_UART_RxCpltCallback+0x1ec>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d111      	bne.n	8001238 <HAL_UART_RxCpltCallback+0x16c>
			{
				if (LostByte[0] == 13)
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <HAL_UART_RxCpltCallback+0x1e0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b0d      	cmp	r3, #13
 800121c:	d102      	bne.n	8001224 <HAL_UART_RxCpltCallback+0x158>
				{
					UartLowReceiveState = 2;
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001220:	2202      	movs	r2, #2
 8001222:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)LostByte, 1);
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HAL_UART_RxCpltCallback+0x1e0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	4824      	ldr	r0, [pc, #144]	; (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 800122e:	f004 f9dd 	bl	80055ec <HAL_UART_Receive_DMA>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e020      	b.n	800127a <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				if (UartLowReceiveState == 2)
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_UART_RxCpltCallback+0x1ec>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d11b      	bne.n	800127a <HAL_UART_RxCpltCallback+0x1ae>
				{
					if (LostByte[0] == 10)
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_UART_RxCpltCallback+0x1e0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b0a      	cmp	r3, #10
 800124a:	d10a      	bne.n	8001262 <HAL_UART_RxCpltCallback+0x196>
					{
						UartLowReceiveState = 0;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_UART_RxCpltCallback+0x1ec>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8001252:	2210      	movs	r2, #16
 8001254:	4919      	ldr	r1, [pc, #100]	; (80012bc <HAL_UART_RxCpltCallback+0x1f0>)
 8001256:	481a      	ldr	r0, [pc, #104]	; (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001258:	f004 f9c8 	bl	80055ec <HAL_UART_Receive_DMA>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e00b      	b.n	800127a <HAL_UART_RxCpltCallback+0x1ae>
					}
					else
					{
						UartLowReceiveState = 1;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)LostByte, 1);
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_UART_RxCpltCallback+0x1e0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2201      	movs	r2, #1
 800126e:	4619      	mov	r1, r3
 8001270:	4813      	ldr	r0, [pc, #76]	; (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001272:	f004 f9bb 	bl	80055ec <HAL_UART_Receive_DMA>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00b      	beq.n	8001298 <HAL_UART_RxCpltCallback+0x1cc>
		{
			MX_USART2_UART_Init();
 8001280:	f001 f896 	bl	80023b0 <MX_USART2_UART_Init>
			UartLowReceiveState = 0;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 800128a:	2210      	movs	r2, #16
 800128c:	490b      	ldr	r1, [pc, #44]	; (80012bc <HAL_UART_RxCpltCallback+0x1f0>)
 800128e:	480c      	ldr	r0, [pc, #48]	; (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001290:	f004 f9ac 	bl	80055ec <HAL_UART_Receive_DMA>
 8001294:	4603      	mov	r3, r0
 8001296:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40004800 	.word	0x40004800
 80012a4:	20000031 	.word	0x20000031
 80012a8:	20000100 	.word	0x20000100
 80012ac:	20000144 	.word	0x20000144
 80012b0:	20000470 	.word	0x20000470
 80012b4:	40004400 	.word	0x40004400
 80012b8:	20000030 	.word	0x20000030
 80012bc:	20000098 	.word	0x20000098
 80012c0:	20000574 	.word	0x20000574
 80012c4:	00000000 	.word	0x00000000

080012c8 <UartLowPrepareRaw>:
void UartLowPrepareRaw(uint16_t Difference, int32_t* InputHall, uint8_t Count)
{
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	80fb      	strh	r3, [r7, #6]
 80012d4:	4613      	mov	r3, r2
 80012d6:	717b      	strb	r3, [r7, #5]
	if(InitionHall == 0)
 80012d8:	4b7b      	ldr	r3, [pc, #492]	; (80014c8 <UartLowPrepareRaw+0x200>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d115      	bne.n	800130c <UartLowPrepareRaw+0x44>
	{
		for(int i = 0; i < Count; i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	e00b      	b.n	80012fe <UartLowPrepareRaw+0x36>
		{
			WheelsHall[i].LastHall = InputHall[i];
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4976      	ldr	r1, [pc, #472]	; (80014cc <UartLowPrepareRaw+0x204>)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		for(int i = 0; i < Count; i++)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3301      	adds	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	797b      	ldrb	r3, [r7, #5]
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	429a      	cmp	r2, r3
 8001304:	dbef      	blt.n	80012e6 <UartLowPrepareRaw+0x1e>
		}
		InitionHall = 1;
 8001306:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <UartLowPrepareRaw+0x200>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
	}
	for (int i = 0; i < Count; i++)
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	e03e      	b.n	8001390 <UartLowPrepareRaw+0xc8>
	{
		if (HallActualize(InputHall[i], WheelsHall[i].LastHall, Difference))
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	4413      	add	r3, r2
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	4a6b      	ldr	r2, [pc, #428]	; (80014cc <UartLowPrepareRaw+0x204>)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001324:	88fa      	ldrh	r2, [r7, #6]
 8001326:	4619      	mov	r1, r3
 8001328:	f000 f8da 	bl	80014e0 <HallActualize>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d012      	beq.n	8001358 <UartLowPrepareRaw+0x90>
		{
			WheelsHall[i].OutputHall = InputHall[i];
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	4413      	add	r3, r2
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4963      	ldr	r1, [pc, #396]	; (80014cc <UartLowPrepareRaw+0x204>)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	605a      	str	r2, [r3, #4]
			WheelsHall[i].LastHall = InputHall[i];
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	495e      	ldr	r1, [pc, #376]	; (80014cc <UartLowPrepareRaw+0x204>)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		}
		if (!HallActualize(InputHall[i], WheelsHall[i].LastHall, Difference))
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	4413      	add	r3, r2
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	4a5a      	ldr	r2, [pc, #360]	; (80014cc <UartLowPrepareRaw+0x204>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800136a:	88fa      	ldrh	r2, [r7, #6]
 800136c:	4619      	mov	r1, r3
 800136e:	f000 f8b7 	bl	80014e0 <HallActualize>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d108      	bne.n	800138a <UartLowPrepareRaw+0xc2>
		{
			WheelsHall[i].LastHall = InputHall[i];
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	4413      	add	r3, r2
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4952      	ldr	r1, [pc, #328]	; (80014cc <UartLowPrepareRaw+0x204>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < Count; i++)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3301      	adds	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	797b      	ldrb	r3, [r7, #5]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbbc      	blt.n	8001312 <UartLowPrepareRaw+0x4a>
		}
	}

	switch (SerialControlWheelsResponce.ParameterNumber)
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <UartLowPrepareRaw+0x208>)
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	2b07      	cmp	r3, #7
 800139e:	f200 8088 	bhi.w	80014b2 <UartLowPrepareRaw+0x1ea>
 80013a2:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <UartLowPrepareRaw+0xe0>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	080013c9 	.word	0x080013c9
 80013ac:	0800145f 	.word	0x0800145f
 80013b0:	0800146b 	.word	0x0800146b
 80013b4:	08001477 	.word	0x08001477
 80013b8:	08001483 	.word	0x08001483
 80013bc:	0800148f 	.word	0x0800148f
 80013c0:	0800149b 	.word	0x0800149b
 80013c4:	080014a7 	.word	0x080014a7
	{
		case 0:
			LowDiagnostic.Voltage = SerialControlWheelsResponce.ParameterValue;
 80013c8:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <UartLowPrepareRaw+0x208>)
 80013ca:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80013ce:	4a41      	ldr	r2, [pc, #260]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 80013d0:	6013      	str	r3, [r2, #0]
			LowDiagnostic.Battery += ((Interpolation(LowDiagnostic.Voltage, 28, 41) * 100.0) - LowDiagnostic.Battery) * 0.01;
 80013d2:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 80013d4:	edd3 7a00 	vldr	s15, [r3]
 80013d8:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80014d8 <UartLowPrepareRaw+0x210>
 80013dc:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 80013e0:	eeb0 0a67 	vmov.f32	s0, s15
 80013e4:	f000 f8b0 	bl	8001548 <Interpolation>
 80013e8:	ee10 3a10 	vmov	r3, s0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f84f 	bl	8000490 <__aeabi_f2d>
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <UartLowPrepareRaw+0x214>)
 80013f8:	f7ff f8a2 	bl	8000540 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4614      	mov	r4, r2
 8001402:	461d      	mov	r5, r3
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f841 	bl	8000490 <__aeabi_f2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4620      	mov	r0, r4
 8001414:	4629      	mov	r1, r5
 8001416:	f7fe fedb 	bl	80001d0 <__aeabi_dsub>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	a327      	add	r3, pc, #156	; (adr r3, 80014c0 <UartLowPrepareRaw+0x1f8>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7ff f88a 	bl	8000540 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4614      	mov	r4, r2
 8001432:	461d      	mov	r5, r3
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f829 	bl	8000490 <__aeabi_f2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7fe fec5 	bl	80001d4 <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fa87 	bl	8000964 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 800145a:	6053      	str	r3, [r2, #4]
		  	break;
 800145c:	e029      	b.n	80014b2 <UartLowPrepareRaw+0x1ea>
		case 1:
			LowDiagnostic.CurrentLeft = SerialControlWheelsResponce.ParameterValue;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <UartLowPrepareRaw+0x208>)
 8001460:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 8001466:	6093      	str	r3, [r2, #8]
			break;
 8001468:	e023      	b.n	80014b2 <UartLowPrepareRaw+0x1ea>
		case 2:
			LowDiagnostic.CurrentRight = SerialControlWheelsResponce.ParameterValue;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <UartLowPrepareRaw+0x208>)
 800146c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001470:	4a18      	ldr	r2, [pc, #96]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 8001472:	60d3      	str	r3, [r2, #12]
			break;
 8001474:	e01d      	b.n	80014b2 <UartLowPrepareRaw+0x1ea>
		case 3:
			LowDiagnostic.RPSLeft = SerialControlWheelsResponce.ParameterValue;
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <UartLowPrepareRaw+0x208>)
 8001478:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800147c:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 800147e:	6113      	str	r3, [r2, #16]
			break;
 8001480:	e017      	b.n	80014b2 <UartLowPrepareRaw+0x1ea>
		case 4:
			LowDiagnostic.RPSRight = SerialControlWheelsResponce.ParameterValue;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <UartLowPrepareRaw+0x208>)
 8001484:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001488:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 800148a:	6153      	str	r3, [r2, #20]
			break;
 800148c:	e011      	b.n	80014b2 <UartLowPrepareRaw+0x1ea>
		case 5:
			LowDiagnostic.OverCurrCount = SerialControlWheelsResponce.ParameterValue;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <UartLowPrepareRaw+0x208>)
 8001490:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001494:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 8001496:	6193      	str	r3, [r2, #24]
			break;
 8001498:	e00b      	b.n	80014b2 <UartLowPrepareRaw+0x1ea>
		case 6:
			LowDiagnostic.ConnErrCount = SerialControlWheelsResponce.ParameterValue;
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <UartLowPrepareRaw+0x208>)
 800149c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 80014a2:	61d3      	str	r3, [r2, #28]
			break;
 80014a4:	e005      	b.n	80014b2 <UartLowPrepareRaw+0x1ea>
		case 7:
			LowDiagnostic.CommTime = SerialControlWheelsResponce.ParameterValue;
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <UartLowPrepareRaw+0x208>)
 80014a8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <UartLowPrepareRaw+0x20c>)
 80014ae:	6213      	str	r3, [r2, #32]
		  	break;
 80014b0:	bf00      	nop
	}
}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bdb0      	pop	{r4, r5, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	f3af 8000 	nop.w
 80014c0:	47ae147b 	.word	0x47ae147b
 80014c4:	3f847ae1 	.word	0x3f847ae1
 80014c8:	20000032 	.word	0x20000032
 80014cc:	20000134 	.word	0x20000134
 80014d0:	20000098 	.word	0x20000098
 80014d4:	200000bc 	.word	0x200000bc
 80014d8:	42240000 	.word	0x42240000
 80014dc:	40590000 	.word	0x40590000

080014e0 <HallActualize>:
int HallActualize(int32_t NewStep, int32_t LastStep, int32_t Difference)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	int32_t CalcDiff = abs(LastStep - NewStep);
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	bfb8      	it	lt
 80014f6:	425b      	neglt	r3, r3
 80014f8:	617b      	str	r3, [r7, #20]
	if (CalcDiff <= Difference)
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	dc01      	bgt.n	8001506 <HallActualize+0x26>
	{
		return 1;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HallActualize+0x28>
	}
	return 0;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <GPIOUpdate>:
void GPIOUpdate()
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	FootButtonUp = HAL_GPIO_ReadPin(SYSTEM_HARDWARE_PARKING_LEG_UP_PORT, SYSTEM_HARDWARE_PARKING_LEG_UP_PIN);
 8001518:	2120      	movs	r1, #32
 800151a:	4808      	ldr	r0, [pc, #32]	; (800153c <GPIOUpdate+0x28>)
 800151c:	f002 fc66 	bl	8003dec <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <GPIOUpdate+0x2c>)
 8001526:	701a      	strb	r2, [r3, #0]
	FootButtonDown = HAL_GPIO_ReadPin(SYSTEM_HARDWARE_PARKING_LEG_DOWN_PORT, SYSTEM_HARDWARE_PARKING_LEG_DOWN_PIN);
 8001528:	2110      	movs	r1, #16
 800152a:	4804      	ldr	r0, [pc, #16]	; (800153c <GPIOUpdate+0x28>)
 800152c:	f002 fc5e 	bl	8003dec <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <GPIOUpdate+0x30>)
 8001536:	701a      	strb	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40021000 	.word	0x40021000
 8001540:	20000033 	.word	0x20000033
 8001544:	20000034 	.word	0x20000034

08001548 <Interpolation>:
float Interpolation(float Value, float Min, float Max)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001552:	edc7 0a02 	vstr	s1, [r7, #8]
 8001556:	ed87 1a01 	vstr	s2, [r7, #4]
    float Result = (Value - Min) / (Max - Min);
 800155a:	ed97 7a03 	vldr	s14, [r7, #12]
 800155e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001562:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001566:	ed97 7a01 	vldr	s14, [r7, #4]
 800156a:	edd7 7a02 	vldr	s15, [r7, #8]
 800156e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001576:	edc7 7a05 	vstr	s15, [r7, #20]
    if (Result > 1)
 800157a:	edd7 7a05 	vldr	s15, [r7, #20]
 800157e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158a:	dd02      	ble.n	8001592 <Interpolation+0x4a>
    {
        return 1;
 800158c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001590:	e00a      	b.n	80015a8 <Interpolation+0x60>
    }
    if (Result < 0)
 8001592:	edd7 7a05 	vldr	s15, [r7, #20]
 8001596:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159e:	d502      	bpl.n	80015a6 <Interpolation+0x5e>
    {
        return 0;
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e000      	b.n	80015a8 <Interpolation+0x60>
    }
    return Result;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	ee07 3a90 	vmov	s15, r3
}
 80015ac:	eeb0 0a67 	vmov.f32	s0, s15
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <ADCInit>:
void ADCInit()
{
 80015bc:	b480      	push	{r7}
 80015be:	b08b      	sub	sp, #44	; 0x2c
 80015c0:	af00      	add	r7, sp, #0
	uint16_t Raw[SYSTEM_HARDWARE_ADC_Channel_Count];
	uint16_t Sensors[SYSTEM_HARDWARE_ADC_Channel_Count - 3];
	float Amperage[SYSTEM_HARDWARE_ADC_Channel_Count - 5];
	AdcModule.Raw = Raw;
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <ADCInit+0x28>)
 80015c4:	f107 0318 	add.w	r3, r7, #24
 80015c8:	6013      	str	r3, [r2, #0]
	AdcModule.Sensors = Sensors;
 80015ca:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <ADCInit+0x28>)
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	6053      	str	r3, [r2, #4]
	AdcModule.Amperage = Amperage;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <ADCInit+0x28>)
 80015d4:	463b      	mov	r3, r7
 80015d6:	6093      	str	r3, [r2, #8]
}
 80015d8:	bf00      	nop
 80015da:	372c      	adds	r7, #44	; 0x2c
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	200000e8 	.word	0x200000e8

080015e8 <ADCUpdate>:
void ADCUpdate()
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	e00e      	b.n	8001612 <ADCUpdate+0x2a>
	{
		AdcModule.Raw[i] = ReadAdcChanel(i);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	b2d9      	uxtb	r1, r3
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <ADCUpdate+0x88>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	18d4      	adds	r4, r2, r3
 8001602:	4608      	mov	r0, r1
 8001604:	f000 f8ea 	bl	80017dc <ReadAdcChanel>
 8001608:	4603      	mov	r3, r0
 800160a:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3301      	adds	r3, #1
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b07      	cmp	r3, #7
 8001616:	dded      	ble.n	80015f4 <ADCUpdate+0xc>
	}
#ifndef DEBUG_NO_ADC_ALL
#ifndef DEBUG_NO_ADC_RAW
	DebugADCRawFL = AdcModule.Raw[0];
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <ADCUpdate+0x88>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	881a      	ldrh	r2, [r3, #0]
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <ADCUpdate+0x8c>)
 8001620:	801a      	strh	r2, [r3, #0]
	DebugADCRawFR = AdcModule.Raw[1];
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <ADCUpdate+0x88>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	885a      	ldrh	r2, [r3, #2]
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <ADCUpdate+0x90>)
 800162a:	801a      	strh	r2, [r3, #0]
	DebugADCRawBL = AdcModule.Raw[2];
 800162c:	4b10      	ldr	r3, [pc, #64]	; (8001670 <ADCUpdate+0x88>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	889a      	ldrh	r2, [r3, #4]
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <ADCUpdate+0x94>)
 8001634:	801a      	strh	r2, [r3, #0]
	DebugADCRawBR = AdcModule.Raw[3];
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <ADCUpdate+0x88>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	88da      	ldrh	r2, [r3, #6]
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <ADCUpdate+0x98>)
 800163e:	801a      	strh	r2, [r3, #0]
	DebugADCRawCN = AdcModule.Raw[4];
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <ADCUpdate+0x88>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	891a      	ldrh	r2, [r3, #8]
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <ADCUpdate+0x9c>)
 8001648:	801a      	strh	r2, [r3, #0]
	DebugADCRaw36 = AdcModule.Raw[5];
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <ADCUpdate+0x88>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	895a      	ldrh	r2, [r3, #10]
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <ADCUpdate+0xa0>)
 8001652:	801a      	strh	r2, [r3, #0]
	DebugADCRaw12 = AdcModule.Raw[6];
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <ADCUpdate+0x88>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	899a      	ldrh	r2, [r3, #12]
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <ADCUpdate+0xa4>)
 800165c:	801a      	strh	r2, [r3, #0]
	DebugADCRaw5 = AdcModule.Raw[7];
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <ADCUpdate+0x88>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	89da      	ldrh	r2, [r3, #14]
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <ADCUpdate+0xa8>)
 8001666:	801a      	strh	r2, [r3, #0]
#endif
#endif
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	200000e8 	.word	0x200000e8
 8001674:	20000088 	.word	0x20000088
 8001678:	2000008a 	.word	0x2000008a
 800167c:	20000090 	.word	0x20000090
 8001680:	2000008e 	.word	0x2000008e
 8001684:	20000092 	.word	0x20000092
 8001688:	2000012e 	.word	0x2000012e
 800168c:	200000a8 	.word	0x200000a8
 8001690:	20000110 	.word	0x20000110
 8001694:	00000000 	.word	0x00000000

08001698 <ADCPrepare>:
void ADCPrepare()
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count - 3; i++) // Sensor
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e00e      	b.n	80016c2 <ADCPrepare+0x2a>
	{
		AdcModule.Sensors[i] = AdcModule.Raw[i] * 1; // No conversion
 80016a4:	4b4c      	ldr	r3, [pc, #304]	; (80017d8 <ADCPrepare+0x140>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	441a      	add	r2, r3
 80016ae:	4b4a      	ldr	r3, [pc, #296]	; (80017d8 <ADCPrepare+0x140>)
 80016b0:	6859      	ldr	r1, [r3, #4]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	440b      	add	r3, r1
 80016b8:	8812      	ldrh	r2, [r2, #0]
 80016ba:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count - 3; i++) // Sensor
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3301      	adds	r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	dded      	ble.n	80016a4 <ADCPrepare+0xc>
	}
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 3; i < SYSTEM_HARDWARE_ADC_Channel_Count - 2; i++) // Current 30A
 80016c8:	2305      	movs	r3, #5
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	e032      	b.n	8001734 <ADCPrepare+0x9c>
	{
		AdcModule.Amperage[i - (SYSTEM_HARDWARE_ADC_Channel_Count - 3)] = (AdcModule.Raw[i] * 3.3 / 4095) * 0.066;
 80016ce:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <ADCPrepare+0x140>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fec6 	bl	800046c <__aeabi_i2d>
 80016e0:	a335      	add	r3, pc, #212	; (adr r3, 80017b8 <ADCPrepare+0x120>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe ff2b 	bl	8000540 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	a333      	add	r3, pc, #204	; (adr r3, 80017c0 <ADCPrepare+0x128>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7ff f84c 	bl	8000794 <__aeabi_ddiv>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	a330      	add	r3, pc, #192	; (adr r3, 80017c8 <ADCPrepare+0x130>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7fe ff19 	bl	8000540 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <ADCPrepare+0x140>)
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001720:	3b05      	subs	r3, #5
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	18d4      	adds	r4, r2, r3
 8001726:	f7ff f91d 	bl	8000964 <__aeabi_d2f>
 800172a:	4603      	mov	r3, r0
 800172c:	6023      	str	r3, [r4, #0]
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 3; i < SYSTEM_HARDWARE_ADC_Channel_Count - 2; i++) // Current 30A
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3301      	adds	r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b05      	cmp	r3, #5
 8001738:	ddc9      	ble.n	80016ce <ADCPrepare+0x36>
	}
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 2; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++) // Current 20A
 800173a:	2306      	movs	r3, #6
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	e032      	b.n	80017a6 <ADCPrepare+0x10e>
	{
		AdcModule.Amperage[i - (SYSTEM_HARDWARE_ADC_Channel_Count - 2)] = (AdcModule.Raw[i] * 3.3 / 4095) * 0.1;
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <ADCPrepare+0x140>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fe8d 	bl	800046c <__aeabi_i2d>
 8001752:	a319      	add	r3, pc, #100	; (adr r3, 80017b8 <ADCPrepare+0x120>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe fef2 	bl	8000540 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	a316      	add	r3, pc, #88	; (adr r3, 80017c0 <ADCPrepare+0x128>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7ff f813 	bl	8000794 <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	a316      	add	r3, pc, #88	; (adr r3, 80017d0 <ADCPrepare+0x138>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe fee0 	bl	8000540 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <ADCPrepare+0x140>)
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001792:	3b06      	subs	r3, #6
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	18d4      	adds	r4, r2, r3
 8001798:	f7ff f8e4 	bl	8000964 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	6023      	str	r3, [r4, #0]
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 2; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++) // Current 20A
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3301      	adds	r3, #1
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b07      	cmp	r3, #7
 80017aa:	ddc9      	ble.n	8001740 <ADCPrepare+0xa8>
	}
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd90      	pop	{r4, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	66666666 	.word	0x66666666
 80017bc:	400a6666 	.word	0x400a6666
 80017c0:	00000000 	.word	0x00000000
 80017c4:	40affe00 	.word	0x40affe00
 80017c8:	4189374c 	.word	0x4189374c
 80017cc:	3fb0e560 	.word	0x3fb0e560
 80017d0:	9999999a 	.word	0x9999999a
 80017d4:	3fb99999 	.word	0x3fb99999
 80017d8:	200000e8 	.word	0x200000e8

080017dc <ReadAdcChanel>:
uint16_t ReadAdcChanel(uint8_t Channel)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]

	uint16_t RetVal;

	switch(Channel)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2b07      	cmp	r3, #7
 80017f8:	d82a      	bhi.n	8001850 <ReadAdcChanel+0x74>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <ReadAdcChanel+0x24>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	08001821 	.word	0x08001821
 8001804:	08001827 	.word	0x08001827
 8001808:	0800182d 	.word	0x0800182d
 800180c:	08001833 	.word	0x08001833
 8001810:	08001839 	.word	0x08001839
 8001814:	0800183f 	.word	0x0800183f
 8001818:	08001845 	.word	0x08001845
 800181c:	0800184b 	.word	0x0800184b
	{
	case 0:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_FL;
 8001820:	230b      	movs	r3, #11
 8001822:	60fb      	str	r3, [r7, #12]
		break;
 8001824:	e014      	b.n	8001850 <ReadAdcChanel+0x74>
	case 1:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_FR;
 8001826:	230c      	movs	r3, #12
 8001828:	60fb      	str	r3, [r7, #12]
		break;
 800182a:	e011      	b.n	8001850 <ReadAdcChanel+0x74>
	case 2:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_BL;
 800182c:	2301      	movs	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
		break;
 8001830:	e00e      	b.n	8001850 <ReadAdcChanel+0x74>
	case 3:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_BR;
 8001832:	230a      	movs	r3, #10
 8001834:	60fb      	str	r3, [r7, #12]
		break;
 8001836:	e00b      	b.n	8001850 <ReadAdcChanel+0x74>
	case 4:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_CN;
 8001838:	2302      	movs	r3, #2
 800183a:	60fb      	str	r3, [r7, #12]
		break;
 800183c:	e008      	b.n	8001850 <ReadAdcChanel+0x74>
	case 5:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_36;
 800183e:	2309      	movs	r3, #9
 8001840:	60fb      	str	r3, [r7, #12]
		break;
 8001842:	e005      	b.n	8001850 <ReadAdcChanel+0x74>
	case 6:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_12;
 8001844:	2308      	movs	r3, #8
 8001846:	60fb      	str	r3, [r7, #12]
		break;
 8001848:	e002      	b.n	8001850 <ReadAdcChanel+0x74>
	case 7:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_5;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
		break;
 800184e:	bf00      	nop
	}

	sConfig.Rank = 1;
 8001850:	2301      	movs	r3, #1
 8001852:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(SYSTEM_HARDWARE_ADC, &sConfig) != HAL_OK)
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	480e      	ldr	r0, [pc, #56]	; (8001898 <ReadAdcChanel+0xbc>)
 8001860:	f001 f9f6 	bl	8002c50 <HAL_ADC_ConfigChannel>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <ReadAdcChanel+0x92>
	{
		Error_Handler();
 800186a:	f000 f9bb 	bl	8001be4 <Error_Handler>
	}
	HAL_ADC_Start(SYSTEM_HARDWARE_ADC);
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <ReadAdcChanel+0xbc>)
 8001870:	f001 f850 	bl	8002914 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(SYSTEM_HARDWARE_ADC, 1000);
 8001874:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <ReadAdcChanel+0xbc>)
 800187a:	f001 f950 	bl	8002b1e <HAL_ADC_PollForConversion>
	RetVal = HAL_ADC_GetValue(SYSTEM_HARDWARE_ADC);
 800187e:	4806      	ldr	r0, [pc, #24]	; (8001898 <ReadAdcChanel+0xbc>)
 8001880:	f001 f9d8 	bl	8002c34 <HAL_ADC_GetValue>
 8001884:	4603      	mov	r3, r0
 8001886:	83fb      	strh	r3, [r7, #30]
	HAL_ADC_Stop(SYSTEM_HARDWARE_ADC);
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <ReadAdcChanel+0xbc>)
 800188a:	f001 f915 	bl	8002ab8 <HAL_ADC_Stop>
	return RetVal;
 800188e:	8bfb      	ldrh	r3, [r7, #30]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000040 	.word	0x20000040

0800189c <SerialLowControlLoop>:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
		HAL_Delay(period);
	}
}
void SerialLowControlLoop()
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	SerialControlWheelsRequest.ControlMode = 0;
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <SerialLowControlLoop+0x40>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
	SerialControlWheelsRequest.ParameterNumber = 0;
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <SerialLowControlLoop+0x40>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	705a      	strb	r2, [r3, #1]
	SerialControlWheelsRequest.WheelLeft = 0;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <SerialLowControlLoop+0x40>)
 80018ae:	3306      	adds	r3, #6
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight = 0;
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <SerialLowControlLoop+0x40>)
 80018b8:	330a      	adds	r3, #10
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.CR=13;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <SerialLowControlLoop+0x40>)
 80018c2:	220d      	movs	r2, #13
 80018c4:	739a      	strb	r2, [r3, #14]
	SerialControlWheelsRequest.LF=10;
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <SerialLowControlLoop+0x40>)
 80018c8:	220a      	movs	r2, #10
 80018ca:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsRequest.Buffer, WHEELS_REQUEST_SIZE);
 80018cc:	2210      	movs	r2, #16
 80018ce:	4903      	ldr	r1, [pc, #12]	; (80018dc <SerialLowControlLoop+0x40>)
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <SerialLowControlLoop+0x44>)
 80018d2:	f003 fe0d 	bl	80054f0 <HAL_UART_Transmit_DMA>
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200000ac 	.word	0x200000ac
 80018e0:	20000574 	.word	0x20000574

080018e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ea:	f000 ff5d 	bl	80027a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ee:	f000 f90f 	bl	8001b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f2:	f7ff fb37 	bl	8000f64 <MX_GPIO_Init>
  MX_DMA_Init();
 80018f6:	f7ff facf 	bl	8000e98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018fa:	f000 fd59 	bl	80023b0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80018fe:	f000 f977 	bl	8001bf0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8001902:	f000 fd7f 	bl	8002404 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001906:	f000 fab9 	bl	8001e7c <MX_TIM1_Init>
  MX_TIM4_Init();
 800190a:	f000 fb6f 	bl	8001fec <MX_TIM4_Init>
  MX_ADC1_Init();
 800190e:	f7ff f9f5 	bl	8000cfc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
#ifndef SYSTEM_NO_ADC_INIT
  ADCInit();
 8001912:	f7ff fe53 	bl	80015bc <ADCInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  if (HAL_GetTick() - LastPkgTimeUartLow > SYSTEM_TIMING_MS_UART_LOW)
 8001916:	f000 ffad 	bl	8002874 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	4b70      	ldr	r3, [pc, #448]	; (8001ae0 <main+0x1fc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d90e      	bls.n	8001944 <main+0x60>
	  {
		  MX_USART2_UART_Init();
 8001926:	f000 fd43 	bl	80023b0 <MX_USART2_UART_Init>
		  UartLowReceiveState = 0;
 800192a:	4b6e      	ldr	r3, [pc, #440]	; (8001ae4 <main+0x200>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8001930:	2210      	movs	r2, #16
 8001932:	496d      	ldr	r1, [pc, #436]	; (8001ae8 <main+0x204>)
 8001934:	486d      	ldr	r0, [pc, #436]	; (8001aec <main+0x208>)
 8001936:	f003 fe59 	bl	80055ec <HAL_UART_Receive_DMA>
		  LastPkgTimeUartLow = HAL_GetTick();
 800193a:	f000 ff9b 	bl	8002874 <HAL_GetTick>
 800193e:	4603      	mov	r3, r0
 8001940:	4a67      	ldr	r2, [pc, #412]	; (8001ae0 <main+0x1fc>)
 8001942:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_HIGH_UART_LOOP
	  if (HAL_GetTick() - LastPkgTimeUartHigh > SYSTEM_TIMING_MS_UART_HIGH)
 8001944:	f000 ff96 	bl	8002874 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	4b69      	ldr	r3, [pc, #420]	; (8001af0 <main+0x20c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b64      	cmp	r3, #100	; 0x64
 8001952:	d90e      	bls.n	8001972 <main+0x8e>
	  {
		  MX_USART3_UART_Init();
 8001954:	f000 fd56 	bl	8002404 <MX_USART3_UART_Init>
		  UartHighReceiveState = 0;
 8001958:	4b66      	ldr	r3, [pc, #408]	; (8001af4 <main+0x210>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 800195e:	2210      	movs	r2, #16
 8001960:	4965      	ldr	r1, [pc, #404]	; (8001af8 <main+0x214>)
 8001962:	4866      	ldr	r0, [pc, #408]	; (8001afc <main+0x218>)
 8001964:	f003 fe42 	bl	80055ec <HAL_UART_Receive_DMA>
		  LastPkgTimeUartHigh = HAL_GetTick();
 8001968:	f000 ff84 	bl	8002874 <HAL_GetTick>
 800196c:	4603      	mov	r3, r0
 800196e:	4a60      	ldr	r2, [pc, #384]	; (8001af0 <main+0x20c>)
 8001970:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  if ((UartLowReceiveState == 10) && (SerialControlWheelsResponce.CR == 13) && (SerialControlWheelsResponce.LF == 10))
 8001972:	4b5c      	ldr	r3, [pc, #368]	; (8001ae4 <main+0x200>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b0a      	cmp	r3, #10
 800197a:	d123      	bne.n	80019c4 <main+0xe0>
 800197c:	4b5a      	ldr	r3, [pc, #360]	; (8001ae8 <main+0x204>)
 800197e:	7b9b      	ldrb	r3, [r3, #14]
 8001980:	2b0d      	cmp	r3, #13
 8001982:	d11f      	bne.n	80019c4 <main+0xe0>
 8001984:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <main+0x204>)
 8001986:	7bdb      	ldrb	r3, [r3, #15]
 8001988:	2b0a      	cmp	r3, #10
 800198a:	d11b      	bne.n	80019c4 <main+0xe0>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800198c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001990:	485b      	ldr	r0, [pc, #364]	; (8001b00 <main+0x21c>)
 8001992:	f002 fa5c 	bl	8003e4e <HAL_GPIO_TogglePin>
		  UartLowReceiveState = 0;
 8001996:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <main+0x200>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
		  int32_t TemplateWheels[2] = { SerialControlWheelsResponce.WheelLeftSteps, SerialControlWheelsResponce.WheelRightSteps };
 800199c:	4b52      	ldr	r3, [pc, #328]	; (8001ae8 <main+0x204>)
 800199e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <main+0x204>)
 80019a6:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80019aa:	607b      	str	r3, [r7, #4]
		  UartLowPrepareRaw(SYSTEM_HALL_FILTER_MAX, TemplateWheels, 2);
 80019ac:	463b      	mov	r3, r7
 80019ae:	2202      	movs	r2, #2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019b6:	f7ff fc87 	bl	80012c8 <UartLowPrepareRaw>
		  LastPkgTimeUartLow = HAL_GetTick();
 80019ba:	f000 ff5b 	bl	8002874 <HAL_GetTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	4a47      	ldr	r2, [pc, #284]	; (8001ae0 <main+0x1fc>)
 80019c2:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_GPIO_LOOP
	  if (HAL_GetTick() - LastUpdateGPIO > SYSTEM_TIMING_MS_GPIO)
 80019c4:	f000 ff56 	bl	8002874 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b4e      	ldr	r3, [pc, #312]	; (8001b04 <main+0x220>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b64      	cmp	r3, #100	; 0x64
 80019d2:	d906      	bls.n	80019e2 <main+0xfe>
	  {
		  GPIOUpdate();
 80019d4:	f7ff fd9e 	bl	8001514 <GPIOUpdate>
		  LastUpdateGPIO = HAL_GetTick();
 80019d8:	f000 ff4c 	bl	8002874 <HAL_GetTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a49      	ldr	r2, [pc, #292]	; (8001b04 <main+0x220>)
 80019e0:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_ADC_INIT
#ifndef SYSTEM_NO_ADC_LOOP
	  if (HAL_GetTick() - LastUpdateADC > SYSTEM_TIMING_MS_ADC)
 80019e2:	f000 ff47 	bl	8002874 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <main+0x224>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b0a      	cmp	r3, #10
 80019f0:	d908      	bls.n	8001a04 <main+0x120>
	  {
		  ADCUpdate();
 80019f2:	f7ff fdf9 	bl	80015e8 <ADCUpdate>
		  ADCPrepare();
 80019f6:	f7ff fe4f 	bl	8001698 <ADCPrepare>
		  LastUpdateADC = HAL_GetTick();
 80019fa:	f000 ff3b 	bl	8002874 <HAL_GetTick>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4a41      	ldr	r2, [pc, #260]	; (8001b08 <main+0x224>)
 8001a02:	6013      	str	r3, [r2, #0]
		  IMU_UPDATE();
		  LastUpdateIMU = HAL_GetTick();
	  }
		*/
#ifndef SYSTEM_NO_HIGH_UART_LOOP
	  if ((UartHighReceiveState == 10) && (SerialHighLevelRequest.CR == 13) && (SerialHighLevelRequest.LF == 10))
 8001a04:	4b3b      	ldr	r3, [pc, #236]	; (8001af4 <main+0x210>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b0a      	cmp	r3, #10
 8001a0c:	d165      	bne.n	8001ada <main+0x1f6>
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <main+0x214>)
 8001a10:	7b9b      	ldrb	r3, [r3, #14]
 8001a12:	2b0d      	cmp	r3, #13
 8001a14:	d161      	bne.n	8001ada <main+0x1f6>
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <main+0x214>)
 8001a18:	7bdb      	ldrb	r3, [r3, #15]
 8001a1a:	2b0a      	cmp	r3, #10
 8001a1c:	d15d      	bne.n	8001ada <main+0x1f6>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a22:	4837      	ldr	r0, [pc, #220]	; (8001b00 <main+0x21c>)
 8001a24:	f002 fa13 	bl	8003e4e <HAL_GPIO_TogglePin>
		  UartHighReceiveState = 0;
 8001a28:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <main+0x210>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
		  SerialHighLevelResponce.ControllerState = 0;
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <main+0x228>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
		  SerialHighLevelResponce.WheelLeftSteps = 228;
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <main+0x228>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	f062 021b 	orn	r2, r2, #27
 8001a3c:	705a      	strb	r2, [r3, #1]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	709a      	strb	r2, [r3, #2]
 8001a42:	2200      	movs	r2, #0
 8001a44:	70da      	strb	r2, [r3, #3]
 8001a46:	2200      	movs	r2, #0
 8001a48:	711a      	strb	r2, [r3, #4]
		  SerialHighLevelResponce.WheelRightSteps = 1337;
 8001a4a:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <main+0x228>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f042 0239 	orr.w	r2, r2, #57	; 0x39
 8001a52:	715a      	strb	r2, [r3, #5]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f042 0205 	orr.w	r2, r2, #5
 8001a5a:	719a      	strb	r2, [r3, #6]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	71da      	strb	r2, [r3, #7]
 8001a60:	2200      	movs	r2, #0
 8001a62:	721a      	strb	r2, [r3, #8]
		  SerialHighLevelResponce.BatteryPersentage = 99;
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <main+0x228>)
 8001a66:	2263      	movs	r2, #99	; 0x63
 8001a68:	725a      	strb	r2, [r3, #9]
		  SerialHighLevelResponce.Roll = 174;
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <main+0x228>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f062 0251 	orn	r2, r2, #81	; 0x51
 8001a72:	729a      	strb	r2, [r3, #10]
 8001a74:	2200      	movs	r2, #0
 8001a76:	72da      	strb	r2, [r3, #11]
		  SerialHighLevelResponce.Pitch = 666;
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <main+0x228>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f062 0265 	orn	r2, r2, #101	; 0x65
 8001a80:	731a      	strb	r2, [r3, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f042 0202 	orr.w	r2, r2, #2
 8001a88:	735a      	strb	r2, [r3, #13]
		  SerialHighLevelResponce.Yaw = 777;
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <main+0x228>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f042 0209 	orr.w	r2, r2, #9
 8001a92:	739a      	strb	r2, [r3, #14]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f042 0203 	orr.w	r2, r2, #3
 8001a9a:	73da      	strb	r2, [r3, #15]
		  SerialHighLevelResponce.CenterIkSensor = 150;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <main+0x228>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f062 0269 	orn	r2, r2, #105	; 0x69
 8001aa4:	741a      	strb	r2, [r3, #16]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	745a      	strb	r2, [r3, #17]
		  SerialHighLevelResponce.ParameterNumber = 0;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <main+0x228>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	749a      	strb	r2, [r3, #18]
		  SerialHighLevelResponce.ParametrValue = 0;
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <main+0x228>)
 8001ab2:	3313      	adds	r3, #19
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
		  SerialHighLevelResponce.CR = 13;
 8001aba:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <main+0x228>)
 8001abc:	220d      	movs	r2, #13
 8001abe:	75da      	strb	r2, [r3, #23]
		  SerialHighLevelResponce.LF = 10;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <main+0x228>)
 8001ac2:	220a      	movs	r2, #10
 8001ac4:	761a      	strb	r2, [r3, #24]
 		  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)SerialHighLevelResponce.Buffer, HIGH_LEVEL_RESPONCE_SIZE);
 8001ac6:	2219      	movs	r2, #25
 8001ac8:	4910      	ldr	r1, [pc, #64]	; (8001b0c <main+0x228>)
 8001aca:	480c      	ldr	r0, [pc, #48]	; (8001afc <main+0x218>)
 8001acc:	f003 fd10 	bl	80054f0 <HAL_UART_Transmit_DMA>
		  LastPkgTimeUartHigh = HAL_GetTick();
 8001ad0:	f000 fed0 	bl	8002874 <HAL_GetTick>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <main+0x20c>)
 8001ad8:	6013      	str	r3, [r2, #0]
	  else
	  {
		  MotopStop();
	  }*/
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  SerialLowControlLoop();
 8001ada:	f7ff fedf 	bl	800189c <SerialLowControlLoop>
	  if (HAL_GetTick() - LastPkgTimeUartLow > SYSTEM_TIMING_MS_UART_LOW)
 8001ade:	e71a      	b.n	8001916 <main+0x32>
 8001ae0:	20000028 	.word	0x20000028
 8001ae4:	20000030 	.word	0x20000030
 8001ae8:	20000098 	.word	0x20000098
 8001aec:	20000574 	.word	0x20000574
 8001af0:	2000002c 	.word	0x2000002c
 8001af4:	20000031 	.word	0x20000031
 8001af8:	20000100 	.word	0x20000100
 8001afc:	20000470 	.word	0x20000470
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	20000038 	.word	0x20000038
 8001b08:	2000003c 	.word	0x2000003c
 8001b0c:	20000114 	.word	0x20000114

08001b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b094      	sub	sp, #80	; 0x50
 8001b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	2230      	movs	r2, #48	; 0x30
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 fdf2 	bl	8006708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b76:	2302      	movs	r3, #2
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b80:	2304      	movs	r3, #4
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b84:	23a8      	movs	r3, #168	; 0xa8
 8001b86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b90:	f107 0320 	add.w	r3, r7, #32
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 f975 	bl	8003e84 <HAL_RCC_OscConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ba0:	f000 f820 	bl	8001be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	2105      	movs	r1, #5
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 fbd6 	bl	8004374 <HAL_RCC_ClockConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bce:	f000 f809 	bl	8001be4 <Error_Handler>
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3750      	adds	r7, #80	; 0x50
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be8:	b672      	cpsid	i
}
 8001bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bec:	e7fe      	b.n	8001bec <Error_Handler+0x8>
	...

08001bf0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <MX_SPI2_Init+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c02:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001c10:	2202      	movs	r2, #2
 8001c12:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c20:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001c24:	2210      	movs	r2, #16
 8001c26:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001c3c:	220a      	movs	r2, #10
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_SPI2_Init+0x64>)
 8001c42:	f002 fd93 	bl	800476c <HAL_SPI_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c4c:	f7ff ffca 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000148 	.word	0x20000148
 8001c58:	40003800 	.word	0x40003800

08001c5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <HAL_SPI_MspInit+0x84>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d12c      	bne.n	8001cd8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_SPI_MspInit+0x88>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 8001cb6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cc8:	2305      	movs	r3, #5
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <HAL_SPI_MspInit+0x8c>)
 8001cd4:	f001 feee 	bl	8003ab4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40003800 	.word	0x40003800
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020400 	.word	0x40020400

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <NMI_Handler+0x4>

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d88:	f000 fd60 	bl	800284c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <DMA1_Stream1_IRQHandler+0x10>)
 8001d96:	f001 fc23 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000410 	.word	0x20000410

08001da4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <DMA1_Stream3_IRQHandler+0x10>)
 8001daa:	f001 fc19 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200001a0 	.word	0x200001a0

08001db8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <DMA1_Stream4_IRQHandler+0x10>)
 8001dbe:	f001 fc0f 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200004b4 	.word	0x200004b4

08001dcc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <DMA1_Stream5_IRQHandler+0x10>)
 8001dd2:	f001 fc05 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200003b0 	.word	0x200003b0

08001de0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <DMA1_Stream6_IRQHandler+0x10>)
 8001de6:	f001 fbfb 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000514 	.word	0x20000514

08001df4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <USART2_IRQHandler+0x10>)
 8001dfa:	f003 fc27 	bl	800564c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000574 	.word	0x20000574

08001e08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <USART3_IRQHandler+0x10>)
 8001e0e:	f003 fc1d 	bl	800564c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000470 	.word	0x20000470

08001e1c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <DMA2_Stream1_IRQHandler+0x10>)
 8001e22:	f001 fbdd 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000200 	.word	0x20000200

08001e30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA2_Stream2_IRQHandler+0x10>)
 8001e36:	f001 fbd3 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000308 	.word	0x20000308

08001e44 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <DMA2_Stream6_IRQHandler+0x10>)
 8001e4a:	f001 fbc9 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200002a8 	.word	0x200002a8

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch3;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b096      	sub	sp, #88	; 0x58
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]
 8001eaa:	615a      	str	r2, [r3, #20]
 8001eac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f004 fc27 	bl	8006708 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eba:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001ebc:	4a4a      	ldr	r2, [pc, #296]	; (8001fe8 <MX_TIM1_Init+0x16c>)
 8001ebe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001ec0:	4b48      	ldr	r3, [pc, #288]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 105;
 8001ecc:	4b45      	ldr	r3, [pc, #276]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001ece:	2269      	movs	r2, #105	; 0x69
 8001ed0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ed8:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ede:	4b41      	ldr	r3, [pc, #260]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ee4:	483f      	ldr	r0, [pc, #252]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001ee6:	f002 fcca 	bl	800487e <HAL_TIM_Base_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001ef0:	f7ff fe78 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001efa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001efe:	4619      	mov	r1, r3
 8001f00:	4838      	ldr	r0, [pc, #224]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001f02:	f002 fe27 	bl	8004b54 <HAL_TIM_ConfigClockSource>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001f0c:	f7ff fe6a 	bl	8001be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f10:	4834      	ldr	r0, [pc, #208]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001f12:	f002 fd03 	bl	800491c <HAL_TIM_PWM_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001f1c:	f7ff fe62 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	482d      	ldr	r0, [pc, #180]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001f30:	f003 f9c2 	bl	80052b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001f3a:	f7ff fe53 	bl	8001be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3e:	2360      	movs	r3, #96	; 0x60
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5e:	2200      	movs	r2, #0
 8001f60:	4619      	mov	r1, r3
 8001f62:	4820      	ldr	r0, [pc, #128]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001f64:	f002 fd34 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001f6e:	f7ff fe39 	bl	8001be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f76:	2204      	movs	r2, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	481a      	ldr	r0, [pc, #104]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001f7c:	f002 fd28 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001f86:	f7ff fe2d 	bl	8001be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	2208      	movs	r2, #8
 8001f90:	4619      	mov	r1, r3
 8001f92:	4814      	ldr	r0, [pc, #80]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001f94:	f002 fd1c 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001f9e:	f7ff fe21 	bl	8001be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001fc6:	f003 f9f3 	bl	80053b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001fd0:	f7ff fe08 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fd4:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <MX_TIM1_Init+0x168>)
 8001fd6:	f000 f989 	bl	80022ec <HAL_TIM_MspPostInit>

}
 8001fda:	bf00      	nop
 8001fdc:	3758      	adds	r7, #88	; 0x58
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000368 	.word	0x20000368
 8001fe8:	40010000 	.word	0x40010000

08001fec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08e      	sub	sp, #56	; 0x38
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002000:	f107 0320 	add.w	r3, r7, #32
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
 8002018:	615a      	str	r2, [r3, #20]
 800201a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800201c:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <MX_TIM4_Init+0xe4>)
 800201e:	4a2d      	ldr	r2, [pc, #180]	; (80020d4 <MX_TIM4_Init+0xe8>)
 8002020:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002022:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <MX_TIM4_Init+0xe4>)
 8002024:	2200      	movs	r2, #0
 8002026:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002028:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <MX_TIM4_Init+0xe4>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 800202e:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <MX_TIM4_Init+0xe4>)
 8002030:	2269      	movs	r2, #105	; 0x69
 8002032:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002034:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <MX_TIM4_Init+0xe4>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203a:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <MX_TIM4_Init+0xe4>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002040:	4823      	ldr	r0, [pc, #140]	; (80020d0 <MX_TIM4_Init+0xe4>)
 8002042:	f002 fc1c 	bl	800487e <HAL_TIM_Base_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800204c:	f7ff fdca 	bl	8001be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800205a:	4619      	mov	r1, r3
 800205c:	481c      	ldr	r0, [pc, #112]	; (80020d0 <MX_TIM4_Init+0xe4>)
 800205e:	f002 fd79 	bl	8004b54 <HAL_TIM_ConfigClockSource>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002068:	f7ff fdbc 	bl	8001be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800206c:	4818      	ldr	r0, [pc, #96]	; (80020d0 <MX_TIM4_Init+0xe4>)
 800206e:	f002 fc55 	bl	800491c <HAL_TIM_PWM_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002078:	f7ff fdb4 	bl	8001be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002084:	f107 0320 	add.w	r3, r7, #32
 8002088:	4619      	mov	r1, r3
 800208a:	4811      	ldr	r0, [pc, #68]	; (80020d0 <MX_TIM4_Init+0xe4>)
 800208c:	f003 f914 	bl	80052b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002096:	f7ff fda5 	bl	8001be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800209a:	2360      	movs	r3, #96	; 0x60
 800209c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2204      	movs	r2, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4807      	ldr	r0, [pc, #28]	; (80020d0 <MX_TIM4_Init+0xe4>)
 80020b2:	f002 fc8d 	bl	80049d0 <HAL_TIM_PWM_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80020bc:	f7ff fd92 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <MX_TIM4_Init+0xe4>)
 80020c2:	f000 f913 	bl	80022ec <HAL_TIM_MspPostInit>

}
 80020c6:	bf00      	nop
 80020c8:	3738      	adds	r7, #56	; 0x38
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000260 	.word	0x20000260
 80020d4:	40000800 	.word	0x40000800

080020d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a76      	ldr	r2, [pc, #472]	; (80022c0 <HAL_TIM_Base_MspInit+0x1e8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	f040 80a2 	bne.w	8002230 <HAL_TIM_Base_MspInit+0x158>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	4b74      	ldr	r3, [pc, #464]	; (80022c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	4a73      	ldr	r2, [pc, #460]	; (80022c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6453      	str	r3, [r2, #68]	; 0x44
 80020fc:	4b71      	ldr	r3, [pc, #452]	; (80022c4 <HAL_TIM_Base_MspInit+0x1ec>)
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8002108:	4b6f      	ldr	r3, [pc, #444]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 800210a:	4a70      	ldr	r2, [pc, #448]	; (80022cc <HAL_TIM_Base_MspInit+0x1f4>)
 800210c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 800210e:	4b6e      	ldr	r3, [pc, #440]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002110:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002114:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002116:	4b6c      	ldr	r3, [pc, #432]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002118:	2240      	movs	r2, #64	; 0x40
 800211a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002122:	4b69      	ldr	r3, [pc, #420]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002128:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 800212c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002130:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002134:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002138:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 800213c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002140:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002142:	4b61      	ldr	r3, [pc, #388]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002148:	4b5f      	ldr	r3, [pc, #380]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800214e:	485e      	ldr	r0, [pc, #376]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002150:	f001 f8ae 	bl	80032b0 <HAL_DMA_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 800215a:	f7ff fd43 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a59      	ldr	r2, [pc, #356]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800216a:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 800216c:	4a59      	ldr	r2, [pc, #356]	; (80022d4 <HAL_TIM_Base_MspInit+0x1fc>)
 800216e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002170:	4b57      	ldr	r3, [pc, #348]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 8002172:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002176:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002178:	4b55      	ldr	r3, [pc, #340]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800217e:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002184:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 8002186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800218a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800218c:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 800218e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002192:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002194:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 8002196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800219a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800219c:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 800219e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021a2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80021a4:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80021b0:	4847      	ldr	r0, [pc, #284]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 80021b2:	f001 f87d 	bl	80032b0 <HAL_DMA_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_TIM_Base_MspInit+0xe8>
    {
      Error_Handler();
 80021bc:	f7ff fd12 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
 80021c6:	4a42      	ldr	r2, [pc, #264]	; (80022d0 <HAL_TIM_Base_MspInit+0x1f8>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 80021cc:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 80021ce:	4a43      	ldr	r2, [pc, #268]	; (80022dc <HAL_TIM_Base_MspInit+0x204>)
 80021d0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 80021d4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80021d8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021da:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 80021dc:	2240      	movs	r2, #64	; 0x40
 80021de:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e0:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80021e6:	4b3c      	ldr	r3, [pc, #240]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 80021e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ec:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021ee:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 80021f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021f4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021f6:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 80021f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021fc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 80021fe:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 8002200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002204:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800220c:	4b32      	ldr	r3, [pc, #200]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 800220e:	2200      	movs	r2, #0
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8002212:	4831      	ldr	r0, [pc, #196]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 8002214:	f001 f84c 	bl	80032b0 <HAL_DMA_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_TIM_Base_MspInit+0x14a>
    {
      Error_Handler();
 800221e:	f7ff fce1 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2c      	ldr	r2, [pc, #176]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
 8002228:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <HAL_TIM_Base_MspInit+0x200>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800222e:	e043      	b.n	80022b8 <HAL_TIM_Base_MspInit+0x1e0>
  else if(tim_baseHandle->Instance==TIM4)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2a      	ldr	r2, [pc, #168]	; (80022e0 <HAL_TIM_Base_MspInit+0x208>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d13e      	bne.n	80022b8 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a20      	ldr	r2, [pc, #128]	; (80022c4 <HAL_TIM_Base_MspInit+0x1ec>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_TIM_Base_MspInit+0x1ec>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8002256:	4b23      	ldr	r3, [pc, #140]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 8002258:	4a23      	ldr	r2, [pc, #140]	; (80022e8 <HAL_TIM_Base_MspInit+0x210>)
 800225a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 800225c:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 800225e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002262:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 8002266:	2240      	movs	r2, #64	; 0x40
 8002268:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 800226c:	2200      	movs	r2, #0
 800226e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 8002272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002276:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 800227a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800227e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 8002282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002286:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 800228a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228e:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 8002292:	2200      	movs	r2, #0
 8002294:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 8002298:	2200      	movs	r2, #0
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800229c:	4811      	ldr	r0, [pc, #68]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 800229e:	f001 f807 	bl	80032b0 <HAL_DMA_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_TIM_Base_MspInit+0x1d4>
      Error_Handler();
 80022a8:	f7ff fc9c 	bl	8001be4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 80022b0:	629a      	str	r2, [r3, #40]	; 0x28
 80022b2:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <HAL_TIM_Base_MspInit+0x20c>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40023800 	.word	0x40023800
 80022c8:	20000308 	.word	0x20000308
 80022cc:	40026440 	.word	0x40026440
 80022d0:	20000200 	.word	0x20000200
 80022d4:	40026428 	.word	0x40026428
 80022d8:	200002a8 	.word	0x200002a8
 80022dc:	400264a0 	.word	0x400264a0
 80022e0:	40000800 	.word	0x40000800
 80022e4:	200001a0 	.word	0x200001a0
 80022e8:	40026058 	.word	0x40026058

080022ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a24      	ldr	r2, [pc, #144]	; (800239c <HAL_TIM_MspPostInit+0xb0>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d11f      	bne.n	800234e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <HAL_TIM_MspPostInit+0xb4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <HAL_TIM_MspPostInit+0xb4>)
 8002318:	f043 0310 	orr.w	r3, r3, #16
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_TIM_MspPostInit+0xb4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_LED1_Pin|PWM_LED2_Pin|PWM_LED3_Pin;
 800232a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800232e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800233c:	2301      	movs	r3, #1
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	4619      	mov	r1, r3
 8002346:	4817      	ldr	r0, [pc, #92]	; (80023a4 <HAL_TIM_MspPostInit+0xb8>)
 8002348:	f001 fbb4 	bl	8003ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800234c:	e022      	b.n	8002394 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_TIM_MspPostInit+0xbc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d11d      	bne.n	8002394 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_TIM_MspPostInit+0xb4>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <HAL_TIM_MspPostInit+0xb4>)
 8002362:	f043 0302 	orr.w	r3, r3, #2
 8002366:	6313      	str	r3, [r2, #48]	; 0x30
 8002368:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_TIM_MspPostInit+0xb4>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_LED4_Pin;
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002384:	2302      	movs	r3, #2
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LED4_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4807      	ldr	r0, [pc, #28]	; (80023ac <HAL_TIM_MspPostInit+0xc0>)
 8002390:	f001 fb90 	bl	8003ab4 <HAL_GPIO_Init>
}
 8002394:	bf00      	nop
 8002396:	3728      	adds	r7, #40	; 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40010000 	.word	0x40010000
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40000800 	.word	0x40000800
 80023ac:	40020400 	.word	0x40020400

080023b0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_USART2_UART_Init+0x4c>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <MX_USART2_UART_Init+0x50>)
 80023b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <MX_USART2_UART_Init+0x4c>)
 80023bc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80023c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_USART2_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <MX_USART2_UART_Init+0x4c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <MX_USART2_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <MX_USART2_UART_Init+0x4c>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <MX_USART2_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <MX_USART2_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_USART2_UART_Init+0x4c>)
 80023e8:	f003 f834 	bl	8005454 <HAL_UART_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023f2:	f7ff fbf7 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000574 	.word	0x20000574
 8002400:	40004400 	.word	0x40004400

08002404 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <MX_USART3_UART_Init+0x4c>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <MX_USART3_UART_Init+0x50>)
 800240c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <MX_USART3_UART_Init+0x4c>)
 8002410:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002414:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_USART3_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MX_USART3_UART_Init+0x4c>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <MX_USART3_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <MX_USART3_UART_Init+0x4c>)
 800242a:	220c      	movs	r2, #12
 800242c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <MX_USART3_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_USART3_UART_Init+0x4c>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_USART3_UART_Init+0x4c>)
 800243c:	f003 f80a 	bl	8005454 <HAL_UART_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002446:	f7ff fbcd 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000470 	.word	0x20000470
 8002454:	40004800 	.word	0x40004800

08002458 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08c      	sub	sp, #48	; 0x30
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a4b      	ldr	r2, [pc, #300]	; (80025a4 <HAL_UART_MspInit+0x14c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	f040 80a2 	bne.w	80025c0 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <HAL_UART_MspInit+0x150>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	4a48      	ldr	r2, [pc, #288]	; (80025a8 <HAL_UART_MspInit+0x150>)
 8002486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248a:	6413      	str	r3, [r2, #64]	; 0x40
 800248c:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <HAL_UART_MspInit+0x150>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_UART_MspInit+0x150>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	4a41      	ldr	r2, [pc, #260]	; (80025a8 <HAL_UART_MspInit+0x150>)
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	6313      	str	r3, [r2, #48]	; 0x30
 80024a8:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <HAL_UART_MspInit+0x150>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOW_TX_Pin|LOW_RX_Pin;
 80024b4:	2360      	movs	r3, #96	; 0x60
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024c4:	2307      	movs	r3, #7
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	4619      	mov	r1, r3
 80024ce:	4837      	ldr	r0, [pc, #220]	; (80025ac <HAL_UART_MspInit+0x154>)
 80024d0:	f001 faf0 	bl	8003ab4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <HAL_UART_MspInit+0x158>)
 80024d6:	4a37      	ldr	r2, [pc, #220]	; (80025b4 <HAL_UART_MspInit+0x15c>)
 80024d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80024da:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <HAL_UART_MspInit+0x158>)
 80024dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <HAL_UART_MspInit+0x158>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <HAL_UART_MspInit+0x158>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_UART_MspInit+0x158>)
 80024f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_UART_MspInit+0x158>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <HAL_UART_MspInit+0x158>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002502:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <HAL_UART_MspInit+0x158>)
 8002504:	2200      	movs	r2, #0
 8002506:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_UART_MspInit+0x158>)
 800250a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800250e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_UART_MspInit+0x158>)
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002516:	4826      	ldr	r0, [pc, #152]	; (80025b0 <HAL_UART_MspInit+0x158>)
 8002518:	f000 feca 	bl	80032b0 <HAL_DMA_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002522:	f7ff fb5f 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <HAL_UART_MspInit+0x158>)
 800252a:	639a      	str	r2, [r3, #56]	; 0x38
 800252c:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <HAL_UART_MspInit+0x158>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_UART_MspInit+0x160>)
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <HAL_UART_MspInit+0x164>)
 8002536:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002538:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <HAL_UART_MspInit+0x160>)
 800253a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800253e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_UART_MspInit+0x160>)
 8002542:	2240      	movs	r2, #64	; 0x40
 8002544:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_UART_MspInit+0x160>)
 8002548:	2200      	movs	r2, #0
 800254a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_UART_MspInit+0x160>)
 800254e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002552:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <HAL_UART_MspInit+0x160>)
 8002556:	2200      	movs	r2, #0
 8002558:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_UART_MspInit+0x160>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_UART_MspInit+0x160>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <HAL_UART_MspInit+0x160>)
 8002568:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800256c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_UART_MspInit+0x160>)
 8002570:	2200      	movs	r2, #0
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002574:	4810      	ldr	r0, [pc, #64]	; (80025b8 <HAL_UART_MspInit+0x160>)
 8002576:	f000 fe9b 	bl	80032b0 <HAL_DMA_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002580:	f7ff fb30 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a0c      	ldr	r2, [pc, #48]	; (80025b8 <HAL_UART_MspInit+0x160>)
 8002588:	635a      	str	r2, [r3, #52]	; 0x34
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_UART_MspInit+0x160>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002590:	2200      	movs	r2, #0
 8002592:	2100      	movs	r1, #0
 8002594:	2026      	movs	r0, #38	; 0x26
 8002596:	f000 fe54 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800259a:	2026      	movs	r0, #38	; 0x26
 800259c:	f000 fe6d 	bl	800327a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025a0:	e0c4      	b.n	800272c <HAL_UART_MspInit+0x2d4>
 80025a2:	bf00      	nop
 80025a4:	40004400 	.word	0x40004400
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	200003b0 	.word	0x200003b0
 80025b4:	40026088 	.word	0x40026088
 80025b8:	20000514 	.word	0x20000514
 80025bc:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a5b      	ldr	r2, [pc, #364]	; (8002734 <HAL_UART_MspInit+0x2dc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	f040 80b0 	bne.w	800272c <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <HAL_UART_MspInit+0x2e0>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	4a58      	ldr	r2, [pc, #352]	; (8002738 <HAL_UART_MspInit+0x2e0>)
 80025d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025da:	6413      	str	r3, [r2, #64]	; 0x40
 80025dc:	4b56      	ldr	r3, [pc, #344]	; (8002738 <HAL_UART_MspInit+0x2e0>)
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	4b52      	ldr	r3, [pc, #328]	; (8002738 <HAL_UART_MspInit+0x2e0>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a51      	ldr	r2, [pc, #324]	; (8002738 <HAL_UART_MspInit+0x2e0>)
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b4f      	ldr	r3, [pc, #316]	; (8002738 <HAL_UART_MspInit+0x2e0>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_UART_MspInit+0x2e0>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4a4a      	ldr	r2, [pc, #296]	; (8002738 <HAL_UART_MspInit+0x2e0>)
 800260e:	f043 0308 	orr.w	r3, r3, #8
 8002612:	6313      	str	r3, [r2, #48]	; 0x30
 8002614:	4b48      	ldr	r3, [pc, #288]	; (8002738 <HAL_UART_MspInit+0x2e0>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HIGH_RX_Pin;
 8002620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002632:	2307      	movs	r3, #7
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_RX_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 031c 	add.w	r3, r7, #28
 800263a:	4619      	mov	r1, r3
 800263c:	483f      	ldr	r0, [pc, #252]	; (800273c <HAL_UART_MspInit+0x2e4>)
 800263e:	f001 fa39 	bl	8003ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HIGH_TX_Pin;
 8002642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002650:	2303      	movs	r3, #3
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002654:	2307      	movs	r3, #7
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_TX_GPIO_Port, &GPIO_InitStruct);
 8002658:	f107 031c 	add.w	r3, r7, #28
 800265c:	4619      	mov	r1, r3
 800265e:	4838      	ldr	r0, [pc, #224]	; (8002740 <HAL_UART_MspInit+0x2e8>)
 8002660:	f001 fa28 	bl	8003ab4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002664:	4b37      	ldr	r3, [pc, #220]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 8002666:	4a38      	ldr	r2, [pc, #224]	; (8002748 <HAL_UART_MspInit+0x2f0>)
 8002668:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800266a:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 800266c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002670:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002672:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800267e:	4b31      	ldr	r3, [pc, #196]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 8002680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002684:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002686:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 8002688:	2200      	movs	r2, #0
 800268a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800268c:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 800268e:	2200      	movs	r2, #0
 8002690:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002692:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 8002694:	2200      	movs	r2, #0
 8002696:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002698:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 800269a:	2200      	movs	r2, #0
 800269c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800269e:	4b29      	ldr	r3, [pc, #164]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026a4:	4827      	ldr	r0, [pc, #156]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 80026a6:	f000 fe03 	bl	80032b0 <HAL_DMA_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 80026b0:	f7ff fa98 	bl	8001be4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a23      	ldr	r2, [pc, #140]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 80026b8:	639a      	str	r2, [r3, #56]	; 0x38
 80026ba:	4a22      	ldr	r2, [pc, #136]	; (8002744 <HAL_UART_MspInit+0x2ec>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <HAL_UART_MspInit+0x2f4>)
 80026c2:	4a23      	ldr	r2, [pc, #140]	; (8002750 <HAL_UART_MspInit+0x2f8>)
 80026c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 80026c6:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_UART_MspInit+0x2f4>)
 80026c8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80026cc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ce:	4b1f      	ldr	r3, [pc, #124]	; (800274c <HAL_UART_MspInit+0x2f4>)
 80026d0:	2240      	movs	r2, #64	; 0x40
 80026d2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_UART_MspInit+0x2f4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <HAL_UART_MspInit+0x2f4>)
 80026dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_UART_MspInit+0x2f4>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_UART_MspInit+0x2f4>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <HAL_UART_MspInit+0x2f4>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_UART_MspInit+0x2f4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026fa:	4b14      	ldr	r3, [pc, #80]	; (800274c <HAL_UART_MspInit+0x2f4>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002700:	4812      	ldr	r0, [pc, #72]	; (800274c <HAL_UART_MspInit+0x2f4>)
 8002702:	f000 fdd5 	bl	80032b0 <HAL_DMA_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 800270c:	f7ff fa6a 	bl	8001be4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a0e      	ldr	r2, [pc, #56]	; (800274c <HAL_UART_MspInit+0x2f4>)
 8002714:	635a      	str	r2, [r3, #52]	; 0x34
 8002716:	4a0d      	ldr	r2, [pc, #52]	; (800274c <HAL_UART_MspInit+0x2f4>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2100      	movs	r1, #0
 8002720:	2027      	movs	r0, #39	; 0x27
 8002722:	f000 fd8e 	bl	8003242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002726:	2027      	movs	r0, #39	; 0x27
 8002728:	f000 fda7 	bl	800327a <HAL_NVIC_EnableIRQ>
}
 800272c:	bf00      	nop
 800272e:	3730      	adds	r7, #48	; 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40004800 	.word	0x40004800
 8002738:	40023800 	.word	0x40023800
 800273c:	40020400 	.word	0x40020400
 8002740:	40020c00 	.word	0x40020c00
 8002744:	20000410 	.word	0x20000410
 8002748:	40026028 	.word	0x40026028
 800274c:	200004b4 	.word	0x200004b4
 8002750:	40026070 	.word	0x40026070

08002754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800278c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002758:	480d      	ldr	r0, [pc, #52]	; (8002790 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800275a:	490e      	ldr	r1, [pc, #56]	; (8002794 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002760:	e002      	b.n	8002768 <LoopCopyDataInit>

08002762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002766:	3304      	adds	r3, #4

08002768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800276c:	d3f9      	bcc.n	8002762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002770:	4c0b      	ldr	r4, [pc, #44]	; (80027a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002774:	e001      	b.n	800277a <LoopFillZerobss>

08002776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002778:	3204      	adds	r2, #4

0800277a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800277c:	d3fb      	bcc.n	8002776 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800277e:	f7ff fb6b 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002782:	f003 ff9d 	bl	80066c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002786:	f7ff f8ad 	bl	80018e4 <main>
  bx  lr    
 800278a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800278c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002794:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002798:	08006760 	.word	0x08006760
  ldr r2, =_sbss
 800279c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80027a0:	200005bc 	.word	0x200005bc

080027a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC_IRQHandler>
	...

080027a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027ac:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_Init+0x40>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <HAL_Init+0x40>)
 80027b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_Init+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <HAL_Init+0x40>)
 80027be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_Init+0x40>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <HAL_Init+0x40>)
 80027ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d0:	2003      	movs	r0, #3
 80027d2:	f000 fd2b 	bl	800322c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d6:	200f      	movs	r0, #15
 80027d8:	f000 f808 	bl	80027ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027dc:	f7ff fa86 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023c00 	.word	0x40023c00

080027ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_InitTick+0x54>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x58>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	4619      	mov	r1, r3
 80027fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002802:	fbb3 f3f1 	udiv	r3, r3, r1
 8002806:	fbb2 f3f3 	udiv	r3, r2, r3
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fd43 	bl	8003296 <HAL_SYSTICK_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e00e      	b.n	8002838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d80a      	bhi.n	8002836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002820:	2200      	movs	r2, #0
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	f04f 30ff 	mov.w	r0, #4294967295
 8002828:	f000 fd0b 	bl	8003242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800282c:	4a06      	ldr	r2, [pc, #24]	; (8002848 <HAL_InitTick+0x5c>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000000 	.word	0x20000000
 8002844:	20000008 	.word	0x20000008
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_IncTick+0x20>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x24>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4413      	add	r3, r2
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <HAL_IncTick+0x24>)
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000008 	.word	0x20000008
 8002870:	200005b8 	.word	0x200005b8

08002874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_GetTick+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	200005b8 	.word	0x200005b8

0800288c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e033      	b.n	800290a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe fa78 	bl	8000da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d118      	bne.n	80028fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028d2:	f023 0302 	bic.w	r3, r3, #2
 80028d6:	f043 0202 	orr.w	r2, r3, #2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fad8 	bl	8002e94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f023 0303 	bic.w	r3, r3, #3
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
 80028fa:	e001      	b.n	8002900 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_ADC_Start+0x1a>
 800292a:	2302      	movs	r3, #2
 800292c:	e0b2      	b.n	8002a94 <HAL_ADC_Start+0x180>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b01      	cmp	r3, #1
 8002942:	d018      	beq.n	8002976 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002954:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <HAL_ADC_Start+0x18c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_ADC_Start+0x190>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0c9a      	lsrs	r2, r3, #18
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002968:	e002      	b.n	8002970 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	3b01      	subs	r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f9      	bne.n	800296a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d17a      	bne.n	8002a7a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	d106      	bne.n	80029d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	f023 0206 	bic.w	r2, r3, #6
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	645a      	str	r2, [r3, #68]	; 0x44
 80029d0:	e002      	b.n	80029d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e0:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <HAL_ADC_Start+0x194>)
 80029e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d12a      	bne.n	8002a50 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2b      	ldr	r2, [pc, #172]	; (8002aac <HAL_ADC_Start+0x198>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d015      	beq.n	8002a30 <HAL_ADC_Start+0x11c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <HAL_ADC_Start+0x19c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d105      	bne.n	8002a1a <HAL_ADC_Start+0x106>
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_ADC_Start+0x194>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a25      	ldr	r2, [pc, #148]	; (8002ab4 <HAL_ADC_Start+0x1a0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d136      	bne.n	8002a92 <HAL_ADC_Start+0x17e>
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_ADC_Start+0x194>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d130      	bne.n	8002a92 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d129      	bne.n	8002a92 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	e020      	b.n	8002a92 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a15      	ldr	r2, [pc, #84]	; (8002aac <HAL_ADC_Start+0x198>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d11b      	bne.n	8002a92 <HAL_ADC_Start+0x17e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d114      	bne.n	8002a92 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	e00b      	b.n	8002a92 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	431bde83 	.word	0x431bde83
 8002aa8:	40012300 	.word	0x40012300
 8002aac:	40012000 	.word	0x40012000
 8002ab0:	40012100 	.word	0x40012100
 8002ab4:	40012200 	.word	0x40012200

08002ab8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_ADC_Stop+0x16>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e021      	b.n	8002b12 <HAL_ADC_Stop+0x5a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3a:	d113      	bne.n	8002b64 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4a:	d10b      	bne.n	8002b64 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e063      	b.n	8002c2c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b64:	f7ff fe86 	bl	8002874 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b6a:	e021      	b.n	8002bb0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d01d      	beq.n	8002bb0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_ADC_PollForConversion+0x6c>
 8002b7a:	f7ff fe7b 	bl	8002874 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d212      	bcs.n	8002bb0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d00b      	beq.n	8002bb0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f043 0204 	orr.w	r2, r3, #4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e03d      	b.n	8002c2c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d1d6      	bne.n	8002b6c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f06f 0212 	mvn.w	r2, #18
 8002bc6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d123      	bne.n	8002c2a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11f      	bne.n	8002c2a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d006      	beq.n	8002c06 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d111      	bne.n	8002c2a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d105      	bne.n	8002c2a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x1c>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e105      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x228>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b09      	cmp	r3, #9
 8002c7a:	d925      	bls.n	8002cc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68d9      	ldr	r1, [r3, #12]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b1e      	subs	r3, #30
 8002c92:	2207      	movs	r2, #7
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43da      	mvns	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68d9      	ldr	r1, [r3, #12]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4403      	add	r3, r0
 8002cba:	3b1e      	subs	r3, #30
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	e022      	b.n	8002d0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6919      	ldr	r1, [r3, #16]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	2207      	movs	r2, #7
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	400a      	ands	r2, r1
 8002cea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6919      	ldr	r1, [r3, #16]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4403      	add	r3, r0
 8002d04:	409a      	lsls	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d824      	bhi.n	8002d60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3b05      	subs	r3, #5
 8002d28:	221f      	movs	r2, #31
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	400a      	ands	r2, r1
 8002d36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4618      	mov	r0, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	3b05      	subs	r3, #5
 8002d52:	fa00 f203 	lsl.w	r2, r0, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d5e:	e04c      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d824      	bhi.n	8002db2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	3b23      	subs	r3, #35	; 0x23
 8002d7a:	221f      	movs	r2, #31
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43da      	mvns	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	400a      	ands	r2, r1
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4618      	mov	r0, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	3b23      	subs	r3, #35	; 0x23
 8002da4:	fa00 f203 	lsl.w	r2, r0, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
 8002db0:	e023      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3b41      	subs	r3, #65	; 0x41
 8002dc4:	221f      	movs	r2, #31
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	4618      	mov	r0, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	3b41      	subs	r3, #65	; 0x41
 8002dee:	fa00 f203 	lsl.w	r2, r0, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dfa:	4b22      	ldr	r3, [pc, #136]	; (8002e84 <HAL_ADC_ConfigChannel+0x234>)
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <HAL_ADC_ConfigChannel+0x238>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d109      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x1cc>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b12      	cmp	r3, #18
 8002e0e:	d105      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <HAL_ADC_ConfigChannel+0x238>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d123      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x21e>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d003      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x1e6>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b11      	cmp	r3, #17
 8002e34:	d11b      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d111      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_ADC_ConfigChannel+0x23c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <HAL_ADC_ConfigChannel+0x240>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	0c9a      	lsrs	r2, r3, #18
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e60:	e002      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f9      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40012300 	.word	0x40012300
 8002e88:	40012000 	.word	0x40012000
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	431bde83 	.word	0x431bde83

08002e94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e9c:	4b79      	ldr	r3, [pc, #484]	; (8003084 <ADC_Init+0x1f0>)
 8002e9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	021a      	lsls	r2, r3, #8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6899      	ldr	r1, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	4a58      	ldr	r2, [pc, #352]	; (8003088 <ADC_Init+0x1f4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6899      	ldr	r1, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e00f      	b.n	8002f92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0202 	bic.w	r2, r2, #2
 8002fa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7e1b      	ldrb	r3, [r3, #24]
 8002fac:	005a      	lsls	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	3b01      	subs	r3, #1
 8002fec:	035a      	lsls	r2, r3, #13
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	e007      	b.n	8003008 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003006:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	3b01      	subs	r3, #1
 8003024:	051a      	lsls	r2, r3, #20
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800303c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6899      	ldr	r1, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800304a:	025a      	lsls	r2, r3, #9
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003062:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	029a      	lsls	r2, r3, #10
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	609a      	str	r2, [r3, #8]
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40012300 	.word	0x40012300
 8003088:	0f000001 	.word	0x0f000001

0800308c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a8:	4013      	ands	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030be:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <__NVIC_SetPriorityGrouping+0x44>)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	60d3      	str	r3, [r2, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <__NVIC_GetPriorityGrouping+0x18>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	f003 0307 	and.w	r3, r3, #7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	db0b      	blt.n	800311a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	f003 021f 	and.w	r2, r3, #31
 8003108:	4907      	ldr	r1, [pc, #28]	; (8003128 <__NVIC_EnableIRQ+0x38>)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2001      	movs	r0, #1
 8003112:	fa00 f202 	lsl.w	r2, r0, r2
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000e100 	.word	0xe000e100

0800312c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	6039      	str	r1, [r7, #0]
 8003136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313c:	2b00      	cmp	r3, #0
 800313e:	db0a      	blt.n	8003156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	b2da      	uxtb	r2, r3
 8003144:	490c      	ldr	r1, [pc, #48]	; (8003178 <__NVIC_SetPriority+0x4c>)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	0112      	lsls	r2, r2, #4
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	440b      	add	r3, r1
 8003150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003154:	e00a      	b.n	800316c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4908      	ldr	r1, [pc, #32]	; (800317c <__NVIC_SetPriority+0x50>)
 800315c:	79fb      	ldrb	r3, [r7, #7]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	3b04      	subs	r3, #4
 8003164:	0112      	lsls	r2, r2, #4
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	440b      	add	r3, r1
 800316a:	761a      	strb	r2, [r3, #24]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000e100 	.word	0xe000e100
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	; 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f1c3 0307 	rsb	r3, r3, #7
 800319a:	2b04      	cmp	r3, #4
 800319c:	bf28      	it	cs
 800319e:	2304      	movcs	r3, #4
 80031a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3304      	adds	r3, #4
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d902      	bls.n	80031b0 <NVIC_EncodePriority+0x30>
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3b03      	subs	r3, #3
 80031ae:	e000      	b.n	80031b2 <NVIC_EncodePriority+0x32>
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	401a      	ands	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c8:	f04f 31ff 	mov.w	r1, #4294967295
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	43d9      	mvns	r1, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	4313      	orrs	r3, r2
         );
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f8:	d301      	bcc.n	80031fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031fa:	2301      	movs	r3, #1
 80031fc:	e00f      	b.n	800321e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <SysTick_Config+0x40>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003206:	210f      	movs	r1, #15
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	f7ff ff8e 	bl	800312c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <SysTick_Config+0x40>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <SysTick_Config+0x40>)
 8003218:	2207      	movs	r2, #7
 800321a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	e000e010 	.word	0xe000e010

0800322c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ff29 	bl	800308c <__NVIC_SetPriorityGrouping>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003254:	f7ff ff3e 	bl	80030d4 <__NVIC_GetPriorityGrouping>
 8003258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	f7ff ff8e 	bl	8003180 <NVIC_EncodePriority>
 8003264:	4602      	mov	r2, r0
 8003266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff5d 	bl	800312c <__NVIC_SetPriority>
}
 8003272:	bf00      	nop
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff31 	bl	80030f0 <__NVIC_EnableIRQ>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffa2 	bl	80031e8 <SysTick_Config>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032bc:	f7ff fada 	bl	8002874 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e099      	b.n	8003400 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ec:	e00f      	b.n	800330e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ee:	f7ff fac1 	bl	8002874 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d908      	bls.n	800330e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2203      	movs	r2, #3
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e078      	b.n	8003400 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e8      	bne.n	80032ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4b38      	ldr	r3, [pc, #224]	; (8003408 <HAL_DMA_Init+0x158>)
 8003328:	4013      	ands	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800333a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003346:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003352:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	2b04      	cmp	r3, #4
 8003366:	d107      	bne.n	8003378 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	4313      	orrs	r3, r2
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0307 	bic.w	r3, r3, #7
 800338e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d117      	bne.n	80033d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00e      	beq.n	80033d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fb01 	bl	80039bc <DMA_CheckFifoParam>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d008      	beq.n	80033d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2240      	movs	r2, #64	; 0x40
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033ce:	2301      	movs	r3, #1
 80033d0:	e016      	b.n	8003400 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fab8 	bl	8003950 <DMA_CalcBaseAndBitshift>
 80033e0:	4603      	mov	r3, r0
 80033e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	223f      	movs	r2, #63	; 0x3f
 80033ea:	409a      	lsls	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	f010803f 	.word	0xf010803f

0800340c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_DMA_Start_IT+0x26>
 800342e:	2302      	movs	r3, #2
 8003430:	e040      	b.n	80034b4 <HAL_DMA_Start_IT+0xa8>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d12f      	bne.n	80034a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fa4a 	bl	80038f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	223f      	movs	r2, #63	; 0x3f
 8003466:	409a      	lsls	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0216 	orr.w	r2, r2, #22
 800347a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0208 	orr.w	r2, r2, #8
 8003492:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e005      	b.n	80034b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034ae:	2302      	movs	r3, #2
 80034b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034ca:	f7ff f9d3 	bl	8002874 <HAL_GetTick>
 80034ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d008      	beq.n	80034ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2280      	movs	r2, #128	; 0x80
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e052      	b.n	8003594 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0216 	bic.w	r2, r2, #22
 80034fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800350c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_DMA_Abort+0x62>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0208 	bic.w	r2, r2, #8
 800352c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800353e:	e013      	b.n	8003568 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003540:	f7ff f998 	bl	8002874 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b05      	cmp	r3, #5
 800354c:	d90c      	bls.n	8003568 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2203      	movs	r2, #3
 8003558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e015      	b.n	8003594 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e4      	bne.n	8003540 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	223f      	movs	r2, #63	; 0x3f
 800357c:	409a      	lsls	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d004      	beq.n	80035ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e00c      	b.n	80035d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2205      	movs	r2, #5
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035ec:	4b92      	ldr	r3, [pc, #584]	; (8003838 <HAL_DMA_IRQHandler+0x258>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a92      	ldr	r2, [pc, #584]	; (800383c <HAL_DMA_IRQHandler+0x25c>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	2208      	movs	r2, #8
 800360c:	409a      	lsls	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01a      	beq.n	800364c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d013      	beq.n	800364c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0204 	bic.w	r2, r2, #4
 8003632:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	2208      	movs	r2, #8
 800363a:	409a      	lsls	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003650:	2201      	movs	r2, #1
 8003652:	409a      	lsls	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	2201      	movs	r2, #1
 8003670:	409a      	lsls	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	f043 0202 	orr.w	r2, r3, #2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	2204      	movs	r2, #4
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	2204      	movs	r2, #4
 80036a6:	409a      	lsls	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	2210      	movs	r2, #16
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d043      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d03c      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	2210      	movs	r2, #16
 80036dc:	409a      	lsls	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d024      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
 800370e:	e01f      	b.n	8003750 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01b      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
 8003720:	e016      	b.n	8003750 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d107      	bne.n	8003740 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0208 	bic.w	r2, r2, #8
 800373e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	2220      	movs	r2, #32
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 808e 	beq.w	800387e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8086 	beq.w	800387e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	2220      	movs	r2, #32
 8003778:	409a      	lsls	r2, r3
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b05      	cmp	r3, #5
 8003788:	d136      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0216 	bic.w	r2, r2, #22
 8003798:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_DMA_IRQHandler+0x1da>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0208 	bic.w	r2, r2, #8
 80037c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	223f      	movs	r2, #63	; 0x3f
 80037d0:	409a      	lsls	r2, r3
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d07d      	beq.n	80038ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
        }
        return;
 80037f6:	e078      	b.n	80038ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01c      	beq.n	8003840 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d108      	bne.n	8003826 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	2b00      	cmp	r3, #0
 800381a:	d030      	beq.n	800387e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
 8003824:	e02b      	b.n	800387e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d027      	beq.n	800387e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
 8003836:	e022      	b.n	800387e <HAL_DMA_IRQHandler+0x29e>
 8003838:	20000000 	.word	0x20000000
 800383c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0210 	bic.w	r2, r2, #16
 800385c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	2b00      	cmp	r3, #0
 8003884:	d032      	beq.n	80038ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d022      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2205      	movs	r2, #5
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3301      	adds	r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d307      	bcc.n	80038c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f2      	bne.n	80038aa <HAL_DMA_IRQHandler+0x2ca>
 80038c4:	e000      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038c6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
 80038e8:	e000      	b.n	80038ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80038ea:	bf00      	nop
    }
  }
}
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop

080038f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003910:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d108      	bne.n	8003934 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003932:	e007      	b.n	8003944 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	3b10      	subs	r3, #16
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800396a:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <DMA_CalcBaseAndBitshift+0x68>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d909      	bls.n	8003992 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	1d1a      	adds	r2, r3, #4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	659a      	str	r2, [r3, #88]	; 0x58
 8003990:	e007      	b.n	80039a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	aaaaaaab 	.word	0xaaaaaaab
 80039b8:	08006748 	.word	0x08006748

080039bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11f      	bne.n	8003a16 <DMA_CheckFifoParam+0x5a>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d856      	bhi.n	8003a8a <DMA_CheckFifoParam+0xce>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <DMA_CheckFifoParam+0x28>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003a07 	.word	0x08003a07
 80039ec:	080039f5 	.word	0x080039f5
 80039f0:	08003a8b 	.word	0x08003a8b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d046      	beq.n	8003a8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a04:	e043      	b.n	8003a8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a0e:	d140      	bne.n	8003a92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e03d      	b.n	8003a92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1e:	d121      	bne.n	8003a64 <DMA_CheckFifoParam+0xa8>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d837      	bhi.n	8003a96 <DMA_CheckFifoParam+0xda>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <DMA_CheckFifoParam+0x70>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a43 	.word	0x08003a43
 8003a34:	08003a3d 	.word	0x08003a3d
 8003a38:	08003a55 	.word	0x08003a55
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e030      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d025      	beq.n	8003a9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a52:	e022      	b.n	8003a9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a5c:	d11f      	bne.n	8003a9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a62:	e01c      	b.n	8003a9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d903      	bls.n	8003a72 <DMA_CheckFifoParam+0xb6>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d003      	beq.n	8003a78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a70:	e018      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      break;
 8003a76:	e015      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00e      	beq.n	8003aa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e00b      	b.n	8003aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e00a      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e008      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a92:	bf00      	nop
 8003a94:	e006      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e004      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e002      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a9e:	bf00      	nop
 8003aa0:	e000      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop

08003ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	; 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	e16b      	b.n	8003da8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	f040 815a 	bne.w	8003da2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d005      	beq.n	8003b06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d130      	bne.n	8003b68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	2203      	movs	r2, #3
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 0201 	and.w	r2, r3, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d017      	beq.n	8003ba4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2203      	movs	r2, #3
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d123      	bne.n	8003bf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	08da      	lsrs	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3208      	adds	r2, #8
 8003bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	220f      	movs	r2, #15
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	08da      	lsrs	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3208      	adds	r2, #8
 8003bf2:	69b9      	ldr	r1, [r7, #24]
 8003bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0203 	and.w	r2, r3, #3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80b4 	beq.w	8003da2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	4b60      	ldr	r3, [pc, #384]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	4a5f      	ldr	r2, [pc, #380]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c48:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4a:	4b5d      	ldr	r3, [pc, #372]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c56:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <HAL_GPIO_Init+0x310>)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	; (8003dc8 <HAL_GPIO_Init+0x314>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02b      	beq.n	8003cda <HAL_GPIO_Init+0x226>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a51      	ldr	r2, [pc, #324]	; (8003dcc <HAL_GPIO_Init+0x318>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d025      	beq.n	8003cd6 <HAL_GPIO_Init+0x222>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a50      	ldr	r2, [pc, #320]	; (8003dd0 <HAL_GPIO_Init+0x31c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d01f      	beq.n	8003cd2 <HAL_GPIO_Init+0x21e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4f      	ldr	r2, [pc, #316]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d019      	beq.n	8003cce <HAL_GPIO_Init+0x21a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a4e      	ldr	r2, [pc, #312]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d013      	beq.n	8003cca <HAL_GPIO_Init+0x216>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4d      	ldr	r2, [pc, #308]	; (8003ddc <HAL_GPIO_Init+0x328>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4c      	ldr	r2, [pc, #304]	; (8003de0 <HAL_GPIO_Init+0x32c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <HAL_GPIO_Init+0x20e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4b      	ldr	r2, [pc, #300]	; (8003de4 <HAL_GPIO_Init+0x330>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <HAL_GPIO_Init+0x20a>
 8003cba:	2307      	movs	r3, #7
 8003cbc:	e00e      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	e00c      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cc2:	2306      	movs	r3, #6
 8003cc4:	e00a      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cc6:	2305      	movs	r3, #5
 8003cc8:	e008      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	e006      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e004      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	f002 0203 	and.w	r2, r2, #3
 8003ce2:	0092      	lsls	r2, r2, #2
 8003ce4:	4093      	lsls	r3, r2
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cec:	4935      	ldr	r1, [pc, #212]	; (8003dc4 <HAL_GPIO_Init+0x310>)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d1e:	4a32      	ldr	r2, [pc, #200]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d24:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d4e:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d72:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3301      	adds	r3, #1
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	f67f ae90 	bls.w	8003ad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40013800 	.word	0x40013800
 8003dc8:	40020000 	.word	0x40020000
 8003dcc:	40020400 	.word	0x40020400
 8003dd0:	40020800 	.word	0x40020800
 8003dd4:	40020c00 	.word	0x40020c00
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40021400 	.word	0x40021400
 8003de0:	40021800 	.word	0x40021800
 8003de4:	40021c00 	.word	0x40021c00
 8003de8:	40013c00 	.word	0x40013c00

08003dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	887b      	ldrh	r3, [r7, #2]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	e001      	b.n	8003e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	807b      	strh	r3, [r7, #2]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e2c:	787b      	ldrb	r3, [r7, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e38:	e003      	b.n	8003e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e3a:	887b      	ldrh	r3, [r7, #2]
 8003e3c:	041a      	lsls	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	619a      	str	r2, [r3, #24]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e60:	887a      	ldrh	r2, [r7, #2]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4013      	ands	r3, r2
 8003e66:	041a      	lsls	r2, r3, #16
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	43d9      	mvns	r1, r3
 8003e6c:	887b      	ldrh	r3, [r7, #2]
 8003e6e:	400b      	ands	r3, r1
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	619a      	str	r2, [r3, #24]
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e264      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d075      	beq.n	8003f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea2:	4ba3      	ldr	r3, [pc, #652]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d00c      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eae:	4ba0      	ldr	r3, [pc, #640]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d112      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eba:	4b9d      	ldr	r3, [pc, #628]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	4b99      	ldr	r3, [pc, #612]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d05b      	beq.n	8003f8c <HAL_RCC_OscConfig+0x108>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d157      	bne.n	8003f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e23f      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee8:	d106      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x74>
 8003eea:	4b91      	ldr	r3, [pc, #580]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a90      	ldr	r2, [pc, #576]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e01d      	b.n	8003f34 <HAL_RCC_OscConfig+0xb0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x98>
 8003f02:	4b8b      	ldr	r3, [pc, #556]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a8a      	ldr	r2, [pc, #552]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a87      	ldr	r2, [pc, #540]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0xb0>
 8003f1c:	4b84      	ldr	r3, [pc, #528]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a83      	ldr	r2, [pc, #524]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b81      	ldr	r3, [pc, #516]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a80      	ldr	r2, [pc, #512]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fe fc9a 	bl	8002874 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fe fc96 	bl	8002874 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e204      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0xc0>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fe fc86 	bl	8002874 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fe fc82 	bl	8002874 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	; 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1f0      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7e:	4b6c      	ldr	r3, [pc, #432]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0xe8>
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d063      	beq.n	8004062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa6:	4b62      	ldr	r3, [pc, #392]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d11c      	bne.n	8003fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb2:	4b5f      	ldr	r3, [pc, #380]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x152>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e1c4      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	4b56      	ldr	r3, [pc, #344]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4952      	ldr	r1, [pc, #328]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	e03a      	b.n	8004062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b4f      	ldr	r3, [pc, #316]	; (8004134 <HAL_RCC_OscConfig+0x2b0>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7fe fc3b 	bl	8002874 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004002:	f7fe fc37 	bl	8002874 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1a5      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	4b46      	ldr	r3, [pc, #280]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b43      	ldr	r3, [pc, #268]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4940      	ldr	r1, [pc, #256]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	e015      	b.n	8004062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004036:	4b3f      	ldr	r3, [pc, #252]	; (8004134 <HAL_RCC_OscConfig+0x2b0>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fc1a 	bl	8002874 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004044:	f7fe fc16 	bl	8002874 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e184      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d030      	beq.n	80040d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b30      	ldr	r3, [pc, #192]	; (8004138 <HAL_RCC_OscConfig+0x2b4>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fe fbfa 	bl	8002874 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004084:	f7fe fbf6 	bl	8002874 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e164      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x200>
 80040a2:	e015      	b.n	80040d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <HAL_RCC_OscConfig+0x2b4>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040aa:	f7fe fbe3 	bl	8002874 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b2:	f7fe fbdf 	bl	8002874 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e14d      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f0      	bne.n	80040b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80a0 	beq.w	800421e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e2:	4b13      	ldr	r3, [pc, #76]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	4a0e      	ldr	r2, [pc, #56]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fc:	6413      	str	r3, [r2, #64]	; 0x40
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410a:	2301      	movs	r3, #1
 800410c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410e:	4b0b      	ldr	r3, [pc, #44]	; (800413c <HAL_RCC_OscConfig+0x2b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d121      	bne.n	800415e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_RCC_OscConfig+0x2b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a07      	ldr	r2, [pc, #28]	; (800413c <HAL_RCC_OscConfig+0x2b8>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004126:	f7fe fba5 	bl	8002874 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	e011      	b.n	8004152 <HAL_RCC_OscConfig+0x2ce>
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	42470000 	.word	0x42470000
 8004138:	42470e80 	.word	0x42470e80
 800413c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004140:	f7fe fb98 	bl	8002874 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e106      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004152:	4b85      	ldr	r3, [pc, #532]	; (8004368 <HAL_RCC_OscConfig+0x4e4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d106      	bne.n	8004174 <HAL_RCC_OscConfig+0x2f0>
 8004166:	4b81      	ldr	r3, [pc, #516]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	4a80      	ldr	r2, [pc, #512]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6713      	str	r3, [r2, #112]	; 0x70
 8004172:	e01c      	b.n	80041ae <HAL_RCC_OscConfig+0x32a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b05      	cmp	r3, #5
 800417a:	d10c      	bne.n	8004196 <HAL_RCC_OscConfig+0x312>
 800417c:	4b7b      	ldr	r3, [pc, #492]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a7a      	ldr	r2, [pc, #488]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 8004182:	f043 0304 	orr.w	r3, r3, #4
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
 8004188:	4b78      	ldr	r3, [pc, #480]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418c:	4a77      	ldr	r2, [pc, #476]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	6713      	str	r3, [r2, #112]	; 0x70
 8004194:	e00b      	b.n	80041ae <HAL_RCC_OscConfig+0x32a>
 8004196:	4b75      	ldr	r3, [pc, #468]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	4a74      	ldr	r2, [pc, #464]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	6713      	str	r3, [r2, #112]	; 0x70
 80041a2:	4b72      	ldr	r3, [pc, #456]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	4a71      	ldr	r2, [pc, #452]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 80041a8:	f023 0304 	bic.w	r3, r3, #4
 80041ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d015      	beq.n	80041e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b6:	f7fe fb5d 	bl	8002874 <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041bc:	e00a      	b.n	80041d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041be:	f7fe fb59 	bl	8002874 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e0c5      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d4:	4b65      	ldr	r3, [pc, #404]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ee      	beq.n	80041be <HAL_RCC_OscConfig+0x33a>
 80041e0:	e014      	b.n	800420c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e2:	f7fe fb47 	bl	8002874 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e8:	e00a      	b.n	8004200 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ea:	f7fe fb43 	bl	8002874 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e0af      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004200:	4b5a      	ldr	r3, [pc, #360]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ee      	bne.n	80041ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420c:	7dfb      	ldrb	r3, [r7, #23]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d105      	bne.n	800421e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004212:	4b56      	ldr	r3, [pc, #344]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4a55      	ldr	r2, [pc, #340]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 8004218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 809b 	beq.w	800435e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004228:	4b50      	ldr	r3, [pc, #320]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d05c      	beq.n	80042ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d141      	bne.n	80042c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423c:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <HAL_RCC_OscConfig+0x4ec>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004242:	f7fe fb17 	bl	8002874 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424a:	f7fe fb13 	bl	8002874 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e081      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425c:	4b43      	ldr	r3, [pc, #268]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f0      	bne.n	800424a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	019b      	lsls	r3, r3, #6
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	3b01      	subs	r3, #1
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	4937      	ldr	r1, [pc, #220]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004292:	4b37      	ldr	r3, [pc, #220]	; (8004370 <HAL_RCC_OscConfig+0x4ec>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fe faec 	bl	8002874 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a0:	f7fe fae8 	bl	8002874 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e056      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b2:	4b2e      	ldr	r3, [pc, #184]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x41c>
 80042be:	e04e      	b.n	800435e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c0:	4b2b      	ldr	r3, [pc, #172]	; (8004370 <HAL_RCC_OscConfig+0x4ec>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fe fad5 	bl	8002874 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fe fad1 	bl	8002874 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e03f      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e0:	4b22      	ldr	r3, [pc, #136]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCC_OscConfig+0x44a>
 80042ec:	e037      	b.n	800435e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e032      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042fa:	4b1c      	ldr	r3, [pc, #112]	; (800436c <HAL_RCC_OscConfig+0x4e8>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d028      	beq.n	800435a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d121      	bne.n	800435a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004320:	429a      	cmp	r2, r3
 8004322:	d11a      	bne.n	800435a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800432a:	4013      	ands	r3, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004330:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004332:	4293      	cmp	r3, r2
 8004334:	d111      	bne.n	800435a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	3b01      	subs	r3, #1
 8004344:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d107      	bne.n	800435a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004356:	429a      	cmp	r2, r3
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40007000 	.word	0x40007000
 800436c:	40023800 	.word	0x40023800
 8004370:	42470060 	.word	0x42470060

08004374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0cc      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004388:	4b68      	ldr	r3, [pc, #416]	; (800452c <HAL_RCC_ClockConfig+0x1b8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d90c      	bls.n	80043b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004396:	4b65      	ldr	r3, [pc, #404]	; (800452c <HAL_RCC_ClockConfig+0x1b8>)
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	4b63      	ldr	r3, [pc, #396]	; (800452c <HAL_RCC_ClockConfig+0x1b8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0b8      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d020      	beq.n	80043fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c8:	4b59      	ldr	r3, [pc, #356]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a58      	ldr	r2, [pc, #352]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e0:	4b53      	ldr	r3, [pc, #332]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a52      	ldr	r2, [pc, #328]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ec:	4b50      	ldr	r3, [pc, #320]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	494d      	ldr	r1, [pc, #308]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d044      	beq.n	8004494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d107      	bne.n	8004422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004412:	4b47      	ldr	r3, [pc, #284]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d119      	bne.n	8004452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e07f      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d003      	beq.n	8004432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800442e:	2b03      	cmp	r3, #3
 8004430:	d107      	bne.n	8004442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004432:	4b3f      	ldr	r3, [pc, #252]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e06f      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004442:	4b3b      	ldr	r3, [pc, #236]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e067      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004452:	4b37      	ldr	r3, [pc, #220]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f023 0203 	bic.w	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	4934      	ldr	r1, [pc, #208]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	4313      	orrs	r3, r2
 8004462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004464:	f7fe fa06 	bl	8002874 <HAL_GetTick>
 8004468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446a:	e00a      	b.n	8004482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800446c:	f7fe fa02 	bl	8002874 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	f241 3288 	movw	r2, #5000	; 0x1388
 800447a:	4293      	cmp	r3, r2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e04f      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004482:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 020c 	and.w	r2, r3, #12
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	429a      	cmp	r2, r3
 8004492:	d1eb      	bne.n	800446c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004494:	4b25      	ldr	r3, [pc, #148]	; (800452c <HAL_RCC_ClockConfig+0x1b8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d20c      	bcs.n	80044bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a2:	4b22      	ldr	r3, [pc, #136]	; (800452c <HAL_RCC_ClockConfig+0x1b8>)
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044aa:	4b20      	ldr	r3, [pc, #128]	; (800452c <HAL_RCC_ClockConfig+0x1b8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e032      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c8:	4b19      	ldr	r3, [pc, #100]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4916      	ldr	r1, [pc, #88]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	490e      	ldr	r1, [pc, #56]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044fa:	f000 f821 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 80044fe:	4602      	mov	r2, r0
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	490a      	ldr	r1, [pc, #40]	; (8004534 <HAL_RCC_ClockConfig+0x1c0>)
 800450c:	5ccb      	ldrb	r3, [r1, r3]
 800450e:	fa22 f303 	lsr.w	r3, r2, r3
 8004512:	4a09      	ldr	r2, [pc, #36]	; (8004538 <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004516:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_RCC_ClockConfig+0x1c8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe f966 	bl	80027ec <HAL_InitTick>

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40023c00 	.word	0x40023c00
 8004530:	40023800 	.word	0x40023800
 8004534:	08006730 	.word	0x08006730
 8004538:	20000000 	.word	0x20000000
 800453c:	20000004 	.word	0x20000004

08004540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004540:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004544:	b084      	sub	sp, #16
 8004546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	2300      	movs	r3, #0
 8004552:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004558:	4b67      	ldr	r3, [pc, #412]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b08      	cmp	r3, #8
 8004562:	d00d      	beq.n	8004580 <HAL_RCC_GetSysClockFreq+0x40>
 8004564:	2b08      	cmp	r3, #8
 8004566:	f200 80bd 	bhi.w	80046e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x34>
 800456e:	2b04      	cmp	r3, #4
 8004570:	d003      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0x3a>
 8004572:	e0b7      	b.n	80046e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004574:	4b61      	ldr	r3, [pc, #388]	; (80046fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004576:	60bb      	str	r3, [r7, #8]
       break;
 8004578:	e0b7      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800457a:	4b61      	ldr	r3, [pc, #388]	; (8004700 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800457c:	60bb      	str	r3, [r7, #8]
      break;
 800457e:	e0b4      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004580:	4b5d      	ldr	r3, [pc, #372]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004588:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800458a:	4b5b      	ldr	r3, [pc, #364]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d04d      	beq.n	8004632 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004596:	4b58      	ldr	r3, [pc, #352]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	099b      	lsrs	r3, r3, #6
 800459c:	461a      	mov	r2, r3
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045a6:	f04f 0100 	mov.w	r1, #0
 80045aa:	ea02 0800 	and.w	r8, r2, r0
 80045ae:	ea03 0901 	and.w	r9, r3, r1
 80045b2:	4640      	mov	r0, r8
 80045b4:	4649      	mov	r1, r9
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	014b      	lsls	r3, r1, #5
 80045c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045c4:	0142      	lsls	r2, r0, #5
 80045c6:	4610      	mov	r0, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	ebb0 0008 	subs.w	r0, r0, r8
 80045ce:	eb61 0109 	sbc.w	r1, r1, r9
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	018b      	lsls	r3, r1, #6
 80045dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045e0:	0182      	lsls	r2, r0, #6
 80045e2:	1a12      	subs	r2, r2, r0
 80045e4:	eb63 0301 	sbc.w	r3, r3, r1
 80045e8:	f04f 0000 	mov.w	r0, #0
 80045ec:	f04f 0100 	mov.w	r1, #0
 80045f0:	00d9      	lsls	r1, r3, #3
 80045f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045f6:	00d0      	lsls	r0, r2, #3
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	eb12 0208 	adds.w	r2, r2, r8
 8004600:	eb43 0309 	adc.w	r3, r3, r9
 8004604:	f04f 0000 	mov.w	r0, #0
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	0259      	lsls	r1, r3, #9
 800460e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004612:	0250      	lsls	r0, r2, #9
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4610      	mov	r0, r2
 800461a:	4619      	mov	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	461a      	mov	r2, r3
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	f7fc f9ee 	bl	8000a04 <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4613      	mov	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e04a      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004632:	4b31      	ldr	r3, [pc, #196]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	461a      	mov	r2, r3
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004642:	f04f 0100 	mov.w	r1, #0
 8004646:	ea02 0400 	and.w	r4, r2, r0
 800464a:	ea03 0501 	and.w	r5, r3, r1
 800464e:	4620      	mov	r0, r4
 8004650:	4629      	mov	r1, r5
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	014b      	lsls	r3, r1, #5
 800465c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004660:	0142      	lsls	r2, r0, #5
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	1b00      	subs	r0, r0, r4
 8004668:	eb61 0105 	sbc.w	r1, r1, r5
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	018b      	lsls	r3, r1, #6
 8004676:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800467a:	0182      	lsls	r2, r0, #6
 800467c:	1a12      	subs	r2, r2, r0
 800467e:	eb63 0301 	sbc.w	r3, r3, r1
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f04f 0100 	mov.w	r1, #0
 800468a:	00d9      	lsls	r1, r3, #3
 800468c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004690:	00d0      	lsls	r0, r2, #3
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	1912      	adds	r2, r2, r4
 8004698:	eb45 0303 	adc.w	r3, r5, r3
 800469c:	f04f 0000 	mov.w	r0, #0
 80046a0:	f04f 0100 	mov.w	r1, #0
 80046a4:	0299      	lsls	r1, r3, #10
 80046a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046aa:	0290      	lsls	r0, r2, #10
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4610      	mov	r0, r2
 80046b2:	4619      	mov	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	f7fc f9a2 	bl	8000a04 <__aeabi_uldivmod>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4613      	mov	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	0c1b      	lsrs	r3, r3, #16
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	3301      	adds	r3, #1
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e0:	60bb      	str	r3, [r7, #8]
      break;
 80046e2:	e002      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046e6:	60bb      	str	r3, [r7, #8]
      break;
 80046e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ea:	68bb      	ldr	r3, [r7, #8]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046f6:	bf00      	nop
 80046f8:	40023800 	.word	0x40023800
 80046fc:	00f42400 	.word	0x00f42400
 8004700:	007a1200 	.word	0x007a1200

08004704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004708:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_RCC_GetHCLKFreq+0x14>)
 800470a:	681b      	ldr	r3, [r3, #0]
}
 800470c:	4618      	mov	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20000000 	.word	0x20000000

0800471c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004720:	f7ff fff0 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0a9b      	lsrs	r3, r3, #10
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4903      	ldr	r1, [pc, #12]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40023800 	.word	0x40023800
 8004740:	08006740 	.word	0x08006740

08004744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004748:	f7ff ffdc 	bl	8004704 <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	0b5b      	lsrs	r3, r3, #13
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4903      	ldr	r1, [pc, #12]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40023800 	.word	0x40023800
 8004768:	08006740 	.word	0x08006740

0800476c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e07b      	b.n	8004876 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800478e:	d009      	beq.n	80047a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	61da      	str	r2, [r3, #28]
 8004796:	e005      	b.n	80047a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fd fa4c 	bl	8001c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	ea42 0103 	orr.w	r1, r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	f003 0104 	and.w	r1, r3, #4
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	f003 0210 	and.w	r2, r3, #16
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e041      	b.n	8004914 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7fd fc17 	bl	80020d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f000 fa11 	bl	8004ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e041      	b.n	80049b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f839 	bl	80049ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3304      	adds	r3, #4
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f000 f9c2 	bl	8004ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e0ae      	b.n	8004b4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	f200 809f 	bhi.w	8004b3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004b3d 	.word	0x08004b3d
 8004a0c:	08004b3d 	.word	0x08004b3d
 8004a10:	08004b3d 	.word	0x08004b3d
 8004a14:	08004a79 	.word	0x08004a79
 8004a18:	08004b3d 	.word	0x08004b3d
 8004a1c:	08004b3d 	.word	0x08004b3d
 8004a20:	08004b3d 	.word	0x08004b3d
 8004a24:	08004abb 	.word	0x08004abb
 8004a28:	08004b3d 	.word	0x08004b3d
 8004a2c:	08004b3d 	.word	0x08004b3d
 8004a30:	08004b3d 	.word	0x08004b3d
 8004a34:	08004afb 	.word	0x08004afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f9f0 	bl	8004e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0208 	orr.w	r2, r2, #8
 8004a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0204 	bic.w	r2, r2, #4
 8004a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6999      	ldr	r1, [r3, #24]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	619a      	str	r2, [r3, #24]
      break;
 8004a76:	e064      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68b9      	ldr	r1, [r7, #8]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fa40 	bl	8004f04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699a      	ldr	r2, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6999      	ldr	r1, [r3, #24]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	021a      	lsls	r2, r3, #8
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	619a      	str	r2, [r3, #24]
      break;
 8004ab8:	e043      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fa95 	bl	8004ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f042 0208 	orr.w	r2, r2, #8
 8004ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0204 	bic.w	r2, r2, #4
 8004ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69d9      	ldr	r1, [r3, #28]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	61da      	str	r2, [r3, #28]
      break;
 8004af8:	e023      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fae9 	bl	80050d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69d9      	ldr	r1, [r3, #28]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	021a      	lsls	r2, r3, #8
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	61da      	str	r2, [r3, #28]
      break;
 8004b3a:	e002      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_ConfigClockSource+0x1c>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e0b4      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x186>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba8:	d03e      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0xd4>
 8004baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bae:	f200 8087 	bhi.w	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb6:	f000 8086 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x172>
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	d87f      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b70      	cmp	r3, #112	; 0x70
 8004bc2:	d01a      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0xa6>
 8004bc4:	2b70      	cmp	r3, #112	; 0x70
 8004bc6:	d87b      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b60      	cmp	r3, #96	; 0x60
 8004bca:	d050      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x11a>
 8004bcc:	2b60      	cmp	r3, #96	; 0x60
 8004bce:	d877      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b50      	cmp	r3, #80	; 0x50
 8004bd2:	d03c      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0xfa>
 8004bd4:	2b50      	cmp	r3, #80	; 0x50
 8004bd6:	d873      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d058      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x13a>
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d86f      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b30      	cmp	r3, #48	; 0x30
 8004be2:	d064      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004be4:	2b30      	cmp	r3, #48	; 0x30
 8004be6:	d86b      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d060      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d867      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d05c      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d05a      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bf8:	e062      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6899      	ldr	r1, [r3, #8]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f000 fb35 	bl	8005278 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	609a      	str	r2, [r3, #8]
      break;
 8004c26:	e04f      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6899      	ldr	r1, [r3, #8]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f000 fb1e 	bl	8005278 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c4a:	609a      	str	r2, [r3, #8]
      break;
 8004c4c:	e03c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6859      	ldr	r1, [r3, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f000 fa92 	bl	8005184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2150      	movs	r1, #80	; 0x50
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 faeb 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004c6c:	e02c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6859      	ldr	r1, [r3, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f000 fab1 	bl	80051e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2160      	movs	r1, #96	; 0x60
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fadb 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004c8c:	e01c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6859      	ldr	r1, [r3, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f000 fa72 	bl	8005184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2140      	movs	r1, #64	; 0x40
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 facb 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004cac:	e00c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f000 fac2 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004cbe:	e003      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc4:	e000      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a40      	ldr	r2, [pc, #256]	; (8004df8 <TIM_Base_SetConfig+0x114>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d02:	d00f      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a3d      	ldr	r2, [pc, #244]	; (8004dfc <TIM_Base_SetConfig+0x118>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <TIM_Base_SetConfig+0x11c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a3b      	ldr	r2, [pc, #236]	; (8004e04 <TIM_Base_SetConfig+0x120>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_Base_SetConfig+0x40>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a3a      	ldr	r2, [pc, #232]	; (8004e08 <TIM_Base_SetConfig+0x124>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d108      	bne.n	8004d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a2f      	ldr	r2, [pc, #188]	; (8004df8 <TIM_Base_SetConfig+0x114>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d02b      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d44:	d027      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a2c      	ldr	r2, [pc, #176]	; (8004dfc <TIM_Base_SetConfig+0x118>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d023      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a2b      	ldr	r2, [pc, #172]	; (8004e00 <TIM_Base_SetConfig+0x11c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01f      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a2a      	ldr	r2, [pc, #168]	; (8004e04 <TIM_Base_SetConfig+0x120>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01b      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <TIM_Base_SetConfig+0x124>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d017      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a28      	ldr	r2, [pc, #160]	; (8004e0c <TIM_Base_SetConfig+0x128>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a27      	ldr	r2, [pc, #156]	; (8004e10 <TIM_Base_SetConfig+0x12c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00f      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <TIM_Base_SetConfig+0x130>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00b      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <TIM_Base_SetConfig+0x134>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d007      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a24      	ldr	r2, [pc, #144]	; (8004e1c <TIM_Base_SetConfig+0x138>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a23      	ldr	r2, [pc, #140]	; (8004e20 <TIM_Base_SetConfig+0x13c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d108      	bne.n	8004da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <TIM_Base_SetConfig+0x114>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d003      	beq.n	8004ddc <TIM_Base_SetConfig+0xf8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a0c      	ldr	r2, [pc, #48]	; (8004e08 <TIM_Base_SetConfig+0x124>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d103      	bne.n	8004de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	615a      	str	r2, [r3, #20]
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	40010400 	.word	0x40010400
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40014400 	.word	0x40014400
 8004e14:	40014800 	.word	0x40014800
 8004e18:	40001800 	.word	0x40001800
 8004e1c:	40001c00 	.word	0x40001c00
 8004e20:	40002000 	.word	0x40002000

08004e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f023 0201 	bic.w	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0303 	bic.w	r3, r3, #3
 8004e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 0302 	bic.w	r3, r3, #2
 8004e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a20      	ldr	r2, [pc, #128]	; (8004efc <TIM_OC1_SetConfig+0xd8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_OC1_SetConfig+0x64>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a1f      	ldr	r2, [pc, #124]	; (8004f00 <TIM_OC1_SetConfig+0xdc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d10c      	bne.n	8004ea2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0308 	bic.w	r3, r3, #8
 8004e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <TIM_OC1_SetConfig+0xd8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d003      	beq.n	8004eb2 <TIM_OC1_SetConfig+0x8e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a14      	ldr	r2, [pc, #80]	; (8004f00 <TIM_OC1_SetConfig+0xdc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d111      	bne.n	8004ed6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	621a      	str	r2, [r3, #32]
}
 8004ef0:	bf00      	nop
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	40010000 	.word	0x40010000
 8004f00:	40010400 	.word	0x40010400

08004f04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f023 0210 	bic.w	r2, r3, #16
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	021b      	lsls	r3, r3, #8
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f023 0320 	bic.w	r3, r3, #32
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <TIM_OC2_SetConfig+0xe4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_OC2_SetConfig+0x68>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a21      	ldr	r2, [pc, #132]	; (8004fec <TIM_OC2_SetConfig+0xe8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d10d      	bne.n	8004f88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <TIM_OC2_SetConfig+0xe4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_OC2_SetConfig+0x94>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a16      	ldr	r2, [pc, #88]	; (8004fec <TIM_OC2_SetConfig+0xe8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d113      	bne.n	8004fc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	621a      	str	r2, [r3, #32]
}
 8004fda:	bf00      	nop
 8004fdc:	371c      	adds	r7, #28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40010400 	.word	0x40010400

08004ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <TIM_OC3_SetConfig+0xe0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_OC3_SetConfig+0x66>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a20      	ldr	r2, [pc, #128]	; (80050d4 <TIM_OC3_SetConfig+0xe4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10d      	bne.n	8005072 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800505c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <TIM_OC3_SetConfig+0xe0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d003      	beq.n	8005082 <TIM_OC3_SetConfig+0x92>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <TIM_OC3_SetConfig+0xe4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d113      	bne.n	80050aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	621a      	str	r2, [r3, #32]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40010400 	.word	0x40010400

080050d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	031b      	lsls	r3, r3, #12
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a12      	ldr	r2, [pc, #72]	; (800517c <TIM_OC4_SetConfig+0xa4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d003      	beq.n	8005140 <TIM_OC4_SetConfig+0x68>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a11      	ldr	r2, [pc, #68]	; (8005180 <TIM_OC4_SetConfig+0xa8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d109      	bne.n	8005154 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	019b      	lsls	r3, r3, #6
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	621a      	str	r2, [r3, #32]
}
 800516e:	bf00      	nop
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	40010400 	.word	0x40010400

08005184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0201 	bic.w	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f023 030a 	bic.w	r3, r3, #10
 80051c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b087      	sub	sp, #28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0210 	bic.w	r2, r3, #16
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800520c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	031b      	lsls	r3, r3, #12
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800521e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	f043 0307 	orr.w	r3, r3, #7
 8005264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	609a      	str	r2, [r3, #8]
}
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	021a      	lsls	r2, r3, #8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	431a      	orrs	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4313      	orrs	r3, r2
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	609a      	str	r2, [r3, #8]
}
 80052ac:	bf00      	nop
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e05a      	b.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a21      	ldr	r2, [pc, #132]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d022      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531c:	d01d      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1d      	ldr	r2, [pc, #116]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d018      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1b      	ldr	r2, [pc, #108]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1a      	ldr	r2, [pc, #104]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00e      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d004      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d10c      	bne.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	4313      	orrs	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40010400 	.word	0x40010400
 80053a8:	40014000 	.word	0x40014000
 80053ac:	40001800 	.word	0x40001800

080053b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e03d      	b.n	8005448 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e03f      	b.n	80054e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fc ffec 	bl	8002458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2224      	movs	r2, #36	; 0x24
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 ff49 	bl	8006330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08c      	sub	sp, #48	; 0x30
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b20      	cmp	r3, #32
 8005508:	d165      	bne.n	80055d6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_UART_Transmit_DMA+0x26>
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e05e      	b.n	80055d8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_UART_Transmit_DMA+0x38>
 8005524:	2302      	movs	r3, #2
 8005526:	e057      	b.n	80055d8 <HAL_UART_Transmit_DMA+0xe8>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2221      	movs	r2, #33	; 0x21
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005554:	4a22      	ldr	r2, [pc, #136]	; (80055e0 <HAL_UART_Transmit_DMA+0xf0>)
 8005556:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555c:	4a21      	ldr	r2, [pc, #132]	; (80055e4 <HAL_UART_Transmit_DMA+0xf4>)
 800555e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005564:	4a20      	ldr	r2, [pc, #128]	; (80055e8 <HAL_UART_Transmit_DMA+0xf8>)
 8005566:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	2200      	movs	r2, #0
 800556e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005570:	f107 0308 	add.w	r3, r7, #8
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3304      	adds	r3, #4
 8005584:	461a      	mov	r2, r3
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	f7fd ff40 	bl	800340c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005594:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	617b      	str	r3, [r7, #20]
   return(result);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3314      	adds	r3, #20
 80055bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055be:	627a      	str	r2, [r7, #36]	; 0x24
 80055c0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6a39      	ldr	r1, [r7, #32]
 80055c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e5      	bne.n	800559e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
  }
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3730      	adds	r7, #48	; 0x30
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	08005bd1 	.word	0x08005bd1
 80055e4:	08005c6b 	.word	0x08005c6b
 80055e8:	08005de3 	.word	0x08005de3

080055ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b20      	cmp	r3, #32
 8005604:	d11d      	bne.n	8005642 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_UART_Receive_DMA+0x26>
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e016      	b.n	8005644 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_UART_Receive_DMA+0x38>
 8005620:	2302      	movs	r3, #2
 8005622:	e00f      	b.n	8005644 <HAL_UART_Receive_DMA+0x58>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	461a      	mov	r2, r3
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 fc1d 	bl	8005e78 <UART_Start_Receive_DMA>
 800563e:	4603      	mov	r3, r0
 8005640:	e000      	b.n	8005644 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005642:	2302      	movs	r3, #2
  }
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b0ba      	sub	sp, #232	; 0xe8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005672:	2300      	movs	r3, #0
 8005674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005678:	2300      	movs	r3, #0
 800567a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800567e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800568a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10f      	bne.n	80056b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <HAL_UART_IRQHandler+0x66>
 800569e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fd85 	bl	80061ba <UART_Receive_IT>
      return;
 80056b0:	e256      	b.n	8005b60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 80de 	beq.w	8005878 <HAL_UART_IRQHandler+0x22c>
 80056bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d106      	bne.n	80056d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80d1 	beq.w	8005878 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <HAL_UART_IRQHandler+0xae>
 80056e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0201 	orr.w	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <HAL_UART_IRQHandler+0xd2>
 8005706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f043 0202 	orr.w	r2, r3, #2
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_UART_IRQHandler+0xf6>
 800572a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f043 0204 	orr.w	r2, r3, #4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d011      	beq.n	8005772 <HAL_UART_IRQHandler+0x126>
 800574e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d105      	bne.n	8005766 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800575a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f043 0208 	orr.w	r2, r3, #8
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 81ed 	beq.w	8005b56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800577c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d008      	beq.n	800579a <HAL_UART_IRQHandler+0x14e>
 8005788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800578c:	f003 0320 	and.w	r3, r3, #32
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fd10 	bl	80061ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	f003 0308 	and.w	r3, r3, #8
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <HAL_UART_IRQHandler+0x17a>
 80057be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d04f      	beq.n	8005866 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fc18 	bl	8005ffc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d141      	bne.n	800585e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3314      	adds	r3, #20
 80057e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005806:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800580a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005812:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800581e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1d9      	bne.n	80057da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	2b00      	cmp	r3, #0
 800582c:	d013      	beq.n	8005856 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	4a7d      	ldr	r2, [pc, #500]	; (8005a28 <HAL_UART_IRQHandler+0x3dc>)
 8005834:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	4618      	mov	r0, r3
 800583c:	f7fd feae 	bl	800359c <HAL_DMA_Abort_IT>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d016      	beq.n	8005874 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005850:	4610      	mov	r0, r2
 8005852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005854:	e00e      	b.n	8005874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f9a4 	bl	8005ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585c:	e00a      	b.n	8005874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9a0 	bl	8005ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005864:	e006      	b.n	8005874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f99c 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005872:	e170      	b.n	8005b56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	bf00      	nop
    return;
 8005876:	e16e      	b.n	8005b56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	2b01      	cmp	r3, #1
 800587e:	f040 814a 	bne.w	8005b16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8143 	beq.w	8005b16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 813c 	beq.w	8005b16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800589e:	2300      	movs	r3, #0
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	f040 80b4 	bne.w	8005a2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 8140 	beq.w	8005b5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058e2:	429a      	cmp	r2, r3
 80058e4:	f080 8139 	bcs.w	8005b5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fa:	f000 8088 	beq.w	8005a0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	330c      	adds	r3, #12
 8005904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005914:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800591c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800592a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800592e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005936:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1d9      	bne.n	80058fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3314      	adds	r3, #20
 8005950:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800595a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3314      	adds	r3, #20
 800596a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800596e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005972:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005976:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e1      	bne.n	800594a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3314      	adds	r3, #20
 800598c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3314      	adds	r3, #20
 80059a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e3      	bne.n	8005986 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059de:	f023 0310 	bic.w	r3, r3, #16
 80059e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80059f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e3      	bne.n	80059cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fd fd57 	bl	80034bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f8ca 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a24:	e099      	b.n	8005b5a <HAL_UART_IRQHandler+0x50e>
 8005a26:	bf00      	nop
 8005a28:	080060c3 	.word	0x080060c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 808b 	beq.w	8005b5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 8086 	beq.w	8005b5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a76:	647a      	str	r2, [r7, #68]	; 0x44
 8005a78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e3      	bne.n	8005a52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3314      	adds	r3, #20
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	623b      	str	r3, [r7, #32]
   return(result);
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005aae:	633a      	str	r2, [r7, #48]	; 0x30
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab6:	e841 2300 	strex	r3, r2, [r1]
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e3      	bne.n	8005a8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0310 	bic.w	r3, r3, #16
 8005ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	330c      	adds	r3, #12
 8005af0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005af4:	61fa      	str	r2, [r7, #28]
 8005af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	69b9      	ldr	r1, [r7, #24]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	617b      	str	r3, [r7, #20]
   return(result);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e3      	bne.n	8005ad0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f852 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b14:	e023      	b.n	8005b5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <HAL_UART_IRQHandler+0x4ea>
 8005b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fadb 	bl	80060ea <UART_Transmit_IT>
    return;
 8005b34:	e014      	b.n	8005b60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00e      	beq.n	8005b60 <HAL_UART_IRQHandler+0x514>
 8005b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fb1b 	bl	800618a <UART_EndTransmit_IT>
    return;
 8005b54:	e004      	b.n	8005b60 <HAL_UART_IRQHandler+0x514>
    return;
 8005b56:	bf00      	nop
 8005b58:	e002      	b.n	8005b60 <HAL_UART_IRQHandler+0x514>
      return;
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_UART_IRQHandler+0x514>
      return;
 8005b5e:	bf00      	nop
  }
}
 8005b60:	37e8      	adds	r7, #232	; 0xe8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop

08005b68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b090      	sub	sp, #64	; 0x40
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d137      	bne.n	8005c5c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bee:	2200      	movs	r2, #0
 8005bf0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3314      	adds	r3, #20
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	623b      	str	r3, [r7, #32]
   return(result);
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3314      	adds	r3, #20
 8005c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c12:	633a      	str	r2, [r7, #48]	; 0x30
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e5      	bne.n	8005bf2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	330c      	adds	r3, #12
 8005c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c46:	61fa      	str	r2, [r7, #28]
 8005c48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	69b9      	ldr	r1, [r7, #24]
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	617b      	str	r3, [r7, #20]
   return(result);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e5      	bne.n	8005c26 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c5a:	e002      	b.n	8005c62 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005c5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005c5e:	f7ff ff83 	bl	8005b68 <HAL_UART_TxCpltCallback>
}
 8005c62:	bf00      	nop
 8005c64:	3740      	adds	r7, #64	; 0x40
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7ff ff7f 	bl	8005b7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b09c      	sub	sp, #112	; 0x70
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d172      	bne.n	8005d88 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e5      	bne.n	8005ca8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3314      	adds	r3, #20
 8005ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cee:	f023 0301 	bic.w	r3, r3, #1
 8005cf2:	667b      	str	r3, [r7, #100]	; 0x64
 8005cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3314      	adds	r3, #20
 8005cfa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005cfc:	647a      	str	r2, [r7, #68]	; 0x44
 8005cfe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e5      	bne.n	8005cdc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3314      	adds	r3, #20
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d26:	663b      	str	r3, [r7, #96]	; 0x60
 8005d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3314      	adds	r3, #20
 8005d2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d30:	633a      	str	r2, [r7, #48]	; 0x30
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e5      	bne.n	8005d10 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d119      	bne.n	8005d88 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0310 	bic.w	r3, r3, #16
 8005d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d74:	61fa      	str	r2, [r7, #28]
 8005d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	69b9      	ldr	r1, [r7, #24]
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	617b      	str	r3, [r7, #20]
   return(result);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d106      	bne.n	8005d9e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d94:	4619      	mov	r1, r3
 8005d96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d98:	f7ff ff0e 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d9c:	e002      	b.n	8005da4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005d9e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005da0:	f7fb f994 	bl	80010cc <HAL_UART_RxCpltCallback>
}
 8005da4:	bf00      	nop
 8005da6:	3770      	adds	r7, #112	; 0x70
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d108      	bne.n	8005dd4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	4619      	mov	r1, r3
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f7ff fef3 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dd2:	e002      	b.n	8005dda <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f7ff fedb 	bl	8005b90 <HAL_UART_RxHalfCpltCallback>
}
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfe:	2b80      	cmp	r3, #128	; 0x80
 8005e00:	bf0c      	ite	eq
 8005e02:	2301      	moveq	r3, #1
 8005e04:	2300      	movne	r3, #0
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b21      	cmp	r3, #33	; 0x21
 8005e14:	d108      	bne.n	8005e28 <UART_DMAError+0x46>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005e22:	68b8      	ldr	r0, [r7, #8]
 8005e24:	f000 f8c2 	bl	8005fac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	2b40      	cmp	r3, #64	; 0x40
 8005e34:	bf0c      	ite	eq
 8005e36:	2301      	moveq	r3, #1
 8005e38:	2300      	movne	r3, #0
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b22      	cmp	r3, #34	; 0x22
 8005e48:	d108      	bne.n	8005e5c <UART_DMAError+0x7a>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005e56:	68b8      	ldr	r0, [r7, #8]
 8005e58:	f000 f8d0 	bl	8005ffc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	f043 0210 	orr.w	r2, r3, #16
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e68:	68b8      	ldr	r0, [r7, #8]
 8005e6a:	f7ff fe9b 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b098      	sub	sp, #96	; 0x60
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	88fa      	ldrh	r2, [r7, #6]
 8005e90:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2222      	movs	r2, #34	; 0x22
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	4a3e      	ldr	r2, [pc, #248]	; (8005fa0 <UART_Start_Receive_DMA+0x128>)
 8005ea6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	4a3d      	ldr	r2, [pc, #244]	; (8005fa4 <UART_Start_Receive_DMA+0x12c>)
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	4a3c      	ldr	r2, [pc, #240]	; (8005fa8 <UART_Start_Receive_DMA+0x130>)
 8005eb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ec0:	f107 0308 	add.w	r3, r7, #8
 8005ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	f7fd fa98 	bl	800340c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005edc:	2300      	movs	r3, #0
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	613b      	str	r3, [r7, #16]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	330c      	adds	r3, #12
 8005f00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f10:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f1a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005f1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e5      	bne.n	8005efa <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3314      	adds	r3, #20
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	f043 0301 	orr.w	r3, r3, #1
 8005f44:	657b      	str	r3, [r7, #84]	; 0x54
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3314      	adds	r3, #20
 8005f4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f4e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e5      	bne.n	8005f2e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3314      	adds	r3, #20
 8005f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	617b      	str	r3, [r7, #20]
   return(result);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f78:	653b      	str	r3, [r7, #80]	; 0x50
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3314      	adds	r3, #20
 8005f80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f82:	627a      	str	r2, [r7, #36]	; 0x24
 8005f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6a39      	ldr	r1, [r7, #32]
 8005f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e5      	bne.n	8005f62 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3760      	adds	r7, #96	; 0x60
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	08005c87 	.word	0x08005c87
 8005fa4:	08005dad 	.word	0x08005dad
 8005fa8:	08005de3 	.word	0x08005de3

08005fac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b089      	sub	sp, #36	; 0x24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	61ba      	str	r2, [r7, #24]
 8005fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6979      	ldr	r1, [r7, #20]
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005ff0:	bf00      	nop
 8005ff2:	3724      	adds	r7, #36	; 0x24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b095      	sub	sp, #84	; 0x54
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	330c      	adds	r3, #12
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800601a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	330c      	adds	r3, #12
 8006022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006024:	643a      	str	r2, [r7, #64]	; 0x40
 8006026:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800602a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800602c:	e841 2300 	strex	r3, r2, [r1]
 8006030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1e5      	bne.n	8006004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3314      	adds	r3, #20
 800603e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	61fb      	str	r3, [r7, #28]
   return(result);
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f023 0301 	bic.w	r3, r3, #1
 800604e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3314      	adds	r3, #20
 8006056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006058:	62fa      	str	r2, [r7, #44]	; 0x2c
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800605e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e5      	bne.n	8006038 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	2b01      	cmp	r3, #1
 8006072:	d119      	bne.n	80060a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	60bb      	str	r3, [r7, #8]
   return(result);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f023 0310 	bic.w	r3, r3, #16
 800608a:	647b      	str	r3, [r7, #68]	; 0x44
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	330c      	adds	r3, #12
 8006092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006094:	61ba      	str	r2, [r7, #24]
 8006096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6979      	ldr	r1, [r7, #20]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	613b      	str	r3, [r7, #16]
   return(result);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e5      	bne.n	8006074 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060b6:	bf00      	nop
 80060b8:	3754      	adds	r7, #84	; 0x54
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff fd61 	bl	8005ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b21      	cmp	r3, #33	; 0x21
 80060fc:	d13e      	bne.n	800617c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006106:	d114      	bne.n	8006132 <UART_Transmit_IT+0x48>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d110      	bne.n	8006132 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006124:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	1c9a      	adds	r2, r3, #2
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	621a      	str	r2, [r3, #32]
 8006130:	e008      	b.n	8006144 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	1c59      	adds	r1, r3, #1
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6211      	str	r1, [r2, #32]
 800613c:	781a      	ldrb	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29b      	uxth	r3, r3
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	4619      	mov	r1, r3
 8006152:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10f      	bne.n	8006178 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006166:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006176:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006178:	2300      	movs	r3, #0
 800617a:	e000      	b.n	800617e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800617c:	2302      	movs	r3, #2
  }
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff fcdc 	bl	8005b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b08c      	sub	sp, #48	; 0x30
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b22      	cmp	r3, #34	; 0x22
 80061cc:	f040 80ab 	bne.w	8006326 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d8:	d117      	bne.n	800620a <UART_Receive_IT+0x50>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d113      	bne.n	800620a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006202:	1c9a      	adds	r2, r3, #2
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	629a      	str	r2, [r3, #40]	; 0x28
 8006208:	e026      	b.n	8006258 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006210:	2300      	movs	r3, #0
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621c:	d007      	beq.n	800622e <UART_Receive_IT+0x74>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <UART_Receive_IT+0x82>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	b2da      	uxtb	r2, r3
 8006236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e008      	b.n	800624e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006248:	b2da      	uxtb	r2, r3
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800625c:	b29b      	uxth	r3, r3
 800625e:	3b01      	subs	r3, #1
 8006260:	b29b      	uxth	r3, r3
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	4619      	mov	r1, r3
 8006266:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006268:	2b00      	cmp	r3, #0
 800626a:	d15a      	bne.n	8006322 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0220 	bic.w	r2, r2, #32
 800627a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800628a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695a      	ldr	r2, [r3, #20]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d135      	bne.n	8006318 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	330c      	adds	r3, #12
 80062b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	613b      	str	r3, [r7, #16]
   return(result);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f023 0310 	bic.w	r3, r3, #16
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	330c      	adds	r3, #12
 80062d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d2:	623a      	str	r2, [r7, #32]
 80062d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	69f9      	ldr	r1, [r7, #28]
 80062d8:	6a3a      	ldr	r2, [r7, #32]
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	61bb      	str	r3, [r7, #24]
   return(result);
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e5      	bne.n	80062b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0310 	and.w	r3, r3, #16
 80062f0:	2b10      	cmp	r3, #16
 80062f2:	d10a      	bne.n	800630a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062f4:	2300      	movs	r3, #0
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff fc51 	bl	8005bb8 <HAL_UARTEx_RxEventCallback>
 8006316:	e002      	b.n	800631e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7fa fed7 	bl	80010cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	e002      	b.n	8006328 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	e000      	b.n	8006328 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006326:	2302      	movs	r3, #2
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3730      	adds	r7, #48	; 0x30
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	b09f      	sub	sp, #124	; 0x7c
 8006336:	af00      	add	r7, sp, #0
 8006338:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800633a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006346:	68d9      	ldr	r1, [r3, #12]
 8006348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	ea40 0301 	orr.w	r3, r0, r1
 8006350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	431a      	orrs	r2, r3
 800635c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	431a      	orrs	r2, r3
 8006362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	4313      	orrs	r3, r2
 8006368:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800636a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006374:	f021 010c 	bic.w	r1, r1, #12
 8006378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800637e:	430b      	orrs	r3, r1
 8006380:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800638c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638e:	6999      	ldr	r1, [r3, #24]
 8006390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	ea40 0301 	orr.w	r3, r0, r1
 8006398:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800639a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4bc5      	ldr	r3, [pc, #788]	; (80066b4 <UART_SetConfig+0x384>)
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d004      	beq.n	80063ae <UART_SetConfig+0x7e>
 80063a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4bc3      	ldr	r3, [pc, #780]	; (80066b8 <UART_SetConfig+0x388>)
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d103      	bne.n	80063b6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063ae:	f7fe f9c9 	bl	8004744 <HAL_RCC_GetPCLK2Freq>
 80063b2:	6778      	str	r0, [r7, #116]	; 0x74
 80063b4:	e002      	b.n	80063bc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063b6:	f7fe f9b1 	bl	800471c <HAL_RCC_GetPCLK1Freq>
 80063ba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c4:	f040 80b6 	bne.w	8006534 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ca:	461c      	mov	r4, r3
 80063cc:	f04f 0500 	mov.w	r5, #0
 80063d0:	4622      	mov	r2, r4
 80063d2:	462b      	mov	r3, r5
 80063d4:	1891      	adds	r1, r2, r2
 80063d6:	6439      	str	r1, [r7, #64]	; 0x40
 80063d8:	415b      	adcs	r3, r3
 80063da:	647b      	str	r3, [r7, #68]	; 0x44
 80063dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063e0:	1912      	adds	r2, r2, r4
 80063e2:	eb45 0303 	adc.w	r3, r5, r3
 80063e6:	f04f 0000 	mov.w	r0, #0
 80063ea:	f04f 0100 	mov.w	r1, #0
 80063ee:	00d9      	lsls	r1, r3, #3
 80063f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063f4:	00d0      	lsls	r0, r2, #3
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	1911      	adds	r1, r2, r4
 80063fc:	6639      	str	r1, [r7, #96]	; 0x60
 80063fe:	416b      	adcs	r3, r5
 8006400:	667b      	str	r3, [r7, #100]	; 0x64
 8006402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	461a      	mov	r2, r3
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	1891      	adds	r1, r2, r2
 800640e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006410:	415b      	adcs	r3, r3
 8006412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006418:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800641c:	f7fa faf2 	bl	8000a04 <__aeabi_uldivmod>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4ba5      	ldr	r3, [pc, #660]	; (80066bc <UART_SetConfig+0x38c>)
 8006426:	fba3 2302 	umull	r2, r3, r3, r2
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	011e      	lsls	r6, r3, #4
 800642e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006430:	461c      	mov	r4, r3
 8006432:	f04f 0500 	mov.w	r5, #0
 8006436:	4622      	mov	r2, r4
 8006438:	462b      	mov	r3, r5
 800643a:	1891      	adds	r1, r2, r2
 800643c:	6339      	str	r1, [r7, #48]	; 0x30
 800643e:	415b      	adcs	r3, r3
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
 8006442:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006446:	1912      	adds	r2, r2, r4
 8006448:	eb45 0303 	adc.w	r3, r5, r3
 800644c:	f04f 0000 	mov.w	r0, #0
 8006450:	f04f 0100 	mov.w	r1, #0
 8006454:	00d9      	lsls	r1, r3, #3
 8006456:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800645a:	00d0      	lsls	r0, r2, #3
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	1911      	adds	r1, r2, r4
 8006462:	65b9      	str	r1, [r7, #88]	; 0x58
 8006464:	416b      	adcs	r3, r5
 8006466:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	461a      	mov	r2, r3
 800646e:	f04f 0300 	mov.w	r3, #0
 8006472:	1891      	adds	r1, r2, r2
 8006474:	62b9      	str	r1, [r7, #40]	; 0x28
 8006476:	415b      	adcs	r3, r3
 8006478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800647a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800647e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006482:	f7fa fabf 	bl	8000a04 <__aeabi_uldivmod>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4b8c      	ldr	r3, [pc, #560]	; (80066bc <UART_SetConfig+0x38c>)
 800648c:	fba3 1302 	umull	r1, r3, r3, r2
 8006490:	095b      	lsrs	r3, r3, #5
 8006492:	2164      	movs	r1, #100	; 0x64
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	3332      	adds	r3, #50	; 0x32
 800649e:	4a87      	ldr	r2, [pc, #540]	; (80066bc <UART_SetConfig+0x38c>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064ac:	441e      	add	r6, r3
 80064ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b0:	4618      	mov	r0, r3
 80064b2:	f04f 0100 	mov.w	r1, #0
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	1894      	adds	r4, r2, r2
 80064bc:	623c      	str	r4, [r7, #32]
 80064be:	415b      	adcs	r3, r3
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
 80064c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064c6:	1812      	adds	r2, r2, r0
 80064c8:	eb41 0303 	adc.w	r3, r1, r3
 80064cc:	f04f 0400 	mov.w	r4, #0
 80064d0:	f04f 0500 	mov.w	r5, #0
 80064d4:	00dd      	lsls	r5, r3, #3
 80064d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064da:	00d4      	lsls	r4, r2, #3
 80064dc:	4622      	mov	r2, r4
 80064de:	462b      	mov	r3, r5
 80064e0:	1814      	adds	r4, r2, r0
 80064e2:	653c      	str	r4, [r7, #80]	; 0x50
 80064e4:	414b      	adcs	r3, r1
 80064e6:	657b      	str	r3, [r7, #84]	; 0x54
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	461a      	mov	r2, r3
 80064ee:	f04f 0300 	mov.w	r3, #0
 80064f2:	1891      	adds	r1, r2, r2
 80064f4:	61b9      	str	r1, [r7, #24]
 80064f6:	415b      	adcs	r3, r3
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006502:	f7fa fa7f 	bl	8000a04 <__aeabi_uldivmod>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4b6c      	ldr	r3, [pc, #432]	; (80066bc <UART_SetConfig+0x38c>)
 800650c:	fba3 1302 	umull	r1, r3, r3, r2
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	2164      	movs	r1, #100	; 0x64
 8006514:	fb01 f303 	mul.w	r3, r1, r3
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	3332      	adds	r3, #50	; 0x32
 800651e:	4a67      	ldr	r2, [pc, #412]	; (80066bc <UART_SetConfig+0x38c>)
 8006520:	fba2 2303 	umull	r2, r3, r2, r3
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	f003 0207 	and.w	r2, r3, #7
 800652a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4432      	add	r2, r6
 8006530:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006532:	e0b9      	b.n	80066a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006536:	461c      	mov	r4, r3
 8006538:	f04f 0500 	mov.w	r5, #0
 800653c:	4622      	mov	r2, r4
 800653e:	462b      	mov	r3, r5
 8006540:	1891      	adds	r1, r2, r2
 8006542:	6139      	str	r1, [r7, #16]
 8006544:	415b      	adcs	r3, r3
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800654c:	1912      	adds	r2, r2, r4
 800654e:	eb45 0303 	adc.w	r3, r5, r3
 8006552:	f04f 0000 	mov.w	r0, #0
 8006556:	f04f 0100 	mov.w	r1, #0
 800655a:	00d9      	lsls	r1, r3, #3
 800655c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006560:	00d0      	lsls	r0, r2, #3
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	eb12 0804 	adds.w	r8, r2, r4
 800656a:	eb43 0905 	adc.w	r9, r3, r5
 800656e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4618      	mov	r0, r3
 8006574:	f04f 0100 	mov.w	r1, #0
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	008b      	lsls	r3, r1, #2
 8006582:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006586:	0082      	lsls	r2, r0, #2
 8006588:	4640      	mov	r0, r8
 800658a:	4649      	mov	r1, r9
 800658c:	f7fa fa3a 	bl	8000a04 <__aeabi_uldivmod>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4b49      	ldr	r3, [pc, #292]	; (80066bc <UART_SetConfig+0x38c>)
 8006596:	fba3 2302 	umull	r2, r3, r3, r2
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	011e      	lsls	r6, r3, #4
 800659e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a0:	4618      	mov	r0, r3
 80065a2:	f04f 0100 	mov.w	r1, #0
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	1894      	adds	r4, r2, r2
 80065ac:	60bc      	str	r4, [r7, #8]
 80065ae:	415b      	adcs	r3, r3
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065b6:	1812      	adds	r2, r2, r0
 80065b8:	eb41 0303 	adc.w	r3, r1, r3
 80065bc:	f04f 0400 	mov.w	r4, #0
 80065c0:	f04f 0500 	mov.w	r5, #0
 80065c4:	00dd      	lsls	r5, r3, #3
 80065c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065ca:	00d4      	lsls	r4, r2, #3
 80065cc:	4622      	mov	r2, r4
 80065ce:	462b      	mov	r3, r5
 80065d0:	1814      	adds	r4, r2, r0
 80065d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80065d4:	414b      	adcs	r3, r1
 80065d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4618      	mov	r0, r3
 80065de:	f04f 0100 	mov.w	r1, #0
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	f04f 0300 	mov.w	r3, #0
 80065ea:	008b      	lsls	r3, r1, #2
 80065ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065f0:	0082      	lsls	r2, r0, #2
 80065f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80065f6:	f7fa fa05 	bl	8000a04 <__aeabi_uldivmod>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4b2f      	ldr	r3, [pc, #188]	; (80066bc <UART_SetConfig+0x38c>)
 8006600:	fba3 1302 	umull	r1, r3, r3, r2
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	2164      	movs	r1, #100	; 0x64
 8006608:	fb01 f303 	mul.w	r3, r1, r3
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	3332      	adds	r3, #50	; 0x32
 8006612:	4a2a      	ldr	r2, [pc, #168]	; (80066bc <UART_SetConfig+0x38c>)
 8006614:	fba2 2303 	umull	r2, r3, r2, r3
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800661e:	441e      	add	r6, r3
 8006620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006622:	4618      	mov	r0, r3
 8006624:	f04f 0100 	mov.w	r1, #0
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	1894      	adds	r4, r2, r2
 800662e:	603c      	str	r4, [r7, #0]
 8006630:	415b      	adcs	r3, r3
 8006632:	607b      	str	r3, [r7, #4]
 8006634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006638:	1812      	adds	r2, r2, r0
 800663a:	eb41 0303 	adc.w	r3, r1, r3
 800663e:	f04f 0400 	mov.w	r4, #0
 8006642:	f04f 0500 	mov.w	r5, #0
 8006646:	00dd      	lsls	r5, r3, #3
 8006648:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800664c:	00d4      	lsls	r4, r2, #3
 800664e:	4622      	mov	r2, r4
 8006650:	462b      	mov	r3, r5
 8006652:	eb12 0a00 	adds.w	sl, r2, r0
 8006656:	eb43 0b01 	adc.w	fp, r3, r1
 800665a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	4618      	mov	r0, r3
 8006660:	f04f 0100 	mov.w	r1, #0
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	008b      	lsls	r3, r1, #2
 800666e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006672:	0082      	lsls	r2, r0, #2
 8006674:	4650      	mov	r0, sl
 8006676:	4659      	mov	r1, fp
 8006678:	f7fa f9c4 	bl	8000a04 <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4b0e      	ldr	r3, [pc, #56]	; (80066bc <UART_SetConfig+0x38c>)
 8006682:	fba3 1302 	umull	r1, r3, r3, r2
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	2164      	movs	r1, #100	; 0x64
 800668a:	fb01 f303 	mul.w	r3, r1, r3
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	3332      	adds	r3, #50	; 0x32
 8006694:	4a09      	ldr	r2, [pc, #36]	; (80066bc <UART_SetConfig+0x38c>)
 8006696:	fba2 2303 	umull	r2, r3, r2, r3
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	f003 020f 	and.w	r2, r3, #15
 80066a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4432      	add	r2, r6
 80066a6:	609a      	str	r2, [r3, #8]
}
 80066a8:	bf00      	nop
 80066aa:	377c      	adds	r7, #124	; 0x7c
 80066ac:	46bd      	mov	sp, r7
 80066ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	bf00      	nop
 80066b4:	40011000 	.word	0x40011000
 80066b8:	40011400 	.word	0x40011400
 80066bc:	51eb851f 	.word	0x51eb851f

080066c0 <__libc_init_array>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	4d0d      	ldr	r5, [pc, #52]	; (80066f8 <__libc_init_array+0x38>)
 80066c4:	4c0d      	ldr	r4, [pc, #52]	; (80066fc <__libc_init_array+0x3c>)
 80066c6:	1b64      	subs	r4, r4, r5
 80066c8:	10a4      	asrs	r4, r4, #2
 80066ca:	2600      	movs	r6, #0
 80066cc:	42a6      	cmp	r6, r4
 80066ce:	d109      	bne.n	80066e4 <__libc_init_array+0x24>
 80066d0:	4d0b      	ldr	r5, [pc, #44]	; (8006700 <__libc_init_array+0x40>)
 80066d2:	4c0c      	ldr	r4, [pc, #48]	; (8006704 <__libc_init_array+0x44>)
 80066d4:	f000 f820 	bl	8006718 <_init>
 80066d8:	1b64      	subs	r4, r4, r5
 80066da:	10a4      	asrs	r4, r4, #2
 80066dc:	2600      	movs	r6, #0
 80066de:	42a6      	cmp	r6, r4
 80066e0:	d105      	bne.n	80066ee <__libc_init_array+0x2e>
 80066e2:	bd70      	pop	{r4, r5, r6, pc}
 80066e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066e8:	4798      	blx	r3
 80066ea:	3601      	adds	r6, #1
 80066ec:	e7ee      	b.n	80066cc <__libc_init_array+0xc>
 80066ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f2:	4798      	blx	r3
 80066f4:	3601      	adds	r6, #1
 80066f6:	e7f2      	b.n	80066de <__libc_init_array+0x1e>
 80066f8:	08006758 	.word	0x08006758
 80066fc:	08006758 	.word	0x08006758
 8006700:	08006758 	.word	0x08006758
 8006704:	0800675c 	.word	0x0800675c

08006708 <memset>:
 8006708:	4402      	add	r2, r0
 800670a:	4603      	mov	r3, r0
 800670c:	4293      	cmp	r3, r2
 800670e:	d100      	bne.n	8006712 <memset+0xa>
 8006710:	4770      	bx	lr
 8006712:	f803 1b01 	strb.w	r1, [r3], #1
 8006716:	e7f9      	b.n	800670c <memset+0x4>

08006718 <_init>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr

08006724 <_fini>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr
