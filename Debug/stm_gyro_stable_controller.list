
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800db40  0800db40  0001db40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0d8  0800e0d8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0d8  0800e0d8  0001e0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0e0  0800e0e0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0e0  0800e0e0  0001e0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0e4  0800e0e4  0001e0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800e0e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00001290  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001320  20001320  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019e85  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003730  00000000  00000000  00039f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  0003d678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001240  00000000  00000000  0003ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025468  00000000  00000000  0003fc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180d6  00000000  00000000  000650b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ded4e  00000000  00000000  0007d186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015bed4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f5c  00000000  00000000  0015bf28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db28 	.word	0x0800db28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800db28 	.word	0x0800db28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96e 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8083 	bne.w	8000d02 <__udivmoddi4+0x116>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d947      	bls.n	8000c92 <__udivmoddi4+0xa6>
 8000c02:	fab2 f282 	clz	r2, r2
 8000c06:	b142      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	f1c2 0020 	rsb	r0, r2, #32
 8000c0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c10:	4091      	lsls	r1, r2
 8000c12:	4097      	lsls	r7, r2
 8000c14:	ea40 0c01 	orr.w	ip, r0, r1
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbbc f6f8 	udiv	r6, ip, r8
 8000c24:	fa1f fe87 	uxth.w	lr, r7
 8000c28:	fb08 c116 	mls	r1, r8, r6, ip
 8000c2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c30:	fb06 f10e 	mul.w	r1, r6, lr
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 8119 	bcs.w	8000e74 <__udivmoddi4+0x288>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8116 	bls.w	8000e74 <__udivmoddi4+0x288>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	443b      	add	r3, r7
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	f080 8105 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f240 8102 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7c:	eba4 040e 	sub.w	r4, r4, lr
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	b902      	cbnz	r2, 8000c96 <__udivmoddi4+0xaa>
 8000c94:	deff      	udf	#255	; 0xff
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d150      	bne.n	8000d40 <__udivmoddi4+0x154>
 8000c9e:	1bcb      	subs	r3, r1, r7
 8000ca0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	2601      	movs	r6, #1
 8000caa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cae:	0c21      	lsrs	r1, r4, #16
 8000cb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000cc0:	1879      	adds	r1, r7, r1
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0xe2>
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	f200 80e9 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1ac9      	subs	r1, r1, r3
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x10c>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x10a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80d9 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e7bf      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x12e>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80b1 	beq.w	8000e6e <__udivmoddi4+0x282>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x1cc>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0x140>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80b8 	bhi.w	8000e9c <__udivmoddi4+0x2b0>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	468c      	mov	ip, r1
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0a8      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000d3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3e:	e7a5      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f603 	lsr.w	r6, r0, r3
 8000d48:	4097      	lsls	r7, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d52:	40d9      	lsrs	r1, r3
 8000d54:	4330      	orrs	r0, r6
 8000d56:	0c03      	lsrs	r3, r0, #16
 8000d58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f108 	mul.w	r1, r6, r8
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x19c>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d7a:	f080 808d 	bcs.w	8000e98 <__udivmoddi4+0x2ac>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 808a 	bls.w	8000e98 <__udivmoddi4+0x2ac>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b281      	uxth	r1, r0
 8000d8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d98:	fb00 f308 	mul.w	r3, r0, r8
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x1c4>
 8000da0:	1879      	adds	r1, r7, r1
 8000da2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da6:	d273      	bcs.n	8000e90 <__udivmoddi4+0x2a4>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d971      	bls.n	8000e90 <__udivmoddi4+0x2a4>
 8000dac:	3802      	subs	r0, #2
 8000dae:	4439      	add	r1, r7
 8000db0:	1acb      	subs	r3, r1, r3
 8000db2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db6:	e778      	b.n	8000caa <__udivmoddi4+0xbe>
 8000db8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000dc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc4:	431c      	orrs	r4, r3
 8000dc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	0c3b      	lsrs	r3, r7, #16
 8000dda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dde:	fa1f f884 	uxth.w	r8, r4
 8000de2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dea:	fb09 fa08 	mul.w	sl, r9, r8
 8000dee:	458a      	cmp	sl, r1
 8000df0:	fa02 f206 	lsl.w	r2, r2, r6
 8000df4:	fa00 f306 	lsl.w	r3, r0, r6
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x220>
 8000dfa:	1861      	adds	r1, r4, r1
 8000dfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e00:	d248      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e02:	458a      	cmp	sl, r1
 8000e04:	d946      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e06:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0a:	4421      	add	r1, r4
 8000e0c:	eba1 010a 	sub.w	r1, r1, sl
 8000e10:	b2bf      	uxth	r7, r7
 8000e12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1e:	fb00 f808 	mul.w	r8, r0, r8
 8000e22:	45b8      	cmp	r8, r7
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x24a>
 8000e26:	19e7      	adds	r7, r4, r7
 8000e28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e2c:	d22e      	bcs.n	8000e8c <__udivmoddi4+0x2a0>
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d92c      	bls.n	8000e8c <__udivmoddi4+0x2a0>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4427      	add	r7, r4
 8000e36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3a:	eba7 0708 	sub.w	r7, r7, r8
 8000e3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e42:	454f      	cmp	r7, r9
 8000e44:	46c6      	mov	lr, r8
 8000e46:	4649      	mov	r1, r9
 8000e48:	d31a      	bcc.n	8000e80 <__udivmoddi4+0x294>
 8000e4a:	d017      	beq.n	8000e7c <__udivmoddi4+0x290>
 8000e4c:	b15d      	cbz	r5, 8000e66 <__udivmoddi4+0x27a>
 8000e4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e52:	eb67 0701 	sbc.w	r7, r7, r1
 8000e56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e5a:	40f2      	lsrs	r2, r6
 8000e5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e60:	40f7      	lsrs	r7, r6
 8000e62:	e9c5 2700 	strd	r2, r7, [r5]
 8000e66:	2600      	movs	r6, #0
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e70b      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fd      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e7c:	4543      	cmp	r3, r8
 8000e7e:	d2e5      	bcs.n	8000e4c <__udivmoddi4+0x260>
 8000e80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e84:	eb69 0104 	sbc.w	r1, r9, r4
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7df      	b.n	8000e4c <__udivmoddi4+0x260>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e7d2      	b.n	8000e36 <__udivmoddi4+0x24a>
 8000e90:	4660      	mov	r0, ip
 8000e92:	e78d      	b.n	8000db0 <__udivmoddi4+0x1c4>
 8000e94:	4681      	mov	r9, r0
 8000e96:	e7b9      	b.n	8000e0c <__udivmoddi4+0x220>
 8000e98:	4666      	mov	r6, ip
 8000e9a:	e775      	b.n	8000d88 <__udivmoddi4+0x19c>
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e74a      	b.n	8000d36 <__udivmoddi4+0x14a>
 8000ea0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea4:	4439      	add	r1, r7
 8000ea6:	e713      	b.n	8000cd0 <__udivmoddi4+0xe4>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	443c      	add	r4, r7
 8000eac:	e724      	b.n	8000cf8 <__udivmoddi4+0x10c>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b08b      	sub	sp, #44	; 0x2c
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <FusionAhrsInitialise+0x74>)
 8000ed2:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <FusionAhrsInitialise+0x78>)
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000f1a:	bf00      	nop
 8000f1c:	372c      	adds	r7, #44	; 0x2c
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	7f7fffff 	.word	0x7f7fffff
 8000f2c:	41200000 	.word	0x41200000

08000f30 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8000f30:	b490      	push	{r4, r7}
 8000f32:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3c:	6018      	str	r0, [r3, #0]
 8000f3e:	f107 0120 	add.w	r1, r7, #32
 8000f42:	eeb0 5a61 	vmov.f32	s10, s3
 8000f46:	eef0 5a42 	vmov.f32	s11, s4
 8000f4a:	eeb0 6a62 	vmov.f32	s12, s5
 8000f4e:	f107 0214 	add.w	r2, r7, #20
 8000f52:	eef0 6a43 	vmov.f32	s13, s6
 8000f56:	eeb0 7a63 	vmov.f32	s14, s7
 8000f5a:	eef0 7a44 	vmov.f32	s15, s8
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	1d38      	adds	r0, r7, #4
 8000f64:	edc0 4a00 	vstr	s9, [r0]
 8000f68:	ed81 0a00 	vstr	s0, [r1]
 8000f6c:	edc1 0a01 	vstr	s1, [r1, #4]
 8000f70:	ed81 1a02 	vstr	s2, [r1, #8]
 8000f74:	ed82 5a00 	vstr	s10, [r2]
 8000f78:	edc2 5a01 	vstr	s11, [r2, #4]
 8000f7c:	ed82 6a02 	vstr	s12, [r2, #8]
 8000f80:	edc3 6a00 	vstr	s13, [r3]
 8000f84:	ed83 7a01 	vstr	s14, [r3, #4]
 8000f88:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8000f8c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fba:	d112      	bne.n	8000fe2 <FusionAhrsUpdate+0xb2>
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	d109      	bne.n	8000fe2 <FusionAhrsUpdate+0xb2>
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fde:	f000 8437 	beq.w	8001850 <FusionAhrsUpdate+0x920>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8000fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	edd3 6a03 	vldr	s13, [r3, #12]
 8001004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	edd3 7a05 	vldr	s15, [r3, #20]
 800100e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001012:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8001016:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800101a:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 800101e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	ed93 7a03 	vldr	s14, [r3, #12]
 8001028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	edd3 7a06 	vldr	s15, [r3, #24]
 800104a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800104e:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8001052:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001056:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 800105a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	ed93 7a03 	vldr	s14, [r3, #12]
 8001064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	edd3 7a03 	vldr	s15, [r3, #12]
 800106e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001072:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001076:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800107a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	edd3 6a06 	vldr	s13, [r3, #24]
 8001084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	edd3 7a06 	vldr	s15, [r3, #24]
 800108e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001092:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8001096:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800109a:	edc3 7a02 	vstr	s15, [r3, #8]
 800109e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010a2:	f107 0214 	add.w	r2, r7, #20
 80010a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010b0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80010b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80010ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010d2:	edd3 6a01 	vldr	s13, [r3, #4]
 80010d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010da:	edd3 7a01 	vldr	s15, [r3, #4]
 80010de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80010ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8001102:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001106:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001116:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800111a:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 800111e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001122:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 800112a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001134:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001136:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	105a      	asrs	r2, r3, #1
 800113e:	4b9a      	ldr	r3, [pc, #616]	; (80013a8 <FusionAhrsUpdate+0x478>)
 8001140:	1a9b      	subs	r3, r3, r2
 8001142:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001146:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001148:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001152:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001154:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001158:	ed93 7a00 	vldr	s14, [r3]
 800115c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001168:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001174:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001178:	ee37 7a67 	vsub.f32	s14, s14, s15
 800117c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001180:	edd3 7a00 	vldr	s15, [r3]
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800118c:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001190:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001194:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001196:	f207 4214 	addw	r2, r7, #1044	; 0x414
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011a0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011aa:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80011b4:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 80011b6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011ba:	ed93 7a00 	vldr	s14, [r3]
 80011be:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011ce:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80011d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80011da:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011ea:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80011ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80011f6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001202:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001206:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800120a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800120e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001212:	ca07      	ldmia	r2, {r0, r1, r2}
 8001214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001218:	f507 724a 	add.w	r2, r7, #808	; 0x328
 800121c:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8001220:	ca07      	ldmia	r2, {r0, r1, r2}
 8001222:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001226:	bf00      	nop
 8001228:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 800122c:	461c      	mov	r4, r3
 800122e:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8001232:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001236:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800123a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800123e:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8001242:	ca07      	ldmia	r2, {r0, r1, r2}
 8001244:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001248:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800124c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001250:	ca07      	ldmia	r2, {r0, r1, r2}
 8001252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001256:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800125a:	ed93 7a01 	vldr	s14, [r3, #4]
 800125e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001262:	edd3 7a02 	vldr	s15, [r3, #8]
 8001266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800126a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800126e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001272:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001276:	edd3 7a01 	vldr	s15, [r3, #4]
 800127a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001282:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001286:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 800128a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800128e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001292:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800129e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012a2:	edd3 6a00 	vldr	s13, [r3]
 80012a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012ba:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80012be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012c2:	ed93 7a00 	vldr	s14, [r3]
 80012c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012d6:	edd3 6a01 	vldr	s13, [r3, #4]
 80012da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012ee:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80012f2:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 80012f6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80012fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80012fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001300:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001304:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8001308:	ca07      	ldmia	r2, {r0, r1, r2}
 800130a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800130e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001312:	f107 0208 	add.w	r2, r7, #8
 8001316:	ca07      	ldmia	r2, {r0, r1, r2}
 8001318:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 800131c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001320:	ed93 7a00 	vldr	s14, [r3]
 8001324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001330:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001334:	edd3 6a01 	vldr	s13, [r3, #4]
 8001338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800133c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001350:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135c:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 8001360:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001364:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 8001368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001372:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001376:	ed93 7a00 	vldr	s14, [r3]
 800137a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	f100 8266 	bmi.w	8001852 <FusionAhrsUpdate+0x922>
 8001386:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001390:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001394:	ed93 7a00 	vldr	s14, [r3]
 8001398:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	f300 8257 	bgt.w	8001852 <FusionAhrsUpdate+0x922>
 80013a4:	e002      	b.n	80013ac <FusionAhrsUpdate+0x47c>
 80013a6:	bf00      	nop
 80013a8:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 80013ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	ed93 7a04 	vldr	s14, [r3, #16]
 80013b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80013c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80013ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80013d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80013e0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80013e4:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 80013e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80013f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80013fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001400:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001404:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	edd3 6a05 	vldr	s13, [r3, #20]
 8001412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	edd3 7a05 	vldr	s15, [r3, #20]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001424:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001428:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 800142c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	ed93 7a05 	vldr	s14, [r3, #20]
 8001436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	edd3 6a03 	vldr	s13, [r3, #12]
 800144e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	edd3 7a04 	vldr	s15, [r3, #16]
 8001458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145c:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001460:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001464:	edc3 7a02 	vstr	s15, [r3, #8]
 8001468:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800146c:	f107 0214 	add.w	r2, r7, #20
 8001470:	ca07      	ldmia	r2, {r0, r1, r2}
 8001472:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800147a:	f107 0208 	add.w	r2, r7, #8
 800147e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001480:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001484:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001488:	ed93 7a01 	vldr	s14, [r3, #4]
 800148c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001490:	edd3 7a02 	vldr	s15, [r3, #8]
 8001494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001498:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800149c:	edd3 6a02 	vldr	s13, [r3, #8]
 80014a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014b4:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 80014b8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80014bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80014c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014cc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80014d0:	edd3 6a00 	vldr	s13, [r3]
 80014d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80014dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80014e8:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80014ec:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80014f0:	ed93 7a00 	vldr	s14, [r3]
 80014f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80014fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001500:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001504:	edd3 6a01 	vldr	s13, [r3, #4]
 8001508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001518:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800151c:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001520:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001524:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001528:	ca07      	ldmia	r2, {r0, r1, r2}
 800152a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800152e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001532:	461c      	mov	r4, r3
 8001534:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001538:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800153c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001540:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001544:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8001548:	ca07      	ldmia	r2, {r0, r1, r2}
 800154a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800154e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001552:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001556:	ca07      	ldmia	r2, {r0, r1, r2}
 8001558:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 800155c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001570:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001574:	edd3 6a01 	vldr	s13, [r3, #4]
 8001578:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800157c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001588:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800158c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001590:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001594:	edd3 7a02 	vldr	s15, [r3, #8]
 8001598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a0:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80015a4:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 80015a8:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80015b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80015bc:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 80015c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015c4:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 80015cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015d6:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 80015d8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	105a      	asrs	r2, r3, #1
 80015e0:	4b99      	ldr	r3, [pc, #612]	; (8001848 <FusionAhrsUpdate+0x918>)
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80015e8:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 80015ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015f4:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 80015f6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015fa:	ed93 7a00 	vldr	s14, [r3]
 80015fe:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001616:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800161a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800161e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800162e:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001632:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001636:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001638:	f207 4204 	addw	r2, r7, #1028	; 0x404
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001642:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001646:	ca07      	ldmia	r2, {r0, r1, r2}
 8001648:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800164c:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8001656:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8001658:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800165c:	ed93 7a00 	vldr	s14, [r3]
 8001660:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001670:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001674:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001678:	ed93 7a01 	vldr	s14, [r3, #4]
 800167c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001688:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800168c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001690:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001694:	ed93 7a02 	vldr	s14, [r3, #8]
 8001698:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016a8:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80016ac:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80016b0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80016b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016ba:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80016be:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80016c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80016c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80016c8:	bf00      	nop
 80016ca:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80016ce:	461c      	mov	r4, r3
 80016d0:	f507 7359 	add.w	r3, r7, #868	; 0x364
 80016d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016dc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016e0:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 80016e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016ee:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80016f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80016f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001700:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001704:	edd3 7a02 	vldr	s15, [r3, #8]
 8001708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001710:	edd3 6a02 	vldr	s13, [r3, #8]
 8001714:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001718:	edd3 7a01 	vldr	s15, [r3, #4]
 800171c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001724:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001728:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 800172c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001730:	ed93 7a02 	vldr	s14, [r3, #8]
 8001734:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001740:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001744:	edd3 6a00 	vldr	s13, [r3]
 8001748:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800174c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001758:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800175c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001760:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001764:	ed93 7a00 	vldr	s14, [r3]
 8001768:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800176c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001774:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001778:	edd3 6a01 	vldr	s13, [r3, #4]
 800177c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001790:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001794:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001798:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 800179c:	ca07      	ldmia	r2, {r0, r1, r2}
 800179e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017a2:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80017a6:	461c      	mov	r4, r3
 80017a8:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80017ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017b8:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80017bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80017be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017c6:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 80017ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80017cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 80017d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017d4:	ed93 7a00 	vldr	s14, [r3]
 80017d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017e8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80017ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80017f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001804:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001808:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800180c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001810:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001814:	edd3 7a02 	vldr	s15, [r3, #8]
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001820:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001824:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001828:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800182c:	ca07      	ldmia	r2, {r0, r1, r2}
 800182e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001832:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001836:	461c      	mov	r4, r3
 8001838:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800183c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001840:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001844:	e005      	b.n	8001852 <FusionAhrsUpdate+0x922>
 8001846:	bf00      	nop
 8001848:	5f3759df 	.word	0x5f3759df
 800184c:	3c8efa35 	.word	0x3c8efa35
            break;
 8001850:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 8001852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	d105      	bne.n	8001872 <FusionAhrsUpdate+0x942>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 8001866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 8001872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800187e:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 8001880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800188a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	dd24      	ble.n	80018e8 <FusionAhrsUpdate+0x9b8>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 800189e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80018a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80018b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018c4:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80018c8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 80018da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	f207 4224 	addw	r2, r7, #1060	; 0x424
 80018e6:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 80018e8:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 800184c <FusionAhrsUpdate+0x91c>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 80018ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80018f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80018f8:	f107 0220 	add.w	r2, r7, #32
 80018fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80018fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001902:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 8001906:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800190a:	ed93 7a00 	vldr	s14, [r3]
 800190e:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001916:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800191a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800191e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001922:	ed93 7a01 	vldr	s14, [r3, #4]
 8001926:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800192a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001932:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001936:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800193a:	ed93 7a02 	vldr	s14, [r3, #8]
 800193e:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001946:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800194a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800194e:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8001952:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8001956:	ca07      	ldmia	r2, {r0, r1, r2}
 8001958:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800195c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001960:	461c      	mov	r4, r3
 8001962:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8001966:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800196a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800196e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001972:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8001976:	ca07      	ldmia	r2, {r0, r1, r2}
 8001978:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800197c:	f207 4324 	addw	r3, r7, #1060	; 0x424
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 8001986:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800198a:	ed93 7a00 	vldr	s14, [r3]
 800198e:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001996:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800199a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800199e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80019a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80019a6:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 80019aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ae:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80019b2:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80019b6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80019ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80019be:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 80019c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c6:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80019ca:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80019ce:	f507 7219 	add.w	r2, r7, #612	; 0x264
 80019d2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80019d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019dc:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 80019e0:	461c      	mov	r4, r3
 80019e2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80019e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80019ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019ee:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80019f2:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80019f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a00:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 8001a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001a0a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001a0e:	ed93 7a00 	vldr	s14, [r3]
 8001a12:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001a22:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001a26:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001a2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a2e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a32:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001a3e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001a42:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001a46:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a4a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a56:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001a5a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001a5e:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8001a62:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001a66:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a6c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001a70:	461c      	mov	r4, r3
 8001a72:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 8001a76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a7e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a82:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8001a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 8001a94:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001a98:	ed93 7a00 	vldr	s14, [r3]
 8001a9c:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001aac:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001ab0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ab4:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001ac0:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001ac4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001ac8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001acc:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001ad8:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001adc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001ae0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001ae4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001aea:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001aee:	461c      	mov	r4, r3
 8001af0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001af4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001af8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001afc:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4614      	mov	r4, r2
 8001b08:	330c      	adds	r3, #12
 8001b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b10:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b14:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8001b18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001b1e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b22:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b26:	eeb1 7a67 	vneg.f32	s14, s15
 8001b2a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b36:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b3a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b3e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b42:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b4e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b52:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b56:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 8001b6e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b82:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b86:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b8a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001b8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b9a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001b9e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ba2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001ba6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001bb6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8001bba:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bbe:	ed93 7a00 	vldr	s14, [r3]
 8001bc2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001bc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bce:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bd2:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bd6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001bda:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001be6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001bea:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bee:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfe:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001c02:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 8001c06:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c0a:	ed93 7a00 	vldr	s14, [r3]
 8001c0e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001c12:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c1e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c22:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001c26:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c32:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001c36:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c3a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001c4e:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001c52:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001c56:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8001c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c60:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001c64:	461c      	mov	r4, r3
 8001c66:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c70:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8001c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4614      	mov	r4, r2
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c84:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8001c88:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001c8c:	4614      	mov	r4, r2
 8001c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8001c94:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001c98:	ed93 7a00 	vldr	s14, [r3]
 8001c9c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001cac:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001cb0:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001cb4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cb8:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001cbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001cc8:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001ccc:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001cd0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cd4:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001cd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce0:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001ce4:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001ce8:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001cec:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cf0:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001cf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001d00:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001d04:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001d08:	f507 7466 	add.w	r4, r7, #920	; 0x398
 8001d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d12:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001d16:	461c      	mov	r4, r3
 8001d18:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001d1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 8001d22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8001d2c:	f103 040c 	add.w	r4, r3, #12
 8001d30:	4613      	mov	r3, r2
 8001d32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d38:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4614      	mov	r4, r2
 8001d44:	330c      	adds	r3, #12
 8001d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001d4c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d50:	ed93 7a00 	vldr	s14, [r3]
 8001d54:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d60:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d64:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d68:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d78:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d80:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d84:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d90:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d94:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d98:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 8001dac:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8001db0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db8:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 8001dbc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dc0:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8001dc4:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001dc6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001dd0:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001dd2:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	105a      	asrs	r2, r3, #1
 8001dda:	4b98      	ldr	r3, [pc, #608]	; (800203c <FusionAhrsUpdate+0x110c>)
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8001de2:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001de4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001dee:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001df0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001df4:	ed93 7a00 	vldr	s14, [r3]
 8001df8:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8001dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e00:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e14:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e20:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e24:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001e28:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001e2c:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001e2e:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8001e32:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e36:	ed93 7a00 	vldr	s14, [r3]
 8001e3a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e42:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e46:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8001e4a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e52:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e5e:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8001e62:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e66:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e6a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e72:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e76:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8001e7a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e82:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e8e:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 8001e92:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e96:	f507 7462 	add.w	r4, r7, #904	; 0x388
 8001e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ea0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001ea4:	461c      	mov	r4, r3
 8001ea6:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001eaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 8001eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8001eba:	f103 040c 	add.w	r4, r3, #12
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 8001ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ee8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efa:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001efe:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001f02:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8001f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	edd3 6a05 	vldr	s13, [r3, #20]
 8001f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001f3e:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001f42:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 8001f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f62:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f82:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001f86:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001f8a:	edc3 7a02 	vstr	s15, [r3, #8]
 8001f8e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001f92:	f107 0214 	add.w	r2, r7, #20
 8001f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f9c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001fa0:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8001fa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8001faa:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001fae:	ed93 7a00 	vldr	s14, [r3]
 8001fb2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fbe:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001fc2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8001fc6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001fca:	ed93 7a01 	vldr	s14, [r3, #4]
 8001fce:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001fd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fda:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001fde:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8001fe2:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001fe6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fea:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001fee:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001ffa:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001ffe:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8002002:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002006:	ca07      	ldmia	r2, {r0, r1, r2}
 8002008:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800200c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002010:	461c      	mov	r4, r3
 8002012:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8002016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800201a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 800201e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002028:	331c      	adds	r3, #28
 800202a:	ca07      	ldmia	r2, {r0, r1, r2}
 800202c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 8002030:	bf00      	nop
 8002032:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8002036:	46bd      	mov	sp, r7
 8002038:	bc90      	pop	{r4, r7}
 800203a:	4770      	bx	lr
 800203c:	5f3759df 	.word	0x5f3759df

08002040 <FusionAhrsUpdateWithoutMagnetometer>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdateWithoutMagnetometer(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const float samplePeriod) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	; 0x30
 8002044:	af00      	add	r7, sp, #0
 8002046:	61f8      	str	r0, [r7, #28]
 8002048:	eeb0 5a40 	vmov.f32	s10, s0
 800204c:	eef0 5a60 	vmov.f32	s11, s1
 8002050:	eeb0 6a41 	vmov.f32	s12, s2
 8002054:	eef0 6a61 	vmov.f32	s13, s3
 8002058:	eeb0 7a42 	vmov.f32	s14, s4
 800205c:	eef0 7a62 	vmov.f32	s15, s5
 8002060:	ed87 3a00 	vstr	s6, [r7]
 8002064:	ed87 5a04 	vstr	s10, [r7, #16]
 8002068:	edc7 5a05 	vstr	s11, [r7, #20]
 800206c:	ed87 6a06 	vstr	s12, [r7, #24]
 8002070:	edc7 6a01 	vstr	s13, [r7, #4]
 8002074:	ed87 7a02 	vstr	s14, [r7, #8]
 8002078:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(fusionAhrs, gyroscope, accelerometer, FUSION_VECTOR3_ZERO, samplePeriod);
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208e:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002092:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8002096:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 800209a:	ed97 5a01 	vldr	s10, [r7, #4]
 800209e:	edd7 5a02 	vldr	s11, [r7, #8]
 80020a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80020a6:	edd7 6a04 	vldr	s13, [r7, #16]
 80020aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80020ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80020b2:	edd7 4a00 	vldr	s9, [r7]
 80020b6:	eef0 1a45 	vmov.f32	s3, s10
 80020ba:	eeb0 2a65 	vmov.f32	s4, s11
 80020be:	eef0 2a46 	vmov.f32	s5, s12
 80020c2:	eeb0 0a66 	vmov.f32	s0, s13
 80020c6:	eef0 0a47 	vmov.f32	s1, s14
 80020ca:	eeb0 1a67 	vmov.f32	s2, s15
 80020ce:	69f8      	ldr	r0, [r7, #28]
 80020d0:	f7fe ff2e 	bl	8000f30 <FusionAhrsUpdate>

    // Zero yaw once initialisation complete
    if (FusionAhrsIsInitialising(fusionAhrs) == true) {
 80020d4:	69f8      	ldr	r0, [r7, #28]
 80020d6:	f000 f862 	bl	800219e <FusionAhrsIsInitialising>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <FusionAhrsUpdateWithoutMagnetometer+0xaa>
        fusionAhrs->zeroYawPending = true;
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        if (fusionAhrs->zeroYawPending == true) {
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
            fusionAhrs->zeroYawPending = false;
        }
    }
}
 80020e8:	e00d      	b.n	8002106 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
        if (fusionAhrs->zeroYawPending == true) {
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <FusionAhrsUpdateWithoutMagnetometer+0xc6>
            FusionAhrsSetYaw(fusionAhrs, 0.0f);
 80020f4:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002110 <FusionAhrsUpdateWithoutMagnetometer+0xd0>
 80020f8:	69f8      	ldr	r0, [r7, #28]
 80020fa:	f000 f869 	bl	80021d0 <FusionAhrsSetYaw>
            fusionAhrs->zeroYawPending = false;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8002106:	bf00      	nop
 8002108:	3730      	adds	r7, #48	; 0x30
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	00000000 	.word	0x00000000

08002114 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 8002114:	b490      	push	{r4, r7}
 8002116:	b096      	sub	sp, #88	; 0x58
 8002118:	af00      	add	r7, sp, #0
 800211a:	6178      	str	r0, [r7, #20]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002122:	330c      	adds	r3, #12
 8002124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 800212e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002132:	eef1 7a67 	vneg.f32	s15, s15
 8002136:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 800213a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800213e:	eef1 7a67 	vneg.f32	s15, s15
 8002142:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 8002146:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800214a:	eef1 7a67 	vneg.f32	s15, s15
 800214e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 8002152:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002156:	f107 0318 	add.w	r3, r7, #24
 800215a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800215c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002160:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002164:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 800216e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002170:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002176:	ee06 0a10 	vmov	s12, r0
 800217a:	ee06 1a90 	vmov	s13, r1
 800217e:	ee07 2a10 	vmov	s14, r2
 8002182:	ee07 3a90 	vmov	s15, r3
}
 8002186:	eeb0 0a46 	vmov.f32	s0, s12
 800218a:	eef0 0a66 	vmov.f32	s1, s13
 800218e:	eeb0 1a47 	vmov.f32	s2, s14
 8002192:	eef0 1a67 	vmov.f32	s3, s15
 8002196:	3758      	adds	r7, #88	; 0x58
 8002198:	46bd      	mov	sp, r7
 800219a:	bc90      	pop	{r4, r7}
 800219c:	4770      	bx	lr

0800219e <FusionAhrsIsInitialising>:
/**
 * @brief Returns true while the AHRS algorithm is initialising.
 * @param fusionAhrs AHRS algorithm structure.
 * @return True while the AHRS algorithm is initialising.
 */
bool FusionAhrsIsInitialising(const FusionAhrs * const fusionAhrs) {
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
    return fusionAhrs->rampedGain > fusionAhrs->gain;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ba:	bfcc      	ite	gt
 80021bc:	2301      	movgt	r3, #1
 80021be:	2300      	movle	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <FusionAhrsSetYaw>:
 * AHRS algorithm.  This function can be used to reset drift in yaw when the
 * AHRS algorithm is being used without a magnetometer.
 * @param fusionAhrs AHRS algorithm structure.
 * @param yaw Yaw angle in degrees.
 */
void FusionAhrsSetYaw(FusionAhrs * const fusionAhrs, const float yaw) {
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b0af      	sub	sp, #188	; 0xbc
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	ed87 0a00 	vstr	s0, [r7]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80021e2:	330c      	adds	r3, #12
 80021e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 80021ea:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80021ee:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80021f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f6:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80021fa:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80021fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002206:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800220a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800220e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002216:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800221a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800221e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	eeb0 0a67 	vmov.f32	s0, s15
 800222a:	f009 fc95 	bl	800bb58 <sqrtf>
 800222e:	eeb0 7a40 	vmov.f32	s14, s0
 8002232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800223a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 800223e:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002242:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 800224e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002252:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 800225e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002262:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 800226e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002272:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    return normalisedQuaternion;
 800227e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8002282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800228c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002290:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002294:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code
    fusionAhrs->quaternion = FusionQuaternionNormalise(fusionAhrs->quaternion); // quaternion must be normalised accurately (approximation not sufficient)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f103 040c 	add.w	r4, r3, #12
 80022a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    const float inverseYaw = atan2f(Q.x * Q.y + Q.w * Q.z, Q.w * Q.w - 0.5f + Q.x * Q.x); // Euler angle of conjugate
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80022b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	edd3 6a03 	vldr	s13, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee37 6a27 	vadd.f32	s12, s14, s15
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80022da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022e2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	edd3 6a04 	vldr	s13, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80022f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fa:	eef0 0a67 	vmov.f32	s1, s15
 80022fe:	eeb0 0a46 	vmov.f32	s0, s12
 8002302:	f009 fc27 	bl	800bb54 <atan2f>
 8002306:	ed87 0a2d 	vstr	s0, [r7, #180]	; 0xb4
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return degrees * ((float) M_PI / 180.0f);
 8002310:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002314:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80024b4 <FusionAhrsSetYaw+0x2e4>
 8002318:	ee67 7a87 	vmul.f32	s15, s15, s14
    const float halfInverseYawMinusOffset = 0.5f * (inverseYaw - FusionDegreesToRadians(yaw));
 800231c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002324:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    const FusionQuaternion inverseYawQuaternion = {
        .element.w = cosf(halfInverseYawMinusOffset),
 8002330:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8002334:	f009 fb34 	bl	800b9a0 <cosf>
 8002338:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion inverseYawQuaternion = {
 800233c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        .element.x = 0.0f,
        .element.y = 0.0f,
        .element.z = -1.0f * sinf(halfInverseYawMinusOffset),
 800234e:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8002352:	f009 fb8b 	bl	800ba6c <sinf>
 8002356:	eef0 7a40 	vmov.f32	s15, s0
 800235a:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion inverseYawQuaternion = {
 800235e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
 8002362:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002366:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800236a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800236c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002376:	330c      	adds	r3, #12
 8002378:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800237a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 800237e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002382:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800238e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002396:	ee37 7a67 	vsub.f32	s14, s14, s15
 800239a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800239e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023aa:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80023ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ba:	edc7 7a02 	vstr	s15, [r7, #8]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 80023be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80023c2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ca:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80023ce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023da:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80023de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80023e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ea:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80023ee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80023f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023fa:	edc7 7a03 	vstr	s15, [r7, #12]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 80023fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002402:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800240a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800240e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002416:	ee37 7a67 	vsub.f32	s14, s14, s15
 800241a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800241e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002426:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800242e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243a:	edc7 7a04 	vstr	s15, [r7, #16]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 800243e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002442:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800244a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800244e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800245e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002466:	ee37 7a67 	vsub.f32	s14, s14, s15
 800246a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800246e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247a:	edc7 7a05 	vstr	s15, [r7, #20]
    return result;
 800247e:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8002482:	f107 0308 	add.w	r3, r7, #8
 8002486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800248c:	f107 0418 	add.w	r4, r7, #24
 8002490:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002494:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002496:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    };
    fusionAhrs->quaternion = FusionQuaternionMultiply(inverseYawQuaternion, fusionAhrs->quaternion);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f103 040c 	add.w	r4, r3, #12
 80024a0:	f107 0318 	add.w	r3, r7, #24
 80024a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#undef Q // undefine shorthand label
}
 80024aa:	bf00      	nop
 80024ac:	37bc      	adds	r7, #188	; 0xbc
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd90      	pop	{r4, r7, pc}
 80024b2:	bf00      	nop
 80024b4:	3c8efa35 	.word	0x3c8efa35

080024b8 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80024c4:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe f82d 	bl	8000538 <__aeabi_f2d>
 80024de:	a312      	add	r3, pc, #72	; (adr r3, 8002528 <FusionBiasInitialise+0x70>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	f7fe f880 	bl	80005e8 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7fe fb14 	bl	8000b1c <__aeabi_d2f>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
}
 800251a:	bf00      	nop
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	f3af 8000 	nop.w
 8002528:	8c0eff43 	.word	0x8c0eff43
 800252c:	3fc015bf 	.word	0x3fc015bf

08002530 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 8002530:	b490      	push	{r4, r7}
 8002532:	b0b4      	sub	sp, #208	; 0xd0
 8002534:	af00      	add	r7, sp, #0
 8002536:	61f8      	str	r0, [r7, #28]
 8002538:	eef0 6a40 	vmov.f32	s13, s0
 800253c:	eeb0 7a60 	vmov.f32	s14, s1
 8002540:	eef0 7a41 	vmov.f32	s15, s2
 8002544:	edc7 6a04 	vstr	s13, [r7, #16]
 8002548:	ed87 7a05 	vstr	s14, [r7, #20]
 800254c:	edc7 7a06 	vstr	s15, [r7, #24]
 8002550:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002554:	f107 0210 	add.w	r2, r7, #16
 8002558:	ca07      	ldmia	r2, {r0, r1, r2}
 800255a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002564:	3210      	adds	r2, #16
 8002566:	ca07      	ldmia	r2, {r0, r1, r2}
 8002568:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 800256c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002570:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002578:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 800257c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002580:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002588:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800258c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002590:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002598:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 800259c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80025a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80025a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80025b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 80025b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80025bc:	eeb0 7ae7 	vabs.f32	s14, s15
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ce:	dc17      	bgt.n	8002600 <FusionBiasUpdate+0xd0>
 80025d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025d4:	eeb0 7ae7 	vabs.f32	s14, s15
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	dc0b      	bgt.n	8002600 <FusionBiasUpdate+0xd0>
 80025e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	dd0b      	ble.n	8002618 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8002608:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800260c:	f107 0210 	add.w	r2, r7, #16
 8002610:	ca07      	ldmia	r2, {r0, r1, r2}
 8002612:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002616:	e08f      	b.n	8002738 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	edd3 7a03 	vldr	s15, [r3, #12]
 800261e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	d512      	bpl.n	8002652 <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	edd3 7a01 	vldr	s15, [r3, #4]
 8002638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 8002642:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002646:	f107 0210 	add.w	r2, r7, #16
 800264a:	ca07      	ldmia	r2, {r0, r1, r2}
 800264c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002650:	e072      	b.n	8002738 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	689c      	ldr	r4, [r3, #8]
 8002656:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800265a:	f107 0210 	add.w	r2, r7, #16
 800265e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002660:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002664:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 8002668:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800266c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002674:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 8002678:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800267c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002684:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 8002688:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800268c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002694:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 8002698:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800269c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80026a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026aa:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80026ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80026b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80026ba:	3210      	adds	r2, #16
 80026bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80026be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026c6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80026ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80026cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 80026d0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80026d4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80026d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 80026e0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80026e4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80026e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ec:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80026f0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80026f4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80026f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 8002700:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002704:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002708:	ca07      	ldmia	r2, {r0, r1, r2}
 800270a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800270e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002712:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002716:	ca07      	ldmia	r2, {r0, r1, r2}
 8002718:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	3310      	adds	r3, #16
 8002720:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002724:	ca07      	ldmia	r2, {r0, r1, r2}
 8002726:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 800272a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800272e:	f107 0210 	add.w	r2, r7, #16
 8002732:	ca07      	ldmia	r2, {r0, r1, r2}
 8002734:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002738:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800273c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002744:	ee06 1a90 	vmov	s13, r1
 8002748:	ee07 2a10 	vmov	s14, r2
 800274c:	ee07 3a90 	vmov	s15, r3
}
 8002750:	eeb0 0a66 	vmov.f32	s0, s13
 8002754:	eef0 0a47 	vmov.f32	s1, s14
 8002758:	eeb0 1a67 	vmov.f32	s2, s15
 800275c:	37d0      	adds	r7, #208	; 0xd0
 800275e:	46bd      	mov	sp, r7
 8002760:	bc90      	pop	{r4, r7}
 8002762:	4770      	bx	lr

08002764 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8002768:	bf00      	nop
 800276a:	f000 f91f 	bl	80029ac <icm20948_who_am_i>
 800276e:	4603      	mov	r3, r0
 8002770:	f083 0301 	eor.w	r3, r3, #1
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f7      	bne.n	800276a <icm20948_init+0x6>

	icm20948_device_reset();
 800277a:	f000 f93c 	bl	80029f6 <icm20948_device_reset>
	icm20948_wakeup();
 800277e:	f000 f951 	bl	8002a24 <icm20948_wakeup>

	icm20948_clock_source(1);
 8002782:	2001      	movs	r0, #1
 8002784:	f000 f9c9 	bl	8002b1a <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002788:	f000 f9e0 	bl	8002b4c <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 800278c:	f000 f964 	bl	8002a58 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8002790:	2000      	movs	r0, #0
 8002792:	f000 f9e4 	bl	8002b5e <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002796:	2000      	movs	r0, #0
 8002798:	f000 f9fe 	bl	8002b98 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 800279c:	2000      	movs	r0, #0
 800279e:	f000 fa18 	bl	8002bd2 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f000 fa24 	bl	8002bf0 <icm20948_accel_sample_rate_divider>

	//icm20948_gyro_calibration();
	//icm20948_accel_calibration();

	icm20948_gyro_full_scale_select(_2000dps);
 80027a8:	2003      	movs	r0, #3
 80027aa:	f000 fa51 	bl	8002c50 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_2g);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f000 fa98 	bl	8002ce4 <icm20948_accel_full_scale_select>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <ak09916_init>:

void ak09916_init()
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 80027bc:	f000 f963 	bl	8002a86 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 80027c0:	f000 f978 	bl	8002ab4 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 80027c4:	2007      	movs	r0, #7
 80027c6:	f000 f98f 	bl	8002ae8 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 80027ca:	bf00      	nop
 80027cc:	f000 f901 	bl	80029d2 <ak09916_who_am_i>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f083 0301 	eor.w	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f7      	bne.n	80027cc <ak09916_init+0x14>

	ak09916_soft_reset();
 80027dc:	f000 f917 	bl	8002a0e <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 80027e0:	2008      	movs	r0, #8
 80027e2:	f000 fa23 	bl	8002c2c <ak09916_operation_mode_setting>
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}

080027ea <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 80027f2:	2206      	movs	r2, #6
 80027f4:	2133      	movs	r1, #51	; 0x33
 80027f6:	2000      	movs	r0, #0
 80027f8:	f000 fb3c 	bl	8002e74 <read_multiple_icm20948_reg>
 80027fc:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	b21a      	sxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3301      	adds	r3, #1
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	b21b      	sxth	r3, r3
 800280e:	4313      	orrs	r3, r2
 8002810:	b21b      	sxth	r3, r3
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3302      	adds	r3, #2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	b21a      	sxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3303      	adds	r3, #3
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	b21b      	sxth	r3, r3
 8002832:	4313      	orrs	r3, r2
 8002834:	b21b      	sxth	r3, r3
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3304      	adds	r3, #4
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	b21a      	sxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3305      	adds	r3, #5
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b21b      	sxth	r3, r3
 8002856:	4313      	orrs	r3, r2
 8002858:	b21b      	sxth	r3, r3
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8002878:	2206      	movs	r2, #6
 800287a:	212d      	movs	r1, #45	; 0x2d
 800287c:	2000      	movs	r0, #0
 800287e:	f000 faf9 	bl	8002e74 <read_multiple_icm20948_reg>
 8002882:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | (temp[1]));
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	b21a      	sxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3301      	adds	r3, #1
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b21b      	sxth	r3, r3
 8002894:	4313      	orrs	r3, r2
 8002896:	b21b      	sxth	r3, r3
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | (temp[3]));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3302      	adds	r3, #2
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3303      	adds	r3, #3
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	4313      	orrs	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	ee07 3a90 	vmov	s15, r3
 80028c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | (temp[5]));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3304      	adds	r3, #4
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	b21a      	sxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3305      	adds	r3, #5
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b21b      	sxth	r3, r3
 80028dc:	4313      	orrs	r3, r2
 80028de:	b21b      	sxth	r3, r3
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add scale factor because calibraiton function offset gravity acceleration.
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 80028fe:	2010      	movs	r0, #16
 8002900:	f000 fae8 	bl	8002ed4 <read_single_ak09916_reg>
 8002904:	4603      	mov	r3, r0
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <ak09916_mag_read+0x20>
 8002912:	2300      	movs	r3, #0
 8002914:	e046      	b.n	80029a4 <ak09916_mag_read+0xae>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8002916:	2106      	movs	r1, #6
 8002918:	2011      	movs	r0, #17
 800291a:	f000 fb1e 	bl	8002f5a <read_multiple_ak09916_reg>
 800291e:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8002920:	2018      	movs	r0, #24
 8002922:	f000 fad7 	bl	8002ed4 <read_single_ak09916_reg>
 8002926:	4603      	mov	r3, r0
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <ak09916_mag_read+0x42>
 8002934:	2300      	movs	r3, #0
 8002936:	e035      	b.n	80029a4 <ak09916_mag_read+0xae>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	3301      	adds	r3, #1
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	b21a      	sxth	r2, r3
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b21b      	sxth	r3, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	b21b      	sxth	r3, r3
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	3303      	adds	r3, #3
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	b21a      	sxth	r2, r3
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	3302      	adds	r3, #2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	b21b      	sxth	r3, r3
 800296c:	4313      	orrs	r3, r2
 800296e:	b21b      	sxth	r3, r3
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	3305      	adds	r3, #5
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	b21a      	sxth	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	3304      	adds	r3, #4
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	b21b      	sxth	r3, r3
 8002990:	4313      	orrs	r3, r2
 8002992:	b21b      	sxth	r3, r3
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	edc3 7a02 	vstr	s15, [r3, #8]

	return true;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 80029b2:	2100      	movs	r1, #0
 80029b4:	2000      	movs	r0, #0
 80029b6:	f000 fa0d 	bl	8002dd4 <read_single_icm20948_reg>
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	2bea      	cmp	r3, #234	; 0xea
 80029c2:	d101      	bne.n	80029c8 <icm20948_who_am_i+0x1c>
		return true;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <icm20948_who_am_i+0x1e>
	else
		return false;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 80029d8:	2001      	movs	r0, #1
 80029da:	f000 fa7b 	bl	8002ed4 <read_single_ak09916_reg>
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	2b09      	cmp	r3, #9
 80029e6:	d101      	bne.n	80029ec <ak09916_who_am_i+0x1a>
		return true;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <ak09916_who_am_i+0x1c>
	else
		return false;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <icm20948_device_reset>:

void icm20948_device_reset()
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 80029fa:	22c1      	movs	r2, #193	; 0xc1
 80029fc:	2106      	movs	r1, #6
 80029fe:	2000      	movs	r0, #0
 8002a00:	f000 fa14 	bl	8002e2c <write_single_icm20948_reg>
	HAL_Delay(100);
 8002a04:	2064      	movs	r0, #100	; 0x64
 8002a06:	f004 f829 	bl	8006a5c <HAL_Delay>
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8002a12:	2101      	movs	r1, #1
 8002a14:	2032      	movs	r0, #50	; 0x32
 8002a16:	f000 fa7e 	bl	8002f16 <write_single_ak09916_reg>
	HAL_Delay(100);
 8002a1a:	2064      	movs	r0, #100	; 0x64
 8002a1c:	f004 f81e 	bl	8006a5c <HAL_Delay>
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002a2a:	2106      	movs	r1, #6
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f000 f9d1 	bl	8002dd4 <read_single_icm20948_reg>
 8002a32:	4603      	mov	r3, r0
 8002a34:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a3c:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	461a      	mov	r2, r3
 8002a42:	2106      	movs	r1, #6
 8002a44:	2000      	movs	r0, #0
 8002a46:	f000 f9f1 	bl	8002e2c <write_single_icm20948_reg>
	HAL_Delay(100);
 8002a4a:	2064      	movs	r0, #100	; 0x64
 8002a4c:	f004 f806 	bl	8006a5c <HAL_Delay>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002a5e:	2103      	movs	r1, #3
 8002a60:	2000      	movs	r0, #0
 8002a62:	f000 f9b7 	bl	8002dd4 <read_single_icm20948_reg>
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	f043 0310 	orr.w	r3, r3, #16
 8002a70:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	461a      	mov	r2, r3
 8002a76:	2103      	movs	r1, #3
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f000 f9d7 	bl	8002e2c <write_single_icm20948_reg>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002a8c:	2103      	movs	r1, #3
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f000 f9a0 	bl	8002dd4 <read_single_icm20948_reg>
 8002a94:	4603      	mov	r3, r0
 8002a96:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	f043 0302 	orr.w	r3, r3, #2
 8002a9e:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2103      	movs	r1, #3
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f000 f9c0 	bl	8002e2c <write_single_icm20948_reg>
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002aba:	2103      	movs	r1, #3
 8002abc:	2000      	movs	r0, #0
 8002abe:	f000 f989 	bl	8002dd4 <read_single_icm20948_reg>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	f043 0320 	orr.w	r3, r3, #32
 8002acc:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2103      	movs	r1, #3
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f000 f9a9 	bl	8002e2c <write_single_icm20948_reg>
	HAL_Delay(100);
 8002ada:	2064      	movs	r0, #100	; 0x64
 8002adc:	f003 ffbe 	bl	8006a5c <HAL_Delay>
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8002af2:	2101      	movs	r1, #1
 8002af4:	2030      	movs	r0, #48	; 0x30
 8002af6:	f000 f96d 	bl	8002dd4 <read_single_icm20948_reg>
 8002afa:	4603      	mov	r3, r0
 8002afc:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	2030      	movs	r0, #48	; 0x30
 8002b0e:	f000 f98d 	bl	8002e2c <write_single_icm20948_reg>
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	4603      	mov	r3, r0
 8002b22:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002b24:	2106      	movs	r1, #6
 8002b26:	2000      	movs	r0, #0
 8002b28:	f000 f954 	bl	8002dd4 <read_single_icm20948_reg>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2106      	movs	r1, #6
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f000 f974 	bl	8002e2c <write_single_icm20948_reg>
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8002b50:	2201      	movs	r2, #1
 8002b52:	2109      	movs	r1, #9
 8002b54:	2020      	movs	r0, #32
 8002b56:	f000 f969 	bl	8002e2c <write_single_icm20948_reg>
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8002b68:	2101      	movs	r1, #1
 8002b6a:	2020      	movs	r0, #32
 8002b6c:	f000 f932 	bl	8002dd4 <read_single_icm20948_reg>
 8002b70:	4603      	mov	r3, r0
 8002b72:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	b25a      	sxtb	r2, r3
 8002b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	461a      	mov	r2, r3
 8002b88:	2101      	movs	r1, #1
 8002b8a:	2020      	movs	r0, #32
 8002b8c:	f000 f94e 	bl	8002e2c <write_single_icm20948_reg>
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002ba2:	2114      	movs	r1, #20
 8002ba4:	2020      	movs	r0, #32
 8002ba6:	f000 f915 	bl	8002dd4 <read_single_icm20948_reg>
 8002baa:	4603      	mov	r3, r0
 8002bac:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	b25a      	sxtb	r2, r3
 8002bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	2020      	movs	r0, #32
 8002bc6:	f000 f931 	bl	8002e2c <write_single_icm20948_reg>
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	461a      	mov	r2, r3
 8002be0:	2100      	movs	r1, #0
 8002be2:	2020      	movs	r0, #32
 8002be4:	f000 f922 	bl	8002e2c <write_single_icm20948_reg>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2110      	movs	r1, #16
 8002c12:	2020      	movs	r0, #32
 8002c14:	f000 f90a 	bl	8002e2c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8002c18:	7bbb      	ldrb	r3, [r7, #14]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2111      	movs	r1, #17
 8002c1e:	2020      	movs	r0, #32
 8002c20:	f000 f904 	bl	8002e2c <write_single_icm20948_reg>
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	2031      	movs	r0, #49	; 0x31
 8002c3c:	f000 f96b 	bl	8002f16 <write_single_ak09916_reg>
	HAL_Delay(100);
 8002c40:	2064      	movs	r0, #100	; 0x64
 8002c42:	f003 ff0b 	bl	8006a5c <HAL_Delay>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <icm20948_gyro_full_scale_select>:
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
}

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	2020      	movs	r0, #32
 8002c5e:	f000 f8b9 	bl	8002dd4 <read_single_icm20948_reg>
 8002c62:	4603      	mov	r3, r0
 8002c64:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d827      	bhi.n	8002cbc <icm20948_gyro_full_scale_select+0x6c>
 8002c6c:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <icm20948_gyro_full_scale_select+0x24>)
 8002c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c72:	bf00      	nop
 8002c74:	08002c85 	.word	0x08002c85
 8002c78:	08002c8d 	.word	0x08002c8d
 8002c7c:	08002c9d 	.word	0x08002c9d
 8002c80:	08002cad 	.word	0x08002cad
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8002c84:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <icm20948_gyro_full_scale_select+0x80>)
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <icm20948_gyro_full_scale_select+0x84>)
 8002c88:	601a      	str	r2, [r3, #0]
			break;
 8002c8a:	e017      	b.n	8002cbc <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	f043 0302 	orr.w	r3, r3, #2
 8002c92:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8002c94:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <icm20948_gyro_full_scale_select+0x80>)
 8002c96:	4a10      	ldr	r2, [pc, #64]	; (8002cd8 <icm20948_gyro_full_scale_select+0x88>)
 8002c98:	601a      	str	r2, [r3, #0]
			break;
 8002c9a:	e00f      	b.n	8002cbc <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <icm20948_gyro_full_scale_select+0x80>)
 8002ca6:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <icm20948_gyro_full_scale_select+0x8c>)
 8002ca8:	601a      	str	r2, [r3, #0]
			break;
 8002caa:	e007      	b.n	8002cbc <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	f043 0306 	orr.w	r3, r3, #6
 8002cb2:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <icm20948_gyro_full_scale_select+0x80>)
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <icm20948_gyro_full_scale_select+0x90>)
 8002cb8:	601a      	str	r2, [r3, #0]
			break;
 8002cba:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	2020      	movs	r0, #32
 8002cc4:	f000 f8b2 	bl	8002e2c <write_single_icm20948_reg>
}
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	200000ac 	.word	0x200000ac
 8002cd4:	43030000 	.word	0x43030000
 8002cd8:	42830000 	.word	0x42830000
 8002cdc:	42033333 	.word	0x42033333
 8002ce0:	41833333 	.word	0x41833333

08002ce4 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002cee:	2114      	movs	r1, #20
 8002cf0:	2020      	movs	r0, #32
 8002cf2:	f000 f86f 	bl	8002dd4 <read_single_icm20948_reg>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d82b      	bhi.n	8002d58 <icm20948_accel_full_scale_select+0x74>
 8002d00:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <icm20948_accel_full_scale_select+0x24>)
 8002d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d06:	bf00      	nop
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002d23 	.word	0x08002d23
 8002d10:	08002d35 	.word	0x08002d35
 8002d14:	08002d47 	.word	0x08002d47
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <icm20948_accel_full_scale_select+0x88>)
 8002d1a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8002d1e:	601a      	str	r2, [r3, #0]
			break;
 8002d20:	e01a      	b.n	8002d58 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <icm20948_accel_full_scale_select+0x88>)
 8002d2c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002d30:	601a      	str	r2, [r3, #0]
			break;
 8002d32:	e011      	b.n	8002d58 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <icm20948_accel_full_scale_select+0x88>)
 8002d3e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002d42:	601a      	str	r2, [r3, #0]
			break;
 8002d44:	e008      	b.n	8002d58 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	f043 0306 	orr.w	r3, r3, #6
 8002d4c:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <icm20948_accel_full_scale_select+0x88>)
 8002d50:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002d54:	601a      	str	r2, [r3, #0]
			break;
 8002d56:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2114      	movs	r1, #20
 8002d5e:	2020      	movs	r0, #32
 8002d60:	f000 f864 	bl	8002e2c <write_single_icm20948_reg>
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200000b0 	.word	0x200000b0

08002d70 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8002d74:	2201      	movs	r2, #1
 8002d76:	2104      	movs	r1, #4
 8002d78:	4802      	ldr	r0, [pc, #8]	; (8002d84 <cs_high+0x14>)
 8002d7a:	f005 f95b 	bl	8008034 <HAL_GPIO_WritePin>
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000

08002d88 <cs_low>:

static void cs_low()
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2104      	movs	r1, #4
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <cs_low+0x14>)
 8002d92:	f005 f94f 	bl	8008034 <HAL_GPIO_WritePin>
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000

08002da0 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8002daa:	237f      	movs	r3, #127	; 0x7f
 8002dac:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	737b      	strb	r3, [r7, #13]

	cs_low();
 8002db2:	f7ff ffe9 	bl	8002d88 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8002db6:	f107 010c 	add.w	r1, r7, #12
 8002dba:	230a      	movs	r3, #10
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	4804      	ldr	r0, [pc, #16]	; (8002dd0 <select_user_bank+0x30>)
 8002dc0:	f005 fe69 	bl	8008a96 <HAL_SPI_Transmit>
	cs_high();
 8002dc4:	f7ff ffd4 	bl	8002d70 <cs_high>
}
 8002dc8:	bf00      	nop
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000e54 	.word	0x20000e54

08002dd4 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	460a      	mov	r2, r1
 8002dde:	71fb      	strb	r3, [r7, #7]
 8002de0:	4613      	mov	r3, r2
 8002de2:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8002de4:	79bb      	ldrb	r3, [r7, #6]
 8002de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ffd5 	bl	8002da0 <select_user_bank>

	cs_low();
 8002df6:	f7ff ffc7 	bl	8002d88 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002dfa:	f107 010f 	add.w	r1, r7, #15
 8002dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e02:	2201      	movs	r2, #1
 8002e04:	4808      	ldr	r0, [pc, #32]	; (8002e28 <read_single_icm20948_reg+0x54>)
 8002e06:	f005 fe46 	bl	8008a96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8002e0a:	f107 010e 	add.w	r1, r7, #14
 8002e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e12:	2201      	movs	r2, #1
 8002e14:	4804      	ldr	r0, [pc, #16]	; (8002e28 <read_single_icm20948_reg+0x54>)
 8002e16:	f005 ff7a 	bl	8008d0e <HAL_SPI_Receive>
	cs_high();
 8002e1a:	f7ff ffa9 	bl	8002d70 <cs_high>

	return reg_val;
 8002e1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000e54 	.word	0x20000e54

08002e2c <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
 8002e36:	460b      	mov	r3, r1
 8002e38:	71bb      	strb	r3, [r7, #6]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8002e3e:	79bb      	ldrb	r3, [r7, #6]
 8002e40:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8002e42:	797b      	ldrb	r3, [r7, #5]
 8002e44:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ffa9 	bl	8002da0 <select_user_bank>

	cs_low();
 8002e4e:	f7ff ff9b 	bl	8002d88 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8002e52:	f107 010c 	add.w	r1, r7, #12
 8002e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	4804      	ldr	r0, [pc, #16]	; (8002e70 <write_single_icm20948_reg+0x44>)
 8002e5e:	f005 fe1a 	bl	8008a96 <HAL_SPI_Transmit>
	cs_high();
 8002e62:	f7ff ff85 	bl	8002d70 <cs_high>
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000e54 	.word	0x20000e54

08002e74 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	71bb      	strb	r3, [r7, #6]
 8002e82:	4613      	mov	r3, r2
 8002e84:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 8002e86:	79bb      	ldrb	r3, [r7, #6]
 8002e88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff84 	bl	8002da0 <select_user_bank>

	cs_low();
 8002e98:	f7ff ff76 	bl	8002d88 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002e9c:	f107 010f 	add.w	r1, r7, #15
 8002ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	4809      	ldr	r0, [pc, #36]	; (8002ecc <read_multiple_icm20948_reg+0x58>)
 8002ea8:	f005 fdf5 	bl	8008a96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8002eac:	797b      	ldrb	r3, [r7, #5]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb4:	4906      	ldr	r1, [pc, #24]	; (8002ed0 <read_multiple_icm20948_reg+0x5c>)
 8002eb6:	4805      	ldr	r0, [pc, #20]	; (8002ecc <read_multiple_icm20948_reg+0x58>)
 8002eb8:	f005 ff29 	bl	8008d0e <HAL_SPI_Receive>
	cs_high();
 8002ebc:	f7ff ff58 	bl	8002d70 <cs_high>

	return reg_val;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <read_multiple_icm20948_reg+0x5c>)
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000e54 	.word	0x20000e54
 8002ed0:	200000b4 	.word	0x200000b4

08002ed4 <read_single_ak09916_reg>:
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
	cs_high();
}

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8002ede:	228c      	movs	r2, #140	; 0x8c
 8002ee0:	2103      	movs	r1, #3
 8002ee2:	2030      	movs	r0, #48	; 0x30
 8002ee4:	f7ff ffa2 	bl	8002e2c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	461a      	mov	r2, r3
 8002eec:	2104      	movs	r1, #4
 8002eee:	2030      	movs	r0, #48	; 0x30
 8002ef0:	f7ff ff9c 	bl	8002e2c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8002ef4:	2281      	movs	r2, #129	; 0x81
 8002ef6:	2105      	movs	r1, #5
 8002ef8:	2030      	movs	r0, #48	; 0x30
 8002efa:	f7ff ff97 	bl	8002e2c <write_single_icm20948_reg>

	HAL_Delay(1);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f003 fdac 	bl	8006a5c <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8002f04:	213b      	movs	r1, #59	; 0x3b
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7ff ff64 	bl	8002dd4 <read_single_icm20948_reg>
 8002f0c:	4603      	mov	r3, r0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	460a      	mov	r2, r1
 8002f20:	71fb      	strb	r3, [r7, #7]
 8002f22:	4613      	mov	r3, r2
 8002f24:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8002f26:	220c      	movs	r2, #12
 8002f28:	2103      	movs	r1, #3
 8002f2a:	2030      	movs	r0, #48	; 0x30
 8002f2c:	f7ff ff7e 	bl	8002e2c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	461a      	mov	r2, r3
 8002f34:	2104      	movs	r1, #4
 8002f36:	2030      	movs	r0, #48	; 0x30
 8002f38:	f7ff ff78 	bl	8002e2c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8002f3c:	79bb      	ldrb	r3, [r7, #6]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2106      	movs	r1, #6
 8002f42:	2030      	movs	r0, #48	; 0x30
 8002f44:	f7ff ff72 	bl	8002e2c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8002f48:	2281      	movs	r2, #129	; 0x81
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	2030      	movs	r0, #48	; 0x30
 8002f4e:	f7ff ff6d 	bl	8002e2c <write_single_icm20948_reg>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	460a      	mov	r2, r1
 8002f64:	71fb      	strb	r3, [r7, #7]
 8002f66:	4613      	mov	r3, r2
 8002f68:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8002f6a:	228c      	movs	r2, #140	; 0x8c
 8002f6c:	2103      	movs	r1, #3
 8002f6e:	2030      	movs	r0, #48	; 0x30
 8002f70:	f7ff ff5c 	bl	8002e2c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	461a      	mov	r2, r3
 8002f78:	2104      	movs	r1, #4
 8002f7a:	2030      	movs	r0, #48	; 0x30
 8002f7c:	f7ff ff56 	bl	8002e2c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8002f80:	79bb      	ldrb	r3, [r7, #6]
 8002f82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2105      	movs	r1, #5
 8002f8c:	2030      	movs	r0, #48	; 0x30
 8002f8e:	f7ff ff4d 	bl	8002e2c <write_single_icm20948_reg>

	HAL_Delay(1);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f003 fd62 	bl	8006a5c <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8002f98:	79bb      	ldrb	r3, [r7, #6]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	213b      	movs	r1, #59	; 0x3b
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7ff ff68 	bl	8002e74 <read_multiple_icm20948_reg>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fb6:	463b      	mov	r3, r7
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002fc2:	4b21      	ldr	r3, [pc, #132]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fc4:	4a21      	ldr	r2, [pc, #132]	; (800304c <MX_ADC1_Init+0x9c>)
 8002fc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <MX_ADC1_Init+0x98>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <MX_ADC1_Init+0x98>)
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <MX_ADC1_Init+0xa0>)
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <MX_ADC1_Init+0x98>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <MX_ADC1_Init+0x98>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <MX_ADC1_Init+0x98>)
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <MX_ADC1_Init+0x98>)
 800300c:	2201      	movs	r2, #1
 800300e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003010:	480d      	ldr	r0, [pc, #52]	; (8003048 <MX_ADC1_Init+0x98>)
 8003012:	f003 fd47 	bl	8006aa4 <HAL_ADC_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800301c:	f002 fd9e 	bl	8005b5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003020:	2308      	movs	r3, #8
 8003022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003024:	2301      	movs	r3, #1
 8003026:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003028:	2300      	movs	r3, #0
 800302a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800302c:	463b      	mov	r3, r7
 800302e:	4619      	mov	r1, r3
 8003030:	4805      	ldr	r0, [pc, #20]	; (8003048 <MX_ADC1_Init+0x98>)
 8003032:	f003 ff19 	bl	8006e68 <HAL_ADC_ConfigChannel>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800303c:	f002 fd8e 	bl	8005b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000be8 	.word	0x20000be8
 800304c:	40012000 	.word	0x40012000
 8003050:	0f000001 	.word	0x0f000001

08003054 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	; 0x30
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 031c 	add.w	r3, r7, #28
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a31      	ldr	r2, [pc, #196]	; (8003138 <HAL_ADC_MspInit+0xe4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d15b      	bne.n	800312e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	4b30      	ldr	r3, [pc, #192]	; (800313c <HAL_ADC_MspInit+0xe8>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a2f      	ldr	r2, [pc, #188]	; (800313c <HAL_ADC_MspInit+0xe8>)
 8003080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_ADC_MspInit+0xe8>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	4b29      	ldr	r3, [pc, #164]	; (800313c <HAL_ADC_MspInit+0xe8>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a28      	ldr	r2, [pc, #160]	; (800313c <HAL_ADC_MspInit+0xe8>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	4b22      	ldr	r3, [pc, #136]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a21      	ldr	r2, [pc, #132]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b1f      	ldr	r3, [pc, #124]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	4a1a      	ldr	r2, [pc, #104]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	6313      	str	r3, [r2, #48]	; 0x30
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_ADC_MspInit+0xe8>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_6_Pin|ADC_7_Pin|ADC_8_Pin;
 80030e6:	2307      	movs	r3, #7
 80030e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030ea:	2303      	movs	r3, #3
 80030ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f2:	f107 031c 	add.w	r3, r7, #28
 80030f6:	4619      	mov	r1, r3
 80030f8:	4811      	ldr	r0, [pc, #68]	; (8003140 <HAL_ADC_MspInit+0xec>)
 80030fa:	f004 fde7 	bl	8007ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|ADC_2_Pin|ADC_3_Pin;
 80030fe:	2307      	movs	r3, #7
 8003100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003102:	2303      	movs	r3, #3
 8003104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310a:	f107 031c 	add.w	r3, r7, #28
 800310e:	4619      	mov	r1, r3
 8003110:	480c      	ldr	r0, [pc, #48]	; (8003144 <HAL_ADC_MspInit+0xf0>)
 8003112:	f004 fddb 	bl	8007ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_4_Pin|ADC_5_Pin;
 8003116:	2303      	movs	r3, #3
 8003118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800311a:	2303      	movs	r3, #3
 800311c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003122:	f107 031c 	add.w	r3, r7, #28
 8003126:	4619      	mov	r1, r3
 8003128:	4807      	ldr	r0, [pc, #28]	; (8003148 <HAL_ADC_MspInit+0xf4>)
 800312a:	f004 fdcf 	bl	8007ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800312e:	bf00      	nop
 8003130:	3730      	adds	r7, #48	; 0x30
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40012000 	.word	0x40012000
 800313c:	40023800 	.word	0x40023800
 8003140:	40020800 	.word	0x40020800
 8003144:	40020000 	.word	0x40020000
 8003148:	40020400 	.word	0x40020400

0800314c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <MX_DMA_Init+0xc8>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a2e      	ldr	r2, [pc, #184]	; (8003214 <MX_DMA_Init+0xc8>)
 800315c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <MX_DMA_Init+0xc8>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <MX_DMA_Init+0xc8>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	4a27      	ldr	r2, [pc, #156]	; (8003214 <MX_DMA_Init+0xc8>)
 8003178:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800317c:	6313      	str	r3, [r2, #48]	; 0x30
 800317e:	4b25      	ldr	r3, [pc, #148]	; (8003214 <MX_DMA_Init+0xc8>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2100      	movs	r1, #0
 800318e:	200c      	movs	r0, #12
 8003190:	f004 f963 	bl	800745a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003194:	200c      	movs	r0, #12
 8003196:	f004 f97c 	bl	8007492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	200e      	movs	r0, #14
 80031a0:	f004 f95b 	bl	800745a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80031a4:	200e      	movs	r0, #14
 80031a6:	f004 f974 	bl	8007492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2100      	movs	r1, #0
 80031ae:	200f      	movs	r0, #15
 80031b0:	f004 f953 	bl	800745a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80031b4:	200f      	movs	r0, #15
 80031b6:	f004 f96c 	bl	8007492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	2010      	movs	r0, #16
 80031c0:	f004 f94b 	bl	800745a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80031c4:	2010      	movs	r0, #16
 80031c6:	f004 f964 	bl	8007492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	2011      	movs	r0, #17
 80031d0:	f004 f943 	bl	800745a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80031d4:	2011      	movs	r0, #17
 80031d6:	f004 f95c 	bl	8007492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2100      	movs	r1, #0
 80031de:	2039      	movs	r0, #57	; 0x39
 80031e0:	f004 f93b 	bl	800745a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80031e4:	2039      	movs	r0, #57	; 0x39
 80031e6:	f004 f954 	bl	8007492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	203a      	movs	r0, #58	; 0x3a
 80031f0:	f004 f933 	bl	800745a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80031f4:	203a      	movs	r0, #58	; 0x3a
 80031f6:	f004 f94c 	bl	8007492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	2045      	movs	r0, #69	; 0x45
 8003200:	f004 f92b 	bl	800745a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003204:	2045      	movs	r0, #69	; 0x45
 8003206:	f004 f944 	bl	8007492 <HAL_NVIC_EnableIRQ>

}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800

08003218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	; 0x30
 800321c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321e:	f107 031c 	add.w	r3, r7, #28
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	4b59      	ldr	r3, [pc, #356]	; (8003398 <MX_GPIO_Init+0x180>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a58      	ldr	r2, [pc, #352]	; (8003398 <MX_GPIO_Init+0x180>)
 8003238:	f043 0310 	orr.w	r3, r3, #16
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b56      	ldr	r3, [pc, #344]	; (8003398 <MX_GPIO_Init+0x180>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	4b52      	ldr	r3, [pc, #328]	; (8003398 <MX_GPIO_Init+0x180>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a51      	ldr	r2, [pc, #324]	; (8003398 <MX_GPIO_Init+0x180>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4b4f      	ldr	r3, [pc, #316]	; (8003398 <MX_GPIO_Init+0x180>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	4b4b      	ldr	r3, [pc, #300]	; (8003398 <MX_GPIO_Init+0x180>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a4a      	ldr	r2, [pc, #296]	; (8003398 <MX_GPIO_Init+0x180>)
 8003270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b48      	ldr	r3, [pc, #288]	; (8003398 <MX_GPIO_Init+0x180>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b44      	ldr	r3, [pc, #272]	; (8003398 <MX_GPIO_Init+0x180>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a43      	ldr	r2, [pc, #268]	; (8003398 <MX_GPIO_Init+0x180>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <MX_GPIO_Init+0x180>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <MX_GPIO_Init+0x180>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a3c      	ldr	r2, [pc, #240]	; (8003398 <MX_GPIO_Init+0x180>)
 80032a8:	f043 0302 	orr.w	r3, r3, #2
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <MX_GPIO_Init+0x180>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	4b36      	ldr	r3, [pc, #216]	; (8003398 <MX_GPIO_Init+0x180>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a35      	ldr	r2, [pc, #212]	; (8003398 <MX_GPIO_Init+0x180>)
 80032c4:	f043 0308 	orr.w	r3, r3, #8
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b33      	ldr	r3, [pc, #204]	; (8003398 <MX_GPIO_Init+0x180>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ICM20948_CS_Pin|DRIVER_EN_Pin, GPIO_PIN_RESET);
 80032d6:	2200      	movs	r2, #0
 80032d8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80032dc:	482f      	ldr	r0, [pc, #188]	; (800339c <MX_GPIO_Init+0x184>)
 80032de:	f004 fea9 	bl	8008034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80032e2:	2200      	movs	r2, #0
 80032e4:	2108      	movs	r1, #8
 80032e6:	482e      	ldr	r0, [pc, #184]	; (80033a0 <MX_GPIO_Init+0x188>)
 80032e8:	f004 fea4 	bl	8008034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2130      	movs	r1, #48	; 0x30
 80032f0:	482c      	ldr	r0, [pc, #176]	; (80033a4 <MX_GPIO_Init+0x18c>)
 80032f2:	f004 fe9f 	bl	8008034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80032f6:	2200      	movs	r2, #0
 80032f8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80032fc:	482a      	ldr	r0, [pc, #168]	; (80033a8 <MX_GPIO_Init+0x190>)
 80032fe:	f004 fe99 	bl	8008034 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin|DRIVER_EN_Pin;
 8003302:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003308:	2301      	movs	r3, #1
 800330a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	2300      	movs	r3, #0
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003314:	f107 031c 	add.w	r3, r7, #28
 8003318:	4619      	mov	r1, r3
 800331a:	4820      	ldr	r0, [pc, #128]	; (800339c <MX_GPIO_Init+0x184>)
 800331c:	f004 fcd6 	bl	8007ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_PARK_UP_Pin|BTN_PARK_DOWN_Pin;
 8003320:	2330      	movs	r3, #48	; 0x30
 8003322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003324:	2300      	movs	r3, #0
 8003326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003328:	2302      	movs	r3, #2
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800332c:	f107 031c 	add.w	r3, r7, #28
 8003330:	4619      	mov	r1, r3
 8003332:	481a      	ldr	r0, [pc, #104]	; (800339c <MX_GPIO_Init+0x184>)
 8003334:	f004 fcca 	bl	8007ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003338:	2308      	movs	r3, #8
 800333a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333c:	2301      	movs	r3, #1
 800333e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003344:	2300      	movs	r3, #0
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003348:	f107 031c 	add.w	r3, r7, #28
 800334c:	4619      	mov	r1, r3
 800334e:	4814      	ldr	r0, [pc, #80]	; (80033a0 <MX_GPIO_Init+0x188>)
 8003350:	f004 fcbc 	bl	8007ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin;
 8003354:	2330      	movs	r3, #48	; 0x30
 8003356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003358:	2301      	movs	r3, #1
 800335a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003364:	f107 031c 	add.w	r3, r7, #28
 8003368:	4619      	mov	r1, r3
 800336a:	480e      	ldr	r0, [pc, #56]	; (80033a4 <MX_GPIO_Init+0x18c>)
 800336c:	f004 fcae 	bl	8007ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8003370:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003376:	2301      	movs	r3, #1
 8003378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337e:	2300      	movs	r3, #0
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003382:	f107 031c 	add.w	r3, r7, #28
 8003386:	4619      	mov	r1, r3
 8003388:	4807      	ldr	r0, [pc, #28]	; (80033a8 <MX_GPIO_Init+0x190>)
 800338a:	f004 fc9f 	bl	8007ccc <HAL_GPIO_Init>

}
 800338e:	bf00      	nop
 8003390:	3730      	adds	r7, #48	; 0x30
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	40021000 	.word	0x40021000
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40020800 	.word	0x40020800
 80033a8:	40020c00 	.word	0x40020c00

080033ac <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	if (UartHandle->Instance == SYSTEM_HARDWARE_UART_HIGH_INSTANSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a71      	ldr	r2, [pc, #452]	; (8003580 <HAL_UART_RxCpltCallback+0x1d4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d16b      	bne.n	8003496 <HAL_UART_RxCpltCallback+0xea>
	{
		if (UartHighReceiveState == 0)
 80033be:	4b71      	ldr	r3, [pc, #452]	; (8003584 <HAL_UART_RxCpltCallback+0x1d8>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11f      	bne.n	8003408 <HAL_UART_RxCpltCallback+0x5c>
		{
			if ((SerialHighLevelRequest.CR != 13) || (SerialHighLevelRequest.LF != 10))
 80033c8:	4b6f      	ldr	r3, [pc, #444]	; (8003588 <HAL_UART_RxCpltCallback+0x1dc>)
 80033ca:	7b9b      	ldrb	r3, [r3, #14]
 80033cc:	2b0d      	cmp	r3, #13
 80033ce:	d103      	bne.n	80033d8 <HAL_UART_RxCpltCallback+0x2c>
 80033d0:	4b6d      	ldr	r3, [pc, #436]	; (8003588 <HAL_UART_RxCpltCallback+0x1dc>)
 80033d2:	7bdb      	ldrb	r3, [r3, #15]
 80033d4:	2b0a      	cmp	r3, #10
 80033d6:	d00c      	beq.n	80033f2 <HAL_UART_RxCpltCallback+0x46>
			{
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, LostByte, 1);
 80033d8:	4b6c      	ldr	r3, [pc, #432]	; (800358c <HAL_UART_RxCpltCallback+0x1e0>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2201      	movs	r2, #1
 80033de:	4619      	mov	r1, r3
 80033e0:	486b      	ldr	r0, [pc, #428]	; (8003590 <HAL_UART_RxCpltCallback+0x1e4>)
 80033e2:	f007 fa73 	bl	800a8cc <HAL_UART_Receive_DMA>
 80033e6:	4603      	mov	r3, r0
 80033e8:	73fb      	strb	r3, [r7, #15]
				UartHighReceiveState = 1;
 80033ea:	4b66      	ldr	r3, [pc, #408]	; (8003584 <HAL_UART_RxCpltCallback+0x1d8>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
 80033f0:	e042      	b.n	8003478 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				UartHighReceiveState = 10;
 80033f2:	4b64      	ldr	r3, [pc, #400]	; (8003584 <HAL_UART_RxCpltCallback+0x1d8>)
 80033f4:	220a      	movs	r2, #10
 80033f6:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 80033f8:	2210      	movs	r2, #16
 80033fa:	4963      	ldr	r1, [pc, #396]	; (8003588 <HAL_UART_RxCpltCallback+0x1dc>)
 80033fc:	4864      	ldr	r0, [pc, #400]	; (8003590 <HAL_UART_RxCpltCallback+0x1e4>)
 80033fe:	f007 fa65 	bl	800a8cc <HAL_UART_Receive_DMA>
 8003402:	4603      	mov	r3, r0
 8003404:	73fb      	strb	r3, [r7, #15]
 8003406:	e037      	b.n	8003478 <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else
		{
			if(UartHighReceiveState == 1)
 8003408:	4b5e      	ldr	r3, [pc, #376]	; (8003584 <HAL_UART_RxCpltCallback+0x1d8>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d111      	bne.n	8003436 <HAL_UART_RxCpltCallback+0x8a>
			{
				if (LostByte[0] == 13)
 8003412:	4b5e      	ldr	r3, [pc, #376]	; (800358c <HAL_UART_RxCpltCallback+0x1e0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b0d      	cmp	r3, #13
 800341a:	d102      	bne.n	8003422 <HAL_UART_RxCpltCallback+0x76>
				{
					UartHighReceiveState = 2;
 800341c:	4b59      	ldr	r3, [pc, #356]	; (8003584 <HAL_UART_RxCpltCallback+0x1d8>)
 800341e:	2202      	movs	r2, #2
 8003420:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)LostByte, 1);
 8003422:	4b5a      	ldr	r3, [pc, #360]	; (800358c <HAL_UART_RxCpltCallback+0x1e0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2201      	movs	r2, #1
 8003428:	4619      	mov	r1, r3
 800342a:	4859      	ldr	r0, [pc, #356]	; (8003590 <HAL_UART_RxCpltCallback+0x1e4>)
 800342c:	f007 fa4e 	bl	800a8cc <HAL_UART_Receive_DMA>
 8003430:	4603      	mov	r3, r0
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e020      	b.n	8003478 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				if (UartHighReceiveState == 2)
 8003436:	4b53      	ldr	r3, [pc, #332]	; (8003584 <HAL_UART_RxCpltCallback+0x1d8>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d11b      	bne.n	8003478 <HAL_UART_RxCpltCallback+0xcc>
				{
					if (LostByte[0] == 10)
 8003440:	4b52      	ldr	r3, [pc, #328]	; (800358c <HAL_UART_RxCpltCallback+0x1e0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b0a      	cmp	r3, #10
 8003448:	d10a      	bne.n	8003460 <HAL_UART_RxCpltCallback+0xb4>
					{
						UartHighReceiveState = 0;
 800344a:	4b4e      	ldr	r3, [pc, #312]	; (8003584 <HAL_UART_RxCpltCallback+0x1d8>)
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 8003450:	2210      	movs	r2, #16
 8003452:	494d      	ldr	r1, [pc, #308]	; (8003588 <HAL_UART_RxCpltCallback+0x1dc>)
 8003454:	484e      	ldr	r0, [pc, #312]	; (8003590 <HAL_UART_RxCpltCallback+0x1e4>)
 8003456:	f007 fa39 	bl	800a8cc <HAL_UART_Receive_DMA>
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	e00b      	b.n	8003478 <HAL_UART_RxCpltCallback+0xcc>
					}
					else
					{
						UartHighReceiveState = 1;
 8003460:	4b48      	ldr	r3, [pc, #288]	; (8003584 <HAL_UART_RxCpltCallback+0x1d8>)
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)LostByte, 1);
 8003466:	4b49      	ldr	r3, [pc, #292]	; (800358c <HAL_UART_RxCpltCallback+0x1e0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2201      	movs	r2, #1
 800346c:	4619      	mov	r1, r3
 800346e:	4848      	ldr	r0, [pc, #288]	; (8003590 <HAL_UART_RxCpltCallback+0x1e4>)
 8003470:	f007 fa2c 	bl	800a8cc <HAL_UART_Receive_DMA>
 8003474:	4603      	mov	r3, r0
 8003476:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}
		if (Res != HAL_OK)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_UART_RxCpltCallback+0xea>
		{
			MX_USART3_UART_Init();
 800347e:	f003 f8a9 	bl	80065d4 <MX_USART3_UART_Init>
			UartHighReceiveState = 0;
 8003482:	4b40      	ldr	r3, [pc, #256]	; (8003584 <HAL_UART_RxCpltCallback+0x1d8>)
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 8003488:	2210      	movs	r2, #16
 800348a:	493f      	ldr	r1, [pc, #252]	; (8003588 <HAL_UART_RxCpltCallback+0x1dc>)
 800348c:	4840      	ldr	r0, [pc, #256]	; (8003590 <HAL_UART_RxCpltCallback+0x1e4>)
 800348e:	f007 fa1d 	bl	800a8cc <HAL_UART_Receive_DMA>
 8003492:	4603      	mov	r3, r0
 8003494:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == SYSTEM_HARDWARE_UART_LOW_INSTANSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a3e      	ldr	r2, [pc, #248]	; (8003594 <HAL_UART_RxCpltCallback+0x1e8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d16b      	bne.n	8003578 <HAL_UART_RxCpltCallback+0x1cc>
	{
		if (UartLowReceiveState == 0)
 80034a0:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <HAL_UART_RxCpltCallback+0x1ec>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d11f      	bne.n	80034ea <HAL_UART_RxCpltCallback+0x13e>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 80034aa:	4b3c      	ldr	r3, [pc, #240]	; (800359c <HAL_UART_RxCpltCallback+0x1f0>)
 80034ac:	7b9b      	ldrb	r3, [r3, #14]
 80034ae:	2b0d      	cmp	r3, #13
 80034b0:	d103      	bne.n	80034ba <HAL_UART_RxCpltCallback+0x10e>
 80034b2:	4b3a      	ldr	r3, [pc, #232]	; (800359c <HAL_UART_RxCpltCallback+0x1f0>)
 80034b4:	7bdb      	ldrb	r3, [r3, #15]
 80034b6:	2b0a      	cmp	r3, #10
 80034b8:	d00c      	beq.n	80034d4 <HAL_UART_RxCpltCallback+0x128>
			{
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, LostByte, 1);
 80034ba:	4b34      	ldr	r3, [pc, #208]	; (800358c <HAL_UART_RxCpltCallback+0x1e0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2201      	movs	r2, #1
 80034c0:	4619      	mov	r1, r3
 80034c2:	4837      	ldr	r0, [pc, #220]	; (80035a0 <HAL_UART_RxCpltCallback+0x1f4>)
 80034c4:	f007 fa02 	bl	800a8cc <HAL_UART_Receive_DMA>
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]
				UartLowReceiveState = 1;
 80034cc:	4b32      	ldr	r3, [pc, #200]	; (8003598 <HAL_UART_RxCpltCallback+0x1ec>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e042      	b.n	800355a <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				UartLowReceiveState = 10;
 80034d4:	4b30      	ldr	r3, [pc, #192]	; (8003598 <HAL_UART_RxCpltCallback+0x1ec>)
 80034d6:	220a      	movs	r2, #10
 80034d8:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 80034da:	2210      	movs	r2, #16
 80034dc:	492f      	ldr	r1, [pc, #188]	; (800359c <HAL_UART_RxCpltCallback+0x1f0>)
 80034de:	4830      	ldr	r0, [pc, #192]	; (80035a0 <HAL_UART_RxCpltCallback+0x1f4>)
 80034e0:	f007 f9f4 	bl	800a8cc <HAL_UART_Receive_DMA>
 80034e4:	4603      	mov	r3, r0
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	e037      	b.n	800355a <HAL_UART_RxCpltCallback+0x1ae>
			}
		}
		else
		{
			if(UartLowReceiveState == 1)
 80034ea:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_UART_RxCpltCallback+0x1ec>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d111      	bne.n	8003518 <HAL_UART_RxCpltCallback+0x16c>
			{
				if (LostByte[0] == 13)
 80034f4:	4b25      	ldr	r3, [pc, #148]	; (800358c <HAL_UART_RxCpltCallback+0x1e0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b0d      	cmp	r3, #13
 80034fc:	d102      	bne.n	8003504 <HAL_UART_RxCpltCallback+0x158>
				{
					UartLowReceiveState = 2;
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <HAL_UART_RxCpltCallback+0x1ec>)
 8003500:	2202      	movs	r2, #2
 8003502:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)LostByte, 1);
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <HAL_UART_RxCpltCallback+0x1e0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2201      	movs	r2, #1
 800350a:	4619      	mov	r1, r3
 800350c:	4824      	ldr	r0, [pc, #144]	; (80035a0 <HAL_UART_RxCpltCallback+0x1f4>)
 800350e:	f007 f9dd 	bl	800a8cc <HAL_UART_Receive_DMA>
 8003512:	4603      	mov	r3, r0
 8003514:	73fb      	strb	r3, [r7, #15]
 8003516:	e020      	b.n	800355a <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				if (UartLowReceiveState == 2)
 8003518:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <HAL_UART_RxCpltCallback+0x1ec>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d11b      	bne.n	800355a <HAL_UART_RxCpltCallback+0x1ae>
				{
					if (LostByte[0] == 10)
 8003522:	4b1a      	ldr	r3, [pc, #104]	; (800358c <HAL_UART_RxCpltCallback+0x1e0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b0a      	cmp	r3, #10
 800352a:	d10a      	bne.n	8003542 <HAL_UART_RxCpltCallback+0x196>
					{
						UartLowReceiveState = 0;
 800352c:	4b1a      	ldr	r3, [pc, #104]	; (8003598 <HAL_UART_RxCpltCallback+0x1ec>)
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8003532:	2210      	movs	r2, #16
 8003534:	4919      	ldr	r1, [pc, #100]	; (800359c <HAL_UART_RxCpltCallback+0x1f0>)
 8003536:	481a      	ldr	r0, [pc, #104]	; (80035a0 <HAL_UART_RxCpltCallback+0x1f4>)
 8003538:	f007 f9c8 	bl	800a8cc <HAL_UART_Receive_DMA>
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e00b      	b.n	800355a <HAL_UART_RxCpltCallback+0x1ae>
					}
					else
					{
						UartLowReceiveState = 1;
 8003542:	4b15      	ldr	r3, [pc, #84]	; (8003598 <HAL_UART_RxCpltCallback+0x1ec>)
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)LostByte, 1);
 8003548:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_UART_RxCpltCallback+0x1e0>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2201      	movs	r2, #1
 800354e:	4619      	mov	r1, r3
 8003550:	4813      	ldr	r0, [pc, #76]	; (80035a0 <HAL_UART_RxCpltCallback+0x1f4>)
 8003552:	f007 f9bb 	bl	800a8cc <HAL_UART_Receive_DMA>
 8003556:	4603      	mov	r3, r0
 8003558:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00b      	beq.n	8003578 <HAL_UART_RxCpltCallback+0x1cc>
		{
			MX_USART2_UART_Init();
 8003560:	f003 f80e 	bl	8006580 <MX_USART2_UART_Init>
			UartLowReceiveState = 0;
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <HAL_UART_RxCpltCallback+0x1ec>)
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 800356a:	2210      	movs	r2, #16
 800356c:	490b      	ldr	r1, [pc, #44]	; (800359c <HAL_UART_RxCpltCallback+0x1f0>)
 800356e:	480c      	ldr	r0, [pc, #48]	; (80035a0 <HAL_UART_RxCpltCallback+0x1f4>)
 8003570:	f007 f9ac 	bl	800a8cc <HAL_UART_Receive_DMA>
 8003574:	4603      	mov	r3, r0
 8003576:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40004800 	.word	0x40004800
 8003584:	20000ba5 	.word	0x20000ba5
 8003588:	20000d90 	.word	0x20000d90
 800358c:	20000e48 	.word	0x20000e48
 8003590:	200011c4 	.word	0x200011c4
 8003594:	40004400 	.word	0x40004400
 8003598:	20000ba4 	.word	0x20000ba4
 800359c:	20000c80 	.word	0x20000c80
 80035a0:	200012c8 	.word	0x200012c8
 80035a4:	00000000 	.word	0x00000000

080035a8 <UartLowPrepareRaw>:
void UartLowPrepareRaw(uint16_t Difference, int32_t* InputHall, uint8_t Count)
{
 80035a8:	b5b0      	push	{r4, r5, r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	80fb      	strh	r3, [r7, #6]
 80035b4:	4613      	mov	r3, r2
 80035b6:	717b      	strb	r3, [r7, #5]
	if(InitionHall == 0)
 80035b8:	4b7b      	ldr	r3, [pc, #492]	; (80037a8 <UartLowPrepareRaw+0x200>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d115      	bne.n	80035ec <UartLowPrepareRaw+0x44>
	{
		for(int i = 0; i < Count; i++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e00b      	b.n	80035de <UartLowPrepareRaw+0x36>
		{
			WheelsHall[i].LastHall = InputHall[i];
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	4413      	add	r3, r2
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4976      	ldr	r1, [pc, #472]	; (80037ac <UartLowPrepareRaw+0x204>)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		for(int i = 0; i < Count; i++)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	797b      	ldrb	r3, [r7, #5]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	dbef      	blt.n	80035c6 <UartLowPrepareRaw+0x1e>
		}
		InitionHall = 1;
 80035e6:	4b70      	ldr	r3, [pc, #448]	; (80037a8 <UartLowPrepareRaw+0x200>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
	}
	for (int i = 0; i < Count; i++)
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	e03e      	b.n	8003670 <UartLowPrepareRaw+0xc8>
	{
		if (HallActualize(InputHall[i], WheelsHall[i].LastHall, Difference))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	4413      	add	r3, r2
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	4a6b      	ldr	r2, [pc, #428]	; (80037ac <UartLowPrepareRaw+0x204>)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	4619      	mov	r1, r3
 8003608:	f000 f8da 	bl	80037c0 <HallActualize>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d012      	beq.n	8003638 <UartLowPrepareRaw+0x90>
		{
			WheelsHall[i].OutputHall = InputHall[i];
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4413      	add	r3, r2
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4963      	ldr	r1, [pc, #396]	; (80037ac <UartLowPrepareRaw+0x204>)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	440b      	add	r3, r1
 8003624:	605a      	str	r2, [r3, #4]
			WheelsHall[i].LastHall = InputHall[i];
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	4413      	add	r3, r2
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	495e      	ldr	r1, [pc, #376]	; (80037ac <UartLowPrepareRaw+0x204>)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		}
		if (!HallActualize(InputHall[i], WheelsHall[i].LastHall, Difference))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	4413      	add	r3, r2
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	4a5a      	ldr	r2, [pc, #360]	; (80037ac <UartLowPrepareRaw+0x204>)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800364a:	88fa      	ldrh	r2, [r7, #6]
 800364c:	4619      	mov	r1, r3
 800364e:	f000 f8b7 	bl	80037c0 <HallActualize>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d108      	bne.n	800366a <UartLowPrepareRaw+0xc2>
		{
			WheelsHall[i].LastHall = InputHall[i];
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	4413      	add	r3, r2
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4952      	ldr	r1, [pc, #328]	; (80037ac <UartLowPrepareRaw+0x204>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < Count; i++)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3301      	adds	r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	797b      	ldrb	r3, [r7, #5]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	429a      	cmp	r2, r3
 8003676:	dbbc      	blt.n	80035f2 <UartLowPrepareRaw+0x4a>
		}
	}

	switch (SerialControlWheelsResponce.ParameterNumber)
 8003678:	4b4d      	ldr	r3, [pc, #308]	; (80037b0 <UartLowPrepareRaw+0x208>)
 800367a:	785b      	ldrb	r3, [r3, #1]
 800367c:	2b07      	cmp	r3, #7
 800367e:	f200 8088 	bhi.w	8003792 <UartLowPrepareRaw+0x1ea>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <UartLowPrepareRaw+0xe0>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	080036a9 	.word	0x080036a9
 800368c:	0800373f 	.word	0x0800373f
 8003690:	0800374b 	.word	0x0800374b
 8003694:	08003757 	.word	0x08003757
 8003698:	08003763 	.word	0x08003763
 800369c:	0800376f 	.word	0x0800376f
 80036a0:	0800377b 	.word	0x0800377b
 80036a4:	08003787 	.word	0x08003787
	{
		case 0:
			LowDiagnostic.Voltage = SerialControlWheelsResponce.ParameterValue;
 80036a8:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <UartLowPrepareRaw+0x208>)
 80036aa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80036ae:	4a41      	ldr	r2, [pc, #260]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 80036b0:	6013      	str	r3, [r2, #0]
			LowDiagnostic.Battery += ((Interpolation(LowDiagnostic.Voltage, 28, 41) * 100.0) - LowDiagnostic.Battery) * 0.01;
 80036b2:	4b40      	ldr	r3, [pc, #256]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80037b8 <UartLowPrepareRaw+0x210>
 80036bc:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 80036c0:	eeb0 0a67 	vmov.f32	s0, s15
 80036c4:	f000 f8b0 	bl	8003828 <Interpolation>
 80036c8:	ee10 3a10 	vmov	r3, s0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc ff33 	bl	8000538 <__aeabi_f2d>
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <UartLowPrepareRaw+0x214>)
 80036d8:	f7fc ff86 	bl	80005e8 <__aeabi_dmul>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4614      	mov	r4, r2
 80036e2:	461d      	mov	r5, r3
 80036e4:	4b33      	ldr	r3, [pc, #204]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fc ff25 	bl	8000538 <__aeabi_f2d>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4620      	mov	r0, r4
 80036f4:	4629      	mov	r1, r5
 80036f6:	f7fc fdbf 	bl	8000278 <__aeabi_dsub>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4610      	mov	r0, r2
 8003700:	4619      	mov	r1, r3
 8003702:	a327      	add	r3, pc, #156	; (adr r3, 80037a0 <UartLowPrepareRaw+0x1f8>)
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	f7fc ff6e 	bl	80005e8 <__aeabi_dmul>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4614      	mov	r4, r2
 8003712:	461d      	mov	r5, r3
 8003714:	4b27      	ldr	r3, [pc, #156]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	4618      	mov	r0, r3
 800371a:	f7fc ff0d 	bl	8000538 <__aeabi_f2d>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4620      	mov	r0, r4
 8003724:	4629      	mov	r1, r5
 8003726:	f7fc fda9 	bl	800027c <__adddf3>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	f7fd f9f3 	bl	8000b1c <__aeabi_d2f>
 8003736:	4603      	mov	r3, r0
 8003738:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 800373a:	6053      	str	r3, [r2, #4]
		  	break;
 800373c:	e029      	b.n	8003792 <UartLowPrepareRaw+0x1ea>
		case 1:
			LowDiagnostic.CurrentLeft = SerialControlWheelsResponce.ParameterValue;
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <UartLowPrepareRaw+0x208>)
 8003740:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003744:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 8003746:	6093      	str	r3, [r2, #8]
			break;
 8003748:	e023      	b.n	8003792 <UartLowPrepareRaw+0x1ea>
		case 2:
			LowDiagnostic.CurrentRight = SerialControlWheelsResponce.ParameterValue;
 800374a:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <UartLowPrepareRaw+0x208>)
 800374c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003750:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 8003752:	60d3      	str	r3, [r2, #12]
			break;
 8003754:	e01d      	b.n	8003792 <UartLowPrepareRaw+0x1ea>
		case 3:
			LowDiagnostic.RPSLeft = SerialControlWheelsResponce.ParameterValue;
 8003756:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <UartLowPrepareRaw+0x208>)
 8003758:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800375c:	4a15      	ldr	r2, [pc, #84]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 800375e:	6113      	str	r3, [r2, #16]
			break;
 8003760:	e017      	b.n	8003792 <UartLowPrepareRaw+0x1ea>
		case 4:
			LowDiagnostic.RPSRight = SerialControlWheelsResponce.ParameterValue;
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <UartLowPrepareRaw+0x208>)
 8003764:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003768:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 800376a:	6153      	str	r3, [r2, #20]
			break;
 800376c:	e011      	b.n	8003792 <UartLowPrepareRaw+0x1ea>
		case 5:
			LowDiagnostic.OverCurrCount = SerialControlWheelsResponce.ParameterValue;
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <UartLowPrepareRaw+0x208>)
 8003770:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003774:	4a0f      	ldr	r2, [pc, #60]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 8003776:	6193      	str	r3, [r2, #24]
			break;
 8003778:	e00b      	b.n	8003792 <UartLowPrepareRaw+0x1ea>
		case 6:
			LowDiagnostic.ConnErrCount = SerialControlWheelsResponce.ParameterValue;
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <UartLowPrepareRaw+0x208>)
 800377c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003780:	4a0c      	ldr	r2, [pc, #48]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 8003782:	61d3      	str	r3, [r2, #28]
			break;
 8003784:	e005      	b.n	8003792 <UartLowPrepareRaw+0x1ea>
		case 7:
			LowDiagnostic.CommTime = SerialControlWheelsResponce.ParameterValue;
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <UartLowPrepareRaw+0x208>)
 8003788:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800378c:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <UartLowPrepareRaw+0x20c>)
 800378e:	6213      	str	r3, [r2, #32]
		  	break;
 8003790:	bf00      	nop
	}
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bdb0      	pop	{r4, r5, r7, pc}
 800379a:	bf00      	nop
 800379c:	f3af 8000 	nop.w
 80037a0:	47ae147b 	.word	0x47ae147b
 80037a4:	3f847ae1 	.word	0x3f847ae1
 80037a8:	20000ba6 	.word	0x20000ba6
 80037ac:	20000e30 	.word	0x20000e30
 80037b0:	20000c80 	.word	0x20000c80
 80037b4:	20000cb0 	.word	0x20000cb0
 80037b8:	42240000 	.word	0x42240000
 80037bc:	40590000 	.word	0x40590000

080037c0 <HallActualize>:
int HallActualize(int32_t NewStep, int32_t LastStep, int32_t Difference)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
	int32_t CalcDiff = abs(LastStep - NewStep);
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bfb8      	it	lt
 80037d6:	425b      	neglt	r3, r3
 80037d8:	617b      	str	r3, [r7, #20]
	if (CalcDiff <= Difference)
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	dc01      	bgt.n	80037e6 <HallActualize+0x26>
	{
		return 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HallActualize+0x28>
	}
	return 0;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <GPIOUpdate>:
void GPIOUpdate()
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
	FootButtonUp = HAL_GPIO_ReadPin(SYSTEM_HARDWARE_PARKING_LEG_UP_PORT, SYSTEM_HARDWARE_PARKING_LEG_UP_PIN);
 80037f8:	2120      	movs	r1, #32
 80037fa:	4808      	ldr	r0, [pc, #32]	; (800381c <GPIOUpdate+0x28>)
 80037fc:	f004 fc02 	bl	8008004 <HAL_GPIO_ReadPin>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <GPIOUpdate+0x2c>)
 8003806:	701a      	strb	r2, [r3, #0]
	FootButtonDown = HAL_GPIO_ReadPin(SYSTEM_HARDWARE_PARKING_LEG_DOWN_PORT, SYSTEM_HARDWARE_PARKING_LEG_DOWN_PIN);
 8003808:	2110      	movs	r1, #16
 800380a:	4804      	ldr	r0, [pc, #16]	; (800381c <GPIOUpdate+0x28>)
 800380c:	f004 fbfa 	bl	8008004 <HAL_GPIO_ReadPin>
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <GPIOUpdate+0x30>)
 8003816:	701a      	strb	r2, [r3, #0]
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	20000ba7 	.word	0x20000ba7
 8003824:	20000ba8 	.word	0x20000ba8

08003828 <Interpolation>:
float Interpolation(float Value, float Min, float Max)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003832:	edc7 0a02 	vstr	s1, [r7, #8]
 8003836:	ed87 1a01 	vstr	s2, [r7, #4]
    float Result = (Value - Min) / (Max - Min);
 800383a:	ed97 7a03 	vldr	s14, [r7, #12]
 800383e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003842:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003846:	ed97 7a01 	vldr	s14, [r7, #4]
 800384a:	edd7 7a02 	vldr	s15, [r7, #8]
 800384e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003856:	edc7 7a05 	vstr	s15, [r7, #20]
    if (Result > 1)
 800385a:	edd7 7a05 	vldr	s15, [r7, #20]
 800385e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	dd02      	ble.n	8003872 <Interpolation+0x4a>
    {
        return 1;
 800386c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003870:	e00a      	b.n	8003888 <Interpolation+0x60>
    }
    if (Result < 0)
 8003872:	edd7 7a05 	vldr	s15, [r7, #20]
 8003876:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	d502      	bpl.n	8003886 <Interpolation+0x5e>
    {
        return 0;
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	e000      	b.n	8003888 <Interpolation+0x60>
    }
    return Result;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	ee07 3a90 	vmov	s15, r3
}
 800388c:	eeb0 0a67 	vmov.f32	s0, s15
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <ADCInit>:
void ADCInit()
{
 800389c:	b480      	push	{r7}
 800389e:	b08b      	sub	sp, #44	; 0x2c
 80038a0:	af00      	add	r7, sp, #0
	uint16_t Raw[SYSTEM_HARDWARE_ADC_Channel_Count];
	uint16_t Sensors[SYSTEM_HARDWARE_ADC_Channel_Count - 3];
	float Amperage[SYSTEM_HARDWARE_ADC_Channel_Count - 5];
	AdcModule.Raw = Raw;
 80038a2:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <ADCInit+0x28>)
 80038a4:	f107 0318 	add.w	r3, r7, #24
 80038a8:	6013      	str	r3, [r2, #0]
	AdcModule.Sensors = Sensors;
 80038aa:	4a06      	ldr	r2, [pc, #24]	; (80038c4 <ADCInit+0x28>)
 80038ac:	f107 030c 	add.w	r3, r7, #12
 80038b0:	6053      	str	r3, [r2, #4]
	AdcModule.Amperage = Amperage;
 80038b2:	4a04      	ldr	r2, [pc, #16]	; (80038c4 <ADCInit+0x28>)
 80038b4:	463b      	mov	r3, r7
 80038b6:	6093      	str	r3, [r2, #8]
}
 80038b8:	bf00      	nop
 80038ba:	372c      	adds	r7, #44	; 0x2c
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	20000cf0 	.word	0x20000cf0

080038c8 <ADCUpdate>:
void ADCUpdate()
{
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	e00e      	b.n	80038f2 <ADCUpdate+0x2a>
	{
		AdcModule.Raw[i] = ReadAdcChanel(i);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	b2d9      	uxtb	r1, r3
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <ADCUpdate+0x88>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	18d4      	adds	r4, r2, r3
 80038e2:	4608      	mov	r0, r1
 80038e4:	f000 f8ea 	bl	8003abc <ReadAdcChanel>
 80038e8:	4603      	mov	r3, r0
 80038ea:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3301      	adds	r3, #1
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b07      	cmp	r3, #7
 80038f6:	dded      	ble.n	80038d4 <ADCUpdate+0xc>
	}
#ifndef DEBUG_NO_ADC_ALL
#ifndef DEBUG_NO_ADC_RAW
	DebugADCRawFL = AdcModule.Raw[0];
 80038f8:	4b15      	ldr	r3, [pc, #84]	; (8003950 <ADCUpdate+0x88>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	881a      	ldrh	r2, [r3, #0]
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <ADCUpdate+0x8c>)
 8003900:	801a      	strh	r2, [r3, #0]
	DebugADCRawFR = AdcModule.Raw[1];
 8003902:	4b13      	ldr	r3, [pc, #76]	; (8003950 <ADCUpdate+0x88>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	885a      	ldrh	r2, [r3, #2]
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <ADCUpdate+0x90>)
 800390a:	801a      	strh	r2, [r3, #0]
	DebugADCRawBL = AdcModule.Raw[2];
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <ADCUpdate+0x88>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	889a      	ldrh	r2, [r3, #4]
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <ADCUpdate+0x94>)
 8003914:	801a      	strh	r2, [r3, #0]
	DebugADCRawBR = AdcModule.Raw[3];
 8003916:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <ADCUpdate+0x88>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	88da      	ldrh	r2, [r3, #6]
 800391c:	4b10      	ldr	r3, [pc, #64]	; (8003960 <ADCUpdate+0x98>)
 800391e:	801a      	strh	r2, [r3, #0]
	DebugADCRawCN = AdcModule.Raw[4];
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <ADCUpdate+0x88>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	891a      	ldrh	r2, [r3, #8]
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <ADCUpdate+0x9c>)
 8003928:	801a      	strh	r2, [r3, #0]
	DebugADCRaw36 = AdcModule.Raw[5];
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <ADCUpdate+0x88>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	895a      	ldrh	r2, [r3, #10]
 8003930:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <ADCUpdate+0xa0>)
 8003932:	801a      	strh	r2, [r3, #0]
	DebugADCRaw12 = AdcModule.Raw[6];
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <ADCUpdate+0x88>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	899a      	ldrh	r2, [r3, #12]
 800393a:	4b0c      	ldr	r3, [pc, #48]	; (800396c <ADCUpdate+0xa4>)
 800393c:	801a      	strh	r2, [r3, #0]
	DebugADCRaw5 = AdcModule.Raw[7];
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <ADCUpdate+0x88>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	89da      	ldrh	r2, [r3, #14]
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <ADCUpdate+0xa8>)
 8003946:	801a      	strh	r2, [r3, #0]
#endif
#endif
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	bd90      	pop	{r4, r7, pc}
 8003950:	20000cf0 	.word	0x20000cf0
 8003954:	20000c34 	.word	0x20000c34
 8003958:	20000c36 	.word	0x20000c36
 800395c:	20000c78 	.word	0x20000c78
 8003960:	20000c5c 	.word	0x20000c5c
 8003964:	20000c7a 	.word	0x20000c7a
 8003968:	20000dec 	.word	0x20000dec
 800396c:	20000c90 	.word	0x20000c90
 8003970:	20000dbc 	.word	0x20000dbc
 8003974:	00000000 	.word	0x00000000

08003978 <ADCPrepare>:
void ADCPrepare()
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count - 3; i++) // Sensor
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	e00e      	b.n	80039a2 <ADCPrepare+0x2a>
	{
		AdcModule.Sensors[i] = AdcModule.Raw[i] * 1; // No conversion
 8003984:	4b4c      	ldr	r3, [pc, #304]	; (8003ab8 <ADCPrepare+0x140>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	441a      	add	r2, r3
 800398e:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <ADCPrepare+0x140>)
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	440b      	add	r3, r1
 8003998:	8812      	ldrh	r2, [r2, #0]
 800399a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count - 3; i++) // Sensor
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3301      	adds	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	dded      	ble.n	8003984 <ADCPrepare+0xc>
	}
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 3; i < SYSTEM_HARDWARE_ADC_Channel_Count - 2; i++) // Current 30A
 80039a8:	2305      	movs	r3, #5
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	e032      	b.n	8003a14 <ADCPrepare+0x9c>
	{
		AdcModule.Amperage[i - (SYSTEM_HARDWARE_ADC_Channel_Count - 3)] = (AdcModule.Raw[i] * 3.3 / 4095) * 0.066;
 80039ae:	4b42      	ldr	r3, [pc, #264]	; (8003ab8 <ADCPrepare+0x140>)
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4413      	add	r3, r2
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fc fdaa 	bl	8000514 <__aeabi_i2d>
 80039c0:	a335      	add	r3, pc, #212	; (adr r3, 8003a98 <ADCPrepare+0x120>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f7fc fe0f 	bl	80005e8 <__aeabi_dmul>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	a333      	add	r3, pc, #204	; (adr r3, 8003aa0 <ADCPrepare+0x128>)
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f7fc ff30 	bl	800083c <__aeabi_ddiv>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4610      	mov	r0, r2
 80039e2:	4619      	mov	r1, r3
 80039e4:	a330      	add	r3, pc, #192	; (adr r3, 8003aa8 <ADCPrepare+0x130>)
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f7fc fdfd 	bl	80005e8 <__aeabi_dmul>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <ADCPrepare+0x140>)
 80039f8:	689a      	ldr	r2, [r3, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a00:	3b05      	subs	r3, #5
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	18d4      	adds	r4, r2, r3
 8003a06:	f7fd f889 	bl	8000b1c <__aeabi_d2f>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6023      	str	r3, [r4, #0]
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 3; i < SYSTEM_HARDWARE_ADC_Channel_Count - 2; i++) // Current 30A
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	3301      	adds	r3, #1
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	ddc9      	ble.n	80039ae <ADCPrepare+0x36>
	}
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 2; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++) // Current 20A
 8003a1a:	2306      	movs	r3, #6
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	e032      	b.n	8003a86 <ADCPrepare+0x10e>
	{
		AdcModule.Amperage[i - (SYSTEM_HARDWARE_ADC_Channel_Count - 2)] = (AdcModule.Raw[i] * 3.3 / 4095) * 0.1;
 8003a20:	4b25      	ldr	r3, [pc, #148]	; (8003ab8 <ADCPrepare+0x140>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4413      	add	r3, r2
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fc fd71 	bl	8000514 <__aeabi_i2d>
 8003a32:	a319      	add	r3, pc, #100	; (adr r3, 8003a98 <ADCPrepare+0x120>)
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	f7fc fdd6 	bl	80005e8 <__aeabi_dmul>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	a316      	add	r3, pc, #88	; (adr r3, 8003aa0 <ADCPrepare+0x128>)
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	f7fc fef7 	bl	800083c <__aeabi_ddiv>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4610      	mov	r0, r2
 8003a54:	4619      	mov	r1, r3
 8003a56:	a316      	add	r3, pc, #88	; (adr r3, 8003ab0 <ADCPrepare+0x138>)
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f7fc fdc4 	bl	80005e8 <__aeabi_dmul>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <ADCPrepare+0x140>)
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a72:	3b06      	subs	r3, #6
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	18d4      	adds	r4, r2, r3
 8003a78:	f7fd f850 	bl	8000b1c <__aeabi_d2f>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	6023      	str	r3, [r4, #0]
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 2; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++) // Current 20A
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3301      	adds	r3, #1
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b07      	cmp	r3, #7
 8003a8a:	ddc9      	ble.n	8003a20 <ADCPrepare+0xa8>
	}
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd90      	pop	{r4, r7, pc}
 8003a96:	bf00      	nop
 8003a98:	66666666 	.word	0x66666666
 8003a9c:	400a6666 	.word	0x400a6666
 8003aa0:	00000000 	.word	0x00000000
 8003aa4:	40affe00 	.word	0x40affe00
 8003aa8:	4189374c 	.word	0x4189374c
 8003aac:	3fb0e560 	.word	0x3fb0e560
 8003ab0:	9999999a 	.word	0x9999999a
 8003ab4:	3fb99999 	.word	0x3fb99999
 8003ab8:	20000cf0 	.word	0x20000cf0

08003abc <ReadAdcChanel>:
uint16_t ReadAdcChanel(uint8_t Channel)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 8003ac6:	f107 030c 	add.w	r3, r7, #12
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	60da      	str	r2, [r3, #12]

	uint16_t RetVal;

	switch(Channel)
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	2b07      	cmp	r3, #7
 8003ad8:	d82a      	bhi.n	8003b30 <ReadAdcChanel+0x74>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <ReadAdcChanel+0x24>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003b01 	.word	0x08003b01
 8003ae4:	08003b07 	.word	0x08003b07
 8003ae8:	08003b0d 	.word	0x08003b0d
 8003aec:	08003b13 	.word	0x08003b13
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	08003b1f 	.word	0x08003b1f
 8003af8:	08003b25 	.word	0x08003b25
 8003afc:	08003b2b 	.word	0x08003b2b
	{
	case 0:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_FL;
 8003b00:	230b      	movs	r3, #11
 8003b02:	60fb      	str	r3, [r7, #12]
		break;
 8003b04:	e014      	b.n	8003b30 <ReadAdcChanel+0x74>
	case 1:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_FR;
 8003b06:	230c      	movs	r3, #12
 8003b08:	60fb      	str	r3, [r7, #12]
		break;
 8003b0a:	e011      	b.n	8003b30 <ReadAdcChanel+0x74>
	case 2:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_BL;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
		break;
 8003b10:	e00e      	b.n	8003b30 <ReadAdcChanel+0x74>
	case 3:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_BR;
 8003b12:	230a      	movs	r3, #10
 8003b14:	60fb      	str	r3, [r7, #12]
		break;
 8003b16:	e00b      	b.n	8003b30 <ReadAdcChanel+0x74>
	case 4:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_CN;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	60fb      	str	r3, [r7, #12]
		break;
 8003b1c:	e008      	b.n	8003b30 <ReadAdcChanel+0x74>
	case 5:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_36;
 8003b1e:	2309      	movs	r3, #9
 8003b20:	60fb      	str	r3, [r7, #12]
		break;
 8003b22:	e005      	b.n	8003b30 <ReadAdcChanel+0x74>
	case 6:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_12;
 8003b24:	2308      	movs	r3, #8
 8003b26:	60fb      	str	r3, [r7, #12]
		break;
 8003b28:	e002      	b.n	8003b30 <ReadAdcChanel+0x74>
	case 7:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_5;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
		break;
 8003b2e:	bf00      	nop
	}

	sConfig.Rank = 1;
 8003b30:	2301      	movs	r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(SYSTEM_HARDWARE_ADC, &sConfig) != HAL_OK)
 8003b38:	f107 030c 	add.w	r3, r7, #12
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	480e      	ldr	r0, [pc, #56]	; (8003b78 <ReadAdcChanel+0xbc>)
 8003b40:	f003 f992 	bl	8006e68 <HAL_ADC_ConfigChannel>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <ReadAdcChanel+0x92>
	{
		Error_Handler();
 8003b4a:	f002 f807 	bl	8005b5c <Error_Handler>
	}
	HAL_ADC_Start(SYSTEM_HARDWARE_ADC);
 8003b4e:	480a      	ldr	r0, [pc, #40]	; (8003b78 <ReadAdcChanel+0xbc>)
 8003b50:	f002 ffec 	bl	8006b2c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(SYSTEM_HARDWARE_ADC, 1000);
 8003b54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b58:	4807      	ldr	r0, [pc, #28]	; (8003b78 <ReadAdcChanel+0xbc>)
 8003b5a:	f003 f8ec 	bl	8006d36 <HAL_ADC_PollForConversion>
	RetVal = HAL_ADC_GetValue(SYSTEM_HARDWARE_ADC);
 8003b5e:	4806      	ldr	r0, [pc, #24]	; (8003b78 <ReadAdcChanel+0xbc>)
 8003b60:	f003 f974 	bl	8006e4c <HAL_ADC_GetValue>
 8003b64:	4603      	mov	r3, r0
 8003b66:	83fb      	strh	r3, [r7, #30]
	HAL_ADC_Stop(SYSTEM_HARDWARE_ADC);
 8003b68:	4803      	ldr	r0, [pc, #12]	; (8003b78 <ReadAdcChanel+0xbc>)
 8003b6a:	f003 f8b1 	bl	8006cd0 <HAL_ADC_Stop>
	return RetVal;
 8003b6e:	8bfb      	ldrh	r3, [r7, #30]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000be8 	.word	0x20000be8

08003b7c <SerialLowControlLoop>:
void SerialLowControlLoop()
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
	SerialControlWheelsRequest.ControlMode = 0;
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <SerialLowControlLoop+0x2c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
	SerialControlWheelsRequest.ParameterNumber = 0;
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <SerialLowControlLoop+0x2c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	705a      	strb	r2, [r3, #1]
	//SerialControlWheelsRequest.WheelLeft = BTControl.Front;
	//SerialControlWheelsRequest.WheelRight = BTControl.Turn;
	SerialControlWheelsRequest.CR=13;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <SerialLowControlLoop+0x2c>)
 8003b8e:	220d      	movs	r2, #13
 8003b90:	739a      	strb	r2, [r3, #14]
	SerialControlWheelsRequest.LF=10;
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <SerialLowControlLoop+0x2c>)
 8003b94:	220a      	movs	r2, #10
 8003b96:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsRequest.Buffer, WHEELS_REQUEST_SIZE);
 8003b98:	2210      	movs	r2, #16
 8003b9a:	4903      	ldr	r1, [pc, #12]	; (8003ba8 <SerialLowControlLoop+0x2c>)
 8003b9c:	4803      	ldr	r0, [pc, #12]	; (8003bac <SerialLowControlLoop+0x30>)
 8003b9e:	f006 fe17 	bl	800a7d0 <HAL_UART_Transmit_DMA>
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000c9c 	.word	0x20000c9c
 8003bac:	200012c8 	.word	0x200012c8

08003bb0 <ImuAccelUpdate>:
void ImuAccelUpdate()
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	ed2d 8b02 	vpush	{d8}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
	axises NewData;
	icm20948_accel_read(&NewData);
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fe fe57 	bl	8002870 <icm20948_accel_read>

	ResAccel.x += roundf((((NewData.x / 16384) - ResAccel.x) * DebugFilterAcc) * DebugScallerAcc) / DebugScallerAcc;
 8003bc2:	4b4c      	ldr	r3, [pc, #304]	; (8003cf4 <ImuAccelUpdate+0x144>)
 8003bc4:	ed93 8a00 	vldr	s16, [r3]
 8003bc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bcc:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8003cf8 <ImuAccelUpdate+0x148>
 8003bd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bd4:	4b47      	ldr	r3, [pc, #284]	; (8003cf4 <ImuAccelUpdate+0x144>)
 8003bd6:	edd3 7a00 	vldr	s15, [r3]
 8003bda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bde:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <ImuAccelUpdate+0x14c>)
 8003be0:	edd3 7a00 	vldr	s15, [r3]
 8003be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be8:	4b45      	ldr	r3, [pc, #276]	; (8003d00 <ImuAccelUpdate+0x150>)
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf6:	f007 ff13 	bl	800ba20 <roundf>
 8003bfa:	eef0 6a40 	vmov.f32	s13, s0
 8003bfe:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <ImuAccelUpdate+0x150>)
 8003c00:	ed93 7a00 	vldr	s14, [r3]
 8003c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c08:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003c0c:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <ImuAccelUpdate+0x144>)
 8003c0e:	edc3 7a00 	vstr	s15, [r3]
	ResAccel.y += roundf((((NewData.y / 16384) - ResAccel.y) * DebugFilterAcc) * DebugScallerAcc) / DebugScallerAcc;
 8003c12:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <ImuAccelUpdate+0x144>)
 8003c14:	ed93 8a01 	vldr	s16, [r3, #4]
 8003c18:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c1c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003cf8 <ImuAccelUpdate+0x148>
 8003c20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c24:	4b33      	ldr	r3, [pc, #204]	; (8003cf4 <ImuAccelUpdate+0x144>)
 8003c26:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c2e:	4b33      	ldr	r3, [pc, #204]	; (8003cfc <ImuAccelUpdate+0x14c>)
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c38:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <ImuAccelUpdate+0x150>)
 8003c3a:	edd3 7a00 	vldr	s15, [r3]
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c42:	eeb0 0a67 	vmov.f32	s0, s15
 8003c46:	f007 feeb 	bl	800ba20 <roundf>
 8003c4a:	eef0 6a40 	vmov.f32	s13, s0
 8003c4e:	4b2c      	ldr	r3, [pc, #176]	; (8003d00 <ImuAccelUpdate+0x150>)
 8003c50:	ed93 7a00 	vldr	s14, [r3]
 8003c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c58:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <ImuAccelUpdate+0x144>)
 8003c5e:	edc3 7a01 	vstr	s15, [r3, #4]
	ResAccel.z += roundf((((NewData.z / 16384) - ResAccel.z) * DebugFilterAcc) * DebugScallerAcc) / DebugScallerAcc;
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <ImuAccelUpdate+0x144>)
 8003c64:	ed93 8a02 	vldr	s16, [r3, #8]
 8003c68:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c6c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8003cf8 <ImuAccelUpdate+0x148>
 8003c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c74:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <ImuAccelUpdate+0x144>)
 8003c76:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c7e:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <ImuAccelUpdate+0x14c>)
 8003c80:	edd3 7a00 	vldr	s15, [r3]
 8003c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c88:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <ImuAccelUpdate+0x150>)
 8003c8a:	edd3 7a00 	vldr	s15, [r3]
 8003c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c92:	eeb0 0a67 	vmov.f32	s0, s15
 8003c96:	f007 fec3 	bl	800ba20 <roundf>
 8003c9a:	eef0 6a40 	vmov.f32	s13, s0
 8003c9e:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <ImuAccelUpdate+0x150>)
 8003ca0:	ed93 7a00 	vldr	s14, [r3]
 8003ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <ImuAccelUpdate+0x144>)
 8003cae:	edc3 7a02 	vstr	s15, [r3, #8]

	DebugAccRaw.x = NewData.x / 16384;
 8003cb2:	ed97 7a01 	vldr	s14, [r7, #4]
 8003cb6:	eddf 6a10 	vldr	s13, [pc, #64]	; 8003cf8 <ImuAccelUpdate+0x148>
 8003cba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <ImuAccelUpdate+0x154>)
 8003cc0:	edc3 7a00 	vstr	s15, [r3]
	DebugAccRaw.y = NewData.y / 16384;
 8003cc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8003cc8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003cf8 <ImuAccelUpdate+0x148>
 8003ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <ImuAccelUpdate+0x154>)
 8003cd2:	edc3 7a01 	vstr	s15, [r3, #4]
	DebugAccRaw.z = NewData.z / 16384;
 8003cd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003cda:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003cf8 <ImuAccelUpdate+0x148>
 8003cde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <ImuAccelUpdate+0x154>)
 8003ce4:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	ecbd 8b02 	vpop	{d8}
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000d48 	.word	0x20000d48
 8003cf8:	46800000 	.word	0x46800000
 8003cfc:	2000000c 	.word	0x2000000c
 8003d00:	20000010 	.word	0x20000010
 8003d04:	20000cd8 	.word	0x20000cd8

08003d08 <ImuGyroUpdate>:
void ImuGyroUpdate()
{
 8003d08:	b5b0      	push	{r4, r5, r7, lr}
 8003d0a:	ed2d 8b02 	vpush	{d8}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
	axises NewData;
	icm20948_gyro_read(&NewData);
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fd68 	bl	80027ea <icm20948_gyro_read>

	ResGyro.x += roundf((((NewData.x / 16.4) - ResGyro.x) * DebugFilterGyro) * DebugScallerGyro) / DebugScallerGyro;
 8003d1a:	4b99      	ldr	r3, [pc, #612]	; (8003f80 <ImuGyroUpdate+0x278>)
 8003d1c:	ed93 8a00 	vldr	s16, [r3]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fc fc08 	bl	8000538 <__aeabi_f2d>
 8003d28:	a393      	add	r3, pc, #588	; (adr r3, 8003f78 <ImuGyroUpdate+0x270>)
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f7fc fd85 	bl	800083c <__aeabi_ddiv>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4614      	mov	r4, r2
 8003d38:	461d      	mov	r5, r3
 8003d3a:	4b91      	ldr	r3, [pc, #580]	; (8003f80 <ImuGyroUpdate+0x278>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fc fbfa 	bl	8000538 <__aeabi_f2d>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	f7fc fa94 	bl	8000278 <__aeabi_dsub>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4614      	mov	r4, r2
 8003d56:	461d      	mov	r5, r3
 8003d58:	4b8a      	ldr	r3, [pc, #552]	; (8003f84 <ImuGyroUpdate+0x27c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fbeb 	bl	8000538 <__aeabi_f2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4620      	mov	r0, r4
 8003d68:	4629      	mov	r1, r5
 8003d6a:	f7fc fc3d 	bl	80005e8 <__aeabi_dmul>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4614      	mov	r4, r2
 8003d74:	461d      	mov	r5, r3
 8003d76:	4b84      	ldr	r3, [pc, #528]	; (8003f88 <ImuGyroUpdate+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fc fbdc 	bl	8000538 <__aeabi_f2d>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4620      	mov	r0, r4
 8003d86:	4629      	mov	r1, r5
 8003d88:	f7fc fc2e 	bl	80005e8 <__aeabi_dmul>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	f7fc fec2 	bl	8000b1c <__aeabi_d2f>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	ee00 3a10 	vmov	s0, r3
 8003d9e:	f007 fe3f 	bl	800ba20 <roundf>
 8003da2:	eef0 6a40 	vmov.f32	s13, s0
 8003da6:	4b78      	ldr	r3, [pc, #480]	; (8003f88 <ImuGyroUpdate+0x280>)
 8003da8:	ed93 7a00 	vldr	s14, [r3]
 8003dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003db4:	4b72      	ldr	r3, [pc, #456]	; (8003f80 <ImuGyroUpdate+0x278>)
 8003db6:	edc3 7a00 	vstr	s15, [r3]
	ResGyro.y += roundf((((NewData.y / 16.4) - ResGyro.y) * DebugFilterGyro) * DebugScallerGyro) / DebugScallerGyro;
 8003dba:	4b71      	ldr	r3, [pc, #452]	; (8003f80 <ImuGyroUpdate+0x278>)
 8003dbc:	ed93 8a01 	vldr	s16, [r3, #4]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fbb8 	bl	8000538 <__aeabi_f2d>
 8003dc8:	a36b      	add	r3, pc, #428	; (adr r3, 8003f78 <ImuGyroUpdate+0x270>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f7fc fd35 	bl	800083c <__aeabi_ddiv>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	461d      	mov	r5, r3
 8003dda:	4b69      	ldr	r3, [pc, #420]	; (8003f80 <ImuGyroUpdate+0x278>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fbaa 	bl	8000538 <__aeabi_f2d>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4620      	mov	r0, r4
 8003dea:	4629      	mov	r1, r5
 8003dec:	f7fc fa44 	bl	8000278 <__aeabi_dsub>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4614      	mov	r4, r2
 8003df6:	461d      	mov	r5, r3
 8003df8:	4b62      	ldr	r3, [pc, #392]	; (8003f84 <ImuGyroUpdate+0x27c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fb9b 	bl	8000538 <__aeabi_f2d>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4620      	mov	r0, r4
 8003e08:	4629      	mov	r1, r5
 8003e0a:	f7fc fbed 	bl	80005e8 <__aeabi_dmul>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4614      	mov	r4, r2
 8003e14:	461d      	mov	r5, r3
 8003e16:	4b5c      	ldr	r3, [pc, #368]	; (8003f88 <ImuGyroUpdate+0x280>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fc fb8c 	bl	8000538 <__aeabi_f2d>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4620      	mov	r0, r4
 8003e26:	4629      	mov	r1, r5
 8003e28:	f7fc fbde 	bl	80005e8 <__aeabi_dmul>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	f7fc fe72 	bl	8000b1c <__aeabi_d2f>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	ee00 3a10 	vmov	s0, r3
 8003e3e:	f007 fdef 	bl	800ba20 <roundf>
 8003e42:	eef0 6a40 	vmov.f32	s13, s0
 8003e46:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <ImuGyroUpdate+0x280>)
 8003e48:	ed93 7a00 	vldr	s14, [r3]
 8003e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e50:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003e54:	4b4a      	ldr	r3, [pc, #296]	; (8003f80 <ImuGyroUpdate+0x278>)
 8003e56:	edc3 7a01 	vstr	s15, [r3, #4]
	ResGyro.z += roundf((((NewData.z / 16.4) - ResGyro.z) * DebugFilterGyro) * DebugScallerGyro) / DebugScallerGyro;
 8003e5a:	4b49      	ldr	r3, [pc, #292]	; (8003f80 <ImuGyroUpdate+0x278>)
 8003e5c:	ed93 8a02 	vldr	s16, [r3, #8]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc fb68 	bl	8000538 <__aeabi_f2d>
 8003e68:	a343      	add	r3, pc, #268	; (adr r3, 8003f78 <ImuGyroUpdate+0x270>)
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f7fc fce5 	bl	800083c <__aeabi_ddiv>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4614      	mov	r4, r2
 8003e78:	461d      	mov	r5, r3
 8003e7a:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <ImuGyroUpdate+0x278>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fc fb5a 	bl	8000538 <__aeabi_f2d>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4620      	mov	r0, r4
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f7fc f9f4 	bl	8000278 <__aeabi_dsub>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4614      	mov	r4, r2
 8003e96:	461d      	mov	r5, r3
 8003e98:	4b3a      	ldr	r3, [pc, #232]	; (8003f84 <ImuGyroUpdate+0x27c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fc fb4b 	bl	8000538 <__aeabi_f2d>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	f7fc fb9d 	bl	80005e8 <__aeabi_dmul>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4614      	mov	r4, r2
 8003eb4:	461d      	mov	r5, r3
 8003eb6:	4b34      	ldr	r3, [pc, #208]	; (8003f88 <ImuGyroUpdate+0x280>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fb3c 	bl	8000538 <__aeabi_f2d>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	f7fc fb8e 	bl	80005e8 <__aeabi_dmul>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	f7fc fe22 	bl	8000b1c <__aeabi_d2f>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	ee00 3a10 	vmov	s0, r3
 8003ede:	f007 fd9f 	bl	800ba20 <roundf>
 8003ee2:	eef0 6a40 	vmov.f32	s13, s0
 8003ee6:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <ImuGyroUpdate+0x280>)
 8003ee8:	ed93 7a00 	vldr	s14, [r3]
 8003eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ef0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <ImuGyroUpdate+0x278>)
 8003ef6:	edc3 7a02 	vstr	s15, [r3, #8]

	DebugGyroRaw.x = NewData.x / 16.4;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fc fb1b 	bl	8000538 <__aeabi_f2d>
 8003f02:	a31d      	add	r3, pc, #116	; (adr r3, 8003f78 <ImuGyroUpdate+0x270>)
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f7fc fc98 	bl	800083c <__aeabi_ddiv>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4610      	mov	r0, r2
 8003f12:	4619      	mov	r1, r3
 8003f14:	f7fc fe02 	bl	8000b1c <__aeabi_d2f>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <ImuGyroUpdate+0x284>)
 8003f1c:	6013      	str	r3, [r2, #0]
	DebugGyroRaw.y = NewData.y / 16.4;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fb09 	bl	8000538 <__aeabi_f2d>
 8003f26:	a314      	add	r3, pc, #80	; (adr r3, 8003f78 <ImuGyroUpdate+0x270>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f7fc fc86 	bl	800083c <__aeabi_ddiv>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	f7fc fdf0 	bl	8000b1c <__aeabi_d2f>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <ImuGyroUpdate+0x284>)
 8003f40:	6053      	str	r3, [r2, #4]
	DebugGyroRaw.z = NewData.z / 16.4;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fc faf7 	bl	8000538 <__aeabi_f2d>
 8003f4a:	a30b      	add	r3, pc, #44	; (adr r3, 8003f78 <ImuGyroUpdate+0x270>)
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f7fc fc74 	bl	800083c <__aeabi_ddiv>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f7fc fdde 	bl	8000b1c <__aeabi_d2f>
 8003f60:	4603      	mov	r3, r0
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <ImuGyroUpdate+0x284>)
 8003f64:	6093      	str	r3, [r2, #8]
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	ecbd 8b02 	vpop	{d8}
 8003f70:	bdb0      	pop	{r4, r5, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	f3af 8000 	nop.w
 8003f78:	66666666 	.word	0x66666666
 8003f7c:	40306666 	.word	0x40306666
 8003f80:	20000c60 	.word	0x20000c60
 8003f84:	20000014 	.word	0x20000014
 8003f88:	20000018 	.word	0x20000018
 8003f8c:	20000d80 	.word	0x20000d80

08003f90 <ImuMagUpdate>:
void ImuMagUpdate()
{
 8003f90:	b5b0      	push	{r4, r5, r7, lr}
 8003f92:	ed2d 8b02 	vpush	{d8}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
	axises NewData;
	ak09916_mag_read(&NewData);
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe fcaa 	bl	80028f6 <ak09916_mag_read>

	ResMag.x += roundf((((NewData.x * 0.15) - ResMag.x) * SYSTEM_IMU_MAG_FILTER) * 100) / 100;
 8003fa2:	4b6b      	ldr	r3, [pc, #428]	; (8004150 <ImuMagUpdate+0x1c0>)
 8003fa4:	ed93 8a00 	vldr	s16, [r3]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fc fac4 	bl	8000538 <__aeabi_f2d>
 8003fb0:	a363      	add	r3, pc, #396	; (adr r3, 8004140 <ImuMagUpdate+0x1b0>)
 8003fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb6:	f7fc fb17 	bl	80005e8 <__aeabi_dmul>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	461d      	mov	r5, r3
 8003fc2:	4b63      	ldr	r3, [pc, #396]	; (8004150 <ImuMagUpdate+0x1c0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fc fab6 	bl	8000538 <__aeabi_f2d>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	f7fc f950 	bl	8000278 <__aeabi_dsub>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	a359      	add	r3, pc, #356	; (adr r3, 8004148 <ImuMagUpdate+0x1b8>)
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f7fc faff 	bl	80005e8 <__aeabi_dmul>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4610      	mov	r0, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	4b57      	ldr	r3, [pc, #348]	; (8004154 <ImuMagUpdate+0x1c4>)
 8003ff8:	f7fc faf6 	bl	80005e8 <__aeabi_dmul>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	f7fc fd8a 	bl	8000b1c <__aeabi_d2f>
 8004008:	4603      	mov	r3, r0
 800400a:	ee00 3a10 	vmov	s0, r3
 800400e:	f007 fd07 	bl	800ba20 <roundf>
 8004012:	eeb0 7a40 	vmov.f32	s14, s0
 8004016:	eddf 6a50 	vldr	s13, [pc, #320]	; 8004158 <ImuMagUpdate+0x1c8>
 800401a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800401e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004022:	4b4b      	ldr	r3, [pc, #300]	; (8004150 <ImuMagUpdate+0x1c0>)
 8004024:	edc3 7a00 	vstr	s15, [r3]
	ResMag.y += roundf((((NewData.y * 0.15) - ResMag.y) * SYSTEM_IMU_MAG_FILTER) * 100) / 100;
 8004028:	4b49      	ldr	r3, [pc, #292]	; (8004150 <ImuMagUpdate+0x1c0>)
 800402a:	ed93 8a01 	vldr	s16, [r3, #4]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4618      	mov	r0, r3
 8004032:	f7fc fa81 	bl	8000538 <__aeabi_f2d>
 8004036:	a342      	add	r3, pc, #264	; (adr r3, 8004140 <ImuMagUpdate+0x1b0>)
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f7fc fad4 	bl	80005e8 <__aeabi_dmul>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4614      	mov	r4, r2
 8004046:	461d      	mov	r5, r3
 8004048:	4b41      	ldr	r3, [pc, #260]	; (8004150 <ImuMagUpdate+0x1c0>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc fa73 	bl	8000538 <__aeabi_f2d>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4620      	mov	r0, r4
 8004058:	4629      	mov	r1, r5
 800405a:	f7fc f90d 	bl	8000278 <__aeabi_dsub>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4610      	mov	r0, r2
 8004064:	4619      	mov	r1, r3
 8004066:	a338      	add	r3, pc, #224	; (adr r3, 8004148 <ImuMagUpdate+0x1b8>)
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f7fc fabc 	bl	80005e8 <__aeabi_dmul>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4610      	mov	r0, r2
 8004076:	4619      	mov	r1, r3
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	4b35      	ldr	r3, [pc, #212]	; (8004154 <ImuMagUpdate+0x1c4>)
 800407e:	f7fc fab3 	bl	80005e8 <__aeabi_dmul>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4610      	mov	r0, r2
 8004088:	4619      	mov	r1, r3
 800408a:	f7fc fd47 	bl	8000b1c <__aeabi_d2f>
 800408e:	4603      	mov	r3, r0
 8004090:	ee00 3a10 	vmov	s0, r3
 8004094:	f007 fcc4 	bl	800ba20 <roundf>
 8004098:	eeb0 7a40 	vmov.f32	s14, s0
 800409c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8004158 <ImuMagUpdate+0x1c8>
 80040a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040a4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80040a8:	4b29      	ldr	r3, [pc, #164]	; (8004150 <ImuMagUpdate+0x1c0>)
 80040aa:	edc3 7a01 	vstr	s15, [r3, #4]
	ResMag.z += roundf((((NewData.z * 0.15) - ResMag.z) * SYSTEM_IMU_MAG_FILTER) * 100) / 100;
 80040ae:	4b28      	ldr	r3, [pc, #160]	; (8004150 <ImuMagUpdate+0x1c0>)
 80040b0:	ed93 8a02 	vldr	s16, [r3, #8]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc fa3e 	bl	8000538 <__aeabi_f2d>
 80040bc:	a320      	add	r3, pc, #128	; (adr r3, 8004140 <ImuMagUpdate+0x1b0>)
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f7fc fa91 	bl	80005e8 <__aeabi_dmul>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4614      	mov	r4, r2
 80040cc:	461d      	mov	r5, r3
 80040ce:	4b20      	ldr	r3, [pc, #128]	; (8004150 <ImuMagUpdate+0x1c0>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fc fa30 	bl	8000538 <__aeabi_f2d>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4620      	mov	r0, r4
 80040de:	4629      	mov	r1, r5
 80040e0:	f7fc f8ca 	bl	8000278 <__aeabi_dsub>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4610      	mov	r0, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	a316      	add	r3, pc, #88	; (adr r3, 8004148 <ImuMagUpdate+0x1b8>)
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f7fc fa79 	bl	80005e8 <__aeabi_dmul>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	4b14      	ldr	r3, [pc, #80]	; (8004154 <ImuMagUpdate+0x1c4>)
 8004104:	f7fc fa70 	bl	80005e8 <__aeabi_dmul>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f7fc fd04 	bl	8000b1c <__aeabi_d2f>
 8004114:	4603      	mov	r3, r0
 8004116:	ee00 3a10 	vmov	s0, r3
 800411a:	f007 fc81 	bl	800ba20 <roundf>
 800411e:	eeb0 7a40 	vmov.f32	s14, s0
 8004122:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004158 <ImuMagUpdate+0x1c8>
 8004126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800412a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800412e:	4b08      	ldr	r3, [pc, #32]	; (8004150 <ImuMagUpdate+0x1c0>)
 8004130:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	ecbd 8b02 	vpop	{d8}
 800413e:	bdb0      	pop	{r4, r5, r7, pc}
 8004140:	33333333 	.word	0x33333333
 8004144:	3fc33333 	.word	0x3fc33333
 8004148:	9999999a 	.word	0x9999999a
 800414c:	3fb99999 	.word	0x3fb99999
 8004150:	20000da0 	.word	0x20000da0
 8004154:	40590000 	.word	0x40590000
 8004158:	42c80000 	.word	0x42c80000

0800415c <ImuInit>:
void ImuInit()
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
	gyroscopeSensitivity.axis.x = 1.0f;
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <ImuInit+0x70>)
 8004162:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004166:	601a      	str	r2, [r3, #0]
	gyroscopeSensitivity.axis.y = 1.0f;
 8004168:	4b18      	ldr	r3, [pc, #96]	; (80041cc <ImuInit+0x70>)
 800416a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800416e:	605a      	str	r2, [r3, #4]
	gyroscopeSensitivity.axis.z = 1.0f;
 8004170:	4b16      	ldr	r3, [pc, #88]	; (80041cc <ImuInit+0x70>)
 8004172:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004176:	609a      	str	r2, [r3, #8]

	accelerometerSensitivity.axis.x = 1.0f;
 8004178:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <ImuInit+0x74>)
 800417a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800417e:	601a      	str	r2, [r3, #0]
	accelerometerSensitivity.axis.y = 1.0f;
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <ImuInit+0x74>)
 8004182:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004186:	605a      	str	r2, [r3, #4]
	accelerometerSensitivity.axis.z = 1.0f;
 8004188:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <ImuInit+0x74>)
 800418a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800418e:	609a      	str	r2, [r3, #8]

	hardIronBias.axis.x = 0.0f;
 8004190:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <ImuInit+0x78>)
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
	hardIronBias.axis.y = 0.0f;
 8004198:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <ImuInit+0x78>)
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	605a      	str	r2, [r3, #4]
	hardIronBias.axis.z = 0.0f;
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <ImuInit+0x78>)
 80041a2:	f04f 0200 	mov.w	r2, #0
 80041a6:	609a      	str	r2, [r3, #8]

	FusionBiasInitialise(&fusionBias, 0.4f, samplePeriod);
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <ImuInit+0x7c>)
 80041aa:	edd3 7a00 	vldr	s15, [r3]
 80041ae:	eef0 0a67 	vmov.f32	s1, s15
 80041b2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80041dc <ImuInit+0x80>
 80041b6:	480a      	ldr	r0, [pc, #40]	; (80041e0 <ImuInit+0x84>)
 80041b8:	f7fe f97e 	bl	80024b8 <FusionBiasInitialise>
	FusionAhrsInitialise(&fusionAhrs, 0.6f);
 80041bc:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80041e4 <ImuInit+0x88>
 80041c0:	4809      	ldr	r0, [pc, #36]	; (80041e8 <ImuInit+0x8c>)
 80041c2:	f7fc fe77 	bl	8000eb4 <FusionAhrsInitialise>
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000de0 	.word	0x20000de0
 80041d0:	20000e24 	.word	0x20000e24
 80041d4:	20000df0 	.word	0x20000df0
 80041d8:	20000004 	.word	0x20000004
 80041dc:	3ecccccd 	.word	0x3ecccccd
 80041e0:	20000d54 	.word	0x20000d54
 80041e4:	3f19999a 	.word	0x3f19999a
 80041e8:	20000d08 	.word	0x20000d08

080041ec <ImuUpdate>:
void ImuUpdate()
{
 80041ec:	b5b0      	push	{r4, r5, r7, lr}
 80041ee:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 80041f2:	af00      	add	r7, sp, #0
	uncalibratedGyroscope.axis.x = ResGyro.x;
 80041f4:	4bd6      	ldr	r3, [pc, #856]	; (8004550 <ImuUpdate+0x364>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4ad6      	ldr	r2, [pc, #856]	; (8004554 <ImuUpdate+0x368>)
 80041fa:	6013      	str	r3, [r2, #0]
	uncalibratedGyroscope.axis.y = ResGyro.y;
 80041fc:	4bd4      	ldr	r3, [pc, #848]	; (8004550 <ImuUpdate+0x364>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4ad4      	ldr	r2, [pc, #848]	; (8004554 <ImuUpdate+0x368>)
 8004202:	6053      	str	r3, [r2, #4]
	uncalibratedGyroscope.axis.z = ResGyro.z;
 8004204:	4bd2      	ldr	r3, [pc, #840]	; (8004550 <ImuUpdate+0x364>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4ad2      	ldr	r2, [pc, #840]	; (8004554 <ImuUpdate+0x368>)
 800420a:	6093      	str	r3, [r2, #8]

	uncalibratedAccelerometer.axis.x = ResAccel.x;
 800420c:	4bd2      	ldr	r3, [pc, #840]	; (8004558 <ImuUpdate+0x36c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4ad2      	ldr	r2, [pc, #840]	; (800455c <ImuUpdate+0x370>)
 8004212:	6013      	str	r3, [r2, #0]
	uncalibratedAccelerometer.axis.y = ResAccel.y;
 8004214:	4bd0      	ldr	r3, [pc, #832]	; (8004558 <ImuUpdate+0x36c>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4ad0      	ldr	r2, [pc, #832]	; (800455c <ImuUpdate+0x370>)
 800421a:	6053      	str	r3, [r2, #4]
	uncalibratedAccelerometer.axis.z = ResAccel.z;
 800421c:	4bce      	ldr	r3, [pc, #824]	; (8004558 <ImuUpdate+0x36c>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4ace      	ldr	r2, [pc, #824]	; (800455c <ImuUpdate+0x370>)
 8004222:	6093      	str	r3, [r2, #8]

	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8004224:	4bce      	ldr	r3, [pc, #824]	; (8004560 <ImuUpdate+0x374>)
 8004226:	f507 74e2 	add.w	r4, r7, #452	; 0x1c4
 800422a:	461d      	mov	r5, r3
 800422c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800422e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004250:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004254:	4abf      	ldr	r2, [pc, #764]	; (8004554 <ImuUpdate+0x368>)
 8004256:	ca07      	ldmia	r2, {r0, r1, r2}
 8004258:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800425c:	1d3b      	adds	r3, r7, #4
 800425e:	461d      	mov	r5, r3
 8004260:	f507 74e2 	add.w	r4, r7, #452	; 0x1c4
 8004264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800426a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	602b      	str	r3, [r5, #0]
 8004270:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8004274:	4abb      	ldr	r2, [pc, #748]	; (8004564 <ImuUpdate+0x378>)
 8004276:	ca07      	ldmia	r2, {r0, r1, r2}
 8004278:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800427c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004280:	461c      	mov	r4, r3
 8004282:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800428a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800428e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004292:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8004296:	ca07      	ldmia	r2, {r0, r1, r2}
 8004298:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800429c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80042a0:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80042a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80042a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80042aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80042ae:	ed93 7a00 	vldr	s14, [r3]
 80042b2:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80042b6:	edd3 7a00 	vldr	s15, [r3]
 80042ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042be:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80042c2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80042c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80042ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80042ce:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80042d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80042d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042da:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80042de:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80042e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80042e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80042ea:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80042ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80042f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042f6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80042fa:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80042fe:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8004302:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004306:	ca07      	ldmia	r2, {r0, r1, r2}
 8004308:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800430c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8004310:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8004314:	ca07      	ldmia	r2, {r0, r1, r2}
 8004316:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800431a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800431e:	461c      	mov	r4, r3
 8004320:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8004324:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004328:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800432c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004330:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8004334:	ca07      	ldmia	r2, {r0, r1, r2}
 8004336:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800433a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800433e:	ed93 7a00 	vldr	s14, [r3]
 8004342:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004346:	edd3 7a00 	vldr	s15, [r3]
 800434a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004352:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8004356:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800435a:	ed93 7a01 	vldr	s14, [r3, #4]
 800435e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8004362:	edd3 7a01 	vldr	s15, [r3, #4]
 8004366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800436e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8004372:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8004376:	ed93 7a02 	vldr	s14, [r3, #8]
 800437a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800437e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004386:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800438a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800438e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8004392:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8004396:	ca07      	ldmia	r2, {r0, r1, r2}
 8004398:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800439c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80043a0:	f507 7219 	add.w	r2, r7, #612	; 0x264
 80043a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80043a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80043aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	4614      	mov	r4, r2
 80043b2:	461d      	mov	r5, r3
 80043b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	6023      	str	r3, [r4, #0]
 80043c0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80043c4:	461c      	mov	r4, r3
 80043c6:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80043ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 80043d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043d6:	ed93 7a00 	vldr	s14, [r3]
 80043da:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80043de:	edd3 7a00 	vldr	s15, [r3]
 80043e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80043ee:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80043f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80043f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004402:	edd3 6a02 	vldr	s13, [r3, #8]
 8004406:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800440a:	edd3 7a02 	vldr	s15, [r3, #8]
 800440e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004416:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800441a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800441e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004422:	ed93 7a03 	vldr	s14, [r3, #12]
 8004426:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800442a:	edd3 7a00 	vldr	s15, [r3]
 800442e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004436:	edd3 6a04 	vldr	s13, [r3, #16]
 800443a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800443e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800444a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800444e:	edd3 6a05 	vldr	s13, [r3, #20]
 8004452:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004456:	edd3 7a02 	vldr	s15, [r3, #8]
 800445a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800445e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004462:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004466:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800446a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800446e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004472:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8004476:	edd3 7a00 	vldr	s15, [r3]
 800447a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800447e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004482:	edd3 6a07 	vldr	s13, [r3, #28]
 8004486:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800448a:	edd3 7a01 	vldr	s15, [r3, #4]
 800448e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800449a:	edd3 6a08 	vldr	s13, [r3, #32]
 800449e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80044a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80044a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80044b2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80044b6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80044ba:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80044be:	ca07      	ldmia	r2, {r0, r1, r2}
 80044c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80044c4:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80044c8:	f507 721c 	add.w	r2, r7, #624	; 0x270
 80044cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80044ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 80044d2:	bf00      	nop
 80044d4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80044d8:	f507 7225 	add.w	r2, r7, #660	; 0x294
 80044dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80044de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 80044e2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <ImuUpdate+0x374>)
 80044e8:	461c      	mov	r4, r3
 80044ea:	4615      	mov	r5, r2
 80044ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	605a      	str	r2, [r3, #4]
 800450c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	609a      	str	r2, [r3, #8]
 8004516:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800451a:	4a10      	ldr	r2, [pc, #64]	; (800455c <ImuUpdate+0x370>)
 800451c:	ca07      	ldmia	r2, {r0, r1, r2}
 800451e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004522:	1d3a      	adds	r2, r7, #4
 8004524:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8004528:	4614      	mov	r4, r2
 800452a:	461d      	mov	r5, r3
 800452c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800452e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800453c:	4a0a      	ldr	r2, [pc, #40]	; (8004568 <ImuUpdate+0x37c>)
 800453e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004540:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004544:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004548:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800454c:	ca07      	ldmia	r2, {r0, r1, r2}
 800454e:	e00d      	b.n	800456c <ImuUpdate+0x380>
 8004550:	20000c60 	.word	0x20000c60
 8004554:	20000e18 	.word	0x20000e18
 8004558:	20000d48 	.word	0x20000d48
 800455c:	20000dac 	.word	0x20000dac
 8004560:	0800db40 	.word	0x0800db40
 8004564:	20000de0 	.word	0x20000de0
 8004568:	20000e24 	.word	0x20000e24
 800456c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004570:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004574:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8004578:	ca07      	ldmia	r2, {r0, r1, r2}
 800457a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800457e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004582:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8004586:	ca07      	ldmia	r2, {r0, r1, r2}
 8004588:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 800458c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004590:	ed93 7a00 	vldr	s14, [r3]
 8004594:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004598:	edd3 7a00 	vldr	s15, [r3]
 800459c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045a4:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80045a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80045ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80045b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80045b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80045b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045c0:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80045c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80045c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80045cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80045d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80045d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80045dc:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80045e0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80045e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80045e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80045ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80045ee:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80045f2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80045f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80045f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80045fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004600:	461c      	mov	r4, r3
 8004602:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8004606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800460a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800460e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004612:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8004616:	ca07      	ldmia	r2, {r0, r1, r2}
 8004618:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800461c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004620:	ed93 7a00 	vldr	s14, [r3]
 8004624:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004628:	edd3 7a00 	vldr	s15, [r3]
 800462c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004630:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004634:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8004638:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800463c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004640:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004644:	edd3 7a01 	vldr	s15, [r3, #4]
 8004648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004650:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8004654:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004658:	ed93 7a02 	vldr	s14, [r3, #8]
 800465c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004660:	edd3 7a02 	vldr	s15, [r3, #8]
 8004664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004668:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800466c:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8004670:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004674:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8004678:	ca07      	ldmia	r2, {r0, r1, r2}
 800467a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800467e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8004682:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8004686:	ca07      	ldmia	r2, {r0, r1, r2}
 8004688:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800468c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	4614      	mov	r4, r2
 8004694:	461d      	mov	r5, r3
 8004696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800469a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800469c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800469e:	682b      	ldr	r3, [r5, #0]
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80046a6:	461c      	mov	r4, r3
 80046a8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80046ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 80046b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046b8:	ed93 7a00 	vldr	s14, [r3]
 80046bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80046c0:	edd3 7a00 	vldr	s15, [r3]
 80046c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80046d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80046d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80046d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80046e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80046ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80046f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80046fc:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8004700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004704:	ed93 7a03 	vldr	s14, [r3, #12]
 8004708:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800470c:	edd3 7a00 	vldr	s15, [r3]
 8004710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004718:	edd3 6a04 	vldr	s13, [r3, #16]
 800471c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004720:	edd3 7a01 	vldr	s15, [r3, #4]
 8004724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800472c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004730:	edd3 6a05 	vldr	s13, [r3, #20]
 8004734:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004738:	edd3 7a02 	vldr	s15, [r3, #8]
 800473c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004744:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004748:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800474c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004750:	ed93 7a06 	vldr	s14, [r3, #24]
 8004754:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004758:	edd3 7a00 	vldr	s15, [r3]
 800475c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004764:	edd3 6a07 	vldr	s13, [r3, #28]
 8004768:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800476c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800477c:	edd3 6a08 	vldr	s13, [r3, #32]
 8004780:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004784:	edd3 7a02 	vldr	s15, [r3, #8]
 8004788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800478c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004790:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004794:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8004798:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800479c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80047a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80047a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80047a6:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80047aa:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80047ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80047b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80047b4:	bf00      	nop
 80047b6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80047ba:	461c      	mov	r4, r3
 80047bc:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80047c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	calibratedGyroscope = FusionBiasUpdate(&fusionBias, calibratedGyroscope);
 80047c8:	edd7 6a7a 	vldr	s13, [r7, #488]	; 0x1e8
 80047cc:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 80047d0:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 80047d4:	eeb0 0a66 	vmov.f32	s0, s13
 80047d8:	eef0 0a47 	vmov.f32	s1, s14
 80047dc:	eeb0 1a67 	vmov.f32	s2, s15
 80047e0:	48a7      	ldr	r0, [pc, #668]	; (8004a80 <ImuUpdate+0x894>)
 80047e2:	f7fd fea5 	bl	8002530 <FusionBiasUpdate>
 80047e6:	eef0 6a40 	vmov.f32	s13, s0
 80047ea:	eeb0 7a60 	vmov.f32	s14, s1
 80047ee:	eef0 7a41 	vmov.f32	s15, s2
 80047f2:	edc7 6a7a 	vstr	s13, [r7, #488]	; 0x1e8
 80047f6:	ed87 7a7b 	vstr	s14, [r7, #492]	; 0x1ec
 80047fa:	edc7 7a7c 	vstr	s15, [r7, #496]	; 0x1f0
	FusionAhrsUpdateWithoutMagnetometer(&fusionAhrs, calibratedGyroscope, calibratedAccelerometer, samplePeriod);
 80047fe:	4ba1      	ldr	r3, [pc, #644]	; (8004a84 <ImuUpdate+0x898>)
 8004800:	edd3 4a00 	vldr	s9, [r3]
 8004804:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004808:	ed93 5a00 	vldr	s10, [r3]
 800480c:	edd3 5a01 	vldr	s11, [r3, #4]
 8004810:	ed93 6a02 	vldr	s12, [r3, #8]
 8004814:	edd7 6a7a 	vldr	s13, [r7, #488]	; 0x1e8
 8004818:	ed97 7a7b 	vldr	s14, [r7, #492]	; 0x1ec
 800481c:	edd7 7a7c 	vldr	s15, [r7, #496]	; 0x1f0
 8004820:	eeb0 3a64 	vmov.f32	s6, s9
 8004824:	eef0 1a45 	vmov.f32	s3, s10
 8004828:	eeb0 2a65 	vmov.f32	s4, s11
 800482c:	eef0 2a46 	vmov.f32	s5, s12
 8004830:	eeb0 0a66 	vmov.f32	s0, s13
 8004834:	eef0 0a47 	vmov.f32	s1, s14
 8004838:	eeb0 1a67 	vmov.f32	s2, s15
 800483c:	4892      	ldr	r0, [pc, #584]	; (8004a88 <ImuUpdate+0x89c>)
 800483e:	f7fd fbff 	bl	8002040 <FusionAhrsUpdateWithoutMagnetometer>
	eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(&fusionAhrs));
 8004842:	4891      	ldr	r0, [pc, #580]	; (8004a88 <ImuUpdate+0x89c>)
 8004844:	f7fd fc66 	bl	8002114 <FusionAhrsGetQuaternion>
 8004848:	eeb0 6a40 	vmov.f32	s12, s0
 800484c:	eef0 6a60 	vmov.f32	s13, s1
 8004850:	eeb0 7a41 	vmov.f32	s14, s2
 8004854:	eef0 7a61 	vmov.f32	s15, s3
 8004858:	ed87 6a7d 	vstr	s12, [r7, #500]	; 0x1f4
 800485c:	edc7 6a7e 	vstr	s13, [r7, #504]	; 0x1f8
 8004860:	ed87 7a7f 	vstr	s14, [r7, #508]	; 0x1fc
 8004864:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
 8004868:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800486c:	461c      	mov	r4, r3
 800486e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8004872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 8004878:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800487c:	ed93 7a00 	vldr	s14, [r3]
 8004880:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004884:	edd3 7a00 	vldr	s15, [r3]
 8004888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004894:	edc7 7aab 	vstr	s15, [r7, #684]	; 0x2ac
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8004898:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800489c:	ed93 7a02 	vldr	s14, [r3, #8]
 80048a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80048a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048b0:	edd3 6a00 	vldr	s13, [r3]
 80048b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80048bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80048c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80048cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80048d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048d8:	edd7 7aab 	vldr	s15, [r7, #684]	; 0x2ac
 80048dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048e0:	eef0 0a67 	vmov.f32	s1, s15
 80048e4:	eeb0 0a66 	vmov.f32	s0, s13
 80048e8:	f007 f934 	bl	800bb54 <atan2f>
 80048ec:	eef0 7a40 	vmov.f32	s15, s0
 80048f0:	edc7 7aaa 	vstr	s15, [r7, #680]	; 0x2a8
    return radians * (180.0f / (float) M_PI);
 80048f4:	edd7 7aaa 	vldr	s15, [r7, #680]	; 0x2a8
 80048f8:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8004a8c <ImuUpdate+0x8a0>
 80048fc:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8004900:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004904:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8004908:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800490c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004910:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004914:	edd3 7a03 	vldr	s15, [r3, #12]
 8004918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800491c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004920:	edd3 6a00 	vldr	s13, [r3]
 8004924:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004928:	edd3 7a02 	vldr	s15, [r3, #8]
 800492c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004934:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004938:	eeb0 0a67 	vmov.f32	s0, s15
 800493c:	f007 f8d8 	bl	800baf0 <asinf>
 8004940:	eef0 7a40 	vmov.f32	s15, s0
 8004944:	eef1 7a67 	vneg.f32	s15, s15
 8004948:	edc7 7aa9 	vstr	s15, [r7, #676]	; 0x2a4
    return radians * (180.0f / (float) M_PI);
 800494c:	edd7 7aa9 	vldr	s15, [r7, #676]	; 0x2a4
 8004950:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004a8c <ImuUpdate+0x8a0>
 8004954:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8004958:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800495c:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8004960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004964:	ed93 7a01 	vldr	s14, [r3, #4]
 8004968:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800496c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004974:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004978:	edd3 6a00 	vldr	s13, [r3]
 800497c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004980:	edd3 7a03 	vldr	s15, [r3, #12]
 8004984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004988:	ee77 6a67 	vsub.f32	s13, s14, s15
 800498c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004990:	ed93 7a01 	vldr	s14, [r3, #4]
 8004994:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004998:	edd3 7a01 	vldr	s15, [r3, #4]
 800499c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049a0:	edd7 7aab 	vldr	s15, [r7, #684]	; 0x2ac
 80049a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049a8:	eef0 0a67 	vmov.f32	s1, s15
 80049ac:	eeb0 0a66 	vmov.f32	s0, s13
 80049b0:	f007 f8d0 	bl	800bb54 <atan2f>
 80049b4:	eef0 7a40 	vmov.f32	s15, s0
 80049b8:	edc7 7aa8 	vstr	s15, [r7, #672]	; 0x2a0
    return radians * (180.0f / (float) M_PI);
 80049bc:	edd7 7aa8 	vldr	s15, [r7, #672]	; 0x2a0
 80049c0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004a8c <ImuUpdate+0x8a0>
 80049c4:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 80049c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80049cc:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 80049d0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80049d4:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80049d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80049da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80049de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80049e2:	461c      	mov	r4, r3
 80049e4:	f507 7301 	add.w	r3, r7, #516	; 0x204
 80049e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049f0:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <ImuUpdate+0x8a4>)
 80049f2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80049f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80049f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	eulerAngles.angle.pitch = roundf(eulerAngles.angle.pitch * 1000) / 1000;
 80049fc:	4b24      	ldr	r3, [pc, #144]	; (8004a90 <ImuUpdate+0x8a4>)
 80049fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a02:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004a94 <ImuUpdate+0x8a8>
 8004a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a0e:	f007 f807 	bl	800ba20 <roundf>
 8004a12:	eeb0 7a40 	vmov.f32	s14, s0
 8004a16:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004a94 <ImuUpdate+0x8a8>
 8004a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a1e:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <ImuUpdate+0x8a4>)
 8004a20:	edc3 7a01 	vstr	s15, [r3, #4]
	eulerAngles.angle.roll = roundf(eulerAngles.angle.roll * 1000) / 1000;
 8004a24:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <ImuUpdate+0x8a4>)
 8004a26:	edd3 7a00 	vldr	s15, [r3]
 8004a2a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004a94 <ImuUpdate+0x8a8>
 8004a2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a32:	eeb0 0a67 	vmov.f32	s0, s15
 8004a36:	f006 fff3 	bl	800ba20 <roundf>
 8004a3a:	eeb0 7a40 	vmov.f32	s14, s0
 8004a3e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8004a94 <ImuUpdate+0x8a8>
 8004a42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <ImuUpdate+0x8a4>)
 8004a48:	edc3 7a00 	vstr	s15, [r3]
	eulerAngles.angle.yaw = roundf(eulerAngles.angle.yaw * 1000) / 1000;
 8004a4c:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <ImuUpdate+0x8a4>)
 8004a4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a52:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004a94 <ImuUpdate+0x8a8>
 8004a56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a5e:	f006 ffdf 	bl	800ba20 <roundf>
 8004a62:	eeb0 7a40 	vmov.f32	s14, s0
 8004a66:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004a94 <ImuUpdate+0x8a8>
 8004a6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a6e:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <ImuUpdate+0x8a4>)
 8004a70:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004a74:	bf00      	nop
 8004a76:	f507 772c 	add.w	r7, r7, #688	; 0x2b0
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000d54 	.word	0x20000d54
 8004a84:	20000004 	.word	0x20000004
 8004a88:	20000d08 	.word	0x20000d08
 8004a8c:	42652ee0 	.word	0x42652ee0
 8004a90:	20000c6c 	.word	0x20000c6c
 8004a94:	447a0000 	.word	0x447a0000

08004a98 <StepControl>:
void StepControl(uint8_t dir, uint32_t period, uint32_t steps)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PIN, 1);
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004aac:	4817      	ldr	r0, [pc, #92]	; (8004b0c <StepControl+0x74>)
 8004aae:	f003 fac1 	bl	8008034 <HAL_GPIO_WritePin>
	for(int i = 0; i <= steps; i++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e01b      	b.n	8004af0 <StepControl+0x58>
	{
		HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_DIR_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_DIR_PIN, dir);
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	461a      	mov	r2, r3
 8004abc:	2120      	movs	r1, #32
 8004abe:	4814      	ldr	r0, [pc, #80]	; (8004b10 <StepControl+0x78>)
 8004ac0:	f003 fab8 	bl	8008034 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PIN, i);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2110      	movs	r1, #16
 8004acc:	4810      	ldr	r0, [pc, #64]	; (8004b10 <StepControl+0x78>)
 8004ace:	f003 fab1 	bl	8008034 <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		DelayUs(1);
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	f000 fb86 	bl	80051e4 <DelayUs>
		HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PIN, 0);
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2110      	movs	r1, #16
 8004adc:	480c      	ldr	r0, [pc, #48]	; (8004b10 <StepControl+0x78>)
 8004ade:	f003 faa9 	bl	8008034 <HAL_GPIO_WritePin>
		//HAL_Delay(period);
		DelayUs(1000);
 8004ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ae6:	f000 fb7d 	bl	80051e4 <DelayUs>
	for(int i = 0; i <= steps; i++)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	3301      	adds	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d2df      	bcs.n	8004ab8 <StepControl+0x20>
	}
	HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PIN, 0);
 8004af8:	2200      	movs	r2, #0
 8004afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004afe:	4803      	ldr	r0, [pc, #12]	; (8004b0c <StepControl+0x74>)
 8004b00:	f003 fa98 	bl	8008034 <HAL_GPIO_WritePin>
}
 8004b04:	bf00      	nop
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40020800 	.word	0x40020800

08004b14 <MotopStop>:
void MotopStop()
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_STEP_PIN, 0);
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2110      	movs	r1, #16
 8004b1c:	4805      	ldr	r0, [pc, #20]	; (8004b34 <MotopStop+0x20>)
 8004b1e:	f003 fa89 	bl	8008034 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PORT, SYSTEM_HARDWARE_STEPPER_MOTOR_EN_PIN, 0);
 8004b22:	2200      	movs	r2, #0
 8004b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b28:	4803      	ldr	r0, [pc, #12]	; (8004b38 <MotopStop+0x24>)
 8004b2a:	f003 fa83 	bl	8008034 <HAL_GPIO_WritePin>
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40020800 	.word	0x40020800
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	00000000 	.word	0x00000000

08004b40 <BalancePrepare>:
void BalancePrepare()
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
	Front = BTControl.Front;
 8004b46:	4bb4      	ldr	r3, [pc, #720]	; (8004e18 <BalancePrepare+0x2d8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4ab4      	ldr	r2, [pc, #720]	; (8004e1c <BalancePrepare+0x2dc>)
 8004b4c:	6013      	str	r3, [r2, #0]
	Turn = BTControl.Turn;
 8004b4e:	4bb2      	ldr	r3, [pc, #712]	; (8004e18 <BalancePrepare+0x2d8>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	4ab3      	ldr	r2, [pc, #716]	; (8004e20 <BalancePrepare+0x2e0>)
 8004b54:	6013      	str	r3, [r2, #0]

	if(LowDiagnostic.Battery)
 8004b56:	4bb3      	ldr	r3, [pc, #716]	; (8004e24 <BalancePrepare+0x2e4>)
 8004b58:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b64:	d007      	beq.n	8004b76 <BalancePrepare+0x36>
	{
		Front = 0;
 8004b66:	4bad      	ldr	r3, [pc, #692]	; (8004e1c <BalancePrepare+0x2dc>)
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
		Turn = 0;
 8004b6e:	4bac      	ldr	r3, [pc, #688]	; (8004e20 <BalancePrepare+0x2e0>)
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
	}

	if ((fabsf(Front) < 0.001) && (fabsf(Turn) < 0.001) && (fabsf(SpeedLinear) < 0.02) && (fabsf(LeftSpeed - RightSpeed) < 0.02))
 8004b76:	4ba9      	ldr	r3, [pc, #676]	; (8004e1c <BalancePrepare+0x2dc>)
 8004b78:	edd3 7a00 	vldr	s15, [r3]
 8004b7c:	eef0 7ae7 	vabs.f32	s15, s15
 8004b80:	ee17 0a90 	vmov	r0, s15
 8004b84:	f7fb fcd8 	bl	8000538 <__aeabi_f2d>
 8004b88:	a39d      	add	r3, pc, #628	; (adr r3, 8004e00 <BalancePrepare+0x2c0>)
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f7fb ff9d 	bl	8000acc <__aeabi_dcmplt>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d06a      	beq.n	8004c6e <BalancePrepare+0x12e>
 8004b98:	4ba1      	ldr	r3, [pc, #644]	; (8004e20 <BalancePrepare+0x2e0>)
 8004b9a:	edd3 7a00 	vldr	s15, [r3]
 8004b9e:	eef0 7ae7 	vabs.f32	s15, s15
 8004ba2:	ee17 0a90 	vmov	r0, s15
 8004ba6:	f7fb fcc7 	bl	8000538 <__aeabi_f2d>
 8004baa:	a395      	add	r3, pc, #596	; (adr r3, 8004e00 <BalancePrepare+0x2c0>)
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f7fb ff8c 	bl	8000acc <__aeabi_dcmplt>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d059      	beq.n	8004c6e <BalancePrepare+0x12e>
 8004bba:	4b9b      	ldr	r3, [pc, #620]	; (8004e28 <BalancePrepare+0x2e8>)
 8004bbc:	edd3 7a00 	vldr	s15, [r3]
 8004bc0:	eef0 7ae7 	vabs.f32	s15, s15
 8004bc4:	ee17 0a90 	vmov	r0, s15
 8004bc8:	f7fb fcb6 	bl	8000538 <__aeabi_f2d>
 8004bcc:	a38e      	add	r3, pc, #568	; (adr r3, 8004e08 <BalancePrepare+0x2c8>)
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	f7fb ff7b 	bl	8000acc <__aeabi_dcmplt>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d048      	beq.n	8004c6e <BalancePrepare+0x12e>
 8004bdc:	4b93      	ldr	r3, [pc, #588]	; (8004e2c <BalancePrepare+0x2ec>)
 8004bde:	ed93 7a00 	vldr	s14, [r3]
 8004be2:	4b93      	ldr	r3, [pc, #588]	; (8004e30 <BalancePrepare+0x2f0>)
 8004be4:	edd3 7a00 	vldr	s15, [r3]
 8004be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bec:	eef0 7ae7 	vabs.f32	s15, s15
 8004bf0:	ee17 0a90 	vmov	r0, s15
 8004bf4:	f7fb fca0 	bl	8000538 <__aeabi_f2d>
 8004bf8:	a383      	add	r3, pc, #524	; (adr r3, 8004e08 <BalancePrepare+0x2c8>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb ff65 	bl	8000acc <__aeabi_dcmplt>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d032      	beq.n	8004c6e <BalancePrepare+0x12e>
	{
		if ((LowDiagnostic.Battery < 4) && BalanceActiveDemand)
 8004c08:	4b86      	ldr	r3, [pc, #536]	; (8004e24 <BalancePrepare+0x2e4>)
 8004c0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c0e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1a:	d507      	bpl.n	8004c2c <BalancePrepare+0xec>
 8004c1c:	4b85      	ldr	r3, [pc, #532]	; (8004e34 <BalancePrepare+0x2f4>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <BalancePrepare+0xec>
		{
			BalanceActiveDemand = false;
 8004c24:	4b83      	ldr	r3, [pc, #524]	; (8004e34 <BalancePrepare+0x2f4>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e020      	b.n	8004c6e <BalancePrepare+0x12e>
		}
		else if (LowDiagnostic.Battery > 8)
 8004c2c:	4b7d      	ldr	r3, [pc, #500]	; (8004e24 <BalancePrepare+0x2e4>)
 8004c2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c32:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3e:	dd0b      	ble.n	8004c58 <BalancePrepare+0x118>
		{
			BalanceActiveDemand = BTControl.Drive;
 8004c40:	4b75      	ldr	r3, [pc, #468]	; (8004e18 <BalancePrepare+0x2d8>)
 8004c42:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4a:	edc7 7a01 	vstr	s15, [r7, #4]
 8004c4e:	793b      	ldrb	r3, [r7, #4]
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	4b78      	ldr	r3, [pc, #480]	; (8004e34 <BalancePrepare+0x2f4>)
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e00a      	b.n	8004c6e <BalancePrepare+0x12e>
		}
		else if (!BTControl.Drive)
 8004c58:	4b6f      	ldr	r3, [pc, #444]	; (8004e18 <BalancePrepare+0x2d8>)
 8004c5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c66:	d102      	bne.n	8004c6e <BalancePrepare+0x12e>
		{
			BalanceActiveDemand = false;
 8004c68:	4b72      	ldr	r3, [pc, #456]	; (8004e34 <BalancePrepare+0x2f4>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	701a      	strb	r2, [r3, #0]
		}
	}

	Turn = (Turn > 90) ? 90 : Turn;
 8004c6e:	4b6c      	ldr	r3, [pc, #432]	; (8004e20 <BalancePrepare+0x2e0>)
 8004c70:	edd3 7a00 	vldr	s15, [r3]
 8004c74:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004e38 <BalancePrepare+0x2f8>
 8004c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c80:	dd01      	ble.n	8004c86 <BalancePrepare+0x146>
 8004c82:	4b6e      	ldr	r3, [pc, #440]	; (8004e3c <BalancePrepare+0x2fc>)
 8004c84:	e001      	b.n	8004c8a <BalancePrepare+0x14a>
 8004c86:	4b66      	ldr	r3, [pc, #408]	; (8004e20 <BalancePrepare+0x2e0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a65      	ldr	r2, [pc, #404]	; (8004e20 <BalancePrepare+0x2e0>)
 8004c8c:	6013      	str	r3, [r2, #0]
	Turn = (Turn < -90) ? -90 : Turn;
 8004c8e:	4b64      	ldr	r3, [pc, #400]	; (8004e20 <BalancePrepare+0x2e0>)
 8004c90:	edd3 7a00 	vldr	s15, [r3]
 8004c94:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8004e40 <BalancePrepare+0x300>
 8004c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca0:	d501      	bpl.n	8004ca6 <BalancePrepare+0x166>
 8004ca2:	4b68      	ldr	r3, [pc, #416]	; (8004e44 <BalancePrepare+0x304>)
 8004ca4:	e001      	b.n	8004caa <BalancePrepare+0x16a>
 8004ca6:	4b5e      	ldr	r3, [pc, #376]	; (8004e20 <BalancePrepare+0x2e0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a5d      	ldr	r2, [pc, #372]	; (8004e20 <BalancePrepare+0x2e0>)
 8004cac:	6013      	str	r3, [r2, #0]
	Front = (Front > 2) ? 2 : Front;
 8004cae:	4b5b      	ldr	r3, [pc, #364]	; (8004e1c <BalancePrepare+0x2dc>)
 8004cb0:	edd3 7a00 	vldr	s15, [r3]
 8004cb4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc0:	dd02      	ble.n	8004cc8 <BalancePrepare+0x188>
 8004cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cc6:	e001      	b.n	8004ccc <BalancePrepare+0x18c>
 8004cc8:	4b54      	ldr	r3, [pc, #336]	; (8004e1c <BalancePrepare+0x2dc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a53      	ldr	r2, [pc, #332]	; (8004e1c <BalancePrepare+0x2dc>)
 8004cce:	6013      	str	r3, [r2, #0]
	Front = (Front < -0.4) ? -0.4 : Front;
 8004cd0:	4b52      	ldr	r3, [pc, #328]	; (8004e1c <BalancePrepare+0x2dc>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fb fc2f 	bl	8000538 <__aeabi_f2d>
 8004cda:	a34d      	add	r3, pc, #308	; (adr r3, 8004e10 <BalancePrepare+0x2d0>)
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f7fb fef4 	bl	8000acc <__aeabi_dcmplt>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <BalancePrepare+0x1ae>
 8004cea:	4b57      	ldr	r3, [pc, #348]	; (8004e48 <BalancePrepare+0x308>)
 8004cec:	e001      	b.n	8004cf2 <BalancePrepare+0x1b2>
 8004cee:	4b4b      	ldr	r3, [pc, #300]	; (8004e1c <BalancePrepare+0x2dc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a4a      	ldr	r2, [pc, #296]	; (8004e1c <BalancePrepare+0x2dc>)
 8004cf4:	6013      	str	r3, [r2, #0]

	if(!BalanceActiveDemand)
 8004cf6:	4b4f      	ldr	r3, [pc, #316]	; (8004e34 <BalancePrepare+0x2f4>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d12f      	bne.n	8004d5e <BalancePrepare+0x21e>
	{
		if(!FootButtonDown && !FootButtonUp)
 8004cfe:	4b53      	ldr	r3, [pc, #332]	; (8004e4c <BalancePrepare+0x30c>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10c      	bne.n	8004d20 <BalancePrepare+0x1e0>
 8004d06:	4b52      	ldr	r3, [pc, #328]	; (8004e50 <BalancePrepare+0x310>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d108      	bne.n	8004d20 <BalancePrepare+0x1e0>
		{
			StepControl(0, 1, 10);
 8004d0e:	220a      	movs	r2, #10
 8004d10:	2101      	movs	r1, #1
 8004d12:	2000      	movs	r0, #0
 8004d14:	f7ff fec0 	bl	8004a98 <StepControl>
			FootDone = false;
 8004d18:	4b4e      	ldr	r3, [pc, #312]	; (8004e54 <BalancePrepare+0x314>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e051      	b.n	8004dc4 <BalancePrepare+0x284>
		} else if (FootButtonDown && !FootButtonUp)
 8004d20:	4b4a      	ldr	r3, [pc, #296]	; (8004e4c <BalancePrepare+0x30c>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d009      	beq.n	8004d3c <BalancePrepare+0x1fc>
 8004d28:	4b49      	ldr	r3, [pc, #292]	; (8004e50 <BalancePrepare+0x310>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <BalancePrepare+0x1fc>
		{
			MotopStop();
 8004d30:	f7ff fef0 	bl	8004b14 <MotopStop>
			FootDone = true;
 8004d34:	4b47      	ldr	r3, [pc, #284]	; (8004e54 <BalancePrepare+0x314>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e043      	b.n	8004dc4 <BalancePrepare+0x284>
		} else if (!FootButtonDown && FootButtonUp)
 8004d3c:	4b43      	ldr	r3, [pc, #268]	; (8004e4c <BalancePrepare+0x30c>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d13f      	bne.n	8004dc4 <BalancePrepare+0x284>
 8004d44:	4b42      	ldr	r3, [pc, #264]	; (8004e50 <BalancePrepare+0x310>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d03b      	beq.n	8004dc4 <BalancePrepare+0x284>
		{
			StepControl(0, 1, 10);
 8004d4c:	220a      	movs	r2, #10
 8004d4e:	2101      	movs	r1, #1
 8004d50:	2000      	movs	r0, #0
 8004d52:	f7ff fea1 	bl	8004a98 <StepControl>
			FootDone = false;
 8004d56:	4b3f      	ldr	r3, [pc, #252]	; (8004e54 <BalancePrepare+0x314>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	e032      	b.n	8004dc4 <BalancePrepare+0x284>
		}
	} else if (BalanceActiveDemand)
 8004d5e:	4b35      	ldr	r3, [pc, #212]	; (8004e34 <BalancePrepare+0x2f4>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d02e      	beq.n	8004dc4 <BalancePrepare+0x284>
	{
		if(!FootButtonDown && !FootButtonUp)
 8004d66:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <BalancePrepare+0x30c>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10c      	bne.n	8004d88 <BalancePrepare+0x248>
 8004d6e:	4b38      	ldr	r3, [pc, #224]	; (8004e50 <BalancePrepare+0x310>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d108      	bne.n	8004d88 <BalancePrepare+0x248>
		{
			StepControl(1, 1, 10);
 8004d76:	220a      	movs	r2, #10
 8004d78:	2101      	movs	r1, #1
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	f7ff fe8c 	bl	8004a98 <StepControl>
			FootDone = false;
 8004d80:	4b34      	ldr	r3, [pc, #208]	; (8004e54 <BalancePrepare+0x314>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	e01d      	b.n	8004dc4 <BalancePrepare+0x284>
		} else if (FootButtonDown && !FootButtonUp)
 8004d88:	4b30      	ldr	r3, [pc, #192]	; (8004e4c <BalancePrepare+0x30c>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00c      	beq.n	8004daa <BalancePrepare+0x26a>
 8004d90:	4b2f      	ldr	r3, [pc, #188]	; (8004e50 <BalancePrepare+0x310>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d108      	bne.n	8004daa <BalancePrepare+0x26a>
		{
			StepControl(1, 1, 10);
 8004d98:	220a      	movs	r2, #10
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f7ff fe7b 	bl	8004a98 <StepControl>
			FootDone = false;
 8004da2:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <BalancePrepare+0x314>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	e00c      	b.n	8004dc4 <BalancePrepare+0x284>
		} else if (!FootButtonDown && FootButtonUp)
 8004daa:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <BalancePrepare+0x30c>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d108      	bne.n	8004dc4 <BalancePrepare+0x284>
 8004db2:	4b27      	ldr	r3, [pc, #156]	; (8004e50 <BalancePrepare+0x310>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <BalancePrepare+0x284>
		{
			MotopStop();
 8004dba:	f7ff feab 	bl	8004b14 <MotopStop>
			FootDone = true;
 8004dbe:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <BalancePrepare+0x314>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(FootDone)
 8004dc4:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <BalancePrepare+0x314>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d047      	beq.n	8004e5c <BalancePrepare+0x31c>
	{
		BalanceActiveDemand = BTControl.Drive;
 8004dcc:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <BalancePrepare+0x2d8>)
 8004dce:	edd3 7a02 	vldr	s15, [r3, #8]
 8004dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd6:	edc7 7a01 	vstr	s15, [r7, #4]
 8004dda:	793b      	ldrb	r3, [r7, #4]
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <BalancePrepare+0x2f4>)
 8004de0:	701a      	strb	r2, [r3, #0]
		BalanceActive = BTControl.Drive;
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <BalancePrepare+0x2d8>)
 8004de4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dec:	edc7 7a01 	vstr	s15, [r7, #4]
 8004df0:	793b      	ldrb	r3, [r7, #4]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	4b18      	ldr	r3, [pc, #96]	; (8004e58 <BalancePrepare+0x318>)
 8004df6:	701a      	strb	r2, [r3, #0]
	{
		BalanceActiveDemand = false;
		BalanceActive = false;
		//PositionLinearDemand = PositionLinear;
	}
}
 8004df8:	e036      	b.n	8004e68 <BalancePrepare+0x328>
 8004dfa:	bf00      	nop
 8004dfc:	f3af 8000 	nop.w
 8004e00:	d2f1a9fc 	.word	0xd2f1a9fc
 8004e04:	3f50624d 	.word	0x3f50624d
 8004e08:	47ae147b 	.word	0x47ae147b
 8004e0c:	3f947ae1 	.word	0x3f947ae1
 8004e10:	9999999a 	.word	0x9999999a
 8004e14:	bfd99999 	.word	0xbfd99999
 8004e18:	20000c40 	.word	0x20000c40
 8004e1c:	20000bc4 	.word	0x20000bc4
 8004e20:	20000bc8 	.word	0x20000bc8
 8004e24:	20000cb0 	.word	0x20000cb0
 8004e28:	20000ce8 	.word	0x20000ce8
 8004e2c:	20000d44 	.word	0x20000d44
 8004e30:	20000c4c 	.word	0x20000c4c
 8004e34:	20000c98 	.word	0x20000c98
 8004e38:	42b40000 	.word	0x42b40000
 8004e3c:	42b40000 	.word	0x42b40000
 8004e40:	c2b40000 	.word	0xc2b40000
 8004e44:	c2b40000 	.word	0xc2b40000
 8004e48:	becccccd 	.word	0xbecccccd
 8004e4c:	20000ba8 	.word	0x20000ba8
 8004e50:	20000ba7 	.word	0x20000ba7
 8004e54:	20000bc0 	.word	0x20000bc0
 8004e58:	20000d72 	.word	0x20000d72
		BalanceActiveDemand = false;
 8004e5c:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <BalancePrepare+0x330>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
		BalanceActive = false;
 8004e62:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <BalancePrepare+0x334>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20000c98 	.word	0x20000c98
 8004e74:	20000d72 	.word	0x20000d72

08004e78 <BalanceCalculateSpeeds>:
void BalanceCalculateSpeeds()
{
 8004e78:	b5b0      	push	{r4, r5, r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
	TimeS = (HAL_GetTick() - StepsLeftPreviousTime) / 1000.0;
 8004e7c:	f001 fde2 	bl	8006a44 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b77      	ldr	r3, [pc, #476]	; (8005060 <BalanceCalculateSpeeds+0x1e8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fb fb33 	bl	80004f4 <__aeabi_ui2d>
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	4b74      	ldr	r3, [pc, #464]	; (8005064 <BalanceCalculateSpeeds+0x1ec>)
 8004e94:	f7fb fcd2 	bl	800083c <__aeabi_ddiv>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	f7fb fe3c 	bl	8000b1c <__aeabi_d2f>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4a70      	ldr	r2, [pc, #448]	; (8005068 <BalanceCalculateSpeeds+0x1f0>)
 8004ea8:	6013      	str	r3, [r2, #0]
	if (TimeS > BALANCE_SPEED_STEPS_MAX_TIME)
 8004eaa:	4b6f      	ldr	r3, [pc, #444]	; (8005068 <BalanceCalculateSpeeds+0x1f0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fb fb42 	bl	8000538 <__aeabi_f2d>
 8004eb4:	a366      	add	r3, pc, #408	; (adr r3, 8005050 <BalanceCalculateSpeeds+0x1d8>)
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	f7fb fe25 	bl	8000b08 <__aeabi_dcmpgt>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d006      	beq.n	8004ed2 <BalanceCalculateSpeeds+0x5a>
	{
		TimeS = BALANCE_SPEED_STEPS_MAX_TIME;
 8004ec4:	4b68      	ldr	r3, [pc, #416]	; (8005068 <BalanceCalculateSpeeds+0x1f0>)
 8004ec6:	4a69      	ldr	r2, [pc, #420]	; (800506c <BalanceCalculateSpeeds+0x1f4>)
 8004ec8:	601a      	str	r2, [r3, #0]
		LeftSpeed = 0;
 8004eca:	4b69      	ldr	r3, [pc, #420]	; (8005070 <BalanceCalculateSpeeds+0x1f8>)
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
	}
	if (WheelsHall[0].OutputHall != StepsLeftPrevious)
 8004ed2:	4b68      	ldr	r3, [pc, #416]	; (8005074 <BalanceCalculateSpeeds+0x1fc>)
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	4b68      	ldr	r3, [pc, #416]	; (8005078 <BalanceCalculateSpeeds+0x200>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d02d      	beq.n	8004f3a <BalanceCalculateSpeeds+0xc2>
	{
		LeftSpeed = ((WheelsHall[0].OutputHall - StepsLeftPrevious) * BALANCE_STEPS_TO_METERS) / TimeS;
 8004ede:	4b65      	ldr	r3, [pc, #404]	; (8005074 <BalanceCalculateSpeeds+0x1fc>)
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	4b65      	ldr	r3, [pc, #404]	; (8005078 <BalanceCalculateSpeeds+0x200>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fb13 	bl	8000514 <__aeabi_i2d>
 8004eee:	a35a      	add	r3, pc, #360	; (adr r3, 8005058 <BalanceCalculateSpeeds+0x1e0>)
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f7fb fb78 	bl	80005e8 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4614      	mov	r4, r2
 8004efe:	461d      	mov	r5, r3
 8004f00:	4b59      	ldr	r3, [pc, #356]	; (8005068 <BalanceCalculateSpeeds+0x1f0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fb fb17 	bl	8000538 <__aeabi_f2d>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4620      	mov	r0, r4
 8004f10:	4629      	mov	r1, r5
 8004f12:	f7fb fc93 	bl	800083c <__aeabi_ddiv>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f7fb fdfd 	bl	8000b1c <__aeabi_d2f>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4a52      	ldr	r2, [pc, #328]	; (8005070 <BalanceCalculateSpeeds+0x1f8>)
 8004f26:	6013      	str	r3, [r2, #0]
		StepsLeftPrevious = WheelsHall[0].OutputHall;
 8004f28:	4b52      	ldr	r3, [pc, #328]	; (8005074 <BalanceCalculateSpeeds+0x1fc>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a52      	ldr	r2, [pc, #328]	; (8005078 <BalanceCalculateSpeeds+0x200>)
 8004f2e:	6013      	str	r3, [r2, #0]
		StepsLeftPreviousTime = HAL_GetTick();
 8004f30:	f001 fd88 	bl	8006a44 <HAL_GetTick>
 8004f34:	4603      	mov	r3, r0
 8004f36:	4a4a      	ldr	r2, [pc, #296]	; (8005060 <BalanceCalculateSpeeds+0x1e8>)
 8004f38:	6013      	str	r3, [r2, #0]
	}

	TimeS = (HAL_GetTick() - StepsRightPreviousTime) / 1000.0;
 8004f3a:	f001 fd83 	bl	8006a44 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	4b4e      	ldr	r3, [pc, #312]	; (800507c <BalanceCalculateSpeeds+0x204>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fb fad4 	bl	80004f4 <__aeabi_ui2d>
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	4b44      	ldr	r3, [pc, #272]	; (8005064 <BalanceCalculateSpeeds+0x1ec>)
 8004f52:	f7fb fc73 	bl	800083c <__aeabi_ddiv>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f7fb fddd 	bl	8000b1c <__aeabi_d2f>
 8004f62:	4603      	mov	r3, r0
 8004f64:	4a40      	ldr	r2, [pc, #256]	; (8005068 <BalanceCalculateSpeeds+0x1f0>)
 8004f66:	6013      	str	r3, [r2, #0]
	if (TimeS > BALANCE_SPEED_STEPS_MAX_TIME)
 8004f68:	4b3f      	ldr	r3, [pc, #252]	; (8005068 <BalanceCalculateSpeeds+0x1f0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fb fae3 	bl	8000538 <__aeabi_f2d>
 8004f72:	a337      	add	r3, pc, #220	; (adr r3, 8005050 <BalanceCalculateSpeeds+0x1d8>)
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f7fb fdc6 	bl	8000b08 <__aeabi_dcmpgt>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d006      	beq.n	8004f90 <BalanceCalculateSpeeds+0x118>
	{
		TimeS = BALANCE_SPEED_STEPS_MAX_TIME;
 8004f82:	4b39      	ldr	r3, [pc, #228]	; (8005068 <BalanceCalculateSpeeds+0x1f0>)
 8004f84:	4a39      	ldr	r2, [pc, #228]	; (800506c <BalanceCalculateSpeeds+0x1f4>)
 8004f86:	601a      	str	r2, [r3, #0]
		RightSpeed = 0;
 8004f88:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <BalanceCalculateSpeeds+0x208>)
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
	}
	if (WheelsHall[1].OutputHall != StepsRightPrevious)
 8004f90:	4b38      	ldr	r3, [pc, #224]	; (8005074 <BalanceCalculateSpeeds+0x1fc>)
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	4b3b      	ldr	r3, [pc, #236]	; (8005084 <BalanceCalculateSpeeds+0x20c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d02d      	beq.n	8004ff8 <BalanceCalculateSpeeds+0x180>
	{
		RightSpeed = ((WheelsHall[1].OutputHall - StepsRightPrevious) * BALANCE_STEPS_TO_METERS) / TimeS;
 8004f9c:	4b35      	ldr	r3, [pc, #212]	; (8005074 <BalanceCalculateSpeeds+0x1fc>)
 8004f9e:	68da      	ldr	r2, [r3, #12]
 8004fa0:	4b38      	ldr	r3, [pc, #224]	; (8005084 <BalanceCalculateSpeeds+0x20c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fb fab4 	bl	8000514 <__aeabi_i2d>
 8004fac:	a32a      	add	r3, pc, #168	; (adr r3, 8005058 <BalanceCalculateSpeeds+0x1e0>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f7fb fb19 	bl	80005e8 <__aeabi_dmul>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4614      	mov	r4, r2
 8004fbc:	461d      	mov	r5, r3
 8004fbe:	4b2a      	ldr	r3, [pc, #168]	; (8005068 <BalanceCalculateSpeeds+0x1f0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fb fab8 	bl	8000538 <__aeabi_f2d>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4620      	mov	r0, r4
 8004fce:	4629      	mov	r1, r5
 8004fd0:	f7fb fc34 	bl	800083c <__aeabi_ddiv>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4610      	mov	r0, r2
 8004fda:	4619      	mov	r1, r3
 8004fdc:	f7fb fd9e 	bl	8000b1c <__aeabi_d2f>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	4a27      	ldr	r2, [pc, #156]	; (8005080 <BalanceCalculateSpeeds+0x208>)
 8004fe4:	6013      	str	r3, [r2, #0]
		StepsRightPrevious = WheelsHall[1].OutputHall;
 8004fe6:	4b23      	ldr	r3, [pc, #140]	; (8005074 <BalanceCalculateSpeeds+0x1fc>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	4a26      	ldr	r2, [pc, #152]	; (8005084 <BalanceCalculateSpeeds+0x20c>)
 8004fec:	6013      	str	r3, [r2, #0]
		StepsRightPreviousTime = HAL_GetTick();
 8004fee:	f001 fd29 	bl	8006a44 <HAL_GetTick>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4a21      	ldr	r2, [pc, #132]	; (800507c <BalanceCalculateSpeeds+0x204>)
 8004ff6:	6013      	str	r3, [r2, #0]
	}

	PositionLinear = ((WheelsHall[0].OutputHall + WheelsHall[1].OutputHall) / 2) * BALANCE_STEPS_TO_METERS;
 8004ff8:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <BalanceCalculateSpeeds+0x1fc>)
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <BalanceCalculateSpeeds+0x1fc>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4413      	add	r3, r2
 8005002:	0fda      	lsrs	r2, r3, #31
 8005004:	4413      	add	r3, r2
 8005006:	105b      	asrs	r3, r3, #1
 8005008:	4618      	mov	r0, r3
 800500a:	f7fb fa83 	bl	8000514 <__aeabi_i2d>
 800500e:	a312      	add	r3, pc, #72	; (adr r3, 8005058 <BalanceCalculateSpeeds+0x1e0>)
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb fae8 	bl	80005e8 <__aeabi_dmul>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4610      	mov	r0, r2
 800501e:	4619      	mov	r1, r3
 8005020:	f7fb fd7c 	bl	8000b1c <__aeabi_d2f>
 8005024:	4603      	mov	r3, r0
 8005026:	4a18      	ldr	r2, [pc, #96]	; (8005088 <BalanceCalculateSpeeds+0x210>)
 8005028:	6013      	str	r3, [r2, #0]
	SpeedLinear = (LeftSpeed + RightSpeed) / 2.0;
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <BalanceCalculateSpeeds+0x1f8>)
 800502c:	ed93 7a00 	vldr	s14, [r3]
 8005030:	4b13      	ldr	r3, [pc, #76]	; (8005080 <BalanceCalculateSpeeds+0x208>)
 8005032:	edd3 7a00 	vldr	s15, [r3]
 8005036:	ee37 7a27 	vadd.f32	s14, s14, s15
 800503a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800503e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <BalanceCalculateSpeeds+0x214>)
 8005044:	edc3 7a00 	vstr	s15, [r3]
}
 8005048:	bf00      	nop
 800504a:	bdb0      	pop	{r4, r5, r7, pc}
 800504c:	f3af 8000 	nop.w
 8005050:	9999999a 	.word	0x9999999a
 8005054:	3fc99999 	.word	0x3fc99999
 8005058:	8121fb7c 	.word	0x8121fb7c
 800505c:	3f821fb7 	.word	0x3f821fb7
 8005060:	20000e14 	.word	0x20000e14
 8005064:	408f4000 	.word	0x408f4000
 8005068:	20000d40 	.word	0x20000d40
 800506c:	3e4ccccd 	.word	0x3e4ccccd
 8005070:	20000d44 	.word	0x20000d44
 8005074:	20000e30 	.word	0x20000e30
 8005078:	20000d8c 	.word	0x20000d8c
 800507c:	20000dfc 	.word	0x20000dfc
 8005080:	20000c4c 	.word	0x20000c4c
 8005084:	20000c30 	.word	0x20000c30
 8005088:	20000d00 	.word	0x20000d00
 800508c:	20000ce8 	.word	0x20000ce8

08005090 <BalancePositionLinearControl>:
void BalancePositionLinearControl()
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
	if (fabsf(Front) > 0.001)
 8005096:	4b48      	ldr	r3, [pc, #288]	; (80051b8 <BalancePositionLinearControl+0x128>)
 8005098:	edd3 7a00 	vldr	s15, [r3]
 800509c:	eef0 7ae7 	vabs.f32	s15, s15
 80050a0:	ee17 0a90 	vmov	r0, s15
 80050a4:	f7fb fa48 	bl	8000538 <__aeabi_f2d>
 80050a8:	a33f      	add	r3, pc, #252	; (adr r3, 80051a8 <BalancePositionLinearControl+0x118>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f7fb fd2b 	bl	8000b08 <__aeabi_dcmpgt>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <BalancePositionLinearControl+0x30>
	{
		PositionLinearControlSwitch = 0;
 80050b8:	4b40      	ldr	r3, [pc, #256]	; (80051bc <BalancePositionLinearControl+0x12c>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e013      	b.n	80050e8 <BalancePositionLinearControl+0x58>
	}
	else if (fabsf(SpeedLinear) < 0.02)
 80050c0:	4b3f      	ldr	r3, [pc, #252]	; (80051c0 <BalancePositionLinearControl+0x130>)
 80050c2:	edd3 7a00 	vldr	s15, [r3]
 80050c6:	eef0 7ae7 	vabs.f32	s15, s15
 80050ca:	ee17 0a90 	vmov	r0, s15
 80050ce:	f7fb fa33 	bl	8000538 <__aeabi_f2d>
 80050d2:	a337      	add	r3, pc, #220	; (adr r3, 80051b0 <BalancePositionLinearControl+0x120>)
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f7fb fcf8 	bl	8000acc <__aeabi_dcmplt>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <BalancePositionLinearControl+0x58>
	{
		PositionLinearControlSwitch = 1;
 80050e2:	4b36      	ldr	r3, [pc, #216]	; (80051bc <BalancePositionLinearControl+0x12c>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	701a      	strb	r2, [r3, #0]
	}

	if (BalanceActive)
 80050e8:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <BalancePositionLinearControl+0x134>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d04c      	beq.n	800518a <BalancePositionLinearControl+0xfa>
	{
		float Error = PositionLinearDemand - PositionLinear;
 80050f0:	4b35      	ldr	r3, [pc, #212]	; (80051c8 <BalancePositionLinearControl+0x138>)
 80050f2:	ed93 7a00 	vldr	s14, [r3]
 80050f6:	4b35      	ldr	r3, [pc, #212]	; (80051cc <BalancePositionLinearControl+0x13c>)
 80050f8:	edd3 7a00 	vldr	s15, [r3]
 80050fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005100:	edc7 7a01 	vstr	s15, [r7, #4]
		if (Error > 0)
 8005104:	edd7 7a01 	vldr	s15, [r7, #4]
 8005108:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800510c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005110:	dd0b      	ble.n	800512a <BalancePositionLinearControl+0x9a>
		{
			PositionIValue += PositionI;
 8005112:	4b2f      	ldr	r3, [pc, #188]	; (80051d0 <BalancePositionLinearControl+0x140>)
 8005114:	ed93 7a00 	vldr	s14, [r3]
 8005118:	4b2e      	ldr	r3, [pc, #184]	; (80051d4 <BalancePositionLinearControl+0x144>)
 800511a:	edd3 7a00 	vldr	s15, [r3]
 800511e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005122:	4b2b      	ldr	r3, [pc, #172]	; (80051d0 <BalancePositionLinearControl+0x140>)
 8005124:	edc3 7a00 	vstr	s15, [r3]
 8005128:	e00a      	b.n	8005140 <BalancePositionLinearControl+0xb0>
		}
		else
		{
			PositionIValue -= PositionI;
 800512a:	4b29      	ldr	r3, [pc, #164]	; (80051d0 <BalancePositionLinearControl+0x140>)
 800512c:	ed93 7a00 	vldr	s14, [r3]
 8005130:	4b28      	ldr	r3, [pc, #160]	; (80051d4 <BalancePositionLinearControl+0x144>)
 8005132:	edd3 7a00 	vldr	s15, [r3]
 8005136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800513a:	4b25      	ldr	r3, [pc, #148]	; (80051d0 <BalancePositionLinearControl+0x140>)
 800513c:	edc3 7a00 	vstr	s15, [r3]
		}

		PositionPID = Error * PositionP + PositionIValue;
 8005140:	4b25      	ldr	r3, [pc, #148]	; (80051d8 <BalancePositionLinearControl+0x148>)
 8005142:	ed93 7a00 	vldr	s14, [r3]
 8005146:	edd7 7a01 	vldr	s15, [r7, #4]
 800514a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800514e:	4b20      	ldr	r3, [pc, #128]	; (80051d0 <BalancePositionLinearControl+0x140>)
 8005150:	edd3 7a00 	vldr	s15, [r3]
 8005154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005158:	4b20      	ldr	r3, [pc, #128]	; (80051dc <BalancePositionLinearControl+0x14c>)
 800515a:	edc3 7a00 	vstr	s15, [r3]
		if (PositionLinearControlSwitch)
 800515e:	4b17      	ldr	r3, [pc, #92]	; (80051bc <BalancePositionLinearControl+0x12c>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d004      	beq.n	8005170 <BalancePositionLinearControl+0xe0>
		{
			SpeedLinearDemand = PositionPID;
 8005166:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <BalancePositionLinearControl+0x14c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1d      	ldr	r2, [pc, #116]	; (80051e0 <BalancePositionLinearControl+0x150>)
 800516c:	6013      	str	r3, [r2, #0]
	else
	{
		PositionLinearDemand = PositionLinear;
		PositionIValue = 0;
	}
}
 800516e:	e014      	b.n	800519a <BalancePositionLinearControl+0x10a>
			SpeedLinearDemand = Front;
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <BalancePositionLinearControl+0x128>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1a      	ldr	r2, [pc, #104]	; (80051e0 <BalancePositionLinearControl+0x150>)
 8005176:	6013      	str	r3, [r2, #0]
			PositionLinearDemand = PositionLinear;
 8005178:	4b14      	ldr	r3, [pc, #80]	; (80051cc <BalancePositionLinearControl+0x13c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a12      	ldr	r2, [pc, #72]	; (80051c8 <BalancePositionLinearControl+0x138>)
 800517e:	6013      	str	r3, [r2, #0]
			PositionIValue = 0;
 8005180:	4b13      	ldr	r3, [pc, #76]	; (80051d0 <BalancePositionLinearControl+0x140>)
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
}
 8005188:	e007      	b.n	800519a <BalancePositionLinearControl+0x10a>
		PositionLinearDemand = PositionLinear;
 800518a:	4b10      	ldr	r3, [pc, #64]	; (80051cc <BalancePositionLinearControl+0x13c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a0e      	ldr	r2, [pc, #56]	; (80051c8 <BalancePositionLinearControl+0x138>)
 8005190:	6013      	str	r3, [r2, #0]
		PositionIValue = 0;
 8005192:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <BalancePositionLinearControl+0x140>)
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	601a      	str	r2, [r3, #0]
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	f3af 8000 	nop.w
 80051a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80051ac:	3f50624d 	.word	0x3f50624d
 80051b0:	47ae147b 	.word	0x47ae147b
 80051b4:	3f947ae1 	.word	0x3f947ae1
 80051b8:	20000bc4 	.word	0x20000bc4
 80051bc:	20000d78 	.word	0x20000d78
 80051c0:	20000ce8 	.word	0x20000ce8
 80051c4:	20000d72 	.word	0x20000d72
 80051c8:	20000cd4 	.word	0x20000cd4
 80051cc:	20000d00 	.word	0x20000d00
 80051d0:	20000e50 	.word	0x20000e50
 80051d4:	20000bcc 	.word	0x20000bcc
 80051d8:	20000008 	.word	0x20000008
 80051dc:	20000e44 	.word	0x20000e44
 80051e0:	20000dc0 	.word	0x20000dc0

080051e4 <DelayUs>:
		SerialControlWheelsRequest.WheelLeft = 0;
		SerialControlWheelsRequest.WheelRight = 0;
	}
}
void DelayUs(uint16_t us)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	4603      	mov	r3, r0
 80051ec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim8, 0);
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <DelayUs+0x30>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2200      	movs	r2, #0
 80051f4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim8) < us);
 80051f6:	bf00      	nop
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <DelayUs+0x30>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	429a      	cmp	r2, r3
 8005202:	d3f9      	bcc.n	80051f8 <DelayUs+0x14>
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000f6c 	.word	0x20000f6c

08005218 <WS2812_PIXEL_RGB_TO_BUF_DMA>:
//-----Animation3
uint8_t Pos1=0;
uint8_t Pos2=LED_COUNT-1;
uint8_t Fl_Top1 = 0;
uint8_t Fl_Top2 = 1;
void WS2812_PIXEL_RGB_TO_BUF_DMA(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX){
 8005218:	b490      	push	{r4, r7}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	4604      	mov	r4, r0
 8005220:	4608      	mov	r0, r1
 8005222:	4611      	mov	r1, r2
 8005224:	461a      	mov	r2, r3
 8005226:	4623      	mov	r3, r4
 8005228:	71fb      	strb	r3, [r7, #7]
 800522a:	4603      	mov	r3, r0
 800522c:	71bb      	strb	r3, [r7, #6]
 800522e:	460b      	mov	r3, r1
 8005230:	717b      	strb	r3, [r7, #5]
 8005232:	4613      	mov	r3, r2
 8005234:	807b      	strh	r3, [r7, #2]
  for(uint8_t i=0;i<8;i++){
 8005236:	2300      	movs	r3, #0
 8005238:	73fb      	strb	r3, [r7, #15]
 800523a:	e078      	b.n	800532e <WS2812_PIXEL_RGB_TO_BUF_DMA+0x116>
    if (BitIsSet(Rpixel,(7-i)) == 1){
 800523c:	79fa      	ldrb	r2, [r7, #7]
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	f1c3 0307 	rsb	r3, r3, #7
 8005244:	fa42 f303 	asr.w	r3, r2, r3
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00e      	beq.n	8005270 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x58>
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 8005252:	887a      	ldrh	r2, [r7, #2]
 8005254:	4613      	mov	r3, r2
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	4413      	add	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	4413      	add	r3, r2
 8005264:	3308      	adds	r3, #8
 8005266:	4a36      	ldr	r2, [pc, #216]	; (8005340 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8005268:	2141      	movs	r1, #65	; 0x41
 800526a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800526e:	e00d      	b.n	800528c <WS2812_PIXEL_RGB_TO_BUF_DMA+0x74>
    }else{
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 8005270:	887a      	ldrh	r2, [r7, #2]
 8005272:	4613      	mov	r3, r2
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4413      	add	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	4413      	add	r3, r2
 8005282:	3308      	adds	r3, #8
 8005284:	4a2e      	ldr	r2, [pc, #184]	; (8005340 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8005286:	211a      	movs	r1, #26
 8005288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1){
 800528c:	79ba      	ldrb	r2, [r7, #6]
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	f1c3 0307 	rsb	r3, r3, #7
 8005294:	fa42 f303 	asr.w	r3, r2, r3
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00d      	beq.n	80052be <WS2812_PIXEL_RGB_TO_BUF_DMA+0xa6>
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 80052a2:	887a      	ldrh	r2, [r7, #2]
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	4413      	add	r3, r2
 80052b4:	4a22      	ldr	r2, [pc, #136]	; (8005340 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 80052b6:	2141      	movs	r1, #65	; 0x41
 80052b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80052bc:	e00c      	b.n	80052d8 <WS2812_PIXEL_RGB_TO_BUF_DMA+0xc0>
    }else{
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	4613      	mov	r3, r2
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	4413      	add	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	4413      	add	r3, r2
 80052d0:	4a1b      	ldr	r2, [pc, #108]	; (8005340 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 80052d2:	211a      	movs	r1, #26
 80052d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1){
 80052d8:	797a      	ldrb	r2, [r7, #5]
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	f1c3 0307 	rsb	r3, r3, #7
 80052e0:	fa42 f303 	asr.w	r3, r2, r3
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00e      	beq.n	800530c <WS2812_PIXEL_RGB_TO_BUF_DMA+0xf4>
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 80052ee:	887a      	ldrh	r2, [r7, #2]
 80052f0:	4613      	mov	r3, r2
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4413      	add	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	4413      	add	r3, r2
 8005300:	3310      	adds	r3, #16
 8005302:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8005304:	2141      	movs	r1, #65	; 0x41
 8005306:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800530a:	e00d      	b.n	8005328 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x110>
    }else{
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 800530c:	887a      	ldrh	r2, [r7, #2]
 800530e:	4613      	mov	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	4413      	add	r3, r2
 800531e:	3310      	adds	r3, #16
 8005320:	4a07      	ldr	r2, [pc, #28]	; (8005340 <WS2812_PIXEL_RGB_TO_BUF_DMA+0x128>)
 8005322:	211a      	movs	r1, #26
 8005324:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(uint8_t i=0;i<8;i++){
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	3301      	adds	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	2b07      	cmp	r3, #7
 8005332:	d983      	bls.n	800523c <WS2812_PIXEL_RGB_TO_BUF_DMA+0x24>
    }
  }
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bc90      	pop	{r4, r7}
 800533e:	4770      	bx	lr
 8005340:	200000bc 	.word	0x200000bc

08005344 <WS2812_LIGHT>:
void WS2812_LIGHT(void){
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 8005348:	f44f 732e 	mov.w	r3, #696	; 0x2b8
 800534c:	4a0d      	ldr	r2, [pc, #52]	; (8005384 <WS2812_LIGHT+0x40>)
 800534e:	2100      	movs	r1, #0
 8005350:	480d      	ldr	r0, [pc, #52]	; (8005388 <WS2812_LIGHT+0x44>)
 8005352:	f004 f9d1 	bl	80096f8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 8005356:	f44f 732e 	mov.w	r3, #696	; 0x2b8
 800535a:	4a0a      	ldr	r2, [pc, #40]	; (8005384 <WS2812_LIGHT+0x40>)
 800535c:	2104      	movs	r1, #4
 800535e:	480a      	ldr	r0, [pc, #40]	; (8005388 <WS2812_LIGHT+0x44>)
 8005360:	f004 f9ca 	bl	80096f8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 8005364:	f44f 732e 	mov.w	r3, #696	; 0x2b8
 8005368:	4a06      	ldr	r2, [pc, #24]	; (8005384 <WS2812_LIGHT+0x40>)
 800536a:	2108      	movs	r1, #8
 800536c:	4806      	ldr	r0, [pc, #24]	; (8005388 <WS2812_LIGHT+0x44>)
 800536e:	f004 f9c3 	bl	80096f8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2, (uint32_t*)&BUF_DMA, ARRAY_LEN);
 8005372:	f44f 732e 	mov.w	r3, #696	; 0x2b8
 8005376:	4a03      	ldr	r2, [pc, #12]	; (8005384 <WS2812_LIGHT+0x40>)
 8005378:	2104      	movs	r1, #4
 800537a:	4804      	ldr	r0, [pc, #16]	; (800538c <WS2812_LIGHT+0x48>)
 800537c:	f004 f9bc 	bl	80096f8 <HAL_TIM_PWM_Start_DMA>
}
 8005380:	bf00      	nop
 8005382:	bd80      	pop	{r7, pc}
 8005384:	200000bc 	.word	0x200000bc
 8005388:	200010bc 	.word	0x200010bc
 800538c:	20000fb4 	.word	0x20000fb4

08005390 <WS2812_CLEAR>:
void WS2812_CLEAR(void){
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < LED_COUNT; ++i){WS2812_PIXEL_RGB_TO_BUF_DMA(0, 0, 0, i);}
 8005396:	2300      	movs	r3, #0
 8005398:	71fb      	strb	r3, [r7, #7]
 800539a:	e009      	b.n	80053b0 <WS2812_CLEAR+0x20>
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2200      	movs	r2, #0
 80053a2:	2100      	movs	r1, #0
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7ff ff37 	bl	8005218 <WS2812_PIXEL_RGB_TO_BUF_DMA>
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	3301      	adds	r3, #1
 80053ae:	71fb      	strb	r3, [r7, #7]
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	2b1a      	cmp	r3, #26
 80053b4:	d9f2      	bls.n	800539c <WS2812_CLEAR+0xc>
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <WS2812_Init>:
void WS2812_Init(uint8_t LedNumber){
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = DELAY_LEN; i < ARRAY_LEN; i++)BUF_DMA[i] = LOW;
 80053ca:	2330      	movs	r3, #48	; 0x30
 80053cc:	81fb      	strh	r3, [r7, #14]
 80053ce:	e007      	b.n	80053e0 <WS2812_Init+0x20>
 80053d0:	89fb      	ldrh	r3, [r7, #14]
 80053d2:	4a0b      	ldr	r2, [pc, #44]	; (8005400 <WS2812_Init+0x40>)
 80053d4:	211a      	movs	r1, #26
 80053d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80053da:	89fb      	ldrh	r3, [r7, #14]
 80053dc:	3301      	adds	r3, #1
 80053de:	81fb      	strh	r3, [r7, #14]
 80053e0:	89fb      	ldrh	r3, [r7, #14]
 80053e2:	f5b3 7f2e 	cmp.w	r3, #696	; 0x2b8
 80053e6:	d3f3      	bcc.n	80053d0 <WS2812_Init+0x10>
	WS2812_CLEAR();
 80053e8:	f7ff ffd2 	bl	8005390 <WS2812_CLEAR>
	WS2812_LIGHT();
 80053ec:	f7ff ffaa 	bl	8005344 <WS2812_LIGHT>
	HAL_Delay(1);
 80053f0:	2001      	movs	r0, #1
 80053f2:	f001 fb33 	bl	8006a5c <HAL_Delay>
}
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	200000bc 	.word	0x200000bc

08005404 <WS2812_ANIMATION_1>:
//-------------Three LED up and down
void WS2812_ANIMATION_1(void){
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
	WS2812_CLEAR();
 8005408:	f7ff ffc2 	bl	8005390 <WS2812_CLEAR>
	WS2812_PIXEL_RGB_TO_BUF_DMA(MAX_LIGHT, 0, 0, Pos);
 800540c:	4b31      	ldr	r3, [pc, #196]	; (80054d4 <WS2812_ANIMATION_1+0xd0>)
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b2d8      	uxtb	r0, r3
 8005412:	4b31      	ldr	r3, [pc, #196]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 8005414:	f993 3000 	ldrsb.w	r3, [r3]
 8005418:	b29b      	uxth	r3, r3
 800541a:	2200      	movs	r2, #0
 800541c:	2100      	movs	r1, #0
 800541e:	f7ff fefb 	bl	8005218 <WS2812_PIXEL_RGB_TO_BUF_DMA>
    if(Pos<(LED_COUNT-1)){WS2812_PIXEL_RGB_TO_BUF_DMA(0, 0, MAX_LIGHT, Pos+1);}
 8005422:	4b2d      	ldr	r3, [pc, #180]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 8005424:	f993 3000 	ldrsb.w	r3, [r3]
 8005428:	2b19      	cmp	r3, #25
 800542a:	dc0c      	bgt.n	8005446 <WS2812_ANIMATION_1+0x42>
 800542c:	4b29      	ldr	r3, [pc, #164]	; (80054d4 <WS2812_ANIMATION_1+0xd0>)
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	4b29      	ldr	r3, [pc, #164]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 8005434:	f993 3000 	ldrsb.w	r3, [r3]
 8005438:	b29b      	uxth	r3, r3
 800543a:	3301      	adds	r3, #1
 800543c:	b29b      	uxth	r3, r3
 800543e:	2100      	movs	r1, #0
 8005440:	2000      	movs	r0, #0
 8005442:	f7ff fee9 	bl	8005218 <WS2812_PIXEL_RGB_TO_BUF_DMA>
    if(Pos<(LED_COUNT-2)){WS2812_PIXEL_RGB_TO_BUF_DMA(0, MAX_LIGHT, 0, Pos+2);}
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 8005448:	f993 3000 	ldrsb.w	r3, [r3]
 800544c:	2b18      	cmp	r3, #24
 800544e:	dc0c      	bgt.n	800546a <WS2812_ANIMATION_1+0x66>
 8005450:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <WS2812_ANIMATION_1+0xd0>)
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b2d9      	uxtb	r1, r3
 8005456:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 8005458:	f993 3000 	ldrsb.w	r3, [r3]
 800545c:	b29b      	uxth	r3, r3
 800545e:	3302      	adds	r3, #2
 8005460:	b29b      	uxth	r3, r3
 8005462:	2200      	movs	r2, #0
 8005464:	2000      	movs	r0, #0
 8005466:	f7ff fed7 	bl	8005218 <WS2812_PIXEL_RGB_TO_BUF_DMA>
	WS2812_LIGHT();
 800546a:	f7ff ff6b 	bl	8005344 <WS2812_LIGHT>
	if(Fl_Top==0){
 800546e:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <WS2812_ANIMATION_1+0xd8>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d114      	bne.n	80054a0 <WS2812_ANIMATION_1+0x9c>
		Pos++;
 8005476:	4b18      	ldr	r3, [pc, #96]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 8005478:	f993 3000 	ldrsb.w	r3, [r3]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	3301      	adds	r3, #1
 8005480:	b2db      	uxtb	r3, r3
 8005482:	b25a      	sxtb	r2, r3
 8005484:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 8005486:	701a      	strb	r2, [r3, #0]
		if(Pos==LED_COUNT-2){Fl_Top=1;Pos=LED_COUNT-4;}
 8005488:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 800548a:	f993 3000 	ldrsb.w	r3, [r3]
 800548e:	2b19      	cmp	r3, #25
 8005490:	d11e      	bne.n	80054d0 <WS2812_ANIMATION_1+0xcc>
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <WS2812_ANIMATION_1+0xd8>)
 8005494:	2201      	movs	r2, #1
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 800549a:	2217      	movs	r2, #23
 800549c:	701a      	strb	r2, [r3, #0]
	}else if (Fl_Top==1) {
		Pos--;
		if(Pos==0){Fl_Top=0;Pos=0;}
	}
}
 800549e:	e017      	b.n	80054d0 <WS2812_ANIMATION_1+0xcc>
	}else if (Fl_Top==1) {
 80054a0:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <WS2812_ANIMATION_1+0xd8>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d113      	bne.n	80054d0 <WS2812_ANIMATION_1+0xcc>
		Pos--;
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 80054aa:	f993 3000 	ldrsb.w	r3, [r3]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	b25a      	sxtb	r2, r3
 80054b6:	4b08      	ldr	r3, [pc, #32]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 80054b8:	701a      	strb	r2, [r3, #0]
		if(Pos==0){Fl_Top=0;Pos=0;}
 80054ba:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 80054bc:	f993 3000 	ldrsb.w	r3, [r3]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <WS2812_ANIMATION_1+0xcc>
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <WS2812_ANIMATION_1+0xd8>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <WS2812_ANIMATION_1+0xd4>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
}
 80054d0:	bf00      	nop
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000000 	.word	0x20000000
 80054d8:	20000bd2 	.word	0x20000bd2
 80054dc:	20000bd3 	.word	0x20000bd3

080054e0 <WS2812_ANIMATION_2>:
void WS2812_ANIMATION_2(void) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < LED_COUNT; i++) {
 80054e6:	2300      	movs	r3, #0
 80054e8:	71fb      	strb	r3, [r7, #7]
 80054ea:	e030      	b.n	800554e <WS2812_ANIMATION_2+0x6e>
		WS2812_PIXEL_RGB_TO_BUF_DMA(ColorRed * BRIGHTNESS / 100,	ColorGreen * BRIGHTNESS / 100, ColorBlue * BRIGHTNESS / 100, i);
 80054ec:	4b4a      	ldr	r3, [pc, #296]	; (8005618 <WS2812_ANIMATION_2+0x138>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	4b4a      	ldr	r3, [pc, #296]	; (800561c <WS2812_ANIMATION_2+0x13c>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	fb03 f302 	mul.w	r3, r3, r2
 80054fa:	4a49      	ldr	r2, [pc, #292]	; (8005620 <WS2812_ANIMATION_2+0x140>)
 80054fc:	fb82 1203 	smull	r1, r2, r2, r3
 8005500:	1152      	asrs	r2, r2, #5
 8005502:	17db      	asrs	r3, r3, #31
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	b2d8      	uxtb	r0, r3
 8005508:	4b46      	ldr	r3, [pc, #280]	; (8005624 <WS2812_ANIMATION_2+0x144>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	4b43      	ldr	r3, [pc, #268]	; (800561c <WS2812_ANIMATION_2+0x13c>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	fb03 f302 	mul.w	r3, r3, r2
 8005516:	4a42      	ldr	r2, [pc, #264]	; (8005620 <WS2812_ANIMATION_2+0x140>)
 8005518:	fb82 1203 	smull	r1, r2, r2, r3
 800551c:	1152      	asrs	r2, r2, #5
 800551e:	17db      	asrs	r3, r3, #31
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	b2d9      	uxtb	r1, r3
 8005524:	4b40      	ldr	r3, [pc, #256]	; (8005628 <WS2812_ANIMATION_2+0x148>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	461a      	mov	r2, r3
 800552a:	4b3c      	ldr	r3, [pc, #240]	; (800561c <WS2812_ANIMATION_2+0x13c>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	fb03 f302 	mul.w	r3, r3, r2
 8005532:	4a3b      	ldr	r2, [pc, #236]	; (8005620 <WS2812_ANIMATION_2+0x140>)
 8005534:	fb82 c203 	smull	ip, r2, r2, r3
 8005538:	1152      	asrs	r2, r2, #5
 800553a:	17db      	asrs	r3, r3, #31
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	b2da      	uxtb	r2, r3
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f7ff fe68 	bl	8005218 <WS2812_PIXEL_RGB_TO_BUF_DMA>
	for (uint8_t i = 0; i < LED_COUNT; i++) {
 8005548:	79fb      	ldrb	r3, [r7, #7]
 800554a:	3301      	adds	r3, #1
 800554c:	71fb      	strb	r3, [r7, #7]
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	2b1a      	cmp	r3, #26
 8005552:	d9cb      	bls.n	80054ec <WS2812_ANIMATION_2+0xc>
	}
	WS2812_LIGHT();
 8005554:	f7ff fef6 	bl	8005344 <WS2812_LIGHT>
	if (FL_BRIGHTNESS == 0) {
 8005558:	4b34      	ldr	r3, [pc, #208]	; (800562c <WS2812_ANIMATION_2+0x14c>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d110      	bne.n	8005582 <WS2812_ANIMATION_2+0xa2>
		BRIGHTNESS++;
 8005560:	4b2e      	ldr	r3, [pc, #184]	; (800561c <WS2812_ANIMATION_2+0x13c>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	3301      	adds	r3, #1
 8005566:	b2da      	uxtb	r2, r3
 8005568:	4b2c      	ldr	r3, [pc, #176]	; (800561c <WS2812_ANIMATION_2+0x13c>)
 800556a:	701a      	strb	r2, [r3, #0]
	if(BRIGHTNESS == MAX_BRIGHTNESS) {
 800556c:	4b2b      	ldr	r3, [pc, #172]	; (800561c <WS2812_ANIMATION_2+0x13c>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b32      	cmp	r3, #50	; 0x32
 8005572:	d14d      	bne.n	8005610 <WS2812_ANIMATION_2+0x130>
		FL_BRIGHTNESS=1;
 8005574:	4b2d      	ldr	r3, [pc, #180]	; (800562c <WS2812_ANIMATION_2+0x14c>)
 8005576:	2201      	movs	r2, #1
 8005578:	701a      	strb	r2, [r3, #0]
		BRIGHTNESS=MAX_BRIGHTNESS;
 800557a:	4b28      	ldr	r3, [pc, #160]	; (800561c <WS2812_ANIMATION_2+0x13c>)
 800557c:	2232      	movs	r2, #50	; 0x32
 800557e:	701a      	strb	r2, [r3, #0]
		ColorRed = rand()%255;
		ColorGreen = rand()%255;
		ColorBlue = rand()%255;
	}
}
}
 8005580:	e046      	b.n	8005610 <WS2812_ANIMATION_2+0x130>
} else if (FL_BRIGHTNESS == 1) {
 8005582:	4b2a      	ldr	r3, [pc, #168]	; (800562c <WS2812_ANIMATION_2+0x14c>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d142      	bne.n	8005610 <WS2812_ANIMATION_2+0x130>
	BRIGHTNESS--;
 800558a:	4b24      	ldr	r3, [pc, #144]	; (800561c <WS2812_ANIMATION_2+0x13c>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	3b01      	subs	r3, #1
 8005590:	b2da      	uxtb	r2, r3
 8005592:	4b22      	ldr	r3, [pc, #136]	; (800561c <WS2812_ANIMATION_2+0x13c>)
 8005594:	701a      	strb	r2, [r3, #0]
	if (BRIGHTNESS == 0) {
 8005596:	4b21      	ldr	r3, [pc, #132]	; (800561c <WS2812_ANIMATION_2+0x13c>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d138      	bne.n	8005610 <WS2812_ANIMATION_2+0x130>
		FL_BRIGHTNESS = 0;
 800559e:	4b23      	ldr	r3, [pc, #140]	; (800562c <WS2812_ANIMATION_2+0x14c>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	701a      	strb	r2, [r3, #0]
		BRIGHTNESS = 0;
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <WS2812_ANIMATION_2+0x13c>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]
		ColorRed = rand()%255;
 80055aa:	f007 fabb 	bl	800cb24 <rand>
 80055ae:	4602      	mov	r2, r0
 80055b0:	4b1f      	ldr	r3, [pc, #124]	; (8005630 <WS2812_ANIMATION_2+0x150>)
 80055b2:	fb83 1302 	smull	r1, r3, r3, r2
 80055b6:	4413      	add	r3, r2
 80055b8:	11d9      	asrs	r1, r3, #7
 80055ba:	17d3      	asrs	r3, r2, #31
 80055bc:	1ac9      	subs	r1, r1, r3
 80055be:	460b      	mov	r3, r1
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	1a5b      	subs	r3, r3, r1
 80055c4:	1ad1      	subs	r1, r2, r3
 80055c6:	b2ca      	uxtb	r2, r1
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <WS2812_ANIMATION_2+0x138>)
 80055ca:	701a      	strb	r2, [r3, #0]
		ColorGreen = rand()%255;
 80055cc:	f007 faaa 	bl	800cb24 <rand>
 80055d0:	4602      	mov	r2, r0
 80055d2:	4b17      	ldr	r3, [pc, #92]	; (8005630 <WS2812_ANIMATION_2+0x150>)
 80055d4:	fb83 1302 	smull	r1, r3, r3, r2
 80055d8:	4413      	add	r3, r2
 80055da:	11d9      	asrs	r1, r3, #7
 80055dc:	17d3      	asrs	r3, r2, #31
 80055de:	1ac9      	subs	r1, r1, r3
 80055e0:	460b      	mov	r3, r1
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	1a5b      	subs	r3, r3, r1
 80055e6:	1ad1      	subs	r1, r2, r3
 80055e8:	b2ca      	uxtb	r2, r1
 80055ea:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <WS2812_ANIMATION_2+0x144>)
 80055ec:	701a      	strb	r2, [r3, #0]
		ColorBlue = rand()%255;
 80055ee:	f007 fa99 	bl	800cb24 <rand>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <WS2812_ANIMATION_2+0x150>)
 80055f6:	fb83 1302 	smull	r1, r3, r3, r2
 80055fa:	4413      	add	r3, r2
 80055fc:	11d9      	asrs	r1, r3, #7
 80055fe:	17d3      	asrs	r3, r2, #31
 8005600:	1ac9      	subs	r1, r1, r3
 8005602:	460b      	mov	r3, r1
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	1a5b      	subs	r3, r3, r1
 8005608:	1ad1      	subs	r1, r2, r3
 800560a:	b2ca      	uxtb	r2, r1
 800560c:	4b06      	ldr	r3, [pc, #24]	; (8005628 <WS2812_ANIMATION_2+0x148>)
 800560e:	701a      	strb	r2, [r3, #0]
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000bd7 	.word	0x20000bd7
 800561c:	20000bd5 	.word	0x20000bd5
 8005620:	51eb851f 	.word	0x51eb851f
 8005624:	20000bd8 	.word	0x20000bd8
 8005628:	20000bd9 	.word	0x20000bd9
 800562c:	20000bd6 	.word	0x20000bd6
 8005630:	80808081 	.word	0x80808081

08005634 <WS2812_UPDATE>:

void WS2812_UPDATE(void){
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
	if (FL_BTN==1) {
 8005638:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <WS2812_UPDATE+0x94>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d130      	bne.n	80056a2 <WS2812_UPDATE+0x6e>
		FL_BTN=0;
 8005640:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <WS2812_UPDATE+0x94>)
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
		Mode++;
 8005646:	4b21      	ldr	r3, [pc, #132]	; (80056cc <WS2812_UPDATE+0x98>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <WS2812_UPDATE+0x98>)
 8005650:	701a      	strb	r2, [r3, #0]
		if(Mode>2)Mode=0;
 8005652:	4b1e      	ldr	r3, [pc, #120]	; (80056cc <WS2812_UPDATE+0x98>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d902      	bls.n	8005660 <WS2812_UPDATE+0x2c>
 800565a:	4b1c      	ldr	r3, [pc, #112]	; (80056cc <WS2812_UPDATE+0x98>)
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
		Pos = 0;
 8005660:	4b1b      	ldr	r3, [pc, #108]	; (80056d0 <WS2812_UPDATE+0x9c>)
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
		Fl_Top = 0;
 8005666:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <WS2812_UPDATE+0xa0>)
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]
		BRIGHTNESS=0;
 800566c:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <WS2812_UPDATE+0xa4>)
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
		FL_BRIGHTNESS=0;
 8005672:	4b1a      	ldr	r3, [pc, #104]	; (80056dc <WS2812_UPDATE+0xa8>)
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]
		ColorRed=128;
 8005678:	4b19      	ldr	r3, [pc, #100]	; (80056e0 <WS2812_UPDATE+0xac>)
 800567a:	2280      	movs	r2, #128	; 0x80
 800567c:	701a      	strb	r2, [r3, #0]
		ColorGreen=70;
 800567e:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <WS2812_UPDATE+0xb0>)
 8005680:	2246      	movs	r2, #70	; 0x46
 8005682:	701a      	strb	r2, [r3, #0]
		ColorBlue=30;
 8005684:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <WS2812_UPDATE+0xb4>)
 8005686:	221e      	movs	r2, #30
 8005688:	701a      	strb	r2, [r3, #0]
		Pos1=0;
 800568a:	4b18      	ldr	r3, [pc, #96]	; (80056ec <WS2812_UPDATE+0xb8>)
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
		Pos2=LED_COUNT-1;
 8005690:	4b17      	ldr	r3, [pc, #92]	; (80056f0 <WS2812_UPDATE+0xbc>)
 8005692:	221a      	movs	r2, #26
 8005694:	701a      	strb	r2, [r3, #0]
		Fl_Top1 = 0;
 8005696:	4b17      	ldr	r3, [pc, #92]	; (80056f4 <WS2812_UPDATE+0xc0>)
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
		Fl_Top2 = 1;
 800569c:	4b16      	ldr	r3, [pc, #88]	; (80056f8 <WS2812_UPDATE+0xc4>)
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]
	}
	switch (Mode) {
 80056a2:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <WS2812_UPDATE+0x98>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <WS2812_UPDATE+0x7c>
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d003      	beq.n	80056b6 <WS2812_UPDATE+0x82>
 80056ae:	e005      	b.n	80056bc <WS2812_UPDATE+0x88>
	case 0:
		WS2812_ANIMATION_1();
 80056b0:	f7ff fea8 	bl	8005404 <WS2812_ANIMATION_1>
		break;
 80056b4:	e002      	b.n	80056bc <WS2812_UPDATE+0x88>
	case 1:
		WS2812_ANIMATION_2();
 80056b6:	f7ff ff13 	bl	80054e0 <WS2812_ANIMATION_2>
		break;
 80056ba:	bf00      	nop
	}
	Fl_Update = 0;
 80056bc:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <WS2812_UPDATE+0xc8>)
 80056be:	2200      	movs	r2, #0
 80056c0:	701a      	strb	r2, [r3, #0]
}
 80056c2:	bf00      	nop
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000bd4 	.word	0x20000bd4
 80056cc:	20000bd1 	.word	0x20000bd1
 80056d0:	20000bd2 	.word	0x20000bd2
 80056d4:	20000bd3 	.word	0x20000bd3
 80056d8:	20000bd5 	.word	0x20000bd5
 80056dc:	20000bd6 	.word	0x20000bd6
 80056e0:	20000bd7 	.word	0x20000bd7
 80056e4:	20000bd8 	.word	0x20000bd8
 80056e8:	20000bd9 	.word	0x20000bd9
 80056ec:	20000bda 	.word	0x20000bda
 80056f0:	2000001c 	.word	0x2000001c
 80056f4:	20000bdb 	.word	0x20000bdb
 80056f8:	2000001d 	.word	0x2000001d
 80056fc:	20000bd0 	.word	0x20000bd0

08005700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005706:	f001 f937 	bl	8006978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800570a:	f000 f9bd 	bl	8005a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800570e:	f7fd fd83 	bl	8003218 <MX_GPIO_Init>
  MX_DMA_Init();
 8005712:	f7fd fd1b 	bl	800314c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005716:	f000 ff33 	bl	8006580 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800571a:	f000 fa25 	bl	8005b68 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800571e:	f000 ff59 	bl	80065d4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8005722:	f000 fc2d 	bl	8005f80 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005726:	f000 fce3 	bl	80060f0 <MX_TIM4_Init>
  MX_ADC1_Init();
 800572a:	f7fd fc41 	bl	8002fb0 <MX_ADC1_Init>
  MX_TIM8_Init();
 800572e:	f000 fd55 	bl	80061dc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
#ifndef SYSTEM_NO_ADC_INIT
  ADCInit();
 8005732:	f7fe f8b3 	bl	800389c <ADCInit>
#endif
#ifndef SYSTEM_NO_IMU_HW_INIT
  icm20948_init();
 8005736:	f7fd f815 	bl	8002764 <icm20948_init>
  ak09916_init();
 800573a:	f7fd f83d 	bl	80027b8 <ak09916_init>
#endif
#ifndef SYSTEM_NO_IMU_INIT
  ImuInit();
 800573e:	f7fe fd0d 	bl	800415c <ImuInit>
#endif

#ifndef SYSTEM_NO_LED_INIT
  WS2812_Init(0);
 8005742:	2000      	movs	r0, #0
 8005744:	f7ff fe3c 	bl	80053c0 <WS2812_Init>
  WS2812_Init(1);
 8005748:	2001      	movs	r0, #1
 800574a:	f7ff fe39 	bl	80053c0 <WS2812_Init>
  WS2812_Init(2);
 800574e:	2002      	movs	r0, #2
 8005750:	f7ff fe36 	bl	80053c0 <WS2812_Init>
  WS2812_Init(3);
 8005754:	2003      	movs	r0, #3
 8005756:	f7ff fe33 	bl	80053c0 <WS2812_Init>
  ColorRed = rand() % 255;
 800575a:	f007 f9e3 	bl	800cb24 <rand>
 800575e:	4602      	mov	r2, r0
 8005760:	4bb0      	ldr	r3, [pc, #704]	; (8005a24 <main+0x324>)
 8005762:	fb83 1302 	smull	r1, r3, r3, r2
 8005766:	4413      	add	r3, r2
 8005768:	11d9      	asrs	r1, r3, #7
 800576a:	17d3      	asrs	r3, r2, #31
 800576c:	1ac9      	subs	r1, r1, r3
 800576e:	460b      	mov	r3, r1
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	1a5b      	subs	r3, r3, r1
 8005774:	1ad1      	subs	r1, r2, r3
 8005776:	b2ca      	uxtb	r2, r1
 8005778:	4bab      	ldr	r3, [pc, #684]	; (8005a28 <main+0x328>)
 800577a:	701a      	strb	r2, [r3, #0]
  ColorGreen = rand() % 255;
 800577c:	f007 f9d2 	bl	800cb24 <rand>
 8005780:	4602      	mov	r2, r0
 8005782:	4ba8      	ldr	r3, [pc, #672]	; (8005a24 <main+0x324>)
 8005784:	fb83 1302 	smull	r1, r3, r3, r2
 8005788:	4413      	add	r3, r2
 800578a:	11d9      	asrs	r1, r3, #7
 800578c:	17d3      	asrs	r3, r2, #31
 800578e:	1ac9      	subs	r1, r1, r3
 8005790:	460b      	mov	r3, r1
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	1a5b      	subs	r3, r3, r1
 8005796:	1ad1      	subs	r1, r2, r3
 8005798:	b2ca      	uxtb	r2, r1
 800579a:	4ba4      	ldr	r3, [pc, #656]	; (8005a2c <main+0x32c>)
 800579c:	701a      	strb	r2, [r3, #0]
  ColorBlue = rand() % 255;
 800579e:	f007 f9c1 	bl	800cb24 <rand>
 80057a2:	4602      	mov	r2, r0
 80057a4:	4b9f      	ldr	r3, [pc, #636]	; (8005a24 <main+0x324>)
 80057a6:	fb83 1302 	smull	r1, r3, r3, r2
 80057aa:	4413      	add	r3, r2
 80057ac:	11d9      	asrs	r1, r3, #7
 80057ae:	17d3      	asrs	r3, r2, #31
 80057b0:	1ac9      	subs	r1, r1, r3
 80057b2:	460b      	mov	r3, r1
 80057b4:	021b      	lsls	r3, r3, #8
 80057b6:	1a5b      	subs	r3, r3, r1
 80057b8:	1ad1      	subs	r1, r2, r3
 80057ba:	b2ca      	uxtb	r2, r1
 80057bc:	4b9c      	ldr	r3, [pc, #624]	; (8005a30 <main+0x330>)
 80057be:	701a      	strb	r2, [r3, #0]
#endif
  HAL_TIM_Base_Start(&htim8);
 80057c0:	489c      	ldr	r0, [pc, #624]	; (8005a34 <main+0x334>)
 80057c2:	f003 fed7 	bl	8009574 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  if (HAL_GetTick() - LastPkgTimeUartLow > SYSTEM_TIMING_MS_UART_LOW)
 80057c6:	f001 f93d 	bl	8006a44 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	4b9a      	ldr	r3, [pc, #616]	; (8005a38 <main+0x338>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b64      	cmp	r3, #100	; 0x64
 80057d4:	d90e      	bls.n	80057f4 <main+0xf4>
	  {
		  MX_USART2_UART_Init();
 80057d6:	f000 fed3 	bl	8006580 <MX_USART2_UART_Init>
		  UartLowReceiveState = 0;
 80057da:	4b98      	ldr	r3, [pc, #608]	; (8005a3c <main+0x33c>)
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 80057e0:	2210      	movs	r2, #16
 80057e2:	4997      	ldr	r1, [pc, #604]	; (8005a40 <main+0x340>)
 80057e4:	4897      	ldr	r0, [pc, #604]	; (8005a44 <main+0x344>)
 80057e6:	f005 f871 	bl	800a8cc <HAL_UART_Receive_DMA>
		  LastPkgTimeUartLow = HAL_GetTick();
 80057ea:	f001 f92b 	bl	8006a44 <HAL_GetTick>
 80057ee:	4603      	mov	r3, r0
 80057f0:	4a91      	ldr	r2, [pc, #580]	; (8005a38 <main+0x338>)
 80057f2:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_HIGH_UART_LOOP
	  if (HAL_GetTick() - LastPkgTimeUartHigh > SYSTEM_TIMING_MS_UART_HIGH)
 80057f4:	f001 f926 	bl	8006a44 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	4b93      	ldr	r3, [pc, #588]	; (8005a48 <main+0x348>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b64      	cmp	r3, #100	; 0x64
 8005802:	d90e      	bls.n	8005822 <main+0x122>
	  {
		  MX_USART3_UART_Init();
 8005804:	f000 fee6 	bl	80065d4 <MX_USART3_UART_Init>
		  UartHighReceiveState = 0;
 8005808:	4b90      	ldr	r3, [pc, #576]	; (8005a4c <main+0x34c>)
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 800580e:	2210      	movs	r2, #16
 8005810:	498f      	ldr	r1, [pc, #572]	; (8005a50 <main+0x350>)
 8005812:	4890      	ldr	r0, [pc, #576]	; (8005a54 <main+0x354>)
 8005814:	f005 f85a 	bl	800a8cc <HAL_UART_Receive_DMA>
		  LastPkgTimeUartHigh = HAL_GetTick();
 8005818:	f001 f914 	bl	8006a44 <HAL_GetTick>
 800581c:	4603      	mov	r3, r0
 800581e:	4a8a      	ldr	r2, [pc, #552]	; (8005a48 <main+0x348>)
 8005820:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  if ((UartLowReceiveState == 10) && (SerialControlWheelsResponce.CR == 13) && (SerialControlWheelsResponce.LF == 10))
 8005822:	4b86      	ldr	r3, [pc, #536]	; (8005a3c <main+0x33c>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b0a      	cmp	r3, #10
 800582a:	d126      	bne.n	800587a <main+0x17a>
 800582c:	4b84      	ldr	r3, [pc, #528]	; (8005a40 <main+0x340>)
 800582e:	7b9b      	ldrb	r3, [r3, #14]
 8005830:	2b0d      	cmp	r3, #13
 8005832:	d122      	bne.n	800587a <main+0x17a>
 8005834:	4b82      	ldr	r3, [pc, #520]	; (8005a40 <main+0x340>)
 8005836:	7bdb      	ldrb	r3, [r3, #15]
 8005838:	2b0a      	cmp	r3, #10
 800583a:	d11e      	bne.n	800587a <main+0x17a>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800583c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005840:	4885      	ldr	r0, [pc, #532]	; (8005a58 <main+0x358>)
 8005842:	f002 fc10 	bl	8008066 <HAL_GPIO_TogglePin>
		  UartLowReceiveState = 0;
 8005846:	4b7d      	ldr	r3, [pc, #500]	; (8005a3c <main+0x33c>)
 8005848:	2200      	movs	r2, #0
 800584a:	701a      	strb	r2, [r3, #0]
		  int32_t TemplateWheels[2] = { (SerialControlWheelsResponce.WheelLeftSteps * -1), (SerialControlWheelsResponce.WheelRightSteps * -1) };
 800584c:	4b7c      	ldr	r3, [pc, #496]	; (8005a40 <main+0x340>)
 800584e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8005852:	425b      	negs	r3, r3
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	4b7a      	ldr	r3, [pc, #488]	; (8005a40 <main+0x340>)
 8005858:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800585c:	425b      	negs	r3, r3
 800585e:	60fb      	str	r3, [r7, #12]
		  UartLowPrepareRaw(SYSTEM_HALL_FILTER_MAX, TemplateWheels, 2);
 8005860:	f107 0308 	add.w	r3, r7, #8
 8005864:	2202      	movs	r2, #2
 8005866:	4619      	mov	r1, r3
 8005868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800586c:	f7fd fe9c 	bl	80035a8 <UartLowPrepareRaw>
		  LastPkgTimeUartLow = HAL_GetTick();
 8005870:	f001 f8e8 	bl	8006a44 <HAL_GetTick>
 8005874:	4603      	mov	r3, r0
 8005876:	4a70      	ldr	r2, [pc, #448]	; (8005a38 <main+0x338>)
 8005878:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_GPIO_LOOP
	  if (HAL_GetTick() - LastUpdateGPIO > SYSTEM_TIMING_MS_GPIO)
 800587a:	f001 f8e3 	bl	8006a44 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	4b76      	ldr	r3, [pc, #472]	; (8005a5c <main+0x35c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b64      	cmp	r3, #100	; 0x64
 8005888:	d906      	bls.n	8005898 <main+0x198>
	  {
		  GPIOUpdate();
 800588a:	f7fd ffb3 	bl	80037f4 <GPIOUpdate>
		  LastUpdateGPIO = HAL_GetTick();
 800588e:	f001 f8d9 	bl	8006a44 <HAL_GetTick>
 8005892:	4603      	mov	r3, r0
 8005894:	4a71      	ldr	r2, [pc, #452]	; (8005a5c <main+0x35c>)
 8005896:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_ADC_INIT
#ifndef SYSTEM_NO_ADC_LOOP
	  if (HAL_GetTick() - LastUpdateADC > SYSTEM_TIMING_MS_ADC)
 8005898:	f001 f8d4 	bl	8006a44 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	4b70      	ldr	r3, [pc, #448]	; (8005a60 <main+0x360>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b0a      	cmp	r3, #10
 80058a6:	d908      	bls.n	80058ba <main+0x1ba>
	  {
		  ADCUpdate();
 80058a8:	f7fe f80e 	bl	80038c8 <ADCUpdate>
		  ADCPrepare();
 80058ac:	f7fe f864 	bl	8003978 <ADCPrepare>
		  LastUpdateADC = HAL_GetTick();
 80058b0:	f001 f8c8 	bl	8006a44 <HAL_GetTick>
 80058b4:	4603      	mov	r3, r0
 80058b6:	4a6a      	ldr	r2, [pc, #424]	; (8005a60 <main+0x360>)
 80058b8:	6013      	str	r3, [r2, #0]
	  }
#endif
#endif

	  if(HAL_GetTick() - LastUpdateIMU > SYSTEM_TIMING_MS_IMU)
 80058ba:	f001 f8c3 	bl	8006a44 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <main+0x364>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b0a      	cmp	r3, #10
 80058c8:	d90c      	bls.n	80058e4 <main+0x1e4>
	  {
		  ImuAccelUpdate();
 80058ca:	f7fe f971 	bl	8003bb0 <ImuAccelUpdate>
		  ImuGyroUpdate();
 80058ce:	f7fe fa1b 	bl	8003d08 <ImuGyroUpdate>
		  ImuMagUpdate();
 80058d2:	f7fe fb5d 	bl	8003f90 <ImuMagUpdate>
		  ImuUpdate();
 80058d6:	f7fe fc89 	bl	80041ec <ImuUpdate>
		  LastUpdateIMU = HAL_GetTick();
 80058da:	f001 f8b3 	bl	8006a44 <HAL_GetTick>
 80058de:	4603      	mov	r3, r0
 80058e0:	4a60      	ldr	r2, [pc, #384]	; (8005a64 <main+0x364>)
 80058e2:	6013      	str	r3, [r2, #0]
	  }

#ifndef SYSTEM_NO_HIGH_UART_LOOP
	  if ((UartHighReceiveState == 10) && (SerialHighLevelRequest.CR == 13) && (SerialHighLevelRequest.LF == 10))
 80058e4:	4b59      	ldr	r3, [pc, #356]	; (8005a4c <main+0x34c>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b0a      	cmp	r3, #10
 80058ec:	d174      	bne.n	80059d8 <main+0x2d8>
 80058ee:	4b58      	ldr	r3, [pc, #352]	; (8005a50 <main+0x350>)
 80058f0:	7b9b      	ldrb	r3, [r3, #14]
 80058f2:	2b0d      	cmp	r3, #13
 80058f4:	d170      	bne.n	80059d8 <main+0x2d8>
 80058f6:	4b56      	ldr	r3, [pc, #344]	; (8005a50 <main+0x350>)
 80058f8:	7bdb      	ldrb	r3, [r3, #15]
 80058fa:	2b0a      	cmp	r3, #10
 80058fc:	d16c      	bne.n	80059d8 <main+0x2d8>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80058fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005902:	4855      	ldr	r0, [pc, #340]	; (8005a58 <main+0x358>)
 8005904:	f002 fbaf 	bl	8008066 <HAL_GPIO_TogglePin>

		  BTControl.Front = SerialHighLevelRequest.Linear;
 8005908:	4b51      	ldr	r3, [pc, #324]	; (8005a50 <main+0x350>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a56      	ldr	r2, [pc, #344]	; (8005a68 <main+0x368>)
 800590e:	6013      	str	r3, [r2, #0]
		  BTControl.Turn = SerialHighLevelRequest.Angular;
 8005910:	4b4f      	ldr	r3, [pc, #316]	; (8005a50 <main+0x350>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4a54      	ldr	r2, [pc, #336]	; (8005a68 <main+0x368>)
 8005916:	6053      	str	r3, [r2, #4]
		  BTControl.Drive = SerialHighLevelRequest.DriveMode;
 8005918:	4b4d      	ldr	r3, [pc, #308]	; (8005a50 <main+0x350>)
 800591a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005926:	4b50      	ldr	r3, [pc, #320]	; (8005a68 <main+0x368>)
 8005928:	edc3 7a02 	vstr	s15, [r3, #8]

		  UartHighReceiveState = 0;
 800592c:	4b47      	ldr	r3, [pc, #284]	; (8005a4c <main+0x34c>)
 800592e:	2200      	movs	r2, #0
 8005930:	701a      	strb	r2, [r3, #0]
		  SerialHighLevelResponce.ControllerState = -1;
 8005932:	4b4e      	ldr	r3, [pc, #312]	; (8005a6c <main+0x36c>)
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	701a      	strb	r2, [r3, #0]
		  SerialHighLevelResponce.WheelLeftSteps = WheelsHall[0].OutputHall;
 8005938:	4b4d      	ldr	r3, [pc, #308]	; (8005a70 <main+0x370>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4a4b      	ldr	r2, [pc, #300]	; (8005a6c <main+0x36c>)
 800593e:	f8c2 3001 	str.w	r3, [r2, #1]
		  SerialHighLevelResponce.WheelRightSteps = WheelsHall[1].OutputHall;
 8005942:	4b4b      	ldr	r3, [pc, #300]	; (8005a70 <main+0x370>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	4a49      	ldr	r2, [pc, #292]	; (8005a6c <main+0x36c>)
 8005948:	f8c2 3005 	str.w	r3, [r2, #5]
		  SerialHighLevelResponce.BatteryPersentage = LowDiagnostic.Battery;
 800594c:	4b49      	ldr	r3, [pc, #292]	; (8005a74 <main+0x374>)
 800594e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005956:	edc7 7a01 	vstr	s15, [r7, #4]
 800595a:	793b      	ldrb	r3, [r7, #4]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	4b43      	ldr	r3, [pc, #268]	; (8005a6c <main+0x36c>)
 8005960:	725a      	strb	r2, [r3, #9]
		  SerialHighLevelResponce.Roll = eulerAngles.angle.roll;
 8005962:	4b45      	ldr	r3, [pc, #276]	; (8005a78 <main+0x378>)
 8005964:	edd3 7a00 	vldr	s15, [r3]
 8005968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800596c:	ee17 3a90 	vmov	r3, s15
 8005970:	b21a      	sxth	r2, r3
 8005972:	4b3e      	ldr	r3, [pc, #248]	; (8005a6c <main+0x36c>)
 8005974:	815a      	strh	r2, [r3, #10]
		  SerialHighLevelResponce.Pitch = eulerAngles.angle.pitch;
 8005976:	4b40      	ldr	r3, [pc, #256]	; (8005a78 <main+0x378>)
 8005978:	edd3 7a01 	vldr	s15, [r3, #4]
 800597c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005980:	ee17 3a90 	vmov	r3, s15
 8005984:	b21a      	sxth	r2, r3
 8005986:	4b39      	ldr	r3, [pc, #228]	; (8005a6c <main+0x36c>)
 8005988:	819a      	strh	r2, [r3, #12]
		  SerialHighLevelResponce.Yaw = eulerAngles.angle.yaw;
 800598a:	4b3b      	ldr	r3, [pc, #236]	; (8005a78 <main+0x378>)
 800598c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005994:	ee17 3a90 	vmov	r3, s15
 8005998:	b21a      	sxth	r2, r3
 800599a:	4b34      	ldr	r3, [pc, #208]	; (8005a6c <main+0x36c>)
 800599c:	81da      	strh	r2, [r3, #14]
		  SerialHighLevelResponce.CenterIkSensor = AdcModule.Sensors[4];
 800599e:	4b37      	ldr	r3, [pc, #220]	; (8005a7c <main+0x37c>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	891a      	ldrh	r2, [r3, #8]
 80059a4:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <main+0x36c>)
 80059a6:	821a      	strh	r2, [r3, #16]
		  SerialHighLevelResponce.ParameterNumber = 0;
 80059a8:	4b30      	ldr	r3, [pc, #192]	; (8005a6c <main+0x36c>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	749a      	strb	r2, [r3, #18]
		  SerialHighLevelResponce.ParametrValue = 0;
 80059ae:	4b2f      	ldr	r3, [pc, #188]	; (8005a6c <main+0x36c>)
 80059b0:	3313      	adds	r3, #19
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
		  SerialHighLevelResponce.CR = 13;
 80059b8:	4b2c      	ldr	r3, [pc, #176]	; (8005a6c <main+0x36c>)
 80059ba:	220d      	movs	r2, #13
 80059bc:	75da      	strb	r2, [r3, #23]
		  SerialHighLevelResponce.LF = 10;
 80059be:	4b2b      	ldr	r3, [pc, #172]	; (8005a6c <main+0x36c>)
 80059c0:	220a      	movs	r2, #10
 80059c2:	761a      	strb	r2, [r3, #24]
 		  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)SerialHighLevelResponce.Buffer, HIGH_LEVEL_RESPONCE_SIZE);
 80059c4:	2219      	movs	r2, #25
 80059c6:	4929      	ldr	r1, [pc, #164]	; (8005a6c <main+0x36c>)
 80059c8:	4822      	ldr	r0, [pc, #136]	; (8005a54 <main+0x354>)
 80059ca:	f004 ff01 	bl	800a7d0 <HAL_UART_Transmit_DMA>
		  LastPkgTimeUartHigh = HAL_GetTick();
 80059ce:	f001 f839 	bl	8006a44 <HAL_GetTick>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <main+0x348>)
 80059d6:	6013      	str	r3, [r2, #0]
	  }
#endif

	  	  if (HAL_GetTick() - LastUpdateLed > 50)
 80059d8:	f001 f834 	bl	8006a44 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	4b28      	ldr	r3, [pc, #160]	; (8005a80 <main+0x380>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b32      	cmp	r3, #50	; 0x32
 80059e6:	d906      	bls.n	80059f6 <main+0x2f6>
	  	  {
	  		  WS2812_UPDATE();
 80059e8:	f7ff fe24 	bl	8005634 <WS2812_UPDATE>
	  		  LastUpdateLed = HAL_GetTick();
 80059ec:	f001 f82a 	bl	8006a44 <HAL_GetTick>
 80059f0:	4603      	mov	r3, r0
 80059f2:	4a23      	ldr	r2, [pc, #140]	; (8005a80 <main+0x380>)
 80059f4:	6013      	str	r3, [r2, #0]
	  	  }

	  if (HAL_GetTick() - LastUpdateLogic > SYSTEM_TIMING_MS_LOGIC)
 80059f6:	f001 f825 	bl	8006a44 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <main+0x384>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b0a      	cmp	r3, #10
 8005a04:	d90a      	bls.n	8005a1c <main+0x31c>
	  {
		  BalancePrepare();						// CMPLT
 8005a06:	f7ff f89b 	bl	8004b40 <BalancePrepare>
		  BalanceCalculateSpeeds();				// CMPLT
 8005a0a:	f7ff fa35 	bl	8004e78 <BalanceCalculateSpeeds>
		  BalancePositionLinearControl();		//
 8005a0e:	f7ff fb3f 	bl	8005090 <BalancePositionLinearControl>
		  //BalanceSpeedLinearControl();			//
		  //BalancePositionAngularControl();
		  //BalanceLoop();						//
		  //BalanceResultLoop();					//
		  LastUpdateLogic = HAL_GetTick();
 8005a12:	f001 f817 	bl	8006a44 <HAL_GetTick>
 8005a16:	4603      	mov	r3, r0
 8005a18:	4a1a      	ldr	r2, [pc, #104]	; (8005a84 <main+0x384>)
 8005a1a:	6013      	str	r3, [r2, #0]
	  }

#ifndef SYSTEM_NO_LOW_UART_LOOP
	  SerialLowControlLoop();
 8005a1c:	f7fe f8ae 	bl	8003b7c <SerialLowControlLoop>
	  if (HAL_GetTick() - LastPkgTimeUartLow > SYSTEM_TIMING_MS_UART_LOW)
 8005a20:	e6d1      	b.n	80057c6 <main+0xc6>
 8005a22:	bf00      	nop
 8005a24:	80808081 	.word	0x80808081
 8005a28:	20000bd7 	.word	0x20000bd7
 8005a2c:	20000bd8 	.word	0x20000bd8
 8005a30:	20000bd9 	.word	0x20000bd9
 8005a34:	20000f6c 	.word	0x20000f6c
 8005a38:	20000b9c 	.word	0x20000b9c
 8005a3c:	20000ba4 	.word	0x20000ba4
 8005a40:	20000c80 	.word	0x20000c80
 8005a44:	200012c8 	.word	0x200012c8
 8005a48:	20000ba0 	.word	0x20000ba0
 8005a4c:	20000ba5 	.word	0x20000ba5
 8005a50:	20000d90 	.word	0x20000d90
 8005a54:	200011c4 	.word	0x200011c4
 8005a58:	40020c00 	.word	0x40020c00
 8005a5c:	20000bac 	.word	0x20000bac
 8005a60:	20000bb0 	.word	0x20000bb0
 8005a64:	20000bb4 	.word	0x20000bb4
 8005a68:	20000c40 	.word	0x20000c40
 8005a6c:	20000dc4 	.word	0x20000dc4
 8005a70:	20000e30 	.word	0x20000e30
 8005a74:	20000cb0 	.word	0x20000cb0
 8005a78:	20000c6c 	.word	0x20000c6c
 8005a7c:	20000cf0 	.word	0x20000cf0
 8005a80:	20000bbc 	.word	0x20000bbc
 8005a84:	20000bb8 	.word	0x20000bb8

08005a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b094      	sub	sp, #80	; 0x50
 8005a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a8e:	f107 0320 	add.w	r3, r7, #32
 8005a92:	2230      	movs	r2, #48	; 0x30
 8005a94:	2100      	movs	r1, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f007 f83c 	bl	800cb14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a9c:	f107 030c 	add.w	r3, r7, #12
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	609a      	str	r2, [r3, #8]
 8005aa8:	60da      	str	r2, [r3, #12]
 8005aaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005aac:	2300      	movs	r3, #0
 8005aae:	60bb      	str	r3, [r7, #8]
 8005ab0:	4b28      	ldr	r3, [pc, #160]	; (8005b54 <SystemClock_Config+0xcc>)
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	4a27      	ldr	r2, [pc, #156]	; (8005b54 <SystemClock_Config+0xcc>)
 8005ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aba:	6413      	str	r3, [r2, #64]	; 0x40
 8005abc:	4b25      	ldr	r3, [pc, #148]	; (8005b54 <SystemClock_Config+0xcc>)
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ac8:	2300      	movs	r3, #0
 8005aca:	607b      	str	r3, [r7, #4]
 8005acc:	4b22      	ldr	r3, [pc, #136]	; (8005b58 <SystemClock_Config+0xd0>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a21      	ldr	r2, [pc, #132]	; (8005b58 <SystemClock_Config+0xd0>)
 8005ad2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	4b1f      	ldr	r3, [pc, #124]	; (8005b58 <SystemClock_Config+0xd0>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ae0:	607b      	str	r3, [r7, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005aee:	2302      	movs	r3, #2
 8005af0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005af2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005af8:	2304      	movs	r3, #4
 8005afa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005afc:	23a8      	movs	r3, #168	; 0xa8
 8005afe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b00:	2302      	movs	r3, #2
 8005b02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005b04:	2304      	movs	r3, #4
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b08:	f107 0320 	add.w	r3, r7, #32
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f002 fac5 	bl	800809c <HAL_RCC_OscConfig>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005b18:	f000 f820 	bl	8005b5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b1c:	230f      	movs	r3, #15
 8005b1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b20:	2302      	movs	r3, #2
 8005b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005b28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005b2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005b34:	f107 030c 	add.w	r3, r7, #12
 8005b38:	2105      	movs	r1, #5
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f002 fd26 	bl	800858c <HAL_RCC_ClockConfig>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005b46:	f000 f809 	bl	8005b5c <Error_Handler>
  }
}
 8005b4a:	bf00      	nop
 8005b4c:	3750      	adds	r7, #80	; 0x50
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800
 8005b58:	40007000 	.word	0x40007000

08005b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b60:	b672      	cpsid	i
}
 8005b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b64:	e7fe      	b.n	8005b64 <Error_Handler+0x8>
	...

08005b68 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005b6c:	4b17      	ldr	r3, [pc, #92]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005b6e:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <MX_SPI2_Init+0x68>)
 8005b70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005b72:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005b74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005b7a:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b80:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005b86:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005b88:	2202      	movs	r2, #2
 8005b8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005b8c:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005b92:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bac:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005bb2:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005bb4:	220a      	movs	r2, #10
 8005bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005bb8:	4804      	ldr	r0, [pc, #16]	; (8005bcc <MX_SPI2_Init+0x64>)
 8005bba:	f002 fee3 	bl	8008984 <HAL_SPI_Init>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005bc4:	f7ff ffca 	bl	8005b5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005bc8:	bf00      	nop
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20000e54 	.word	0x20000e54
 8005bd0:	40003800 	.word	0x40003800

08005bd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	; 0x28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bdc:	f107 0314 	add.w	r3, r7, #20
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	609a      	str	r2, [r3, #8]
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a19      	ldr	r2, [pc, #100]	; (8005c58 <HAL_SPI_MspInit+0x84>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d12c      	bne.n	8005c50 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	4b18      	ldr	r3, [pc, #96]	; (8005c5c <HAL_SPI_MspInit+0x88>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	4a17      	ldr	r2, [pc, #92]	; (8005c5c <HAL_SPI_MspInit+0x88>)
 8005c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c04:	6413      	str	r3, [r2, #64]	; 0x40
 8005c06:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <HAL_SPI_MspInit+0x88>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <HAL_SPI_MspInit+0x88>)
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	4a10      	ldr	r2, [pc, #64]	; (8005c5c <HAL_SPI_MspInit+0x88>)
 8005c1c:	f043 0302 	orr.w	r3, r3, #2
 8005c20:	6313      	str	r3, [r2, #48]	; 0x30
 8005c22:	4b0e      	ldr	r3, [pc, #56]	; (8005c5c <HAL_SPI_MspInit+0x88>)
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 8005c2e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c34:	2302      	movs	r3, #2
 8005c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005c40:	2305      	movs	r3, #5
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c44:	f107 0314 	add.w	r3, r7, #20
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4805      	ldr	r0, [pc, #20]	; (8005c60 <HAL_SPI_MspInit+0x8c>)
 8005c4c:	f002 f83e 	bl	8007ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005c50:	bf00      	nop
 8005c52:	3728      	adds	r7, #40	; 0x28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40003800 	.word	0x40003800
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40020400 	.word	0x40020400

08005c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	607b      	str	r3, [r7, #4]
 8005c6e:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <HAL_MspInit+0x4c>)
 8005c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c72:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <HAL_MspInit+0x4c>)
 8005c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c78:	6453      	str	r3, [r2, #68]	; 0x44
 8005c7a:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <HAL_MspInit+0x4c>)
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c82:	607b      	str	r3, [r7, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c86:	2300      	movs	r3, #0
 8005c88:	603b      	str	r3, [r7, #0]
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_MspInit+0x4c>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <HAL_MspInit+0x4c>)
 8005c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c94:	6413      	str	r3, [r2, #64]	; 0x40
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <HAL_MspInit+0x4c>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40023800 	.word	0x40023800

08005cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005cb8:	e7fe      	b.n	8005cb8 <NMI_Handler+0x4>

08005cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cbe:	e7fe      	b.n	8005cbe <HardFault_Handler+0x4>

08005cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cc4:	e7fe      	b.n	8005cc4 <MemManage_Handler+0x4>

08005cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cca:	e7fe      	b.n	8005cca <BusFault_Handler+0x4>

08005ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cd0:	e7fe      	b.n	8005cd0 <UsageFault_Handler+0x4>

08005cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cd6:	bf00      	nop
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cf2:	bf00      	nop
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d00:	f000 fe8c 	bl	8006a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d04:	bf00      	nop
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005d0c:	4802      	ldr	r0, [pc, #8]	; (8005d18 <DMA1_Stream1_IRQHandler+0x10>)
 8005d0e:	f001 fd73 	bl	80077f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20001164 	.word	0x20001164

08005d1c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8005d20:	4802      	ldr	r0, [pc, #8]	; (8005d2c <DMA1_Stream3_IRQHandler+0x10>)
 8005d22:	f001 fd69 	bl	80077f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005d26:	bf00      	nop
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000eac 	.word	0x20000eac

08005d30 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005d34:	4802      	ldr	r0, [pc, #8]	; (8005d40 <DMA1_Stream4_IRQHandler+0x10>)
 8005d36:	f001 fd5f 	bl	80077f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005d3a:	bf00      	nop
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20001208 	.word	0x20001208

08005d44 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005d48:	4802      	ldr	r0, [pc, #8]	; (8005d54 <DMA1_Stream5_IRQHandler+0x10>)
 8005d4a:	f001 fd55 	bl	80077f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20001104 	.word	0x20001104

08005d58 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005d5c:	4802      	ldr	r0, [pc, #8]	; (8005d68 <DMA1_Stream6_IRQHandler+0x10>)
 8005d5e:	f001 fd4b 	bl	80077f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005d62:	bf00      	nop
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20001268 	.word	0x20001268

08005d6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005d70:	4802      	ldr	r0, [pc, #8]	; (8005d7c <USART2_IRQHandler+0x10>)
 8005d72:	f004 fddb 	bl	800a92c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005d76:	bf00      	nop
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200012c8 	.word	0x200012c8

08005d80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005d84:	4802      	ldr	r0, [pc, #8]	; (8005d90 <USART3_IRQHandler+0x10>)
 8005d86:	f004 fdd1 	bl	800a92c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005d8a:	bf00      	nop
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	200011c4 	.word	0x200011c4

08005d94 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8005d98:	4802      	ldr	r0, [pc, #8]	; (8005da4 <DMA2_Stream1_IRQHandler+0x10>)
 8005d9a:	f001 fd2d 	bl	80077f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005d9e:	bf00      	nop
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000f0c 	.word	0x20000f0c

08005da8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8005dac:	4802      	ldr	r0, [pc, #8]	; (8005db8 <DMA2_Stream2_IRQHandler+0x10>)
 8005dae:	f001 fd23 	bl	80077f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005db2:	bf00      	nop
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	2000105c 	.word	0x2000105c

08005dbc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8005dc0:	4802      	ldr	r0, [pc, #8]	; (8005dcc <DMA2_Stream6_IRQHandler+0x10>)
 8005dc2:	f001 fd19 	bl	80077f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005dc6:	bf00      	nop
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000ffc 	.word	0x20000ffc

08005dd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
	return 1;
 8005dd4:	2301      	movs	r3, #1
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <_kill>:

int _kill(int pid, int sig)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005dea:	f006 fe69 	bl	800cac0 <__errno>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2216      	movs	r2, #22
 8005df2:	601a      	str	r2, [r3, #0]
	return -1;
 8005df4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <_exit>:

void _exit (int status)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005e08:	f04f 31ff 	mov.w	r1, #4294967295
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff ffe7 	bl	8005de0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005e12:	e7fe      	b.n	8005e12 <_exit+0x12>

08005e14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	e00a      	b.n	8005e3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005e26:	f3af 8000 	nop.w
 8005e2a:	4601      	mov	r1, r0
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	60ba      	str	r2, [r7, #8]
 8005e32:	b2ca      	uxtb	r2, r1
 8005e34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	dbf0      	blt.n	8005e26 <_read+0x12>
	}

return len;
 8005e44:	687b      	ldr	r3, [r7, #4]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b086      	sub	sp, #24
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e009      	b.n	8005e74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	60ba      	str	r2, [r7, #8]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	3301      	adds	r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	dbf1      	blt.n	8005e60 <_write+0x12>
	}
	return len;
 8005e7c:	687b      	ldr	r3, [r7, #4]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <_close>:

int _close(int file)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
	return -1;
 8005e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005eae:	605a      	str	r2, [r3, #4]
	return 0;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <_isatty>:

int _isatty(int file)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
	return 1;
 8005ec6:	2301      	movs	r3, #1
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
	return 0;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ef8:	4a14      	ldr	r2, [pc, #80]	; (8005f4c <_sbrk+0x5c>)
 8005efa:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <_sbrk+0x60>)
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f04:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <_sbrk+0x64>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f0c:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <_sbrk+0x64>)
 8005f0e:	4a12      	ldr	r2, [pc, #72]	; (8005f58 <_sbrk+0x68>)
 8005f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f12:	4b10      	ldr	r3, [pc, #64]	; (8005f54 <_sbrk+0x64>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4413      	add	r3, r2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d207      	bcs.n	8005f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f20:	f006 fdce 	bl	800cac0 <__errno>
 8005f24:	4603      	mov	r3, r0
 8005f26:	220c      	movs	r2, #12
 8005f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2e:	e009      	b.n	8005f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f30:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <_sbrk+0x64>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f36:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <_sbrk+0x64>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	4a05      	ldr	r2, [pc, #20]	; (8005f54 <_sbrk+0x64>)
 8005f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f42:	68fb      	ldr	r3, [r7, #12]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20020000 	.word	0x20020000
 8005f50:	00000400 	.word	0x00000400
 8005f54:	20000bdc 	.word	0x20000bdc
 8005f58:	20001320 	.word	0x20001320

08005f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f60:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <SystemInit+0x20>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	4a05      	ldr	r2, [pc, #20]	; (8005f7c <SystemInit+0x20>)
 8005f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f70:	bf00      	nop
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	e000ed00 	.word	0xe000ed00

08005f80 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch3;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b096      	sub	sp, #88	; 0x58
 8005f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	605a      	str	r2, [r3, #4]
 8005f90:	609a      	str	r2, [r3, #8]
 8005f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	605a      	str	r2, [r3, #4]
 8005fa8:	609a      	str	r2, [r3, #8]
 8005faa:	60da      	str	r2, [r3, #12]
 8005fac:	611a      	str	r2, [r3, #16]
 8005fae:	615a      	str	r2, [r3, #20]
 8005fb0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005fb2:	1d3b      	adds	r3, r7, #4
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f006 fdab 	bl	800cb14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005fbe:	4b4a      	ldr	r3, [pc, #296]	; (80060e8 <MX_TIM1_Init+0x168>)
 8005fc0:	4a4a      	ldr	r2, [pc, #296]	; (80060ec <MX_TIM1_Init+0x16c>)
 8005fc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8005fc4:	4b48      	ldr	r3, [pc, #288]	; (80060e8 <MX_TIM1_Init+0x168>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fca:	4b47      	ldr	r3, [pc, #284]	; (80060e8 <MX_TIM1_Init+0x168>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 105;
 8005fd0:	4b45      	ldr	r3, [pc, #276]	; (80060e8 <MX_TIM1_Init+0x168>)
 8005fd2:	2269      	movs	r2, #105	; 0x69
 8005fd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fd6:	4b44      	ldr	r3, [pc, #272]	; (80060e8 <MX_TIM1_Init+0x168>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005fdc:	4b42      	ldr	r3, [pc, #264]	; (80060e8 <MX_TIM1_Init+0x168>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fe2:	4b41      	ldr	r3, [pc, #260]	; (80060e8 <MX_TIM1_Init+0x168>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005fe8:	483f      	ldr	r0, [pc, #252]	; (80060e8 <MX_TIM1_Init+0x168>)
 8005fea:	f003 fa73 	bl	80094d4 <HAL_TIM_Base_Init>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8005ff4:	f7ff fdb2 	bl	8005b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ffc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005ffe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006002:	4619      	mov	r1, r3
 8006004:	4838      	ldr	r0, [pc, #224]	; (80060e8 <MX_TIM1_Init+0x168>)
 8006006:	f003 fe01 	bl	8009c0c <HAL_TIM_ConfigClockSource>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8006010:	f7ff fda4 	bl	8005b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006014:	4834      	ldr	r0, [pc, #208]	; (80060e8 <MX_TIM1_Init+0x168>)
 8006016:	f003 fb15 	bl	8009644 <HAL_TIM_PWM_Init>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8006020:	f7ff fd9c 	bl	8005b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006024:	2300      	movs	r3, #0
 8006026:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006028:	2300      	movs	r3, #0
 800602a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800602c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006030:	4619      	mov	r1, r3
 8006032:	482d      	ldr	r0, [pc, #180]	; (80060e8 <MX_TIM1_Init+0x168>)
 8006034:	f004 fab0 	bl	800a598 <HAL_TIMEx_MasterConfigSynchronization>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800603e:	f7ff fd8d 	bl	8005b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006042:	2360      	movs	r3, #96	; 0x60
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800604a:	2300      	movs	r3, #0
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800604e:	2300      	movs	r3, #0
 8006050:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006052:	2300      	movs	r3, #0
 8006054:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006056:	2300      	movs	r3, #0
 8006058:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800605a:	2300      	movs	r3, #0
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800605e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006062:	2200      	movs	r2, #0
 8006064:	4619      	mov	r1, r3
 8006066:	4820      	ldr	r0, [pc, #128]	; (80060e8 <MX_TIM1_Init+0x168>)
 8006068:	f003 fd0e 	bl	8009a88 <HAL_TIM_PWM_ConfigChannel>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8006072:	f7ff fd73 	bl	8005b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800607a:	2204      	movs	r2, #4
 800607c:	4619      	mov	r1, r3
 800607e:	481a      	ldr	r0, [pc, #104]	; (80060e8 <MX_TIM1_Init+0x168>)
 8006080:	f003 fd02 	bl	8009a88 <HAL_TIM_PWM_ConfigChannel>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800608a:	f7ff fd67 	bl	8005b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800608e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006092:	2208      	movs	r2, #8
 8006094:	4619      	mov	r1, r3
 8006096:	4814      	ldr	r0, [pc, #80]	; (80060e8 <MX_TIM1_Init+0x168>)
 8006098:	f003 fcf6 	bl	8009a88 <HAL_TIM_PWM_ConfigChannel>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80060a2:	f7ff fd5b 	bl	8005b5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80060ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80060c0:	2300      	movs	r3, #0
 80060c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	4619      	mov	r1, r3
 80060c8:	4807      	ldr	r0, [pc, #28]	; (80060e8 <MX_TIM1_Init+0x168>)
 80060ca:	f004 fae1 	bl	800a690 <HAL_TIMEx_ConfigBreakDeadTime>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80060d4:	f7ff fd42 	bl	8005b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80060d8:	4803      	ldr	r0, [pc, #12]	; (80060e8 <MX_TIM1_Init+0x168>)
 80060da:	f000 f9ef 	bl	80064bc <HAL_TIM_MspPostInit>

}
 80060de:	bf00      	nop
 80060e0:	3758      	adds	r7, #88	; 0x58
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200010bc 	.word	0x200010bc
 80060ec:	40010000 	.word	0x40010000

080060f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08e      	sub	sp, #56	; 0x38
 80060f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	605a      	str	r2, [r3, #4]
 8006100:	609a      	str	r2, [r3, #8]
 8006102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006104:	f107 0320 	add.w	r3, r7, #32
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800610e:	1d3b      	adds	r3, r7, #4
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	605a      	str	r2, [r3, #4]
 8006116:	609a      	str	r2, [r3, #8]
 8006118:	60da      	str	r2, [r3, #12]
 800611a:	611a      	str	r2, [r3, #16]
 800611c:	615a      	str	r2, [r3, #20]
 800611e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006120:	4b2c      	ldr	r3, [pc, #176]	; (80061d4 <MX_TIM4_Init+0xe4>)
 8006122:	4a2d      	ldr	r2, [pc, #180]	; (80061d8 <MX_TIM4_Init+0xe8>)
 8006124:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006126:	4b2b      	ldr	r3, [pc, #172]	; (80061d4 <MX_TIM4_Init+0xe4>)
 8006128:	2200      	movs	r2, #0
 800612a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800612c:	4b29      	ldr	r3, [pc, #164]	; (80061d4 <MX_TIM4_Init+0xe4>)
 800612e:	2200      	movs	r2, #0
 8006130:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 8006132:	4b28      	ldr	r3, [pc, #160]	; (80061d4 <MX_TIM4_Init+0xe4>)
 8006134:	2269      	movs	r2, #105	; 0x69
 8006136:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006138:	4b26      	ldr	r3, [pc, #152]	; (80061d4 <MX_TIM4_Init+0xe4>)
 800613a:	2200      	movs	r2, #0
 800613c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800613e:	4b25      	ldr	r3, [pc, #148]	; (80061d4 <MX_TIM4_Init+0xe4>)
 8006140:	2200      	movs	r2, #0
 8006142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006144:	4823      	ldr	r0, [pc, #140]	; (80061d4 <MX_TIM4_Init+0xe4>)
 8006146:	f003 f9c5 	bl	80094d4 <HAL_TIM_Base_Init>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8006150:	f7ff fd04 	bl	8005b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800615a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800615e:	4619      	mov	r1, r3
 8006160:	481c      	ldr	r0, [pc, #112]	; (80061d4 <MX_TIM4_Init+0xe4>)
 8006162:	f003 fd53 	bl	8009c0c <HAL_TIM_ConfigClockSource>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800616c:	f7ff fcf6 	bl	8005b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006170:	4818      	ldr	r0, [pc, #96]	; (80061d4 <MX_TIM4_Init+0xe4>)
 8006172:	f003 fa67 	bl	8009644 <HAL_TIM_PWM_Init>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800617c:	f7ff fcee 	bl	8005b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006180:	2300      	movs	r3, #0
 8006182:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006184:	2300      	movs	r3, #0
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006188:	f107 0320 	add.w	r3, r7, #32
 800618c:	4619      	mov	r1, r3
 800618e:	4811      	ldr	r0, [pc, #68]	; (80061d4 <MX_TIM4_Init+0xe4>)
 8006190:	f004 fa02 	bl	800a598 <HAL_TIMEx_MasterConfigSynchronization>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800619a:	f7ff fcdf 	bl	8005b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800619e:	2360      	movs	r3, #96	; 0x60
 80061a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80061ae:	1d3b      	adds	r3, r7, #4
 80061b0:	2204      	movs	r2, #4
 80061b2:	4619      	mov	r1, r3
 80061b4:	4807      	ldr	r0, [pc, #28]	; (80061d4 <MX_TIM4_Init+0xe4>)
 80061b6:	f003 fc67 	bl	8009a88 <HAL_TIM_PWM_ConfigChannel>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80061c0:	f7ff fccc 	bl	8005b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80061c4:	4803      	ldr	r0, [pc, #12]	; (80061d4 <MX_TIM4_Init+0xe4>)
 80061c6:	f000 f979 	bl	80064bc <HAL_TIM_MspPostInit>

}
 80061ca:	bf00      	nop
 80061cc:	3738      	adds	r7, #56	; 0x38
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000fb4 	.word	0x20000fb4
 80061d8:	40000800 	.word	0x40000800

080061dc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80061e2:	f107 0308 	add.w	r3, r7, #8
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	605a      	str	r2, [r3, #4]
 80061ec:	609a      	str	r2, [r3, #8]
 80061ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061f0:	463b      	mov	r3, r7
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80061f8:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <MX_TIM8_Init+0x98>)
 80061fa:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <MX_TIM8_Init+0x9c>)
 80061fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 80061fe:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <MX_TIM8_Init+0x98>)
 8006200:	22a7      	movs	r2, #167	; 0xa7
 8006202:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006204:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <MX_TIM8_Init+0x98>)
 8006206:	2200      	movs	r2, #0
 8006208:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800620a:	4b1a      	ldr	r3, [pc, #104]	; (8006274 <MX_TIM8_Init+0x98>)
 800620c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006210:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006212:	4b18      	ldr	r3, [pc, #96]	; (8006274 <MX_TIM8_Init+0x98>)
 8006214:	2200      	movs	r2, #0
 8006216:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006218:	4b16      	ldr	r3, [pc, #88]	; (8006274 <MX_TIM8_Init+0x98>)
 800621a:	2200      	movs	r2, #0
 800621c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800621e:	4b15      	ldr	r3, [pc, #84]	; (8006274 <MX_TIM8_Init+0x98>)
 8006220:	2200      	movs	r2, #0
 8006222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8006224:	4813      	ldr	r0, [pc, #76]	; (8006274 <MX_TIM8_Init+0x98>)
 8006226:	f003 f955 	bl	80094d4 <HAL_TIM_Base_Init>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8006230:	f7ff fc94 	bl	8005b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006238:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800623a:	f107 0308 	add.w	r3, r7, #8
 800623e:	4619      	mov	r1, r3
 8006240:	480c      	ldr	r0, [pc, #48]	; (8006274 <MX_TIM8_Init+0x98>)
 8006242:	f003 fce3 	bl	8009c0c <HAL_TIM_ConfigClockSource>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800624c:	f7ff fc86 	bl	8005b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006250:	2300      	movs	r3, #0
 8006252:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006254:	2300      	movs	r3, #0
 8006256:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006258:	463b      	mov	r3, r7
 800625a:	4619      	mov	r1, r3
 800625c:	4805      	ldr	r0, [pc, #20]	; (8006274 <MX_TIM8_Init+0x98>)
 800625e:	f004 f99b 	bl	800a598 <HAL_TIMEx_MasterConfigSynchronization>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8006268:	f7ff fc78 	bl	8005b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800626c:	bf00      	nop
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000f6c 	.word	0x20000f6c
 8006278:	40010400 	.word	0x40010400

0800627c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a80      	ldr	r2, [pc, #512]	; (800648c <HAL_TIM_Base_MspInit+0x210>)
 800628a:	4293      	cmp	r3, r2
 800628c:	f040 80a2 	bne.w	80063d4 <HAL_TIM_Base_MspInit+0x158>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	4b7e      	ldr	r3, [pc, #504]	; (8006490 <HAL_TIM_Base_MspInit+0x214>)
 8006296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006298:	4a7d      	ldr	r2, [pc, #500]	; (8006490 <HAL_TIM_Base_MspInit+0x214>)
 800629a:	f043 0301 	orr.w	r3, r3, #1
 800629e:	6453      	str	r3, [r2, #68]	; 0x44
 80062a0:	4b7b      	ldr	r3, [pc, #492]	; (8006490 <HAL_TIM_Base_MspInit+0x214>)
 80062a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 80062ac:	4b79      	ldr	r3, [pc, #484]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 80062ae:	4a7a      	ldr	r2, [pc, #488]	; (8006498 <HAL_TIM_Base_MspInit+0x21c>)
 80062b0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 80062b2:	4b78      	ldr	r3, [pc, #480]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 80062b4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80062b8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062ba:	4b76      	ldr	r3, [pc, #472]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 80062bc:	2240      	movs	r2, #64	; 0x40
 80062be:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80062c0:	4b74      	ldr	r3, [pc, #464]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80062c6:	4b73      	ldr	r3, [pc, #460]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 80062c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062cc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80062ce:	4b71      	ldr	r3, [pc, #452]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 80062d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062d4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80062d6:	4b6f      	ldr	r3, [pc, #444]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 80062d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062dc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 80062de:	4b6d      	ldr	r3, [pc, #436]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 80062e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062e4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80062e6:	4b6b      	ldr	r3, [pc, #428]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062ec:	4b69      	ldr	r3, [pc, #420]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 80062f2:	4868      	ldr	r0, [pc, #416]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 80062f4:	f001 f8e8 	bl	80074c8 <HAL_DMA_Init>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 80062fe:	f7ff fc2d 	bl	8005b5c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a63      	ldr	r2, [pc, #396]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 8006306:	629a      	str	r2, [r3, #40]	; 0x28
 8006308:	4a62      	ldr	r2, [pc, #392]	; (8006494 <HAL_TIM_Base_MspInit+0x218>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800630e:	4b63      	ldr	r3, [pc, #396]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 8006310:	4a63      	ldr	r2, [pc, #396]	; (80064a0 <HAL_TIM_Base_MspInit+0x224>)
 8006312:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8006314:	4b61      	ldr	r3, [pc, #388]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 8006316:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800631a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800631c:	4b5f      	ldr	r3, [pc, #380]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 800631e:	2240      	movs	r2, #64	; 0x40
 8006320:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006322:	4b5e      	ldr	r3, [pc, #376]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 8006324:	2200      	movs	r2, #0
 8006326:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006328:	4b5c      	ldr	r3, [pc, #368]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 800632a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800632e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006330:	4b5a      	ldr	r3, [pc, #360]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 8006332:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006336:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006338:	4b58      	ldr	r3, [pc, #352]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 800633a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800633e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8006340:	4b56      	ldr	r3, [pc, #344]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 8006342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006346:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006348:	4b54      	ldr	r3, [pc, #336]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 800634a:	2200      	movs	r2, #0
 800634c:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800634e:	4b53      	ldr	r3, [pc, #332]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 8006350:	2200      	movs	r2, #0
 8006352:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8006354:	4851      	ldr	r0, [pc, #324]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 8006356:	f001 f8b7 	bl	80074c8 <HAL_DMA_Init>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <HAL_TIM_Base_MspInit+0xe8>
    {
      Error_Handler();
 8006360:	f7ff fbfc 	bl	8005b5c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a4d      	ldr	r2, [pc, #308]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 8006368:	625a      	str	r2, [r3, #36]	; 0x24
 800636a:	4a4c      	ldr	r2, [pc, #304]	; (800649c <HAL_TIM_Base_MspInit+0x220>)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8006370:	4b4c      	ldr	r3, [pc, #304]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 8006372:	4a4d      	ldr	r2, [pc, #308]	; (80064a8 <HAL_TIM_Base_MspInit+0x22c>)
 8006374:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8006376:	4b4b      	ldr	r3, [pc, #300]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 8006378:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800637c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800637e:	4b49      	ldr	r3, [pc, #292]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 8006380:	2240      	movs	r2, #64	; 0x40
 8006382:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006384:	4b47      	ldr	r3, [pc, #284]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 8006386:	2200      	movs	r2, #0
 8006388:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800638a:	4b46      	ldr	r3, [pc, #280]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 800638c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006390:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006392:	4b44      	ldr	r3, [pc, #272]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 8006394:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006398:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800639a:	4b42      	ldr	r3, [pc, #264]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 800639c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063a0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 80063a2:	4b40      	ldr	r3, [pc, #256]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 80063a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063a8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80063aa:	4b3e      	ldr	r3, [pc, #248]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063b0:	4b3c      	ldr	r3, [pc, #240]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80063b6:	483b      	ldr	r0, [pc, #236]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 80063b8:	f001 f886 	bl	80074c8 <HAL_DMA_Init>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_TIM_Base_MspInit+0x14a>
    {
      Error_Handler();
 80063c2:	f7ff fbcb 	bl	8005b5c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a36      	ldr	r2, [pc, #216]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 80063ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80063cc:	4a35      	ldr	r2, [pc, #212]	; (80064a4 <HAL_TIM_Base_MspInit+0x228>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80063d2:	e057      	b.n	8006484 <HAL_TIM_Base_MspInit+0x208>
  else if(tim_baseHandle->Instance==TIM4)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a34      	ldr	r2, [pc, #208]	; (80064ac <HAL_TIM_Base_MspInit+0x230>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d13f      	bne.n	800645e <HAL_TIM_Base_MspInit+0x1e2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80063de:	2300      	movs	r3, #0
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	4b2b      	ldr	r3, [pc, #172]	; (8006490 <HAL_TIM_Base_MspInit+0x214>)
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	4a2a      	ldr	r2, [pc, #168]	; (8006490 <HAL_TIM_Base_MspInit+0x214>)
 80063e8:	f043 0304 	orr.w	r3, r3, #4
 80063ec:	6413      	str	r3, [r2, #64]	; 0x40
 80063ee:	4b28      	ldr	r3, [pc, #160]	; (8006490 <HAL_TIM_Base_MspInit+0x214>)
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 80063fa:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 80063fc:	4a2d      	ldr	r2, [pc, #180]	; (80064b4 <HAL_TIM_Base_MspInit+0x238>)
 80063fe:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8006400:	4b2b      	ldr	r3, [pc, #172]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 8006402:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006406:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006408:	4b29      	ldr	r3, [pc, #164]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 800640a:	2240      	movs	r2, #64	; 0x40
 800640c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800640e:	4b28      	ldr	r3, [pc, #160]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 8006410:	2200      	movs	r2, #0
 8006412:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006414:	4b26      	ldr	r3, [pc, #152]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 8006416:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800641a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800641c:	4b24      	ldr	r3, [pc, #144]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 800641e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006422:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006424:	4b22      	ldr	r3, [pc, #136]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 8006426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800642a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 800642c:	4b20      	ldr	r3, [pc, #128]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 800642e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006432:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8006434:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 8006436:	2200      	movs	r2, #0
 8006438:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800643a:	4b1d      	ldr	r3, [pc, #116]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 800643c:	2200      	movs	r2, #0
 800643e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8006440:	481b      	ldr	r0, [pc, #108]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 8006442:	f001 f841 	bl	80074c8 <HAL_DMA_Init>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <HAL_TIM_Base_MspInit+0x1d4>
      Error_Handler();
 800644c:	f7ff fb86 	bl	8005b5c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a17      	ldr	r2, [pc, #92]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 8006454:	629a      	str	r2, [r3, #40]	; 0x28
 8006456:	4a16      	ldr	r2, [pc, #88]	; (80064b0 <HAL_TIM_Base_MspInit+0x234>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800645c:	e012      	b.n	8006484 <HAL_TIM_Base_MspInit+0x208>
  else if(tim_baseHandle->Instance==TIM8)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <HAL_TIM_Base_MspInit+0x23c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d10d      	bne.n	8006484 <HAL_TIM_Base_MspInit+0x208>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	4b08      	ldr	r3, [pc, #32]	; (8006490 <HAL_TIM_Base_MspInit+0x214>)
 800646e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006470:	4a07      	ldr	r2, [pc, #28]	; (8006490 <HAL_TIM_Base_MspInit+0x214>)
 8006472:	f043 0302 	orr.w	r3, r3, #2
 8006476:	6453      	str	r3, [r2, #68]	; 0x44
 8006478:	4b05      	ldr	r3, [pc, #20]	; (8006490 <HAL_TIM_Base_MspInit+0x214>)
 800647a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	68fb      	ldr	r3, [r7, #12]
}
 8006484:	bf00      	nop
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40010000 	.word	0x40010000
 8006490:	40023800 	.word	0x40023800
 8006494:	2000105c 	.word	0x2000105c
 8006498:	40026440 	.word	0x40026440
 800649c:	20000f0c 	.word	0x20000f0c
 80064a0:	40026428 	.word	0x40026428
 80064a4:	20000ffc 	.word	0x20000ffc
 80064a8:	400264a0 	.word	0x400264a0
 80064ac:	40000800 	.word	0x40000800
 80064b0:	20000eac 	.word	0x20000eac
 80064b4:	40026058 	.word	0x40026058
 80064b8:	40010400 	.word	0x40010400

080064bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	609a      	str	r2, [r3, #8]
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a24      	ldr	r2, [pc, #144]	; (800656c <HAL_TIM_MspPostInit+0xb0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d11f      	bne.n	800651e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80064de:	2300      	movs	r3, #0
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	4b23      	ldr	r3, [pc, #140]	; (8006570 <HAL_TIM_MspPostInit+0xb4>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	4a22      	ldr	r2, [pc, #136]	; (8006570 <HAL_TIM_MspPostInit+0xb4>)
 80064e8:	f043 0310 	orr.w	r3, r3, #16
 80064ec:	6313      	str	r3, [r2, #48]	; 0x30
 80064ee:	4b20      	ldr	r3, [pc, #128]	; (8006570 <HAL_TIM_MspPostInit+0xb4>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	f003 0310 	and.w	r3, r3, #16
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_LED1_Pin|PWM_LED2_Pin|PWM_LED3_Pin;
 80064fa:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80064fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006500:	2302      	movs	r3, #2
 8006502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006508:	2300      	movs	r3, #0
 800650a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800650c:	2301      	movs	r3, #1
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006510:	f107 0314 	add.w	r3, r7, #20
 8006514:	4619      	mov	r1, r3
 8006516:	4817      	ldr	r0, [pc, #92]	; (8006574 <HAL_TIM_MspPostInit+0xb8>)
 8006518:	f001 fbd8 	bl	8007ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800651c:	e022      	b.n	8006564 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a15      	ldr	r2, [pc, #84]	; (8006578 <HAL_TIM_MspPostInit+0xbc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d11d      	bne.n	8006564 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <HAL_TIM_MspPostInit+0xb4>)
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	4a0f      	ldr	r2, [pc, #60]	; (8006570 <HAL_TIM_MspPostInit+0xb4>)
 8006532:	f043 0302 	orr.w	r3, r3, #2
 8006536:	6313      	str	r3, [r2, #48]	; 0x30
 8006538:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <HAL_TIM_MspPostInit+0xb4>)
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_LED4_Pin;
 8006544:	2380      	movs	r3, #128	; 0x80
 8006546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006548:	2302      	movs	r3, #2
 800654a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654c:	2300      	movs	r3, #0
 800654e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006550:	2300      	movs	r3, #0
 8006552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006554:	2302      	movs	r3, #2
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LED4_GPIO_Port, &GPIO_InitStruct);
 8006558:	f107 0314 	add.w	r3, r7, #20
 800655c:	4619      	mov	r1, r3
 800655e:	4807      	ldr	r0, [pc, #28]	; (800657c <HAL_TIM_MspPostInit+0xc0>)
 8006560:	f001 fbb4 	bl	8007ccc <HAL_GPIO_Init>
}
 8006564:	bf00      	nop
 8006566:	3728      	adds	r7, #40	; 0x28
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40010000 	.word	0x40010000
 8006570:	40023800 	.word	0x40023800
 8006574:	40021000 	.word	0x40021000
 8006578:	40000800 	.word	0x40000800
 800657c:	40020400 	.word	0x40020400

08006580 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006584:	4b11      	ldr	r3, [pc, #68]	; (80065cc <MX_USART2_UART_Init+0x4c>)
 8006586:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <MX_USART2_UART_Init+0x50>)
 8006588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800658a:	4b10      	ldr	r3, [pc, #64]	; (80065cc <MX_USART2_UART_Init+0x4c>)
 800658c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8006590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006592:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <MX_USART2_UART_Init+0x4c>)
 8006594:	2200      	movs	r2, #0
 8006596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006598:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <MX_USART2_UART_Init+0x4c>)
 800659a:	2200      	movs	r2, #0
 800659c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <MX_USART2_UART_Init+0x4c>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80065a4:	4b09      	ldr	r3, [pc, #36]	; (80065cc <MX_USART2_UART_Init+0x4c>)
 80065a6:	220c      	movs	r2, #12
 80065a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065aa:	4b08      	ldr	r3, [pc, #32]	; (80065cc <MX_USART2_UART_Init+0x4c>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80065b0:	4b06      	ldr	r3, [pc, #24]	; (80065cc <MX_USART2_UART_Init+0x4c>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80065b6:	4805      	ldr	r0, [pc, #20]	; (80065cc <MX_USART2_UART_Init+0x4c>)
 80065b8:	f004 f8bc 	bl	800a734 <HAL_UART_Init>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80065c2:	f7ff facb 	bl	8005b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80065c6:	bf00      	nop
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	200012c8 	.word	0x200012c8
 80065d0:	40004400 	.word	0x40004400

080065d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80065d8:	4b11      	ldr	r3, [pc, #68]	; (8006620 <MX_USART3_UART_Init+0x4c>)
 80065da:	4a12      	ldr	r2, [pc, #72]	; (8006624 <MX_USART3_UART_Init+0x50>)
 80065dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80065de:	4b10      	ldr	r3, [pc, #64]	; (8006620 <MX_USART3_UART_Init+0x4c>)
 80065e0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80065e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80065e6:	4b0e      	ldr	r3, [pc, #56]	; (8006620 <MX_USART3_UART_Init+0x4c>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80065ec:	4b0c      	ldr	r3, [pc, #48]	; (8006620 <MX_USART3_UART_Init+0x4c>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80065f2:	4b0b      	ldr	r3, [pc, #44]	; (8006620 <MX_USART3_UART_Init+0x4c>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80065f8:	4b09      	ldr	r3, [pc, #36]	; (8006620 <MX_USART3_UART_Init+0x4c>)
 80065fa:	220c      	movs	r2, #12
 80065fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065fe:	4b08      	ldr	r3, [pc, #32]	; (8006620 <MX_USART3_UART_Init+0x4c>)
 8006600:	2200      	movs	r2, #0
 8006602:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006604:	4b06      	ldr	r3, [pc, #24]	; (8006620 <MX_USART3_UART_Init+0x4c>)
 8006606:	2200      	movs	r2, #0
 8006608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800660a:	4805      	ldr	r0, [pc, #20]	; (8006620 <MX_USART3_UART_Init+0x4c>)
 800660c:	f004 f892 	bl	800a734 <HAL_UART_Init>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006616:	f7ff faa1 	bl	8005b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800661a:	bf00      	nop
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	200011c4 	.word	0x200011c4
 8006624:	40004800 	.word	0x40004800

08006628 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08c      	sub	sp, #48	; 0x30
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006630:	f107 031c 	add.w	r3, r7, #28
 8006634:	2200      	movs	r2, #0
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	605a      	str	r2, [r3, #4]
 800663a:	609a      	str	r2, [r3, #8]
 800663c:	60da      	str	r2, [r3, #12]
 800663e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a4b      	ldr	r2, [pc, #300]	; (8006774 <HAL_UART_MspInit+0x14c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	f040 80a2 	bne.w	8006790 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800664c:	2300      	movs	r3, #0
 800664e:	61bb      	str	r3, [r7, #24]
 8006650:	4b49      	ldr	r3, [pc, #292]	; (8006778 <HAL_UART_MspInit+0x150>)
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	4a48      	ldr	r2, [pc, #288]	; (8006778 <HAL_UART_MspInit+0x150>)
 8006656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800665a:	6413      	str	r3, [r2, #64]	; 0x40
 800665c:	4b46      	ldr	r3, [pc, #280]	; (8006778 <HAL_UART_MspInit+0x150>)
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006664:	61bb      	str	r3, [r7, #24]
 8006666:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	4b42      	ldr	r3, [pc, #264]	; (8006778 <HAL_UART_MspInit+0x150>)
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	4a41      	ldr	r2, [pc, #260]	; (8006778 <HAL_UART_MspInit+0x150>)
 8006672:	f043 0308 	orr.w	r3, r3, #8
 8006676:	6313      	str	r3, [r2, #48]	; 0x30
 8006678:	4b3f      	ldr	r3, [pc, #252]	; (8006778 <HAL_UART_MspInit+0x150>)
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOW_TX_Pin|LOW_RX_Pin;
 8006684:	2360      	movs	r3, #96	; 0x60
 8006686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006688:	2302      	movs	r3, #2
 800668a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800668c:	2300      	movs	r3, #0
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006690:	2303      	movs	r3, #3
 8006692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006694:	2307      	movs	r3, #7
 8006696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006698:	f107 031c 	add.w	r3, r7, #28
 800669c:	4619      	mov	r1, r3
 800669e:	4837      	ldr	r0, [pc, #220]	; (800677c <HAL_UART_MspInit+0x154>)
 80066a0:	f001 fb14 	bl	8007ccc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80066a4:	4b36      	ldr	r3, [pc, #216]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066a6:	4a37      	ldr	r2, [pc, #220]	; (8006784 <HAL_UART_MspInit+0x15c>)
 80066a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80066aa:	4b35      	ldr	r3, [pc, #212]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80066b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066b2:	4b33      	ldr	r3, [pc, #204]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066b8:	4b31      	ldr	r3, [pc, #196]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066be:	4b30      	ldr	r3, [pc, #192]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066c6:	4b2e      	ldr	r3, [pc, #184]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066cc:	4b2c      	ldr	r3, [pc, #176]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80066d2:	4b2b      	ldr	r3, [pc, #172]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80066d8:	4b29      	ldr	r3, [pc, #164]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066de:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066e0:	4b27      	ldr	r3, [pc, #156]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80066e6:	4826      	ldr	r0, [pc, #152]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066e8:	f000 feee 	bl	80074c8 <HAL_DMA_Init>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80066f2:	f7ff fa33 	bl	8005b5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a21      	ldr	r2, [pc, #132]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066fa:	639a      	str	r2, [r3, #56]	; 0x38
 80066fc:	4a20      	ldr	r2, [pc, #128]	; (8006780 <HAL_UART_MspInit+0x158>)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006702:	4b21      	ldr	r3, [pc, #132]	; (8006788 <HAL_UART_MspInit+0x160>)
 8006704:	4a21      	ldr	r2, [pc, #132]	; (800678c <HAL_UART_MspInit+0x164>)
 8006706:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006708:	4b1f      	ldr	r3, [pc, #124]	; (8006788 <HAL_UART_MspInit+0x160>)
 800670a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800670e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006710:	4b1d      	ldr	r3, [pc, #116]	; (8006788 <HAL_UART_MspInit+0x160>)
 8006712:	2240      	movs	r2, #64	; 0x40
 8006714:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006716:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <HAL_UART_MspInit+0x160>)
 8006718:	2200      	movs	r2, #0
 800671a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800671c:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <HAL_UART_MspInit+0x160>)
 800671e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006722:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006724:	4b18      	ldr	r3, [pc, #96]	; (8006788 <HAL_UART_MspInit+0x160>)
 8006726:	2200      	movs	r2, #0
 8006728:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800672a:	4b17      	ldr	r3, [pc, #92]	; (8006788 <HAL_UART_MspInit+0x160>)
 800672c:	2200      	movs	r2, #0
 800672e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006730:	4b15      	ldr	r3, [pc, #84]	; (8006788 <HAL_UART_MspInit+0x160>)
 8006732:	2200      	movs	r2, #0
 8006734:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <HAL_UART_MspInit+0x160>)
 8006738:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800673c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800673e:	4b12      	ldr	r3, [pc, #72]	; (8006788 <HAL_UART_MspInit+0x160>)
 8006740:	2200      	movs	r2, #0
 8006742:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006744:	4810      	ldr	r0, [pc, #64]	; (8006788 <HAL_UART_MspInit+0x160>)
 8006746:	f000 febf 	bl	80074c8 <HAL_DMA_Init>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8006750:	f7ff fa04 	bl	8005b5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a0c      	ldr	r2, [pc, #48]	; (8006788 <HAL_UART_MspInit+0x160>)
 8006758:	635a      	str	r2, [r3, #52]	; 0x34
 800675a:	4a0b      	ldr	r2, [pc, #44]	; (8006788 <HAL_UART_MspInit+0x160>)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006760:	2200      	movs	r2, #0
 8006762:	2100      	movs	r1, #0
 8006764:	2026      	movs	r0, #38	; 0x26
 8006766:	f000 fe78 	bl	800745a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800676a:	2026      	movs	r0, #38	; 0x26
 800676c:	f000 fe91 	bl	8007492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006770:	e0c4      	b.n	80068fc <HAL_UART_MspInit+0x2d4>
 8006772:	bf00      	nop
 8006774:	40004400 	.word	0x40004400
 8006778:	40023800 	.word	0x40023800
 800677c:	40020c00 	.word	0x40020c00
 8006780:	20001104 	.word	0x20001104
 8006784:	40026088 	.word	0x40026088
 8006788:	20001268 	.word	0x20001268
 800678c:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a5b      	ldr	r2, [pc, #364]	; (8006904 <HAL_UART_MspInit+0x2dc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	f040 80b0 	bne.w	80068fc <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	4b59      	ldr	r3, [pc, #356]	; (8006908 <HAL_UART_MspInit+0x2e0>)
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	4a58      	ldr	r2, [pc, #352]	; (8006908 <HAL_UART_MspInit+0x2e0>)
 80067a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067aa:	6413      	str	r3, [r2, #64]	; 0x40
 80067ac:	4b56      	ldr	r3, [pc, #344]	; (8006908 <HAL_UART_MspInit+0x2e0>)
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	4b52      	ldr	r3, [pc, #328]	; (8006908 <HAL_UART_MspInit+0x2e0>)
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	4a51      	ldr	r2, [pc, #324]	; (8006908 <HAL_UART_MspInit+0x2e0>)
 80067c2:	f043 0302 	orr.w	r3, r3, #2
 80067c6:	6313      	str	r3, [r2, #48]	; 0x30
 80067c8:	4b4f      	ldr	r3, [pc, #316]	; (8006908 <HAL_UART_MspInit+0x2e0>)
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80067d4:	2300      	movs	r3, #0
 80067d6:	60bb      	str	r3, [r7, #8]
 80067d8:	4b4b      	ldr	r3, [pc, #300]	; (8006908 <HAL_UART_MspInit+0x2e0>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	4a4a      	ldr	r2, [pc, #296]	; (8006908 <HAL_UART_MspInit+0x2e0>)
 80067de:	f043 0308 	orr.w	r3, r3, #8
 80067e2:	6313      	str	r3, [r2, #48]	; 0x30
 80067e4:	4b48      	ldr	r3, [pc, #288]	; (8006908 <HAL_UART_MspInit+0x2e0>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	f003 0308 	and.w	r3, r3, #8
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HIGH_RX_Pin;
 80067f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067f6:	2302      	movs	r3, #2
 80067f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067fe:	2303      	movs	r3, #3
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006802:	2307      	movs	r3, #7
 8006804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_RX_GPIO_Port, &GPIO_InitStruct);
 8006806:	f107 031c 	add.w	r3, r7, #28
 800680a:	4619      	mov	r1, r3
 800680c:	483f      	ldr	r0, [pc, #252]	; (800690c <HAL_UART_MspInit+0x2e4>)
 800680e:	f001 fa5d 	bl	8007ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HIGH_TX_Pin;
 8006812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006818:	2302      	movs	r3, #2
 800681a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681c:	2300      	movs	r3, #0
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006820:	2303      	movs	r3, #3
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006824:	2307      	movs	r3, #7
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_TX_GPIO_Port, &GPIO_InitStruct);
 8006828:	f107 031c 	add.w	r3, r7, #28
 800682c:	4619      	mov	r1, r3
 800682e:	4838      	ldr	r0, [pc, #224]	; (8006910 <HAL_UART_MspInit+0x2e8>)
 8006830:	f001 fa4c 	bl	8007ccc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006834:	4b37      	ldr	r3, [pc, #220]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 8006836:	4a38      	ldr	r2, [pc, #224]	; (8006918 <HAL_UART_MspInit+0x2f0>)
 8006838:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800683a:	4b36      	ldr	r3, [pc, #216]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 800683c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006840:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006842:	4b34      	ldr	r3, [pc, #208]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 8006844:	2200      	movs	r2, #0
 8006846:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006848:	4b32      	ldr	r3, [pc, #200]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 800684a:	2200      	movs	r2, #0
 800684c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800684e:	4b31      	ldr	r3, [pc, #196]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 8006850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006854:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006856:	4b2f      	ldr	r3, [pc, #188]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 8006858:	2200      	movs	r2, #0
 800685a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800685c:	4b2d      	ldr	r3, [pc, #180]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 800685e:	2200      	movs	r2, #0
 8006860:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006862:	4b2c      	ldr	r3, [pc, #176]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 8006864:	2200      	movs	r2, #0
 8006866:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006868:	4b2a      	ldr	r3, [pc, #168]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 800686a:	2200      	movs	r2, #0
 800686c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800686e:	4b29      	ldr	r3, [pc, #164]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 8006870:	2200      	movs	r2, #0
 8006872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006874:	4827      	ldr	r0, [pc, #156]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 8006876:	f000 fe27 	bl	80074c8 <HAL_DMA_Init>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8006880:	f7ff f96c 	bl	8005b5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a23      	ldr	r2, [pc, #140]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
 800688a:	4a22      	ldr	r2, [pc, #136]	; (8006914 <HAL_UART_MspInit+0x2ec>)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8006890:	4b22      	ldr	r3, [pc, #136]	; (800691c <HAL_UART_MspInit+0x2f4>)
 8006892:	4a23      	ldr	r2, [pc, #140]	; (8006920 <HAL_UART_MspInit+0x2f8>)
 8006894:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8006896:	4b21      	ldr	r3, [pc, #132]	; (800691c <HAL_UART_MspInit+0x2f4>)
 8006898:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800689c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800689e:	4b1f      	ldr	r3, [pc, #124]	; (800691c <HAL_UART_MspInit+0x2f4>)
 80068a0:	2240      	movs	r2, #64	; 0x40
 80068a2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068a4:	4b1d      	ldr	r3, [pc, #116]	; (800691c <HAL_UART_MspInit+0x2f4>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80068aa:	4b1c      	ldr	r3, [pc, #112]	; (800691c <HAL_UART_MspInit+0x2f4>)
 80068ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068b0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068b2:	4b1a      	ldr	r3, [pc, #104]	; (800691c <HAL_UART_MspInit+0x2f4>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068b8:	4b18      	ldr	r3, [pc, #96]	; (800691c <HAL_UART_MspInit+0x2f4>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80068be:	4b17      	ldr	r3, [pc, #92]	; (800691c <HAL_UART_MspInit+0x2f4>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80068c4:	4b15      	ldr	r3, [pc, #84]	; (800691c <HAL_UART_MspInit+0x2f4>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068ca:	4b14      	ldr	r3, [pc, #80]	; (800691c <HAL_UART_MspInit+0x2f4>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80068d0:	4812      	ldr	r0, [pc, #72]	; (800691c <HAL_UART_MspInit+0x2f4>)
 80068d2:	f000 fdf9 	bl	80074c8 <HAL_DMA_Init>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 80068dc:	f7ff f93e 	bl	8005b5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a0e      	ldr	r2, [pc, #56]	; (800691c <HAL_UART_MspInit+0x2f4>)
 80068e4:	635a      	str	r2, [r3, #52]	; 0x34
 80068e6:	4a0d      	ldr	r2, [pc, #52]	; (800691c <HAL_UART_MspInit+0x2f4>)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80068ec:	2200      	movs	r2, #0
 80068ee:	2100      	movs	r1, #0
 80068f0:	2027      	movs	r0, #39	; 0x27
 80068f2:	f000 fdb2 	bl	800745a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80068f6:	2027      	movs	r0, #39	; 0x27
 80068f8:	f000 fdcb 	bl	8007492 <HAL_NVIC_EnableIRQ>
}
 80068fc:	bf00      	nop
 80068fe:	3730      	adds	r7, #48	; 0x30
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	40004800 	.word	0x40004800
 8006908:	40023800 	.word	0x40023800
 800690c:	40020400 	.word	0x40020400
 8006910:	40020c00 	.word	0x40020c00
 8006914:	20001164 	.word	0x20001164
 8006918:	40026028 	.word	0x40026028
 800691c:	20001208 	.word	0x20001208
 8006920:	40026070 	.word	0x40026070

08006924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800695c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006928:	480d      	ldr	r0, [pc, #52]	; (8006960 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800692a:	490e      	ldr	r1, [pc, #56]	; (8006964 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800692c:	4a0e      	ldr	r2, [pc, #56]	; (8006968 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800692e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006930:	e002      	b.n	8006938 <LoopCopyDataInit>

08006932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006936:	3304      	adds	r3, #4

08006938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800693a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800693c:	d3f9      	bcc.n	8006932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800693e:	4a0b      	ldr	r2, [pc, #44]	; (800696c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006940:	4c0b      	ldr	r4, [pc, #44]	; (8006970 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006944:	e001      	b.n	800694a <LoopFillZerobss>

08006946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006948:	3204      	adds	r2, #4

0800694a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800694a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800694c:	d3fb      	bcc.n	8006946 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800694e:	f7ff fb05 	bl	8005f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006952:	f006 f8bb 	bl	800cacc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006956:	f7fe fed3 	bl	8005700 <main>
  bx  lr    
 800695a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800695c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006964:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8006968:	0800e0e8 	.word	0x0800e0e8
  ldr r2, =_sbss
 800696c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8006970:	20001320 	.word	0x20001320

08006974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006974:	e7fe      	b.n	8006974 <ADC_IRQHandler>
	...

08006978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800697c:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <HAL_Init+0x40>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0d      	ldr	r2, [pc, #52]	; (80069b8 <HAL_Init+0x40>)
 8006982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006988:	4b0b      	ldr	r3, [pc, #44]	; (80069b8 <HAL_Init+0x40>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a0a      	ldr	r2, [pc, #40]	; (80069b8 <HAL_Init+0x40>)
 800698e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006994:	4b08      	ldr	r3, [pc, #32]	; (80069b8 <HAL_Init+0x40>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a07      	ldr	r2, [pc, #28]	; (80069b8 <HAL_Init+0x40>)
 800699a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800699e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069a0:	2003      	movs	r0, #3
 80069a2:	f000 fd4f 	bl	8007444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80069a6:	200f      	movs	r0, #15
 80069a8:	f000 f808 	bl	80069bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80069ac:	f7ff f95a 	bl	8005c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40023c00 	.word	0x40023c00

080069bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069c4:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <HAL_InitTick+0x54>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <HAL_InitTick+0x58>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	4619      	mov	r1, r3
 80069ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80069d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fd67 	bl	80074ae <HAL_SYSTICK_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e00e      	b.n	8006a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b0f      	cmp	r3, #15
 80069ee:	d80a      	bhi.n	8006a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069f0:	2200      	movs	r2, #0
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	f04f 30ff 	mov.w	r0, #4294967295
 80069f8:	f000 fd2f 	bl	800745a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80069fc:	4a06      	ldr	r2, [pc, #24]	; (8006a18 <HAL_InitTick+0x5c>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e000      	b.n	8006a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000020 	.word	0x20000020
 8006a14:	20000028 	.word	0x20000028
 8006a18:	20000024 	.word	0x20000024

08006a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <HAL_IncTick+0x20>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	461a      	mov	r2, r3
 8006a26:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <HAL_IncTick+0x24>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	4a04      	ldr	r2, [pc, #16]	; (8006a40 <HAL_IncTick+0x24>)
 8006a2e:	6013      	str	r3, [r2, #0]
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20000028 	.word	0x20000028
 8006a40:	2000130c 	.word	0x2000130c

08006a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
  return uwTick;
 8006a48:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <HAL_GetTick+0x14>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	2000130c 	.word	0x2000130c

08006a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a64:	f7ff ffee 	bl	8006a44 <HAL_GetTick>
 8006a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a74:	d005      	beq.n	8006a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a76:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <HAL_Delay+0x44>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a82:	bf00      	nop
 8006a84:	f7ff ffde 	bl	8006a44 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d8f7      	bhi.n	8006a84 <HAL_Delay+0x28>
  {
  }
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000028 	.word	0x20000028

08006aa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e033      	b.n	8006b22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fc fac6 	bl	8003054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f003 0310 	and.w	r3, r3, #16
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d118      	bne.n	8006b14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006aea:	f023 0302 	bic.w	r3, r3, #2
 8006aee:	f043 0202 	orr.w	r2, r3, #2
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fad8 	bl	80070ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	f043 0201 	orr.w	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40
 8006b12:	e001      	b.n	8006b18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_ADC_Start+0x1a>
 8006b42:	2302      	movs	r3, #2
 8006b44:	e0b2      	b.n	8006cac <HAL_ADC_Start+0x180>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d018      	beq.n	8006b8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006b6c:	4b52      	ldr	r3, [pc, #328]	; (8006cb8 <HAL_ADC_Start+0x18c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a52      	ldr	r2, [pc, #328]	; (8006cbc <HAL_ADC_Start+0x190>)
 8006b72:	fba2 2303 	umull	r2, r3, r2, r3
 8006b76:	0c9a      	lsrs	r2, r3, #18
 8006b78:	4613      	mov	r3, r2
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	4413      	add	r3, r2
 8006b7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006b80:	e002      	b.n	8006b88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f9      	bne.n	8006b82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d17a      	bne.n	8006c92 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ba4:	f023 0301 	bic.w	r3, r3, #1
 8006ba8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006bc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bda:	d106      	bne.n	8006bea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be0:	f023 0206 	bic.w	r2, r3, #6
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	645a      	str	r2, [r3, #68]	; 0x44
 8006be8:	e002      	b.n	8006bf0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006bf8:	4b31      	ldr	r3, [pc, #196]	; (8006cc0 <HAL_ADC_Start+0x194>)
 8006bfa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006c04:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f003 031f 	and.w	r3, r3, #31
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d12a      	bne.n	8006c68 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a2b      	ldr	r2, [pc, #172]	; (8006cc4 <HAL_ADC_Start+0x198>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d015      	beq.n	8006c48 <HAL_ADC_Start+0x11c>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a29      	ldr	r2, [pc, #164]	; (8006cc8 <HAL_ADC_Start+0x19c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d105      	bne.n	8006c32 <HAL_ADC_Start+0x106>
 8006c26:	4b26      	ldr	r3, [pc, #152]	; (8006cc0 <HAL_ADC_Start+0x194>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f003 031f 	and.w	r3, r3, #31
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a25      	ldr	r2, [pc, #148]	; (8006ccc <HAL_ADC_Start+0x1a0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d136      	bne.n	8006caa <HAL_ADC_Start+0x17e>
 8006c3c:	4b20      	ldr	r3, [pc, #128]	; (8006cc0 <HAL_ADC_Start+0x194>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f003 0310 	and.w	r3, r3, #16
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d130      	bne.n	8006caa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d129      	bne.n	8006caa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006c64:	609a      	str	r2, [r3, #8]
 8006c66:	e020      	b.n	8006caa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a15      	ldr	r2, [pc, #84]	; (8006cc4 <HAL_ADC_Start+0x198>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d11b      	bne.n	8006caa <HAL_ADC_Start+0x17e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d114      	bne.n	8006caa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006c8e:	609a      	str	r2, [r3, #8]
 8006c90:	e00b      	b.n	8006caa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f043 0210 	orr.w	r2, r3, #16
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	f043 0201 	orr.w	r2, r3, #1
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	20000020 	.word	0x20000020
 8006cbc:	431bde83 	.word	0x431bde83
 8006cc0:	40012300 	.word	0x40012300
 8006cc4:	40012000 	.word	0x40012000
 8006cc8:	40012100 	.word	0x40012100
 8006ccc:	40012200 	.word	0x40012200

08006cd0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_ADC_Stop+0x16>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e021      	b.n	8006d2a <HAL_ADC_Stop+0x5a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0201 	bic.w	r2, r2, #1
 8006cfc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	f043 0201 	orr.w	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d52:	d113      	bne.n	8006d7c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d62:	d10b      	bne.n	8006d7c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	f043 0220 	orr.w	r2, r3, #32
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e063      	b.n	8006e44 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006d7c:	f7ff fe62 	bl	8006a44 <HAL_GetTick>
 8006d80:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006d82:	e021      	b.n	8006dc8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8a:	d01d      	beq.n	8006dc8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <HAL_ADC_PollForConversion+0x6c>
 8006d92:	f7ff fe57 	bl	8006a44 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d212      	bcs.n	8006dc8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d00b      	beq.n	8006dc8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	f043 0204 	orr.w	r2, r3, #4
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e03d      	b.n	8006e44 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d1d6      	bne.n	8006d84 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f06f 0212 	mvn.w	r2, #18
 8006dde:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d123      	bne.n	8006e42 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d11f      	bne.n	8006e42 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d006      	beq.n	8006e1e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d111      	bne.n	8006e42 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d105      	bne.n	8006e42 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	f043 0201 	orr.w	r2, r3, #1
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
	...

08006e68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_ADC_ConfigChannel+0x1c>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e105      	b.n	8007090 <HAL_ADC_ConfigChannel+0x228>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b09      	cmp	r3, #9
 8006e92:	d925      	bls.n	8006ee0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68d9      	ldr	r1, [r3, #12]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	4413      	add	r3, r2
 8006ea8:	3b1e      	subs	r3, #30
 8006eaa:	2207      	movs	r2, #7
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	43da      	mvns	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	400a      	ands	r2, r1
 8006eb8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68d9      	ldr	r1, [r3, #12]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	4618      	mov	r0, r3
 8006ecc:	4603      	mov	r3, r0
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	4403      	add	r3, r0
 8006ed2:	3b1e      	subs	r3, #30
 8006ed4:	409a      	lsls	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	60da      	str	r2, [r3, #12]
 8006ede:	e022      	b.n	8006f26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6919      	ldr	r1, [r3, #16]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	4613      	mov	r3, r2
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	4413      	add	r3, r2
 8006ef4:	2207      	movs	r2, #7
 8006ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8006efa:	43da      	mvns	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	400a      	ands	r2, r1
 8006f02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6919      	ldr	r1, [r3, #16]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4618      	mov	r0, r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	4403      	add	r3, r0
 8006f1c:	409a      	lsls	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b06      	cmp	r3, #6
 8006f2c:	d824      	bhi.n	8006f78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	3b05      	subs	r3, #5
 8006f40:	221f      	movs	r2, #31
 8006f42:	fa02 f303 	lsl.w	r3, r2, r3
 8006f46:	43da      	mvns	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	400a      	ands	r2, r1
 8006f4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	3b05      	subs	r3, #5
 8006f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	635a      	str	r2, [r3, #52]	; 0x34
 8006f76:	e04c      	b.n	8007012 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b0c      	cmp	r3, #12
 8006f7e:	d824      	bhi.n	8006fca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	3b23      	subs	r3, #35	; 0x23
 8006f92:	221f      	movs	r2, #31
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	43da      	mvns	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	400a      	ands	r2, r1
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	4618      	mov	r0, r3
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	3b23      	subs	r3, #35	; 0x23
 8006fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8006fc8:	e023      	b.n	8007012 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	3b41      	subs	r3, #65	; 0x41
 8006fdc:	221f      	movs	r2, #31
 8006fde:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe2:	43da      	mvns	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	400a      	ands	r2, r1
 8006fea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	3b41      	subs	r3, #65	; 0x41
 8007006:	fa00 f203 	lsl.w	r2, r0, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007012:	4b22      	ldr	r3, [pc, #136]	; (800709c <HAL_ADC_ConfigChannel+0x234>)
 8007014:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a21      	ldr	r2, [pc, #132]	; (80070a0 <HAL_ADC_ConfigChannel+0x238>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d109      	bne.n	8007034 <HAL_ADC_ConfigChannel+0x1cc>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b12      	cmp	r3, #18
 8007026:	d105      	bne.n	8007034 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a19      	ldr	r2, [pc, #100]	; (80070a0 <HAL_ADC_ConfigChannel+0x238>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d123      	bne.n	8007086 <HAL_ADC_ConfigChannel+0x21e>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b10      	cmp	r3, #16
 8007044:	d003      	beq.n	800704e <HAL_ADC_ConfigChannel+0x1e6>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b11      	cmp	r3, #17
 800704c:	d11b      	bne.n	8007086 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b10      	cmp	r3, #16
 8007060:	d111      	bne.n	8007086 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007062:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <HAL_ADC_ConfigChannel+0x23c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a10      	ldr	r2, [pc, #64]	; (80070a8 <HAL_ADC_ConfigChannel+0x240>)
 8007068:	fba2 2303 	umull	r2, r3, r2, r3
 800706c:	0c9a      	lsrs	r2, r3, #18
 800706e:	4613      	mov	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007078:	e002      	b.n	8007080 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	3b01      	subs	r3, #1
 800707e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1f9      	bne.n	800707a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	40012300 	.word	0x40012300
 80070a0:	40012000 	.word	0x40012000
 80070a4:	20000020 	.word	0x20000020
 80070a8:	431bde83 	.word	0x431bde83

080070ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80070b4:	4b79      	ldr	r3, [pc, #484]	; (800729c <ADC_Init+0x1f0>)
 80070b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	431a      	orrs	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6859      	ldr	r1, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	021a      	lsls	r2, r3, #8
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6859      	ldr	r1, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689a      	ldr	r2, [r3, #8]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6899      	ldr	r1, [r3, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713e:	4a58      	ldr	r2, [pc, #352]	; (80072a0 <ADC_Init+0x1f4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d022      	beq.n	800718a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007152:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6899      	ldr	r1, [r3, #8]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007174:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	6899      	ldr	r1, [r3, #8]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	609a      	str	r2, [r3, #8]
 8007188:	e00f      	b.n	80071aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007198:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80071a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0202 	bic.w	r2, r2, #2
 80071b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6899      	ldr	r1, [r3, #8]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	7e1b      	ldrb	r3, [r3, #24]
 80071c4:	005a      	lsls	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01b      	beq.n	8007210 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80071f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	3b01      	subs	r3, #1
 8007204:	035a      	lsls	r2, r3, #13
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
 800720e:	e007      	b.n	8007220 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800721e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800722e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	3b01      	subs	r3, #1
 800723c:	051a      	lsls	r2, r3, #20
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6899      	ldr	r1, [r3, #8]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007262:	025a      	lsls	r2, r3, #9
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800727a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6899      	ldr	r1, [r3, #8]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	029a      	lsls	r2, r3, #10
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	609a      	str	r2, [r3, #8]
}
 8007290:	bf00      	nop
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	40012300 	.word	0x40012300
 80072a0:	0f000001 	.word	0x0f000001

080072a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072b4:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <__NVIC_SetPriorityGrouping+0x44>)
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072c0:	4013      	ands	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80072d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072d6:	4a04      	ldr	r2, [pc, #16]	; (80072e8 <__NVIC_SetPriorityGrouping+0x44>)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	60d3      	str	r3, [r2, #12]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	e000ed00 	.word	0xe000ed00

080072ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <__NVIC_GetPriorityGrouping+0x18>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	0a1b      	lsrs	r3, r3, #8
 80072f6:	f003 0307 	and.w	r3, r3, #7
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	e000ed00 	.word	0xe000ed00

08007308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	4603      	mov	r3, r0
 8007310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007316:	2b00      	cmp	r3, #0
 8007318:	db0b      	blt.n	8007332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	f003 021f 	and.w	r2, r3, #31
 8007320:	4907      	ldr	r1, [pc, #28]	; (8007340 <__NVIC_EnableIRQ+0x38>)
 8007322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	2001      	movs	r0, #1
 800732a:	fa00 f202 	lsl.w	r2, r0, r2
 800732e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	e000e100 	.word	0xe000e100

08007344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	6039      	str	r1, [r7, #0]
 800734e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007354:	2b00      	cmp	r3, #0
 8007356:	db0a      	blt.n	800736e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	b2da      	uxtb	r2, r3
 800735c:	490c      	ldr	r1, [pc, #48]	; (8007390 <__NVIC_SetPriority+0x4c>)
 800735e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007362:	0112      	lsls	r2, r2, #4
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	440b      	add	r3, r1
 8007368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800736c:	e00a      	b.n	8007384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	b2da      	uxtb	r2, r3
 8007372:	4908      	ldr	r1, [pc, #32]	; (8007394 <__NVIC_SetPriority+0x50>)
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	3b04      	subs	r3, #4
 800737c:	0112      	lsls	r2, r2, #4
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	440b      	add	r3, r1
 8007382:	761a      	strb	r2, [r3, #24]
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	e000e100 	.word	0xe000e100
 8007394:	e000ed00 	.word	0xe000ed00

08007398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007398:	b480      	push	{r7}
 800739a:	b089      	sub	sp, #36	; 0x24
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f1c3 0307 	rsb	r3, r3, #7
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	bf28      	it	cs
 80073b6:	2304      	movcs	r3, #4
 80073b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	3304      	adds	r3, #4
 80073be:	2b06      	cmp	r3, #6
 80073c0:	d902      	bls.n	80073c8 <NVIC_EncodePriority+0x30>
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	3b03      	subs	r3, #3
 80073c6:	e000      	b.n	80073ca <NVIC_EncodePriority+0x32>
 80073c8:	2300      	movs	r3, #0
 80073ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073cc:	f04f 32ff 	mov.w	r2, #4294967295
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	43da      	mvns	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	401a      	ands	r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073e0:	f04f 31ff 	mov.w	r1, #4294967295
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ea:	43d9      	mvns	r1, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f0:	4313      	orrs	r3, r2
         );
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3724      	adds	r7, #36	; 0x24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
	...

08007400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3b01      	subs	r3, #1
 800740c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007410:	d301      	bcc.n	8007416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007412:	2301      	movs	r3, #1
 8007414:	e00f      	b.n	8007436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007416:	4a0a      	ldr	r2, [pc, #40]	; (8007440 <SysTick_Config+0x40>)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	3b01      	subs	r3, #1
 800741c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800741e:	210f      	movs	r1, #15
 8007420:	f04f 30ff 	mov.w	r0, #4294967295
 8007424:	f7ff ff8e 	bl	8007344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007428:	4b05      	ldr	r3, [pc, #20]	; (8007440 <SysTick_Config+0x40>)
 800742a:	2200      	movs	r2, #0
 800742c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800742e:	4b04      	ldr	r3, [pc, #16]	; (8007440 <SysTick_Config+0x40>)
 8007430:	2207      	movs	r2, #7
 8007432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	e000e010 	.word	0xe000e010

08007444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff ff29 	bl	80072a4 <__NVIC_SetPriorityGrouping>
}
 8007452:	bf00      	nop
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800745a:	b580      	push	{r7, lr}
 800745c:	b086      	sub	sp, #24
 800745e:	af00      	add	r7, sp, #0
 8007460:	4603      	mov	r3, r0
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007468:	2300      	movs	r3, #0
 800746a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800746c:	f7ff ff3e 	bl	80072ec <__NVIC_GetPriorityGrouping>
 8007470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	6978      	ldr	r0, [r7, #20]
 8007478:	f7ff ff8e 	bl	8007398 <NVIC_EncodePriority>
 800747c:	4602      	mov	r2, r0
 800747e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff ff5d 	bl	8007344 <__NVIC_SetPriority>
}
 800748a:	bf00      	nop
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	4603      	mov	r3, r0
 800749a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800749c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff ff31 	bl	8007308 <__NVIC_EnableIRQ>
}
 80074a6:	bf00      	nop
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff ffa2 	bl	8007400 <SysTick_Config>
 80074bc:	4603      	mov	r3, r0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80074d4:	f7ff fab6 	bl	8006a44 <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e099      	b.n	8007618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0201 	bic.w	r2, r2, #1
 8007502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007504:	e00f      	b.n	8007526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007506:	f7ff fa9d 	bl	8006a44 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b05      	cmp	r3, #5
 8007512:	d908      	bls.n	8007526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2203      	movs	r2, #3
 800751e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e078      	b.n	8007618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e8      	bne.n	8007506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	4b38      	ldr	r3, [pc, #224]	; (8007620 <HAL_DMA_Init+0x158>)
 8007540:	4013      	ands	r3, r2
 8007542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800755e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800756a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	4313      	orrs	r3, r2
 8007576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	2b04      	cmp	r3, #4
 800757e:	d107      	bne.n	8007590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	4313      	orrs	r3, r2
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f023 0307 	bic.w	r3, r3, #7
 80075a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d117      	bne.n	80075ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00e      	beq.n	80075ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fb01 	bl	8007bd4 <DMA_CheckFifoParam>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2240      	movs	r2, #64	; 0x40
 80075dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80075e6:	2301      	movs	r3, #1
 80075e8:	e016      	b.n	8007618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fab8 	bl	8007b68 <DMA_CalcBaseAndBitshift>
 80075f8:	4603      	mov	r3, r0
 80075fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007600:	223f      	movs	r2, #63	; 0x3f
 8007602:	409a      	lsls	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	f010803f 	.word	0xf010803f

08007624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
 8007630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_DMA_Start_IT+0x26>
 8007646:	2302      	movs	r3, #2
 8007648:	e040      	b.n	80076cc <HAL_DMA_Start_IT+0xa8>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b01      	cmp	r3, #1
 800765c:	d12f      	bne.n	80076be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2202      	movs	r2, #2
 8007662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fa4a 	bl	8007b0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767c:	223f      	movs	r2, #63	; 0x3f
 800767e:	409a      	lsls	r2, r3
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0216 	orr.w	r2, r2, #22
 8007692:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0208 	orr.w	r2, r2, #8
 80076aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0201 	orr.w	r2, r2, #1
 80076ba:	601a      	str	r2, [r3, #0]
 80076bc:	e005      	b.n	80076ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80076c6:	2302      	movs	r3, #2
 80076c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80076e2:	f7ff f9af 	bl	8006a44 <HAL_GetTick>
 80076e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d008      	beq.n	8007706 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2280      	movs	r2, #128	; 0x80
 80076f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e052      	b.n	80077ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0216 	bic.w	r2, r2, #22
 8007714:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	695a      	ldr	r2, [r3, #20]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007724:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d103      	bne.n	8007736 <HAL_DMA_Abort+0x62>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007732:	2b00      	cmp	r3, #0
 8007734:	d007      	beq.n	8007746 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0208 	bic.w	r2, r2, #8
 8007744:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0201 	bic.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007756:	e013      	b.n	8007780 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007758:	f7ff f974 	bl	8006a44 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b05      	cmp	r3, #5
 8007764:	d90c      	bls.n	8007780 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2203      	movs	r2, #3
 8007770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e015      	b.n	80077ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e4      	bne.n	8007758 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007792:	223f      	movs	r2, #63	; 0x3f
 8007794:	409a      	lsls	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d004      	beq.n	80077d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2280      	movs	r2, #128	; 0x80
 80077cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e00c      	b.n	80077ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2205      	movs	r2, #5
 80077d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0201 	bic.w	r2, r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007804:	4b92      	ldr	r3, [pc, #584]	; (8007a50 <HAL_DMA_IRQHandler+0x258>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a92      	ldr	r2, [pc, #584]	; (8007a54 <HAL_DMA_IRQHandler+0x25c>)
 800780a:	fba2 2303 	umull	r2, r3, r2, r3
 800780e:	0a9b      	lsrs	r3, r3, #10
 8007810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007822:	2208      	movs	r2, #8
 8007824:	409a      	lsls	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4013      	ands	r3, r2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d01a      	beq.n	8007864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d013      	beq.n	8007864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0204 	bic.w	r2, r2, #4
 800784a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007850:	2208      	movs	r2, #8
 8007852:	409a      	lsls	r2, r3
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785c:	f043 0201 	orr.w	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007868:	2201      	movs	r2, #1
 800786a:	409a      	lsls	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4013      	ands	r3, r2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d012      	beq.n	800789a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007886:	2201      	movs	r2, #1
 8007888:	409a      	lsls	r2, r3
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007892:	f043 0202 	orr.w	r2, r3, #2
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789e:	2204      	movs	r2, #4
 80078a0:	409a      	lsls	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4013      	ands	r3, r2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d012      	beq.n	80078d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078bc:	2204      	movs	r2, #4
 80078be:	409a      	lsls	r2, r3
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c8:	f043 0204 	orr.w	r2, r3, #4
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d4:	2210      	movs	r2, #16
 80078d6:	409a      	lsls	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4013      	ands	r3, r2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d043      	beq.n	8007968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0308 	and.w	r3, r3, #8
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d03c      	beq.n	8007968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f2:	2210      	movs	r2, #16
 80078f4:	409a      	lsls	r2, r3
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d018      	beq.n	800793a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d108      	bne.n	8007928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	d024      	beq.n	8007968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	4798      	blx	r3
 8007926:	e01f      	b.n	8007968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01b      	beq.n	8007968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
 8007938:	e016      	b.n	8007968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d107      	bne.n	8007958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0208 	bic.w	r2, r2, #8
 8007956:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796c:	2220      	movs	r2, #32
 800796e:	409a      	lsls	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4013      	ands	r3, r2
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 808e 	beq.w	8007a96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 8086 	beq.w	8007a96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800798e:	2220      	movs	r2, #32
 8007990:	409a      	lsls	r2, r3
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b05      	cmp	r3, #5
 80079a0:	d136      	bne.n	8007a10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0216 	bic.w	r2, r2, #22
 80079b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d103      	bne.n	80079d2 <HAL_DMA_IRQHandler+0x1da>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d007      	beq.n	80079e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0208 	bic.w	r2, r2, #8
 80079e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e6:	223f      	movs	r2, #63	; 0x3f
 80079e8:	409a      	lsls	r2, r3
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d07d      	beq.n	8007b02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	4798      	blx	r3
        }
        return;
 8007a0e:	e078      	b.n	8007b02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d01c      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d108      	bne.n	8007a3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d030      	beq.n	8007a96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
 8007a3c:	e02b      	b.n	8007a96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d027      	beq.n	8007a96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
 8007a4e:	e022      	b.n	8007a96 <HAL_DMA_IRQHandler+0x29e>
 8007a50:	20000020 	.word	0x20000020
 8007a54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10f      	bne.n	8007a86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0210 	bic.w	r2, r2, #16
 8007a74:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d032      	beq.n	8007b04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d022      	beq.n	8007af0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2205      	movs	r2, #5
 8007aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0201 	bic.w	r2, r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	60bb      	str	r3, [r7, #8]
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d307      	bcc.n	8007ade <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1f2      	bne.n	8007ac2 <HAL_DMA_IRQHandler+0x2ca>
 8007adc:	e000      	b.n	8007ae0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007ade:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	4798      	blx	r3
 8007b00:	e000      	b.n	8007b04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007b02:	bf00      	nop
    }
  }
}
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop

08007b0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	2b40      	cmp	r3, #64	; 0x40
 8007b38:	d108      	bne.n	8007b4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007b4a:	e007      	b.n	8007b5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	60da      	str	r2, [r3, #12]
}
 8007b5c:	bf00      	nop
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	3b10      	subs	r3, #16
 8007b78:	4a14      	ldr	r2, [pc, #80]	; (8007bcc <DMA_CalcBaseAndBitshift+0x64>)
 8007b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7e:	091b      	lsrs	r3, r3, #4
 8007b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007b82:	4a13      	ldr	r2, [pc, #76]	; (8007bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4413      	add	r3, r2
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d909      	bls.n	8007baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007b9e:	f023 0303 	bic.w	r3, r3, #3
 8007ba2:	1d1a      	adds	r2, r3, #4
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8007ba8:	e007      	b.n	8007bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007bb2:	f023 0303 	bic.w	r3, r3, #3
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	aaaaaaab 	.word	0xaaaaaaab
 8007bd0:	0800db7c 	.word	0x0800db7c

08007bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d11f      	bne.n	8007c2e <DMA_CheckFifoParam+0x5a>
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d856      	bhi.n	8007ca2 <DMA_CheckFifoParam+0xce>
 8007bf4:	a201      	add	r2, pc, #4	; (adr r2, 8007bfc <DMA_CheckFifoParam+0x28>)
 8007bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfa:	bf00      	nop
 8007bfc:	08007c0d 	.word	0x08007c0d
 8007c00:	08007c1f 	.word	0x08007c1f
 8007c04:	08007c0d 	.word	0x08007c0d
 8007c08:	08007ca3 	.word	0x08007ca3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d046      	beq.n	8007ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c1c:	e043      	b.n	8007ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c26:	d140      	bne.n	8007caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c2c:	e03d      	b.n	8007caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c36:	d121      	bne.n	8007c7c <DMA_CheckFifoParam+0xa8>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	d837      	bhi.n	8007cae <DMA_CheckFifoParam+0xda>
 8007c3e:	a201      	add	r2, pc, #4	; (adr r2, 8007c44 <DMA_CheckFifoParam+0x70>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c55 	.word	0x08007c55
 8007c48:	08007c5b 	.word	0x08007c5b
 8007c4c:	08007c55 	.word	0x08007c55
 8007c50:	08007c6d 	.word	0x08007c6d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	73fb      	strb	r3, [r7, #15]
      break;
 8007c58:	e030      	b.n	8007cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d025      	beq.n	8007cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c6a:	e022      	b.n	8007cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c74:	d11f      	bne.n	8007cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007c7a:	e01c      	b.n	8007cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d903      	bls.n	8007c8a <DMA_CheckFifoParam+0xb6>
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d003      	beq.n	8007c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007c88:	e018      	b.n	8007cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c8e:	e015      	b.n	8007cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00e      	beq.n	8007cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca0:	e00b      	b.n	8007cba <DMA_CheckFifoParam+0xe6>
      break;
 8007ca2:	bf00      	nop
 8007ca4:	e00a      	b.n	8007cbc <DMA_CheckFifoParam+0xe8>
      break;
 8007ca6:	bf00      	nop
 8007ca8:	e008      	b.n	8007cbc <DMA_CheckFifoParam+0xe8>
      break;
 8007caa:	bf00      	nop
 8007cac:	e006      	b.n	8007cbc <DMA_CheckFifoParam+0xe8>
      break;
 8007cae:	bf00      	nop
 8007cb0:	e004      	b.n	8007cbc <DMA_CheckFifoParam+0xe8>
      break;
 8007cb2:	bf00      	nop
 8007cb4:	e002      	b.n	8007cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8007cb6:	bf00      	nop
 8007cb8:	e000      	b.n	8007cbc <DMA_CheckFifoParam+0xe8>
      break;
 8007cba:	bf00      	nop
    }
  } 
  
  return status; 
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop

08007ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b089      	sub	sp, #36	; 0x24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	61fb      	str	r3, [r7, #28]
 8007ce6:	e16b      	b.n	8007fc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ce8:	2201      	movs	r2, #1
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	f040 815a 	bne.w	8007fba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d005      	beq.n	8007d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d130      	bne.n	8007d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	2203      	movs	r2, #3
 8007d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	4013      	ands	r3, r2
 8007d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d54:	2201      	movs	r2, #1
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	4013      	ands	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	f003 0201 	and.w	r2, r3, #1
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d017      	beq.n	8007dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	2203      	movs	r2, #3
 8007d98:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	4013      	ands	r3, r2
 8007da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	005b      	lsls	r3, r3, #1
 8007dac:	fa02 f303 	lsl.w	r3, r2, r3
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f003 0303 	and.w	r3, r3, #3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d123      	bne.n	8007e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	08da      	lsrs	r2, r3, #3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3208      	adds	r2, #8
 8007dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	f003 0307 	and.w	r3, r3, #7
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	220f      	movs	r2, #15
 8007de0:	fa02 f303 	lsl.w	r3, r2, r3
 8007de4:	43db      	mvns	r3, r3
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	4013      	ands	r3, r2
 8007dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	691a      	ldr	r2, [r3, #16]
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	08da      	lsrs	r2, r3, #3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3208      	adds	r2, #8
 8007e0a:	69b9      	ldr	r1, [r7, #24]
 8007e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e20:	43db      	mvns	r3, r3
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	4013      	ands	r3, r2
 8007e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f003 0203 	and.w	r2, r3, #3
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	fa02 f303 	lsl.w	r3, r2, r3
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 80b4 	beq.w	8007fba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	4b60      	ldr	r3, [pc, #384]	; (8007fd8 <HAL_GPIO_Init+0x30c>)
 8007e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5a:	4a5f      	ldr	r2, [pc, #380]	; (8007fd8 <HAL_GPIO_Init+0x30c>)
 8007e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e60:	6453      	str	r3, [r2, #68]	; 0x44
 8007e62:	4b5d      	ldr	r3, [pc, #372]	; (8007fd8 <HAL_GPIO_Init+0x30c>)
 8007e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e6e:	4a5b      	ldr	r2, [pc, #364]	; (8007fdc <HAL_GPIO_Init+0x310>)
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	089b      	lsrs	r3, r3, #2
 8007e74:	3302      	adds	r3, #2
 8007e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	f003 0303 	and.w	r3, r3, #3
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	220f      	movs	r2, #15
 8007e86:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8a:	43db      	mvns	r3, r3
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a52      	ldr	r2, [pc, #328]	; (8007fe0 <HAL_GPIO_Init+0x314>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d02b      	beq.n	8007ef2 <HAL_GPIO_Init+0x226>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a51      	ldr	r2, [pc, #324]	; (8007fe4 <HAL_GPIO_Init+0x318>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d025      	beq.n	8007eee <HAL_GPIO_Init+0x222>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a50      	ldr	r2, [pc, #320]	; (8007fe8 <HAL_GPIO_Init+0x31c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01f      	beq.n	8007eea <HAL_GPIO_Init+0x21e>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a4f      	ldr	r2, [pc, #316]	; (8007fec <HAL_GPIO_Init+0x320>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d019      	beq.n	8007ee6 <HAL_GPIO_Init+0x21a>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a4e      	ldr	r2, [pc, #312]	; (8007ff0 <HAL_GPIO_Init+0x324>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d013      	beq.n	8007ee2 <HAL_GPIO_Init+0x216>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a4d      	ldr	r2, [pc, #308]	; (8007ff4 <HAL_GPIO_Init+0x328>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d00d      	beq.n	8007ede <HAL_GPIO_Init+0x212>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a4c      	ldr	r2, [pc, #304]	; (8007ff8 <HAL_GPIO_Init+0x32c>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d007      	beq.n	8007eda <HAL_GPIO_Init+0x20e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a4b      	ldr	r2, [pc, #300]	; (8007ffc <HAL_GPIO_Init+0x330>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d101      	bne.n	8007ed6 <HAL_GPIO_Init+0x20a>
 8007ed2:	2307      	movs	r3, #7
 8007ed4:	e00e      	b.n	8007ef4 <HAL_GPIO_Init+0x228>
 8007ed6:	2308      	movs	r3, #8
 8007ed8:	e00c      	b.n	8007ef4 <HAL_GPIO_Init+0x228>
 8007eda:	2306      	movs	r3, #6
 8007edc:	e00a      	b.n	8007ef4 <HAL_GPIO_Init+0x228>
 8007ede:	2305      	movs	r3, #5
 8007ee0:	e008      	b.n	8007ef4 <HAL_GPIO_Init+0x228>
 8007ee2:	2304      	movs	r3, #4
 8007ee4:	e006      	b.n	8007ef4 <HAL_GPIO_Init+0x228>
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e004      	b.n	8007ef4 <HAL_GPIO_Init+0x228>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e002      	b.n	8007ef4 <HAL_GPIO_Init+0x228>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e000      	b.n	8007ef4 <HAL_GPIO_Init+0x228>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	69fa      	ldr	r2, [r7, #28]
 8007ef6:	f002 0203 	and.w	r2, r2, #3
 8007efa:	0092      	lsls	r2, r2, #2
 8007efc:	4093      	lsls	r3, r2
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f04:	4935      	ldr	r1, [pc, #212]	; (8007fdc <HAL_GPIO_Init+0x310>)
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	089b      	lsrs	r3, r3, #2
 8007f0a:	3302      	adds	r3, #2
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f12:	4b3b      	ldr	r3, [pc, #236]	; (8008000 <HAL_GPIO_Init+0x334>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	43db      	mvns	r3, r3
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f36:	4a32      	ldr	r2, [pc, #200]	; (8008000 <HAL_GPIO_Init+0x334>)
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007f3c:	4b30      	ldr	r3, [pc, #192]	; (8008000 <HAL_GPIO_Init+0x334>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	43db      	mvns	r3, r3
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	4013      	ands	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f60:	4a27      	ldr	r2, [pc, #156]	; (8008000 <HAL_GPIO_Init+0x334>)
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f66:	4b26      	ldr	r3, [pc, #152]	; (8008000 <HAL_GPIO_Init+0x334>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	43db      	mvns	r3, r3
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	4013      	ands	r3, r2
 8007f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f8a:	4a1d      	ldr	r2, [pc, #116]	; (8008000 <HAL_GPIO_Init+0x334>)
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f90:	4b1b      	ldr	r3, [pc, #108]	; (8008000 <HAL_GPIO_Init+0x334>)
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007fb4:	4a12      	ldr	r2, [pc, #72]	; (8008000 <HAL_GPIO_Init+0x334>)
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	2b0f      	cmp	r3, #15
 8007fc4:	f67f ae90 	bls.w	8007ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	3724      	adds	r7, #36	; 0x24
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40023800 	.word	0x40023800
 8007fdc:	40013800 	.word	0x40013800
 8007fe0:	40020000 	.word	0x40020000
 8007fe4:	40020400 	.word	0x40020400
 8007fe8:	40020800 	.word	0x40020800
 8007fec:	40020c00 	.word	0x40020c00
 8007ff0:	40021000 	.word	0x40021000
 8007ff4:	40021400 	.word	0x40021400
 8007ff8:	40021800 	.word	0x40021800
 8007ffc:	40021c00 	.word	0x40021c00
 8008000:	40013c00 	.word	0x40013c00

08008004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	887b      	ldrh	r3, [r7, #2]
 8008016:	4013      	ands	r3, r2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800801c:	2301      	movs	r3, #1
 800801e:	73fb      	strb	r3, [r7, #15]
 8008020:	e001      	b.n	8008026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008026:	7bfb      	ldrb	r3, [r7, #15]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	807b      	strh	r3, [r7, #2]
 8008040:	4613      	mov	r3, r2
 8008042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008044:	787b      	ldrb	r3, [r7, #1]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800804a:	887a      	ldrh	r2, [r7, #2]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008050:	e003      	b.n	800805a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008052:	887b      	ldrh	r3, [r7, #2]
 8008054:	041a      	lsls	r2, r3, #16
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	619a      	str	r2, [r3, #24]
}
 800805a:	bf00      	nop
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008066:	b480      	push	{r7}
 8008068:	b085      	sub	sp, #20
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008078:	887a      	ldrh	r2, [r7, #2]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4013      	ands	r3, r2
 800807e:	041a      	lsls	r2, r3, #16
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	43d9      	mvns	r1, r3
 8008084:	887b      	ldrh	r3, [r7, #2]
 8008086:	400b      	ands	r3, r1
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	619a      	str	r2, [r3, #24]
}
 800808e:	bf00      	nop
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
	...

0800809c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e264      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d075      	beq.n	80081a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080ba:	4ba3      	ldr	r3, [pc, #652]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f003 030c 	and.w	r3, r3, #12
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	d00c      	beq.n	80080e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080c6:	4ba0      	ldr	r3, [pc, #640]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080ce:	2b08      	cmp	r3, #8
 80080d0:	d112      	bne.n	80080f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080d2:	4b9d      	ldr	r3, [pc, #628]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080de:	d10b      	bne.n	80080f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080e0:	4b99      	ldr	r3, [pc, #612]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d05b      	beq.n	80081a4 <HAL_RCC_OscConfig+0x108>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d157      	bne.n	80081a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e23f      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008100:	d106      	bne.n	8008110 <HAL_RCC_OscConfig+0x74>
 8008102:	4b91      	ldr	r3, [pc, #580]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a90      	ldr	r2, [pc, #576]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	e01d      	b.n	800814c <HAL_RCC_OscConfig+0xb0>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008118:	d10c      	bne.n	8008134 <HAL_RCC_OscConfig+0x98>
 800811a:	4b8b      	ldr	r3, [pc, #556]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a8a      	ldr	r2, [pc, #552]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	4b88      	ldr	r3, [pc, #544]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a87      	ldr	r2, [pc, #540]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 800812c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	e00b      	b.n	800814c <HAL_RCC_OscConfig+0xb0>
 8008134:	4b84      	ldr	r3, [pc, #528]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a83      	ldr	r2, [pc, #524]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 800813a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800813e:	6013      	str	r3, [r2, #0]
 8008140:	4b81      	ldr	r3, [pc, #516]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a80      	ldr	r2, [pc, #512]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800814a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d013      	beq.n	800817c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008154:	f7fe fc76 	bl	8006a44 <HAL_GetTick>
 8008158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800815a:	e008      	b.n	800816e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800815c:	f7fe fc72 	bl	8006a44 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	2b64      	cmp	r3, #100	; 0x64
 8008168:	d901      	bls.n	800816e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e204      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800816e:	4b76      	ldr	r3, [pc, #472]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0f0      	beq.n	800815c <HAL_RCC_OscConfig+0xc0>
 800817a:	e014      	b.n	80081a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800817c:	f7fe fc62 	bl	8006a44 <HAL_GetTick>
 8008180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008182:	e008      	b.n	8008196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008184:	f7fe fc5e 	bl	8006a44 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b64      	cmp	r3, #100	; 0x64
 8008190:	d901      	bls.n	8008196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e1f0      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008196:	4b6c      	ldr	r3, [pc, #432]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1f0      	bne.n	8008184 <HAL_RCC_OscConfig+0xe8>
 80081a2:	e000      	b.n	80081a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d063      	beq.n	800827a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081b2:	4b65      	ldr	r3, [pc, #404]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 030c 	and.w	r3, r3, #12
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00b      	beq.n	80081d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081be:	4b62      	ldr	r3, [pc, #392]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081c6:	2b08      	cmp	r3, #8
 80081c8:	d11c      	bne.n	8008204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081ca:	4b5f      	ldr	r3, [pc, #380]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d116      	bne.n	8008204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081d6:	4b5c      	ldr	r3, [pc, #368]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d005      	beq.n	80081ee <HAL_RCC_OscConfig+0x152>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d001      	beq.n	80081ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e1c4      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081ee:	4b56      	ldr	r3, [pc, #344]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	4952      	ldr	r1, [pc, #328]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008202:	e03a      	b.n	800827a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d020      	beq.n	800824e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800820c:	4b4f      	ldr	r3, [pc, #316]	; (800834c <HAL_RCC_OscConfig+0x2b0>)
 800820e:	2201      	movs	r2, #1
 8008210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008212:	f7fe fc17 	bl	8006a44 <HAL_GetTick>
 8008216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008218:	e008      	b.n	800822c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800821a:	f7fe fc13 	bl	8006a44 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b02      	cmp	r3, #2
 8008226:	d901      	bls.n	800822c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e1a5      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800822c:	4b46      	ldr	r3, [pc, #280]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0f0      	beq.n	800821a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008238:	4b43      	ldr	r3, [pc, #268]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	00db      	lsls	r3, r3, #3
 8008246:	4940      	ldr	r1, [pc, #256]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008248:	4313      	orrs	r3, r2
 800824a:	600b      	str	r3, [r1, #0]
 800824c:	e015      	b.n	800827a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800824e:	4b3f      	ldr	r3, [pc, #252]	; (800834c <HAL_RCC_OscConfig+0x2b0>)
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008254:	f7fe fbf6 	bl	8006a44 <HAL_GetTick>
 8008258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800825a:	e008      	b.n	800826e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800825c:	f7fe fbf2 	bl	8006a44 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d901      	bls.n	800826e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e184      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800826e:	4b36      	ldr	r3, [pc, #216]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1f0      	bne.n	800825c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d030      	beq.n	80082e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d016      	beq.n	80082bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800828e:	4b30      	ldr	r3, [pc, #192]	; (8008350 <HAL_RCC_OscConfig+0x2b4>)
 8008290:	2201      	movs	r2, #1
 8008292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008294:	f7fe fbd6 	bl	8006a44 <HAL_GetTick>
 8008298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800829a:	e008      	b.n	80082ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800829c:	f7fe fbd2 	bl	8006a44 <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e164      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082ae:	4b26      	ldr	r3, [pc, #152]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80082b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0f0      	beq.n	800829c <HAL_RCC_OscConfig+0x200>
 80082ba:	e015      	b.n	80082e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082bc:	4b24      	ldr	r3, [pc, #144]	; (8008350 <HAL_RCC_OscConfig+0x2b4>)
 80082be:	2200      	movs	r2, #0
 80082c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082c2:	f7fe fbbf 	bl	8006a44 <HAL_GetTick>
 80082c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082c8:	e008      	b.n	80082dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082ca:	f7fe fbbb 	bl	8006a44 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d901      	bls.n	80082dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e14d      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082dc:	4b1a      	ldr	r3, [pc, #104]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80082de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e0:	f003 0302 	and.w	r3, r3, #2
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1f0      	bne.n	80082ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 80a0 	beq.w	8008436 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082fa:	4b13      	ldr	r3, [pc, #76]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10f      	bne.n	8008326 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008306:	2300      	movs	r3, #0
 8008308:	60bb      	str	r3, [r7, #8]
 800830a:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	4a0e      	ldr	r2, [pc, #56]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008314:	6413      	str	r3, [r2, #64]	; 0x40
 8008316:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <HAL_RCC_OscConfig+0x2ac>)
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800831e:	60bb      	str	r3, [r7, #8]
 8008320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008322:	2301      	movs	r3, #1
 8008324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008326:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <HAL_RCC_OscConfig+0x2b8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832e:	2b00      	cmp	r3, #0
 8008330:	d121      	bne.n	8008376 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008332:	4b08      	ldr	r3, [pc, #32]	; (8008354 <HAL_RCC_OscConfig+0x2b8>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a07      	ldr	r2, [pc, #28]	; (8008354 <HAL_RCC_OscConfig+0x2b8>)
 8008338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800833c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800833e:	f7fe fb81 	bl	8006a44 <HAL_GetTick>
 8008342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008344:	e011      	b.n	800836a <HAL_RCC_OscConfig+0x2ce>
 8008346:	bf00      	nop
 8008348:	40023800 	.word	0x40023800
 800834c:	42470000 	.word	0x42470000
 8008350:	42470e80 	.word	0x42470e80
 8008354:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008358:	f7fe fb74 	bl	8006a44 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b02      	cmp	r3, #2
 8008364:	d901      	bls.n	800836a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e106      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800836a:	4b85      	ldr	r3, [pc, #532]	; (8008580 <HAL_RCC_OscConfig+0x4e4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0f0      	beq.n	8008358 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d106      	bne.n	800838c <HAL_RCC_OscConfig+0x2f0>
 800837e:	4b81      	ldr	r3, [pc, #516]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 8008380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008382:	4a80      	ldr	r2, [pc, #512]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 8008384:	f043 0301 	orr.w	r3, r3, #1
 8008388:	6713      	str	r3, [r2, #112]	; 0x70
 800838a:	e01c      	b.n	80083c6 <HAL_RCC_OscConfig+0x32a>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	2b05      	cmp	r3, #5
 8008392:	d10c      	bne.n	80083ae <HAL_RCC_OscConfig+0x312>
 8008394:	4b7b      	ldr	r3, [pc, #492]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 8008396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008398:	4a7a      	ldr	r2, [pc, #488]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 800839a:	f043 0304 	orr.w	r3, r3, #4
 800839e:	6713      	str	r3, [r2, #112]	; 0x70
 80083a0:	4b78      	ldr	r3, [pc, #480]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 80083a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a4:	4a77      	ldr	r2, [pc, #476]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 80083a6:	f043 0301 	orr.w	r3, r3, #1
 80083aa:	6713      	str	r3, [r2, #112]	; 0x70
 80083ac:	e00b      	b.n	80083c6 <HAL_RCC_OscConfig+0x32a>
 80083ae:	4b75      	ldr	r3, [pc, #468]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 80083b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b2:	4a74      	ldr	r2, [pc, #464]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 80083b4:	f023 0301 	bic.w	r3, r3, #1
 80083b8:	6713      	str	r3, [r2, #112]	; 0x70
 80083ba:	4b72      	ldr	r3, [pc, #456]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 80083bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083be:	4a71      	ldr	r2, [pc, #452]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 80083c0:	f023 0304 	bic.w	r3, r3, #4
 80083c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d015      	beq.n	80083fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083ce:	f7fe fb39 	bl	8006a44 <HAL_GetTick>
 80083d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083d4:	e00a      	b.n	80083ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083d6:	f7fe fb35 	bl	8006a44 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d901      	bls.n	80083ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e0c5      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ec:	4b65      	ldr	r3, [pc, #404]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 80083ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f0:	f003 0302 	and.w	r3, r3, #2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d0ee      	beq.n	80083d6 <HAL_RCC_OscConfig+0x33a>
 80083f8:	e014      	b.n	8008424 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083fa:	f7fe fb23 	bl	8006a44 <HAL_GetTick>
 80083fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008400:	e00a      	b.n	8008418 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008402:	f7fe fb1f 	bl	8006a44 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008410:	4293      	cmp	r3, r2
 8008412:	d901      	bls.n	8008418 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e0af      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008418:	4b5a      	ldr	r3, [pc, #360]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 800841a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1ee      	bne.n	8008402 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d105      	bne.n	8008436 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800842a:	4b56      	ldr	r3, [pc, #344]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	4a55      	ldr	r2, [pc, #340]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 8008430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008434:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 809b 	beq.w	8008576 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008440:	4b50      	ldr	r3, [pc, #320]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f003 030c 	and.w	r3, r3, #12
 8008448:	2b08      	cmp	r3, #8
 800844a:	d05c      	beq.n	8008506 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d141      	bne.n	80084d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008454:	4b4c      	ldr	r3, [pc, #304]	; (8008588 <HAL_RCC_OscConfig+0x4ec>)
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800845a:	f7fe faf3 	bl	8006a44 <HAL_GetTick>
 800845e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008460:	e008      	b.n	8008474 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008462:	f7fe faef 	bl	8006a44 <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	2b02      	cmp	r3, #2
 800846e:	d901      	bls.n	8008474 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e081      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008474:	4b43      	ldr	r3, [pc, #268]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1f0      	bne.n	8008462 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	69da      	ldr	r2, [r3, #28]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	019b      	lsls	r3, r3, #6
 8008490:	431a      	orrs	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008496:	085b      	lsrs	r3, r3, #1
 8008498:	3b01      	subs	r3, #1
 800849a:	041b      	lsls	r3, r3, #16
 800849c:	431a      	orrs	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a2:	061b      	lsls	r3, r3, #24
 80084a4:	4937      	ldr	r1, [pc, #220]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084aa:	4b37      	ldr	r3, [pc, #220]	; (8008588 <HAL_RCC_OscConfig+0x4ec>)
 80084ac:	2201      	movs	r2, #1
 80084ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084b0:	f7fe fac8 	bl	8006a44 <HAL_GetTick>
 80084b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084b8:	f7fe fac4 	bl	8006a44 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e056      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084ca:	4b2e      	ldr	r3, [pc, #184]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0f0      	beq.n	80084b8 <HAL_RCC_OscConfig+0x41c>
 80084d6:	e04e      	b.n	8008576 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d8:	4b2b      	ldr	r3, [pc, #172]	; (8008588 <HAL_RCC_OscConfig+0x4ec>)
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084de:	f7fe fab1 	bl	8006a44 <HAL_GetTick>
 80084e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084e4:	e008      	b.n	80084f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084e6:	f7fe faad 	bl	8006a44 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e03f      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f8:	4b22      	ldr	r3, [pc, #136]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1f0      	bne.n	80084e6 <HAL_RCC_OscConfig+0x44a>
 8008504:	e037      	b.n	8008576 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e032      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008512:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <HAL_RCC_OscConfig+0x4e8>)
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d028      	beq.n	8008572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800852a:	429a      	cmp	r2, r3
 800852c:	d121      	bne.n	8008572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008538:	429a      	cmp	r2, r3
 800853a:	d11a      	bne.n	8008572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008542:	4013      	ands	r3, r2
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008548:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800854a:	4293      	cmp	r3, r2
 800854c:	d111      	bne.n	8008572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	085b      	lsrs	r3, r3, #1
 800855a:	3b01      	subs	r3, #1
 800855c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800855e:	429a      	cmp	r2, r3
 8008560:	d107      	bne.n	8008572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800856e:	429a      	cmp	r2, r3
 8008570:	d001      	beq.n	8008576 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40007000 	.word	0x40007000
 8008584:	40023800 	.word	0x40023800
 8008588:	42470060 	.word	0x42470060

0800858c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e0cc      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085a0:	4b68      	ldr	r3, [pc, #416]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d90c      	bls.n	80085c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ae:	4b65      	ldr	r3, [pc, #404]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085b6:	4b63      	ldr	r3, [pc, #396]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0307 	and.w	r3, r3, #7
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d001      	beq.n	80085c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0b8      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d020      	beq.n	8008616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085e0:	4b59      	ldr	r3, [pc, #356]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	4a58      	ldr	r2, [pc, #352]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085f8:	4b53      	ldr	r3, [pc, #332]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	4a52      	ldr	r2, [pc, #328]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80085fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008604:	4b50      	ldr	r3, [pc, #320]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	494d      	ldr	r1, [pc, #308]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008612:	4313      	orrs	r3, r2
 8008614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d044      	beq.n	80086ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d107      	bne.n	800863a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800862a:	4b47      	ldr	r3, [pc, #284]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d119      	bne.n	800866a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e07f      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2b02      	cmp	r3, #2
 8008640:	d003      	beq.n	800864a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008646:	2b03      	cmp	r3, #3
 8008648:	d107      	bne.n	800865a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800864a:	4b3f      	ldr	r3, [pc, #252]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d109      	bne.n	800866a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e06f      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800865a:	4b3b      	ldr	r3, [pc, #236]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e067      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800866a:	4b37      	ldr	r3, [pc, #220]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f023 0203 	bic.w	r2, r3, #3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	4934      	ldr	r1, [pc, #208]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008678:	4313      	orrs	r3, r2
 800867a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800867c:	f7fe f9e2 	bl	8006a44 <HAL_GetTick>
 8008680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008682:	e00a      	b.n	800869a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008684:	f7fe f9de 	bl	8006a44 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008692:	4293      	cmp	r3, r2
 8008694:	d901      	bls.n	800869a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e04f      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800869a:	4b2b      	ldr	r3, [pc, #172]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 020c 	and.w	r2, r3, #12
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d1eb      	bne.n	8008684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80086ac:	4b25      	ldr	r3, [pc, #148]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0307 	and.w	r3, r3, #7
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d20c      	bcs.n	80086d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ba:	4b22      	ldr	r3, [pc, #136]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80086bc:	683a      	ldr	r2, [r7, #0]
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086c2:	4b20      	ldr	r3, [pc, #128]	; (8008744 <HAL_RCC_ClockConfig+0x1b8>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d001      	beq.n	80086d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e032      	b.n	800873a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d008      	beq.n	80086f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086e0:	4b19      	ldr	r3, [pc, #100]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	4916      	ldr	r1, [pc, #88]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d009      	beq.n	8008712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086fe:	4b12      	ldr	r3, [pc, #72]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	490e      	ldr	r1, [pc, #56]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800870e:	4313      	orrs	r3, r2
 8008710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008712:	f000 f821 	bl	8008758 <HAL_RCC_GetSysClockFreq>
 8008716:	4602      	mov	r2, r0
 8008718:	4b0b      	ldr	r3, [pc, #44]	; (8008748 <HAL_RCC_ClockConfig+0x1bc>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	091b      	lsrs	r3, r3, #4
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	490a      	ldr	r1, [pc, #40]	; (800874c <HAL_RCC_ClockConfig+0x1c0>)
 8008724:	5ccb      	ldrb	r3, [r1, r3]
 8008726:	fa22 f303 	lsr.w	r3, r2, r3
 800872a:	4a09      	ldr	r2, [pc, #36]	; (8008750 <HAL_RCC_ClockConfig+0x1c4>)
 800872c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <HAL_RCC_ClockConfig+0x1c8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe f942 	bl	80069bc <HAL_InitTick>

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	40023c00 	.word	0x40023c00
 8008748:	40023800 	.word	0x40023800
 800874c:	0800db64 	.word	0x0800db64
 8008750:	20000020 	.word	0x20000020
 8008754:	20000024 	.word	0x20000024

08008758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	607b      	str	r3, [r7, #4]
 8008764:	2300      	movs	r3, #0
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	2300      	movs	r3, #0
 800876a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008770:	4b67      	ldr	r3, [pc, #412]	; (8008910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f003 030c 	and.w	r3, r3, #12
 8008778:	2b08      	cmp	r3, #8
 800877a:	d00d      	beq.n	8008798 <HAL_RCC_GetSysClockFreq+0x40>
 800877c:	2b08      	cmp	r3, #8
 800877e:	f200 80bd 	bhi.w	80088fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8008782:	2b00      	cmp	r3, #0
 8008784:	d002      	beq.n	800878c <HAL_RCC_GetSysClockFreq+0x34>
 8008786:	2b04      	cmp	r3, #4
 8008788:	d003      	beq.n	8008792 <HAL_RCC_GetSysClockFreq+0x3a>
 800878a:	e0b7      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800878c:	4b61      	ldr	r3, [pc, #388]	; (8008914 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800878e:	60bb      	str	r3, [r7, #8]
       break;
 8008790:	e0b7      	b.n	8008902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008792:	4b61      	ldr	r3, [pc, #388]	; (8008918 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008794:	60bb      	str	r3, [r7, #8]
      break;
 8008796:	e0b4      	b.n	8008902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008798:	4b5d      	ldr	r3, [pc, #372]	; (8008910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087a2:	4b5b      	ldr	r3, [pc, #364]	; (8008910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d04d      	beq.n	800884a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087ae:	4b58      	ldr	r3, [pc, #352]	; (8008910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	099b      	lsrs	r3, r3, #6
 80087b4:	461a      	mov	r2, r3
 80087b6:	f04f 0300 	mov.w	r3, #0
 80087ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80087be:	f04f 0100 	mov.w	r1, #0
 80087c2:	ea02 0800 	and.w	r8, r2, r0
 80087c6:	ea03 0901 	and.w	r9, r3, r1
 80087ca:	4640      	mov	r0, r8
 80087cc:	4649      	mov	r1, r9
 80087ce:	f04f 0200 	mov.w	r2, #0
 80087d2:	f04f 0300 	mov.w	r3, #0
 80087d6:	014b      	lsls	r3, r1, #5
 80087d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80087dc:	0142      	lsls	r2, r0, #5
 80087de:	4610      	mov	r0, r2
 80087e0:	4619      	mov	r1, r3
 80087e2:	ebb0 0008 	subs.w	r0, r0, r8
 80087e6:	eb61 0109 	sbc.w	r1, r1, r9
 80087ea:	f04f 0200 	mov.w	r2, #0
 80087ee:	f04f 0300 	mov.w	r3, #0
 80087f2:	018b      	lsls	r3, r1, #6
 80087f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80087f8:	0182      	lsls	r2, r0, #6
 80087fa:	1a12      	subs	r2, r2, r0
 80087fc:	eb63 0301 	sbc.w	r3, r3, r1
 8008800:	f04f 0000 	mov.w	r0, #0
 8008804:	f04f 0100 	mov.w	r1, #0
 8008808:	00d9      	lsls	r1, r3, #3
 800880a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800880e:	00d0      	lsls	r0, r2, #3
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	eb12 0208 	adds.w	r2, r2, r8
 8008818:	eb43 0309 	adc.w	r3, r3, r9
 800881c:	f04f 0000 	mov.w	r0, #0
 8008820:	f04f 0100 	mov.w	r1, #0
 8008824:	0259      	lsls	r1, r3, #9
 8008826:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800882a:	0250      	lsls	r0, r2, #9
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4610      	mov	r0, r2
 8008832:	4619      	mov	r1, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	461a      	mov	r2, r3
 8008838:	f04f 0300 	mov.w	r3, #0
 800883c:	f7f8 f9be 	bl	8000bbc <__aeabi_uldivmod>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4613      	mov	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	e04a      	b.n	80088e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800884a:	4b31      	ldr	r3, [pc, #196]	; (8008910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	099b      	lsrs	r3, r3, #6
 8008850:	461a      	mov	r2, r3
 8008852:	f04f 0300 	mov.w	r3, #0
 8008856:	f240 10ff 	movw	r0, #511	; 0x1ff
 800885a:	f04f 0100 	mov.w	r1, #0
 800885e:	ea02 0400 	and.w	r4, r2, r0
 8008862:	ea03 0501 	and.w	r5, r3, r1
 8008866:	4620      	mov	r0, r4
 8008868:	4629      	mov	r1, r5
 800886a:	f04f 0200 	mov.w	r2, #0
 800886e:	f04f 0300 	mov.w	r3, #0
 8008872:	014b      	lsls	r3, r1, #5
 8008874:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008878:	0142      	lsls	r2, r0, #5
 800887a:	4610      	mov	r0, r2
 800887c:	4619      	mov	r1, r3
 800887e:	1b00      	subs	r0, r0, r4
 8008880:	eb61 0105 	sbc.w	r1, r1, r5
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	f04f 0300 	mov.w	r3, #0
 800888c:	018b      	lsls	r3, r1, #6
 800888e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008892:	0182      	lsls	r2, r0, #6
 8008894:	1a12      	subs	r2, r2, r0
 8008896:	eb63 0301 	sbc.w	r3, r3, r1
 800889a:	f04f 0000 	mov.w	r0, #0
 800889e:	f04f 0100 	mov.w	r1, #0
 80088a2:	00d9      	lsls	r1, r3, #3
 80088a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088a8:	00d0      	lsls	r0, r2, #3
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	1912      	adds	r2, r2, r4
 80088b0:	eb45 0303 	adc.w	r3, r5, r3
 80088b4:	f04f 0000 	mov.w	r0, #0
 80088b8:	f04f 0100 	mov.w	r1, #0
 80088bc:	0299      	lsls	r1, r3, #10
 80088be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80088c2:	0290      	lsls	r0, r2, #10
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4610      	mov	r0, r2
 80088ca:	4619      	mov	r1, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	461a      	mov	r2, r3
 80088d0:	f04f 0300 	mov.w	r3, #0
 80088d4:	f7f8 f972 	bl	8000bbc <__aeabi_uldivmod>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4613      	mov	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088e0:	4b0b      	ldr	r3, [pc, #44]	; (8008910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	0c1b      	lsrs	r3, r3, #16
 80088e6:	f003 0303 	and.w	r3, r3, #3
 80088ea:	3301      	adds	r3, #1
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f8:	60bb      	str	r3, [r7, #8]
      break;
 80088fa:	e002      	b.n	8008902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80088fe:	60bb      	str	r3, [r7, #8]
      break;
 8008900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008902:	68bb      	ldr	r3, [r7, #8]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800890e:	bf00      	nop
 8008910:	40023800 	.word	0x40023800
 8008914:	00f42400 	.word	0x00f42400
 8008918:	007a1200 	.word	0x007a1200

0800891c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008920:	4b03      	ldr	r3, [pc, #12]	; (8008930 <HAL_RCC_GetHCLKFreq+0x14>)
 8008922:	681b      	ldr	r3, [r3, #0]
}
 8008924:	4618      	mov	r0, r3
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	20000020 	.word	0x20000020

08008934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008938:	f7ff fff0 	bl	800891c <HAL_RCC_GetHCLKFreq>
 800893c:	4602      	mov	r2, r0
 800893e:	4b05      	ldr	r3, [pc, #20]	; (8008954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	0a9b      	lsrs	r3, r3, #10
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	4903      	ldr	r1, [pc, #12]	; (8008958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800894a:	5ccb      	ldrb	r3, [r1, r3]
 800894c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008950:	4618      	mov	r0, r3
 8008952:	bd80      	pop	{r7, pc}
 8008954:	40023800 	.word	0x40023800
 8008958:	0800db74 	.word	0x0800db74

0800895c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008960:	f7ff ffdc 	bl	800891c <HAL_RCC_GetHCLKFreq>
 8008964:	4602      	mov	r2, r0
 8008966:	4b05      	ldr	r3, [pc, #20]	; (800897c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	0b5b      	lsrs	r3, r3, #13
 800896c:	f003 0307 	and.w	r3, r3, #7
 8008970:	4903      	ldr	r1, [pc, #12]	; (8008980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008972:	5ccb      	ldrb	r3, [r1, r3]
 8008974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008978:	4618      	mov	r0, r3
 800897a:	bd80      	pop	{r7, pc}
 800897c:	40023800 	.word	0x40023800
 8008980:	0800db74 	.word	0x0800db74

08008984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e07b      	b.n	8008a8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b00      	cmp	r3, #0
 800899c:	d108      	bne.n	80089b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089a6:	d009      	beq.n	80089bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	61da      	str	r2, [r3, #28]
 80089ae:	e005      	b.n	80089bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d106      	bne.n	80089dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7fd f8fc 	bl	8005bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2202      	movs	r2, #2
 80089e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a1b      	ldr	r3, [r3, #32]
 8008a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a40:	ea42 0103 	orr.w	r1, r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	0c1b      	lsrs	r3, r3, #16
 8008a5a:	f003 0104 	and.w	r1, r3, #4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	f003 0210 	and.w	r2, r3, #16
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69da      	ldr	r2, [r3, #28]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b088      	sub	sp, #32
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	60f8      	str	r0, [r7, #12]
 8008a9e:	60b9      	str	r1, [r7, #8]
 8008aa0:	603b      	str	r3, [r7, #0]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d101      	bne.n	8008ab8 <HAL_SPI_Transmit+0x22>
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e126      	b.n	8008d06 <HAL_SPI_Transmit+0x270>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ac0:	f7fd ffc0 	bl	8006a44 <HAL_GetTick>
 8008ac4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ac6:	88fb      	ldrh	r3, [r7, #6]
 8008ac8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d002      	beq.n	8008adc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ada:	e10b      	b.n	8008cf4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <HAL_SPI_Transmit+0x52>
 8008ae2:	88fb      	ldrh	r3, [r7, #6]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008aec:	e102      	b.n	8008cf4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2203      	movs	r2, #3
 8008af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	88fa      	ldrh	r2, [r7, #6]
 8008b06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	88fa      	ldrh	r2, [r7, #6]
 8008b0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b34:	d10f      	bne.n	8008b56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	d007      	beq.n	8008b74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b7c:	d14b      	bne.n	8008c16 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <HAL_SPI_Transmit+0xf6>
 8008b86:	8afb      	ldrh	r3, [r7, #22]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d13e      	bne.n	8008c0a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	881a      	ldrh	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9c:	1c9a      	adds	r2, r3, #2
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008bb0:	e02b      	b.n	8008c0a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d112      	bne.n	8008be6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc4:	881a      	ldrh	r2, [r3, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd0:	1c9a      	adds	r2, r3, #2
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	86da      	strh	r2, [r3, #54]	; 0x36
 8008be4:	e011      	b.n	8008c0a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008be6:	f7fd ff2d 	bl	8006a44 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d803      	bhi.n	8008bfe <HAL_SPI_Transmit+0x168>
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfc:	d102      	bne.n	8008c04 <HAL_SPI_Transmit+0x16e>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d102      	bne.n	8008c0a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c08:	e074      	b.n	8008cf4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1ce      	bne.n	8008bb2 <HAL_SPI_Transmit+0x11c>
 8008c14:	e04c      	b.n	8008cb0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d002      	beq.n	8008c24 <HAL_SPI_Transmit+0x18e>
 8008c1e:	8afb      	ldrh	r3, [r7, #22]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d140      	bne.n	8008ca6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	330c      	adds	r3, #12
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	3b01      	subs	r3, #1
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c4a:	e02c      	b.n	8008ca6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d113      	bne.n	8008c82 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	330c      	adds	r3, #12
 8008c64:	7812      	ldrb	r2, [r2, #0]
 8008c66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c80:	e011      	b.n	8008ca6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c82:	f7fd fedf 	bl	8006a44 <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d803      	bhi.n	8008c9a <HAL_SPI_Transmit+0x204>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c98:	d102      	bne.n	8008ca0 <HAL_SPI_Transmit+0x20a>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ca4:	e026      	b.n	8008cf4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1cd      	bne.n	8008c4c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 fbcb 	bl	8009450 <SPI_EndRxTxTransaction>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10a      	bne.n	8008ce4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cce:	2300      	movs	r3, #0
 8008cd0:	613b      	str	r3, [r7, #16]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	613b      	str	r3, [r7, #16]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	77fb      	strb	r3, [r7, #31]
 8008cf0:	e000      	b.n	8008cf4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008cf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d04:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b088      	sub	sp, #32
 8008d12:	af02      	add	r7, sp, #8
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	603b      	str	r3, [r7, #0]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d2a:	d112      	bne.n	8008d52 <HAL_SPI_Receive+0x44>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10e      	bne.n	8008d52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2204      	movs	r2, #4
 8008d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008d3c:	88fa      	ldrh	r2, [r7, #6]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	4613      	mov	r3, r2
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	68b9      	ldr	r1, [r7, #8]
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 f8f1 	bl	8008f30 <HAL_SPI_TransmitReceive>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	e0ea      	b.n	8008f28 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d101      	bne.n	8008d60 <HAL_SPI_Receive+0x52>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e0e3      	b.n	8008f28 <HAL_SPI_Receive+0x21a>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d68:	f7fd fe6c 	bl	8006a44 <HAL_GetTick>
 8008d6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d002      	beq.n	8008d80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d7e:	e0ca      	b.n	8008f16 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d002      	beq.n	8008d8c <HAL_SPI_Receive+0x7e>
 8008d86:	88fb      	ldrh	r3, [r7, #6]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d90:	e0c1      	b.n	8008f16 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2204      	movs	r2, #4
 8008d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	68ba      	ldr	r2, [r7, #8]
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	88fa      	ldrh	r2, [r7, #6]
 8008daa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	88fa      	ldrh	r2, [r7, #6]
 8008db0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dd8:	d10f      	bne.n	8008dfa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008df8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e04:	2b40      	cmp	r3, #64	; 0x40
 8008e06:	d007      	beq.n	8008e18 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d162      	bne.n	8008ee6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008e20:	e02e      	b.n	8008e80 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d115      	bne.n	8008e5c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f103 020c 	add.w	r2, r3, #12
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3c:	7812      	ldrb	r2, [r2, #0]
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	3b01      	subs	r3, #1
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e5a:	e011      	b.n	8008e80 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e5c:	f7fd fdf2 	bl	8006a44 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d803      	bhi.n	8008e74 <HAL_SPI_Receive+0x166>
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e72:	d102      	bne.n	8008e7a <HAL_SPI_Receive+0x16c>
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d102      	bne.n	8008e80 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008e7e:	e04a      	b.n	8008f16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1cb      	bne.n	8008e22 <HAL_SPI_Receive+0x114>
 8008e8a:	e031      	b.n	8008ef0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d113      	bne.n	8008ec2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	b292      	uxth	r2, r2
 8008ea6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	1c9a      	adds	r2, r3, #2
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ec0:	e011      	b.n	8008ee6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ec2:	f7fd fdbf 	bl	8006a44 <HAL_GetTick>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d803      	bhi.n	8008eda <HAL_SPI_Receive+0x1cc>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed8:	d102      	bne.n	8008ee0 <HAL_SPI_Receive+0x1d2>
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d102      	bne.n	8008ee6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ee4:	e017      	b.n	8008f16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1cd      	bne.n	8008e8c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 fa45 	bl	8009384 <SPI_EndRxTransaction>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2220      	movs	r2, #32
 8008f04:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	75fb      	strb	r3, [r7, #23]
 8008f12:	e000      	b.n	8008f16 <HAL_SPI_Receive+0x208>
  }

error :
 8008f14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3718      	adds	r7, #24
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08c      	sub	sp, #48	; 0x30
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f42:	2300      	movs	r3, #0
 8008f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <HAL_SPI_TransmitReceive+0x26>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e18a      	b.n	800926c <HAL_SPI_TransmitReceive+0x33c>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f5e:	f7fd fd71 	bl	8006a44 <HAL_GetTick>
 8008f62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008f74:	887b      	ldrh	r3, [r7, #2]
 8008f76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d00f      	beq.n	8008fa0 <HAL_SPI_TransmitReceive+0x70>
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f86:	d107      	bne.n	8008f98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d103      	bne.n	8008f98 <HAL_SPI_TransmitReceive+0x68>
 8008f90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d003      	beq.n	8008fa0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008f98:	2302      	movs	r3, #2
 8008f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008f9e:	e15b      	b.n	8009258 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d005      	beq.n	8008fb2 <HAL_SPI_TransmitReceive+0x82>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <HAL_SPI_TransmitReceive+0x82>
 8008fac:	887b      	ldrh	r3, [r7, #2]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d103      	bne.n	8008fba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008fb8:	e14e      	b.n	8009258 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d003      	beq.n	8008fce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2205      	movs	r2, #5
 8008fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	887a      	ldrh	r2, [r7, #2]
 8008fde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	887a      	ldrh	r2, [r7, #2]
 8008fe4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	887a      	ldrh	r2, [r7, #2]
 8008ff0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	887a      	ldrh	r2, [r7, #2]
 8008ff6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b40      	cmp	r3, #64	; 0x40
 8009010:	d007      	beq.n	8009022 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009020:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800902a:	d178      	bne.n	800911e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d002      	beq.n	800903a <HAL_SPI_TransmitReceive+0x10a>
 8009034:	8b7b      	ldrh	r3, [r7, #26]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d166      	bne.n	8009108 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903e:	881a      	ldrh	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904a:	1c9a      	adds	r2, r3, #2
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009054:	b29b      	uxth	r3, r3
 8009056:	3b01      	subs	r3, #1
 8009058:	b29a      	uxth	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800905e:	e053      	b.n	8009108 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b02      	cmp	r3, #2
 800906c:	d11b      	bne.n	80090a6 <HAL_SPI_TransmitReceive+0x176>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009072:	b29b      	uxth	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	d016      	beq.n	80090a6 <HAL_SPI_TransmitReceive+0x176>
 8009078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907a:	2b01      	cmp	r3, #1
 800907c:	d113      	bne.n	80090a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009082:	881a      	ldrh	r2, [r3, #0]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908e:	1c9a      	adds	r2, r3, #2
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009098:	b29b      	uxth	r3, r3
 800909a:	3b01      	subs	r3, #1
 800909c:	b29a      	uxth	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d119      	bne.n	80090e8 <HAL_SPI_TransmitReceive+0x1b8>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d014      	beq.n	80090e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c8:	b292      	uxth	r2, r2
 80090ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d0:	1c9a      	adds	r2, r3, #2
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090da:	b29b      	uxth	r3, r3
 80090dc:	3b01      	subs	r3, #1
 80090de:	b29a      	uxth	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80090e4:	2301      	movs	r3, #1
 80090e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80090e8:	f7fd fcac 	bl	8006a44 <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d807      	bhi.n	8009108 <HAL_SPI_TransmitReceive+0x1d8>
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fe:	d003      	beq.n	8009108 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009106:	e0a7      	b.n	8009258 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800910c:	b29b      	uxth	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1a6      	bne.n	8009060 <HAL_SPI_TransmitReceive+0x130>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009116:	b29b      	uxth	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1a1      	bne.n	8009060 <HAL_SPI_TransmitReceive+0x130>
 800911c:	e07c      	b.n	8009218 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <HAL_SPI_TransmitReceive+0x1fc>
 8009126:	8b7b      	ldrh	r3, [r7, #26]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d16b      	bne.n	8009204 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	330c      	adds	r3, #12
 8009136:	7812      	ldrb	r2, [r2, #0]
 8009138:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009148:	b29b      	uxth	r3, r3
 800914a:	3b01      	subs	r3, #1
 800914c:	b29a      	uxth	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009152:	e057      	b.n	8009204 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f003 0302 	and.w	r3, r3, #2
 800915e:	2b02      	cmp	r3, #2
 8009160:	d11c      	bne.n	800919c <HAL_SPI_TransmitReceive+0x26c>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d017      	beq.n	800919c <HAL_SPI_TransmitReceive+0x26c>
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	2b01      	cmp	r3, #1
 8009170:	d114      	bne.n	800919c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	330c      	adds	r3, #12
 800917c:	7812      	ldrb	r2, [r2, #0]
 800917e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009184:	1c5a      	adds	r2, r3, #1
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800918e:	b29b      	uxth	r3, r3
 8009190:	3b01      	subs	r3, #1
 8009192:	b29a      	uxth	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009198:	2300      	movs	r3, #0
 800919a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d119      	bne.n	80091de <HAL_SPI_TransmitReceive+0x2ae>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d014      	beq.n	80091de <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091be:	b2d2      	uxtb	r2, r2
 80091c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091da:	2301      	movs	r3, #1
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80091de:	f7fd fc31 	bl	8006a44 <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d803      	bhi.n	80091f6 <HAL_SPI_TransmitReceive+0x2c6>
 80091ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f4:	d102      	bne.n	80091fc <HAL_SPI_TransmitReceive+0x2cc>
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d103      	bne.n	8009204 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009202:	e029      	b.n	8009258 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009208:	b29b      	uxth	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1a2      	bne.n	8009154 <HAL_SPI_TransmitReceive+0x224>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009212:	b29b      	uxth	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d19d      	bne.n	8009154 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800921a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 f917 	bl	8009450 <SPI_EndRxTxTransaction>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d006      	beq.n	8009236 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2220      	movs	r2, #32
 8009232:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009234:	e010      	b.n	8009258 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10b      	bne.n	8009256 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	617b      	str	r3, [r7, #20]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	617b      	str	r3, [r7, #20]
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	e000      	b.n	8009258 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009256:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009268:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800926c:	4618      	mov	r0, r3
 800926e:	3730      	adds	r7, #48	; 0x30
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	4613      	mov	r3, r2
 8009282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009284:	f7fd fbde 	bl	8006a44 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	1a9b      	subs	r3, r3, r2
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	4413      	add	r3, r2
 8009292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009294:	f7fd fbd6 	bl	8006a44 <HAL_GetTick>
 8009298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800929a:	4b39      	ldr	r3, [pc, #228]	; (8009380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	015b      	lsls	r3, r3, #5
 80092a0:	0d1b      	lsrs	r3, r3, #20
 80092a2:	69fa      	ldr	r2, [r7, #28]
 80092a4:	fb02 f303 	mul.w	r3, r2, r3
 80092a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092aa:	e054      	b.n	8009356 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b2:	d050      	beq.n	8009356 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092b4:	f7fd fbc6 	bl	8006a44 <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d902      	bls.n	80092ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d13d      	bne.n	8009346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092e2:	d111      	bne.n	8009308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092ec:	d004      	beq.n	80092f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092f6:	d107      	bne.n	8009308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009310:	d10f      	bne.n	8009332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e017      	b.n	8009376 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	3b01      	subs	r3, #1
 8009354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689a      	ldr	r2, [r3, #8]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	4013      	ands	r3, r2
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	429a      	cmp	r2, r3
 8009364:	bf0c      	ite	eq
 8009366:	2301      	moveq	r3, #1
 8009368:	2300      	movne	r3, #0
 800936a:	b2db      	uxtb	r3, r3
 800936c:	461a      	mov	r2, r3
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	429a      	cmp	r2, r3
 8009372:	d19b      	bne.n	80092ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3720      	adds	r7, #32
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20000020 	.word	0x20000020

08009384 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af02      	add	r7, sp, #8
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009398:	d111      	bne.n	80093be <SPI_EndRxTransaction+0x3a>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093a2:	d004      	beq.n	80093ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ac:	d107      	bne.n	80093be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093c6:	d12a      	bne.n	800941e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093d0:	d012      	beq.n	80093f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2200      	movs	r2, #0
 80093da:	2180      	movs	r1, #128	; 0x80
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f7ff ff49 	bl	8009274 <SPI_WaitFlagStateUntilTimeout>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d02d      	beq.n	8009444 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ec:	f043 0220 	orr.w	r2, r3, #32
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e026      	b.n	8009446 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2200      	movs	r2, #0
 8009400:	2101      	movs	r1, #1
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff ff36 	bl	8009274 <SPI_WaitFlagStateUntilTimeout>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d01a      	beq.n	8009444 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009412:	f043 0220 	orr.w	r2, r3, #32
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e013      	b.n	8009446 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2200      	movs	r2, #0
 8009426:	2101      	movs	r1, #1
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f7ff ff23 	bl	8009274 <SPI_WaitFlagStateUntilTimeout>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d007      	beq.n	8009444 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009438:	f043 0220 	orr.w	r2, r3, #32
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e000      	b.n	8009446 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af02      	add	r7, sp, #8
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800945c:	4b1b      	ldr	r3, [pc, #108]	; (80094cc <SPI_EndRxTxTransaction+0x7c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a1b      	ldr	r2, [pc, #108]	; (80094d0 <SPI_EndRxTxTransaction+0x80>)
 8009462:	fba2 2303 	umull	r2, r3, r2, r3
 8009466:	0d5b      	lsrs	r3, r3, #21
 8009468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800946c:	fb02 f303 	mul.w	r3, r2, r3
 8009470:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800947a:	d112      	bne.n	80094a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	2200      	movs	r2, #0
 8009484:	2180      	movs	r1, #128	; 0x80
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f7ff fef4 	bl	8009274 <SPI_WaitFlagStateUntilTimeout>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d016      	beq.n	80094c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009496:	f043 0220 	orr.w	r2, r3, #32
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e00f      	b.n	80094c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00a      	beq.n	80094be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	3b01      	subs	r3, #1
 80094ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b8:	2b80      	cmp	r3, #128	; 0x80
 80094ba:	d0f2      	beq.n	80094a2 <SPI_EndRxTxTransaction+0x52>
 80094bc:	e000      	b.n	80094c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80094be:	bf00      	nop
  }

  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000020 	.word	0x20000020
 80094d0:	165e9f81 	.word	0x165e9f81

080094d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e041      	b.n	800956a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d106      	bne.n	8009500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7fc febe 	bl	800627c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2202      	movs	r2, #2
 8009504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3304      	adds	r3, #4
 8009510:	4619      	mov	r1, r3
 8009512:	4610      	mov	r0, r2
 8009514:	f000 fd30 	bl	8009f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
	...

08009574 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b01      	cmp	r3, #1
 8009586:	d001      	beq.n	800958c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e046      	b.n	800961a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2202      	movs	r2, #2
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a23      	ldr	r2, [pc, #140]	; (8009628 <HAL_TIM_Base_Start+0xb4>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d022      	beq.n	80095e4 <HAL_TIM_Base_Start+0x70>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a6:	d01d      	beq.n	80095e4 <HAL_TIM_Base_Start+0x70>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a1f      	ldr	r2, [pc, #124]	; (800962c <HAL_TIM_Base_Start+0xb8>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d018      	beq.n	80095e4 <HAL_TIM_Base_Start+0x70>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a1e      	ldr	r2, [pc, #120]	; (8009630 <HAL_TIM_Base_Start+0xbc>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d013      	beq.n	80095e4 <HAL_TIM_Base_Start+0x70>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a1c      	ldr	r2, [pc, #112]	; (8009634 <HAL_TIM_Base_Start+0xc0>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00e      	beq.n	80095e4 <HAL_TIM_Base_Start+0x70>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a1b      	ldr	r2, [pc, #108]	; (8009638 <HAL_TIM_Base_Start+0xc4>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d009      	beq.n	80095e4 <HAL_TIM_Base_Start+0x70>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a19      	ldr	r2, [pc, #100]	; (800963c <HAL_TIM_Base_Start+0xc8>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d004      	beq.n	80095e4 <HAL_TIM_Base_Start+0x70>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a18      	ldr	r2, [pc, #96]	; (8009640 <HAL_TIM_Base_Start+0xcc>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d111      	bne.n	8009608 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f003 0307 	and.w	r3, r3, #7
 80095ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b06      	cmp	r3, #6
 80095f4:	d010      	beq.n	8009618 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f042 0201 	orr.w	r2, r2, #1
 8009604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009606:	e007      	b.n	8009618 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f042 0201 	orr.w	r2, r2, #1
 8009616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	40010000 	.word	0x40010000
 800962c:	40000400 	.word	0x40000400
 8009630:	40000800 	.word	0x40000800
 8009634:	40000c00 	.word	0x40000c00
 8009638:	40010400 	.word	0x40010400
 800963c:	40014000 	.word	0x40014000
 8009640:	40001800 	.word	0x40001800

08009644 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d101      	bne.n	8009656 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e041      	b.n	80096da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d106      	bne.n	8009670 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f839 	bl	80096e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3304      	adds	r3, #4
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f000 fc78 	bl	8009f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b083      	sub	sp, #12
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80096ea:	bf00      	nop
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
	...

080096f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
 8009704:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d109      	bne.n	8009724 <HAL_TIM_PWM_Start_DMA+0x2c>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b02      	cmp	r3, #2
 800971a:	bf0c      	ite	eq
 800971c:	2301      	moveq	r3, #1
 800971e:	2300      	movne	r3, #0
 8009720:	b2db      	uxtb	r3, r3
 8009722:	e022      	b.n	800976a <HAL_TIM_PWM_Start_DMA+0x72>
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	2b04      	cmp	r3, #4
 8009728:	d109      	bne.n	800973e <HAL_TIM_PWM_Start_DMA+0x46>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b02      	cmp	r3, #2
 8009734:	bf0c      	ite	eq
 8009736:	2301      	moveq	r3, #1
 8009738:	2300      	movne	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	e015      	b.n	800976a <HAL_TIM_PWM_Start_DMA+0x72>
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	2b08      	cmp	r3, #8
 8009742:	d109      	bne.n	8009758 <HAL_TIM_PWM_Start_DMA+0x60>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800974a:	b2db      	uxtb	r3, r3
 800974c:	2b02      	cmp	r3, #2
 800974e:	bf0c      	ite	eq
 8009750:	2301      	moveq	r3, #1
 8009752:	2300      	movne	r3, #0
 8009754:	b2db      	uxtb	r3, r3
 8009756:	e008      	b.n	800976a <HAL_TIM_PWM_Start_DMA+0x72>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b02      	cmp	r3, #2
 8009762:	bf0c      	ite	eq
 8009764:	2301      	moveq	r3, #1
 8009766:	2300      	movne	r3, #0
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800976e:	2302      	movs	r3, #2
 8009770:	e171      	b.n	8009a56 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d109      	bne.n	800978c <HAL_TIM_PWM_Start_DMA+0x94>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b01      	cmp	r3, #1
 8009782:	bf0c      	ite	eq
 8009784:	2301      	moveq	r3, #1
 8009786:	2300      	movne	r3, #0
 8009788:	b2db      	uxtb	r3, r3
 800978a:	e022      	b.n	80097d2 <HAL_TIM_PWM_Start_DMA+0xda>
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	2b04      	cmp	r3, #4
 8009790:	d109      	bne.n	80097a6 <HAL_TIM_PWM_Start_DMA+0xae>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b01      	cmp	r3, #1
 800979c:	bf0c      	ite	eq
 800979e:	2301      	moveq	r3, #1
 80097a0:	2300      	movne	r3, #0
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	e015      	b.n	80097d2 <HAL_TIM_PWM_Start_DMA+0xda>
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b08      	cmp	r3, #8
 80097aa:	d109      	bne.n	80097c0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	bf0c      	ite	eq
 80097b8:	2301      	moveq	r3, #1
 80097ba:	2300      	movne	r3, #0
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	e008      	b.n	80097d2 <HAL_TIM_PWM_Start_DMA+0xda>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	bf0c      	ite	eq
 80097cc:	2301      	moveq	r3, #1
 80097ce:	2300      	movne	r3, #0
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d024      	beq.n	8009820 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d104      	bne.n	80097e6 <HAL_TIM_PWM_Start_DMA+0xee>
 80097dc:	887b      	ldrh	r3, [r7, #2]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e137      	b.n	8009a56 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d104      	bne.n	80097f6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097f4:	e016      	b.n	8009824 <HAL_TIM_PWM_Start_DMA+0x12c>
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2b04      	cmp	r3, #4
 80097fa:	d104      	bne.n	8009806 <HAL_TIM_PWM_Start_DMA+0x10e>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2202      	movs	r2, #2
 8009800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009804:	e00e      	b.n	8009824 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2b08      	cmp	r3, #8
 800980a:	d104      	bne.n	8009816 <HAL_TIM_PWM_Start_DMA+0x11e>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009814:	e006      	b.n	8009824 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2202      	movs	r2, #2
 800981a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800981e:	e001      	b.n	8009824 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e118      	b.n	8009a56 <HAL_TIM_PWM_Start_DMA+0x35e>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b0c      	cmp	r3, #12
 8009828:	f200 80ae 	bhi.w	8009988 <HAL_TIM_PWM_Start_DMA+0x290>
 800982c:	a201      	add	r2, pc, #4	; (adr r2, 8009834 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009832:	bf00      	nop
 8009834:	08009869 	.word	0x08009869
 8009838:	08009989 	.word	0x08009989
 800983c:	08009989 	.word	0x08009989
 8009840:	08009989 	.word	0x08009989
 8009844:	080098b1 	.word	0x080098b1
 8009848:	08009989 	.word	0x08009989
 800984c:	08009989 	.word	0x08009989
 8009850:	08009989 	.word	0x08009989
 8009854:	080098f9 	.word	0x080098f9
 8009858:	08009989 	.word	0x08009989
 800985c:	08009989 	.word	0x08009989
 8009860:	08009989 	.word	0x08009989
 8009864:	08009941 	.word	0x08009941
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	4a7c      	ldr	r2, [pc, #496]	; (8009a60 <HAL_TIM_PWM_Start_DMA+0x368>)
 800986e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	4a7b      	ldr	r2, [pc, #492]	; (8009a64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009876:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	4a7a      	ldr	r2, [pc, #488]	; (8009a68 <HAL_TIM_PWM_Start_DMA+0x370>)
 800987e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009884:	6879      	ldr	r1, [r7, #4]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3334      	adds	r3, #52	; 0x34
 800988c:	461a      	mov	r2, r3
 800988e:	887b      	ldrh	r3, [r7, #2]
 8009890:	f7fd fec8 	bl	8007624 <HAL_DMA_Start_IT>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e0db      	b.n	8009a56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68da      	ldr	r2, [r3, #12]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098ac:	60da      	str	r2, [r3, #12]
      break;
 80098ae:	e06e      	b.n	800998e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b4:	4a6a      	ldr	r2, [pc, #424]	; (8009a60 <HAL_TIM_PWM_Start_DMA+0x368>)
 80098b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098bc:	4a69      	ldr	r2, [pc, #420]	; (8009a64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80098be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c4:	4a68      	ldr	r2, [pc, #416]	; (8009a68 <HAL_TIM_PWM_Start_DMA+0x370>)
 80098c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3338      	adds	r3, #56	; 0x38
 80098d4:	461a      	mov	r2, r3
 80098d6:	887b      	ldrh	r3, [r7, #2]
 80098d8:	f7fd fea4 	bl	8007624 <HAL_DMA_Start_IT>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d001      	beq.n	80098e6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e0b7      	b.n	8009a56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68da      	ldr	r2, [r3, #12]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098f4:	60da      	str	r2, [r3, #12]
      break;
 80098f6:	e04a      	b.n	800998e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fc:	4a58      	ldr	r2, [pc, #352]	; (8009a60 <HAL_TIM_PWM_Start_DMA+0x368>)
 80098fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009904:	4a57      	ldr	r2, [pc, #348]	; (8009a64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990c:	4a56      	ldr	r2, [pc, #344]	; (8009a68 <HAL_TIM_PWM_Start_DMA+0x370>)
 800990e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	333c      	adds	r3, #60	; 0x3c
 800991c:	461a      	mov	r2, r3
 800991e:	887b      	ldrh	r3, [r7, #2]
 8009920:	f7fd fe80 	bl	8007624 <HAL_DMA_Start_IT>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e093      	b.n	8009a56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68da      	ldr	r2, [r3, #12]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800993c:	60da      	str	r2, [r3, #12]
      break;
 800993e:	e026      	b.n	800998e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009944:	4a46      	ldr	r2, [pc, #280]	; (8009a60 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009946:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994c:	4a45      	ldr	r2, [pc, #276]	; (8009a64 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800994e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009954:	4a44      	ldr	r2, [pc, #272]	; (8009a68 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009956:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800995c:	6879      	ldr	r1, [r7, #4]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3340      	adds	r3, #64	; 0x40
 8009964:	461a      	mov	r2, r3
 8009966:	887b      	ldrh	r3, [r7, #2]
 8009968:	f7fd fe5c 	bl	8007624 <HAL_DMA_Start_IT>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e06f      	b.n	8009a56 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68da      	ldr	r2, [r3, #12]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009984:	60da      	str	r2, [r3, #12]
      break;
 8009986:	e002      	b.n	800998e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	75fb      	strb	r3, [r7, #23]
      break;
 800998c:	bf00      	nop
  }

  if (status == HAL_OK)
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d15f      	bne.n	8009a54 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2201      	movs	r2, #1
 800999a:	68b9      	ldr	r1, [r7, #8]
 800999c:	4618      	mov	r0, r3
 800999e:	f000 fdd5 	bl	800a54c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a31      	ldr	r2, [pc, #196]	; (8009a6c <HAL_TIM_PWM_Start_DMA+0x374>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d004      	beq.n	80099b6 <HAL_TIM_PWM_Start_DMA+0x2be>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a2f      	ldr	r2, [pc, #188]	; (8009a70 <HAL_TIM_PWM_Start_DMA+0x378>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d101      	bne.n	80099ba <HAL_TIM_PWM_Start_DMA+0x2c2>
 80099b6:	2301      	movs	r3, #1
 80099b8:	e000      	b.n	80099bc <HAL_TIM_PWM_Start_DMA+0x2c4>
 80099ba:	2300      	movs	r3, #0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d007      	beq.n	80099d0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a25      	ldr	r2, [pc, #148]	; (8009a6c <HAL_TIM_PWM_Start_DMA+0x374>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d022      	beq.n	8009a20 <HAL_TIM_PWM_Start_DMA+0x328>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e2:	d01d      	beq.n	8009a20 <HAL_TIM_PWM_Start_DMA+0x328>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a22      	ldr	r2, [pc, #136]	; (8009a74 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d018      	beq.n	8009a20 <HAL_TIM_PWM_Start_DMA+0x328>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a21      	ldr	r2, [pc, #132]	; (8009a78 <HAL_TIM_PWM_Start_DMA+0x380>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d013      	beq.n	8009a20 <HAL_TIM_PWM_Start_DMA+0x328>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a1f      	ldr	r2, [pc, #124]	; (8009a7c <HAL_TIM_PWM_Start_DMA+0x384>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00e      	beq.n	8009a20 <HAL_TIM_PWM_Start_DMA+0x328>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a1a      	ldr	r2, [pc, #104]	; (8009a70 <HAL_TIM_PWM_Start_DMA+0x378>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d009      	beq.n	8009a20 <HAL_TIM_PWM_Start_DMA+0x328>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a1b      	ldr	r2, [pc, #108]	; (8009a80 <HAL_TIM_PWM_Start_DMA+0x388>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d004      	beq.n	8009a20 <HAL_TIM_PWM_Start_DMA+0x328>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a1a      	ldr	r2, [pc, #104]	; (8009a84 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d111      	bne.n	8009a44 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	2b06      	cmp	r3, #6
 8009a30:	d010      	beq.n	8009a54 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f042 0201 	orr.w	r2, r2, #1
 8009a40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a42:	e007      	b.n	8009a54 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0201 	orr.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	08009e69 	.word	0x08009e69
 8009a64:	08009f11 	.word	0x08009f11
 8009a68:	08009dd7 	.word	0x08009dd7
 8009a6c:	40010000 	.word	0x40010000
 8009a70:	40010400 	.word	0x40010400
 8009a74:	40000400 	.word	0x40000400
 8009a78:	40000800 	.word	0x40000800
 8009a7c:	40000c00 	.word	0x40000c00
 8009a80:	40014000 	.word	0x40014000
 8009a84:	40001800 	.word	0x40001800

08009a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d101      	bne.n	8009aa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	e0ae      	b.n	8009c04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b0c      	cmp	r3, #12
 8009ab2:	f200 809f 	bhi.w	8009bf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009ab6:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abc:	08009af1 	.word	0x08009af1
 8009ac0:	08009bf5 	.word	0x08009bf5
 8009ac4:	08009bf5 	.word	0x08009bf5
 8009ac8:	08009bf5 	.word	0x08009bf5
 8009acc:	08009b31 	.word	0x08009b31
 8009ad0:	08009bf5 	.word	0x08009bf5
 8009ad4:	08009bf5 	.word	0x08009bf5
 8009ad8:	08009bf5 	.word	0x08009bf5
 8009adc:	08009b73 	.word	0x08009b73
 8009ae0:	08009bf5 	.word	0x08009bf5
 8009ae4:	08009bf5 	.word	0x08009bf5
 8009ae8:	08009bf5 	.word	0x08009bf5
 8009aec:	08009bb3 	.word	0x08009bb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fade 	bl	800a0b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	699a      	ldr	r2, [r3, #24]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0208 	orr.w	r2, r2, #8
 8009b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	699a      	ldr	r2, [r3, #24]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 0204 	bic.w	r2, r2, #4
 8009b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6999      	ldr	r1, [r3, #24]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	619a      	str	r2, [r3, #24]
      break;
 8009b2e:	e064      	b.n	8009bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68b9      	ldr	r1, [r7, #8]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fb2e 	bl	800a198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	699a      	ldr	r2, [r3, #24]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6999      	ldr	r1, [r3, #24]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	021a      	lsls	r2, r3, #8
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	619a      	str	r2, [r3, #24]
      break;
 8009b70:	e043      	b.n	8009bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68b9      	ldr	r1, [r7, #8]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fb83 	bl	800a284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	69da      	ldr	r2, [r3, #28]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f042 0208 	orr.w	r2, r2, #8
 8009b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69da      	ldr	r2, [r3, #28]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0204 	bic.w	r2, r2, #4
 8009b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69d9      	ldr	r1, [r3, #28]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	691a      	ldr	r2, [r3, #16]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	61da      	str	r2, [r3, #28]
      break;
 8009bb0:	e023      	b.n	8009bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68b9      	ldr	r1, [r7, #8]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fbd7 	bl	800a36c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69da      	ldr	r2, [r3, #28]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69da      	ldr	r2, [r3, #28]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	69d9      	ldr	r1, [r3, #28]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	021a      	lsls	r2, r3, #8
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	61da      	str	r2, [r3, #28]
      break;
 8009bf2:	e002      	b.n	8009bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8009bf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d101      	bne.n	8009c28 <HAL_TIM_ConfigClockSource+0x1c>
 8009c24:	2302      	movs	r3, #2
 8009c26:	e0b4      	b.n	8009d92 <HAL_TIM_ConfigClockSource+0x186>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2202      	movs	r2, #2
 8009c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c60:	d03e      	beq.n	8009ce0 <HAL_TIM_ConfigClockSource+0xd4>
 8009c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c66:	f200 8087 	bhi.w	8009d78 <HAL_TIM_ConfigClockSource+0x16c>
 8009c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c6e:	f000 8086 	beq.w	8009d7e <HAL_TIM_ConfigClockSource+0x172>
 8009c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c76:	d87f      	bhi.n	8009d78 <HAL_TIM_ConfigClockSource+0x16c>
 8009c78:	2b70      	cmp	r3, #112	; 0x70
 8009c7a:	d01a      	beq.n	8009cb2 <HAL_TIM_ConfigClockSource+0xa6>
 8009c7c:	2b70      	cmp	r3, #112	; 0x70
 8009c7e:	d87b      	bhi.n	8009d78 <HAL_TIM_ConfigClockSource+0x16c>
 8009c80:	2b60      	cmp	r3, #96	; 0x60
 8009c82:	d050      	beq.n	8009d26 <HAL_TIM_ConfigClockSource+0x11a>
 8009c84:	2b60      	cmp	r3, #96	; 0x60
 8009c86:	d877      	bhi.n	8009d78 <HAL_TIM_ConfigClockSource+0x16c>
 8009c88:	2b50      	cmp	r3, #80	; 0x50
 8009c8a:	d03c      	beq.n	8009d06 <HAL_TIM_ConfigClockSource+0xfa>
 8009c8c:	2b50      	cmp	r3, #80	; 0x50
 8009c8e:	d873      	bhi.n	8009d78 <HAL_TIM_ConfigClockSource+0x16c>
 8009c90:	2b40      	cmp	r3, #64	; 0x40
 8009c92:	d058      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0x13a>
 8009c94:	2b40      	cmp	r3, #64	; 0x40
 8009c96:	d86f      	bhi.n	8009d78 <HAL_TIM_ConfigClockSource+0x16c>
 8009c98:	2b30      	cmp	r3, #48	; 0x30
 8009c9a:	d064      	beq.n	8009d66 <HAL_TIM_ConfigClockSource+0x15a>
 8009c9c:	2b30      	cmp	r3, #48	; 0x30
 8009c9e:	d86b      	bhi.n	8009d78 <HAL_TIM_ConfigClockSource+0x16c>
 8009ca0:	2b20      	cmp	r3, #32
 8009ca2:	d060      	beq.n	8009d66 <HAL_TIM_ConfigClockSource+0x15a>
 8009ca4:	2b20      	cmp	r3, #32
 8009ca6:	d867      	bhi.n	8009d78 <HAL_TIM_ConfigClockSource+0x16c>
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d05c      	beq.n	8009d66 <HAL_TIM_ConfigClockSource+0x15a>
 8009cac:	2b10      	cmp	r3, #16
 8009cae:	d05a      	beq.n	8009d66 <HAL_TIM_ConfigClockSource+0x15a>
 8009cb0:	e062      	b.n	8009d78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6818      	ldr	r0, [r3, #0]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	6899      	ldr	r1, [r3, #8]
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	f000 fc23 	bl	800a50c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	609a      	str	r2, [r3, #8]
      break;
 8009cde:	e04f      	b.n	8009d80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	6899      	ldr	r1, [r3, #8]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	f000 fc0c 	bl	800a50c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689a      	ldr	r2, [r3, #8]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d02:	609a      	str	r2, [r3, #8]
      break;
 8009d04:	e03c      	b.n	8009d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6818      	ldr	r0, [r3, #0]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	6859      	ldr	r1, [r3, #4]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	461a      	mov	r2, r3
 8009d14:	f000 fb80 	bl	800a418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2150      	movs	r1, #80	; 0x50
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 fbd9 	bl	800a4d6 <TIM_ITRx_SetConfig>
      break;
 8009d24:	e02c      	b.n	8009d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6818      	ldr	r0, [r3, #0]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	6859      	ldr	r1, [r3, #4]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	461a      	mov	r2, r3
 8009d34:	f000 fb9f 	bl	800a476 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2160      	movs	r1, #96	; 0x60
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 fbc9 	bl	800a4d6 <TIM_ITRx_SetConfig>
      break;
 8009d44:	e01c      	b.n	8009d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	6859      	ldr	r1, [r3, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	461a      	mov	r2, r3
 8009d54:	f000 fb60 	bl	800a418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2140      	movs	r1, #64	; 0x40
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 fbb9 	bl	800a4d6 <TIM_ITRx_SetConfig>
      break;
 8009d64:	e00c      	b.n	8009d80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4610      	mov	r0, r2
 8009d72:	f000 fbb0 	bl	800a4d6 <TIM_ITRx_SetConfig>
      break;
 8009d76:	e003      	b.n	8009d80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d7c:	e000      	b.n	8009d80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b083      	sub	sp, #12
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009dca:	bf00      	nop
 8009dcc:	370c      	adds	r7, #12
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b084      	sub	sp, #16
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d107      	bne.n	8009dfe <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2201      	movs	r2, #1
 8009df2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dfc:	e02a      	b.n	8009e54 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d107      	bne.n	8009e18 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e16:	e01d      	b.n	8009e54 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d107      	bne.n	8009e32 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2204      	movs	r2, #4
 8009e26:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e30:	e010      	b.n	8009e54 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d107      	bne.n	8009e4c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2208      	movs	r2, #8
 8009e40:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e4a:	e003      	b.n	8009e54 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f7ff ffb4 	bl	8009dc2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	771a      	strb	r2, [r3, #28]
}
 8009e60:	bf00      	nop
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e74:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d10b      	bne.n	8009e98 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2201      	movs	r2, #1
 8009e84:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	69db      	ldr	r3, [r3, #28]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d136      	bne.n	8009efc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e96:	e031      	b.n	8009efc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d10b      	bne.n	8009eba <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2202      	movs	r2, #2
 8009ea6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d125      	bne.n	8009efc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009eb8:	e020      	b.n	8009efc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d10b      	bne.n	8009edc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2204      	movs	r2, #4
 8009ec8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d114      	bne.n	8009efc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009eda:	e00f      	b.n	8009efc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d10a      	bne.n	8009efc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2208      	movs	r2, #8
 8009eea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d103      	bne.n	8009efc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f7ff ff4c 	bl	8009d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	771a      	strb	r2, [r3, #28]
}
 8009f08:	bf00      	nop
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d103      	bne.n	8009f30 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	771a      	strb	r2, [r3, #28]
 8009f2e:	e019      	b.n	8009f64 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d103      	bne.n	8009f42 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	771a      	strb	r2, [r3, #28]
 8009f40:	e010      	b.n	8009f64 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d103      	bne.n	8009f54 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2204      	movs	r2, #4
 8009f50:	771a      	strb	r2, [r3, #28]
 8009f52:	e007      	b.n	8009f64 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d102      	bne.n	8009f64 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2208      	movs	r2, #8
 8009f62:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f7ff ff22 	bl	8009dae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	771a      	strb	r2, [r3, #28]
}
 8009f70:	bf00      	nop
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a40      	ldr	r2, [pc, #256]	; (800a08c <TIM_Base_SetConfig+0x114>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d013      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f96:	d00f      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a3d      	ldr	r2, [pc, #244]	; (800a090 <TIM_Base_SetConfig+0x118>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d00b      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a3c      	ldr	r2, [pc, #240]	; (800a094 <TIM_Base_SetConfig+0x11c>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d007      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a3b      	ldr	r2, [pc, #236]	; (800a098 <TIM_Base_SetConfig+0x120>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d003      	beq.n	8009fb8 <TIM_Base_SetConfig+0x40>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a3a      	ldr	r2, [pc, #232]	; (800a09c <TIM_Base_SetConfig+0x124>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d108      	bne.n	8009fca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a2f      	ldr	r2, [pc, #188]	; (800a08c <TIM_Base_SetConfig+0x114>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d02b      	beq.n	800a02a <TIM_Base_SetConfig+0xb2>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd8:	d027      	beq.n	800a02a <TIM_Base_SetConfig+0xb2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a2c      	ldr	r2, [pc, #176]	; (800a090 <TIM_Base_SetConfig+0x118>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d023      	beq.n	800a02a <TIM_Base_SetConfig+0xb2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a2b      	ldr	r2, [pc, #172]	; (800a094 <TIM_Base_SetConfig+0x11c>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d01f      	beq.n	800a02a <TIM_Base_SetConfig+0xb2>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a2a      	ldr	r2, [pc, #168]	; (800a098 <TIM_Base_SetConfig+0x120>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d01b      	beq.n	800a02a <TIM_Base_SetConfig+0xb2>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a29      	ldr	r2, [pc, #164]	; (800a09c <TIM_Base_SetConfig+0x124>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d017      	beq.n	800a02a <TIM_Base_SetConfig+0xb2>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a28      	ldr	r2, [pc, #160]	; (800a0a0 <TIM_Base_SetConfig+0x128>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d013      	beq.n	800a02a <TIM_Base_SetConfig+0xb2>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a27      	ldr	r2, [pc, #156]	; (800a0a4 <TIM_Base_SetConfig+0x12c>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d00f      	beq.n	800a02a <TIM_Base_SetConfig+0xb2>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a26      	ldr	r2, [pc, #152]	; (800a0a8 <TIM_Base_SetConfig+0x130>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d00b      	beq.n	800a02a <TIM_Base_SetConfig+0xb2>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a25      	ldr	r2, [pc, #148]	; (800a0ac <TIM_Base_SetConfig+0x134>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d007      	beq.n	800a02a <TIM_Base_SetConfig+0xb2>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a24      	ldr	r2, [pc, #144]	; (800a0b0 <TIM_Base_SetConfig+0x138>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d003      	beq.n	800a02a <TIM_Base_SetConfig+0xb2>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a23      	ldr	r2, [pc, #140]	; (800a0b4 <TIM_Base_SetConfig+0x13c>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d108      	bne.n	800a03c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4313      	orrs	r3, r2
 800a03a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	4313      	orrs	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	689a      	ldr	r2, [r3, #8]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a0a      	ldr	r2, [pc, #40]	; (800a08c <TIM_Base_SetConfig+0x114>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d003      	beq.n	800a070 <TIM_Base_SetConfig+0xf8>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <TIM_Base_SetConfig+0x124>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d103      	bne.n	800a078 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	691a      	ldr	r2, [r3, #16]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	615a      	str	r2, [r3, #20]
}
 800a07e:	bf00      	nop
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	40010000 	.word	0x40010000
 800a090:	40000400 	.word	0x40000400
 800a094:	40000800 	.word	0x40000800
 800a098:	40000c00 	.word	0x40000c00
 800a09c:	40010400 	.word	0x40010400
 800a0a0:	40014000 	.word	0x40014000
 800a0a4:	40014400 	.word	0x40014400
 800a0a8:	40014800 	.word	0x40014800
 800a0ac:	40001800 	.word	0x40001800
 800a0b0:	40001c00 	.word	0x40001c00
 800a0b4:	40002000 	.word	0x40002000

0800a0b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b087      	sub	sp, #28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	f023 0201 	bic.w	r2, r3, #1
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f023 0303 	bic.w	r3, r3, #3
 800a0ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f023 0302 	bic.w	r3, r3, #2
 800a100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	4313      	orrs	r3, r2
 800a10a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a20      	ldr	r2, [pc, #128]	; (800a190 <TIM_OC1_SetConfig+0xd8>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d003      	beq.n	800a11c <TIM_OC1_SetConfig+0x64>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a1f      	ldr	r2, [pc, #124]	; (800a194 <TIM_OC1_SetConfig+0xdc>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d10c      	bne.n	800a136 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f023 0308 	bic.w	r3, r3, #8
 800a122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f023 0304 	bic.w	r3, r3, #4
 800a134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a15      	ldr	r2, [pc, #84]	; (800a190 <TIM_OC1_SetConfig+0xd8>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d003      	beq.n	800a146 <TIM_OC1_SetConfig+0x8e>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a14      	ldr	r2, [pc, #80]	; (800a194 <TIM_OC1_SetConfig+0xdc>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d111      	bne.n	800a16a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a14c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	4313      	orrs	r3, r2
 800a168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	621a      	str	r2, [r3, #32]
}
 800a184:	bf00      	nop
 800a186:	371c      	adds	r7, #28
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	40010000 	.word	0x40010000
 800a194:	40010400 	.word	0x40010400

0800a198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	f023 0210 	bic.w	r2, r3, #16
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	021b      	lsls	r3, r3, #8
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f023 0320 	bic.w	r3, r3, #32
 800a1e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	011b      	lsls	r3, r3, #4
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a22      	ldr	r2, [pc, #136]	; (800a27c <TIM_OC2_SetConfig+0xe4>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d003      	beq.n	800a200 <TIM_OC2_SetConfig+0x68>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a21      	ldr	r2, [pc, #132]	; (800a280 <TIM_OC2_SetConfig+0xe8>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d10d      	bne.n	800a21c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	011b      	lsls	r3, r3, #4
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	4313      	orrs	r3, r2
 800a212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a21a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a17      	ldr	r2, [pc, #92]	; (800a27c <TIM_OC2_SetConfig+0xe4>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d003      	beq.n	800a22c <TIM_OC2_SetConfig+0x94>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a16      	ldr	r2, [pc, #88]	; (800a280 <TIM_OC2_SetConfig+0xe8>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d113      	bne.n	800a254 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a23a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	4313      	orrs	r3, r2
 800a246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	4313      	orrs	r3, r2
 800a252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	621a      	str	r2, [r3, #32]
}
 800a26e:	bf00      	nop
 800a270:	371c      	adds	r7, #28
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	40010000 	.word	0x40010000
 800a280:	40010400 	.word	0x40010400

0800a284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	69db      	ldr	r3, [r3, #28]
 800a2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 0303 	bic.w	r3, r3, #3
 800a2ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	021b      	lsls	r3, r3, #8
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a21      	ldr	r2, [pc, #132]	; (800a364 <TIM_OC3_SetConfig+0xe0>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d003      	beq.n	800a2ea <TIM_OC3_SetConfig+0x66>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a20      	ldr	r2, [pc, #128]	; (800a368 <TIM_OC3_SetConfig+0xe4>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d10d      	bne.n	800a306 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	021b      	lsls	r3, r3, #8
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a16      	ldr	r2, [pc, #88]	; (800a364 <TIM_OC3_SetConfig+0xe0>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d003      	beq.n	800a316 <TIM_OC3_SetConfig+0x92>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a15      	ldr	r2, [pc, #84]	; (800a368 <TIM_OC3_SetConfig+0xe4>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d113      	bne.n	800a33e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a31c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	4313      	orrs	r3, r2
 800a330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	699b      	ldr	r3, [r3, #24]
 800a336:	011b      	lsls	r3, r3, #4
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	685a      	ldr	r2, [r3, #4]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	621a      	str	r2, [r3, #32]
}
 800a358:	bf00      	nop
 800a35a:	371c      	adds	r7, #28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr
 800a364:	40010000 	.word	0x40010000
 800a368:	40010400 	.word	0x40010400

0800a36c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b087      	sub	sp, #28
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a39a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	021b      	lsls	r3, r3, #8
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	031b      	lsls	r3, r3, #12
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a12      	ldr	r2, [pc, #72]	; (800a410 <TIM_OC4_SetConfig+0xa4>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d003      	beq.n	800a3d4 <TIM_OC4_SetConfig+0x68>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a11      	ldr	r2, [pc, #68]	; (800a414 <TIM_OC4_SetConfig+0xa8>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d109      	bne.n	800a3e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	019b      	lsls	r3, r3, #6
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	685a      	ldr	r2, [r3, #4]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	621a      	str	r2, [r3, #32]
}
 800a402:	bf00      	nop
 800a404:	371c      	adds	r7, #28
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	40010000 	.word	0x40010000
 800a414:	40010400 	.word	0x40010400

0800a418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a418:	b480      	push	{r7}
 800a41a:	b087      	sub	sp, #28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6a1b      	ldr	r3, [r3, #32]
 800a428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	f023 0201 	bic.w	r2, r3, #1
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	011b      	lsls	r3, r3, #4
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f023 030a 	bic.w	r3, r3, #10
 800a454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a456:	697a      	ldr	r2, [r7, #20]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	621a      	str	r2, [r3, #32]
}
 800a46a:	bf00      	nop
 800a46c:	371c      	adds	r7, #28
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a476:	b480      	push	{r7}
 800a478:	b087      	sub	sp, #28
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	60b9      	str	r1, [r7, #8]
 800a480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	f023 0210 	bic.w	r2, r3, #16
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	031b      	lsls	r3, r3, #12
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	011b      	lsls	r3, r3, #4
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	621a      	str	r2, [r3, #32]
}
 800a4ca:	bf00      	nop
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b085      	sub	sp, #20
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	f043 0307 	orr.w	r3, r3, #7
 800a4f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	609a      	str	r2, [r3, #8]
}
 800a500:	bf00      	nop
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	021a      	lsls	r2, r3, #8
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	431a      	orrs	r2, r3
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	4313      	orrs	r3, r2
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	4313      	orrs	r3, r2
 800a538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	697a      	ldr	r2, [r7, #20]
 800a53e:	609a      	str	r2, [r3, #8]
}
 800a540:	bf00      	nop
 800a542:	371c      	adds	r7, #28
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	f003 031f 	and.w	r3, r3, #31
 800a55e:	2201      	movs	r2, #1
 800a560:	fa02 f303 	lsl.w	r3, r2, r3
 800a564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6a1a      	ldr	r2, [r3, #32]
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	43db      	mvns	r3, r3
 800a56e:	401a      	ands	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6a1a      	ldr	r2, [r3, #32]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f003 031f 	and.w	r3, r3, #31
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	fa01 f303 	lsl.w	r3, r1, r3
 800a584:	431a      	orrs	r2, r3
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	621a      	str	r2, [r3, #32]
}
 800a58a:	bf00      	nop
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d101      	bne.n	800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	e05a      	b.n	800a666 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a21      	ldr	r2, [pc, #132]	; (800a674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d022      	beq.n	800a63a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5fc:	d01d      	beq.n	800a63a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a1d      	ldr	r2, [pc, #116]	; (800a678 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d018      	beq.n	800a63a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a1b      	ldr	r2, [pc, #108]	; (800a67c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d013      	beq.n	800a63a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a1a      	ldr	r2, [pc, #104]	; (800a680 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d00e      	beq.n	800a63a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a18      	ldr	r2, [pc, #96]	; (800a684 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d009      	beq.n	800a63a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a17      	ldr	r2, [pc, #92]	; (800a688 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d004      	beq.n	800a63a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a15      	ldr	r2, [pc, #84]	; (800a68c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d10c      	bne.n	800a654 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	4313      	orrs	r3, r2
 800a64a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	40010000 	.word	0x40010000
 800a678:	40000400 	.word	0x40000400
 800a67c:	40000800 	.word	0x40000800
 800a680:	40000c00 	.word	0x40000c00
 800a684:	40010400 	.word	0x40010400
 800a688:	40014000 	.word	0x40014000
 800a68c:	40001800 	.word	0x40001800

0800a690 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a69a:	2300      	movs	r3, #0
 800a69c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d101      	bne.n	800a6ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a6a8:	2302      	movs	r3, #2
 800a6aa:	e03d      	b.n	800a728 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	695b      	ldr	r3, [r3, #20]
 800a704:	4313      	orrs	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	4313      	orrs	r3, r2
 800a714:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3714      	adds	r7, #20
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e03f      	b.n	800a7c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7fb ff64 	bl	8006628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2224      	movs	r2, #36	; 0x24
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68da      	ldr	r2, [r3, #12]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 ff49 	bl	800b610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	691a      	ldr	r2, [r3, #16]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a78c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	695a      	ldr	r2, [r3, #20]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a79c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68da      	ldr	r2, [r3, #12]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2220      	movs	r2, #32
 800a7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08c      	sub	sp, #48	; 0x30
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b20      	cmp	r3, #32
 800a7e8:	d165      	bne.n	800a8b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <HAL_UART_Transmit_DMA+0x26>
 800a7f0:	88fb      	ldrh	r3, [r7, #6]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e05e      	b.n	800a8b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a800:	2b01      	cmp	r3, #1
 800a802:	d101      	bne.n	800a808 <HAL_UART_Transmit_DMA+0x38>
 800a804:	2302      	movs	r3, #2
 800a806:	e057      	b.n	800a8b8 <HAL_UART_Transmit_DMA+0xe8>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	88fa      	ldrh	r2, [r7, #6]
 800a81a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	88fa      	ldrh	r2, [r7, #6]
 800a820:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2221      	movs	r2, #33	; 0x21
 800a82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a834:	4a22      	ldr	r2, [pc, #136]	; (800a8c0 <HAL_UART_Transmit_DMA+0xf0>)
 800a836:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a83c:	4a21      	ldr	r2, [pc, #132]	; (800a8c4 <HAL_UART_Transmit_DMA+0xf4>)
 800a83e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a844:	4a20      	ldr	r2, [pc, #128]	; (800a8c8 <HAL_UART_Transmit_DMA+0xf8>)
 800a846:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a84c:	2200      	movs	r2, #0
 800a84e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a850:	f107 0308 	add.w	r3, r7, #8
 800a854:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85c:	6819      	ldr	r1, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	3304      	adds	r3, #4
 800a864:	461a      	mov	r2, r3
 800a866:	88fb      	ldrh	r3, [r7, #6]
 800a868:	f7fc fedc 	bl	8007624 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a874:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	3314      	adds	r3, #20
 800a884:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	e853 3f00 	ldrex	r3, [r3]
 800a88c:	617b      	str	r3, [r7, #20]
   return(result);
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a894:	62bb      	str	r3, [r7, #40]	; 0x28
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3314      	adds	r3, #20
 800a89c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a89e:	627a      	str	r2, [r7, #36]	; 0x24
 800a8a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a2:	6a39      	ldr	r1, [r7, #32]
 800a8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a6:	e841 2300 	strex	r3, r2, [r1]
 800a8aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1e5      	bne.n	800a87e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e000      	b.n	800a8b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a8b6:	2302      	movs	r3, #2
  }
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3730      	adds	r7, #48	; 0x30
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	0800aeb1 	.word	0x0800aeb1
 800a8c4:	0800af4b 	.word	0x0800af4b
 800a8c8:	0800b0c3 	.word	0x0800b0c3

0800a8cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b20      	cmp	r3, #32
 800a8e4:	d11d      	bne.n	800a922 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <HAL_UART_Receive_DMA+0x26>
 800a8ec:	88fb      	ldrh	r3, [r7, #6]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e016      	b.n	800a924 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d101      	bne.n	800a904 <HAL_UART_Receive_DMA+0x38>
 800a900:	2302      	movs	r3, #2
 800a902:	e00f      	b.n	800a924 <HAL_UART_Receive_DMA+0x58>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a912:	88fb      	ldrh	r3, [r7, #6]
 800a914:	461a      	mov	r2, r3
 800a916:	68b9      	ldr	r1, [r7, #8]
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 fc1d 	bl	800b158 <UART_Start_Receive_DMA>
 800a91e:	4603      	mov	r3, r0
 800a920:	e000      	b.n	800a924 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a922:	2302      	movs	r3, #2
  }
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b0ba      	sub	sp, #232	; 0xe8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a952:	2300      	movs	r3, #0
 800a954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a958:	2300      	movs	r3, #0
 800a95a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a95e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a962:	f003 030f 	and.w	r3, r3, #15
 800a966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a96a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10f      	bne.n	800a992 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d009      	beq.n	800a992 <HAL_UART_IRQHandler+0x66>
 800a97e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a982:	f003 0320 	and.w	r3, r3, #32
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fd85 	bl	800b49a <UART_Receive_IT>
      return;
 800a990:	e256      	b.n	800ae40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a996:	2b00      	cmp	r3, #0
 800a998:	f000 80de 	beq.w	800ab58 <HAL_UART_IRQHandler+0x22c>
 800a99c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d106      	bne.n	800a9b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f000 80d1 	beq.w	800ab58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a9b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ba:	f003 0301 	and.w	r3, r3, #1
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00b      	beq.n	800a9da <HAL_UART_IRQHandler+0xae>
 800a9c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d005      	beq.n	800a9da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d2:	f043 0201 	orr.w	r2, r3, #1
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a9da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9de:	f003 0304 	and.w	r3, r3, #4
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00b      	beq.n	800a9fe <HAL_UART_IRQHandler+0xd2>
 800a9e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d005      	beq.n	800a9fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f6:	f043 0202 	orr.w	r2, r3, #2
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa02:	f003 0302 	and.w	r3, r3, #2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00b      	beq.n	800aa22 <HAL_UART_IRQHandler+0xf6>
 800aa0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d005      	beq.n	800aa22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1a:	f043 0204 	orr.w	r2, r3, #4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aa22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa26:	f003 0308 	and.w	r3, r3, #8
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d011      	beq.n	800aa52 <HAL_UART_IRQHandler+0x126>
 800aa2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa32:	f003 0320 	and.w	r3, r3, #32
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d105      	bne.n	800aa46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aa3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d005      	beq.n	800aa52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4a:	f043 0208 	orr.w	r2, r3, #8
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f000 81ed 	beq.w	800ae36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aa5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa60:	f003 0320 	and.w	r3, r3, #32
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d008      	beq.n	800aa7a <HAL_UART_IRQHandler+0x14e>
 800aa68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa6c:	f003 0320 	and.w	r3, r3, #32
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fd10 	bl	800b49a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	695b      	ldr	r3, [r3, #20]
 800aa80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa84:	2b40      	cmp	r3, #64	; 0x40
 800aa86:	bf0c      	ite	eq
 800aa88:	2301      	moveq	r3, #1
 800aa8a:	2300      	movne	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa96:	f003 0308 	and.w	r3, r3, #8
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d103      	bne.n	800aaa6 <HAL_UART_IRQHandler+0x17a>
 800aa9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d04f      	beq.n	800ab46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fc18 	bl	800b2dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab6:	2b40      	cmp	r3, #64	; 0x40
 800aab8:	d141      	bne.n	800ab3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3314      	adds	r3, #20
 800aac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aac8:	e853 3f00 	ldrex	r3, [r3]
 800aacc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3314      	adds	r3, #20
 800aae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aae6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aaea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aaf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aafe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1d9      	bne.n	800aaba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d013      	beq.n	800ab36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab12:	4a7d      	ldr	r2, [pc, #500]	; (800ad08 <HAL_UART_IRQHandler+0x3dc>)
 800ab14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fc fe4a 	bl	80077b4 <HAL_DMA_Abort_IT>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d016      	beq.n	800ab54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ab30:	4610      	mov	r0, r2
 800ab32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab34:	e00e      	b.n	800ab54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f9a4 	bl	800ae84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab3c:	e00a      	b.n	800ab54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f9a0 	bl	800ae84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab44:	e006      	b.n	800ab54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f99c 	bl	800ae84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ab52:	e170      	b.n	800ae36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab54:	bf00      	nop
    return;
 800ab56:	e16e      	b.n	800ae36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	f040 814a 	bne.w	800adf6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ab62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab66:	f003 0310 	and.w	r3, r3, #16
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f000 8143 	beq.w	800adf6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ab70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab74:	f003 0310 	and.w	r3, r3, #16
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f000 813c 	beq.w	800adf6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ab7e:	2300      	movs	r3, #0
 800ab80:	60bb      	str	r3, [r7, #8]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	60bb      	str	r3, [r7, #8]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	60bb      	str	r3, [r7, #8]
 800ab92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab9e:	2b40      	cmp	r3, #64	; 0x40
 800aba0:	f040 80b4 	bne.w	800ad0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800abb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 8140 	beq.w	800ae3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800abc2:	429a      	cmp	r2, r3
 800abc4:	f080 8139 	bcs.w	800ae3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800abce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abda:	f000 8088 	beq.w	800acee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	330c      	adds	r3, #12
 800abe4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800abec:	e853 3f00 	ldrex	r3, [r3]
 800abf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800abf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	330c      	adds	r3, #12
 800ac06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ac0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac1a:	e841 2300 	strex	r3, r2, [r1]
 800ac1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ac22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1d9      	bne.n	800abde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3314      	adds	r3, #20
 800ac30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac34:	e853 3f00 	ldrex	r3, [r3]
 800ac38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac3c:	f023 0301 	bic.w	r3, r3, #1
 800ac40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3314      	adds	r3, #20
 800ac4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ac4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ac52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ac56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac5a:	e841 2300 	strex	r3, r2, [r1]
 800ac5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1e1      	bne.n	800ac2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3314      	adds	r3, #20
 800ac6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac70:	e853 3f00 	ldrex	r3, [r3]
 800ac74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3314      	adds	r3, #20
 800ac86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ac8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac92:	e841 2300 	strex	r3, r2, [r1]
 800ac96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1e3      	bne.n	800ac66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2220      	movs	r2, #32
 800aca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	330c      	adds	r3, #12
 800acb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acb6:	e853 3f00 	ldrex	r3, [r3]
 800acba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800acbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acbe:	f023 0310 	bic.w	r3, r3, #16
 800acc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	330c      	adds	r3, #12
 800accc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800acd0:	65ba      	str	r2, [r7, #88]	; 0x58
 800acd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acd8:	e841 2300 	strex	r3, r2, [r1]
 800acdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800acde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1e3      	bne.n	800acac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fc fcf3 	bl	80076d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	4619      	mov	r1, r3
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f8ca 	bl	800ae98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ad04:	e099      	b.n	800ae3a <HAL_UART_IRQHandler+0x50e>
 800ad06:	bf00      	nop
 800ad08:	0800b3a3 	.word	0x0800b3a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 808b 	beq.w	800ae3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ad28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 8086 	beq.w	800ae3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	330c      	adds	r3, #12
 800ad38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	330c      	adds	r3, #12
 800ad52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ad56:	647a      	str	r2, [r7, #68]	; 0x44
 800ad58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad5e:	e841 2300 	strex	r3, r2, [r1]
 800ad62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e3      	bne.n	800ad32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3314      	adds	r3, #20
 800ad70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad74:	e853 3f00 	ldrex	r3, [r3]
 800ad78:	623b      	str	r3, [r7, #32]
   return(result);
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	f023 0301 	bic.w	r3, r3, #1
 800ad80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3314      	adds	r3, #20
 800ad8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ad8e:	633a      	str	r2, [r7, #48]	; 0x30
 800ad90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e3      	bne.n	800ad6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	330c      	adds	r3, #12
 800adb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	e853 3f00 	ldrex	r3, [r3]
 800adbe:	60fb      	str	r3, [r7, #12]
   return(result);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f023 0310 	bic.w	r3, r3, #16
 800adc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	330c      	adds	r3, #12
 800add0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800add4:	61fa      	str	r2, [r7, #28]
 800add6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add8:	69b9      	ldr	r1, [r7, #24]
 800adda:	69fa      	ldr	r2, [r7, #28]
 800addc:	e841 2300 	strex	r3, r2, [r1]
 800ade0:	617b      	str	r3, [r7, #20]
   return(result);
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e3      	bne.n	800adb0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ade8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800adec:	4619      	mov	r1, r3
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 f852 	bl	800ae98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800adf4:	e023      	b.n	800ae3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800adf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d009      	beq.n	800ae16 <HAL_UART_IRQHandler+0x4ea>
 800ae02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fadb 	bl	800b3ca <UART_Transmit_IT>
    return;
 800ae14:	e014      	b.n	800ae40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ae16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00e      	beq.n	800ae40 <HAL_UART_IRQHandler+0x514>
 800ae22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d008      	beq.n	800ae40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fb1b 	bl	800b46a <UART_EndTransmit_IT>
    return;
 800ae34:	e004      	b.n	800ae40 <HAL_UART_IRQHandler+0x514>
    return;
 800ae36:	bf00      	nop
 800ae38:	e002      	b.n	800ae40 <HAL_UART_IRQHandler+0x514>
      return;
 800ae3a:	bf00      	nop
 800ae3c:	e000      	b.n	800ae40 <HAL_UART_IRQHandler+0x514>
      return;
 800ae3e:	bf00      	nop
  }
}
 800ae40:	37e8      	adds	r7, #232	; 0xe8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop

0800ae48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	460b      	mov	r3, r1
 800aea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b090      	sub	sp, #64	; 0x40
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aebc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d137      	bne.n	800af3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800aecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aece:	2200      	movs	r2, #0
 800aed0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3314      	adds	r3, #20
 800aed8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	e853 3f00 	ldrex	r3, [r3]
 800aee0:	623b      	str	r3, [r7, #32]
   return(result);
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aee8:	63bb      	str	r3, [r7, #56]	; 0x38
 800aeea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3314      	adds	r3, #20
 800aef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aef2:	633a      	str	r2, [r7, #48]	; 0x30
 800aef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aefa:	e841 2300 	strex	r3, r2, [r1]
 800aefe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1e5      	bne.n	800aed2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	330c      	adds	r3, #12
 800af0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	e853 3f00 	ldrex	r3, [r3]
 800af14:	60fb      	str	r3, [r7, #12]
   return(result);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af1c:	637b      	str	r3, [r7, #52]	; 0x34
 800af1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	330c      	adds	r3, #12
 800af24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af26:	61fa      	str	r2, [r7, #28]
 800af28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2a:	69b9      	ldr	r1, [r7, #24]
 800af2c:	69fa      	ldr	r2, [r7, #28]
 800af2e:	e841 2300 	strex	r3, r2, [r1]
 800af32:	617b      	str	r3, [r7, #20]
   return(result);
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1e5      	bne.n	800af06 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af3a:	e002      	b.n	800af42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800af3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800af3e:	f7ff ff83 	bl	800ae48 <HAL_UART_TxCpltCallback>
}
 800af42:	bf00      	nop
 800af44:	3740      	adds	r7, #64	; 0x40
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800af58:	68f8      	ldr	r0, [r7, #12]
 800af5a:	f7ff ff7f 	bl	800ae5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af5e:	bf00      	nop
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b09c      	sub	sp, #112	; 0x70
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af72:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d172      	bne.n	800b068 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800af82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af84:	2200      	movs	r2, #0
 800af86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	330c      	adds	r3, #12
 800af8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af92:	e853 3f00 	ldrex	r3, [r3]
 800af96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af9e:	66bb      	str	r3, [r7, #104]	; 0x68
 800afa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	330c      	adds	r3, #12
 800afa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afa8:	65ba      	str	r2, [r7, #88]	; 0x58
 800afaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afb0:	e841 2300 	strex	r3, r2, [r1]
 800afb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800afb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1e5      	bne.n	800af88 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3314      	adds	r3, #20
 800afc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	e853 3f00 	ldrex	r3, [r3]
 800afca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afce:	f023 0301 	bic.w	r3, r3, #1
 800afd2:	667b      	str	r3, [r7, #100]	; 0x64
 800afd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3314      	adds	r3, #20
 800afda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800afdc:	647a      	str	r2, [r7, #68]	; 0x44
 800afde:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afe4:	e841 2300 	strex	r3, r2, [r1]
 800afe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1e5      	bne.n	800afbc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3314      	adds	r3, #20
 800aff6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	e853 3f00 	ldrex	r3, [r3]
 800affe:	623b      	str	r3, [r7, #32]
   return(result);
 800b000:	6a3b      	ldr	r3, [r7, #32]
 800b002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b006:	663b      	str	r3, [r7, #96]	; 0x60
 800b008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3314      	adds	r3, #20
 800b00e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b010:	633a      	str	r2, [r7, #48]	; 0x30
 800b012:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b018:	e841 2300 	strex	r3, r2, [r1]
 800b01c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1e5      	bne.n	800aff0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b026:	2220      	movs	r2, #32
 800b028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b02c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b02e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b030:	2b01      	cmp	r3, #1
 800b032:	d119      	bne.n	800b068 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	330c      	adds	r3, #12
 800b03a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	e853 3f00 	ldrex	r3, [r3]
 800b042:	60fb      	str	r3, [r7, #12]
   return(result);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f023 0310 	bic.w	r3, r3, #16
 800b04a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	330c      	adds	r3, #12
 800b052:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b054:	61fa      	str	r2, [r7, #28]
 800b056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b058:	69b9      	ldr	r1, [r7, #24]
 800b05a:	69fa      	ldr	r2, [r7, #28]
 800b05c:	e841 2300 	strex	r3, r2, [r1]
 800b060:	617b      	str	r3, [r7, #20]
   return(result);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e5      	bne.n	800b034 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d106      	bne.n	800b07e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b072:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b074:	4619      	mov	r1, r3
 800b076:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b078:	f7ff ff0e 	bl	800ae98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b07c:	e002      	b.n	800b084 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b07e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b080:	f7f8 f994 	bl	80033ac <HAL_UART_RxCpltCallback>
}
 800b084:	bf00      	nop
 800b086:	3770      	adds	r7, #112	; 0x70
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b098:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d108      	bne.n	800b0b4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0a6:	085b      	lsrs	r3, r3, #1
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f7ff fef3 	bl	800ae98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0b2:	e002      	b.n	800b0ba <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7ff fedb 	bl	800ae70 <HAL_UART_RxHalfCpltCallback>
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b084      	sub	sp, #16
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	695b      	ldr	r3, [r3, #20]
 800b0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0de:	2b80      	cmp	r3, #128	; 0x80
 800b0e0:	bf0c      	ite	eq
 800b0e2:	2301      	moveq	r3, #1
 800b0e4:	2300      	movne	r3, #0
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b21      	cmp	r3, #33	; 0x21
 800b0f4:	d108      	bne.n	800b108 <UART_DMAError+0x46>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d005      	beq.n	800b108 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2200      	movs	r2, #0
 800b100:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b102:	68b8      	ldr	r0, [r7, #8]
 800b104:	f000 f8c2 	bl	800b28c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b112:	2b40      	cmp	r3, #64	; 0x40
 800b114:	bf0c      	ite	eq
 800b116:	2301      	moveq	r3, #1
 800b118:	2300      	movne	r3, #0
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b22      	cmp	r3, #34	; 0x22
 800b128:	d108      	bne.n	800b13c <UART_DMAError+0x7a>
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d005      	beq.n	800b13c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2200      	movs	r2, #0
 800b134:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b136:	68b8      	ldr	r0, [r7, #8]
 800b138:	f000 f8d0 	bl	800b2dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b140:	f043 0210 	orr.w	r2, r3, #16
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b148:	68b8      	ldr	r0, [r7, #8]
 800b14a:	f7ff fe9b 	bl	800ae84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b14e:	bf00      	nop
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b098      	sub	sp, #96	; 0x60
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	4613      	mov	r3, r2
 800b164:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	88fa      	ldrh	r2, [r7, #6]
 800b170:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2222      	movs	r2, #34	; 0x22
 800b17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b184:	4a3e      	ldr	r2, [pc, #248]	; (800b280 <UART_Start_Receive_DMA+0x128>)
 800b186:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18c:	4a3d      	ldr	r2, [pc, #244]	; (800b284 <UART_Start_Receive_DMA+0x12c>)
 800b18e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b194:	4a3c      	ldr	r2, [pc, #240]	; (800b288 <UART_Start_Receive_DMA+0x130>)
 800b196:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b19c:	2200      	movs	r2, #0
 800b19e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b1a0:	f107 0308 	add.w	r3, r7, #8
 800b1a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	88fb      	ldrh	r3, [r7, #6]
 800b1b8:	f7fc fa34 	bl	8007624 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b1bc:	2300      	movs	r3, #0
 800b1be:	613b      	str	r3, [r7, #16]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	613b      	str	r3, [r7, #16]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	613b      	str	r3, [r7, #16]
 800b1d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	330c      	adds	r3, #12
 800b1e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1e4:	e853 3f00 	ldrex	r3, [r3]
 800b1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	330c      	adds	r3, #12
 800b1f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b1fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b200:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b202:	e841 2300 	strex	r3, r2, [r1]
 800b206:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1e5      	bne.n	800b1da <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	3314      	adds	r3, #20
 800b214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	f043 0301 	orr.w	r3, r3, #1
 800b224:	657b      	str	r3, [r7, #84]	; 0x54
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3314      	adds	r3, #20
 800b22c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b22e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b230:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b232:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b236:	e841 2300 	strex	r3, r2, [r1]
 800b23a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1e5      	bne.n	800b20e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3314      	adds	r3, #20
 800b248:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	e853 3f00 	ldrex	r3, [r3]
 800b250:	617b      	str	r3, [r7, #20]
   return(result);
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b258:	653b      	str	r3, [r7, #80]	; 0x50
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3314      	adds	r3, #20
 800b260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b262:	627a      	str	r2, [r7, #36]	; 0x24
 800b264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b266:	6a39      	ldr	r1, [r7, #32]
 800b268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b26a:	e841 2300 	strex	r3, r2, [r1]
 800b26e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1e5      	bne.n	800b242 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3760      	adds	r7, #96	; 0x60
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	0800af67 	.word	0x0800af67
 800b284:	0800b08d 	.word	0x0800b08d
 800b288:	0800b0c3 	.word	0x0800b0c3

0800b28c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b089      	sub	sp, #36	; 0x24
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	330c      	adds	r3, #12
 800b29a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	e853 3f00 	ldrex	r3, [r3]
 800b2a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b2aa:	61fb      	str	r3, [r7, #28]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	330c      	adds	r3, #12
 800b2b2:	69fa      	ldr	r2, [r7, #28]
 800b2b4:	61ba      	str	r2, [r7, #24]
 800b2b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b8:	6979      	ldr	r1, [r7, #20]
 800b2ba:	69ba      	ldr	r2, [r7, #24]
 800b2bc:	e841 2300 	strex	r3, r2, [r1]
 800b2c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1e5      	bne.n	800b294 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2220      	movs	r2, #32
 800b2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b2d0:	bf00      	nop
 800b2d2:	3724      	adds	r7, #36	; 0x24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b095      	sub	sp, #84	; 0x54
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	330c      	adds	r3, #12
 800b2ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ee:	e853 3f00 	ldrex	r3, [r3]
 800b2f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	330c      	adds	r3, #12
 800b302:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b304:	643a      	str	r2, [r7, #64]	; 0x40
 800b306:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b308:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b30a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b30c:	e841 2300 	strex	r3, r2, [r1]
 800b310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e5      	bne.n	800b2e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3314      	adds	r3, #20
 800b31e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b320:	6a3b      	ldr	r3, [r7, #32]
 800b322:	e853 3f00 	ldrex	r3, [r3]
 800b326:	61fb      	str	r3, [r7, #28]
   return(result);
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	f023 0301 	bic.w	r3, r3, #1
 800b32e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3314      	adds	r3, #20
 800b336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b338:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b33a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b33e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b340:	e841 2300 	strex	r3, r2, [r1]
 800b344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1e5      	bne.n	800b318 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b350:	2b01      	cmp	r3, #1
 800b352:	d119      	bne.n	800b388 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	330c      	adds	r3, #12
 800b35a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	e853 3f00 	ldrex	r3, [r3]
 800b362:	60bb      	str	r3, [r7, #8]
   return(result);
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	f023 0310 	bic.w	r3, r3, #16
 800b36a:	647b      	str	r3, [r7, #68]	; 0x44
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	330c      	adds	r3, #12
 800b372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b374:	61ba      	str	r2, [r7, #24]
 800b376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b378:	6979      	ldr	r1, [r7, #20]
 800b37a:	69ba      	ldr	r2, [r7, #24]
 800b37c:	e841 2300 	strex	r3, r2, [r1]
 800b380:	613b      	str	r3, [r7, #16]
   return(result);
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1e5      	bne.n	800b354 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2220      	movs	r2, #32
 800b38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b396:	bf00      	nop
 800b398:	3754      	adds	r7, #84	; 0x54
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f7ff fd61 	bl	800ae84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3c2:	bf00      	nop
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b085      	sub	sp, #20
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b21      	cmp	r3, #33	; 0x21
 800b3dc:	d13e      	bne.n	800b45c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e6:	d114      	bne.n	800b412 <UART_Transmit_IT+0x48>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d110      	bne.n	800b412 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a1b      	ldr	r3, [r3, #32]
 800b3f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	881b      	ldrh	r3, [r3, #0]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b404:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a1b      	ldr	r3, [r3, #32]
 800b40a:	1c9a      	adds	r2, r3, #2
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	621a      	str	r2, [r3, #32]
 800b410:	e008      	b.n	800b424 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	1c59      	adds	r1, r3, #1
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	6211      	str	r1, [r2, #32]
 800b41c:	781a      	ldrb	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b428:	b29b      	uxth	r3, r3
 800b42a:	3b01      	subs	r3, #1
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	4619      	mov	r1, r3
 800b432:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b434:	2b00      	cmp	r3, #0
 800b436:	d10f      	bne.n	800b458 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68da      	ldr	r2, [r3, #12]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b446:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68da      	ldr	r2, [r3, #12]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b456:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b458:	2300      	movs	r3, #0
 800b45a:	e000      	b.n	800b45e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b45c:	2302      	movs	r3, #2
  }
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3714      	adds	r7, #20
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr

0800b46a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b082      	sub	sp, #8
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68da      	ldr	r2, [r3, #12]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b480:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2220      	movs	r2, #32
 800b486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff fcdc 	bl	800ae48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b08c      	sub	sp, #48	; 0x30
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b22      	cmp	r3, #34	; 0x22
 800b4ac:	f040 80ab 	bne.w	800b606 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b8:	d117      	bne.n	800b4ea <UART_Receive_IT+0x50>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d113      	bne.n	800b4ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e2:	1c9a      	adds	r2, r3, #2
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	629a      	str	r2, [r3, #40]	; 0x28
 800b4e8:	e026      	b.n	800b538 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4fc:	d007      	beq.n	800b50e <UART_Receive_IT+0x74>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d10a      	bne.n	800b51c <UART_Receive_IT+0x82>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	b2da      	uxtb	r2, r3
 800b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b518:	701a      	strb	r2, [r3, #0]
 800b51a:	e008      	b.n	800b52e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b532:	1c5a      	adds	r2, r3, #1
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	3b01      	subs	r3, #1
 800b540:	b29b      	uxth	r3, r3
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	4619      	mov	r1, r3
 800b546:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d15a      	bne.n	800b602 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68da      	ldr	r2, [r3, #12]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f022 0220 	bic.w	r2, r2, #32
 800b55a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68da      	ldr	r2, [r3, #12]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b56a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	695a      	ldr	r2, [r3, #20]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f022 0201 	bic.w	r2, r2, #1
 800b57a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2220      	movs	r2, #32
 800b580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d135      	bne.n	800b5f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	330c      	adds	r3, #12
 800b598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	e853 3f00 	ldrex	r3, [r3]
 800b5a0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	f023 0310 	bic.w	r3, r3, #16
 800b5a8:	627b      	str	r3, [r7, #36]	; 0x24
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	330c      	adds	r3, #12
 800b5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5b2:	623a      	str	r2, [r7, #32]
 800b5b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b6:	69f9      	ldr	r1, [r7, #28]
 800b5b8:	6a3a      	ldr	r2, [r7, #32]
 800b5ba:	e841 2300 	strex	r3, r2, [r1]
 800b5be:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1e5      	bne.n	800b592 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 0310 	and.w	r3, r3, #16
 800b5d0:	2b10      	cmp	r3, #16
 800b5d2:	d10a      	bne.n	800b5ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f7ff fc51 	bl	800ae98 <HAL_UARTEx_RxEventCallback>
 800b5f6:	e002      	b.n	800b5fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f7f7 fed7 	bl	80033ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b5fe:	2300      	movs	r3, #0
 800b600:	e002      	b.n	800b608 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b602:	2300      	movs	r3, #0
 800b604:	e000      	b.n	800b608 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b606:	2302      	movs	r3, #2
  }
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3730      	adds	r7, #48	; 0x30
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b614:	b09f      	sub	sp, #124	; 0x7c
 800b616:	af00      	add	r7, sp, #0
 800b618:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b61a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b626:	68d9      	ldr	r1, [r3, #12]
 800b628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	ea40 0301 	orr.w	r3, r0, r1
 800b630:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b634:	689a      	ldr	r2, [r3, #8]
 800b636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	431a      	orrs	r2, r3
 800b63c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	431a      	orrs	r2, r3
 800b642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	4313      	orrs	r3, r2
 800b648:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b64a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b654:	f021 010c 	bic.w	r1, r1, #12
 800b658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b65e:	430b      	orrs	r3, r1
 800b660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	695b      	ldr	r3, [r3, #20]
 800b668:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b66c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b66e:	6999      	ldr	r1, [r3, #24]
 800b670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	ea40 0301 	orr.w	r3, r0, r1
 800b678:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b67a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	4bc5      	ldr	r3, [pc, #788]	; (800b994 <UART_SetConfig+0x384>)
 800b680:	429a      	cmp	r2, r3
 800b682:	d004      	beq.n	800b68e <UART_SetConfig+0x7e>
 800b684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	4bc3      	ldr	r3, [pc, #780]	; (800b998 <UART_SetConfig+0x388>)
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d103      	bne.n	800b696 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b68e:	f7fd f965 	bl	800895c <HAL_RCC_GetPCLK2Freq>
 800b692:	6778      	str	r0, [r7, #116]	; 0x74
 800b694:	e002      	b.n	800b69c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b696:	f7fd f94d 	bl	8008934 <HAL_RCC_GetPCLK1Freq>
 800b69a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b69c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b69e:	69db      	ldr	r3, [r3, #28]
 800b6a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6a4:	f040 80b6 	bne.w	800b814 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b6a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6aa:	461c      	mov	r4, r3
 800b6ac:	f04f 0500 	mov.w	r5, #0
 800b6b0:	4622      	mov	r2, r4
 800b6b2:	462b      	mov	r3, r5
 800b6b4:	1891      	adds	r1, r2, r2
 800b6b6:	6439      	str	r1, [r7, #64]	; 0x40
 800b6b8:	415b      	adcs	r3, r3
 800b6ba:	647b      	str	r3, [r7, #68]	; 0x44
 800b6bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b6c0:	1912      	adds	r2, r2, r4
 800b6c2:	eb45 0303 	adc.w	r3, r5, r3
 800b6c6:	f04f 0000 	mov.w	r0, #0
 800b6ca:	f04f 0100 	mov.w	r1, #0
 800b6ce:	00d9      	lsls	r1, r3, #3
 800b6d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b6d4:	00d0      	lsls	r0, r2, #3
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	460b      	mov	r3, r1
 800b6da:	1911      	adds	r1, r2, r4
 800b6dc:	6639      	str	r1, [r7, #96]	; 0x60
 800b6de:	416b      	adcs	r3, r5
 800b6e0:	667b      	str	r3, [r7, #100]	; 0x64
 800b6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	f04f 0300 	mov.w	r3, #0
 800b6ec:	1891      	adds	r1, r2, r2
 800b6ee:	63b9      	str	r1, [r7, #56]	; 0x38
 800b6f0:	415b      	adcs	r3, r3
 800b6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b6f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b6fc:	f7f5 fa5e 	bl	8000bbc <__aeabi_uldivmod>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4ba5      	ldr	r3, [pc, #660]	; (800b99c <UART_SetConfig+0x38c>)
 800b706:	fba3 2302 	umull	r2, r3, r3, r2
 800b70a:	095b      	lsrs	r3, r3, #5
 800b70c:	011e      	lsls	r6, r3, #4
 800b70e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b710:	461c      	mov	r4, r3
 800b712:	f04f 0500 	mov.w	r5, #0
 800b716:	4622      	mov	r2, r4
 800b718:	462b      	mov	r3, r5
 800b71a:	1891      	adds	r1, r2, r2
 800b71c:	6339      	str	r1, [r7, #48]	; 0x30
 800b71e:	415b      	adcs	r3, r3
 800b720:	637b      	str	r3, [r7, #52]	; 0x34
 800b722:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b726:	1912      	adds	r2, r2, r4
 800b728:	eb45 0303 	adc.w	r3, r5, r3
 800b72c:	f04f 0000 	mov.w	r0, #0
 800b730:	f04f 0100 	mov.w	r1, #0
 800b734:	00d9      	lsls	r1, r3, #3
 800b736:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b73a:	00d0      	lsls	r0, r2, #3
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	1911      	adds	r1, r2, r4
 800b742:	65b9      	str	r1, [r7, #88]	; 0x58
 800b744:	416b      	adcs	r3, r5
 800b746:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	461a      	mov	r2, r3
 800b74e:	f04f 0300 	mov.w	r3, #0
 800b752:	1891      	adds	r1, r2, r2
 800b754:	62b9      	str	r1, [r7, #40]	; 0x28
 800b756:	415b      	adcs	r3, r3
 800b758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b75a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b75e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b762:	f7f5 fa2b 	bl	8000bbc <__aeabi_uldivmod>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	4b8c      	ldr	r3, [pc, #560]	; (800b99c <UART_SetConfig+0x38c>)
 800b76c:	fba3 1302 	umull	r1, r3, r3, r2
 800b770:	095b      	lsrs	r3, r3, #5
 800b772:	2164      	movs	r1, #100	; 0x64
 800b774:	fb01 f303 	mul.w	r3, r1, r3
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	3332      	adds	r3, #50	; 0x32
 800b77e:	4a87      	ldr	r2, [pc, #540]	; (800b99c <UART_SetConfig+0x38c>)
 800b780:	fba2 2303 	umull	r2, r3, r2, r3
 800b784:	095b      	lsrs	r3, r3, #5
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b78c:	441e      	add	r6, r3
 800b78e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b790:	4618      	mov	r0, r3
 800b792:	f04f 0100 	mov.w	r1, #0
 800b796:	4602      	mov	r2, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	1894      	adds	r4, r2, r2
 800b79c:	623c      	str	r4, [r7, #32]
 800b79e:	415b      	adcs	r3, r3
 800b7a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b7a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b7a6:	1812      	adds	r2, r2, r0
 800b7a8:	eb41 0303 	adc.w	r3, r1, r3
 800b7ac:	f04f 0400 	mov.w	r4, #0
 800b7b0:	f04f 0500 	mov.w	r5, #0
 800b7b4:	00dd      	lsls	r5, r3, #3
 800b7b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b7ba:	00d4      	lsls	r4, r2, #3
 800b7bc:	4622      	mov	r2, r4
 800b7be:	462b      	mov	r3, r5
 800b7c0:	1814      	adds	r4, r2, r0
 800b7c2:	653c      	str	r4, [r7, #80]	; 0x50
 800b7c4:	414b      	adcs	r3, r1
 800b7c6:	657b      	str	r3, [r7, #84]	; 0x54
 800b7c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	f04f 0300 	mov.w	r3, #0
 800b7d2:	1891      	adds	r1, r2, r2
 800b7d4:	61b9      	str	r1, [r7, #24]
 800b7d6:	415b      	adcs	r3, r3
 800b7d8:	61fb      	str	r3, [r7, #28]
 800b7da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b7e2:	f7f5 f9eb 	bl	8000bbc <__aeabi_uldivmod>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4b6c      	ldr	r3, [pc, #432]	; (800b99c <UART_SetConfig+0x38c>)
 800b7ec:	fba3 1302 	umull	r1, r3, r3, r2
 800b7f0:	095b      	lsrs	r3, r3, #5
 800b7f2:	2164      	movs	r1, #100	; 0x64
 800b7f4:	fb01 f303 	mul.w	r3, r1, r3
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	3332      	adds	r3, #50	; 0x32
 800b7fe:	4a67      	ldr	r2, [pc, #412]	; (800b99c <UART_SetConfig+0x38c>)
 800b800:	fba2 2303 	umull	r2, r3, r2, r3
 800b804:	095b      	lsrs	r3, r3, #5
 800b806:	f003 0207 	and.w	r2, r3, #7
 800b80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4432      	add	r2, r6
 800b810:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b812:	e0b9      	b.n	800b988 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b816:	461c      	mov	r4, r3
 800b818:	f04f 0500 	mov.w	r5, #0
 800b81c:	4622      	mov	r2, r4
 800b81e:	462b      	mov	r3, r5
 800b820:	1891      	adds	r1, r2, r2
 800b822:	6139      	str	r1, [r7, #16]
 800b824:	415b      	adcs	r3, r3
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b82c:	1912      	adds	r2, r2, r4
 800b82e:	eb45 0303 	adc.w	r3, r5, r3
 800b832:	f04f 0000 	mov.w	r0, #0
 800b836:	f04f 0100 	mov.w	r1, #0
 800b83a:	00d9      	lsls	r1, r3, #3
 800b83c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b840:	00d0      	lsls	r0, r2, #3
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	eb12 0804 	adds.w	r8, r2, r4
 800b84a:	eb43 0905 	adc.w	r9, r3, r5
 800b84e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	4618      	mov	r0, r3
 800b854:	f04f 0100 	mov.w	r1, #0
 800b858:	f04f 0200 	mov.w	r2, #0
 800b85c:	f04f 0300 	mov.w	r3, #0
 800b860:	008b      	lsls	r3, r1, #2
 800b862:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b866:	0082      	lsls	r2, r0, #2
 800b868:	4640      	mov	r0, r8
 800b86a:	4649      	mov	r1, r9
 800b86c:	f7f5 f9a6 	bl	8000bbc <__aeabi_uldivmod>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4b49      	ldr	r3, [pc, #292]	; (800b99c <UART_SetConfig+0x38c>)
 800b876:	fba3 2302 	umull	r2, r3, r3, r2
 800b87a:	095b      	lsrs	r3, r3, #5
 800b87c:	011e      	lsls	r6, r3, #4
 800b87e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b880:	4618      	mov	r0, r3
 800b882:	f04f 0100 	mov.w	r1, #0
 800b886:	4602      	mov	r2, r0
 800b888:	460b      	mov	r3, r1
 800b88a:	1894      	adds	r4, r2, r2
 800b88c:	60bc      	str	r4, [r7, #8]
 800b88e:	415b      	adcs	r3, r3
 800b890:	60fb      	str	r3, [r7, #12]
 800b892:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b896:	1812      	adds	r2, r2, r0
 800b898:	eb41 0303 	adc.w	r3, r1, r3
 800b89c:	f04f 0400 	mov.w	r4, #0
 800b8a0:	f04f 0500 	mov.w	r5, #0
 800b8a4:	00dd      	lsls	r5, r3, #3
 800b8a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b8aa:	00d4      	lsls	r4, r2, #3
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	462b      	mov	r3, r5
 800b8b0:	1814      	adds	r4, r2, r0
 800b8b2:	64bc      	str	r4, [r7, #72]	; 0x48
 800b8b4:	414b      	adcs	r3, r1
 800b8b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f04f 0100 	mov.w	r1, #0
 800b8c2:	f04f 0200 	mov.w	r2, #0
 800b8c6:	f04f 0300 	mov.w	r3, #0
 800b8ca:	008b      	lsls	r3, r1, #2
 800b8cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b8d0:	0082      	lsls	r2, r0, #2
 800b8d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b8d6:	f7f5 f971 	bl	8000bbc <__aeabi_uldivmod>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4b2f      	ldr	r3, [pc, #188]	; (800b99c <UART_SetConfig+0x38c>)
 800b8e0:	fba3 1302 	umull	r1, r3, r3, r2
 800b8e4:	095b      	lsrs	r3, r3, #5
 800b8e6:	2164      	movs	r1, #100	; 0x64
 800b8e8:	fb01 f303 	mul.w	r3, r1, r3
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	3332      	adds	r3, #50	; 0x32
 800b8f2:	4a2a      	ldr	r2, [pc, #168]	; (800b99c <UART_SetConfig+0x38c>)
 800b8f4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f8:	095b      	lsrs	r3, r3, #5
 800b8fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8fe:	441e      	add	r6, r3
 800b900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b902:	4618      	mov	r0, r3
 800b904:	f04f 0100 	mov.w	r1, #0
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	1894      	adds	r4, r2, r2
 800b90e:	603c      	str	r4, [r7, #0]
 800b910:	415b      	adcs	r3, r3
 800b912:	607b      	str	r3, [r7, #4]
 800b914:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b918:	1812      	adds	r2, r2, r0
 800b91a:	eb41 0303 	adc.w	r3, r1, r3
 800b91e:	f04f 0400 	mov.w	r4, #0
 800b922:	f04f 0500 	mov.w	r5, #0
 800b926:	00dd      	lsls	r5, r3, #3
 800b928:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b92c:	00d4      	lsls	r4, r2, #3
 800b92e:	4622      	mov	r2, r4
 800b930:	462b      	mov	r3, r5
 800b932:	eb12 0a00 	adds.w	sl, r2, r0
 800b936:	eb43 0b01 	adc.w	fp, r3, r1
 800b93a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	4618      	mov	r0, r3
 800b940:	f04f 0100 	mov.w	r1, #0
 800b944:	f04f 0200 	mov.w	r2, #0
 800b948:	f04f 0300 	mov.w	r3, #0
 800b94c:	008b      	lsls	r3, r1, #2
 800b94e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b952:	0082      	lsls	r2, r0, #2
 800b954:	4650      	mov	r0, sl
 800b956:	4659      	mov	r1, fp
 800b958:	f7f5 f930 	bl	8000bbc <__aeabi_uldivmod>
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	4b0e      	ldr	r3, [pc, #56]	; (800b99c <UART_SetConfig+0x38c>)
 800b962:	fba3 1302 	umull	r1, r3, r3, r2
 800b966:	095b      	lsrs	r3, r3, #5
 800b968:	2164      	movs	r1, #100	; 0x64
 800b96a:	fb01 f303 	mul.w	r3, r1, r3
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	011b      	lsls	r3, r3, #4
 800b972:	3332      	adds	r3, #50	; 0x32
 800b974:	4a09      	ldr	r2, [pc, #36]	; (800b99c <UART_SetConfig+0x38c>)
 800b976:	fba2 2303 	umull	r2, r3, r2, r3
 800b97a:	095b      	lsrs	r3, r3, #5
 800b97c:	f003 020f 	and.w	r2, r3, #15
 800b980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4432      	add	r2, r6
 800b986:	609a      	str	r2, [r3, #8]
}
 800b988:	bf00      	nop
 800b98a:	377c      	adds	r7, #124	; 0x7c
 800b98c:	46bd      	mov	sp, r7
 800b98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b992:	bf00      	nop
 800b994:	40011000 	.word	0x40011000
 800b998:	40011400 	.word	0x40011400
 800b99c:	51eb851f 	.word	0x51eb851f

0800b9a0 <cosf>:
 800b9a0:	ee10 3a10 	vmov	r3, s0
 800b9a4:	b507      	push	{r0, r1, r2, lr}
 800b9a6:	4a1c      	ldr	r2, [pc, #112]	; (800ba18 <cosf+0x78>)
 800b9a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	dc04      	bgt.n	800b9ba <cosf+0x1a>
 800b9b0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800ba1c <cosf+0x7c>
 800b9b4:	f000 fbbc 	bl	800c130 <__kernel_cosf>
 800b9b8:	e004      	b.n	800b9c4 <cosf+0x24>
 800b9ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b9be:	db04      	blt.n	800b9ca <cosf+0x2a>
 800b9c0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b9c4:	b003      	add	sp, #12
 800b9c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9ca:	4668      	mov	r0, sp
 800b9cc:	f000 fa70 	bl	800beb0 <__ieee754_rem_pio2f>
 800b9d0:	f000 0003 	and.w	r0, r0, #3
 800b9d4:	2801      	cmp	r0, #1
 800b9d6:	d007      	beq.n	800b9e8 <cosf+0x48>
 800b9d8:	2802      	cmp	r0, #2
 800b9da:	d00e      	beq.n	800b9fa <cosf+0x5a>
 800b9dc:	b9a0      	cbnz	r0, 800ba08 <cosf+0x68>
 800b9de:	eddd 0a01 	vldr	s1, [sp, #4]
 800b9e2:	ed9d 0a00 	vldr	s0, [sp]
 800b9e6:	e7e5      	b.n	800b9b4 <cosf+0x14>
 800b9e8:	eddd 0a01 	vldr	s1, [sp, #4]
 800b9ec:	ed9d 0a00 	vldr	s0, [sp]
 800b9f0:	f000 fe88 	bl	800c704 <__kernel_sinf>
 800b9f4:	eeb1 0a40 	vneg.f32	s0, s0
 800b9f8:	e7e4      	b.n	800b9c4 <cosf+0x24>
 800b9fa:	eddd 0a01 	vldr	s1, [sp, #4]
 800b9fe:	ed9d 0a00 	vldr	s0, [sp]
 800ba02:	f000 fb95 	bl	800c130 <__kernel_cosf>
 800ba06:	e7f5      	b.n	800b9f4 <cosf+0x54>
 800ba08:	eddd 0a01 	vldr	s1, [sp, #4]
 800ba0c:	ed9d 0a00 	vldr	s0, [sp]
 800ba10:	2001      	movs	r0, #1
 800ba12:	f000 fe77 	bl	800c704 <__kernel_sinf>
 800ba16:	e7d5      	b.n	800b9c4 <cosf+0x24>
 800ba18:	3f490fd8 	.word	0x3f490fd8
 800ba1c:	00000000 	.word	0x00000000

0800ba20 <roundf>:
 800ba20:	ee10 0a10 	vmov	r0, s0
 800ba24:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ba28:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800ba2c:	2a16      	cmp	r2, #22
 800ba2e:	dc15      	bgt.n	800ba5c <roundf+0x3c>
 800ba30:	2a00      	cmp	r2, #0
 800ba32:	da08      	bge.n	800ba46 <roundf+0x26>
 800ba34:	3201      	adds	r2, #1
 800ba36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ba3a:	d101      	bne.n	800ba40 <roundf+0x20>
 800ba3c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800ba40:	ee00 3a10 	vmov	s0, r3
 800ba44:	4770      	bx	lr
 800ba46:	4908      	ldr	r1, [pc, #32]	; (800ba68 <roundf+0x48>)
 800ba48:	4111      	asrs	r1, r2
 800ba4a:	4208      	tst	r0, r1
 800ba4c:	d0fa      	beq.n	800ba44 <roundf+0x24>
 800ba4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ba52:	4113      	asrs	r3, r2
 800ba54:	4403      	add	r3, r0
 800ba56:	ea23 0301 	bic.w	r3, r3, r1
 800ba5a:	e7f1      	b.n	800ba40 <roundf+0x20>
 800ba5c:	2a80      	cmp	r2, #128	; 0x80
 800ba5e:	d1f1      	bne.n	800ba44 <roundf+0x24>
 800ba60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	007fffff 	.word	0x007fffff

0800ba6c <sinf>:
 800ba6c:	ee10 3a10 	vmov	r3, s0
 800ba70:	b507      	push	{r0, r1, r2, lr}
 800ba72:	4a1d      	ldr	r2, [pc, #116]	; (800bae8 <sinf+0x7c>)
 800ba74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	dc05      	bgt.n	800ba88 <sinf+0x1c>
 800ba7c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800baec <sinf+0x80>
 800ba80:	2000      	movs	r0, #0
 800ba82:	f000 fe3f 	bl	800c704 <__kernel_sinf>
 800ba86:	e004      	b.n	800ba92 <sinf+0x26>
 800ba88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ba8c:	db04      	blt.n	800ba98 <sinf+0x2c>
 800ba8e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ba92:	b003      	add	sp, #12
 800ba94:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba98:	4668      	mov	r0, sp
 800ba9a:	f000 fa09 	bl	800beb0 <__ieee754_rem_pio2f>
 800ba9e:	f000 0003 	and.w	r0, r0, #3
 800baa2:	2801      	cmp	r0, #1
 800baa4:	d008      	beq.n	800bab8 <sinf+0x4c>
 800baa6:	2802      	cmp	r0, #2
 800baa8:	d00d      	beq.n	800bac6 <sinf+0x5a>
 800baaa:	b9b0      	cbnz	r0, 800bada <sinf+0x6e>
 800baac:	eddd 0a01 	vldr	s1, [sp, #4]
 800bab0:	ed9d 0a00 	vldr	s0, [sp]
 800bab4:	2001      	movs	r0, #1
 800bab6:	e7e4      	b.n	800ba82 <sinf+0x16>
 800bab8:	eddd 0a01 	vldr	s1, [sp, #4]
 800babc:	ed9d 0a00 	vldr	s0, [sp]
 800bac0:	f000 fb36 	bl	800c130 <__kernel_cosf>
 800bac4:	e7e5      	b.n	800ba92 <sinf+0x26>
 800bac6:	eddd 0a01 	vldr	s1, [sp, #4]
 800baca:	ed9d 0a00 	vldr	s0, [sp]
 800bace:	2001      	movs	r0, #1
 800bad0:	f000 fe18 	bl	800c704 <__kernel_sinf>
 800bad4:	eeb1 0a40 	vneg.f32	s0, s0
 800bad8:	e7db      	b.n	800ba92 <sinf+0x26>
 800bada:	eddd 0a01 	vldr	s1, [sp, #4]
 800bade:	ed9d 0a00 	vldr	s0, [sp]
 800bae2:	f000 fb25 	bl	800c130 <__kernel_cosf>
 800bae6:	e7f5      	b.n	800bad4 <sinf+0x68>
 800bae8:	3f490fd8 	.word	0x3f490fd8
 800baec:	00000000 	.word	0x00000000

0800baf0 <asinf>:
 800baf0:	b508      	push	{r3, lr}
 800baf2:	ed2d 8b02 	vpush	{d8}
 800baf6:	eeb0 8a40 	vmov.f32	s16, s0
 800bafa:	f000 f853 	bl	800bba4 <__ieee754_asinf>
 800bafe:	4b13      	ldr	r3, [pc, #76]	; (800bb4c <asinf+0x5c>)
 800bb00:	f993 3000 	ldrsb.w	r3, [r3]
 800bb04:	3301      	adds	r3, #1
 800bb06:	eef0 8a40 	vmov.f32	s17, s0
 800bb0a:	d01a      	beq.n	800bb42 <asinf+0x52>
 800bb0c:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb14:	d615      	bvs.n	800bb42 <asinf+0x52>
 800bb16:	eeb0 0a48 	vmov.f32	s0, s16
 800bb1a:	f000 ff0f 	bl	800c93c <fabsf>
 800bb1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bb22:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb2a:	dd0a      	ble.n	800bb42 <asinf+0x52>
 800bb2c:	f000 ffc8 	bl	800cac0 <__errno>
 800bb30:	ecbd 8b02 	vpop	{d8}
 800bb34:	2321      	movs	r3, #33	; 0x21
 800bb36:	6003      	str	r3, [r0, #0]
 800bb38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bb3c:	4804      	ldr	r0, [pc, #16]	; (800bb50 <asinf+0x60>)
 800bb3e:	f000 bf47 	b.w	800c9d0 <nanf>
 800bb42:	eeb0 0a68 	vmov.f32	s0, s17
 800bb46:	ecbd 8b02 	vpop	{d8}
 800bb4a:	bd08      	pop	{r3, pc}
 800bb4c:	20000029 	.word	0x20000029
 800bb50:	0800e041 	.word	0x0800e041

0800bb54 <atan2f>:
 800bb54:	f000 b90c 	b.w	800bd70 <__ieee754_atan2f>

0800bb58 <sqrtf>:
 800bb58:	b508      	push	{r3, lr}
 800bb5a:	ed2d 8b02 	vpush	{d8}
 800bb5e:	eeb0 8a40 	vmov.f32	s16, s0
 800bb62:	f000 fae1 	bl	800c128 <__ieee754_sqrtf>
 800bb66:	4b0d      	ldr	r3, [pc, #52]	; (800bb9c <sqrtf+0x44>)
 800bb68:	f993 3000 	ldrsb.w	r3, [r3]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	d011      	beq.n	800bb94 <sqrtf+0x3c>
 800bb70:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb78:	d60c      	bvs.n	800bb94 <sqrtf+0x3c>
 800bb7a:	eddf 8a09 	vldr	s17, [pc, #36]	; 800bba0 <sqrtf+0x48>
 800bb7e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb86:	d505      	bpl.n	800bb94 <sqrtf+0x3c>
 800bb88:	f000 ff9a 	bl	800cac0 <__errno>
 800bb8c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bb90:	2321      	movs	r3, #33	; 0x21
 800bb92:	6003      	str	r3, [r0, #0]
 800bb94:	ecbd 8b02 	vpop	{d8}
 800bb98:	bd08      	pop	{r3, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20000029 	.word	0x20000029
 800bba0:	00000000 	.word	0x00000000

0800bba4 <__ieee754_asinf>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	ee10 5a10 	vmov	r5, s0
 800bbaa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800bbae:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800bbb2:	ed2d 8b04 	vpush	{d8-d9}
 800bbb6:	d10c      	bne.n	800bbd2 <__ieee754_asinf+0x2e>
 800bbb8:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800bd30 <__ieee754_asinf+0x18c>
 800bbbc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800bd34 <__ieee754_asinf+0x190>
 800bbc0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bbc4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bbc8:	eeb0 0a67 	vmov.f32	s0, s15
 800bbcc:	ecbd 8b04 	vpop	{d8-d9}
 800bbd0:	bd38      	pop	{r3, r4, r5, pc}
 800bbd2:	dd04      	ble.n	800bbde <__ieee754_asinf+0x3a>
 800bbd4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bbd8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bbdc:	e7f6      	b.n	800bbcc <__ieee754_asinf+0x28>
 800bbde:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800bbe2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800bbe6:	da0b      	bge.n	800bc00 <__ieee754_asinf+0x5c>
 800bbe8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800bbec:	da52      	bge.n	800bc94 <__ieee754_asinf+0xf0>
 800bbee:	eddf 7a52 	vldr	s15, [pc, #328]	; 800bd38 <__ieee754_asinf+0x194>
 800bbf2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bbf6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800bbfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbfe:	dce5      	bgt.n	800bbcc <__ieee754_asinf+0x28>
 800bc00:	f000 fe9c 	bl	800c93c <fabsf>
 800bc04:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800bc08:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800bc0c:	ee20 8a08 	vmul.f32	s16, s0, s16
 800bc10:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800bd3c <__ieee754_asinf+0x198>
 800bc14:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800bd40 <__ieee754_asinf+0x19c>
 800bc18:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800bd44 <__ieee754_asinf+0x1a0>
 800bc1c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800bc20:	eddf 7a49 	vldr	s15, [pc, #292]	; 800bd48 <__ieee754_asinf+0x1a4>
 800bc24:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bc28:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800bd4c <__ieee754_asinf+0x1a8>
 800bc2c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800bc30:	eddf 7a47 	vldr	s15, [pc, #284]	; 800bd50 <__ieee754_asinf+0x1ac>
 800bc34:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bc38:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800bd54 <__ieee754_asinf+0x1b0>
 800bc3c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800bc40:	eddf 7a45 	vldr	s15, [pc, #276]	; 800bd58 <__ieee754_asinf+0x1b4>
 800bc44:	eee8 7a07 	vfma.f32	s15, s16, s14
 800bc48:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800bd5c <__ieee754_asinf+0x1b8>
 800bc4c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800bc50:	eddf 7a43 	vldr	s15, [pc, #268]	; 800bd60 <__ieee754_asinf+0x1bc>
 800bc54:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bc58:	eeb0 0a48 	vmov.f32	s0, s16
 800bc5c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800bc60:	f000 fa62 	bl	800c128 <__ieee754_sqrtf>
 800bc64:	4b3f      	ldr	r3, [pc, #252]	; (800bd64 <__ieee754_asinf+0x1c0>)
 800bc66:	ee29 9a08 	vmul.f32	s18, s18, s16
 800bc6a:	429c      	cmp	r4, r3
 800bc6c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800bc70:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bc74:	dd3d      	ble.n	800bcf2 <__ieee754_asinf+0x14e>
 800bc76:	eea0 0a06 	vfma.f32	s0, s0, s12
 800bc7a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800bd68 <__ieee754_asinf+0x1c4>
 800bc7e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800bc82:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800bd34 <__ieee754_asinf+0x190>
 800bc86:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc8a:	2d00      	cmp	r5, #0
 800bc8c:	bfd8      	it	le
 800bc8e:	eeb1 0a40 	vnegle.f32	s0, s0
 800bc92:	e79b      	b.n	800bbcc <__ieee754_asinf+0x28>
 800bc94:	ee60 7a00 	vmul.f32	s15, s0, s0
 800bc98:	eddf 6a28 	vldr	s13, [pc, #160]	; 800bd3c <__ieee754_asinf+0x198>
 800bc9c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800bd40 <__ieee754_asinf+0x19c>
 800bca0:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800bd54 <__ieee754_asinf+0x1b0>
 800bca4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800bca8:	eddf 6a27 	vldr	s13, [pc, #156]	; 800bd48 <__ieee754_asinf+0x1a4>
 800bcac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bcb0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800bd4c <__ieee754_asinf+0x1a8>
 800bcb4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bcb8:	eddf 6a25 	vldr	s13, [pc, #148]	; 800bd50 <__ieee754_asinf+0x1ac>
 800bcbc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bcc0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800bd44 <__ieee754_asinf+0x1a0>
 800bcc4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bcc8:	eddf 6a23 	vldr	s13, [pc, #140]	; 800bd58 <__ieee754_asinf+0x1b4>
 800bccc:	eee7 6a86 	vfma.f32	s13, s15, s12
 800bcd0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800bd5c <__ieee754_asinf+0x1b8>
 800bcd4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800bcd8:	eddf 6a21 	vldr	s13, [pc, #132]	; 800bd60 <__ieee754_asinf+0x1bc>
 800bcdc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bce4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800bce8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800bcec:	eea0 0a27 	vfma.f32	s0, s0, s15
 800bcf0:	e76c      	b.n	800bbcc <__ieee754_asinf+0x28>
 800bcf2:	ee10 3a10 	vmov	r3, s0
 800bcf6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bcfa:	f023 030f 	bic.w	r3, r3, #15
 800bcfe:	ee07 3a10 	vmov	s14, r3
 800bd02:	eea7 8a47 	vfms.f32	s16, s14, s14
 800bd06:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bd0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd0e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800bd12:	eddf 7a07 	vldr	s15, [pc, #28]	; 800bd30 <__ieee754_asinf+0x18c>
 800bd16:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800bd1a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800bd1e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800bd6c <__ieee754_asinf+0x1c8>
 800bd22:	eeb0 6a40 	vmov.f32	s12, s0
 800bd26:	eea7 6a66 	vfms.f32	s12, s14, s13
 800bd2a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bd2e:	e7aa      	b.n	800bc86 <__ieee754_asinf+0xe2>
 800bd30:	b33bbd2e 	.word	0xb33bbd2e
 800bd34:	3fc90fdb 	.word	0x3fc90fdb
 800bd38:	7149f2ca 	.word	0x7149f2ca
 800bd3c:	3811ef08 	.word	0x3811ef08
 800bd40:	3a4f7f04 	.word	0x3a4f7f04
 800bd44:	3e2aaaab 	.word	0x3e2aaaab
 800bd48:	bd241146 	.word	0xbd241146
 800bd4c:	3e4e0aa8 	.word	0x3e4e0aa8
 800bd50:	bea6b090 	.word	0xbea6b090
 800bd54:	3d9dc62e 	.word	0x3d9dc62e
 800bd58:	bf303361 	.word	0xbf303361
 800bd5c:	4001572d 	.word	0x4001572d
 800bd60:	c019d139 	.word	0xc019d139
 800bd64:	3f799999 	.word	0x3f799999
 800bd68:	333bbd2e 	.word	0x333bbd2e
 800bd6c:	3f490fdb 	.word	0x3f490fdb

0800bd70 <__ieee754_atan2f>:
 800bd70:	ee10 2a90 	vmov	r2, s1
 800bd74:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800bd78:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bd7c:	b510      	push	{r4, lr}
 800bd7e:	eef0 7a40 	vmov.f32	s15, s0
 800bd82:	dc06      	bgt.n	800bd92 <__ieee754_atan2f+0x22>
 800bd84:	ee10 0a10 	vmov	r0, s0
 800bd88:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800bd8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bd90:	dd04      	ble.n	800bd9c <__ieee754_atan2f+0x2c>
 800bd92:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800bd96:	eeb0 0a67 	vmov.f32	s0, s15
 800bd9a:	bd10      	pop	{r4, pc}
 800bd9c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800bda0:	d103      	bne.n	800bdaa <__ieee754_atan2f+0x3a>
 800bda2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bda6:	f000 bcf5 	b.w	800c794 <atanf>
 800bdaa:	1794      	asrs	r4, r2, #30
 800bdac:	f004 0402 	and.w	r4, r4, #2
 800bdb0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bdb4:	b943      	cbnz	r3, 800bdc8 <__ieee754_atan2f+0x58>
 800bdb6:	2c02      	cmp	r4, #2
 800bdb8:	d05e      	beq.n	800be78 <__ieee754_atan2f+0x108>
 800bdba:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800be8c <__ieee754_atan2f+0x11c>
 800bdbe:	2c03      	cmp	r4, #3
 800bdc0:	bf08      	it	eq
 800bdc2:	eef0 7a47 	vmoveq.f32	s15, s14
 800bdc6:	e7e6      	b.n	800bd96 <__ieee754_atan2f+0x26>
 800bdc8:	b941      	cbnz	r1, 800bddc <__ieee754_atan2f+0x6c>
 800bdca:	eddf 7a31 	vldr	s15, [pc, #196]	; 800be90 <__ieee754_atan2f+0x120>
 800bdce:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800be94 <__ieee754_atan2f+0x124>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	bfb8      	it	lt
 800bdd6:	eef0 7a40 	vmovlt.f32	s15, s0
 800bdda:	e7dc      	b.n	800bd96 <__ieee754_atan2f+0x26>
 800bddc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bde0:	d110      	bne.n	800be04 <__ieee754_atan2f+0x94>
 800bde2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bde6:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdea:	d107      	bne.n	800bdfc <__ieee754_atan2f+0x8c>
 800bdec:	2c02      	cmp	r4, #2
 800bdee:	d846      	bhi.n	800be7e <__ieee754_atan2f+0x10e>
 800bdf0:	4b29      	ldr	r3, [pc, #164]	; (800be98 <__ieee754_atan2f+0x128>)
 800bdf2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bdf6:	edd4 7a00 	vldr	s15, [r4]
 800bdfa:	e7cc      	b.n	800bd96 <__ieee754_atan2f+0x26>
 800bdfc:	2c02      	cmp	r4, #2
 800bdfe:	d841      	bhi.n	800be84 <__ieee754_atan2f+0x114>
 800be00:	4b26      	ldr	r3, [pc, #152]	; (800be9c <__ieee754_atan2f+0x12c>)
 800be02:	e7f6      	b.n	800bdf2 <__ieee754_atan2f+0x82>
 800be04:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800be08:	d0df      	beq.n	800bdca <__ieee754_atan2f+0x5a>
 800be0a:	1a5b      	subs	r3, r3, r1
 800be0c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800be10:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800be14:	da1a      	bge.n	800be4c <__ieee754_atan2f+0xdc>
 800be16:	2a00      	cmp	r2, #0
 800be18:	da01      	bge.n	800be1e <__ieee754_atan2f+0xae>
 800be1a:	313c      	adds	r1, #60	; 0x3c
 800be1c:	db19      	blt.n	800be52 <__ieee754_atan2f+0xe2>
 800be1e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800be22:	f000 fd8b 	bl	800c93c <fabsf>
 800be26:	f000 fcb5 	bl	800c794 <atanf>
 800be2a:	eef0 7a40 	vmov.f32	s15, s0
 800be2e:	2c01      	cmp	r4, #1
 800be30:	d012      	beq.n	800be58 <__ieee754_atan2f+0xe8>
 800be32:	2c02      	cmp	r4, #2
 800be34:	d017      	beq.n	800be66 <__ieee754_atan2f+0xf6>
 800be36:	2c00      	cmp	r4, #0
 800be38:	d0ad      	beq.n	800bd96 <__ieee754_atan2f+0x26>
 800be3a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800bea0 <__ieee754_atan2f+0x130>
 800be3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800be42:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800bea4 <__ieee754_atan2f+0x134>
 800be46:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800be4a:	e7a4      	b.n	800bd96 <__ieee754_atan2f+0x26>
 800be4c:	eddf 7a10 	vldr	s15, [pc, #64]	; 800be90 <__ieee754_atan2f+0x120>
 800be50:	e7ed      	b.n	800be2e <__ieee754_atan2f+0xbe>
 800be52:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bea8 <__ieee754_atan2f+0x138>
 800be56:	e7ea      	b.n	800be2e <__ieee754_atan2f+0xbe>
 800be58:	ee17 3a90 	vmov	r3, s15
 800be5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800be60:	ee07 3a90 	vmov	s15, r3
 800be64:	e797      	b.n	800bd96 <__ieee754_atan2f+0x26>
 800be66:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800bea0 <__ieee754_atan2f+0x130>
 800be6a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800be6e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800bea4 <__ieee754_atan2f+0x134>
 800be72:	ee70 7a67 	vsub.f32	s15, s0, s15
 800be76:	e78e      	b.n	800bd96 <__ieee754_atan2f+0x26>
 800be78:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800bea4 <__ieee754_atan2f+0x134>
 800be7c:	e78b      	b.n	800bd96 <__ieee754_atan2f+0x26>
 800be7e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800beac <__ieee754_atan2f+0x13c>
 800be82:	e788      	b.n	800bd96 <__ieee754_atan2f+0x26>
 800be84:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bea8 <__ieee754_atan2f+0x138>
 800be88:	e785      	b.n	800bd96 <__ieee754_atan2f+0x26>
 800be8a:	bf00      	nop
 800be8c:	c0490fdb 	.word	0xc0490fdb
 800be90:	3fc90fdb 	.word	0x3fc90fdb
 800be94:	bfc90fdb 	.word	0xbfc90fdb
 800be98:	0800db84 	.word	0x0800db84
 800be9c:	0800db90 	.word	0x0800db90
 800bea0:	33bbbd2e 	.word	0x33bbbd2e
 800bea4:	40490fdb 	.word	0x40490fdb
 800bea8:	00000000 	.word	0x00000000
 800beac:	3f490fdb 	.word	0x3f490fdb

0800beb0 <__ieee754_rem_pio2f>:
 800beb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb2:	ee10 6a10 	vmov	r6, s0
 800beb6:	4b8e      	ldr	r3, [pc, #568]	; (800c0f0 <__ieee754_rem_pio2f+0x240>)
 800beb8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800bebc:	429d      	cmp	r5, r3
 800bebe:	b087      	sub	sp, #28
 800bec0:	eef0 7a40 	vmov.f32	s15, s0
 800bec4:	4604      	mov	r4, r0
 800bec6:	dc05      	bgt.n	800bed4 <__ieee754_rem_pio2f+0x24>
 800bec8:	2300      	movs	r3, #0
 800beca:	ed80 0a00 	vstr	s0, [r0]
 800bece:	6043      	str	r3, [r0, #4]
 800bed0:	2000      	movs	r0, #0
 800bed2:	e01a      	b.n	800bf0a <__ieee754_rem_pio2f+0x5a>
 800bed4:	4b87      	ldr	r3, [pc, #540]	; (800c0f4 <__ieee754_rem_pio2f+0x244>)
 800bed6:	429d      	cmp	r5, r3
 800bed8:	dc46      	bgt.n	800bf68 <__ieee754_rem_pio2f+0xb8>
 800beda:	2e00      	cmp	r6, #0
 800bedc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800c0f8 <__ieee754_rem_pio2f+0x248>
 800bee0:	4b86      	ldr	r3, [pc, #536]	; (800c0fc <__ieee754_rem_pio2f+0x24c>)
 800bee2:	f025 050f 	bic.w	r5, r5, #15
 800bee6:	dd1f      	ble.n	800bf28 <__ieee754_rem_pio2f+0x78>
 800bee8:	429d      	cmp	r5, r3
 800beea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800beee:	d00e      	beq.n	800bf0e <__ieee754_rem_pio2f+0x5e>
 800bef0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800c100 <__ieee754_rem_pio2f+0x250>
 800bef4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800bef8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800befc:	ed80 0a00 	vstr	s0, [r0]
 800bf00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf04:	2001      	movs	r0, #1
 800bf06:	edc4 7a01 	vstr	s15, [r4, #4]
 800bf0a:	b007      	add	sp, #28
 800bf0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf0e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c104 <__ieee754_rem_pio2f+0x254>
 800bf12:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800c108 <__ieee754_rem_pio2f+0x258>
 800bf16:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bf1a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800bf1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bf22:	edc0 6a00 	vstr	s13, [r0]
 800bf26:	e7eb      	b.n	800bf00 <__ieee754_rem_pio2f+0x50>
 800bf28:	429d      	cmp	r5, r3
 800bf2a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bf2e:	d00e      	beq.n	800bf4e <__ieee754_rem_pio2f+0x9e>
 800bf30:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c100 <__ieee754_rem_pio2f+0x250>
 800bf34:	ee37 0a87 	vadd.f32	s0, s15, s14
 800bf38:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bf3c:	ed80 0a00 	vstr	s0, [r0]
 800bf40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf44:	f04f 30ff 	mov.w	r0, #4294967295
 800bf48:	edc4 7a01 	vstr	s15, [r4, #4]
 800bf4c:	e7dd      	b.n	800bf0a <__ieee754_rem_pio2f+0x5a>
 800bf4e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800c104 <__ieee754_rem_pio2f+0x254>
 800bf52:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c108 <__ieee754_rem_pio2f+0x258>
 800bf56:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bf5a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bf5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bf62:	edc0 6a00 	vstr	s13, [r0]
 800bf66:	e7eb      	b.n	800bf40 <__ieee754_rem_pio2f+0x90>
 800bf68:	4b68      	ldr	r3, [pc, #416]	; (800c10c <__ieee754_rem_pio2f+0x25c>)
 800bf6a:	429d      	cmp	r5, r3
 800bf6c:	dc72      	bgt.n	800c054 <__ieee754_rem_pio2f+0x1a4>
 800bf6e:	f000 fce5 	bl	800c93c <fabsf>
 800bf72:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c110 <__ieee754_rem_pio2f+0x260>
 800bf76:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bf7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bf7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bf86:	ee17 0a90 	vmov	r0, s15
 800bf8a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c0f8 <__ieee754_rem_pio2f+0x248>
 800bf8e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bf92:	281f      	cmp	r0, #31
 800bf94:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c100 <__ieee754_rem_pio2f+0x250>
 800bf98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9c:	eeb1 6a47 	vneg.f32	s12, s14
 800bfa0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bfa4:	ee16 2a90 	vmov	r2, s13
 800bfa8:	dc1c      	bgt.n	800bfe4 <__ieee754_rem_pio2f+0x134>
 800bfaa:	495a      	ldr	r1, [pc, #360]	; (800c114 <__ieee754_rem_pio2f+0x264>)
 800bfac:	1e47      	subs	r7, r0, #1
 800bfae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800bfb2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800bfb6:	428b      	cmp	r3, r1
 800bfb8:	d014      	beq.n	800bfe4 <__ieee754_rem_pio2f+0x134>
 800bfba:	6022      	str	r2, [r4, #0]
 800bfbc:	ed94 7a00 	vldr	s14, [r4]
 800bfc0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bfc4:	2e00      	cmp	r6, #0
 800bfc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bfca:	ed84 0a01 	vstr	s0, [r4, #4]
 800bfce:	da9c      	bge.n	800bf0a <__ieee754_rem_pio2f+0x5a>
 800bfd0:	eeb1 7a47 	vneg.f32	s14, s14
 800bfd4:	eeb1 0a40 	vneg.f32	s0, s0
 800bfd8:	ed84 7a00 	vstr	s14, [r4]
 800bfdc:	ed84 0a01 	vstr	s0, [r4, #4]
 800bfe0:	4240      	negs	r0, r0
 800bfe2:	e792      	b.n	800bf0a <__ieee754_rem_pio2f+0x5a>
 800bfe4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bfe8:	15eb      	asrs	r3, r5, #23
 800bfea:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800bfee:	2d08      	cmp	r5, #8
 800bff0:	dde3      	ble.n	800bfba <__ieee754_rem_pio2f+0x10a>
 800bff2:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c104 <__ieee754_rem_pio2f+0x254>
 800bff6:	eef0 6a40 	vmov.f32	s13, s0
 800bffa:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bffe:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c002:	eea6 0a27 	vfma.f32	s0, s12, s15
 800c006:	eddf 7a40 	vldr	s15, [pc, #256]	; 800c108 <__ieee754_rem_pio2f+0x258>
 800c00a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800c00e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800c012:	eef0 7a40 	vmov.f32	s15, s0
 800c016:	ee15 2a90 	vmov	r2, s11
 800c01a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c01e:	1a5b      	subs	r3, r3, r1
 800c020:	2b19      	cmp	r3, #25
 800c022:	dc04      	bgt.n	800c02e <__ieee754_rem_pio2f+0x17e>
 800c024:	edc4 5a00 	vstr	s11, [r4]
 800c028:	eeb0 0a66 	vmov.f32	s0, s13
 800c02c:	e7c6      	b.n	800bfbc <__ieee754_rem_pio2f+0x10c>
 800c02e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c118 <__ieee754_rem_pio2f+0x268>
 800c032:	eeb0 0a66 	vmov.f32	s0, s13
 800c036:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c03a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c03e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c11c <__ieee754_rem_pio2f+0x26c>
 800c042:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c046:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c04a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c04e:	ed84 7a00 	vstr	s14, [r4]
 800c052:	e7b3      	b.n	800bfbc <__ieee754_rem_pio2f+0x10c>
 800c054:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c058:	db06      	blt.n	800c068 <__ieee754_rem_pio2f+0x1b8>
 800c05a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c05e:	edc0 7a01 	vstr	s15, [r0, #4]
 800c062:	edc0 7a00 	vstr	s15, [r0]
 800c066:	e733      	b.n	800bed0 <__ieee754_rem_pio2f+0x20>
 800c068:	15ea      	asrs	r2, r5, #23
 800c06a:	3a86      	subs	r2, #134	; 0x86
 800c06c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c070:	ee07 3a90 	vmov	s15, r3
 800c074:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c078:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c120 <__ieee754_rem_pio2f+0x270>
 800c07c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c080:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c084:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c088:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c08c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c090:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c098:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c09c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c0a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a8:	edcd 7a05 	vstr	s15, [sp, #20]
 800c0ac:	d11e      	bne.n	800c0ec <__ieee754_rem_pio2f+0x23c>
 800c0ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b6:	bf14      	ite	ne
 800c0b8:	2302      	movne	r3, #2
 800c0ba:	2301      	moveq	r3, #1
 800c0bc:	4919      	ldr	r1, [pc, #100]	; (800c124 <__ieee754_rem_pio2f+0x274>)
 800c0be:	9101      	str	r1, [sp, #4]
 800c0c0:	2102      	movs	r1, #2
 800c0c2:	9100      	str	r1, [sp, #0]
 800c0c4:	a803      	add	r0, sp, #12
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	f000 f892 	bl	800c1f0 <__kernel_rem_pio2f>
 800c0cc:	2e00      	cmp	r6, #0
 800c0ce:	f6bf af1c 	bge.w	800bf0a <__ieee754_rem_pio2f+0x5a>
 800c0d2:	edd4 7a00 	vldr	s15, [r4]
 800c0d6:	eef1 7a67 	vneg.f32	s15, s15
 800c0da:	edc4 7a00 	vstr	s15, [r4]
 800c0de:	edd4 7a01 	vldr	s15, [r4, #4]
 800c0e2:	eef1 7a67 	vneg.f32	s15, s15
 800c0e6:	edc4 7a01 	vstr	s15, [r4, #4]
 800c0ea:	e779      	b.n	800bfe0 <__ieee754_rem_pio2f+0x130>
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	e7e5      	b.n	800c0bc <__ieee754_rem_pio2f+0x20c>
 800c0f0:	3f490fd8 	.word	0x3f490fd8
 800c0f4:	4016cbe3 	.word	0x4016cbe3
 800c0f8:	3fc90f80 	.word	0x3fc90f80
 800c0fc:	3fc90fd0 	.word	0x3fc90fd0
 800c100:	37354443 	.word	0x37354443
 800c104:	37354400 	.word	0x37354400
 800c108:	2e85a308 	.word	0x2e85a308
 800c10c:	43490f80 	.word	0x43490f80
 800c110:	3f22f984 	.word	0x3f22f984
 800c114:	0800db9c 	.word	0x0800db9c
 800c118:	2e85a300 	.word	0x2e85a300
 800c11c:	248d3132 	.word	0x248d3132
 800c120:	43800000 	.word	0x43800000
 800c124:	0800dc1c 	.word	0x0800dc1c

0800c128 <__ieee754_sqrtf>:
 800c128:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c12c:	4770      	bx	lr
	...

0800c130 <__kernel_cosf>:
 800c130:	ee10 3a10 	vmov	r3, s0
 800c134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c138:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c13c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c140:	da05      	bge.n	800c14e <__kernel_cosf+0x1e>
 800c142:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c146:	ee17 2a90 	vmov	r2, s15
 800c14a:	2a00      	cmp	r2, #0
 800c14c:	d03d      	beq.n	800c1ca <__kernel_cosf+0x9a>
 800c14e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800c152:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c1d0 <__kernel_cosf+0xa0>
 800c156:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800c1d4 <__kernel_cosf+0xa4>
 800c15a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c1d8 <__kernel_cosf+0xa8>
 800c15e:	4a1f      	ldr	r2, [pc, #124]	; (800c1dc <__kernel_cosf+0xac>)
 800c160:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c164:	4293      	cmp	r3, r2
 800c166:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800c1e0 <__kernel_cosf+0xb0>
 800c16a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c16e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c1e4 <__kernel_cosf+0xb4>
 800c172:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c176:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c1e8 <__kernel_cosf+0xb8>
 800c17a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c17e:	eeb0 7a66 	vmov.f32	s14, s13
 800c182:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800c186:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c18a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800c18e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800c192:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800c196:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c19a:	dc04      	bgt.n	800c1a6 <__kernel_cosf+0x76>
 800c19c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c1a0:	ee36 0a47 	vsub.f32	s0, s12, s14
 800c1a4:	4770      	bx	lr
 800c1a6:	4a11      	ldr	r2, [pc, #68]	; (800c1ec <__kernel_cosf+0xbc>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	bfda      	itte	le
 800c1ac:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c1b0:	ee06 3a90 	vmovle	s13, r3
 800c1b4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800c1b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c1bc:	ee36 0a66 	vsub.f32	s0, s12, s13
 800c1c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c1c4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c1c8:	4770      	bx	lr
 800c1ca:	eeb0 0a46 	vmov.f32	s0, s12
 800c1ce:	4770      	bx	lr
 800c1d0:	ad47d74e 	.word	0xad47d74e
 800c1d4:	310f74f6 	.word	0x310f74f6
 800c1d8:	3d2aaaab 	.word	0x3d2aaaab
 800c1dc:	3e999999 	.word	0x3e999999
 800c1e0:	b493f27c 	.word	0xb493f27c
 800c1e4:	37d00d01 	.word	0x37d00d01
 800c1e8:	bab60b61 	.word	0xbab60b61
 800c1ec:	3f480000 	.word	0x3f480000

0800c1f0 <__kernel_rem_pio2f>:
 800c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f4:	ed2d 8b04 	vpush	{d8-d9}
 800c1f8:	b0d7      	sub	sp, #348	; 0x15c
 800c1fa:	4616      	mov	r6, r2
 800c1fc:	4698      	mov	r8, r3
 800c1fe:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c200:	4bbb      	ldr	r3, [pc, #748]	; (800c4f0 <__kernel_rem_pio2f+0x300>)
 800c202:	9001      	str	r0, [sp, #4]
 800c204:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800c208:	1d33      	adds	r3, r6, #4
 800c20a:	460d      	mov	r5, r1
 800c20c:	f108 39ff 	add.w	r9, r8, #4294967295
 800c210:	db29      	blt.n	800c266 <__kernel_rem_pio2f+0x76>
 800c212:	1ef1      	subs	r1, r6, #3
 800c214:	bf48      	it	mi
 800c216:	1d31      	addmi	r1, r6, #4
 800c218:	10c9      	asrs	r1, r1, #3
 800c21a:	1c4c      	adds	r4, r1, #1
 800c21c:	00e3      	lsls	r3, r4, #3
 800c21e:	9302      	str	r3, [sp, #8]
 800c220:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c222:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800c500 <__kernel_rem_pio2f+0x310>
 800c226:	eba1 0009 	sub.w	r0, r1, r9
 800c22a:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800c22e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800c232:	eb07 0c09 	add.w	ip, r7, r9
 800c236:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800c23a:	2300      	movs	r3, #0
 800c23c:	4563      	cmp	r3, ip
 800c23e:	dd14      	ble.n	800c26a <__kernel_rem_pio2f+0x7a>
 800c240:	ab1a      	add	r3, sp, #104	; 0x68
 800c242:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800c246:	46cc      	mov	ip, r9
 800c248:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800c24c:	f1c8 0b01 	rsb	fp, r8, #1
 800c250:	eb0b 020c 	add.w	r2, fp, ip
 800c254:	4297      	cmp	r7, r2
 800c256:	db27      	blt.n	800c2a8 <__kernel_rem_pio2f+0xb8>
 800c258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c25c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800c500 <__kernel_rem_pio2f+0x310>
 800c260:	4618      	mov	r0, r3
 800c262:	2200      	movs	r2, #0
 800c264:	e016      	b.n	800c294 <__kernel_rem_pio2f+0xa4>
 800c266:	2100      	movs	r1, #0
 800c268:	e7d7      	b.n	800c21a <__kernel_rem_pio2f+0x2a>
 800c26a:	42d8      	cmn	r0, r3
 800c26c:	bf5d      	ittte	pl
 800c26e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800c272:	ee07 2a90 	vmovpl	s15, r2
 800c276:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c27a:	eef0 7a47 	vmovmi.f32	s15, s14
 800c27e:	ecea 7a01 	vstmia	sl!, {s15}
 800c282:	3301      	adds	r3, #1
 800c284:	e7da      	b.n	800c23c <__kernel_rem_pio2f+0x4c>
 800c286:	ecfe 6a01 	vldmia	lr!, {s13}
 800c28a:	ed90 7a00 	vldr	s14, [r0]
 800c28e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c292:	3201      	adds	r2, #1
 800c294:	454a      	cmp	r2, r9
 800c296:	f1a0 0004 	sub.w	r0, r0, #4
 800c29a:	ddf4      	ble.n	800c286 <__kernel_rem_pio2f+0x96>
 800c29c:	ecea 7a01 	vstmia	sl!, {s15}
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	f10c 0c01 	add.w	ip, ip, #1
 800c2a6:	e7d3      	b.n	800c250 <__kernel_rem_pio2f+0x60>
 800c2a8:	ab06      	add	r3, sp, #24
 800c2aa:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800c2ae:	9304      	str	r3, [sp, #16]
 800c2b0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800c2b2:	eddf 8a92 	vldr	s17, [pc, #584]	; 800c4fc <__kernel_rem_pio2f+0x30c>
 800c2b6:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800c4f8 <__kernel_rem_pio2f+0x308>
 800c2ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800c2be:	9303      	str	r3, [sp, #12]
 800c2c0:	46ba      	mov	sl, r7
 800c2c2:	ab56      	add	r3, sp, #344	; 0x158
 800c2c4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c2c8:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c2cc:	ab06      	add	r3, sp, #24
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	4652      	mov	r2, sl
 800c2d2:	2a00      	cmp	r2, #0
 800c2d4:	dc51      	bgt.n	800c37a <__kernel_rem_pio2f+0x18a>
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	9305      	str	r3, [sp, #20]
 800c2da:	f000 fb7f 	bl	800c9dc <scalbnf>
 800c2de:	eeb0 8a40 	vmov.f32	s16, s0
 800c2e2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c2e6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c2ea:	f000 fb2f 	bl	800c94c <floorf>
 800c2ee:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c2f2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c2f6:	2c00      	cmp	r4, #0
 800c2f8:	9b05      	ldr	r3, [sp, #20]
 800c2fa:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c2fe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800c302:	edcd 7a00 	vstr	s15, [sp]
 800c306:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c30a:	dd4b      	ble.n	800c3a4 <__kernel_rem_pio2f+0x1b4>
 800c30c:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c310:	aa06      	add	r2, sp, #24
 800c312:	f1c4 0e08 	rsb	lr, r4, #8
 800c316:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c31a:	ee17 1a90 	vmov	r1, s15
 800c31e:	fa42 f00e 	asr.w	r0, r2, lr
 800c322:	4401      	add	r1, r0
 800c324:	9100      	str	r1, [sp, #0]
 800c326:	fa00 f00e 	lsl.w	r0, r0, lr
 800c32a:	a906      	add	r1, sp, #24
 800c32c:	1a12      	subs	r2, r2, r0
 800c32e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c332:	f1c4 0007 	rsb	r0, r4, #7
 800c336:	fa42 fb00 	asr.w	fp, r2, r0
 800c33a:	f1bb 0f00 	cmp.w	fp, #0
 800c33e:	dd43      	ble.n	800c3c8 <__kernel_rem_pio2f+0x1d8>
 800c340:	9a00      	ldr	r2, [sp, #0]
 800c342:	f04f 0e00 	mov.w	lr, #0
 800c346:	3201      	adds	r2, #1
 800c348:	9200      	str	r2, [sp, #0]
 800c34a:	4670      	mov	r0, lr
 800c34c:	45f2      	cmp	sl, lr
 800c34e:	dc6c      	bgt.n	800c42a <__kernel_rem_pio2f+0x23a>
 800c350:	2c00      	cmp	r4, #0
 800c352:	dd04      	ble.n	800c35e <__kernel_rem_pio2f+0x16e>
 800c354:	2c01      	cmp	r4, #1
 800c356:	d079      	beq.n	800c44c <__kernel_rem_pio2f+0x25c>
 800c358:	2c02      	cmp	r4, #2
 800c35a:	f000 8082 	beq.w	800c462 <__kernel_rem_pio2f+0x272>
 800c35e:	f1bb 0f02 	cmp.w	fp, #2
 800c362:	d131      	bne.n	800c3c8 <__kernel_rem_pio2f+0x1d8>
 800c364:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c368:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c36c:	b360      	cbz	r0, 800c3c8 <__kernel_rem_pio2f+0x1d8>
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 fb34 	bl	800c9dc <scalbnf>
 800c374:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c378:	e026      	b.n	800c3c8 <__kernel_rem_pio2f+0x1d8>
 800c37a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c37e:	3a01      	subs	r2, #1
 800c380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c384:	a942      	add	r1, sp, #264	; 0x108
 800c386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c38a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800c38e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c392:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c396:	eca0 0a01 	vstmia	r0!, {s0}
 800c39a:	ed9c 0a00 	vldr	s0, [ip]
 800c39e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c3a2:	e796      	b.n	800c2d2 <__kernel_rem_pio2f+0xe2>
 800c3a4:	d107      	bne.n	800c3b6 <__kernel_rem_pio2f+0x1c6>
 800c3a6:	f10a 32ff 	add.w	r2, sl, #4294967295
 800c3aa:	a906      	add	r1, sp, #24
 800c3ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c3b0:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800c3b4:	e7c1      	b.n	800c33a <__kernel_rem_pio2f+0x14a>
 800c3b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c3ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c2:	da2f      	bge.n	800c424 <__kernel_rem_pio2f+0x234>
 800c3c4:	f04f 0b00 	mov.w	fp, #0
 800c3c8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d0:	f040 8098 	bne.w	800c504 <__kernel_rem_pio2f+0x314>
 800c3d4:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c3d8:	469c      	mov	ip, r3
 800c3da:	2200      	movs	r2, #0
 800c3dc:	45bc      	cmp	ip, r7
 800c3de:	da48      	bge.n	800c472 <__kernel_rem_pio2f+0x282>
 800c3e0:	2a00      	cmp	r2, #0
 800c3e2:	d05f      	beq.n	800c4a4 <__kernel_rem_pio2f+0x2b4>
 800c3e4:	aa06      	add	r2, sp, #24
 800c3e6:	3c08      	subs	r4, #8
 800c3e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c3ec:	2900      	cmp	r1, #0
 800c3ee:	d07d      	beq.n	800c4ec <__kernel_rem_pio2f+0x2fc>
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c3f6:	9301      	str	r3, [sp, #4]
 800c3f8:	f000 faf0 	bl	800c9dc <scalbnf>
 800c3fc:	9b01      	ldr	r3, [sp, #4]
 800c3fe:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800c4fc <__kernel_rem_pio2f+0x30c>
 800c402:	4619      	mov	r1, r3
 800c404:	2900      	cmp	r1, #0
 800c406:	f280 80af 	bge.w	800c568 <__kernel_rem_pio2f+0x378>
 800c40a:	4618      	mov	r0, r3
 800c40c:	2400      	movs	r4, #0
 800c40e:	2800      	cmp	r0, #0
 800c410:	f2c0 80d0 	blt.w	800c5b4 <__kernel_rem_pio2f+0x3c4>
 800c414:	a942      	add	r1, sp, #264	; 0x108
 800c416:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800c41a:	4a36      	ldr	r2, [pc, #216]	; (800c4f4 <__kernel_rem_pio2f+0x304>)
 800c41c:	eddf 7a38 	vldr	s15, [pc, #224]	; 800c500 <__kernel_rem_pio2f+0x310>
 800c420:	2100      	movs	r1, #0
 800c422:	e0bb      	b.n	800c59c <__kernel_rem_pio2f+0x3ac>
 800c424:	f04f 0b02 	mov.w	fp, #2
 800c428:	e78a      	b.n	800c340 <__kernel_rem_pio2f+0x150>
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	b948      	cbnz	r0, 800c442 <__kernel_rem_pio2f+0x252>
 800c42e:	b11a      	cbz	r2, 800c438 <__kernel_rem_pio2f+0x248>
 800c430:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800c434:	601a      	str	r2, [r3, #0]
 800c436:	2201      	movs	r2, #1
 800c438:	f10e 0e01 	add.w	lr, lr, #1
 800c43c:	3304      	adds	r3, #4
 800c43e:	4610      	mov	r0, r2
 800c440:	e784      	b.n	800c34c <__kernel_rem_pio2f+0x15c>
 800c442:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800c446:	601a      	str	r2, [r3, #0]
 800c448:	4602      	mov	r2, r0
 800c44a:	e7f5      	b.n	800c438 <__kernel_rem_pio2f+0x248>
 800c44c:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c450:	ab06      	add	r3, sp, #24
 800c452:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c45a:	aa06      	add	r2, sp, #24
 800c45c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800c460:	e77d      	b.n	800c35e <__kernel_rem_pio2f+0x16e>
 800c462:	f10a 3cff 	add.w	ip, sl, #4294967295
 800c466:	ab06      	add	r3, sp, #24
 800c468:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800c46c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c470:	e7f3      	b.n	800c45a <__kernel_rem_pio2f+0x26a>
 800c472:	a906      	add	r1, sp, #24
 800c474:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800c478:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c47c:	4302      	orrs	r2, r0
 800c47e:	e7ad      	b.n	800c3dc <__kernel_rem_pio2f+0x1ec>
 800c480:	3001      	adds	r0, #1
 800c482:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c486:	2a00      	cmp	r2, #0
 800c488:	d0fa      	beq.n	800c480 <__kernel_rem_pio2f+0x290>
 800c48a:	a91a      	add	r1, sp, #104	; 0x68
 800c48c:	eb0a 0208 	add.w	r2, sl, r8
 800c490:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c494:	f10a 0301 	add.w	r3, sl, #1
 800c498:	eb0a 0100 	add.w	r1, sl, r0
 800c49c:	4299      	cmp	r1, r3
 800c49e:	da04      	bge.n	800c4aa <__kernel_rem_pio2f+0x2ba>
 800c4a0:	468a      	mov	sl, r1
 800c4a2:	e70e      	b.n	800c2c2 <__kernel_rem_pio2f+0xd2>
 800c4a4:	9b04      	ldr	r3, [sp, #16]
 800c4a6:	2001      	movs	r0, #1
 800c4a8:	e7eb      	b.n	800c482 <__kernel_rem_pio2f+0x292>
 800c4aa:	9803      	ldr	r0, [sp, #12]
 800c4ac:	f8dd c004 	ldr.w	ip, [sp, #4]
 800c4b0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c4b4:	9000      	str	r0, [sp, #0]
 800c4b6:	ee07 0a90 	vmov	s15, r0
 800c4ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4be:	2000      	movs	r0, #0
 800c4c0:	ece2 7a01 	vstmia	r2!, {s15}
 800c4c4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c500 <__kernel_rem_pio2f+0x310>
 800c4c8:	4696      	mov	lr, r2
 800c4ca:	4548      	cmp	r0, r9
 800c4cc:	dd06      	ble.n	800c4dc <__kernel_rem_pio2f+0x2ec>
 800c4ce:	a842      	add	r0, sp, #264	; 0x108
 800c4d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800c4d4:	edc0 7a00 	vstr	s15, [r0]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	e7df      	b.n	800c49c <__kernel_rem_pio2f+0x2ac>
 800c4dc:	ecfc 6a01 	vldmia	ip!, {s13}
 800c4e0:	ed3e 7a01 	vldmdb	lr!, {s14}
 800c4e4:	3001      	adds	r0, #1
 800c4e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c4ea:	e7ee      	b.n	800c4ca <__kernel_rem_pio2f+0x2da>
 800c4ec:	3b01      	subs	r3, #1
 800c4ee:	e779      	b.n	800c3e4 <__kernel_rem_pio2f+0x1f4>
 800c4f0:	0800df60 	.word	0x0800df60
 800c4f4:	0800df34 	.word	0x0800df34
 800c4f8:	43800000 	.word	0x43800000
 800c4fc:	3b800000 	.word	0x3b800000
 800c500:	00000000 	.word	0x00000000
 800c504:	9b02      	ldr	r3, [sp, #8]
 800c506:	eeb0 0a48 	vmov.f32	s0, s16
 800c50a:	1b98      	subs	r0, r3, r6
 800c50c:	f000 fa66 	bl	800c9dc <scalbnf>
 800c510:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800c4f8 <__kernel_rem_pio2f+0x308>
 800c514:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c51c:	db1b      	blt.n	800c556 <__kernel_rem_pio2f+0x366>
 800c51e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c4fc <__kernel_rem_pio2f+0x30c>
 800c522:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c526:	aa06      	add	r2, sp, #24
 800c528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c52c:	a906      	add	r1, sp, #24
 800c52e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c532:	3408      	adds	r4, #8
 800c534:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c53c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c540:	ee10 3a10 	vmov	r3, s0
 800c544:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800c548:	ee17 2a90 	vmov	r2, s15
 800c54c:	f10a 0301 	add.w	r3, sl, #1
 800c550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c554:	e74c      	b.n	800c3f0 <__kernel_rem_pio2f+0x200>
 800c556:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c55a:	aa06      	add	r2, sp, #24
 800c55c:	ee10 3a10 	vmov	r3, s0
 800c560:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800c564:	4653      	mov	r3, sl
 800c566:	e743      	b.n	800c3f0 <__kernel_rem_pio2f+0x200>
 800c568:	aa42      	add	r2, sp, #264	; 0x108
 800c56a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800c56e:	aa06      	add	r2, sp, #24
 800c570:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c574:	9201      	str	r2, [sp, #4]
 800c576:	ee07 2a90 	vmov	s15, r2
 800c57a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c57e:	3901      	subs	r1, #1
 800c580:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c584:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c588:	edc0 7a00 	vstr	s15, [r0]
 800c58c:	e73a      	b.n	800c404 <__kernel_rem_pio2f+0x214>
 800c58e:	ecf2 6a01 	vldmia	r2!, {s13}
 800c592:	ecb6 7a01 	vldmia	r6!, {s14}
 800c596:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c59a:	3101      	adds	r1, #1
 800c59c:	42b9      	cmp	r1, r7
 800c59e:	dc01      	bgt.n	800c5a4 <__kernel_rem_pio2f+0x3b4>
 800c5a0:	428c      	cmp	r4, r1
 800c5a2:	daf4      	bge.n	800c58e <__kernel_rem_pio2f+0x39e>
 800c5a4:	aa56      	add	r2, sp, #344	; 0x158
 800c5a6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800c5aa:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800c5ae:	3801      	subs	r0, #1
 800c5b0:	3401      	adds	r4, #1
 800c5b2:	e72c      	b.n	800c40e <__kernel_rem_pio2f+0x21e>
 800c5b4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c5b6:	2a02      	cmp	r2, #2
 800c5b8:	dc0a      	bgt.n	800c5d0 <__kernel_rem_pio2f+0x3e0>
 800c5ba:	2a00      	cmp	r2, #0
 800c5bc:	dc61      	bgt.n	800c682 <__kernel_rem_pio2f+0x492>
 800c5be:	d03c      	beq.n	800c63a <__kernel_rem_pio2f+0x44a>
 800c5c0:	9b00      	ldr	r3, [sp, #0]
 800c5c2:	f003 0007 	and.w	r0, r3, #7
 800c5c6:	b057      	add	sp, #348	; 0x15c
 800c5c8:	ecbd 8b04 	vpop	{d8-d9}
 800c5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c5d2:	2a03      	cmp	r2, #3
 800c5d4:	d1f4      	bne.n	800c5c0 <__kernel_rem_pio2f+0x3d0>
 800c5d6:	aa2e      	add	r2, sp, #184	; 0xb8
 800c5d8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c5dc:	4608      	mov	r0, r1
 800c5de:	461c      	mov	r4, r3
 800c5e0:	2c00      	cmp	r4, #0
 800c5e2:	f1a0 0004 	sub.w	r0, r0, #4
 800c5e6:	dc59      	bgt.n	800c69c <__kernel_rem_pio2f+0x4ac>
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	2801      	cmp	r0, #1
 800c5ec:	f1a1 0104 	sub.w	r1, r1, #4
 800c5f0:	dc64      	bgt.n	800c6bc <__kernel_rem_pio2f+0x4cc>
 800c5f2:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800c500 <__kernel_rem_pio2f+0x310>
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	dc70      	bgt.n	800c6dc <__kernel_rem_pio2f+0x4ec>
 800c5fa:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800c5fe:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800c602:	f1bb 0f00 	cmp.w	fp, #0
 800c606:	d172      	bne.n	800c6ee <__kernel_rem_pio2f+0x4fe>
 800c608:	edc5 6a00 	vstr	s13, [r5]
 800c60c:	ed85 7a01 	vstr	s14, [r5, #4]
 800c610:	edc5 7a02 	vstr	s15, [r5, #8]
 800c614:	e7d4      	b.n	800c5c0 <__kernel_rem_pio2f+0x3d0>
 800c616:	aa2e      	add	r2, sp, #184	; 0xb8
 800c618:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c61c:	ed91 7a00 	vldr	s14, [r1]
 800c620:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c624:	3b01      	subs	r3, #1
 800c626:	2b00      	cmp	r3, #0
 800c628:	daf5      	bge.n	800c616 <__kernel_rem_pio2f+0x426>
 800c62a:	f1bb 0f00 	cmp.w	fp, #0
 800c62e:	d001      	beq.n	800c634 <__kernel_rem_pio2f+0x444>
 800c630:	eef1 7a67 	vneg.f32	s15, s15
 800c634:	edc5 7a00 	vstr	s15, [r5]
 800c638:	e7c2      	b.n	800c5c0 <__kernel_rem_pio2f+0x3d0>
 800c63a:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c500 <__kernel_rem_pio2f+0x310>
 800c63e:	e7f2      	b.n	800c626 <__kernel_rem_pio2f+0x436>
 800c640:	aa2e      	add	r2, sp, #184	; 0xb8
 800c642:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800c646:	edd0 7a00 	vldr	s15, [r0]
 800c64a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c64e:	3901      	subs	r1, #1
 800c650:	2900      	cmp	r1, #0
 800c652:	daf5      	bge.n	800c640 <__kernel_rem_pio2f+0x450>
 800c654:	f1bb 0f00 	cmp.w	fp, #0
 800c658:	d017      	beq.n	800c68a <__kernel_rem_pio2f+0x49a>
 800c65a:	eef1 7a47 	vneg.f32	s15, s14
 800c65e:	edc5 7a00 	vstr	s15, [r5]
 800c662:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c666:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c66a:	a82f      	add	r0, sp, #188	; 0xbc
 800c66c:	2101      	movs	r1, #1
 800c66e:	428b      	cmp	r3, r1
 800c670:	da0e      	bge.n	800c690 <__kernel_rem_pio2f+0x4a0>
 800c672:	f1bb 0f00 	cmp.w	fp, #0
 800c676:	d001      	beq.n	800c67c <__kernel_rem_pio2f+0x48c>
 800c678:	eef1 7a67 	vneg.f32	s15, s15
 800c67c:	edc5 7a01 	vstr	s15, [r5, #4]
 800c680:	e79e      	b.n	800c5c0 <__kernel_rem_pio2f+0x3d0>
 800c682:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800c500 <__kernel_rem_pio2f+0x310>
 800c686:	4619      	mov	r1, r3
 800c688:	e7e2      	b.n	800c650 <__kernel_rem_pio2f+0x460>
 800c68a:	eef0 7a47 	vmov.f32	s15, s14
 800c68e:	e7e6      	b.n	800c65e <__kernel_rem_pio2f+0x46e>
 800c690:	ecb0 7a01 	vldmia	r0!, {s14}
 800c694:	3101      	adds	r1, #1
 800c696:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c69a:	e7e8      	b.n	800c66e <__kernel_rem_pio2f+0x47e>
 800c69c:	edd0 7a00 	vldr	s15, [r0]
 800c6a0:	edd0 6a01 	vldr	s13, [r0, #4]
 800c6a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c6a8:	3c01      	subs	r4, #1
 800c6aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6ae:	ed80 7a00 	vstr	s14, [r0]
 800c6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6b6:	edc0 7a01 	vstr	s15, [r0, #4]
 800c6ba:	e791      	b.n	800c5e0 <__kernel_rem_pio2f+0x3f0>
 800c6bc:	edd1 7a00 	vldr	s15, [r1]
 800c6c0:	edd1 6a01 	vldr	s13, [r1, #4]
 800c6c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c6c8:	3801      	subs	r0, #1
 800c6ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6ce:	ed81 7a00 	vstr	s14, [r1]
 800c6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6d6:	edc1 7a01 	vstr	s15, [r1, #4]
 800c6da:	e786      	b.n	800c5ea <__kernel_rem_pio2f+0x3fa>
 800c6dc:	aa2e      	add	r2, sp, #184	; 0xb8
 800c6de:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c6e2:	ed91 7a00 	vldr	s14, [r1]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6ec:	e783      	b.n	800c5f6 <__kernel_rem_pio2f+0x406>
 800c6ee:	eef1 6a66 	vneg.f32	s13, s13
 800c6f2:	eeb1 7a47 	vneg.f32	s14, s14
 800c6f6:	edc5 6a00 	vstr	s13, [r5]
 800c6fa:	ed85 7a01 	vstr	s14, [r5, #4]
 800c6fe:	eef1 7a67 	vneg.f32	s15, s15
 800c702:	e785      	b.n	800c610 <__kernel_rem_pio2f+0x420>

0800c704 <__kernel_sinf>:
 800c704:	ee10 3a10 	vmov	r3, s0
 800c708:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c70c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c710:	da04      	bge.n	800c71c <__kernel_sinf+0x18>
 800c712:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c716:	ee17 3a90 	vmov	r3, s15
 800c71a:	b35b      	cbz	r3, 800c774 <__kernel_sinf+0x70>
 800c71c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c720:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c778 <__kernel_sinf+0x74>
 800c724:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c77c <__kernel_sinf+0x78>
 800c728:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c72c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c780 <__kernel_sinf+0x7c>
 800c730:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c734:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c784 <__kernel_sinf+0x80>
 800c738:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c73c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c788 <__kernel_sinf+0x84>
 800c740:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c744:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c748:	b930      	cbnz	r0, 800c758 <__kernel_sinf+0x54>
 800c74a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c78c <__kernel_sinf+0x88>
 800c74e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c752:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c756:	4770      	bx	lr
 800c758:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c75c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c760:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c764:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c768:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c790 <__kernel_sinf+0x8c>
 800c76c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c770:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	2f2ec9d3 	.word	0x2f2ec9d3
 800c77c:	b2d72f34 	.word	0xb2d72f34
 800c780:	3638ef1b 	.word	0x3638ef1b
 800c784:	b9500d01 	.word	0xb9500d01
 800c788:	3c088889 	.word	0x3c088889
 800c78c:	be2aaaab 	.word	0xbe2aaaab
 800c790:	3e2aaaab 	.word	0x3e2aaaab

0800c794 <atanf>:
 800c794:	b538      	push	{r3, r4, r5, lr}
 800c796:	ee10 5a10 	vmov	r5, s0
 800c79a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c79e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800c7a2:	eef0 7a40 	vmov.f32	s15, s0
 800c7a6:	db10      	blt.n	800c7ca <atanf+0x36>
 800c7a8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c7ac:	dd04      	ble.n	800c7b8 <atanf+0x24>
 800c7ae:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c7b2:	eeb0 0a67 	vmov.f32	s0, s15
 800c7b6:	bd38      	pop	{r3, r4, r5, pc}
 800c7b8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c8f0 <atanf+0x15c>
 800c7bc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c8f4 <atanf+0x160>
 800c7c0:	2d00      	cmp	r5, #0
 800c7c2:	bfd8      	it	le
 800c7c4:	eef0 7a40 	vmovle.f32	s15, s0
 800c7c8:	e7f3      	b.n	800c7b2 <atanf+0x1e>
 800c7ca:	4b4b      	ldr	r3, [pc, #300]	; (800c8f8 <atanf+0x164>)
 800c7cc:	429c      	cmp	r4, r3
 800c7ce:	dc10      	bgt.n	800c7f2 <atanf+0x5e>
 800c7d0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800c7d4:	da0a      	bge.n	800c7ec <atanf+0x58>
 800c7d6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c8fc <atanf+0x168>
 800c7da:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c7de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ea:	dce2      	bgt.n	800c7b2 <atanf+0x1e>
 800c7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c7f0:	e013      	b.n	800c81a <atanf+0x86>
 800c7f2:	f000 f8a3 	bl	800c93c <fabsf>
 800c7f6:	4b42      	ldr	r3, [pc, #264]	; (800c900 <atanf+0x16c>)
 800c7f8:	429c      	cmp	r4, r3
 800c7fa:	dc4f      	bgt.n	800c89c <atanf+0x108>
 800c7fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c800:	429c      	cmp	r4, r3
 800c802:	dc41      	bgt.n	800c888 <atanf+0xf4>
 800c804:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c808:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c80c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c810:	2300      	movs	r3, #0
 800c812:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c816:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c81a:	1c5a      	adds	r2, r3, #1
 800c81c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800c820:	eddf 5a38 	vldr	s11, [pc, #224]	; 800c904 <atanf+0x170>
 800c824:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800c908 <atanf+0x174>
 800c828:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800c90c <atanf+0x178>
 800c82c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800c910 <atanf+0x17c>
 800c830:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c834:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c838:	eddf 5a36 	vldr	s11, [pc, #216]	; 800c914 <atanf+0x180>
 800c83c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c840:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800c918 <atanf+0x184>
 800c844:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c848:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c91c <atanf+0x188>
 800c84c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c850:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800c920 <atanf+0x18c>
 800c854:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c858:	eddf 5a32 	vldr	s11, [pc, #200]	; 800c924 <atanf+0x190>
 800c85c:	eee7 5a05 	vfma.f32	s11, s14, s10
 800c860:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800c928 <atanf+0x194>
 800c864:	eea5 5a87 	vfma.f32	s10, s11, s14
 800c868:	eddf 5a30 	vldr	s11, [pc, #192]	; 800c92c <atanf+0x198>
 800c86c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800c870:	eea5 0a87 	vfma.f32	s0, s11, s14
 800c874:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c878:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c87c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c880:	d121      	bne.n	800c8c6 <atanf+0x132>
 800c882:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c886:	e794      	b.n	800c7b2 <atanf+0x1e>
 800c888:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c88c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c890:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c894:	2301      	movs	r3, #1
 800c896:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c89a:	e7be      	b.n	800c81a <atanf+0x86>
 800c89c:	4b24      	ldr	r3, [pc, #144]	; (800c930 <atanf+0x19c>)
 800c89e:	429c      	cmp	r4, r3
 800c8a0:	dc0b      	bgt.n	800c8ba <atanf+0x126>
 800c8a2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c8a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c8b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8b8:	e7af      	b.n	800c81a <atanf+0x86>
 800c8ba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c8be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	e7a9      	b.n	800c81a <atanf+0x86>
 800c8c6:	4a1b      	ldr	r2, [pc, #108]	; (800c934 <atanf+0x1a0>)
 800c8c8:	491b      	ldr	r1, [pc, #108]	; (800c938 <atanf+0x1a4>)
 800c8ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c8ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c8d2:	ed93 7a00 	vldr	s14, [r3]
 800c8d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c8da:	2d00      	cmp	r5, #0
 800c8dc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c8e0:	ed92 0a00 	vldr	s0, [r2]
 800c8e4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c8e8:	bfb8      	it	lt
 800c8ea:	eef1 7a67 	vneglt.f32	s15, s15
 800c8ee:	e760      	b.n	800c7b2 <atanf+0x1e>
 800c8f0:	3fc90fdb 	.word	0x3fc90fdb
 800c8f4:	bfc90fdb 	.word	0xbfc90fdb
 800c8f8:	3edfffff 	.word	0x3edfffff
 800c8fc:	7149f2ca 	.word	0x7149f2ca
 800c900:	3f97ffff 	.word	0x3f97ffff
 800c904:	3c8569d7 	.word	0x3c8569d7
 800c908:	3d4bda59 	.word	0x3d4bda59
 800c90c:	bd15a221 	.word	0xbd15a221
 800c910:	be4ccccd 	.word	0xbe4ccccd
 800c914:	3d886b35 	.word	0x3d886b35
 800c918:	3dba2e6e 	.word	0x3dba2e6e
 800c91c:	3e124925 	.word	0x3e124925
 800c920:	3eaaaaab 	.word	0x3eaaaaab
 800c924:	bd6ef16b 	.word	0xbd6ef16b
 800c928:	bd9d8795 	.word	0xbd9d8795
 800c92c:	bde38e38 	.word	0xbde38e38
 800c930:	401bffff 	.word	0x401bffff
 800c934:	0800df6c 	.word	0x0800df6c
 800c938:	0800df7c 	.word	0x0800df7c

0800c93c <fabsf>:
 800c93c:	ee10 3a10 	vmov	r3, s0
 800c940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c944:	ee00 3a10 	vmov	s0, r3
 800c948:	4770      	bx	lr
	...

0800c94c <floorf>:
 800c94c:	ee10 3a10 	vmov	r3, s0
 800c950:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c954:	3a7f      	subs	r2, #127	; 0x7f
 800c956:	2a16      	cmp	r2, #22
 800c958:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c95c:	dc2a      	bgt.n	800c9b4 <floorf+0x68>
 800c95e:	2a00      	cmp	r2, #0
 800c960:	da11      	bge.n	800c986 <floorf+0x3a>
 800c962:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c9c4 <floorf+0x78>
 800c966:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c96a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c972:	dd05      	ble.n	800c980 <floorf+0x34>
 800c974:	2b00      	cmp	r3, #0
 800c976:	da23      	bge.n	800c9c0 <floorf+0x74>
 800c978:	4a13      	ldr	r2, [pc, #76]	; (800c9c8 <floorf+0x7c>)
 800c97a:	2900      	cmp	r1, #0
 800c97c:	bf18      	it	ne
 800c97e:	4613      	movne	r3, r2
 800c980:	ee00 3a10 	vmov	s0, r3
 800c984:	4770      	bx	lr
 800c986:	4911      	ldr	r1, [pc, #68]	; (800c9cc <floorf+0x80>)
 800c988:	4111      	asrs	r1, r2
 800c98a:	420b      	tst	r3, r1
 800c98c:	d0fa      	beq.n	800c984 <floorf+0x38>
 800c98e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c9c4 <floorf+0x78>
 800c992:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c996:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c99e:	ddef      	ble.n	800c980 <floorf+0x34>
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	bfbe      	ittt	lt
 800c9a4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c9a8:	fa40 f202 	asrlt.w	r2, r0, r2
 800c9ac:	189b      	addlt	r3, r3, r2
 800c9ae:	ea23 0301 	bic.w	r3, r3, r1
 800c9b2:	e7e5      	b.n	800c980 <floorf+0x34>
 800c9b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c9b8:	d3e4      	bcc.n	800c984 <floorf+0x38>
 800c9ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c9be:	4770      	bx	lr
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	e7dd      	b.n	800c980 <floorf+0x34>
 800c9c4:	7149f2ca 	.word	0x7149f2ca
 800c9c8:	bf800000 	.word	0xbf800000
 800c9cc:	007fffff 	.word	0x007fffff

0800c9d0 <nanf>:
 800c9d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c9d8 <nanf+0x8>
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	7fc00000 	.word	0x7fc00000

0800c9dc <scalbnf>:
 800c9dc:	ee10 3a10 	vmov	r3, s0
 800c9e0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c9e4:	d025      	beq.n	800ca32 <scalbnf+0x56>
 800c9e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c9ea:	d302      	bcc.n	800c9f2 <scalbnf+0x16>
 800c9ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c9f0:	4770      	bx	lr
 800c9f2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c9f6:	d122      	bne.n	800ca3e <scalbnf+0x62>
 800c9f8:	4b2a      	ldr	r3, [pc, #168]	; (800caa4 <scalbnf+0xc8>)
 800c9fa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800caa8 <scalbnf+0xcc>
 800c9fe:	4298      	cmp	r0, r3
 800ca00:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ca04:	db16      	blt.n	800ca34 <scalbnf+0x58>
 800ca06:	ee10 3a10 	vmov	r3, s0
 800ca0a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ca0e:	3a19      	subs	r2, #25
 800ca10:	4402      	add	r2, r0
 800ca12:	2afe      	cmp	r2, #254	; 0xfe
 800ca14:	dd15      	ble.n	800ca42 <scalbnf+0x66>
 800ca16:	ee10 3a10 	vmov	r3, s0
 800ca1a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800caac <scalbnf+0xd0>
 800ca1e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800cab0 <scalbnf+0xd4>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	eeb0 7a67 	vmov.f32	s14, s15
 800ca28:	bfb8      	it	lt
 800ca2a:	eef0 7a66 	vmovlt.f32	s15, s13
 800ca2e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ca32:	4770      	bx	lr
 800ca34:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800cab4 <scalbnf+0xd8>
 800ca38:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ca3c:	4770      	bx	lr
 800ca3e:	0dd2      	lsrs	r2, r2, #23
 800ca40:	e7e6      	b.n	800ca10 <scalbnf+0x34>
 800ca42:	2a00      	cmp	r2, #0
 800ca44:	dd06      	ble.n	800ca54 <scalbnf+0x78>
 800ca46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca4a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ca4e:	ee00 3a10 	vmov	s0, r3
 800ca52:	4770      	bx	lr
 800ca54:	f112 0f16 	cmn.w	r2, #22
 800ca58:	da1a      	bge.n	800ca90 <scalbnf+0xb4>
 800ca5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ca5e:	4298      	cmp	r0, r3
 800ca60:	ee10 3a10 	vmov	r3, s0
 800ca64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca68:	dd0a      	ble.n	800ca80 <scalbnf+0xa4>
 800ca6a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800caac <scalbnf+0xd0>
 800ca6e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800cab0 <scalbnf+0xd4>
 800ca72:	eef0 7a40 	vmov.f32	s15, s0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	bf18      	it	ne
 800ca7a:	eeb0 0a47 	vmovne.f32	s0, s14
 800ca7e:	e7db      	b.n	800ca38 <scalbnf+0x5c>
 800ca80:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800cab4 <scalbnf+0xd8>
 800ca84:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800cab8 <scalbnf+0xdc>
 800ca88:	eef0 7a40 	vmov.f32	s15, s0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	e7f3      	b.n	800ca78 <scalbnf+0x9c>
 800ca90:	3219      	adds	r2, #25
 800ca92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca96:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ca9a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800cabc <scalbnf+0xe0>
 800ca9e:	ee07 3a10 	vmov	s14, r3
 800caa2:	e7c4      	b.n	800ca2e <scalbnf+0x52>
 800caa4:	ffff3cb0 	.word	0xffff3cb0
 800caa8:	4c000000 	.word	0x4c000000
 800caac:	7149f2ca 	.word	0x7149f2ca
 800cab0:	f149f2ca 	.word	0xf149f2ca
 800cab4:	0da24260 	.word	0x0da24260
 800cab8:	8da24260 	.word	0x8da24260
 800cabc:	33000000 	.word	0x33000000

0800cac0 <__errno>:
 800cac0:	4b01      	ldr	r3, [pc, #4]	; (800cac8 <__errno+0x8>)
 800cac2:	6818      	ldr	r0, [r3, #0]
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop
 800cac8:	2000002c 	.word	0x2000002c

0800cacc <__libc_init_array>:
 800cacc:	b570      	push	{r4, r5, r6, lr}
 800cace:	4d0d      	ldr	r5, [pc, #52]	; (800cb04 <__libc_init_array+0x38>)
 800cad0:	4c0d      	ldr	r4, [pc, #52]	; (800cb08 <__libc_init_array+0x3c>)
 800cad2:	1b64      	subs	r4, r4, r5
 800cad4:	10a4      	asrs	r4, r4, #2
 800cad6:	2600      	movs	r6, #0
 800cad8:	42a6      	cmp	r6, r4
 800cada:	d109      	bne.n	800caf0 <__libc_init_array+0x24>
 800cadc:	4d0b      	ldr	r5, [pc, #44]	; (800cb0c <__libc_init_array+0x40>)
 800cade:	4c0c      	ldr	r4, [pc, #48]	; (800cb10 <__libc_init_array+0x44>)
 800cae0:	f001 f822 	bl	800db28 <_init>
 800cae4:	1b64      	subs	r4, r4, r5
 800cae6:	10a4      	asrs	r4, r4, #2
 800cae8:	2600      	movs	r6, #0
 800caea:	42a6      	cmp	r6, r4
 800caec:	d105      	bne.n	800cafa <__libc_init_array+0x2e>
 800caee:	bd70      	pop	{r4, r5, r6, pc}
 800caf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800caf4:	4798      	blx	r3
 800caf6:	3601      	adds	r6, #1
 800caf8:	e7ee      	b.n	800cad8 <__libc_init_array+0xc>
 800cafa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cafe:	4798      	blx	r3
 800cb00:	3601      	adds	r6, #1
 800cb02:	e7f2      	b.n	800caea <__libc_init_array+0x1e>
 800cb04:	0800e0e0 	.word	0x0800e0e0
 800cb08:	0800e0e0 	.word	0x0800e0e0
 800cb0c:	0800e0e0 	.word	0x0800e0e0
 800cb10:	0800e0e4 	.word	0x0800e0e4

0800cb14 <memset>:
 800cb14:	4402      	add	r2, r0
 800cb16:	4603      	mov	r3, r0
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d100      	bne.n	800cb1e <memset+0xa>
 800cb1c:	4770      	bx	lr
 800cb1e:	f803 1b01 	strb.w	r1, [r3], #1
 800cb22:	e7f9      	b.n	800cb18 <memset+0x4>

0800cb24 <rand>:
 800cb24:	4b17      	ldr	r3, [pc, #92]	; (800cb84 <rand+0x60>)
 800cb26:	b510      	push	{r4, lr}
 800cb28:	681c      	ldr	r4, [r3, #0]
 800cb2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cb2c:	b9b3      	cbnz	r3, 800cb5c <rand+0x38>
 800cb2e:	2018      	movs	r0, #24
 800cb30:	f000 f868 	bl	800cc04 <malloc>
 800cb34:	63a0      	str	r0, [r4, #56]	; 0x38
 800cb36:	b928      	cbnz	r0, 800cb44 <rand+0x20>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	4b13      	ldr	r3, [pc, #76]	; (800cb88 <rand+0x64>)
 800cb3c:	4813      	ldr	r0, [pc, #76]	; (800cb8c <rand+0x68>)
 800cb3e:	214e      	movs	r1, #78	; 0x4e
 800cb40:	f000 f830 	bl	800cba4 <__assert_func>
 800cb44:	4a12      	ldr	r2, [pc, #72]	; (800cb90 <rand+0x6c>)
 800cb46:	4b13      	ldr	r3, [pc, #76]	; (800cb94 <rand+0x70>)
 800cb48:	e9c0 2300 	strd	r2, r3, [r0]
 800cb4c:	4b12      	ldr	r3, [pc, #72]	; (800cb98 <rand+0x74>)
 800cb4e:	6083      	str	r3, [r0, #8]
 800cb50:	230b      	movs	r3, #11
 800cb52:	8183      	strh	r3, [r0, #12]
 800cb54:	2201      	movs	r2, #1
 800cb56:	2300      	movs	r3, #0
 800cb58:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cb5c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb5e:	480f      	ldr	r0, [pc, #60]	; (800cb9c <rand+0x78>)
 800cb60:	690a      	ldr	r2, [r1, #16]
 800cb62:	694b      	ldr	r3, [r1, #20]
 800cb64:	4c0e      	ldr	r4, [pc, #56]	; (800cba0 <rand+0x7c>)
 800cb66:	4350      	muls	r0, r2
 800cb68:	fb04 0003 	mla	r0, r4, r3, r0
 800cb6c:	fba2 3404 	umull	r3, r4, r2, r4
 800cb70:	1c5a      	adds	r2, r3, #1
 800cb72:	4404      	add	r4, r0
 800cb74:	f144 0000 	adc.w	r0, r4, #0
 800cb78:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800cb7c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800cb80:	bd10      	pop	{r4, pc}
 800cb82:	bf00      	nop
 800cb84:	2000002c 	.word	0x2000002c
 800cb88:	0800df90 	.word	0x0800df90
 800cb8c:	0800dfa7 	.word	0x0800dfa7
 800cb90:	abcd330e 	.word	0xabcd330e
 800cb94:	e66d1234 	.word	0xe66d1234
 800cb98:	0005deec 	.word	0x0005deec
 800cb9c:	5851f42d 	.word	0x5851f42d
 800cba0:	4c957f2d 	.word	0x4c957f2d

0800cba4 <__assert_func>:
 800cba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cba6:	4614      	mov	r4, r2
 800cba8:	461a      	mov	r2, r3
 800cbaa:	4b09      	ldr	r3, [pc, #36]	; (800cbd0 <__assert_func+0x2c>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4605      	mov	r5, r0
 800cbb0:	68d8      	ldr	r0, [r3, #12]
 800cbb2:	b14c      	cbz	r4, 800cbc8 <__assert_func+0x24>
 800cbb4:	4b07      	ldr	r3, [pc, #28]	; (800cbd4 <__assert_func+0x30>)
 800cbb6:	9100      	str	r1, [sp, #0]
 800cbb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbbc:	4906      	ldr	r1, [pc, #24]	; (800cbd8 <__assert_func+0x34>)
 800cbbe:	462b      	mov	r3, r5
 800cbc0:	f000 f80e 	bl	800cbe0 <fiprintf>
 800cbc4:	f000 fc8e 	bl	800d4e4 <abort>
 800cbc8:	4b04      	ldr	r3, [pc, #16]	; (800cbdc <__assert_func+0x38>)
 800cbca:	461c      	mov	r4, r3
 800cbcc:	e7f3      	b.n	800cbb6 <__assert_func+0x12>
 800cbce:	bf00      	nop
 800cbd0:	2000002c 	.word	0x2000002c
 800cbd4:	0800e006 	.word	0x0800e006
 800cbd8:	0800e013 	.word	0x0800e013
 800cbdc:	0800e041 	.word	0x0800e041

0800cbe0 <fiprintf>:
 800cbe0:	b40e      	push	{r1, r2, r3}
 800cbe2:	b503      	push	{r0, r1, lr}
 800cbe4:	4601      	mov	r1, r0
 800cbe6:	ab03      	add	r3, sp, #12
 800cbe8:	4805      	ldr	r0, [pc, #20]	; (800cc00 <fiprintf+0x20>)
 800cbea:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbee:	6800      	ldr	r0, [r0, #0]
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	f000 f8e3 	bl	800cdbc <_vfiprintf_r>
 800cbf6:	b002      	add	sp, #8
 800cbf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbfc:	b003      	add	sp, #12
 800cbfe:	4770      	bx	lr
 800cc00:	2000002c 	.word	0x2000002c

0800cc04 <malloc>:
 800cc04:	4b02      	ldr	r3, [pc, #8]	; (800cc10 <malloc+0xc>)
 800cc06:	4601      	mov	r1, r0
 800cc08:	6818      	ldr	r0, [r3, #0]
 800cc0a:	f000 b853 	b.w	800ccb4 <_malloc_r>
 800cc0e:	bf00      	nop
 800cc10:	2000002c 	.word	0x2000002c

0800cc14 <_free_r>:
 800cc14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc16:	2900      	cmp	r1, #0
 800cc18:	d048      	beq.n	800ccac <_free_r+0x98>
 800cc1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc1e:	9001      	str	r0, [sp, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f1a1 0404 	sub.w	r4, r1, #4
 800cc26:	bfb8      	it	lt
 800cc28:	18e4      	addlt	r4, r4, r3
 800cc2a:	f000 fe81 	bl	800d930 <__malloc_lock>
 800cc2e:	4a20      	ldr	r2, [pc, #128]	; (800ccb0 <_free_r+0x9c>)
 800cc30:	9801      	ldr	r0, [sp, #4]
 800cc32:	6813      	ldr	r3, [r2, #0]
 800cc34:	4615      	mov	r5, r2
 800cc36:	b933      	cbnz	r3, 800cc46 <_free_r+0x32>
 800cc38:	6063      	str	r3, [r4, #4]
 800cc3a:	6014      	str	r4, [r2, #0]
 800cc3c:	b003      	add	sp, #12
 800cc3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc42:	f000 be7b 	b.w	800d93c <__malloc_unlock>
 800cc46:	42a3      	cmp	r3, r4
 800cc48:	d90b      	bls.n	800cc62 <_free_r+0x4e>
 800cc4a:	6821      	ldr	r1, [r4, #0]
 800cc4c:	1862      	adds	r2, r4, r1
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	bf04      	itt	eq
 800cc52:	681a      	ldreq	r2, [r3, #0]
 800cc54:	685b      	ldreq	r3, [r3, #4]
 800cc56:	6063      	str	r3, [r4, #4]
 800cc58:	bf04      	itt	eq
 800cc5a:	1852      	addeq	r2, r2, r1
 800cc5c:	6022      	streq	r2, [r4, #0]
 800cc5e:	602c      	str	r4, [r5, #0]
 800cc60:	e7ec      	b.n	800cc3c <_free_r+0x28>
 800cc62:	461a      	mov	r2, r3
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	b10b      	cbz	r3, 800cc6c <_free_r+0x58>
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	d9fa      	bls.n	800cc62 <_free_r+0x4e>
 800cc6c:	6811      	ldr	r1, [r2, #0]
 800cc6e:	1855      	adds	r5, r2, r1
 800cc70:	42a5      	cmp	r5, r4
 800cc72:	d10b      	bne.n	800cc8c <_free_r+0x78>
 800cc74:	6824      	ldr	r4, [r4, #0]
 800cc76:	4421      	add	r1, r4
 800cc78:	1854      	adds	r4, r2, r1
 800cc7a:	42a3      	cmp	r3, r4
 800cc7c:	6011      	str	r1, [r2, #0]
 800cc7e:	d1dd      	bne.n	800cc3c <_free_r+0x28>
 800cc80:	681c      	ldr	r4, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	6053      	str	r3, [r2, #4]
 800cc86:	4421      	add	r1, r4
 800cc88:	6011      	str	r1, [r2, #0]
 800cc8a:	e7d7      	b.n	800cc3c <_free_r+0x28>
 800cc8c:	d902      	bls.n	800cc94 <_free_r+0x80>
 800cc8e:	230c      	movs	r3, #12
 800cc90:	6003      	str	r3, [r0, #0]
 800cc92:	e7d3      	b.n	800cc3c <_free_r+0x28>
 800cc94:	6825      	ldr	r5, [r4, #0]
 800cc96:	1961      	adds	r1, r4, r5
 800cc98:	428b      	cmp	r3, r1
 800cc9a:	bf04      	itt	eq
 800cc9c:	6819      	ldreq	r1, [r3, #0]
 800cc9e:	685b      	ldreq	r3, [r3, #4]
 800cca0:	6063      	str	r3, [r4, #4]
 800cca2:	bf04      	itt	eq
 800cca4:	1949      	addeq	r1, r1, r5
 800cca6:	6021      	streq	r1, [r4, #0]
 800cca8:	6054      	str	r4, [r2, #4]
 800ccaa:	e7c7      	b.n	800cc3c <_free_r+0x28>
 800ccac:	b003      	add	sp, #12
 800ccae:	bd30      	pop	{r4, r5, pc}
 800ccb0:	20000be0 	.word	0x20000be0

0800ccb4 <_malloc_r>:
 800ccb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb6:	1ccd      	adds	r5, r1, #3
 800ccb8:	f025 0503 	bic.w	r5, r5, #3
 800ccbc:	3508      	adds	r5, #8
 800ccbe:	2d0c      	cmp	r5, #12
 800ccc0:	bf38      	it	cc
 800ccc2:	250c      	movcc	r5, #12
 800ccc4:	2d00      	cmp	r5, #0
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	db01      	blt.n	800ccce <_malloc_r+0x1a>
 800ccca:	42a9      	cmp	r1, r5
 800cccc:	d903      	bls.n	800ccd6 <_malloc_r+0x22>
 800ccce:	230c      	movs	r3, #12
 800ccd0:	6033      	str	r3, [r6, #0]
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd6:	f000 fe2b 	bl	800d930 <__malloc_lock>
 800ccda:	4921      	ldr	r1, [pc, #132]	; (800cd60 <_malloc_r+0xac>)
 800ccdc:	680a      	ldr	r2, [r1, #0]
 800ccde:	4614      	mov	r4, r2
 800cce0:	b99c      	cbnz	r4, 800cd0a <_malloc_r+0x56>
 800cce2:	4f20      	ldr	r7, [pc, #128]	; (800cd64 <_malloc_r+0xb0>)
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	b923      	cbnz	r3, 800ccf2 <_malloc_r+0x3e>
 800cce8:	4621      	mov	r1, r4
 800ccea:	4630      	mov	r0, r6
 800ccec:	f000 fb2a 	bl	800d344 <_sbrk_r>
 800ccf0:	6038      	str	r0, [r7, #0]
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f000 fb25 	bl	800d344 <_sbrk_r>
 800ccfa:	1c43      	adds	r3, r0, #1
 800ccfc:	d123      	bne.n	800cd46 <_malloc_r+0x92>
 800ccfe:	230c      	movs	r3, #12
 800cd00:	6033      	str	r3, [r6, #0]
 800cd02:	4630      	mov	r0, r6
 800cd04:	f000 fe1a 	bl	800d93c <__malloc_unlock>
 800cd08:	e7e3      	b.n	800ccd2 <_malloc_r+0x1e>
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	1b5b      	subs	r3, r3, r5
 800cd0e:	d417      	bmi.n	800cd40 <_malloc_r+0x8c>
 800cd10:	2b0b      	cmp	r3, #11
 800cd12:	d903      	bls.n	800cd1c <_malloc_r+0x68>
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	441c      	add	r4, r3
 800cd18:	6025      	str	r5, [r4, #0]
 800cd1a:	e004      	b.n	800cd26 <_malloc_r+0x72>
 800cd1c:	6863      	ldr	r3, [r4, #4]
 800cd1e:	42a2      	cmp	r2, r4
 800cd20:	bf0c      	ite	eq
 800cd22:	600b      	streq	r3, [r1, #0]
 800cd24:	6053      	strne	r3, [r2, #4]
 800cd26:	4630      	mov	r0, r6
 800cd28:	f000 fe08 	bl	800d93c <__malloc_unlock>
 800cd2c:	f104 000b 	add.w	r0, r4, #11
 800cd30:	1d23      	adds	r3, r4, #4
 800cd32:	f020 0007 	bic.w	r0, r0, #7
 800cd36:	1ac2      	subs	r2, r0, r3
 800cd38:	d0cc      	beq.n	800ccd4 <_malloc_r+0x20>
 800cd3a:	1a1b      	subs	r3, r3, r0
 800cd3c:	50a3      	str	r3, [r4, r2]
 800cd3e:	e7c9      	b.n	800ccd4 <_malloc_r+0x20>
 800cd40:	4622      	mov	r2, r4
 800cd42:	6864      	ldr	r4, [r4, #4]
 800cd44:	e7cc      	b.n	800cce0 <_malloc_r+0x2c>
 800cd46:	1cc4      	adds	r4, r0, #3
 800cd48:	f024 0403 	bic.w	r4, r4, #3
 800cd4c:	42a0      	cmp	r0, r4
 800cd4e:	d0e3      	beq.n	800cd18 <_malloc_r+0x64>
 800cd50:	1a21      	subs	r1, r4, r0
 800cd52:	4630      	mov	r0, r6
 800cd54:	f000 faf6 	bl	800d344 <_sbrk_r>
 800cd58:	3001      	adds	r0, #1
 800cd5a:	d1dd      	bne.n	800cd18 <_malloc_r+0x64>
 800cd5c:	e7cf      	b.n	800ccfe <_malloc_r+0x4a>
 800cd5e:	bf00      	nop
 800cd60:	20000be0 	.word	0x20000be0
 800cd64:	20000be4 	.word	0x20000be4

0800cd68 <__sfputc_r>:
 800cd68:	6893      	ldr	r3, [r2, #8]
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	b410      	push	{r4}
 800cd70:	6093      	str	r3, [r2, #8]
 800cd72:	da08      	bge.n	800cd86 <__sfputc_r+0x1e>
 800cd74:	6994      	ldr	r4, [r2, #24]
 800cd76:	42a3      	cmp	r3, r4
 800cd78:	db01      	blt.n	800cd7e <__sfputc_r+0x16>
 800cd7a:	290a      	cmp	r1, #10
 800cd7c:	d103      	bne.n	800cd86 <__sfputc_r+0x1e>
 800cd7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd82:	f000 baef 	b.w	800d364 <__swbuf_r>
 800cd86:	6813      	ldr	r3, [r2, #0]
 800cd88:	1c58      	adds	r0, r3, #1
 800cd8a:	6010      	str	r0, [r2, #0]
 800cd8c:	7019      	strb	r1, [r3, #0]
 800cd8e:	4608      	mov	r0, r1
 800cd90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <__sfputs_r>:
 800cd96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd98:	4606      	mov	r6, r0
 800cd9a:	460f      	mov	r7, r1
 800cd9c:	4614      	mov	r4, r2
 800cd9e:	18d5      	adds	r5, r2, r3
 800cda0:	42ac      	cmp	r4, r5
 800cda2:	d101      	bne.n	800cda8 <__sfputs_r+0x12>
 800cda4:	2000      	movs	r0, #0
 800cda6:	e007      	b.n	800cdb8 <__sfputs_r+0x22>
 800cda8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdac:	463a      	mov	r2, r7
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f7ff ffda 	bl	800cd68 <__sfputc_r>
 800cdb4:	1c43      	adds	r3, r0, #1
 800cdb6:	d1f3      	bne.n	800cda0 <__sfputs_r+0xa>
 800cdb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cdbc <_vfiprintf_r>:
 800cdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc0:	460d      	mov	r5, r1
 800cdc2:	b09d      	sub	sp, #116	; 0x74
 800cdc4:	4614      	mov	r4, r2
 800cdc6:	4698      	mov	r8, r3
 800cdc8:	4606      	mov	r6, r0
 800cdca:	b118      	cbz	r0, 800cdd4 <_vfiprintf_r+0x18>
 800cdcc:	6983      	ldr	r3, [r0, #24]
 800cdce:	b90b      	cbnz	r3, 800cdd4 <_vfiprintf_r+0x18>
 800cdd0:	f000 fcaa 	bl	800d728 <__sinit>
 800cdd4:	4b89      	ldr	r3, [pc, #548]	; (800cffc <_vfiprintf_r+0x240>)
 800cdd6:	429d      	cmp	r5, r3
 800cdd8:	d11b      	bne.n	800ce12 <_vfiprintf_r+0x56>
 800cdda:	6875      	ldr	r5, [r6, #4]
 800cddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdde:	07d9      	lsls	r1, r3, #31
 800cde0:	d405      	bmi.n	800cdee <_vfiprintf_r+0x32>
 800cde2:	89ab      	ldrh	r3, [r5, #12]
 800cde4:	059a      	lsls	r2, r3, #22
 800cde6:	d402      	bmi.n	800cdee <_vfiprintf_r+0x32>
 800cde8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdea:	f000 fd3b 	bl	800d864 <__retarget_lock_acquire_recursive>
 800cdee:	89ab      	ldrh	r3, [r5, #12]
 800cdf0:	071b      	lsls	r3, r3, #28
 800cdf2:	d501      	bpl.n	800cdf8 <_vfiprintf_r+0x3c>
 800cdf4:	692b      	ldr	r3, [r5, #16]
 800cdf6:	b9eb      	cbnz	r3, 800ce34 <_vfiprintf_r+0x78>
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f000 fb04 	bl	800d408 <__swsetup_r>
 800ce00:	b1c0      	cbz	r0, 800ce34 <_vfiprintf_r+0x78>
 800ce02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce04:	07dc      	lsls	r4, r3, #31
 800ce06:	d50e      	bpl.n	800ce26 <_vfiprintf_r+0x6a>
 800ce08:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0c:	b01d      	add	sp, #116	; 0x74
 800ce0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce12:	4b7b      	ldr	r3, [pc, #492]	; (800d000 <_vfiprintf_r+0x244>)
 800ce14:	429d      	cmp	r5, r3
 800ce16:	d101      	bne.n	800ce1c <_vfiprintf_r+0x60>
 800ce18:	68b5      	ldr	r5, [r6, #8]
 800ce1a:	e7df      	b.n	800cddc <_vfiprintf_r+0x20>
 800ce1c:	4b79      	ldr	r3, [pc, #484]	; (800d004 <_vfiprintf_r+0x248>)
 800ce1e:	429d      	cmp	r5, r3
 800ce20:	bf08      	it	eq
 800ce22:	68f5      	ldreq	r5, [r6, #12]
 800ce24:	e7da      	b.n	800cddc <_vfiprintf_r+0x20>
 800ce26:	89ab      	ldrh	r3, [r5, #12]
 800ce28:	0598      	lsls	r0, r3, #22
 800ce2a:	d4ed      	bmi.n	800ce08 <_vfiprintf_r+0x4c>
 800ce2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce2e:	f000 fd1a 	bl	800d866 <__retarget_lock_release_recursive>
 800ce32:	e7e9      	b.n	800ce08 <_vfiprintf_r+0x4c>
 800ce34:	2300      	movs	r3, #0
 800ce36:	9309      	str	r3, [sp, #36]	; 0x24
 800ce38:	2320      	movs	r3, #32
 800ce3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce42:	2330      	movs	r3, #48	; 0x30
 800ce44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d008 <_vfiprintf_r+0x24c>
 800ce48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce4c:	f04f 0901 	mov.w	r9, #1
 800ce50:	4623      	mov	r3, r4
 800ce52:	469a      	mov	sl, r3
 800ce54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce58:	b10a      	cbz	r2, 800ce5e <_vfiprintf_r+0xa2>
 800ce5a:	2a25      	cmp	r2, #37	; 0x25
 800ce5c:	d1f9      	bne.n	800ce52 <_vfiprintf_r+0x96>
 800ce5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ce62:	d00b      	beq.n	800ce7c <_vfiprintf_r+0xc0>
 800ce64:	465b      	mov	r3, fp
 800ce66:	4622      	mov	r2, r4
 800ce68:	4629      	mov	r1, r5
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	f7ff ff93 	bl	800cd96 <__sfputs_r>
 800ce70:	3001      	adds	r0, #1
 800ce72:	f000 80aa 	beq.w	800cfca <_vfiprintf_r+0x20e>
 800ce76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce78:	445a      	add	r2, fp
 800ce7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ce7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 80a2 	beq.w	800cfca <_vfiprintf_r+0x20e>
 800ce86:	2300      	movs	r3, #0
 800ce88:	f04f 32ff 	mov.w	r2, #4294967295
 800ce8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce90:	f10a 0a01 	add.w	sl, sl, #1
 800ce94:	9304      	str	r3, [sp, #16]
 800ce96:	9307      	str	r3, [sp, #28]
 800ce98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ce9e:	4654      	mov	r4, sl
 800cea0:	2205      	movs	r2, #5
 800cea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cea6:	4858      	ldr	r0, [pc, #352]	; (800d008 <_vfiprintf_r+0x24c>)
 800cea8:	f7f3 f992 	bl	80001d0 <memchr>
 800ceac:	9a04      	ldr	r2, [sp, #16]
 800ceae:	b9d8      	cbnz	r0, 800cee8 <_vfiprintf_r+0x12c>
 800ceb0:	06d1      	lsls	r1, r2, #27
 800ceb2:	bf44      	itt	mi
 800ceb4:	2320      	movmi	r3, #32
 800ceb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceba:	0713      	lsls	r3, r2, #28
 800cebc:	bf44      	itt	mi
 800cebe:	232b      	movmi	r3, #43	; 0x2b
 800cec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cec4:	f89a 3000 	ldrb.w	r3, [sl]
 800cec8:	2b2a      	cmp	r3, #42	; 0x2a
 800ceca:	d015      	beq.n	800cef8 <_vfiprintf_r+0x13c>
 800cecc:	9a07      	ldr	r2, [sp, #28]
 800cece:	4654      	mov	r4, sl
 800ced0:	2000      	movs	r0, #0
 800ced2:	f04f 0c0a 	mov.w	ip, #10
 800ced6:	4621      	mov	r1, r4
 800ced8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cedc:	3b30      	subs	r3, #48	; 0x30
 800cede:	2b09      	cmp	r3, #9
 800cee0:	d94e      	bls.n	800cf80 <_vfiprintf_r+0x1c4>
 800cee2:	b1b0      	cbz	r0, 800cf12 <_vfiprintf_r+0x156>
 800cee4:	9207      	str	r2, [sp, #28]
 800cee6:	e014      	b.n	800cf12 <_vfiprintf_r+0x156>
 800cee8:	eba0 0308 	sub.w	r3, r0, r8
 800ceec:	fa09 f303 	lsl.w	r3, r9, r3
 800cef0:	4313      	orrs	r3, r2
 800cef2:	9304      	str	r3, [sp, #16]
 800cef4:	46a2      	mov	sl, r4
 800cef6:	e7d2      	b.n	800ce9e <_vfiprintf_r+0xe2>
 800cef8:	9b03      	ldr	r3, [sp, #12]
 800cefa:	1d19      	adds	r1, r3, #4
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	9103      	str	r1, [sp, #12]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	bfbb      	ittet	lt
 800cf04:	425b      	neglt	r3, r3
 800cf06:	f042 0202 	orrlt.w	r2, r2, #2
 800cf0a:	9307      	strge	r3, [sp, #28]
 800cf0c:	9307      	strlt	r3, [sp, #28]
 800cf0e:	bfb8      	it	lt
 800cf10:	9204      	strlt	r2, [sp, #16]
 800cf12:	7823      	ldrb	r3, [r4, #0]
 800cf14:	2b2e      	cmp	r3, #46	; 0x2e
 800cf16:	d10c      	bne.n	800cf32 <_vfiprintf_r+0x176>
 800cf18:	7863      	ldrb	r3, [r4, #1]
 800cf1a:	2b2a      	cmp	r3, #42	; 0x2a
 800cf1c:	d135      	bne.n	800cf8a <_vfiprintf_r+0x1ce>
 800cf1e:	9b03      	ldr	r3, [sp, #12]
 800cf20:	1d1a      	adds	r2, r3, #4
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	9203      	str	r2, [sp, #12]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	bfb8      	it	lt
 800cf2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf2e:	3402      	adds	r4, #2
 800cf30:	9305      	str	r3, [sp, #20]
 800cf32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d018 <_vfiprintf_r+0x25c>
 800cf36:	7821      	ldrb	r1, [r4, #0]
 800cf38:	2203      	movs	r2, #3
 800cf3a:	4650      	mov	r0, sl
 800cf3c:	f7f3 f948 	bl	80001d0 <memchr>
 800cf40:	b140      	cbz	r0, 800cf54 <_vfiprintf_r+0x198>
 800cf42:	2340      	movs	r3, #64	; 0x40
 800cf44:	eba0 000a 	sub.w	r0, r0, sl
 800cf48:	fa03 f000 	lsl.w	r0, r3, r0
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	4303      	orrs	r3, r0
 800cf50:	3401      	adds	r4, #1
 800cf52:	9304      	str	r3, [sp, #16]
 800cf54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf58:	482c      	ldr	r0, [pc, #176]	; (800d00c <_vfiprintf_r+0x250>)
 800cf5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf5e:	2206      	movs	r2, #6
 800cf60:	f7f3 f936 	bl	80001d0 <memchr>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d03f      	beq.n	800cfe8 <_vfiprintf_r+0x22c>
 800cf68:	4b29      	ldr	r3, [pc, #164]	; (800d010 <_vfiprintf_r+0x254>)
 800cf6a:	bb1b      	cbnz	r3, 800cfb4 <_vfiprintf_r+0x1f8>
 800cf6c:	9b03      	ldr	r3, [sp, #12]
 800cf6e:	3307      	adds	r3, #7
 800cf70:	f023 0307 	bic.w	r3, r3, #7
 800cf74:	3308      	adds	r3, #8
 800cf76:	9303      	str	r3, [sp, #12]
 800cf78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf7a:	443b      	add	r3, r7
 800cf7c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf7e:	e767      	b.n	800ce50 <_vfiprintf_r+0x94>
 800cf80:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf84:	460c      	mov	r4, r1
 800cf86:	2001      	movs	r0, #1
 800cf88:	e7a5      	b.n	800ced6 <_vfiprintf_r+0x11a>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	3401      	adds	r4, #1
 800cf8e:	9305      	str	r3, [sp, #20]
 800cf90:	4619      	mov	r1, r3
 800cf92:	f04f 0c0a 	mov.w	ip, #10
 800cf96:	4620      	mov	r0, r4
 800cf98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf9c:	3a30      	subs	r2, #48	; 0x30
 800cf9e:	2a09      	cmp	r2, #9
 800cfa0:	d903      	bls.n	800cfaa <_vfiprintf_r+0x1ee>
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d0c5      	beq.n	800cf32 <_vfiprintf_r+0x176>
 800cfa6:	9105      	str	r1, [sp, #20]
 800cfa8:	e7c3      	b.n	800cf32 <_vfiprintf_r+0x176>
 800cfaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfae:	4604      	mov	r4, r0
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e7f0      	b.n	800cf96 <_vfiprintf_r+0x1da>
 800cfb4:	ab03      	add	r3, sp, #12
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	462a      	mov	r2, r5
 800cfba:	4b16      	ldr	r3, [pc, #88]	; (800d014 <_vfiprintf_r+0x258>)
 800cfbc:	a904      	add	r1, sp, #16
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	f3af 8000 	nop.w
 800cfc4:	4607      	mov	r7, r0
 800cfc6:	1c78      	adds	r0, r7, #1
 800cfc8:	d1d6      	bne.n	800cf78 <_vfiprintf_r+0x1bc>
 800cfca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfcc:	07d9      	lsls	r1, r3, #31
 800cfce:	d405      	bmi.n	800cfdc <_vfiprintf_r+0x220>
 800cfd0:	89ab      	ldrh	r3, [r5, #12]
 800cfd2:	059a      	lsls	r2, r3, #22
 800cfd4:	d402      	bmi.n	800cfdc <_vfiprintf_r+0x220>
 800cfd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfd8:	f000 fc45 	bl	800d866 <__retarget_lock_release_recursive>
 800cfdc:	89ab      	ldrh	r3, [r5, #12]
 800cfde:	065b      	lsls	r3, r3, #25
 800cfe0:	f53f af12 	bmi.w	800ce08 <_vfiprintf_r+0x4c>
 800cfe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfe6:	e711      	b.n	800ce0c <_vfiprintf_r+0x50>
 800cfe8:	ab03      	add	r3, sp, #12
 800cfea:	9300      	str	r3, [sp, #0]
 800cfec:	462a      	mov	r2, r5
 800cfee:	4b09      	ldr	r3, [pc, #36]	; (800d014 <_vfiprintf_r+0x258>)
 800cff0:	a904      	add	r1, sp, #16
 800cff2:	4630      	mov	r0, r6
 800cff4:	f000 f880 	bl	800d0f8 <_printf_i>
 800cff8:	e7e4      	b.n	800cfc4 <_vfiprintf_r+0x208>
 800cffa:	bf00      	nop
 800cffc:	0800e098 	.word	0x0800e098
 800d000:	0800e0b8 	.word	0x0800e0b8
 800d004:	0800e078 	.word	0x0800e078
 800d008:	0800e042 	.word	0x0800e042
 800d00c:	0800e04c 	.word	0x0800e04c
 800d010:	00000000 	.word	0x00000000
 800d014:	0800cd97 	.word	0x0800cd97
 800d018:	0800e048 	.word	0x0800e048

0800d01c <_printf_common>:
 800d01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d020:	4616      	mov	r6, r2
 800d022:	4699      	mov	r9, r3
 800d024:	688a      	ldr	r2, [r1, #8]
 800d026:	690b      	ldr	r3, [r1, #16]
 800d028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d02c:	4293      	cmp	r3, r2
 800d02e:	bfb8      	it	lt
 800d030:	4613      	movlt	r3, r2
 800d032:	6033      	str	r3, [r6, #0]
 800d034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d038:	4607      	mov	r7, r0
 800d03a:	460c      	mov	r4, r1
 800d03c:	b10a      	cbz	r2, 800d042 <_printf_common+0x26>
 800d03e:	3301      	adds	r3, #1
 800d040:	6033      	str	r3, [r6, #0]
 800d042:	6823      	ldr	r3, [r4, #0]
 800d044:	0699      	lsls	r1, r3, #26
 800d046:	bf42      	ittt	mi
 800d048:	6833      	ldrmi	r3, [r6, #0]
 800d04a:	3302      	addmi	r3, #2
 800d04c:	6033      	strmi	r3, [r6, #0]
 800d04e:	6825      	ldr	r5, [r4, #0]
 800d050:	f015 0506 	ands.w	r5, r5, #6
 800d054:	d106      	bne.n	800d064 <_printf_common+0x48>
 800d056:	f104 0a19 	add.w	sl, r4, #25
 800d05a:	68e3      	ldr	r3, [r4, #12]
 800d05c:	6832      	ldr	r2, [r6, #0]
 800d05e:	1a9b      	subs	r3, r3, r2
 800d060:	42ab      	cmp	r3, r5
 800d062:	dc26      	bgt.n	800d0b2 <_printf_common+0x96>
 800d064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d068:	1e13      	subs	r3, r2, #0
 800d06a:	6822      	ldr	r2, [r4, #0]
 800d06c:	bf18      	it	ne
 800d06e:	2301      	movne	r3, #1
 800d070:	0692      	lsls	r2, r2, #26
 800d072:	d42b      	bmi.n	800d0cc <_printf_common+0xb0>
 800d074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d078:	4649      	mov	r1, r9
 800d07a:	4638      	mov	r0, r7
 800d07c:	47c0      	blx	r8
 800d07e:	3001      	adds	r0, #1
 800d080:	d01e      	beq.n	800d0c0 <_printf_common+0xa4>
 800d082:	6823      	ldr	r3, [r4, #0]
 800d084:	68e5      	ldr	r5, [r4, #12]
 800d086:	6832      	ldr	r2, [r6, #0]
 800d088:	f003 0306 	and.w	r3, r3, #6
 800d08c:	2b04      	cmp	r3, #4
 800d08e:	bf08      	it	eq
 800d090:	1aad      	subeq	r5, r5, r2
 800d092:	68a3      	ldr	r3, [r4, #8]
 800d094:	6922      	ldr	r2, [r4, #16]
 800d096:	bf0c      	ite	eq
 800d098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d09c:	2500      	movne	r5, #0
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	bfc4      	itt	gt
 800d0a2:	1a9b      	subgt	r3, r3, r2
 800d0a4:	18ed      	addgt	r5, r5, r3
 800d0a6:	2600      	movs	r6, #0
 800d0a8:	341a      	adds	r4, #26
 800d0aa:	42b5      	cmp	r5, r6
 800d0ac:	d11a      	bne.n	800d0e4 <_printf_common+0xc8>
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	e008      	b.n	800d0c4 <_printf_common+0xa8>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	4652      	mov	r2, sl
 800d0b6:	4649      	mov	r1, r9
 800d0b8:	4638      	mov	r0, r7
 800d0ba:	47c0      	blx	r8
 800d0bc:	3001      	adds	r0, #1
 800d0be:	d103      	bne.n	800d0c8 <_printf_common+0xac>
 800d0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c8:	3501      	adds	r5, #1
 800d0ca:	e7c6      	b.n	800d05a <_printf_common+0x3e>
 800d0cc:	18e1      	adds	r1, r4, r3
 800d0ce:	1c5a      	adds	r2, r3, #1
 800d0d0:	2030      	movs	r0, #48	; 0x30
 800d0d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0d6:	4422      	add	r2, r4
 800d0d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0e0:	3302      	adds	r3, #2
 800d0e2:	e7c7      	b.n	800d074 <_printf_common+0x58>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	4622      	mov	r2, r4
 800d0e8:	4649      	mov	r1, r9
 800d0ea:	4638      	mov	r0, r7
 800d0ec:	47c0      	blx	r8
 800d0ee:	3001      	adds	r0, #1
 800d0f0:	d0e6      	beq.n	800d0c0 <_printf_common+0xa4>
 800d0f2:	3601      	adds	r6, #1
 800d0f4:	e7d9      	b.n	800d0aa <_printf_common+0x8e>
	...

0800d0f8 <_printf_i>:
 800d0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	4691      	mov	r9, r2
 800d100:	7e27      	ldrb	r7, [r4, #24]
 800d102:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d104:	2f78      	cmp	r7, #120	; 0x78
 800d106:	4680      	mov	r8, r0
 800d108:	469a      	mov	sl, r3
 800d10a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d10e:	d807      	bhi.n	800d120 <_printf_i+0x28>
 800d110:	2f62      	cmp	r7, #98	; 0x62
 800d112:	d80a      	bhi.n	800d12a <_printf_i+0x32>
 800d114:	2f00      	cmp	r7, #0
 800d116:	f000 80d8 	beq.w	800d2ca <_printf_i+0x1d2>
 800d11a:	2f58      	cmp	r7, #88	; 0x58
 800d11c:	f000 80a3 	beq.w	800d266 <_printf_i+0x16e>
 800d120:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d128:	e03a      	b.n	800d1a0 <_printf_i+0xa8>
 800d12a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d12e:	2b15      	cmp	r3, #21
 800d130:	d8f6      	bhi.n	800d120 <_printf_i+0x28>
 800d132:	a001      	add	r0, pc, #4	; (adr r0, 800d138 <_printf_i+0x40>)
 800d134:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d138:	0800d191 	.word	0x0800d191
 800d13c:	0800d1a5 	.word	0x0800d1a5
 800d140:	0800d121 	.word	0x0800d121
 800d144:	0800d121 	.word	0x0800d121
 800d148:	0800d121 	.word	0x0800d121
 800d14c:	0800d121 	.word	0x0800d121
 800d150:	0800d1a5 	.word	0x0800d1a5
 800d154:	0800d121 	.word	0x0800d121
 800d158:	0800d121 	.word	0x0800d121
 800d15c:	0800d121 	.word	0x0800d121
 800d160:	0800d121 	.word	0x0800d121
 800d164:	0800d2b1 	.word	0x0800d2b1
 800d168:	0800d1d5 	.word	0x0800d1d5
 800d16c:	0800d293 	.word	0x0800d293
 800d170:	0800d121 	.word	0x0800d121
 800d174:	0800d121 	.word	0x0800d121
 800d178:	0800d2d3 	.word	0x0800d2d3
 800d17c:	0800d121 	.word	0x0800d121
 800d180:	0800d1d5 	.word	0x0800d1d5
 800d184:	0800d121 	.word	0x0800d121
 800d188:	0800d121 	.word	0x0800d121
 800d18c:	0800d29b 	.word	0x0800d29b
 800d190:	680b      	ldr	r3, [r1, #0]
 800d192:	1d1a      	adds	r2, r3, #4
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	600a      	str	r2, [r1, #0]
 800d198:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d19c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e0a3      	b.n	800d2ec <_printf_i+0x1f4>
 800d1a4:	6825      	ldr	r5, [r4, #0]
 800d1a6:	6808      	ldr	r0, [r1, #0]
 800d1a8:	062e      	lsls	r6, r5, #24
 800d1aa:	f100 0304 	add.w	r3, r0, #4
 800d1ae:	d50a      	bpl.n	800d1c6 <_printf_i+0xce>
 800d1b0:	6805      	ldr	r5, [r0, #0]
 800d1b2:	600b      	str	r3, [r1, #0]
 800d1b4:	2d00      	cmp	r5, #0
 800d1b6:	da03      	bge.n	800d1c0 <_printf_i+0xc8>
 800d1b8:	232d      	movs	r3, #45	; 0x2d
 800d1ba:	426d      	negs	r5, r5
 800d1bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1c0:	485e      	ldr	r0, [pc, #376]	; (800d33c <_printf_i+0x244>)
 800d1c2:	230a      	movs	r3, #10
 800d1c4:	e019      	b.n	800d1fa <_printf_i+0x102>
 800d1c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d1ca:	6805      	ldr	r5, [r0, #0]
 800d1cc:	600b      	str	r3, [r1, #0]
 800d1ce:	bf18      	it	ne
 800d1d0:	b22d      	sxthne	r5, r5
 800d1d2:	e7ef      	b.n	800d1b4 <_printf_i+0xbc>
 800d1d4:	680b      	ldr	r3, [r1, #0]
 800d1d6:	6825      	ldr	r5, [r4, #0]
 800d1d8:	1d18      	adds	r0, r3, #4
 800d1da:	6008      	str	r0, [r1, #0]
 800d1dc:	0628      	lsls	r0, r5, #24
 800d1de:	d501      	bpl.n	800d1e4 <_printf_i+0xec>
 800d1e0:	681d      	ldr	r5, [r3, #0]
 800d1e2:	e002      	b.n	800d1ea <_printf_i+0xf2>
 800d1e4:	0669      	lsls	r1, r5, #25
 800d1e6:	d5fb      	bpl.n	800d1e0 <_printf_i+0xe8>
 800d1e8:	881d      	ldrh	r5, [r3, #0]
 800d1ea:	4854      	ldr	r0, [pc, #336]	; (800d33c <_printf_i+0x244>)
 800d1ec:	2f6f      	cmp	r7, #111	; 0x6f
 800d1ee:	bf0c      	ite	eq
 800d1f0:	2308      	moveq	r3, #8
 800d1f2:	230a      	movne	r3, #10
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1fa:	6866      	ldr	r6, [r4, #4]
 800d1fc:	60a6      	str	r6, [r4, #8]
 800d1fe:	2e00      	cmp	r6, #0
 800d200:	bfa2      	ittt	ge
 800d202:	6821      	ldrge	r1, [r4, #0]
 800d204:	f021 0104 	bicge.w	r1, r1, #4
 800d208:	6021      	strge	r1, [r4, #0]
 800d20a:	b90d      	cbnz	r5, 800d210 <_printf_i+0x118>
 800d20c:	2e00      	cmp	r6, #0
 800d20e:	d04d      	beq.n	800d2ac <_printf_i+0x1b4>
 800d210:	4616      	mov	r6, r2
 800d212:	fbb5 f1f3 	udiv	r1, r5, r3
 800d216:	fb03 5711 	mls	r7, r3, r1, r5
 800d21a:	5dc7      	ldrb	r7, [r0, r7]
 800d21c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d220:	462f      	mov	r7, r5
 800d222:	42bb      	cmp	r3, r7
 800d224:	460d      	mov	r5, r1
 800d226:	d9f4      	bls.n	800d212 <_printf_i+0x11a>
 800d228:	2b08      	cmp	r3, #8
 800d22a:	d10b      	bne.n	800d244 <_printf_i+0x14c>
 800d22c:	6823      	ldr	r3, [r4, #0]
 800d22e:	07df      	lsls	r7, r3, #31
 800d230:	d508      	bpl.n	800d244 <_printf_i+0x14c>
 800d232:	6923      	ldr	r3, [r4, #16]
 800d234:	6861      	ldr	r1, [r4, #4]
 800d236:	4299      	cmp	r1, r3
 800d238:	bfde      	ittt	le
 800d23a:	2330      	movle	r3, #48	; 0x30
 800d23c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d240:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d244:	1b92      	subs	r2, r2, r6
 800d246:	6122      	str	r2, [r4, #16]
 800d248:	f8cd a000 	str.w	sl, [sp]
 800d24c:	464b      	mov	r3, r9
 800d24e:	aa03      	add	r2, sp, #12
 800d250:	4621      	mov	r1, r4
 800d252:	4640      	mov	r0, r8
 800d254:	f7ff fee2 	bl	800d01c <_printf_common>
 800d258:	3001      	adds	r0, #1
 800d25a:	d14c      	bne.n	800d2f6 <_printf_i+0x1fe>
 800d25c:	f04f 30ff 	mov.w	r0, #4294967295
 800d260:	b004      	add	sp, #16
 800d262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d266:	4835      	ldr	r0, [pc, #212]	; (800d33c <_printf_i+0x244>)
 800d268:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d26c:	6823      	ldr	r3, [r4, #0]
 800d26e:	680e      	ldr	r6, [r1, #0]
 800d270:	061f      	lsls	r7, r3, #24
 800d272:	f856 5b04 	ldr.w	r5, [r6], #4
 800d276:	600e      	str	r6, [r1, #0]
 800d278:	d514      	bpl.n	800d2a4 <_printf_i+0x1ac>
 800d27a:	07d9      	lsls	r1, r3, #31
 800d27c:	bf44      	itt	mi
 800d27e:	f043 0320 	orrmi.w	r3, r3, #32
 800d282:	6023      	strmi	r3, [r4, #0]
 800d284:	b91d      	cbnz	r5, 800d28e <_printf_i+0x196>
 800d286:	6823      	ldr	r3, [r4, #0]
 800d288:	f023 0320 	bic.w	r3, r3, #32
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	2310      	movs	r3, #16
 800d290:	e7b0      	b.n	800d1f4 <_printf_i+0xfc>
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	f043 0320 	orr.w	r3, r3, #32
 800d298:	6023      	str	r3, [r4, #0]
 800d29a:	2378      	movs	r3, #120	; 0x78
 800d29c:	4828      	ldr	r0, [pc, #160]	; (800d340 <_printf_i+0x248>)
 800d29e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2a2:	e7e3      	b.n	800d26c <_printf_i+0x174>
 800d2a4:	065e      	lsls	r6, r3, #25
 800d2a6:	bf48      	it	mi
 800d2a8:	b2ad      	uxthmi	r5, r5
 800d2aa:	e7e6      	b.n	800d27a <_printf_i+0x182>
 800d2ac:	4616      	mov	r6, r2
 800d2ae:	e7bb      	b.n	800d228 <_printf_i+0x130>
 800d2b0:	680b      	ldr	r3, [r1, #0]
 800d2b2:	6826      	ldr	r6, [r4, #0]
 800d2b4:	6960      	ldr	r0, [r4, #20]
 800d2b6:	1d1d      	adds	r5, r3, #4
 800d2b8:	600d      	str	r5, [r1, #0]
 800d2ba:	0635      	lsls	r5, r6, #24
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	d501      	bpl.n	800d2c4 <_printf_i+0x1cc>
 800d2c0:	6018      	str	r0, [r3, #0]
 800d2c2:	e002      	b.n	800d2ca <_printf_i+0x1d2>
 800d2c4:	0671      	lsls	r1, r6, #25
 800d2c6:	d5fb      	bpl.n	800d2c0 <_printf_i+0x1c8>
 800d2c8:	8018      	strh	r0, [r3, #0]
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	6123      	str	r3, [r4, #16]
 800d2ce:	4616      	mov	r6, r2
 800d2d0:	e7ba      	b.n	800d248 <_printf_i+0x150>
 800d2d2:	680b      	ldr	r3, [r1, #0]
 800d2d4:	1d1a      	adds	r2, r3, #4
 800d2d6:	600a      	str	r2, [r1, #0]
 800d2d8:	681e      	ldr	r6, [r3, #0]
 800d2da:	6862      	ldr	r2, [r4, #4]
 800d2dc:	2100      	movs	r1, #0
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f7f2 ff76 	bl	80001d0 <memchr>
 800d2e4:	b108      	cbz	r0, 800d2ea <_printf_i+0x1f2>
 800d2e6:	1b80      	subs	r0, r0, r6
 800d2e8:	6060      	str	r0, [r4, #4]
 800d2ea:	6863      	ldr	r3, [r4, #4]
 800d2ec:	6123      	str	r3, [r4, #16]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2f4:	e7a8      	b.n	800d248 <_printf_i+0x150>
 800d2f6:	6923      	ldr	r3, [r4, #16]
 800d2f8:	4632      	mov	r2, r6
 800d2fa:	4649      	mov	r1, r9
 800d2fc:	4640      	mov	r0, r8
 800d2fe:	47d0      	blx	sl
 800d300:	3001      	adds	r0, #1
 800d302:	d0ab      	beq.n	800d25c <_printf_i+0x164>
 800d304:	6823      	ldr	r3, [r4, #0]
 800d306:	079b      	lsls	r3, r3, #30
 800d308:	d413      	bmi.n	800d332 <_printf_i+0x23a>
 800d30a:	68e0      	ldr	r0, [r4, #12]
 800d30c:	9b03      	ldr	r3, [sp, #12]
 800d30e:	4298      	cmp	r0, r3
 800d310:	bfb8      	it	lt
 800d312:	4618      	movlt	r0, r3
 800d314:	e7a4      	b.n	800d260 <_printf_i+0x168>
 800d316:	2301      	movs	r3, #1
 800d318:	4632      	mov	r2, r6
 800d31a:	4649      	mov	r1, r9
 800d31c:	4640      	mov	r0, r8
 800d31e:	47d0      	blx	sl
 800d320:	3001      	adds	r0, #1
 800d322:	d09b      	beq.n	800d25c <_printf_i+0x164>
 800d324:	3501      	adds	r5, #1
 800d326:	68e3      	ldr	r3, [r4, #12]
 800d328:	9903      	ldr	r1, [sp, #12]
 800d32a:	1a5b      	subs	r3, r3, r1
 800d32c:	42ab      	cmp	r3, r5
 800d32e:	dcf2      	bgt.n	800d316 <_printf_i+0x21e>
 800d330:	e7eb      	b.n	800d30a <_printf_i+0x212>
 800d332:	2500      	movs	r5, #0
 800d334:	f104 0619 	add.w	r6, r4, #25
 800d338:	e7f5      	b.n	800d326 <_printf_i+0x22e>
 800d33a:	bf00      	nop
 800d33c:	0800e053 	.word	0x0800e053
 800d340:	0800e064 	.word	0x0800e064

0800d344 <_sbrk_r>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	4d06      	ldr	r5, [pc, #24]	; (800d360 <_sbrk_r+0x1c>)
 800d348:	2300      	movs	r3, #0
 800d34a:	4604      	mov	r4, r0
 800d34c:	4608      	mov	r0, r1
 800d34e:	602b      	str	r3, [r5, #0]
 800d350:	f7f8 fdce 	bl	8005ef0 <_sbrk>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	d102      	bne.n	800d35e <_sbrk_r+0x1a>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	b103      	cbz	r3, 800d35e <_sbrk_r+0x1a>
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	2000131c 	.word	0x2000131c

0800d364 <__swbuf_r>:
 800d364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d366:	460e      	mov	r6, r1
 800d368:	4614      	mov	r4, r2
 800d36a:	4605      	mov	r5, r0
 800d36c:	b118      	cbz	r0, 800d376 <__swbuf_r+0x12>
 800d36e:	6983      	ldr	r3, [r0, #24]
 800d370:	b90b      	cbnz	r3, 800d376 <__swbuf_r+0x12>
 800d372:	f000 f9d9 	bl	800d728 <__sinit>
 800d376:	4b21      	ldr	r3, [pc, #132]	; (800d3fc <__swbuf_r+0x98>)
 800d378:	429c      	cmp	r4, r3
 800d37a:	d12b      	bne.n	800d3d4 <__swbuf_r+0x70>
 800d37c:	686c      	ldr	r4, [r5, #4]
 800d37e:	69a3      	ldr	r3, [r4, #24]
 800d380:	60a3      	str	r3, [r4, #8]
 800d382:	89a3      	ldrh	r3, [r4, #12]
 800d384:	071a      	lsls	r2, r3, #28
 800d386:	d52f      	bpl.n	800d3e8 <__swbuf_r+0x84>
 800d388:	6923      	ldr	r3, [r4, #16]
 800d38a:	b36b      	cbz	r3, 800d3e8 <__swbuf_r+0x84>
 800d38c:	6923      	ldr	r3, [r4, #16]
 800d38e:	6820      	ldr	r0, [r4, #0]
 800d390:	1ac0      	subs	r0, r0, r3
 800d392:	6963      	ldr	r3, [r4, #20]
 800d394:	b2f6      	uxtb	r6, r6
 800d396:	4283      	cmp	r3, r0
 800d398:	4637      	mov	r7, r6
 800d39a:	dc04      	bgt.n	800d3a6 <__swbuf_r+0x42>
 800d39c:	4621      	mov	r1, r4
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f000 f92e 	bl	800d600 <_fflush_r>
 800d3a4:	bb30      	cbnz	r0, 800d3f4 <__swbuf_r+0x90>
 800d3a6:	68a3      	ldr	r3, [r4, #8]
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	60a3      	str	r3, [r4, #8]
 800d3ac:	6823      	ldr	r3, [r4, #0]
 800d3ae:	1c5a      	adds	r2, r3, #1
 800d3b0:	6022      	str	r2, [r4, #0]
 800d3b2:	701e      	strb	r6, [r3, #0]
 800d3b4:	6963      	ldr	r3, [r4, #20]
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	4283      	cmp	r3, r0
 800d3ba:	d004      	beq.n	800d3c6 <__swbuf_r+0x62>
 800d3bc:	89a3      	ldrh	r3, [r4, #12]
 800d3be:	07db      	lsls	r3, r3, #31
 800d3c0:	d506      	bpl.n	800d3d0 <__swbuf_r+0x6c>
 800d3c2:	2e0a      	cmp	r6, #10
 800d3c4:	d104      	bne.n	800d3d0 <__swbuf_r+0x6c>
 800d3c6:	4621      	mov	r1, r4
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	f000 f919 	bl	800d600 <_fflush_r>
 800d3ce:	b988      	cbnz	r0, 800d3f4 <__swbuf_r+0x90>
 800d3d0:	4638      	mov	r0, r7
 800d3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3d4:	4b0a      	ldr	r3, [pc, #40]	; (800d400 <__swbuf_r+0x9c>)
 800d3d6:	429c      	cmp	r4, r3
 800d3d8:	d101      	bne.n	800d3de <__swbuf_r+0x7a>
 800d3da:	68ac      	ldr	r4, [r5, #8]
 800d3dc:	e7cf      	b.n	800d37e <__swbuf_r+0x1a>
 800d3de:	4b09      	ldr	r3, [pc, #36]	; (800d404 <__swbuf_r+0xa0>)
 800d3e0:	429c      	cmp	r4, r3
 800d3e2:	bf08      	it	eq
 800d3e4:	68ec      	ldreq	r4, [r5, #12]
 800d3e6:	e7ca      	b.n	800d37e <__swbuf_r+0x1a>
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	f000 f80c 	bl	800d408 <__swsetup_r>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d0cb      	beq.n	800d38c <__swbuf_r+0x28>
 800d3f4:	f04f 37ff 	mov.w	r7, #4294967295
 800d3f8:	e7ea      	b.n	800d3d0 <__swbuf_r+0x6c>
 800d3fa:	bf00      	nop
 800d3fc:	0800e098 	.word	0x0800e098
 800d400:	0800e0b8 	.word	0x0800e0b8
 800d404:	0800e078 	.word	0x0800e078

0800d408 <__swsetup_r>:
 800d408:	4b32      	ldr	r3, [pc, #200]	; (800d4d4 <__swsetup_r+0xcc>)
 800d40a:	b570      	push	{r4, r5, r6, lr}
 800d40c:	681d      	ldr	r5, [r3, #0]
 800d40e:	4606      	mov	r6, r0
 800d410:	460c      	mov	r4, r1
 800d412:	b125      	cbz	r5, 800d41e <__swsetup_r+0x16>
 800d414:	69ab      	ldr	r3, [r5, #24]
 800d416:	b913      	cbnz	r3, 800d41e <__swsetup_r+0x16>
 800d418:	4628      	mov	r0, r5
 800d41a:	f000 f985 	bl	800d728 <__sinit>
 800d41e:	4b2e      	ldr	r3, [pc, #184]	; (800d4d8 <__swsetup_r+0xd0>)
 800d420:	429c      	cmp	r4, r3
 800d422:	d10f      	bne.n	800d444 <__swsetup_r+0x3c>
 800d424:	686c      	ldr	r4, [r5, #4]
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d42c:	0719      	lsls	r1, r3, #28
 800d42e:	d42c      	bmi.n	800d48a <__swsetup_r+0x82>
 800d430:	06dd      	lsls	r5, r3, #27
 800d432:	d411      	bmi.n	800d458 <__swsetup_r+0x50>
 800d434:	2309      	movs	r3, #9
 800d436:	6033      	str	r3, [r6, #0]
 800d438:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d43c:	81a3      	strh	r3, [r4, #12]
 800d43e:	f04f 30ff 	mov.w	r0, #4294967295
 800d442:	e03e      	b.n	800d4c2 <__swsetup_r+0xba>
 800d444:	4b25      	ldr	r3, [pc, #148]	; (800d4dc <__swsetup_r+0xd4>)
 800d446:	429c      	cmp	r4, r3
 800d448:	d101      	bne.n	800d44e <__swsetup_r+0x46>
 800d44a:	68ac      	ldr	r4, [r5, #8]
 800d44c:	e7eb      	b.n	800d426 <__swsetup_r+0x1e>
 800d44e:	4b24      	ldr	r3, [pc, #144]	; (800d4e0 <__swsetup_r+0xd8>)
 800d450:	429c      	cmp	r4, r3
 800d452:	bf08      	it	eq
 800d454:	68ec      	ldreq	r4, [r5, #12]
 800d456:	e7e6      	b.n	800d426 <__swsetup_r+0x1e>
 800d458:	0758      	lsls	r0, r3, #29
 800d45a:	d512      	bpl.n	800d482 <__swsetup_r+0x7a>
 800d45c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d45e:	b141      	cbz	r1, 800d472 <__swsetup_r+0x6a>
 800d460:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d464:	4299      	cmp	r1, r3
 800d466:	d002      	beq.n	800d46e <__swsetup_r+0x66>
 800d468:	4630      	mov	r0, r6
 800d46a:	f7ff fbd3 	bl	800cc14 <_free_r>
 800d46e:	2300      	movs	r3, #0
 800d470:	6363      	str	r3, [r4, #52]	; 0x34
 800d472:	89a3      	ldrh	r3, [r4, #12]
 800d474:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d478:	81a3      	strh	r3, [r4, #12]
 800d47a:	2300      	movs	r3, #0
 800d47c:	6063      	str	r3, [r4, #4]
 800d47e:	6923      	ldr	r3, [r4, #16]
 800d480:	6023      	str	r3, [r4, #0]
 800d482:	89a3      	ldrh	r3, [r4, #12]
 800d484:	f043 0308 	orr.w	r3, r3, #8
 800d488:	81a3      	strh	r3, [r4, #12]
 800d48a:	6923      	ldr	r3, [r4, #16]
 800d48c:	b94b      	cbnz	r3, 800d4a2 <__swsetup_r+0x9a>
 800d48e:	89a3      	ldrh	r3, [r4, #12]
 800d490:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d498:	d003      	beq.n	800d4a2 <__swsetup_r+0x9a>
 800d49a:	4621      	mov	r1, r4
 800d49c:	4630      	mov	r0, r6
 800d49e:	f000 fa07 	bl	800d8b0 <__smakebuf_r>
 800d4a2:	89a0      	ldrh	r0, [r4, #12]
 800d4a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4a8:	f010 0301 	ands.w	r3, r0, #1
 800d4ac:	d00a      	beq.n	800d4c4 <__swsetup_r+0xbc>
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	60a3      	str	r3, [r4, #8]
 800d4b2:	6963      	ldr	r3, [r4, #20]
 800d4b4:	425b      	negs	r3, r3
 800d4b6:	61a3      	str	r3, [r4, #24]
 800d4b8:	6923      	ldr	r3, [r4, #16]
 800d4ba:	b943      	cbnz	r3, 800d4ce <__swsetup_r+0xc6>
 800d4bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4c0:	d1ba      	bne.n	800d438 <__swsetup_r+0x30>
 800d4c2:	bd70      	pop	{r4, r5, r6, pc}
 800d4c4:	0781      	lsls	r1, r0, #30
 800d4c6:	bf58      	it	pl
 800d4c8:	6963      	ldrpl	r3, [r4, #20]
 800d4ca:	60a3      	str	r3, [r4, #8]
 800d4cc:	e7f4      	b.n	800d4b8 <__swsetup_r+0xb0>
 800d4ce:	2000      	movs	r0, #0
 800d4d0:	e7f7      	b.n	800d4c2 <__swsetup_r+0xba>
 800d4d2:	bf00      	nop
 800d4d4:	2000002c 	.word	0x2000002c
 800d4d8:	0800e098 	.word	0x0800e098
 800d4dc:	0800e0b8 	.word	0x0800e0b8
 800d4e0:	0800e078 	.word	0x0800e078

0800d4e4 <abort>:
 800d4e4:	b508      	push	{r3, lr}
 800d4e6:	2006      	movs	r0, #6
 800d4e8:	f000 fa56 	bl	800d998 <raise>
 800d4ec:	2001      	movs	r0, #1
 800d4ee:	f7f8 fc87 	bl	8005e00 <_exit>
	...

0800d4f4 <__sflush_r>:
 800d4f4:	898a      	ldrh	r2, [r1, #12]
 800d4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fa:	4605      	mov	r5, r0
 800d4fc:	0710      	lsls	r0, r2, #28
 800d4fe:	460c      	mov	r4, r1
 800d500:	d458      	bmi.n	800d5b4 <__sflush_r+0xc0>
 800d502:	684b      	ldr	r3, [r1, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	dc05      	bgt.n	800d514 <__sflush_r+0x20>
 800d508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	dc02      	bgt.n	800d514 <__sflush_r+0x20>
 800d50e:	2000      	movs	r0, #0
 800d510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d516:	2e00      	cmp	r6, #0
 800d518:	d0f9      	beq.n	800d50e <__sflush_r+0x1a>
 800d51a:	2300      	movs	r3, #0
 800d51c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d520:	682f      	ldr	r7, [r5, #0]
 800d522:	602b      	str	r3, [r5, #0]
 800d524:	d032      	beq.n	800d58c <__sflush_r+0x98>
 800d526:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d528:	89a3      	ldrh	r3, [r4, #12]
 800d52a:	075a      	lsls	r2, r3, #29
 800d52c:	d505      	bpl.n	800d53a <__sflush_r+0x46>
 800d52e:	6863      	ldr	r3, [r4, #4]
 800d530:	1ac0      	subs	r0, r0, r3
 800d532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d534:	b10b      	cbz	r3, 800d53a <__sflush_r+0x46>
 800d536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d538:	1ac0      	subs	r0, r0, r3
 800d53a:	2300      	movs	r3, #0
 800d53c:	4602      	mov	r2, r0
 800d53e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d540:	6a21      	ldr	r1, [r4, #32]
 800d542:	4628      	mov	r0, r5
 800d544:	47b0      	blx	r6
 800d546:	1c43      	adds	r3, r0, #1
 800d548:	89a3      	ldrh	r3, [r4, #12]
 800d54a:	d106      	bne.n	800d55a <__sflush_r+0x66>
 800d54c:	6829      	ldr	r1, [r5, #0]
 800d54e:	291d      	cmp	r1, #29
 800d550:	d82c      	bhi.n	800d5ac <__sflush_r+0xb8>
 800d552:	4a2a      	ldr	r2, [pc, #168]	; (800d5fc <__sflush_r+0x108>)
 800d554:	40ca      	lsrs	r2, r1
 800d556:	07d6      	lsls	r6, r2, #31
 800d558:	d528      	bpl.n	800d5ac <__sflush_r+0xb8>
 800d55a:	2200      	movs	r2, #0
 800d55c:	6062      	str	r2, [r4, #4]
 800d55e:	04d9      	lsls	r1, r3, #19
 800d560:	6922      	ldr	r2, [r4, #16]
 800d562:	6022      	str	r2, [r4, #0]
 800d564:	d504      	bpl.n	800d570 <__sflush_r+0x7c>
 800d566:	1c42      	adds	r2, r0, #1
 800d568:	d101      	bne.n	800d56e <__sflush_r+0x7a>
 800d56a:	682b      	ldr	r3, [r5, #0]
 800d56c:	b903      	cbnz	r3, 800d570 <__sflush_r+0x7c>
 800d56e:	6560      	str	r0, [r4, #84]	; 0x54
 800d570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d572:	602f      	str	r7, [r5, #0]
 800d574:	2900      	cmp	r1, #0
 800d576:	d0ca      	beq.n	800d50e <__sflush_r+0x1a>
 800d578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d57c:	4299      	cmp	r1, r3
 800d57e:	d002      	beq.n	800d586 <__sflush_r+0x92>
 800d580:	4628      	mov	r0, r5
 800d582:	f7ff fb47 	bl	800cc14 <_free_r>
 800d586:	2000      	movs	r0, #0
 800d588:	6360      	str	r0, [r4, #52]	; 0x34
 800d58a:	e7c1      	b.n	800d510 <__sflush_r+0x1c>
 800d58c:	6a21      	ldr	r1, [r4, #32]
 800d58e:	2301      	movs	r3, #1
 800d590:	4628      	mov	r0, r5
 800d592:	47b0      	blx	r6
 800d594:	1c41      	adds	r1, r0, #1
 800d596:	d1c7      	bne.n	800d528 <__sflush_r+0x34>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d0c4      	beq.n	800d528 <__sflush_r+0x34>
 800d59e:	2b1d      	cmp	r3, #29
 800d5a0:	d001      	beq.n	800d5a6 <__sflush_r+0xb2>
 800d5a2:	2b16      	cmp	r3, #22
 800d5a4:	d101      	bne.n	800d5aa <__sflush_r+0xb6>
 800d5a6:	602f      	str	r7, [r5, #0]
 800d5a8:	e7b1      	b.n	800d50e <__sflush_r+0x1a>
 800d5aa:	89a3      	ldrh	r3, [r4, #12]
 800d5ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5b0:	81a3      	strh	r3, [r4, #12]
 800d5b2:	e7ad      	b.n	800d510 <__sflush_r+0x1c>
 800d5b4:	690f      	ldr	r7, [r1, #16]
 800d5b6:	2f00      	cmp	r7, #0
 800d5b8:	d0a9      	beq.n	800d50e <__sflush_r+0x1a>
 800d5ba:	0793      	lsls	r3, r2, #30
 800d5bc:	680e      	ldr	r6, [r1, #0]
 800d5be:	bf08      	it	eq
 800d5c0:	694b      	ldreq	r3, [r1, #20]
 800d5c2:	600f      	str	r7, [r1, #0]
 800d5c4:	bf18      	it	ne
 800d5c6:	2300      	movne	r3, #0
 800d5c8:	eba6 0807 	sub.w	r8, r6, r7
 800d5cc:	608b      	str	r3, [r1, #8]
 800d5ce:	f1b8 0f00 	cmp.w	r8, #0
 800d5d2:	dd9c      	ble.n	800d50e <__sflush_r+0x1a>
 800d5d4:	6a21      	ldr	r1, [r4, #32]
 800d5d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5d8:	4643      	mov	r3, r8
 800d5da:	463a      	mov	r2, r7
 800d5dc:	4628      	mov	r0, r5
 800d5de:	47b0      	blx	r6
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	dc06      	bgt.n	800d5f2 <__sflush_r+0xfe>
 800d5e4:	89a3      	ldrh	r3, [r4, #12]
 800d5e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5ea:	81a3      	strh	r3, [r4, #12]
 800d5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f0:	e78e      	b.n	800d510 <__sflush_r+0x1c>
 800d5f2:	4407      	add	r7, r0
 800d5f4:	eba8 0800 	sub.w	r8, r8, r0
 800d5f8:	e7e9      	b.n	800d5ce <__sflush_r+0xda>
 800d5fa:	bf00      	nop
 800d5fc:	20400001 	.word	0x20400001

0800d600 <_fflush_r>:
 800d600:	b538      	push	{r3, r4, r5, lr}
 800d602:	690b      	ldr	r3, [r1, #16]
 800d604:	4605      	mov	r5, r0
 800d606:	460c      	mov	r4, r1
 800d608:	b913      	cbnz	r3, 800d610 <_fflush_r+0x10>
 800d60a:	2500      	movs	r5, #0
 800d60c:	4628      	mov	r0, r5
 800d60e:	bd38      	pop	{r3, r4, r5, pc}
 800d610:	b118      	cbz	r0, 800d61a <_fflush_r+0x1a>
 800d612:	6983      	ldr	r3, [r0, #24]
 800d614:	b90b      	cbnz	r3, 800d61a <_fflush_r+0x1a>
 800d616:	f000 f887 	bl	800d728 <__sinit>
 800d61a:	4b14      	ldr	r3, [pc, #80]	; (800d66c <_fflush_r+0x6c>)
 800d61c:	429c      	cmp	r4, r3
 800d61e:	d11b      	bne.n	800d658 <_fflush_r+0x58>
 800d620:	686c      	ldr	r4, [r5, #4]
 800d622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d0ef      	beq.n	800d60a <_fflush_r+0xa>
 800d62a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d62c:	07d0      	lsls	r0, r2, #31
 800d62e:	d404      	bmi.n	800d63a <_fflush_r+0x3a>
 800d630:	0599      	lsls	r1, r3, #22
 800d632:	d402      	bmi.n	800d63a <_fflush_r+0x3a>
 800d634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d636:	f000 f915 	bl	800d864 <__retarget_lock_acquire_recursive>
 800d63a:	4628      	mov	r0, r5
 800d63c:	4621      	mov	r1, r4
 800d63e:	f7ff ff59 	bl	800d4f4 <__sflush_r>
 800d642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d644:	07da      	lsls	r2, r3, #31
 800d646:	4605      	mov	r5, r0
 800d648:	d4e0      	bmi.n	800d60c <_fflush_r+0xc>
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	059b      	lsls	r3, r3, #22
 800d64e:	d4dd      	bmi.n	800d60c <_fflush_r+0xc>
 800d650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d652:	f000 f908 	bl	800d866 <__retarget_lock_release_recursive>
 800d656:	e7d9      	b.n	800d60c <_fflush_r+0xc>
 800d658:	4b05      	ldr	r3, [pc, #20]	; (800d670 <_fflush_r+0x70>)
 800d65a:	429c      	cmp	r4, r3
 800d65c:	d101      	bne.n	800d662 <_fflush_r+0x62>
 800d65e:	68ac      	ldr	r4, [r5, #8]
 800d660:	e7df      	b.n	800d622 <_fflush_r+0x22>
 800d662:	4b04      	ldr	r3, [pc, #16]	; (800d674 <_fflush_r+0x74>)
 800d664:	429c      	cmp	r4, r3
 800d666:	bf08      	it	eq
 800d668:	68ec      	ldreq	r4, [r5, #12]
 800d66a:	e7da      	b.n	800d622 <_fflush_r+0x22>
 800d66c:	0800e098 	.word	0x0800e098
 800d670:	0800e0b8 	.word	0x0800e0b8
 800d674:	0800e078 	.word	0x0800e078

0800d678 <std>:
 800d678:	2300      	movs	r3, #0
 800d67a:	b510      	push	{r4, lr}
 800d67c:	4604      	mov	r4, r0
 800d67e:	e9c0 3300 	strd	r3, r3, [r0]
 800d682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d686:	6083      	str	r3, [r0, #8]
 800d688:	8181      	strh	r1, [r0, #12]
 800d68a:	6643      	str	r3, [r0, #100]	; 0x64
 800d68c:	81c2      	strh	r2, [r0, #14]
 800d68e:	6183      	str	r3, [r0, #24]
 800d690:	4619      	mov	r1, r3
 800d692:	2208      	movs	r2, #8
 800d694:	305c      	adds	r0, #92	; 0x5c
 800d696:	f7ff fa3d 	bl	800cb14 <memset>
 800d69a:	4b05      	ldr	r3, [pc, #20]	; (800d6b0 <std+0x38>)
 800d69c:	6263      	str	r3, [r4, #36]	; 0x24
 800d69e:	4b05      	ldr	r3, [pc, #20]	; (800d6b4 <std+0x3c>)
 800d6a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d6a2:	4b05      	ldr	r3, [pc, #20]	; (800d6b8 <std+0x40>)
 800d6a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6a6:	4b05      	ldr	r3, [pc, #20]	; (800d6bc <std+0x44>)
 800d6a8:	6224      	str	r4, [r4, #32]
 800d6aa:	6323      	str	r3, [r4, #48]	; 0x30
 800d6ac:	bd10      	pop	{r4, pc}
 800d6ae:	bf00      	nop
 800d6b0:	0800d9d1 	.word	0x0800d9d1
 800d6b4:	0800d9f3 	.word	0x0800d9f3
 800d6b8:	0800da2b 	.word	0x0800da2b
 800d6bc:	0800da4f 	.word	0x0800da4f

0800d6c0 <_cleanup_r>:
 800d6c0:	4901      	ldr	r1, [pc, #4]	; (800d6c8 <_cleanup_r+0x8>)
 800d6c2:	f000 b8af 	b.w	800d824 <_fwalk_reent>
 800d6c6:	bf00      	nop
 800d6c8:	0800d601 	.word	0x0800d601

0800d6cc <__sfmoreglue>:
 800d6cc:	b570      	push	{r4, r5, r6, lr}
 800d6ce:	1e4a      	subs	r2, r1, #1
 800d6d0:	2568      	movs	r5, #104	; 0x68
 800d6d2:	4355      	muls	r5, r2
 800d6d4:	460e      	mov	r6, r1
 800d6d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d6da:	f7ff faeb 	bl	800ccb4 <_malloc_r>
 800d6de:	4604      	mov	r4, r0
 800d6e0:	b140      	cbz	r0, 800d6f4 <__sfmoreglue+0x28>
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	e9c0 1600 	strd	r1, r6, [r0]
 800d6e8:	300c      	adds	r0, #12
 800d6ea:	60a0      	str	r0, [r4, #8]
 800d6ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d6f0:	f7ff fa10 	bl	800cb14 <memset>
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	bd70      	pop	{r4, r5, r6, pc}

0800d6f8 <__sfp_lock_acquire>:
 800d6f8:	4801      	ldr	r0, [pc, #4]	; (800d700 <__sfp_lock_acquire+0x8>)
 800d6fa:	f000 b8b3 	b.w	800d864 <__retarget_lock_acquire_recursive>
 800d6fe:	bf00      	nop
 800d700:	20001318 	.word	0x20001318

0800d704 <__sfp_lock_release>:
 800d704:	4801      	ldr	r0, [pc, #4]	; (800d70c <__sfp_lock_release+0x8>)
 800d706:	f000 b8ae 	b.w	800d866 <__retarget_lock_release_recursive>
 800d70a:	bf00      	nop
 800d70c:	20001318 	.word	0x20001318

0800d710 <__sinit_lock_acquire>:
 800d710:	4801      	ldr	r0, [pc, #4]	; (800d718 <__sinit_lock_acquire+0x8>)
 800d712:	f000 b8a7 	b.w	800d864 <__retarget_lock_acquire_recursive>
 800d716:	bf00      	nop
 800d718:	20001313 	.word	0x20001313

0800d71c <__sinit_lock_release>:
 800d71c:	4801      	ldr	r0, [pc, #4]	; (800d724 <__sinit_lock_release+0x8>)
 800d71e:	f000 b8a2 	b.w	800d866 <__retarget_lock_release_recursive>
 800d722:	bf00      	nop
 800d724:	20001313 	.word	0x20001313

0800d728 <__sinit>:
 800d728:	b510      	push	{r4, lr}
 800d72a:	4604      	mov	r4, r0
 800d72c:	f7ff fff0 	bl	800d710 <__sinit_lock_acquire>
 800d730:	69a3      	ldr	r3, [r4, #24]
 800d732:	b11b      	cbz	r3, 800d73c <__sinit+0x14>
 800d734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d738:	f7ff bff0 	b.w	800d71c <__sinit_lock_release>
 800d73c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d740:	6523      	str	r3, [r4, #80]	; 0x50
 800d742:	4b13      	ldr	r3, [pc, #76]	; (800d790 <__sinit+0x68>)
 800d744:	4a13      	ldr	r2, [pc, #76]	; (800d794 <__sinit+0x6c>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	62a2      	str	r2, [r4, #40]	; 0x28
 800d74a:	42a3      	cmp	r3, r4
 800d74c:	bf04      	itt	eq
 800d74e:	2301      	moveq	r3, #1
 800d750:	61a3      	streq	r3, [r4, #24]
 800d752:	4620      	mov	r0, r4
 800d754:	f000 f820 	bl	800d798 <__sfp>
 800d758:	6060      	str	r0, [r4, #4]
 800d75a:	4620      	mov	r0, r4
 800d75c:	f000 f81c 	bl	800d798 <__sfp>
 800d760:	60a0      	str	r0, [r4, #8]
 800d762:	4620      	mov	r0, r4
 800d764:	f000 f818 	bl	800d798 <__sfp>
 800d768:	2200      	movs	r2, #0
 800d76a:	60e0      	str	r0, [r4, #12]
 800d76c:	2104      	movs	r1, #4
 800d76e:	6860      	ldr	r0, [r4, #4]
 800d770:	f7ff ff82 	bl	800d678 <std>
 800d774:	68a0      	ldr	r0, [r4, #8]
 800d776:	2201      	movs	r2, #1
 800d778:	2109      	movs	r1, #9
 800d77a:	f7ff ff7d 	bl	800d678 <std>
 800d77e:	68e0      	ldr	r0, [r4, #12]
 800d780:	2202      	movs	r2, #2
 800d782:	2112      	movs	r1, #18
 800d784:	f7ff ff78 	bl	800d678 <std>
 800d788:	2301      	movs	r3, #1
 800d78a:	61a3      	str	r3, [r4, #24]
 800d78c:	e7d2      	b.n	800d734 <__sinit+0xc>
 800d78e:	bf00      	nop
 800d790:	0800df8c 	.word	0x0800df8c
 800d794:	0800d6c1 	.word	0x0800d6c1

0800d798 <__sfp>:
 800d798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79a:	4607      	mov	r7, r0
 800d79c:	f7ff ffac 	bl	800d6f8 <__sfp_lock_acquire>
 800d7a0:	4b1e      	ldr	r3, [pc, #120]	; (800d81c <__sfp+0x84>)
 800d7a2:	681e      	ldr	r6, [r3, #0]
 800d7a4:	69b3      	ldr	r3, [r6, #24]
 800d7a6:	b913      	cbnz	r3, 800d7ae <__sfp+0x16>
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f7ff ffbd 	bl	800d728 <__sinit>
 800d7ae:	3648      	adds	r6, #72	; 0x48
 800d7b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	d503      	bpl.n	800d7c0 <__sfp+0x28>
 800d7b8:	6833      	ldr	r3, [r6, #0]
 800d7ba:	b30b      	cbz	r3, 800d800 <__sfp+0x68>
 800d7bc:	6836      	ldr	r6, [r6, #0]
 800d7be:	e7f7      	b.n	800d7b0 <__sfp+0x18>
 800d7c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d7c4:	b9d5      	cbnz	r5, 800d7fc <__sfp+0x64>
 800d7c6:	4b16      	ldr	r3, [pc, #88]	; (800d820 <__sfp+0x88>)
 800d7c8:	60e3      	str	r3, [r4, #12]
 800d7ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d7ce:	6665      	str	r5, [r4, #100]	; 0x64
 800d7d0:	f000 f847 	bl	800d862 <__retarget_lock_init_recursive>
 800d7d4:	f7ff ff96 	bl	800d704 <__sfp_lock_release>
 800d7d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d7dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d7e0:	6025      	str	r5, [r4, #0]
 800d7e2:	61a5      	str	r5, [r4, #24]
 800d7e4:	2208      	movs	r2, #8
 800d7e6:	4629      	mov	r1, r5
 800d7e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d7ec:	f7ff f992 	bl	800cb14 <memset>
 800d7f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d7f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7fc:	3468      	adds	r4, #104	; 0x68
 800d7fe:	e7d9      	b.n	800d7b4 <__sfp+0x1c>
 800d800:	2104      	movs	r1, #4
 800d802:	4638      	mov	r0, r7
 800d804:	f7ff ff62 	bl	800d6cc <__sfmoreglue>
 800d808:	4604      	mov	r4, r0
 800d80a:	6030      	str	r0, [r6, #0]
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d1d5      	bne.n	800d7bc <__sfp+0x24>
 800d810:	f7ff ff78 	bl	800d704 <__sfp_lock_release>
 800d814:	230c      	movs	r3, #12
 800d816:	603b      	str	r3, [r7, #0]
 800d818:	e7ee      	b.n	800d7f8 <__sfp+0x60>
 800d81a:	bf00      	nop
 800d81c:	0800df8c 	.word	0x0800df8c
 800d820:	ffff0001 	.word	0xffff0001

0800d824 <_fwalk_reent>:
 800d824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d828:	4606      	mov	r6, r0
 800d82a:	4688      	mov	r8, r1
 800d82c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d830:	2700      	movs	r7, #0
 800d832:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d836:	f1b9 0901 	subs.w	r9, r9, #1
 800d83a:	d505      	bpl.n	800d848 <_fwalk_reent+0x24>
 800d83c:	6824      	ldr	r4, [r4, #0]
 800d83e:	2c00      	cmp	r4, #0
 800d840:	d1f7      	bne.n	800d832 <_fwalk_reent+0xe>
 800d842:	4638      	mov	r0, r7
 800d844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d848:	89ab      	ldrh	r3, [r5, #12]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d907      	bls.n	800d85e <_fwalk_reent+0x3a>
 800d84e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d852:	3301      	adds	r3, #1
 800d854:	d003      	beq.n	800d85e <_fwalk_reent+0x3a>
 800d856:	4629      	mov	r1, r5
 800d858:	4630      	mov	r0, r6
 800d85a:	47c0      	blx	r8
 800d85c:	4307      	orrs	r7, r0
 800d85e:	3568      	adds	r5, #104	; 0x68
 800d860:	e7e9      	b.n	800d836 <_fwalk_reent+0x12>

0800d862 <__retarget_lock_init_recursive>:
 800d862:	4770      	bx	lr

0800d864 <__retarget_lock_acquire_recursive>:
 800d864:	4770      	bx	lr

0800d866 <__retarget_lock_release_recursive>:
 800d866:	4770      	bx	lr

0800d868 <__swhatbuf_r>:
 800d868:	b570      	push	{r4, r5, r6, lr}
 800d86a:	460e      	mov	r6, r1
 800d86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d870:	2900      	cmp	r1, #0
 800d872:	b096      	sub	sp, #88	; 0x58
 800d874:	4614      	mov	r4, r2
 800d876:	461d      	mov	r5, r3
 800d878:	da07      	bge.n	800d88a <__swhatbuf_r+0x22>
 800d87a:	2300      	movs	r3, #0
 800d87c:	602b      	str	r3, [r5, #0]
 800d87e:	89b3      	ldrh	r3, [r6, #12]
 800d880:	061a      	lsls	r2, r3, #24
 800d882:	d410      	bmi.n	800d8a6 <__swhatbuf_r+0x3e>
 800d884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d888:	e00e      	b.n	800d8a8 <__swhatbuf_r+0x40>
 800d88a:	466a      	mov	r2, sp
 800d88c:	f000 f906 	bl	800da9c <_fstat_r>
 800d890:	2800      	cmp	r0, #0
 800d892:	dbf2      	blt.n	800d87a <__swhatbuf_r+0x12>
 800d894:	9a01      	ldr	r2, [sp, #4]
 800d896:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d89a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d89e:	425a      	negs	r2, r3
 800d8a0:	415a      	adcs	r2, r3
 800d8a2:	602a      	str	r2, [r5, #0]
 800d8a4:	e7ee      	b.n	800d884 <__swhatbuf_r+0x1c>
 800d8a6:	2340      	movs	r3, #64	; 0x40
 800d8a8:	2000      	movs	r0, #0
 800d8aa:	6023      	str	r3, [r4, #0]
 800d8ac:	b016      	add	sp, #88	; 0x58
 800d8ae:	bd70      	pop	{r4, r5, r6, pc}

0800d8b0 <__smakebuf_r>:
 800d8b0:	898b      	ldrh	r3, [r1, #12]
 800d8b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8b4:	079d      	lsls	r5, r3, #30
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	460c      	mov	r4, r1
 800d8ba:	d507      	bpl.n	800d8cc <__smakebuf_r+0x1c>
 800d8bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8c0:	6023      	str	r3, [r4, #0]
 800d8c2:	6123      	str	r3, [r4, #16]
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	6163      	str	r3, [r4, #20]
 800d8c8:	b002      	add	sp, #8
 800d8ca:	bd70      	pop	{r4, r5, r6, pc}
 800d8cc:	ab01      	add	r3, sp, #4
 800d8ce:	466a      	mov	r2, sp
 800d8d0:	f7ff ffca 	bl	800d868 <__swhatbuf_r>
 800d8d4:	9900      	ldr	r1, [sp, #0]
 800d8d6:	4605      	mov	r5, r0
 800d8d8:	4630      	mov	r0, r6
 800d8da:	f7ff f9eb 	bl	800ccb4 <_malloc_r>
 800d8de:	b948      	cbnz	r0, 800d8f4 <__smakebuf_r+0x44>
 800d8e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8e4:	059a      	lsls	r2, r3, #22
 800d8e6:	d4ef      	bmi.n	800d8c8 <__smakebuf_r+0x18>
 800d8e8:	f023 0303 	bic.w	r3, r3, #3
 800d8ec:	f043 0302 	orr.w	r3, r3, #2
 800d8f0:	81a3      	strh	r3, [r4, #12]
 800d8f2:	e7e3      	b.n	800d8bc <__smakebuf_r+0xc>
 800d8f4:	4b0d      	ldr	r3, [pc, #52]	; (800d92c <__smakebuf_r+0x7c>)
 800d8f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	6020      	str	r0, [r4, #0]
 800d8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d900:	81a3      	strh	r3, [r4, #12]
 800d902:	9b00      	ldr	r3, [sp, #0]
 800d904:	6163      	str	r3, [r4, #20]
 800d906:	9b01      	ldr	r3, [sp, #4]
 800d908:	6120      	str	r0, [r4, #16]
 800d90a:	b15b      	cbz	r3, 800d924 <__smakebuf_r+0x74>
 800d90c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d910:	4630      	mov	r0, r6
 800d912:	f000 f8d5 	bl	800dac0 <_isatty_r>
 800d916:	b128      	cbz	r0, 800d924 <__smakebuf_r+0x74>
 800d918:	89a3      	ldrh	r3, [r4, #12]
 800d91a:	f023 0303 	bic.w	r3, r3, #3
 800d91e:	f043 0301 	orr.w	r3, r3, #1
 800d922:	81a3      	strh	r3, [r4, #12]
 800d924:	89a0      	ldrh	r0, [r4, #12]
 800d926:	4305      	orrs	r5, r0
 800d928:	81a5      	strh	r5, [r4, #12]
 800d92a:	e7cd      	b.n	800d8c8 <__smakebuf_r+0x18>
 800d92c:	0800d6c1 	.word	0x0800d6c1

0800d930 <__malloc_lock>:
 800d930:	4801      	ldr	r0, [pc, #4]	; (800d938 <__malloc_lock+0x8>)
 800d932:	f7ff bf97 	b.w	800d864 <__retarget_lock_acquire_recursive>
 800d936:	bf00      	nop
 800d938:	20001314 	.word	0x20001314

0800d93c <__malloc_unlock>:
 800d93c:	4801      	ldr	r0, [pc, #4]	; (800d944 <__malloc_unlock+0x8>)
 800d93e:	f7ff bf92 	b.w	800d866 <__retarget_lock_release_recursive>
 800d942:	bf00      	nop
 800d944:	20001314 	.word	0x20001314

0800d948 <_raise_r>:
 800d948:	291f      	cmp	r1, #31
 800d94a:	b538      	push	{r3, r4, r5, lr}
 800d94c:	4604      	mov	r4, r0
 800d94e:	460d      	mov	r5, r1
 800d950:	d904      	bls.n	800d95c <_raise_r+0x14>
 800d952:	2316      	movs	r3, #22
 800d954:	6003      	str	r3, [r0, #0]
 800d956:	f04f 30ff 	mov.w	r0, #4294967295
 800d95a:	bd38      	pop	{r3, r4, r5, pc}
 800d95c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d95e:	b112      	cbz	r2, 800d966 <_raise_r+0x1e>
 800d960:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d964:	b94b      	cbnz	r3, 800d97a <_raise_r+0x32>
 800d966:	4620      	mov	r0, r4
 800d968:	f000 f830 	bl	800d9cc <_getpid_r>
 800d96c:	462a      	mov	r2, r5
 800d96e:	4601      	mov	r1, r0
 800d970:	4620      	mov	r0, r4
 800d972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d976:	f000 b817 	b.w	800d9a8 <_kill_r>
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d00a      	beq.n	800d994 <_raise_r+0x4c>
 800d97e:	1c59      	adds	r1, r3, #1
 800d980:	d103      	bne.n	800d98a <_raise_r+0x42>
 800d982:	2316      	movs	r3, #22
 800d984:	6003      	str	r3, [r0, #0]
 800d986:	2001      	movs	r0, #1
 800d988:	e7e7      	b.n	800d95a <_raise_r+0x12>
 800d98a:	2400      	movs	r4, #0
 800d98c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d990:	4628      	mov	r0, r5
 800d992:	4798      	blx	r3
 800d994:	2000      	movs	r0, #0
 800d996:	e7e0      	b.n	800d95a <_raise_r+0x12>

0800d998 <raise>:
 800d998:	4b02      	ldr	r3, [pc, #8]	; (800d9a4 <raise+0xc>)
 800d99a:	4601      	mov	r1, r0
 800d99c:	6818      	ldr	r0, [r3, #0]
 800d99e:	f7ff bfd3 	b.w	800d948 <_raise_r>
 800d9a2:	bf00      	nop
 800d9a4:	2000002c 	.word	0x2000002c

0800d9a8 <_kill_r>:
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	4d07      	ldr	r5, [pc, #28]	; (800d9c8 <_kill_r+0x20>)
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	4604      	mov	r4, r0
 800d9b0:	4608      	mov	r0, r1
 800d9b2:	4611      	mov	r1, r2
 800d9b4:	602b      	str	r3, [r5, #0]
 800d9b6:	f7f8 fa13 	bl	8005de0 <_kill>
 800d9ba:	1c43      	adds	r3, r0, #1
 800d9bc:	d102      	bne.n	800d9c4 <_kill_r+0x1c>
 800d9be:	682b      	ldr	r3, [r5, #0]
 800d9c0:	b103      	cbz	r3, 800d9c4 <_kill_r+0x1c>
 800d9c2:	6023      	str	r3, [r4, #0]
 800d9c4:	bd38      	pop	{r3, r4, r5, pc}
 800d9c6:	bf00      	nop
 800d9c8:	2000131c 	.word	0x2000131c

0800d9cc <_getpid_r>:
 800d9cc:	f7f8 ba00 	b.w	8005dd0 <_getpid>

0800d9d0 <__sread>:
 800d9d0:	b510      	push	{r4, lr}
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d8:	f000 f894 	bl	800db04 <_read_r>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	bfab      	itete	ge
 800d9e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800d9e4:	181b      	addge	r3, r3, r0
 800d9e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9ea:	bfac      	ite	ge
 800d9ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9ee:	81a3      	strhlt	r3, [r4, #12]
 800d9f0:	bd10      	pop	{r4, pc}

0800d9f2 <__swrite>:
 800d9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f6:	461f      	mov	r7, r3
 800d9f8:	898b      	ldrh	r3, [r1, #12]
 800d9fa:	05db      	lsls	r3, r3, #23
 800d9fc:	4605      	mov	r5, r0
 800d9fe:	460c      	mov	r4, r1
 800da00:	4616      	mov	r6, r2
 800da02:	d505      	bpl.n	800da10 <__swrite+0x1e>
 800da04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da08:	2302      	movs	r3, #2
 800da0a:	2200      	movs	r2, #0
 800da0c:	f000 f868 	bl	800dae0 <_lseek_r>
 800da10:	89a3      	ldrh	r3, [r4, #12]
 800da12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da1a:	81a3      	strh	r3, [r4, #12]
 800da1c:	4632      	mov	r2, r6
 800da1e:	463b      	mov	r3, r7
 800da20:	4628      	mov	r0, r5
 800da22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da26:	f000 b817 	b.w	800da58 <_write_r>

0800da2a <__sseek>:
 800da2a:	b510      	push	{r4, lr}
 800da2c:	460c      	mov	r4, r1
 800da2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da32:	f000 f855 	bl	800dae0 <_lseek_r>
 800da36:	1c43      	adds	r3, r0, #1
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	bf15      	itete	ne
 800da3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800da3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da46:	81a3      	strheq	r3, [r4, #12]
 800da48:	bf18      	it	ne
 800da4a:	81a3      	strhne	r3, [r4, #12]
 800da4c:	bd10      	pop	{r4, pc}

0800da4e <__sclose>:
 800da4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da52:	f000 b813 	b.w	800da7c <_close_r>
	...

0800da58 <_write_r>:
 800da58:	b538      	push	{r3, r4, r5, lr}
 800da5a:	4d07      	ldr	r5, [pc, #28]	; (800da78 <_write_r+0x20>)
 800da5c:	4604      	mov	r4, r0
 800da5e:	4608      	mov	r0, r1
 800da60:	4611      	mov	r1, r2
 800da62:	2200      	movs	r2, #0
 800da64:	602a      	str	r2, [r5, #0]
 800da66:	461a      	mov	r2, r3
 800da68:	f7f8 f9f1 	bl	8005e4e <_write>
 800da6c:	1c43      	adds	r3, r0, #1
 800da6e:	d102      	bne.n	800da76 <_write_r+0x1e>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	b103      	cbz	r3, 800da76 <_write_r+0x1e>
 800da74:	6023      	str	r3, [r4, #0]
 800da76:	bd38      	pop	{r3, r4, r5, pc}
 800da78:	2000131c 	.word	0x2000131c

0800da7c <_close_r>:
 800da7c:	b538      	push	{r3, r4, r5, lr}
 800da7e:	4d06      	ldr	r5, [pc, #24]	; (800da98 <_close_r+0x1c>)
 800da80:	2300      	movs	r3, #0
 800da82:	4604      	mov	r4, r0
 800da84:	4608      	mov	r0, r1
 800da86:	602b      	str	r3, [r5, #0]
 800da88:	f7f8 f9fd 	bl	8005e86 <_close>
 800da8c:	1c43      	adds	r3, r0, #1
 800da8e:	d102      	bne.n	800da96 <_close_r+0x1a>
 800da90:	682b      	ldr	r3, [r5, #0]
 800da92:	b103      	cbz	r3, 800da96 <_close_r+0x1a>
 800da94:	6023      	str	r3, [r4, #0]
 800da96:	bd38      	pop	{r3, r4, r5, pc}
 800da98:	2000131c 	.word	0x2000131c

0800da9c <_fstat_r>:
 800da9c:	b538      	push	{r3, r4, r5, lr}
 800da9e:	4d07      	ldr	r5, [pc, #28]	; (800dabc <_fstat_r+0x20>)
 800daa0:	2300      	movs	r3, #0
 800daa2:	4604      	mov	r4, r0
 800daa4:	4608      	mov	r0, r1
 800daa6:	4611      	mov	r1, r2
 800daa8:	602b      	str	r3, [r5, #0]
 800daaa:	f7f8 f9f8 	bl	8005e9e <_fstat>
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	d102      	bne.n	800dab8 <_fstat_r+0x1c>
 800dab2:	682b      	ldr	r3, [r5, #0]
 800dab4:	b103      	cbz	r3, 800dab8 <_fstat_r+0x1c>
 800dab6:	6023      	str	r3, [r4, #0]
 800dab8:	bd38      	pop	{r3, r4, r5, pc}
 800daba:	bf00      	nop
 800dabc:	2000131c 	.word	0x2000131c

0800dac0 <_isatty_r>:
 800dac0:	b538      	push	{r3, r4, r5, lr}
 800dac2:	4d06      	ldr	r5, [pc, #24]	; (800dadc <_isatty_r+0x1c>)
 800dac4:	2300      	movs	r3, #0
 800dac6:	4604      	mov	r4, r0
 800dac8:	4608      	mov	r0, r1
 800daca:	602b      	str	r3, [r5, #0]
 800dacc:	f7f8 f9f7 	bl	8005ebe <_isatty>
 800dad0:	1c43      	adds	r3, r0, #1
 800dad2:	d102      	bne.n	800dada <_isatty_r+0x1a>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	b103      	cbz	r3, 800dada <_isatty_r+0x1a>
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	bd38      	pop	{r3, r4, r5, pc}
 800dadc:	2000131c 	.word	0x2000131c

0800dae0 <_lseek_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4d07      	ldr	r5, [pc, #28]	; (800db00 <_lseek_r+0x20>)
 800dae4:	4604      	mov	r4, r0
 800dae6:	4608      	mov	r0, r1
 800dae8:	4611      	mov	r1, r2
 800daea:	2200      	movs	r2, #0
 800daec:	602a      	str	r2, [r5, #0]
 800daee:	461a      	mov	r2, r3
 800daf0:	f7f8 f9f0 	bl	8005ed4 <_lseek>
 800daf4:	1c43      	adds	r3, r0, #1
 800daf6:	d102      	bne.n	800dafe <_lseek_r+0x1e>
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	b103      	cbz	r3, 800dafe <_lseek_r+0x1e>
 800dafc:	6023      	str	r3, [r4, #0]
 800dafe:	bd38      	pop	{r3, r4, r5, pc}
 800db00:	2000131c 	.word	0x2000131c

0800db04 <_read_r>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	4d07      	ldr	r5, [pc, #28]	; (800db24 <_read_r+0x20>)
 800db08:	4604      	mov	r4, r0
 800db0a:	4608      	mov	r0, r1
 800db0c:	4611      	mov	r1, r2
 800db0e:	2200      	movs	r2, #0
 800db10:	602a      	str	r2, [r5, #0]
 800db12:	461a      	mov	r2, r3
 800db14:	f7f8 f97e 	bl	8005e14 <_read>
 800db18:	1c43      	adds	r3, r0, #1
 800db1a:	d102      	bne.n	800db22 <_read_r+0x1e>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	b103      	cbz	r3, 800db22 <_read_r+0x1e>
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	2000131c 	.word	0x2000131c

0800db28 <_init>:
 800db28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db2a:	bf00      	nop
 800db2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db2e:	bc08      	pop	{r3}
 800db30:	469e      	mov	lr, r3
 800db32:	4770      	bx	lr

0800db34 <_fini>:
 800db34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db36:	bf00      	nop
 800db38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db3a:	bc08      	pop	{r3}
 800db3c:	469e      	mov	lr, r3
 800db3e:	4770      	bx	lr
