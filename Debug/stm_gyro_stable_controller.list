
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005998  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b40  08005b40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b48  08005b48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b4c  08005b4c  00015b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000588  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000594  20000594  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011290  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fe1  00000000  00000000  000312cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  000332b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  00034200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021db2  00000000  00000000  00035098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001129a  00000000  00000000  00056e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6284  00000000  00000000  000680e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013e368  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042bc  00000000  00000000  0013e3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b08 	.word	0x08005b08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005b08 	.word	0x08005b08

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_uldivmod>:
 8000650:	b953      	cbnz	r3, 8000668 <__aeabi_uldivmod+0x18>
 8000652:	b94a      	cbnz	r2, 8000668 <__aeabi_uldivmod+0x18>
 8000654:	2900      	cmp	r1, #0
 8000656:	bf08      	it	eq
 8000658:	2800      	cmpeq	r0, #0
 800065a:	bf1c      	itt	ne
 800065c:	f04f 31ff 	movne.w	r1, #4294967295
 8000660:	f04f 30ff 	movne.w	r0, #4294967295
 8000664:	f000 b96e 	b.w	8000944 <__aeabi_idiv0>
 8000668:	f1ad 0c08 	sub.w	ip, sp, #8
 800066c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000670:	f000 f806 	bl	8000680 <__udivmoddi4>
 8000674:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800067c:	b004      	add	sp, #16
 800067e:	4770      	bx	lr

08000680 <__udivmoddi4>:
 8000680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000684:	9d08      	ldr	r5, [sp, #32]
 8000686:	4604      	mov	r4, r0
 8000688:	468c      	mov	ip, r1
 800068a:	2b00      	cmp	r3, #0
 800068c:	f040 8083 	bne.w	8000796 <__udivmoddi4+0x116>
 8000690:	428a      	cmp	r2, r1
 8000692:	4617      	mov	r7, r2
 8000694:	d947      	bls.n	8000726 <__udivmoddi4+0xa6>
 8000696:	fab2 f282 	clz	r2, r2
 800069a:	b142      	cbz	r2, 80006ae <__udivmoddi4+0x2e>
 800069c:	f1c2 0020 	rsb	r0, r2, #32
 80006a0:	fa24 f000 	lsr.w	r0, r4, r0
 80006a4:	4091      	lsls	r1, r2
 80006a6:	4097      	lsls	r7, r2
 80006a8:	ea40 0c01 	orr.w	ip, r0, r1
 80006ac:	4094      	lsls	r4, r2
 80006ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006b2:	0c23      	lsrs	r3, r4, #16
 80006b4:	fbbc f6f8 	udiv	r6, ip, r8
 80006b8:	fa1f fe87 	uxth.w	lr, r7
 80006bc:	fb08 c116 	mls	r1, r8, r6, ip
 80006c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006c4:	fb06 f10e 	mul.w	r1, r6, lr
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d909      	bls.n	80006e0 <__udivmoddi4+0x60>
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80006d2:	f080 8119 	bcs.w	8000908 <__udivmoddi4+0x288>
 80006d6:	4299      	cmp	r1, r3
 80006d8:	f240 8116 	bls.w	8000908 <__udivmoddi4+0x288>
 80006dc:	3e02      	subs	r6, #2
 80006de:	443b      	add	r3, r7
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	b2a4      	uxth	r4, r4
 80006e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e8:	fb08 3310 	mls	r3, r8, r0, r3
 80006ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80006f4:	45a6      	cmp	lr, r4
 80006f6:	d909      	bls.n	800070c <__udivmoddi4+0x8c>
 80006f8:	193c      	adds	r4, r7, r4
 80006fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fe:	f080 8105 	bcs.w	800090c <__udivmoddi4+0x28c>
 8000702:	45a6      	cmp	lr, r4
 8000704:	f240 8102 	bls.w	800090c <__udivmoddi4+0x28c>
 8000708:	3802      	subs	r0, #2
 800070a:	443c      	add	r4, r7
 800070c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000710:	eba4 040e 	sub.w	r4, r4, lr
 8000714:	2600      	movs	r6, #0
 8000716:	b11d      	cbz	r5, 8000720 <__udivmoddi4+0xa0>
 8000718:	40d4      	lsrs	r4, r2
 800071a:	2300      	movs	r3, #0
 800071c:	e9c5 4300 	strd	r4, r3, [r5]
 8000720:	4631      	mov	r1, r6
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	b902      	cbnz	r2, 800072a <__udivmoddi4+0xaa>
 8000728:	deff      	udf	#255	; 0xff
 800072a:	fab2 f282 	clz	r2, r2
 800072e:	2a00      	cmp	r2, #0
 8000730:	d150      	bne.n	80007d4 <__udivmoddi4+0x154>
 8000732:	1bcb      	subs	r3, r1, r7
 8000734:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000738:	fa1f f887 	uxth.w	r8, r7
 800073c:	2601      	movs	r6, #1
 800073e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000742:	0c21      	lsrs	r1, r4, #16
 8000744:	fb0e 331c 	mls	r3, lr, ip, r3
 8000748:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800074c:	fb08 f30c 	mul.w	r3, r8, ip
 8000750:	428b      	cmp	r3, r1
 8000752:	d907      	bls.n	8000764 <__udivmoddi4+0xe4>
 8000754:	1879      	adds	r1, r7, r1
 8000756:	f10c 30ff 	add.w	r0, ip, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0xe2>
 800075c:	428b      	cmp	r3, r1
 800075e:	f200 80e9 	bhi.w	8000934 <__udivmoddi4+0x2b4>
 8000762:	4684      	mov	ip, r0
 8000764:	1ac9      	subs	r1, r1, r3
 8000766:	b2a3      	uxth	r3, r4
 8000768:	fbb1 f0fe 	udiv	r0, r1, lr
 800076c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000770:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000774:	fb08 f800 	mul.w	r8, r8, r0
 8000778:	45a0      	cmp	r8, r4
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x10c>
 800077c:	193c      	adds	r4, r7, r4
 800077e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x10a>
 8000784:	45a0      	cmp	r8, r4
 8000786:	f200 80d9 	bhi.w	800093c <__udivmoddi4+0x2bc>
 800078a:	4618      	mov	r0, r3
 800078c:	eba4 0408 	sub.w	r4, r4, r8
 8000790:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000794:	e7bf      	b.n	8000716 <__udivmoddi4+0x96>
 8000796:	428b      	cmp	r3, r1
 8000798:	d909      	bls.n	80007ae <__udivmoddi4+0x12e>
 800079a:	2d00      	cmp	r5, #0
 800079c:	f000 80b1 	beq.w	8000902 <__udivmoddi4+0x282>
 80007a0:	2600      	movs	r6, #0
 80007a2:	e9c5 0100 	strd	r0, r1, [r5]
 80007a6:	4630      	mov	r0, r6
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	fab3 f683 	clz	r6, r3
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d14a      	bne.n	800084c <__udivmoddi4+0x1cc>
 80007b6:	428b      	cmp	r3, r1
 80007b8:	d302      	bcc.n	80007c0 <__udivmoddi4+0x140>
 80007ba:	4282      	cmp	r2, r0
 80007bc:	f200 80b8 	bhi.w	8000930 <__udivmoddi4+0x2b0>
 80007c0:	1a84      	subs	r4, r0, r2
 80007c2:	eb61 0103 	sbc.w	r1, r1, r3
 80007c6:	2001      	movs	r0, #1
 80007c8:	468c      	mov	ip, r1
 80007ca:	2d00      	cmp	r5, #0
 80007cc:	d0a8      	beq.n	8000720 <__udivmoddi4+0xa0>
 80007ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80007d2:	e7a5      	b.n	8000720 <__udivmoddi4+0xa0>
 80007d4:	f1c2 0320 	rsb	r3, r2, #32
 80007d8:	fa20 f603 	lsr.w	r6, r0, r3
 80007dc:	4097      	lsls	r7, r2
 80007de:	fa01 f002 	lsl.w	r0, r1, r2
 80007e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e6:	40d9      	lsrs	r1, r3
 80007e8:	4330      	orrs	r0, r6
 80007ea:	0c03      	lsrs	r3, r0, #16
 80007ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fc:	fb06 f108 	mul.w	r1, r6, r8
 8000800:	4299      	cmp	r1, r3
 8000802:	fa04 f402 	lsl.w	r4, r4, r2
 8000806:	d909      	bls.n	800081c <__udivmoddi4+0x19c>
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	f106 3cff 	add.w	ip, r6, #4294967295
 800080e:	f080 808d 	bcs.w	800092c <__udivmoddi4+0x2ac>
 8000812:	4299      	cmp	r1, r3
 8000814:	f240 808a 	bls.w	800092c <__udivmoddi4+0x2ac>
 8000818:	3e02      	subs	r6, #2
 800081a:	443b      	add	r3, r7
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	b281      	uxth	r1, r0
 8000820:	fbb3 f0fe 	udiv	r0, r3, lr
 8000824:	fb0e 3310 	mls	r3, lr, r0, r3
 8000828:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800082c:	fb00 f308 	mul.w	r3, r0, r8
 8000830:	428b      	cmp	r3, r1
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x1c4>
 8000834:	1879      	adds	r1, r7, r1
 8000836:	f100 3cff 	add.w	ip, r0, #4294967295
 800083a:	d273      	bcs.n	8000924 <__udivmoddi4+0x2a4>
 800083c:	428b      	cmp	r3, r1
 800083e:	d971      	bls.n	8000924 <__udivmoddi4+0x2a4>
 8000840:	3802      	subs	r0, #2
 8000842:	4439      	add	r1, r7
 8000844:	1acb      	subs	r3, r1, r3
 8000846:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800084a:	e778      	b.n	800073e <__udivmoddi4+0xbe>
 800084c:	f1c6 0c20 	rsb	ip, r6, #32
 8000850:	fa03 f406 	lsl.w	r4, r3, r6
 8000854:	fa22 f30c 	lsr.w	r3, r2, ip
 8000858:	431c      	orrs	r4, r3
 800085a:	fa20 f70c 	lsr.w	r7, r0, ip
 800085e:	fa01 f306 	lsl.w	r3, r1, r6
 8000862:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000866:	fa21 f10c 	lsr.w	r1, r1, ip
 800086a:	431f      	orrs	r7, r3
 800086c:	0c3b      	lsrs	r3, r7, #16
 800086e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000872:	fa1f f884 	uxth.w	r8, r4
 8000876:	fb0e 1119 	mls	r1, lr, r9, r1
 800087a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800087e:	fb09 fa08 	mul.w	sl, r9, r8
 8000882:	458a      	cmp	sl, r1
 8000884:	fa02 f206 	lsl.w	r2, r2, r6
 8000888:	fa00 f306 	lsl.w	r3, r0, r6
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x220>
 800088e:	1861      	adds	r1, r4, r1
 8000890:	f109 30ff 	add.w	r0, r9, #4294967295
 8000894:	d248      	bcs.n	8000928 <__udivmoddi4+0x2a8>
 8000896:	458a      	cmp	sl, r1
 8000898:	d946      	bls.n	8000928 <__udivmoddi4+0x2a8>
 800089a:	f1a9 0902 	sub.w	r9, r9, #2
 800089e:	4421      	add	r1, r4
 80008a0:	eba1 010a 	sub.w	r1, r1, sl
 80008a4:	b2bf      	uxth	r7, r7
 80008a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80008aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80008ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008b2:	fb00 f808 	mul.w	r8, r0, r8
 80008b6:	45b8      	cmp	r8, r7
 80008b8:	d907      	bls.n	80008ca <__udivmoddi4+0x24a>
 80008ba:	19e7      	adds	r7, r4, r7
 80008bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80008c0:	d22e      	bcs.n	8000920 <__udivmoddi4+0x2a0>
 80008c2:	45b8      	cmp	r8, r7
 80008c4:	d92c      	bls.n	8000920 <__udivmoddi4+0x2a0>
 80008c6:	3802      	subs	r0, #2
 80008c8:	4427      	add	r7, r4
 80008ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008ce:	eba7 0708 	sub.w	r7, r7, r8
 80008d2:	fba0 8902 	umull	r8, r9, r0, r2
 80008d6:	454f      	cmp	r7, r9
 80008d8:	46c6      	mov	lr, r8
 80008da:	4649      	mov	r1, r9
 80008dc:	d31a      	bcc.n	8000914 <__udivmoddi4+0x294>
 80008de:	d017      	beq.n	8000910 <__udivmoddi4+0x290>
 80008e0:	b15d      	cbz	r5, 80008fa <__udivmoddi4+0x27a>
 80008e2:	ebb3 020e 	subs.w	r2, r3, lr
 80008e6:	eb67 0701 	sbc.w	r7, r7, r1
 80008ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008ee:	40f2      	lsrs	r2, r6
 80008f0:	ea4c 0202 	orr.w	r2, ip, r2
 80008f4:	40f7      	lsrs	r7, r6
 80008f6:	e9c5 2700 	strd	r2, r7, [r5]
 80008fa:	2600      	movs	r6, #0
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	462e      	mov	r6, r5
 8000904:	4628      	mov	r0, r5
 8000906:	e70b      	b.n	8000720 <__udivmoddi4+0xa0>
 8000908:	4606      	mov	r6, r0
 800090a:	e6e9      	b.n	80006e0 <__udivmoddi4+0x60>
 800090c:	4618      	mov	r0, r3
 800090e:	e6fd      	b.n	800070c <__udivmoddi4+0x8c>
 8000910:	4543      	cmp	r3, r8
 8000912:	d2e5      	bcs.n	80008e0 <__udivmoddi4+0x260>
 8000914:	ebb8 0e02 	subs.w	lr, r8, r2
 8000918:	eb69 0104 	sbc.w	r1, r9, r4
 800091c:	3801      	subs	r0, #1
 800091e:	e7df      	b.n	80008e0 <__udivmoddi4+0x260>
 8000920:	4608      	mov	r0, r1
 8000922:	e7d2      	b.n	80008ca <__udivmoddi4+0x24a>
 8000924:	4660      	mov	r0, ip
 8000926:	e78d      	b.n	8000844 <__udivmoddi4+0x1c4>
 8000928:	4681      	mov	r9, r0
 800092a:	e7b9      	b.n	80008a0 <__udivmoddi4+0x220>
 800092c:	4666      	mov	r6, ip
 800092e:	e775      	b.n	800081c <__udivmoddi4+0x19c>
 8000930:	4630      	mov	r0, r6
 8000932:	e74a      	b.n	80007ca <__udivmoddi4+0x14a>
 8000934:	f1ac 0c02 	sub.w	ip, ip, #2
 8000938:	4439      	add	r1, r7
 800093a:	e713      	b.n	8000764 <__udivmoddi4+0xe4>
 800093c:	3802      	subs	r0, #2
 800093e:	443c      	add	r4, r7
 8000940:	e724      	b.n	800078c <__udivmoddi4+0x10c>
 8000942:	bf00      	nop

08000944 <__aeabi_idiv0>:
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	if (UartHandle->Instance == USART1){ // Jetson commutation
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4aaa      	ldr	r2, [pc, #680]	; (8000c00 <HAL_UART_RxCpltCallback+0x2b8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d16b      	bne.n	8000a32 <HAL_UART_RxCpltCallback+0xea>
		if (USART1ReceiveState == 0){
 800095a:	4baa      	ldr	r3, [pc, #680]	; (8000c04 <HAL_UART_RxCpltCallback+0x2bc>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d11f      	bne.n	80009a4 <HAL_UART_RxCpltCallback+0x5c>
			if ((SerialOnBoardRequest.CR != 13) || (SerialOnBoardRequest.LF != 10)){
 8000964:	4ba8      	ldr	r3, [pc, #672]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 8000966:	7a1b      	ldrb	r3, [r3, #8]
 8000968:	2b0d      	cmp	r3, #13
 800096a:	d103      	bne.n	8000974 <HAL_UART_RxCpltCallback+0x2c>
 800096c:	4ba6      	ldr	r3, [pc, #664]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 800096e:	7a5b      	ldrb	r3, [r3, #9]
 8000970:	2b0a      	cmp	r3, #10
 8000972:	d00c      	beq.n	800098e <HAL_UART_RxCpltCallback+0x46>
				Res = HAL_UART_Receive_DMA(&huart1, LostByte, 1);
 8000974:	4ba5      	ldr	r3, [pc, #660]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	4619      	mov	r1, r3
 800097c:	48a4      	ldr	r0, [pc, #656]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 800097e:	f004 f82d 	bl	80049dc <HAL_UART_Receive_DMA>
 8000982:	4603      	mov	r3, r0
 8000984:	73fb      	strb	r3, [r7, #15]
				USART1ReceiveState = 1;
 8000986:	4b9f      	ldr	r3, [pc, #636]	; (8000c04 <HAL_UART_RxCpltCallback+0x2bc>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	e042      	b.n	8000a14 <HAL_UART_RxCpltCallback+0xcc>
			}
			else{
 				USART1ReceiveState = 10;
 800098e:	4b9d      	ldr	r3, [pc, #628]	; (8000c04 <HAL_UART_RxCpltCallback+0x2bc>)
 8000990:	220a      	movs	r2, #10
 8000992:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart1, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8000994:	220a      	movs	r2, #10
 8000996:	499c      	ldr	r1, [pc, #624]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 8000998:	489d      	ldr	r0, [pc, #628]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 800099a:	f004 f81f 	bl	80049dc <HAL_UART_Receive_DMA>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]
 80009a2:	e037      	b.n	8000a14 <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else{
			if(USART1ReceiveState == 1){
 80009a4:	4b97      	ldr	r3, [pc, #604]	; (8000c04 <HAL_UART_RxCpltCallback+0x2bc>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d111      	bne.n	80009d2 <HAL_UART_RxCpltCallback+0x8a>
				if (LostByte[0] == 13){
 80009ae:	4b97      	ldr	r3, [pc, #604]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b0d      	cmp	r3, #13
 80009b6:	d102      	bne.n	80009be <HAL_UART_RxCpltCallback+0x76>
					USART1ReceiveState = 2;
 80009b8:	4b92      	ldr	r3, [pc, #584]	; (8000c04 <HAL_UART_RxCpltCallback+0x2bc>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart1, (uint8_t*)LostByte, 1);
 80009be:	4b93      	ldr	r3, [pc, #588]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2201      	movs	r2, #1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4892      	ldr	r0, [pc, #584]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 80009c8:	f004 f808 	bl	80049dc <HAL_UART_Receive_DMA>
 80009cc:	4603      	mov	r3, r0
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e020      	b.n	8000a14 <HAL_UART_RxCpltCallback+0xcc>
			}
			else{
				if (USART1ReceiveState == 2){
 80009d2:	4b8c      	ldr	r3, [pc, #560]	; (8000c04 <HAL_UART_RxCpltCallback+0x2bc>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d11b      	bne.n	8000a14 <HAL_UART_RxCpltCallback+0xcc>
					if (LostByte[0] == 10){
 80009dc:	4b8b      	ldr	r3, [pc, #556]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b0a      	cmp	r3, #10
 80009e4:	d10a      	bne.n	80009fc <HAL_UART_RxCpltCallback+0xb4>
						USART1ReceiveState = 0;
 80009e6:	4b87      	ldr	r3, [pc, #540]	; (8000c04 <HAL_UART_RxCpltCallback+0x2bc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart1, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 80009ec:	220a      	movs	r2, #10
 80009ee:	4986      	ldr	r1, [pc, #536]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 80009f0:	4887      	ldr	r0, [pc, #540]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 80009f2:	f003 fff3 	bl	80049dc <HAL_UART_Receive_DMA>
 80009f6:	4603      	mov	r3, r0
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e00b      	b.n	8000a14 <HAL_UART_RxCpltCallback+0xcc>
					}
					else{
						USART1ReceiveState = 1;
 80009fc:	4b81      	ldr	r3, [pc, #516]	; (8000c04 <HAL_UART_RxCpltCallback+0x2bc>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart1, (uint8_t*)LostByte, 1);
 8000a02:	4b82      	ldr	r3, [pc, #520]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2201      	movs	r2, #1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4881      	ldr	r0, [pc, #516]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000a0c:	f003 ffe6 	bl	80049dc <HAL_UART_Receive_DMA>
 8000a10:	4603      	mov	r3, r0
 8000a12:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}
		if (Res != HAL_OK)
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d00b      	beq.n	8000a32 <HAL_UART_RxCpltCallback+0xea>
		{
			MX_USART1_UART_Init();
 8000a1a:	f000 fc9d 	bl	8001358 <MX_USART1_UART_Init>
			USART1ReceiveState = 0;
 8000a1e:	4b79      	ldr	r3, [pc, #484]	; (8000c04 <HAL_UART_RxCpltCallback+0x2bc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart1, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8000a24:	220a      	movs	r2, #10
 8000a26:	4978      	ldr	r1, [pc, #480]	; (8000c08 <HAL_UART_RxCpltCallback+0x2c0>)
 8000a28:	4879      	ldr	r0, [pc, #484]	; (8000c10 <HAL_UART_RxCpltCallback+0x2c8>)
 8000a2a:	f003 ffd7 	bl	80049dc <HAL_UART_Receive_DMA>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == USART2)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a77      	ldr	r2, [pc, #476]	; (8000c14 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d16b      	bne.n	8000b14 <HAL_UART_RxCpltCallback+0x1cc>
	{
		if (USART2ReceiveState == 0)
 8000a3c:	4b76      	ldr	r3, [pc, #472]	; (8000c18 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d11f      	bne.n	8000a86 <HAL_UART_RxCpltCallback+0x13e>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 8000a46:	4b75      	ldr	r3, [pc, #468]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000a48:	7b9b      	ldrb	r3, [r3, #14]
 8000a4a:	2b0d      	cmp	r3, #13
 8000a4c:	d103      	bne.n	8000a56 <HAL_UART_RxCpltCallback+0x10e>
 8000a4e:	4b73      	ldr	r3, [pc, #460]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000a50:	7bdb      	ldrb	r3, [r3, #15]
 8000a52:	2b0a      	cmp	r3, #10
 8000a54:	d00c      	beq.n	8000a70 <HAL_UART_RxCpltCallback+0x128>
			{
				Res = HAL_UART_Receive_DMA(&huart2, LostByte, 1);
 8000a56:	4b6d      	ldr	r3, [pc, #436]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4870      	ldr	r0, [pc, #448]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d8>)
 8000a60:	f003 ffbc 	bl	80049dc <HAL_UART_Receive_DMA>
 8000a64:	4603      	mov	r3, r0
 8000a66:	73fb      	strb	r3, [r7, #15]
				USART2ReceiveState = 1;
 8000a68:	4b6b      	ldr	r3, [pc, #428]	; (8000c18 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
 8000a6e:	e042      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				USART2ReceiveState = 10;
 8000a70:	4b69      	ldr	r3, [pc, #420]	; (8000c18 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a72:	220a      	movs	r2, #10
 8000a74:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8000a76:	2210      	movs	r2, #16
 8000a78:	4968      	ldr	r1, [pc, #416]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000a7a:	4869      	ldr	r0, [pc, #420]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d8>)
 8000a7c:	f003 ffae 	bl	80049dc <HAL_UART_Receive_DMA>
 8000a80:	4603      	mov	r3, r0
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	e037      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ae>
			}
		}
		else
		{
			if(USART2ReceiveState == 1)
 8000a86:	4b64      	ldr	r3, [pc, #400]	; (8000c18 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d111      	bne.n	8000ab4 <HAL_UART_RxCpltCallback+0x16c>
			{
				if (LostByte[0] == 13)
 8000a90:	4b5e      	ldr	r3, [pc, #376]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b0d      	cmp	r3, #13
 8000a98:	d102      	bne.n	8000aa0 <HAL_UART_RxCpltCallback+0x158>
				{
					USART2ReceiveState = 2;
 8000a9a:	4b5f      	ldr	r3, [pc, #380]	; (8000c18 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8000aa0:	4b5a      	ldr	r3, [pc, #360]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	485d      	ldr	r0, [pc, #372]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d8>)
 8000aaa:	f003 ff97 	bl	80049dc <HAL_UART_Receive_DMA>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
 8000ab2:	e020      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				if (USART2ReceiveState == 2)
 8000ab4:	4b58      	ldr	r3, [pc, #352]	; (8000c18 <HAL_UART_RxCpltCallback+0x2d0>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d11b      	bne.n	8000af6 <HAL_UART_RxCpltCallback+0x1ae>
				{
					if (LostByte[0] == 10)
 8000abe:	4b53      	ldr	r3, [pc, #332]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b0a      	cmp	r3, #10
 8000ac6:	d10a      	bne.n	8000ade <HAL_UART_RxCpltCallback+0x196>
					{
						USART2ReceiveState = 0;
 8000ac8:	4b53      	ldr	r3, [pc, #332]	; (8000c18 <HAL_UART_RxCpltCallback+0x2d0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8000ace:	2210      	movs	r2, #16
 8000ad0:	4952      	ldr	r1, [pc, #328]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000ad2:	4853      	ldr	r0, [pc, #332]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d8>)
 8000ad4:	f003 ff82 	bl	80049dc <HAL_UART_Receive_DMA>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e00b      	b.n	8000af6 <HAL_UART_RxCpltCallback+0x1ae>
					}
					else
					{
						USART2ReceiveState = 1;
 8000ade:	4b4e      	ldr	r3, [pc, #312]	; (8000c18 <HAL_UART_RxCpltCallback+0x2d0>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8000ae4:	4b49      	ldr	r3, [pc, #292]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4619      	mov	r1, r3
 8000aec:	484c      	ldr	r0, [pc, #304]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d8>)
 8000aee:	f003 ff75 	bl	80049dc <HAL_UART_Receive_DMA>
 8000af2:	4603      	mov	r3, r0
 8000af4:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00b      	beq.n	8000b14 <HAL_UART_RxCpltCallback+0x1cc>
		{
			MX_USART2_UART_Init();
 8000afc:	f000 fc56 	bl	80013ac <MX_USART2_UART_Init>
			USART2ReceiveState = 0;
 8000b00:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <HAL_UART_RxCpltCallback+0x2d0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8000b06:	2210      	movs	r2, #16
 8000b08:	4944      	ldr	r1, [pc, #272]	; (8000c1c <HAL_UART_RxCpltCallback+0x2d4>)
 8000b0a:	4845      	ldr	r0, [pc, #276]	; (8000c20 <HAL_UART_RxCpltCallback+0x2d8>)
 8000b0c:	f003 ff66 	bl	80049dc <HAL_UART_Receive_DMA>
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == USART3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a42      	ldr	r2, [pc, #264]	; (8000c24 <HAL_UART_RxCpltCallback+0x2dc>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d16b      	bne.n	8000bf6 <HAL_UART_RxCpltCallback+0x2ae>
	{
		if (USART3ReceiveState == 0)
 8000b1e:	4b42      	ldr	r3, [pc, #264]	; (8000c28 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d11f      	bne.n	8000b68 <HAL_UART_RxCpltCallback+0x220>
		{
			if ((SerialArduinoGyroResponce.CR != 13) || (SerialArduinoGyroResponce.LF != 10))
 8000b28:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000b2a:	7c9b      	ldrb	r3, [r3, #18]
 8000b2c:	2b0d      	cmp	r3, #13
 8000b2e:	d103      	bne.n	8000b38 <HAL_UART_RxCpltCallback+0x1f0>
 8000b30:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000b32:	7cdb      	ldrb	r3, [r3, #19]
 8000b34:	2b0a      	cmp	r3, #10
 8000b36:	d00c      	beq.n	8000b52 <HAL_UART_RxCpltCallback+0x20a>
			{
				Res = HAL_UART_Receive_DMA(&huart3, LostByte, 1);
 8000b38:	4b34      	ldr	r3, [pc, #208]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4619      	mov	r1, r3
 8000b40:	483b      	ldr	r0, [pc, #236]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b42:	f003 ff4b 	bl	80049dc <HAL_UART_Receive_DMA>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
				USART3ReceiveState = 1;
 8000b4a:	4b37      	ldr	r3, [pc, #220]	; (8000c28 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e042      	b.n	8000bd8 <HAL_UART_RxCpltCallback+0x290>
			}
			else
			{
				USART3ReceiveState = 10;
 8000b52:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart3, (uint8_t*)SerialArduinoGyroResponce.Buffer, GYRO_ARDUINO_RESPONCE_SIZE);
 8000b58:	2214      	movs	r2, #20
 8000b5a:	4934      	ldr	r1, [pc, #208]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000b5c:	4834      	ldr	r0, [pc, #208]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b5e:	f003 ff3d 	bl	80049dc <HAL_UART_Receive_DMA>
 8000b62:	4603      	mov	r3, r0
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	e037      	b.n	8000bd8 <HAL_UART_RxCpltCallback+0x290>
			}
		}
		else
		{
			if(USART3ReceiveState == 1)
 8000b68:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d111      	bne.n	8000b96 <HAL_UART_RxCpltCallback+0x24e>
			{
				if (LostByte[0] == 13)
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b0d      	cmp	r3, #13
 8000b7a:	d102      	bne.n	8000b82 <HAL_UART_RxCpltCallback+0x23a>
				{
					USART3ReceiveState = 2;
 8000b7c:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b7e:	2202      	movs	r2, #2
 8000b80:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart3, (uint8_t*)LostByte, 1);
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2201      	movs	r2, #1
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4829      	ldr	r0, [pc, #164]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e8>)
 8000b8c:	f003 ff26 	bl	80049dc <HAL_UART_Receive_DMA>
 8000b90:	4603      	mov	r3, r0
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e020      	b.n	8000bd8 <HAL_UART_RxCpltCallback+0x290>
			}
			else
			{
				if (USART3ReceiveState == 2)
 8000b96:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <HAL_UART_RxCpltCallback+0x2e0>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d11b      	bne.n	8000bd8 <HAL_UART_RxCpltCallback+0x290>
				{
					if (LostByte[0] == 10)
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b0a      	cmp	r3, #10
 8000ba8:	d10a      	bne.n	8000bc0 <HAL_UART_RxCpltCallback+0x278>
					{
						USART3ReceiveState = 0;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <HAL_UART_RxCpltCallback+0x2e0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart3, (uint8_t*)SerialArduinoGyroResponce.Buffer, GYRO_ARDUINO_RESPONCE_SIZE);
 8000bb0:	2214      	movs	r2, #20
 8000bb2:	491e      	ldr	r1, [pc, #120]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000bb4:	481e      	ldr	r0, [pc, #120]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e8>)
 8000bb6:	f003 ff11 	bl	80049dc <HAL_UART_Receive_DMA>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e00b      	b.n	8000bd8 <HAL_UART_RxCpltCallback+0x290>
					}
					else
					{
						USART3ReceiveState = 1;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_UART_RxCpltCallback+0x2e0>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart3, (uint8_t*)LostByte, 1);
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_UART_RxCpltCallback+0x2c4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4818      	ldr	r0, [pc, #96]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e8>)
 8000bd0:	f003 ff04 	bl	80049dc <HAL_UART_Receive_DMA>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00b      	beq.n	8000bf6 <HAL_UART_RxCpltCallback+0x2ae>
		{
			MX_USART3_UART_Init();
 8000bde:	f000 fc0f 	bl	8001400 <MX_USART3_UART_Init>
			USART3ReceiveState = 0;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_UART_RxCpltCallback+0x2e0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart3, (uint8_t*)SerialArduinoGyroResponce.Buffer, GYRO_ARDUINO_RESPONCE_SIZE);
 8000be8:	2214      	movs	r2, #20
 8000bea:	4910      	ldr	r1, [pc, #64]	; (8000c2c <HAL_UART_RxCpltCallback+0x2e4>)
 8000bec:	4810      	ldr	r0, [pc, #64]	; (8000c30 <HAL_UART_RxCpltCallback+0x2e8>)
 8000bee:	f003 fef5 	bl	80049dc <HAL_UART_Receive_DMA>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40011000 	.word	0x40011000
 8000c04:	20000028 	.word	0x20000028
 8000c08:	200003e8 	.word	0x200003e8
 8000c0c:	2000058c 	.word	0x2000058c
 8000c10:	2000033c 	.word	0x2000033c
 8000c14:	40004400 	.word	0x40004400
 8000c18:	20000029 	.word	0x20000029
 8000c1c:	20000134 	.word	0x20000134
 8000c20:	200004b0 	.word	0x200004b0
 8000c24:	40004800 	.word	0x40004800
 8000c28:	2000002a 	.word	0x2000002a
 8000c2c:	20000380 	.word	0x20000380
 8000c30:	200000f0 	.word	0x200000f0
 8000c34:	00000000 	.word	0x00000000

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3c:	f001 f9b4 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c40:	f000 f948 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c44:	f000 fc5c 	bl	8001500 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c48:	f000 fc04 	bl	8001454 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c4c:	f000 fbae 	bl	80013ac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000c50:	f000 fb82 	bl	8001358 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000c54:	f000 f9fa 	bl	800104c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000c58:	f000 fbd2 	bl	8001400 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000c5c:	f000 f9a4 	bl	8000fa8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000c60:	f000 fa2a 	bl	80010b8 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000c64:	f000 fabe 	bl	80011e4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000c68:	f000 faf2 	bl	8001250 <MX_TIM7_Init>
  MX_TIM14_Init();
 8000c6c:	f000 fb26 	bl	80012bc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8000c70:	2210      	movs	r2, #16
 8000c72:	4987      	ldr	r1, [pc, #540]	; (8000e90 <main+0x258>)
 8000c74:	4887      	ldr	r0, [pc, #540]	; (8000e94 <main+0x25c>)
 8000c76:	f003 feb1 	bl	80049dc <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)SerialArduinoGyroResponce.Buffer, GYRO_ARDUINO_RESPONCE_SIZE);
 8000c7a:	2214      	movs	r2, #20
 8000c7c:	4986      	ldr	r1, [pc, #536]	; (8000e98 <main+0x260>)
 8000c7e:	4887      	ldr	r0, [pc, #540]	; (8000e9c <main+0x264>)
 8000c80:	f003 feac 	bl	80049dc <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GetTick() - PackageLastTimeReset_OnBoardPC > 1000)
 8000c84:	f001 f9f6 	bl	8002074 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	4b85      	ldr	r3, [pc, #532]	; (8000ea0 <main+0x268>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c94:	d90e      	bls.n	8000cb4 <main+0x7c>
	  {
		  MX_USART1_UART_Init();
 8000c96:	f000 fb5f 	bl	8001358 <MX_USART1_UART_Init>
		  USART1ReceiveState = 0;
 8000c9a:	4b82      	ldr	r3, [pc, #520]	; (8000ea4 <main+0x26c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(&huart1, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8000ca0:	220a      	movs	r2, #10
 8000ca2:	4981      	ldr	r1, [pc, #516]	; (8000ea8 <main+0x270>)
 8000ca4:	4881      	ldr	r0, [pc, #516]	; (8000eac <main+0x274>)
 8000ca6:	f003 fe99 	bl	80049dc <HAL_UART_Receive_DMA>
		  PackageLastTimeReset_OnBoardPC = HAL_GetTick();
 8000caa:	f001 f9e3 	bl	8002074 <HAL_GetTick>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a7b      	ldr	r2, [pc, #492]	; (8000ea0 <main+0x268>)
 8000cb2:	6013      	str	r3, [r2, #0]
	  }

	  if (HAL_GetTick() - PackageLastTimeReset_Motherboard > 1000) // UART2 RECEIVE FEEDBACK
 8000cb4:	f001 f9de 	bl	8002074 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <main+0x278>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cc4:	d907      	bls.n	8000cd6 <main+0x9e>
	  {
		  //MX_USART2_UART_Init();
		  USART2ReceiveState = 0;
 8000cc6:	4b7b      	ldr	r3, [pc, #492]	; (8000eb4 <main+0x27c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 8000ccc:	f001 f9d2 	bl	8002074 <HAL_GetTick>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a77      	ldr	r2, [pc, #476]	; (8000eb0 <main+0x278>)
 8000cd4:	6013      	str	r3, [r2, #0]
	  }

	  if (HAL_GetTick() - PackageLastTimeReset_GYRO > 1000)
 8000cd6:	f001 f9cd 	bl	8002074 <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	4b76      	ldr	r3, [pc, #472]	; (8000eb8 <main+0x280>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ce6:	d907      	bls.n	8000cf8 <main+0xc0>
	  {
		  //MX_USART3_UART_Init();
		  USART3ReceiveState = 0;
 8000ce8:	4b74      	ldr	r3, [pc, #464]	; (8000ebc <main+0x284>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
		  PackageLastTimeReset_GYRO = HAL_GetTick();
 8000cee:	f001 f9c1 	bl	8002074 <HAL_GetTick>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a70      	ldr	r2, [pc, #448]	; (8000eb8 <main+0x280>)
 8000cf6:	6013      	str	r3, [r2, #0]
	  }

//====================================================================

	  if ((USART2ReceiveState == 10) && (SerialControlWheelsResponce.CR == 13) && (SerialControlWheelsResponce.LF == 10))
 8000cf8:	4b6e      	ldr	r3, [pc, #440]	; (8000eb4 <main+0x27c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d114      	bne.n	8000d2c <main+0xf4>
 8000d02:	4b63      	ldr	r3, [pc, #396]	; (8000e90 <main+0x258>)
 8000d04:	7b9b      	ldrb	r3, [r3, #14]
 8000d06:	2b0d      	cmp	r3, #13
 8000d08:	d110      	bne.n	8000d2c <main+0xf4>
 8000d0a:	4b61      	ldr	r3, [pc, #388]	; (8000e90 <main+0x258>)
 8000d0c:	7bdb      	ldrb	r3, [r3, #15]
 8000d0e:	2b0a      	cmp	r3, #10
 8000d10:	d10c      	bne.n	8000d2c <main+0xf4>
	  {
		  USART2ReceiveState = 0;
 8000d12:	4b68      	ldr	r3, [pc, #416]	; (8000eb4 <main+0x27c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1c:	4868      	ldr	r0, [pc, #416]	; (8000ec0 <main+0x288>)
 8000d1e:	f002 fae0 	bl	80032e2 <HAL_GPIO_TogglePin>

		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 8000d22:	f001 f9a7 	bl	8002074 <HAL_GetTick>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4a61      	ldr	r2, [pc, #388]	; (8000eb0 <main+0x278>)
 8000d2a:	6013      	str	r3, [r2, #0]
	  }

	  if ((USART3ReceiveState == 10) && (SerialArduinoGyroResponce.CR == 13) && (SerialArduinoGyroResponce.LF == 10))
 8000d2c:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <main+0x284>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d14e      	bne.n	8000dd4 <main+0x19c>
 8000d36:	4b58      	ldr	r3, [pc, #352]	; (8000e98 <main+0x260>)
 8000d38:	7c9b      	ldrb	r3, [r3, #18]
 8000d3a:	2b0d      	cmp	r3, #13
 8000d3c:	d14a      	bne.n	8000dd4 <main+0x19c>
 8000d3e:	4b56      	ldr	r3, [pc, #344]	; (8000e98 <main+0x260>)
 8000d40:	7cdb      	ldrb	r3, [r3, #19]
 8000d42:	2b0a      	cmp	r3, #10
 8000d44:	d146      	bne.n	8000dd4 <main+0x19c>
	  {
		  USART3ReceiveState = 0;
 8000d46:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <main+0x284>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d50:	485b      	ldr	r0, [pc, #364]	; (8000ec0 <main+0x288>)
 8000d52:	f002 fac6 	bl	80032e2 <HAL_GPIO_TogglePin>

		  PackageLastTimeReset_GYRO = HAL_GetTick();
 8000d56:	f001 f98d 	bl	8002074 <HAL_GetTick>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a56      	ldr	r2, [pc, #344]	; (8000eb8 <main+0x280>)
 8000d5e:	6013      	str	r3, [r2, #0]

		  GyroSource.Gravity.x = SerialArduinoGyroResponce.sRawGravity.X;
 8000d60:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <main+0x260>)
 8000d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	4b56      	ldr	r3, [pc, #344]	; (8000ec4 <main+0x28c>)
 8000d6a:	801a      	strh	r2, [r3, #0]
		  GyroSource.Gravity.y = SerialArduinoGyroResponce.sRawGravity.Y;
 8000d6c:	4b4a      	ldr	r3, [pc, #296]	; (8000e98 <main+0x260>)
 8000d6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	4b53      	ldr	r3, [pc, #332]	; (8000ec4 <main+0x28c>)
 8000d76:	805a      	strh	r2, [r3, #2]
		  GyroSource.Gravity.z = SerialArduinoGyroResponce.sRawGravity.Z;
 8000d78:	4b47      	ldr	r3, [pc, #284]	; (8000e98 <main+0x260>)
 8000d7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	4b50      	ldr	r3, [pc, #320]	; (8000ec4 <main+0x28c>)
 8000d82:	809a      	strh	r2, [r3, #4]

		  GyroSource.GyroAcc.x = SerialArduinoGyroResponce.sRawGyroAcc.X;
 8000d84:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <main+0x260>)
 8000d86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <main+0x28c>)
 8000d8e:	80da      	strh	r2, [r3, #6]
		  GyroSource.GyroAcc.y = SerialArduinoGyroResponce.sRawGyroAcc.Y;
 8000d90:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <main+0x260>)
 8000d92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	4b4a      	ldr	r3, [pc, #296]	; (8000ec4 <main+0x28c>)
 8000d9a:	811a      	strh	r2, [r3, #8]
		  GyroSource.GyroAcc.z = SerialArduinoGyroResponce.sRawGyroAcc.Z;
 8000d9c:	4b3e      	ldr	r3, [pc, #248]	; (8000e98 <main+0x260>)
 8000d9e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	4b47      	ldr	r3, [pc, #284]	; (8000ec4 <main+0x28c>)
 8000da6:	815a      	strh	r2, [r3, #10]

		  GyroSource.Accels.x = SerialArduinoGyroResponce.sRawAccels.X;
 8000da8:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <main+0x260>)
 8000daa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	4b44      	ldr	r3, [pc, #272]	; (8000ec4 <main+0x28c>)
 8000db2:	819a      	strh	r2, [r3, #12]
		  GyroSource.Accels.y = SerialArduinoGyroResponce.sRawAccels.Y;
 8000db4:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <main+0x260>)
 8000db6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000dba:	b21a      	sxth	r2, r3
 8000dbc:	4b41      	ldr	r3, [pc, #260]	; (8000ec4 <main+0x28c>)
 8000dbe:	81da      	strh	r2, [r3, #14]
		  GyroSource.Accels.z = SerialArduinoGyroResponce.sRawAccels.Z;
 8000dc0:	4b35      	ldr	r3, [pc, #212]	; (8000e98 <main+0x260>)
 8000dc2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000dc6:	b21a      	sxth	r2, r3
 8000dc8:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <main+0x28c>)
 8000dca:	821a      	strh	r2, [r3, #16]

		  GyroSource.LastPkgTime = PackageLastTimeReset_GYRO;
 8000dcc:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <main+0x280>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a3c      	ldr	r2, [pc, #240]	; (8000ec4 <main+0x28c>)
 8000dd2:	6153      	str	r3, [r2, #20]
	  }



	  if ((USART1ReceiveState == 10) && (SerialOnBoardRequest.CR == 13) && (SerialOnBoardRequest.LF == 10))
 8000dd4:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <main+0x26c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b0a      	cmp	r3, #10
 8000ddc:	f47f af52 	bne.w	8000c84 <main+0x4c>
 8000de0:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <main+0x270>)
 8000de2:	7a1b      	ldrb	r3, [r3, #8]
 8000de4:	2b0d      	cmp	r3, #13
 8000de6:	f47f af4d 	bne.w	8000c84 <main+0x4c>
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <main+0x270>)
 8000dec:	7a5b      	ldrb	r3, [r3, #9]
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	f47f af48 	bne.w	8000c84 <main+0x4c>
	  {
		  USART1ReceiveState = 0;
 8000df4:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <main+0x26c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000dfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfe:	4830      	ldr	r0, [pc, #192]	; (8000ec0 <main+0x288>)
 8000e00:	f002 fa6f 	bl	80032e2 <HAL_GPIO_TogglePin>

		  if ((SerialOnBoardRequest.Linear <= 0.3) && (SerialOnBoardRequest.Linear >= -0.3))
 8000e04:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <main+0x270>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fb41 	bl	8000490 <__aeabi_f2d>
 8000e0e:	a31c      	add	r3, pc, #112	; (adr r3, 8000e80 <main+0x248>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	f7ff fbfe 	bl	8000614 <__aeabi_dcmple>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d014      	beq.n	8000e48 <main+0x210>
 8000e1e:	4b22      	ldr	r3, [pc, #136]	; (8000ea8 <main+0x270>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fb34 	bl	8000490 <__aeabi_f2d>
 8000e28:	a317      	add	r3, pc, #92	; (adr r3, 8000e88 <main+0x250>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	f7ff fbfb 	bl	8000628 <__aeabi_dcmpge>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d007      	beq.n	8000e48 <main+0x210>
		  {
			  Left = SerialOnBoardRequest.Linear;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <main+0x270>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <main+0x290>)
 8000e3e:	6013      	str	r3, [r2, #0]
			  Right = SerialOnBoardRequest.Linear;
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <main+0x270>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <main+0x294>)
 8000e46:	6013      	str	r3, [r2, #0]
		  }

		  SerialOnBoardResponce.WheelLeftSteps = SerialControlWheelsResponce.WheelLeftSteps;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <main+0x258>)
 8000e4a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8000e4e:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <main+0x298>)
 8000e50:	6013      	str	r3, [r2, #0]
		  SerialOnBoardResponce.WheelRightSteps = SerialControlWheelsResponce.WheelRightSteps;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <main+0x258>)
 8000e54:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <main+0x298>)
 8000e5a:	6053      	str	r3, [r2, #4]
		  SerialOnBoardResponce.CR = 13;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <main+0x298>)
 8000e5e:	220d      	movs	r2, #13
 8000e60:	721a      	strb	r2, [r3, #8]
		  SerialOnBoardResponce.LF = 10;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <main+0x298>)
 8000e64:	220a      	movs	r2, #10
 8000e66:	725a      	strb	r2, [r3, #9]

 		  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)SerialOnBoardResponce.Buffer, ON_BOARD_CONTROL_RESPONCE_SIZE);
 8000e68:	220a      	movs	r2, #10
 8000e6a:	4919      	ldr	r1, [pc, #100]	; (8000ed0 <main+0x298>)
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <main+0x25c>)
 8000e6e:	f003 fd37 	bl	80048e0 <HAL_UART_Transmit_DMA>

		  PackageLastTimeReset_OnBoardPC = HAL_GetTick();
 8000e72:	f001 f8ff 	bl	8002074 <HAL_GetTick>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <main+0x268>)
 8000e7a:	6013      	str	r3, [r2, #0]
	  if (HAL_GetTick() - PackageLastTimeReset_OnBoardPC > 1000)
 8000e7c:	e702      	b.n	8000c84 <main+0x4c>
 8000e7e:	bf00      	nop
 8000e80:	33333333 	.word	0x33333333
 8000e84:	3fd33333 	.word	0x3fd33333
 8000e88:	33333333 	.word	0x33333333
 8000e8c:	bfd33333 	.word	0xbfd33333
 8000e90:	20000134 	.word	0x20000134
 8000e94:	200004b0 	.word	0x200004b0
 8000e98:	20000380 	.word	0x20000380
 8000e9c:	200000f0 	.word	0x200000f0
 8000ea0:	200001b4 	.word	0x200001b4
 8000ea4:	20000028 	.word	0x20000028
 8000ea8:	200003e8 	.word	0x200003e8
 8000eac:	2000033c 	.word	0x2000033c
 8000eb0:	2000040c 	.word	0x2000040c
 8000eb4:	20000029 	.word	0x20000029
 8000eb8:	20000584 	.word	0x20000584
 8000ebc:	2000002a 	.word	0x2000002a
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	200003f4 	.word	0x200003f4
 8000ec8:	200001b8 	.word	0x200001b8
 8000ecc:	2000008c 	.word	0x2000008c
 8000ed0:	20000394 	.word	0x20000394

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b094      	sub	sp, #80	; 0x50
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	2230      	movs	r2, #48	; 0x30
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f004 fe08 	bl	8005af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <SystemClock_Config+0xcc>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <SystemClock_Config+0xcc>)
 8000f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f06:	6413      	str	r3, [r2, #64]	; 0x40
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <SystemClock_Config+0xcc>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <SystemClock_Config+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <SystemClock_Config+0xd0>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <SystemClock_Config+0xd0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f30:	2301      	movs	r3, #1
 8000f32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f44:	2304      	movs	r3, #4
 8000f46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f48:	23a8      	movs	r3, #168	; 0xa8
 8000f4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f50:	2304      	movs	r3, #4
 8000f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 f9dd 	bl	8003318 <HAL_RCC_OscConfig>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f64:	f000 fbaa 	bl	80016bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	230f      	movs	r3, #15
 8000f6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2105      	movs	r1, #5
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 fc3e 	bl	8003808 <HAL_RCC_ClockConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f92:	f000 fb93 	bl	80016bc <Error_Handler>
  }
}
 8000f96:	bf00      	nop
 8000f98:	3750      	adds	r7, #80	; 0x50
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fbc:	4a21      	ldr	r2, [pc, #132]	; (8001044 <MX_ADC1_Init+0x9c>)
 8000fbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_ADC1_Init+0x98>)
 8000fea:	4a17      	ldr	r2, [pc, #92]	; (8001048 <MX_ADC1_Init+0xa0>)
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_ADC1_Init+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_ADC1_Init+0x98>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_ADC1_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_ADC1_Init+0x98>)
 8001004:	2201      	movs	r2, #1
 8001006:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_ADC1_Init+0x98>)
 800100a:	f001 f83f 	bl	800208c <HAL_ADC_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001014:	f000 fb52 	bl	80016bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001018:	2302      	movs	r3, #2
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_ADC1_Init+0x98>)
 800102a:	f001 f873 	bl	8002114 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001034:	f000 fb42 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000234 	.word	0x20000234
 8001044:	40012000 	.word	0x40012000
 8001048:	0f000001 	.word	0x0f000001

0800104c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_SPI1_Init+0x64>)
 8001052:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <MX_SPI1_Init+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_SPI1_Init+0x64>)
 8001058:	f44f 7282 	mov.w	r2, #260	; 0x104
 800105c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_SPI1_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_SPI1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_SPI1_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_SPI1_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_SPI1_Init+0x64>)
 8001078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_SPI1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <MX_SPI1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_SPI1_Init+0x64>)
 8001098:	220a      	movs	r2, #10
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MX_SPI1_Init+0x64>)
 800109e:	f002 fdaf 	bl	8003c00 <HAL_SPI_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010a8:	f000 fb08 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000410 	.word	0x20000410
 80010b4:	40013000 	.word	0x40013000

080010b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08e      	sub	sp, #56	; 0x38
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e8:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <MX_TIM2_Init+0x128>)
 80010ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010f0:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <MX_TIM2_Init+0x128>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <MX_TIM2_Init+0x128>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <MX_TIM2_Init+0x128>)
 80010fe:	2259      	movs	r2, #89	; 0x59
 8001100:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001102:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <MX_TIM2_Init+0x128>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <MX_TIM2_Init+0x128>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800110e:	4834      	ldr	r0, [pc, #208]	; (80011e0 <MX_TIM2_Init+0x128>)
 8001110:	f002 fdff 	bl	8003d12 <HAL_TIM_Base_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800111a:	f000 facf 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001128:	4619      	mov	r1, r3
 800112a:	482d      	ldr	r0, [pc, #180]	; (80011e0 <MX_TIM2_Init+0x128>)
 800112c:	f002 ff5c 	bl	8003fe8 <HAL_TIM_ConfigClockSource>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001136:	f000 fac1 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800113a:	4829      	ldr	r0, [pc, #164]	; (80011e0 <MX_TIM2_Init+0x128>)
 800113c:	f002 fe38 	bl	8003db0 <HAL_TIM_PWM_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001146:	f000 fab9 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	4619      	mov	r1, r3
 8001158:	4821      	ldr	r0, [pc, #132]	; (80011e0 <MX_TIM2_Init+0x128>)
 800115a:	f003 faf7 	bl	800474c <HAL_TIMEx_MasterConfigSynchronization>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001164:	f000 faaa 	bl	80016bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001168:	2360      	movs	r3, #96	; 0x60
 800116a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	4619      	mov	r1, r3
 800117e:	4818      	ldr	r0, [pc, #96]	; (80011e0 <MX_TIM2_Init+0x128>)
 8001180:	f002 fe70 	bl	8003e64 <HAL_TIM_PWM_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800118a:	f000 fa97 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2204      	movs	r2, #4
 8001192:	4619      	mov	r1, r3
 8001194:	4812      	ldr	r0, [pc, #72]	; (80011e0 <MX_TIM2_Init+0x128>)
 8001196:	f002 fe65 	bl	8003e64 <HAL_TIM_PWM_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80011a0:	f000 fa8c 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2208      	movs	r2, #8
 80011a8:	4619      	mov	r1, r3
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <MX_TIM2_Init+0x128>)
 80011ac:	f002 fe5a 	bl	8003e64 <HAL_TIM_PWM_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 80011b6:	f000 fa81 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	220c      	movs	r2, #12
 80011be:	4619      	mov	r1, r3
 80011c0:	4807      	ldr	r0, [pc, #28]	; (80011e0 <MX_TIM2_Init+0x128>)
 80011c2:	f002 fe4f 	bl	8003e64 <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80011cc:	f000 fa76 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <MX_TIM2_Init+0x128>)
 80011d2:	f000 fbc7 	bl	8001964 <HAL_TIM_MspPostInit>

}
 80011d6:	bf00      	nop
 80011d8:	3738      	adds	r7, #56	; 0x38
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000468 	.word	0x20000468

080011e4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_TIM6_Init+0x64>)
 80011f4:	4a15      	ldr	r2, [pc, #84]	; (800124c <MX_TIM6_Init+0x68>)
 80011f6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_TIM6_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_TIM6_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_TIM6_Init+0x64>)
 8001206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_TIM6_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <MX_TIM6_Init+0x64>)
 8001214:	f002 fd7d 	bl	8003d12 <HAL_TIM_Base_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800121e:	f000 fa4d 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	4619      	mov	r1, r3
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_TIM6_Init+0x64>)
 8001230:	f003 fa8c 	bl	800474c <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800123a:	f000 fa3f 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200003a0 	.word	0x200003a0
 800124c:	40001000 	.word	0x40001000

08001250 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_TIM7_Init+0x64>)
 8001260:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <MX_TIM7_Init+0x68>)
 8001262:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_TIM7_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_TIM7_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_TIM7_Init+0x64>)
 8001272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001276:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_TIM7_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_TIM7_Init+0x64>)
 8001280:	f002 fd47 	bl	8003d12 <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800128a:	f000 fa17 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001296:	463b      	mov	r3, r7
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	; (80012b4 <MX_TIM7_Init+0x64>)
 800129c:	f003 fa56 	bl	800474c <HAL_TIMEx_MasterConfigSynchronization>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80012a6:	f000 fa09 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000053c 	.word	0x2000053c
 80012b8:	40001400 	.word	0x40001400

080012bc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
 80012d0:	615a      	str	r2, [r3, #20]
 80012d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <MX_TIM14_Init+0x94>)
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <MX_TIM14_Init+0x98>)
 80012d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 720;
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_TIM14_Init+0x94>)
 80012dc:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80012e0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_TIM14_Init+0x94>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_TIM14_Init+0x94>)
 80012ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_TIM14_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_TIM14_Init+0x94>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80012fc:	4814      	ldr	r0, [pc, #80]	; (8001350 <MX_TIM14_Init+0x94>)
 80012fe:	f002 fd08 	bl	8003d12 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8001308:	f000 f9d8 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800130c:	4810      	ldr	r0, [pc, #64]	; (8001350 <MX_TIM14_Init+0x94>)
 800130e:	f002 fd4f 	bl	8003db0 <HAL_TIM_PWM_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8001318:	f000 f9d0 	bl	80016bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131c:	2360      	movs	r3, #96	; 0x60
 800131e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001320:	2332      	movs	r3, #50	; 0x32
 8001322:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	4619      	mov	r1, r3
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <MX_TIM14_Init+0x94>)
 8001334:	f002 fd96 	bl	8003e64 <HAL_TIM_PWM_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800133e:	f000 f9bd 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001342:	4803      	ldr	r0, [pc, #12]	; (8001350 <MX_TIM14_Init+0x94>)
 8001344:	f000 fb0e 	bl	8001964 <HAL_TIM_MspPostInit>

}
 8001348:	bf00      	nop
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200004f4 	.word	0x200004f4
 8001354:	40002000 	.word	0x40002000

08001358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <MX_USART1_UART_Init+0x50>)
 8001360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001390:	f003 fa58 	bl	8004844 <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800139a:	f000 f98f 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000033c 	.word	0x2000033c
 80013a8:	40011000 	.word	0x40011000

080013ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <MX_USART2_UART_Init+0x50>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80013bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_USART2_UART_Init+0x4c>)
 80013e4:	f003 fa2e 	bl	8004844 <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ee:	f000 f965 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200004b0 	.word	0x200004b0
 80013fc:	40004400 	.word	0x40004400

08001400 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USART3_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_USART3_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_USART3_UART_Init+0x4c>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USART3_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USART3_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USART3_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USART3_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USART3_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USART3_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USART3_UART_Init+0x4c>)
 8001438:	f003 fa04 	bl	8004844 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f000 f93b 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200000f0 	.word	0x200000f0
 8001450:	40004800 	.word	0x40004800

08001454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b27      	ldr	r3, [pc, #156]	; (80014fc <MX_DMA_Init+0xa8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a26      	ldr	r2, [pc, #152]	; (80014fc <MX_DMA_Init+0xa8>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <MX_DMA_Init+0xa8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <MX_DMA_Init+0xa8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <MX_DMA_Init+0xa8>)
 8001480:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_DMA_Init+0xa8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	200c      	movs	r0, #12
 8001498:	f001 f935 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800149c:	200c      	movs	r0, #12
 800149e:	f001 f94e 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	200e      	movs	r0, #14
 80014a8:	f001 f92d 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80014ac:	200e      	movs	r0, #14
 80014ae:	f001 f946 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2010      	movs	r0, #16
 80014b8:	f001 f925 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014bc:	2010      	movs	r0, #16
 80014be:	f001 f93e 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2011      	movs	r0, #17
 80014c8:	f001 f91d 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014cc:	2011      	movs	r0, #17
 80014ce:	f001 f936 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	203a      	movs	r0, #58	; 0x3a
 80014d8:	f001 f915 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014dc:	203a      	movs	r0, #58	; 0x3a
 80014de:	f001 f92e 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2100      	movs	r1, #0
 80014e6:	2046      	movs	r0, #70	; 0x46
 80014e8:	f001 f90d 	bl	8002706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80014ec:	2046      	movs	r0, #70	; 0x46
 80014ee:	f001 f926 	bl	800273e <HAL_NVIC_EnableIRQ>

}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a61      	ldr	r2, [pc, #388]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a5a      	ldr	r2, [pc, #360]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a53      	ldr	r2, [pc, #332]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 8001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a4c      	ldr	r2, [pc, #304]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b46      	ldr	r3, [pc, #280]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a45      	ldr	r2, [pc, #276]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b3f      	ldr	r3, [pc, #252]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a3e      	ldr	r2, [pc, #248]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <MX_GPIO_Init+0x1a4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2104      	movs	r1, #4
 80015c2:	4839      	ldr	r0, [pc, #228]	; (80016a8 <MX_GPIO_Init+0x1a8>)
 80015c4:	f001 fe74 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin|PLATFORM_PWR_ON_RELAY_Pin|PWR_STATION_RELAY_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80015ce:	4837      	ldr	r0, [pc, #220]	; (80016ac <MX_GPIO_Init+0x1ac>)
 80015d0:	f001 fe6e 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80015da:	4835      	ldr	r0, [pc, #212]	; (80016b0 <MX_GPIO_Init+0x1b0>)
 80015dc:	f001 fe68 	bl	80032b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM20948_CS_Pin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 80015e0:	2304      	movs	r3, #4
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	482c      	ldr	r0, [pc, #176]	; (80016a8 <MX_GPIO_Init+0x1a8>)
 80015f8:	f001 fcbe 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : J11_RESERVED_Pin J12_RESERVED_Pin J13_RESERVED_Pin J14_RESERVED_Pin
                           J2_GYRO_SELECTOR_Pin J3_SERVO_SELECTOR_Pin J4_POWER_LOGIC_Pin J5_LED_LINE_Pin
                           J6_IK_SENSORS_Pin J7_UART_PROTO_Pin J8_AUTO_PARKING_Pin J9_GYRO_STABLE_Pin
                           J10_FACTORY_MODE_Pin */
  GPIO_InitStruct.Pin = J11_RESERVED_Pin|J12_RESERVED_Pin|J13_RESERVED_Pin|J14_RESERVED_Pin
 80015fc:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001600:	61fb      	str	r3, [r7, #28]
                          |J2_GYRO_SELECTOR_Pin|J3_SERVO_SELECTOR_Pin|J4_POWER_LOGIC_Pin|J5_LED_LINE_Pin
                          |J6_IK_SENSORS_Pin|J7_UART_PROTO_Pin|J8_AUTO_PARKING_Pin|J9_GYRO_STABLE_Pin
                          |J10_FACTORY_MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	4825      	ldr	r0, [pc, #148]	; (80016a8 <MX_GPIO_Init+0x1a8>)
 8001612:	f001 fcb1 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_2_PWR_ON_Pin J15_RESERVED_Pin */
  GPIO_InitStruct.Pin = BTN_2_PWR_ON_Pin|J15_RESERVED_Pin;
 8001616:	f240 2302 	movw	r3, #514	; 0x202
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4820      	ldr	r0, [pc, #128]	; (80016ac <MX_GPIO_Init+0x1ac>)
 800162c:	f001 fca4 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_LED_Pin */
  GPIO_InitStruct.Pin = BTN_1_LED_Pin;
 8001630:	2301      	movs	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_1_LED_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	481c      	ldr	r0, [pc, #112]	; (80016b4 <MX_GPIO_Init+0x1b4>)
 8001644:	f001 fc98 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRIVER_STEP_Pin DRIVER_DIR_Pin PLATFORM_PWR_ON_RELAY_Pin PWR_STATION_RELAY_Pin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin|PLATFORM_PWR_ON_RELAY_Pin|PWR_STATION_RELAY_Pin;
 8001648:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <MX_GPIO_Init+0x1ac>)
 8001662:	f001 fc89 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_SERVICE_LED_Pin */
  GPIO_InitStruct.Pin = J1_SERVICE_LED_Pin;
 8001666:	2304      	movs	r3, #4
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(J1_SERVICE_LED_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	480f      	ldr	r0, [pc, #60]	; (80016b8 <MX_GPIO_Init+0x1b8>)
 800167a:	f001 fc7d 	bl	8002f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 800167e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <MX_GPIO_Init+0x1b0>)
 8001698:	f001 fc6e 	bl	8002f78 <HAL_GPIO_Init>

}
 800169c:	bf00      	nop
 800169e:	3730      	adds	r7, #48	; 0x30
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020c00 	.word	0x40020c00
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020400 	.word	0x40020400

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_MspInit+0x4c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_MspInit+0x4c>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_MspInit+0x4c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_MspInit+0x4c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_MspInit+0x4c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_MspInit+0x4c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a31      	ldr	r2, [pc, #196]	; (80017fc <HAL_ADC_MspInit+0xe4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d15b      	bne.n	80017f2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	4b29      	ldr	r3, [pc, #164]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a28      	ldr	r2, [pc, #160]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_AMP_36V_Pin|ADC_VOLT_BAT_Pin|ADC_VOLT_PWR_ST_Pin;
 80017aa:	230d      	movs	r3, #13
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ae:	2303      	movs	r3, #3
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4619      	mov	r1, r3
 80017bc:	4811      	ldr	r0, [pc, #68]	; (8001804 <HAL_ADC_MspInit+0xec>)
 80017be:	f001 fbdb 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IK_CENTER_Pin|ADC_IK_BACK_LEFT_Pin|ADC_IK_BACK_RIGHT_Pin|ADC_IK_FRONT_LEFT_Pin
 80017c2:	237c      	movs	r3, #124	; 0x7c
 80017c4:	61fb      	str	r3, [r7, #28]
                          |ADC_IK_FRONT_RIGHT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <HAL_ADC_MspInit+0xf0>)
 80017d6:	f001 fbcf 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_AMP_5V_Pin|ADC_AMP_12V_Pin;
 80017da:	2303      	movs	r3, #3
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017de:	2303      	movs	r3, #3
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	4807      	ldr	r0, [pc, #28]	; (800180c <HAL_ADC_MspInit+0xf4>)
 80017ee:	f001 fbc3 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3730      	adds	r7, #48	; 0x30
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40012000 	.word	0x40012000
 8001800:	40023800 	.word	0x40023800
 8001804:	40020800 	.word	0x40020800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400

08001810 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_SPI_MspInit+0x84>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d12b      	bne.n	800188a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_SPI_MspInit+0x88>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a17      	ldr	r2, [pc, #92]	; (8001898 <HAL_SPI_MspInit+0x88>)
 800183c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_SPI_MspInit+0x88>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_SPI_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a10      	ldr	r2, [pc, #64]	; (8001898 <HAL_SPI_MspInit+0x88>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_SPI_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 800186a:	2338      	movs	r3, #56	; 0x38
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800187a:	2305      	movs	r3, #5
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_SPI_MspInit+0x8c>)
 8001886:	f001 fb77 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40013000 	.word	0x40013000
 8001898:	40023800 	.word	0x40023800
 800189c:	40020400 	.word	0x40020400

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b0:	d10e      	bne.n	80018d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	4b27      	ldr	r3, [pc, #156]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a26      	ldr	r2, [pc, #152]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80018ce:	e03a      	b.n	8001946 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a20      	ldr	r2, [pc, #128]	; (8001958 <HAL_TIM_Base_MspInit+0xb8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10e      	bne.n	80018f8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018e4:	f043 0310 	orr.w	r3, r3, #16
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
}
 80018f6:	e026      	b.n	8001946 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_TIM_Base_MspInit+0xbc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10e      	bne.n	8001920 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 800190c:	f043 0320 	orr.w	r3, r3, #32
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
}
 800191e:	e012      	b.n	8001946 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_TIM_Base_MspInit+0xc0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10d      	bne.n	8001946 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a08      	ldr	r2, [pc, #32]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 8001934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_TIM_Base_MspInit+0xb4>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40001000 	.word	0x40001000
 800195c:	40001400 	.word	0x40001400
 8001960:	40002000 	.word	0x40002000

08001964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001984:	d13e      	bne.n	8001a04 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <HAL_TIM_MspPostInit+0xf0>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a31      	ldr	r2, [pc, #196]	; (8001a54 <HAL_TIM_MspPostInit+0xf0>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_TIM_MspPostInit+0xf0>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_TIM_MspPostInit+0xf0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a2a      	ldr	r2, [pc, #168]	; (8001a54 <HAL_TIM_MspPostInit+0xf0>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_TIM_MspPostInit+0xf0>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_2_Pin|LED_PWM_1_Pin;
 80019be:	f248 0302 	movw	r3, #32770	; 0x8002
 80019c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019d0:	2301      	movs	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	481f      	ldr	r0, [pc, #124]	; (8001a58 <HAL_TIM_MspPostInit+0xf4>)
 80019dc:	f001 facc 	bl	8002f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_PWM_3_Pin|LED_PWM_4_Pin;
 80019e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019f2:	2301      	movs	r3, #1
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4817      	ldr	r0, [pc, #92]	; (8001a5c <HAL_TIM_MspPostInit+0xf8>)
 80019fe:	f001 fabb 	bl	8002f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001a02:	e022      	b.n	8001a4a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM14)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_TIM_MspPostInit+0xfc>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d11d      	bne.n	8001a4a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_TIM_MspPostInit+0xf0>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_TIM_MspPostInit+0xf0>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_TIM_MspPostInit+0xf0>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001a3a:	2309      	movs	r3, #9
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <HAL_TIM_MspPostInit+0xf4>)
 8001a46:	f001 fa97 	bl	8002f78 <HAL_GPIO_Init>
}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	40002000 	.word	0x40002000

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08e      	sub	sp, #56	; 0x38
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a94      	ldr	r2, [pc, #592]	; (8001cd4 <HAL_UART_MspInit+0x270>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	f040 808c 	bne.w	8001ba0 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
 8001a8c:	4b92      	ldr	r3, [pc, #584]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a90:	4a91      	ldr	r2, [pc, #580]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001a92:	f043 0310 	orr.w	r3, r3, #16
 8001a96:	6453      	str	r3, [r2, #68]	; 0x44
 8001a98:	4b8f      	ldr	r3, [pc, #572]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	623b      	str	r3, [r7, #32]
 8001aa2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	4b8b      	ldr	r3, [pc, #556]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	4a8a      	ldr	r2, [pc, #552]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab4:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = JETSON_TX_Pin|JETSON_RX_Pin;
 8001ac0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ada:	4619      	mov	r1, r3
 8001adc:	487f      	ldr	r0, [pc, #508]	; (8001cdc <HAL_UART_MspInit+0x278>)
 8001ade:	f001 fa4b 	bl	8002f78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001ae2:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001ae4:	4a7f      	ldr	r2, [pc, #508]	; (8001ce4 <HAL_UART_MspInit+0x280>)
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001ae8:	4b7d      	ldr	r3, [pc, #500]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001aea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af0:	4b7b      	ldr	r3, [pc, #492]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af6:	4b7a      	ldr	r3, [pc, #488]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001afc:	4b78      	ldr	r3, [pc, #480]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b02:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b04:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0a:	4b75      	ldr	r3, [pc, #468]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b10:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b16:	4b72      	ldr	r3, [pc, #456]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001b18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b1c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1e:	4b70      	ldr	r3, [pc, #448]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b24:	486e      	ldr	r0, [pc, #440]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001b26:	f000 fe25 	bl	8002774 <HAL_DMA_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001b30:	f7ff fdc4 	bl	80016bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a6a      	ldr	r2, [pc, #424]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
 8001b3a:	4a69      	ldr	r2, [pc, #420]	; (8001ce0 <HAL_UART_MspInit+0x27c>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001b40:	4b69      	ldr	r3, [pc, #420]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b42:	4a6a      	ldr	r2, [pc, #424]	; (8001cec <HAL_UART_MspInit+0x288>)
 8001b44:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001b46:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b4e:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b50:	2240      	movs	r2, #64	; 0x40
 8001b52:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b54:	4b64      	ldr	r3, [pc, #400]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b5a:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b60:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b62:	4b61      	ldr	r3, [pc, #388]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b68:	4b5f      	ldr	r3, [pc, #380]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b6e:	4b5e      	ldr	r3, [pc, #376]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b74:	4b5c      	ldr	r3, [pc, #368]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b7a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b7c:	4b5a      	ldr	r3, [pc, #360]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b82:	4859      	ldr	r0, [pc, #356]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b84:	f000 fdf6 	bl	8002774 <HAL_DMA_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001b8e:	f7ff fd95 	bl	80016bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a54      	ldr	r2, [pc, #336]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b96:	635a      	str	r2, [r3, #52]	; 0x34
 8001b98:	4a53      	ldr	r2, [pc, #332]	; (8001ce8 <HAL_UART_MspInit+0x284>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b9e:	e144      	b.n	8001e2a <HAL_UART_MspInit+0x3c6>
  else if(huart->Instance==USART2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_UART_MspInit+0x28c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f040 80ae 	bne.w	8001d08 <HAL_UART_MspInit+0x2a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	4a48      	ldr	r2, [pc, #288]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bba:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbc:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	61bb      	str	r3, [r7, #24]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	4b42      	ldr	r3, [pc, #264]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4a41      	ldr	r2, [pc, #260]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001bd2:	f043 0308 	orr.w	r3, r3, #8
 8001bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd8:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_UART_MspInit+0x274>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GYROSCOOTER_TX_Pin|GYROSCOOTER_RX_Pin;
 8001be4:	2360      	movs	r3, #96	; 0x60
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	483d      	ldr	r0, [pc, #244]	; (8001cf4 <HAL_UART_MspInit+0x290>)
 8001c00:	f001 f9ba 	bl	8002f78 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c04:	4b3c      	ldr	r3, [pc, #240]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c06:	4a3d      	ldr	r2, [pc, #244]	; (8001cfc <HAL_UART_MspInit+0x298>)
 8001c08:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c10:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c12:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c18:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c24:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c2c:	4b32      	ldr	r3, [pc, #200]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c32:	4b31      	ldr	r3, [pc, #196]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c38:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c3e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c40:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c46:	482c      	ldr	r0, [pc, #176]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c48:	f000 fd94 	bl	8002774 <HAL_DMA_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 8001c52:	f7ff fd33 	bl	80016bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a27      	ldr	r2, [pc, #156]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c5c:	4a26      	ldr	r2, [pc, #152]	; (8001cf8 <HAL_UART_MspInit+0x294>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001c64:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_UART_MspInit+0x2a0>)
 8001c66:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c70:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001c72:	2240      	movs	r2, #64	; 0x40
 8001c74:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c82:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c84:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001c98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ca4:	4816      	ldr	r0, [pc, #88]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001ca6:	f000 fd65 	bl	8002774 <HAL_DMA_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_UART_MspInit+0x250>
      Error_Handler();
 8001cb0:	f7ff fd04 	bl	80016bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cba:	4a11      	ldr	r2, [pc, #68]	; (8001d00 <HAL_UART_MspInit+0x29c>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2026      	movs	r0, #38	; 0x26
 8001cc6:	f000 fd1e 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cca:	2026      	movs	r0, #38	; 0x26
 8001ccc:	f000 fd37 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8001cd0:	e0ab      	b.n	8001e2a <HAL_UART_MspInit+0x3c6>
 8001cd2:	bf00      	nop
 8001cd4:	40011000 	.word	0x40011000
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	2000027c 	.word	0x2000027c
 8001ce4:	40026440 	.word	0x40026440
 8001ce8:	200001bc 	.word	0x200001bc
 8001cec:	400264b8 	.word	0x400264b8
 8001cf0:	40004400 	.word	0x40004400
 8001cf4:	40020c00 	.word	0x40020c00
 8001cf8:	2000002c 	.word	0x2000002c
 8001cfc:	40026088 	.word	0x40026088
 8001d00:	200002dc 	.word	0x200002dc
 8001d04:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a49      	ldr	r2, [pc, #292]	; (8001e34 <HAL_UART_MspInit+0x3d0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	f040 808b 	bne.w	8001e2a <HAL_UART_MspInit+0x3c6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <HAL_UART_MspInit+0x3d4>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a46      	ldr	r2, [pc, #280]	; (8001e38 <HAL_UART_MspInit+0x3d4>)
 8001d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
 8001d24:	4b44      	ldr	r3, [pc, #272]	; (8001e38 <HAL_UART_MspInit+0x3d4>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <HAL_UART_MspInit+0x3d4>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4a3f      	ldr	r2, [pc, #252]	; (8001e38 <HAL_UART_MspInit+0x3d4>)
 8001d3a:	f043 0308 	orr.w	r3, r3, #8
 8001d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d40:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_UART_MspInit+0x3d4>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_MPU9250_TX_Pin|ARDUINO_MPU9250_RX_Pin;
 8001d4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d5e:	2307      	movs	r3, #7
 8001d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d66:	4619      	mov	r1, r3
 8001d68:	4834      	ldr	r0, [pc, #208]	; (8001e3c <HAL_UART_MspInit+0x3d8>)
 8001d6a:	f001 f905 	bl	8002f78 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001d6e:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001d70:	4a34      	ldr	r2, [pc, #208]	; (8001e44 <HAL_UART_MspInit+0x3e0>)
 8001d72:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001d74:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d7a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7c:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d8e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001da2:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001da4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001da8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001daa:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001db0:	4823      	ldr	r0, [pc, #140]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001db2:	f000 fcdf 	bl	8002774 <HAL_DMA_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8001dbc:	f7ff fc7e 	bl	80016bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <HAL_UART_MspInit+0x3dc>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001dce:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <HAL_UART_MspInit+0x3e8>)
 8001dd0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001dd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001ddc:	2240      	movs	r2, #64	; 0x40
 8001dde:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dec:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001e02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e06:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001e0e:	480e      	ldr	r0, [pc, #56]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001e10:	f000 fcb0 	bl	8002774 <HAL_DMA_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8001e1a:	f7ff fc4f 	bl	80016bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001e22:	635a      	str	r2, [r3, #52]	; 0x34
 8001e24:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <HAL_UART_MspInit+0x3e4>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e2a:	bf00      	nop
 8001e2c:	3738      	adds	r7, #56	; 0x38
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40004800 	.word	0x40004800
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020c00 	.word	0x40020c00
 8001e40:	20000090 	.word	0x20000090
 8001e44:	40026028 	.word	0x40026028
 8001e48:	20000154 	.word	0x20000154
 8001e4c:	40026058 	.word	0x40026058

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <NMI_Handler+0x4>

08001e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <HardFault_Handler+0x4>

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <MemManage_Handler+0x4>

08001e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <BusFault_Handler+0x4>

08001e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <UsageFault_Handler+0x4>

08001e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e9c:	f000 f8d6 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <DMA1_Stream1_IRQHandler+0x10>)
 8001eaa:	f000 fdfb 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000090 	.word	0x20000090

08001eb8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <DMA1_Stream3_IRQHandler+0x10>)
 8001ebe:	f000 fdf1 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000154 	.word	0x20000154

08001ecc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <DMA1_Stream5_IRQHandler+0x10>)
 8001ed2:	f000 fde7 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000002c 	.word	0x2000002c

08001ee0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <DMA1_Stream6_IRQHandler+0x10>)
 8001ee6:	f000 fddd 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200002dc 	.word	0x200002dc

08001ef4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <USART2_IRQHandler+0x10>)
 8001efa:	f002 fd9f 	bl	8004a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200004b0 	.word	0x200004b0

08001f08 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <DMA2_Stream2_IRQHandler+0x10>)
 8001f0e:	f000 fdc9 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000027c 	.word	0x2000027c

08001f1c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <DMA2_Stream7_IRQHandler+0x10>)
 8001f22:	f000 fdbf 	bl	8002aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200001bc 	.word	0x200001bc

08001f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <SystemInit+0x20>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <SystemInit+0x20>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f5a:	490e      	ldr	r1, [pc, #56]	; (8001f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f70:	4c0b      	ldr	r4, [pc, #44]	; (8001fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f7e:	f7ff ffd7 	bl	8001f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f003 fd95 	bl	8005ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f86:	f7fe fe57 	bl	8000c38 <main>
  bx  lr    
 8001f8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f98:	08005b50 	.word	0x08005b50
  ldr r2, =_sbss
 8001f9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fa0:	20000594 	.word	0x20000594

08001fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <HAL_Init+0x40>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_Init+0x40>)
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_Init+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_Init+0x40>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 fb8d 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd6:	200f      	movs	r0, #15
 8001fd8:	f000 f808 	bl	8001fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fdc:	f7ff fb74 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023c00 	.word	0x40023c00

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_InitTick+0x54>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x58>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002002:	fbb3 f3f1 	udiv	r3, r3, r1
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fba5 	bl	800275a <HAL_SYSTICK_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e00e      	b.n	8002038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d80a      	bhi.n	8002036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f000 fb6d 	bl	8002706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_InitTick+0x5c>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000000 	.word	0x20000000
 8002044:	20000008 	.word	0x20000008
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000008 	.word	0x20000008
 8002070:	20000590 	.word	0x20000590

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000590 	.word	0x20000590

0800208c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e033      	b.n	800210a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fb34 	bl	8001718 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d118      	bne.n	80020fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020d2:	f023 0302 	bic.w	r3, r3, #2
 80020d6:	f043 0202 	orr.w	r2, r3, #2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f93a 	bl	8002358 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
 80020fa:	e001      	b.n	8002100 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x1c>
 800212c:	2302      	movs	r3, #2
 800212e:	e105      	b.n	800233c <HAL_ADC_ConfigChannel+0x228>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b09      	cmp	r3, #9
 800213e:	d925      	bls.n	800218c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68d9      	ldr	r1, [r3, #12]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	3b1e      	subs	r3, #30
 8002156:	2207      	movs	r2, #7
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43da      	mvns	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	400a      	ands	r2, r1
 8002164:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68d9      	ldr	r1, [r3, #12]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	4618      	mov	r0, r3
 8002178:	4603      	mov	r3, r0
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4403      	add	r3, r0
 800217e:	3b1e      	subs	r3, #30
 8002180:	409a      	lsls	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	e022      	b.n	80021d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6919      	ldr	r1, [r3, #16]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	2207      	movs	r2, #7
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43da      	mvns	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	400a      	ands	r2, r1
 80021ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6919      	ldr	r1, [r3, #16]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	4618      	mov	r0, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4403      	add	r3, r0
 80021c8:	409a      	lsls	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d824      	bhi.n	8002224 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3b05      	subs	r3, #5
 80021ec:	221f      	movs	r2, #31
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	400a      	ands	r2, r1
 80021fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	4618      	mov	r0, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	3b05      	subs	r3, #5
 8002216:	fa00 f203 	lsl.w	r2, r0, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	635a      	str	r2, [r3, #52]	; 0x34
 8002222:	e04c      	b.n	80022be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	d824      	bhi.n	8002276 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	3b23      	subs	r3, #35	; 0x23
 800223e:	221f      	movs	r2, #31
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43da      	mvns	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	400a      	ands	r2, r1
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	3b23      	subs	r3, #35	; 0x23
 8002268:	fa00 f203 	lsl.w	r2, r0, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
 8002274:	e023      	b.n	80022be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	3b41      	subs	r3, #65	; 0x41
 8002288:	221f      	movs	r2, #31
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	400a      	ands	r2, r1
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	3b41      	subs	r3, #65	; 0x41
 80022b2:	fa00 f203 	lsl.w	r2, r0, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <HAL_ADC_ConfigChannel+0x234>)
 80022c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a21      	ldr	r2, [pc, #132]	; (800234c <HAL_ADC_ConfigChannel+0x238>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d109      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x1cc>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b12      	cmp	r3, #18
 80022d2:	d105      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a19      	ldr	r2, [pc, #100]	; (800234c <HAL_ADC_ConfigChannel+0x238>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d123      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x21e>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d003      	beq.n	80022fa <HAL_ADC_ConfigChannel+0x1e6>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b11      	cmp	r3, #17
 80022f8:	d11b      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b10      	cmp	r3, #16
 800230c:	d111      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_ADC_ConfigChannel+0x23c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a10      	ldr	r2, [pc, #64]	; (8002354 <HAL_ADC_ConfigChannel+0x240>)
 8002314:	fba2 2303 	umull	r2, r3, r2, r3
 8002318:	0c9a      	lsrs	r2, r3, #18
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002324:	e002      	b.n	800232c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3b01      	subs	r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f9      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40012300 	.word	0x40012300
 800234c:	40012000 	.word	0x40012000
 8002350:	20000000 	.word	0x20000000
 8002354:	431bde83 	.word	0x431bde83

08002358 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002360:	4b79      	ldr	r3, [pc, #484]	; (8002548 <ADC_Init+0x1f0>)
 8002362:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	431a      	orrs	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800238c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	021a      	lsls	r2, r3, #8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6899      	ldr	r1, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	4a58      	ldr	r2, [pc, #352]	; (800254c <ADC_Init+0x1f4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d022      	beq.n	8002436 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002420:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	e00f      	b.n	8002456 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002454:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0202 	bic.w	r2, r2, #2
 8002464:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6899      	ldr	r1, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7e1b      	ldrb	r3, [r3, #24]
 8002470:	005a      	lsls	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002492:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	3b01      	subs	r3, #1
 80024b0:	035a      	lsls	r2, r3, #13
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	e007      	b.n	80024cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	051a      	lsls	r2, r3, #20
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002500:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800250e:	025a      	lsls	r2, r3, #9
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	029a      	lsls	r2, r3, #10
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	609a      	str	r2, [r3, #8]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40012300 	.word	0x40012300
 800254c:	0f000001 	.word	0x0f000001

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	; (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	; (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff29 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff3e 	bl	8002598 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8e 	bl	8002644 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5d 	bl	80025f0 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff31 	bl	80025b4 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa2 	bl	80026ac <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff fc78 	bl	8002074 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e099      	b.n	80028c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b0:	e00f      	b.n	80027d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027b2:	f7ff fc5f 	bl	8002074 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d908      	bls.n	80027d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e078      	b.n	80028c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e8      	bne.n	80027b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4b38      	ldr	r3, [pc, #224]	; (80028cc <HAL_DMA_Init+0x158>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002816:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	2b04      	cmp	r3, #4
 800282a:	d107      	bne.n	800283c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	4313      	orrs	r3, r2
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f023 0307 	bic.w	r3, r3, #7
 8002852:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2b04      	cmp	r3, #4
 8002864:	d117      	bne.n	8002896 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00e      	beq.n	8002896 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fb01 	bl	8002e80 <DMA_CheckFifoParam>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2240      	movs	r2, #64	; 0x40
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002892:	2301      	movs	r3, #1
 8002894:	e016      	b.n	80028c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fab8 	bl	8002e14 <DMA_CalcBaseAndBitshift>
 80028a4:	4603      	mov	r3, r0
 80028a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	223f      	movs	r2, #63	; 0x3f
 80028ae:	409a      	lsls	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	f010803f 	.word	0xf010803f

080028d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_DMA_Start_IT+0x26>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e040      	b.n	8002978 <HAL_DMA_Start_IT+0xa8>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d12f      	bne.n	800296a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2202      	movs	r2, #2
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fa4a 	bl	8002db8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	223f      	movs	r2, #63	; 0x3f
 800292a:	409a      	lsls	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0216 	orr.w	r2, r2, #22
 800293e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0208 	orr.w	r2, r2, #8
 8002956:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e005      	b.n	8002976 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002972:	2302      	movs	r3, #2
 8002974:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002976:	7dfb      	ldrb	r3, [r7, #23]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800298e:	f7ff fb71 	bl	8002074 <HAL_GetTick>
 8002992:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d008      	beq.n	80029b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e052      	b.n	8002a58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0216 	bic.w	r2, r2, #22
 80029c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <HAL_DMA_Abort+0x62>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0208 	bic.w	r2, r2, #8
 80029f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a02:	e013      	b.n	8002a2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a04:	f7ff fb36 	bl	8002074 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d90c      	bls.n	8002a2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e015      	b.n	8002a58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e4      	bne.n	8002a04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	223f      	movs	r2, #63	; 0x3f
 8002a40:	409a      	lsls	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d004      	beq.n	8002a7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00c      	b.n	8002a98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2205      	movs	r2, #5
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ab0:	4b92      	ldr	r3, [pc, #584]	; (8002cfc <HAL_DMA_IRQHandler+0x258>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a92      	ldr	r2, [pc, #584]	; (8002d00 <HAL_DMA_IRQHandler+0x25c>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a9b      	lsrs	r3, r3, #10
 8002abc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	2208      	movs	r2, #8
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01a      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0204 	bic.w	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	2208      	movs	r2, #8
 8002afe:	409a      	lsls	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	2201      	movs	r2, #1
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d012      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	2201      	movs	r2, #1
 8002b34:	409a      	lsls	r2, r3
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d012      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2204      	movs	r2, #4
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b74:	f043 0204 	orr.w	r2, r3, #4
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	2210      	movs	r2, #16
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d043      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d03c      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d018      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d024      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
 8002bd2:	e01f      	b.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
 8002be4:	e016      	b.n	8002c14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0208 	bic.w	r2, r2, #8
 8002c02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	2220      	movs	r2, #32
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 808e 	beq.w	8002d42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8086 	beq.w	8002d42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d136      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0216 	bic.w	r2, r2, #22
 8002c5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <HAL_DMA_IRQHandler+0x1da>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0208 	bic.w	r2, r2, #8
 8002c8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	223f      	movs	r2, #63	; 0x3f
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d07d      	beq.n	8002dae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	4798      	blx	r3
        }
        return;
 8002cba:	e078      	b.n	8002dae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01c      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d108      	bne.n	8002cea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d030      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e02b      	b.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d027      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	4798      	blx	r3
 8002cfa:	e022      	b.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10f      	bne.n	8002d32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0210 	bic.w	r2, r2, #16
 8002d20:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d032      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d022      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2205      	movs	r2, #5
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d307      	bcc.n	8002d8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f2      	bne.n	8002d6e <HAL_DMA_IRQHandler+0x2ca>
 8002d88:	e000      	b.n	8002d8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d8a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
 8002dac:	e000      	b.n	8002db0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002dae:	bf00      	nop
    }
  }
}
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop

08002db8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d108      	bne.n	8002df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002df6:	e007      	b.n	8002e08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	3b10      	subs	r3, #16
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <DMA_CalcBaseAndBitshift+0x64>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	091b      	lsrs	r3, r3, #4
 8002e2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <DMA_CalcBaseAndBitshift+0x68>)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d909      	bls.n	8002e56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	1d1a      	adds	r2, r3, #4
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	659a      	str	r2, [r3, #88]	; 0x58
 8002e54:	e007      	b.n	8002e66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	aaaaaaab 	.word	0xaaaaaaab
 8002e7c:	08005b38 	.word	0x08005b38

08002e80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0x5a>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d856      	bhi.n	8002f4e <DMA_CheckFifoParam+0xce>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <DMA_CheckFifoParam+0x28>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ecb 	.word	0x08002ecb
 8002eb0:	08002eb9 	.word	0x08002eb9
 8002eb4:	08002f4f 	.word	0x08002f4f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d046      	beq.n	8002f52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec8:	e043      	b.n	8002f52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ed2:	d140      	bne.n	8002f56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed8:	e03d      	b.n	8002f56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee2:	d121      	bne.n	8002f28 <DMA_CheckFifoParam+0xa8>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d837      	bhi.n	8002f5a <DMA_CheckFifoParam+0xda>
 8002eea:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <DMA_CheckFifoParam+0x70>)
 8002eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f07 	.word	0x08002f07
 8002ef8:	08002f01 	.word	0x08002f01
 8002efc:	08002f19 	.word	0x08002f19
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      break;
 8002f04:	e030      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d025      	beq.n	8002f5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f16:	e022      	b.n	8002f5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f20:	d11f      	bne.n	8002f62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f26:	e01c      	b.n	8002f62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d903      	bls.n	8002f36 <DMA_CheckFifoParam+0xb6>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d003      	beq.n	8002f3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f34:	e018      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3a:	e015      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4c:	e00b      	b.n	8002f66 <DMA_CheckFifoParam+0xe6>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e00a      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f52:	bf00      	nop
 8002f54:	e008      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e006      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e004      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e002      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f62:	bf00      	nop
 8002f64:	e000      	b.n	8002f68 <DMA_CheckFifoParam+0xe8>
      break;
 8002f66:	bf00      	nop
    }
  } 
  
  return status; 
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop

08002f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	e16b      	b.n	800326c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f94:	2201      	movs	r2, #1
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	f040 815a 	bne.w	8003266 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d005      	beq.n	8002fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d130      	bne.n	800302c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003000:	2201      	movs	r2, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 0201 	and.w	r2, r3, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b03      	cmp	r3, #3
 8003036:	d017      	beq.n	8003068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d123      	bne.n	80030bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	08da      	lsrs	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3208      	adds	r2, #8
 800307c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	220f      	movs	r2, #15
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	08da      	lsrs	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3208      	adds	r2, #8
 80030b6:	69b9      	ldr	r1, [r7, #24]
 80030b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0203 	and.w	r2, r3, #3
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80b4 	beq.w	8003266 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	4b60      	ldr	r3, [pc, #384]	; (8003284 <HAL_GPIO_Init+0x30c>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	4a5f      	ldr	r2, [pc, #380]	; (8003284 <HAL_GPIO_Init+0x30c>)
 8003108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800310c:	6453      	str	r3, [r2, #68]	; 0x44
 800310e:	4b5d      	ldr	r3, [pc, #372]	; (8003284 <HAL_GPIO_Init+0x30c>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800311a:	4a5b      	ldr	r2, [pc, #364]	; (8003288 <HAL_GPIO_Init+0x310>)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	089b      	lsrs	r3, r3, #2
 8003120:	3302      	adds	r3, #2
 8003122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	220f      	movs	r2, #15
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_GPIO_Init+0x314>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d02b      	beq.n	800319e <HAL_GPIO_Init+0x226>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a51      	ldr	r2, [pc, #324]	; (8003290 <HAL_GPIO_Init+0x318>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d025      	beq.n	800319a <HAL_GPIO_Init+0x222>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a50      	ldr	r2, [pc, #320]	; (8003294 <HAL_GPIO_Init+0x31c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01f      	beq.n	8003196 <HAL_GPIO_Init+0x21e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a4f      	ldr	r2, [pc, #316]	; (8003298 <HAL_GPIO_Init+0x320>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d019      	beq.n	8003192 <HAL_GPIO_Init+0x21a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a4e      	ldr	r2, [pc, #312]	; (800329c <HAL_GPIO_Init+0x324>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_GPIO_Init+0x216>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a4d      	ldr	r2, [pc, #308]	; (80032a0 <HAL_GPIO_Init+0x328>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00d      	beq.n	800318a <HAL_GPIO_Init+0x212>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a4c      	ldr	r2, [pc, #304]	; (80032a4 <HAL_GPIO_Init+0x32c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d007      	beq.n	8003186 <HAL_GPIO_Init+0x20e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a4b      	ldr	r2, [pc, #300]	; (80032a8 <HAL_GPIO_Init+0x330>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d101      	bne.n	8003182 <HAL_GPIO_Init+0x20a>
 800317e:	2307      	movs	r3, #7
 8003180:	e00e      	b.n	80031a0 <HAL_GPIO_Init+0x228>
 8003182:	2308      	movs	r3, #8
 8003184:	e00c      	b.n	80031a0 <HAL_GPIO_Init+0x228>
 8003186:	2306      	movs	r3, #6
 8003188:	e00a      	b.n	80031a0 <HAL_GPIO_Init+0x228>
 800318a:	2305      	movs	r3, #5
 800318c:	e008      	b.n	80031a0 <HAL_GPIO_Init+0x228>
 800318e:	2304      	movs	r3, #4
 8003190:	e006      	b.n	80031a0 <HAL_GPIO_Init+0x228>
 8003192:	2303      	movs	r3, #3
 8003194:	e004      	b.n	80031a0 <HAL_GPIO_Init+0x228>
 8003196:	2302      	movs	r3, #2
 8003198:	e002      	b.n	80031a0 <HAL_GPIO_Init+0x228>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <HAL_GPIO_Init+0x228>
 800319e:	2300      	movs	r3, #0
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	f002 0203 	and.w	r2, r2, #3
 80031a6:	0092      	lsls	r2, r2, #2
 80031a8:	4093      	lsls	r3, r2
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b0:	4935      	ldr	r1, [pc, #212]	; (8003288 <HAL_GPIO_Init+0x310>)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	3302      	adds	r3, #2
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <HAL_GPIO_Init+0x334>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e2:	4a32      	ldr	r2, [pc, #200]	; (80032ac <HAL_GPIO_Init+0x334>)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031e8:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_GPIO_Init+0x334>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800320c:	4a27      	ldr	r2, [pc, #156]	; (80032ac <HAL_GPIO_Init+0x334>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <HAL_GPIO_Init+0x334>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003236:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_GPIO_Init+0x334>)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800323c:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <HAL_GPIO_Init+0x334>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003260:	4a12      	ldr	r2, [pc, #72]	; (80032ac <HAL_GPIO_Init+0x334>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3301      	adds	r3, #1
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	2b0f      	cmp	r3, #15
 8003270:	f67f ae90 	bls.w	8002f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3724      	adds	r7, #36	; 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800
 8003288:	40013800 	.word	0x40013800
 800328c:	40020000 	.word	0x40020000
 8003290:	40020400 	.word	0x40020400
 8003294:	40020800 	.word	0x40020800
 8003298:	40020c00 	.word	0x40020c00
 800329c:	40021000 	.word	0x40021000
 80032a0:	40021400 	.word	0x40021400
 80032a4:	40021800 	.word	0x40021800
 80032a8:	40021c00 	.word	0x40021c00
 80032ac:	40013c00 	.word	0x40013c00

080032b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
 80032bc:	4613      	mov	r3, r2
 80032be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032c0:	787b      	ldrb	r3, [r7, #1]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032c6:	887a      	ldrh	r2, [r7, #2]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032cc:	e003      	b.n	80032d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ce:	887b      	ldrh	r3, [r7, #2]
 80032d0:	041a      	lsls	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032f4:	887a      	ldrh	r2, [r7, #2]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	041a      	lsls	r2, r3, #16
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	43d9      	mvns	r1, r3
 8003300:	887b      	ldrh	r3, [r7, #2]
 8003302:	400b      	ands	r3, r1
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	619a      	str	r2, [r3, #24]
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e264      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d075      	beq.n	8003422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003336:	4ba3      	ldr	r3, [pc, #652]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b04      	cmp	r3, #4
 8003340:	d00c      	beq.n	800335c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003342:	4ba0      	ldr	r3, [pc, #640]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334a:	2b08      	cmp	r3, #8
 800334c:	d112      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4b9d      	ldr	r3, [pc, #628]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335a:	d10b      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	4b99      	ldr	r3, [pc, #612]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d05b      	beq.n	8003420 <HAL_RCC_OscConfig+0x108>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d157      	bne.n	8003420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e23f      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337c:	d106      	bne.n	800338c <HAL_RCC_OscConfig+0x74>
 800337e:	4b91      	ldr	r3, [pc, #580]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a90      	ldr	r2, [pc, #576]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e01d      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x98>
 8003396:	4b8b      	ldr	r3, [pc, #556]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a8a      	ldr	r2, [pc, #552]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a87      	ldr	r2, [pc, #540]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 80033b0:	4b84      	ldr	r3, [pc, #528]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a83      	ldr	r2, [pc, #524]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b81      	ldr	r3, [pc, #516]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a80      	ldr	r2, [pc, #512]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fe fe50 	bl	8002074 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fe fe4c 	bl	8002074 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e204      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0xc0>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe fe3c 	bl	8002074 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003400:	f7fe fe38 	bl	8002074 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1f0      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	4b6c      	ldr	r3, [pc, #432]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0xe8>
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d063      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800342e:	4b65      	ldr	r3, [pc, #404]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b62      	ldr	r3, [pc, #392]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003442:	2b08      	cmp	r3, #8
 8003444:	d11c      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d116      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	4b5c      	ldr	r3, [pc, #368]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e1c4      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346a:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4952      	ldr	r1, [pc, #328]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	e03a      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003488:	4b4f      	ldr	r3, [pc, #316]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7fe fdf1 	bl	8002074 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003496:	f7fe fded 	bl	8002074 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e1a5      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b4:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4940      	ldr	r1, [pc, #256]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ca:	4b3f      	ldr	r3, [pc, #252]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe fdd0 	bl	8002074 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d8:	f7fe fdcc 	bl	8002074 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e184      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d030      	beq.n	8003564 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350a:	4b30      	ldr	r3, [pc, #192]	; (80035cc <HAL_RCC_OscConfig+0x2b4>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fe fdb0 	bl	8002074 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003518:	f7fe fdac 	bl	8002074 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e164      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x200>
 8003536:	e015      	b.n	8003564 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003538:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_RCC_OscConfig+0x2b4>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7fe fd99 	bl	8002074 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003546:	f7fe fd95 	bl	8002074 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e14d      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a0 	beq.w	80036b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	6413      	str	r3, [r2, #64]	; 0x40
 8003592:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_OscConfig+0x2b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d121      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <HAL_RCC_OscConfig+0x2b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_RCC_OscConfig+0x2b8>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fe fd5b 	bl	8002074 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e011      	b.n	80035e6 <HAL_RCC_OscConfig+0x2ce>
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	42470000 	.word	0x42470000
 80035cc:	42470e80 	.word	0x42470e80
 80035d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d4:	f7fe fd4e 	bl	8002074 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e106      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b85      	ldr	r3, [pc, #532]	; (80037fc <HAL_RCC_OscConfig+0x4e4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d106      	bne.n	8003608 <HAL_RCC_OscConfig+0x2f0>
 80035fa:	4b81      	ldr	r3, [pc, #516]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a80      	ldr	r2, [pc, #512]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	e01c      	b.n	8003642 <HAL_RCC_OscConfig+0x32a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b05      	cmp	r3, #5
 800360e:	d10c      	bne.n	800362a <HAL_RCC_OscConfig+0x312>
 8003610:	4b7b      	ldr	r3, [pc, #492]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	4a7a      	ldr	r2, [pc, #488]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	6713      	str	r3, [r2, #112]	; 0x70
 800361c:	4b78      	ldr	r3, [pc, #480]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	4a77      	ldr	r2, [pc, #476]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6713      	str	r3, [r2, #112]	; 0x70
 8003628:	e00b      	b.n	8003642 <HAL_RCC_OscConfig+0x32a>
 800362a:	4b75      	ldr	r3, [pc, #468]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a74      	ldr	r2, [pc, #464]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	4b72      	ldr	r3, [pc, #456]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a71      	ldr	r2, [pc, #452]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364a:	f7fe fd13 	bl	8002074 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fe fd0f 	bl	8002074 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0c5      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	4b65      	ldr	r3, [pc, #404]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ee      	beq.n	8003652 <HAL_RCC_OscConfig+0x33a>
 8003674:	e014      	b.n	80036a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003676:	f7fe fcfd 	bl	8002074 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fe fcf9 	bl	8002074 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e0af      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003694:	4b5a      	ldr	r3, [pc, #360]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ee      	bne.n	800367e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a6:	4b56      	ldr	r3, [pc, #344]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a55      	ldr	r2, [pc, #340]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 80036ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 809b 	beq.w	80037f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036bc:	4b50      	ldr	r3, [pc, #320]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d05c      	beq.n	8003782 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d141      	bne.n	8003754 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d0:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d6:	f7fe fccd 	bl	8002074 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036de:	f7fe fcc9 	bl	8002074 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e081      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f0:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	019b      	lsls	r3, r3, #6
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	3b01      	subs	r3, #1
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	061b      	lsls	r3, r3, #24
 8003720:	4937      	ldr	r1, [pc, #220]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003726:	4b37      	ldr	r3, [pc, #220]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe fca2 	bl	8002074 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe fc9e 	bl	8002074 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e056      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x41c>
 8003752:	e04e      	b.n	80037f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fe fc8b 	bl	8002074 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003762:	f7fe fc87 	bl	8002074 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e03f      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003774:	4b22      	ldr	r3, [pc, #136]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <HAL_RCC_OscConfig+0x44a>
 8003780:	e037      	b.n	80037f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e032      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800378e:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d028      	beq.n	80037ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d121      	bne.n	80037ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d11a      	bne.n	80037ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037be:	4013      	ands	r3, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d111      	bne.n	80037ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	3b01      	subs	r3, #1
 80037d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d001      	beq.n	80037f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40007000 	.word	0x40007000
 8003800:	40023800 	.word	0x40023800
 8003804:	42470060 	.word	0x42470060

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0cc      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b68      	ldr	r3, [pc, #416]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d90c      	bls.n	8003844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b65      	ldr	r3, [pc, #404]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b63      	ldr	r3, [pc, #396]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0b8      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800385c:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a58      	ldr	r2, [pc, #352]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003874:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800387e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003880:	4b50      	ldr	r3, [pc, #320]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	494d      	ldr	r1, [pc, #308]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d044      	beq.n	8003928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d119      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e07f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c6:	4b3f      	ldr	r3, [pc, #252]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e06f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d6:	4b3b      	ldr	r3, [pc, #236]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e067      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4934      	ldr	r1, [pc, #208]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f8:	f7fe fbbc 	bl	8002074 <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fe fbb8 	bl	8002074 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e04f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 020c 	and.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	429a      	cmp	r2, r3
 8003926:	d1eb      	bne.n	8003900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d20c      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e032      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4916      	ldr	r1, [pc, #88]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	490e      	ldr	r1, [pc, #56]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800398e:	f000 f821 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003992:	4602      	mov	r2, r0
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	490a      	ldr	r1, [pc, #40]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	5ccb      	ldrb	r3, [r1, r3]
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	4a09      	ldr	r2, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fb1c 	bl	8001fec <HAL_InitTick>

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023c00 	.word	0x40023c00
 80039c4:	40023800 	.word	0x40023800
 80039c8:	08005b20 	.word	0x08005b20
 80039cc:	20000000 	.word	0x20000000
 80039d0:	20000004 	.word	0x20000004

080039d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	2300      	movs	r3, #0
 80039e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ec:	4b67      	ldr	r3, [pc, #412]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d00d      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x40>
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	f200 80bd 	bhi.w	8003b78 <HAL_RCC_GetSysClockFreq+0x1a4>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x34>
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d003      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a06:	e0b7      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b61      	ldr	r3, [pc, #388]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a0a:	60bb      	str	r3, [r7, #8]
       break;
 8003a0c:	e0b7      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a0e:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a10:	60bb      	str	r3, [r7, #8]
      break;
 8003a12:	e0b4      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a14:	4b5d      	ldr	r3, [pc, #372]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a1e:	4b5b      	ldr	r3, [pc, #364]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d04d      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2a:	4b58      	ldr	r3, [pc, #352]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	461a      	mov	r2, r3
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a3a:	f04f 0100 	mov.w	r1, #0
 8003a3e:	ea02 0800 	and.w	r8, r2, r0
 8003a42:	ea03 0901 	and.w	r9, r3, r1
 8003a46:	4640      	mov	r0, r8
 8003a48:	4649      	mov	r1, r9
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	014b      	lsls	r3, r1, #5
 8003a54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a58:	0142      	lsls	r2, r0, #5
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	ebb0 0008 	subs.w	r0, r0, r8
 8003a62:	eb61 0109 	sbc.w	r1, r1, r9
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	018b      	lsls	r3, r1, #6
 8003a70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a74:	0182      	lsls	r2, r0, #6
 8003a76:	1a12      	subs	r2, r2, r0
 8003a78:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7c:	f04f 0000 	mov.w	r0, #0
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	00d9      	lsls	r1, r3, #3
 8003a86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a8a:	00d0      	lsls	r0, r2, #3
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	eb12 0208 	adds.w	r2, r2, r8
 8003a94:	eb43 0309 	adc.w	r3, r3, r9
 8003a98:	f04f 0000 	mov.w	r0, #0
 8003a9c:	f04f 0100 	mov.w	r1, #0
 8003aa0:	0259      	lsls	r1, r3, #9
 8003aa2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003aa6:	0250      	lsls	r0, r2, #9
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	f7fc fdca 	bl	8000650 <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	e04a      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac6:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	461a      	mov	r2, r3
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	ea02 0400 	and.w	r4, r2, r0
 8003ade:	ea03 0501 	and.w	r5, r3, r1
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	014b      	lsls	r3, r1, #5
 8003af0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003af4:	0142      	lsls	r2, r0, #5
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	1b00      	subs	r0, r0, r4
 8003afc:	eb61 0105 	sbc.w	r1, r1, r5
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	018b      	lsls	r3, r1, #6
 8003b0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b0e:	0182      	lsls	r2, r0, #6
 8003b10:	1a12      	subs	r2, r2, r0
 8003b12:	eb63 0301 	sbc.w	r3, r3, r1
 8003b16:	f04f 0000 	mov.w	r0, #0
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	00d9      	lsls	r1, r3, #3
 8003b20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b24:	00d0      	lsls	r0, r2, #3
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	1912      	adds	r2, r2, r4
 8003b2c:	eb45 0303 	adc.w	r3, r5, r3
 8003b30:	f04f 0000 	mov.w	r0, #0
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	0299      	lsls	r1, r3, #10
 8003b3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b3e:	0290      	lsls	r0, r2, #10
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	f7fc fd7e 	bl	8000650 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	3301      	adds	r3, #1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	60bb      	str	r3, [r7, #8]
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b7a:	60bb      	str	r3, [r7, #8]
      break;
 8003b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	007a1200 	.word	0x007a1200

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000000 	.word	0x20000000

08003bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bb4:	f7ff fff0 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0a9b      	lsrs	r3, r3, #10
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4903      	ldr	r1, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	08005b30 	.word	0x08005b30

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bdc:	f7ff ffdc 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0b5b      	lsrs	r3, r3, #13
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	08005b30 	.word	0x08005b30

08003c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e07b      	b.n	8003d0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d108      	bne.n	8003c2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c22:	d009      	beq.n	8003c38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	61da      	str	r2, [r3, #28]
 8003c2a:	e005      	b.n	8003c38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fddc 	bl	8001810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	ea42 0103 	orr.w	r1, r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	f003 0104 	and.w	r1, r3, #4
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f003 0210 	and.w	r2, r3, #16
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e041      	b.n	8003da8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d106      	bne.n	8003d3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7fd fdb1 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4610      	mov	r0, r2
 8003d52:	f000 fa11 	bl	8004178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e041      	b.n	8003e46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f839 	bl	8003e4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4619      	mov	r1, r3
 8003dee:	4610      	mov	r0, r2
 8003df0:	f000 f9c2 	bl	8004178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e0ae      	b.n	8003fe0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	f200 809f 	bhi.w	8003fd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e92:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e98:	08003ecd 	.word	0x08003ecd
 8003e9c:	08003fd1 	.word	0x08003fd1
 8003ea0:	08003fd1 	.word	0x08003fd1
 8003ea4:	08003fd1 	.word	0x08003fd1
 8003ea8:	08003f0d 	.word	0x08003f0d
 8003eac:	08003fd1 	.word	0x08003fd1
 8003eb0:	08003fd1 	.word	0x08003fd1
 8003eb4:	08003fd1 	.word	0x08003fd1
 8003eb8:	08003f4f 	.word	0x08003f4f
 8003ebc:	08003fd1 	.word	0x08003fd1
 8003ec0:	08003fd1 	.word	0x08003fd1
 8003ec4:	08003fd1 	.word	0x08003fd1
 8003ec8:	08003f8f 	.word	0x08003f8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f9f0 	bl	80042b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0208 	orr.w	r2, r2, #8
 8003ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0204 	bic.w	r2, r2, #4
 8003ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6999      	ldr	r1, [r3, #24]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	619a      	str	r2, [r3, #24]
      break;
 8003f0a:	e064      	b.n	8003fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fa40 	bl	8004398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6999      	ldr	r1, [r3, #24]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	619a      	str	r2, [r3, #24]
      break;
 8003f4c:	e043      	b.n	8003fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fa95 	bl	8004484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0208 	orr.w	r2, r2, #8
 8003f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0204 	bic.w	r2, r2, #4
 8003f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69d9      	ldr	r1, [r3, #28]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	61da      	str	r2, [r3, #28]
      break;
 8003f8c:	e023      	b.n	8003fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fae9 	bl	800456c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69d9      	ldr	r1, [r3, #28]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	021a      	lsls	r2, r3, #8
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	61da      	str	r2, [r3, #28]
      break;
 8003fce:	e002      	b.n	8003fd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_TIM_ConfigClockSource+0x1c>
 8004000:	2302      	movs	r3, #2
 8004002:	e0b4      	b.n	800416e <HAL_TIM_ConfigClockSource+0x186>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800402a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403c:	d03e      	beq.n	80040bc <HAL_TIM_ConfigClockSource+0xd4>
 800403e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004042:	f200 8087 	bhi.w	8004154 <HAL_TIM_ConfigClockSource+0x16c>
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404a:	f000 8086 	beq.w	800415a <HAL_TIM_ConfigClockSource+0x172>
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d87f      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x16c>
 8004054:	2b70      	cmp	r3, #112	; 0x70
 8004056:	d01a      	beq.n	800408e <HAL_TIM_ConfigClockSource+0xa6>
 8004058:	2b70      	cmp	r3, #112	; 0x70
 800405a:	d87b      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b60      	cmp	r3, #96	; 0x60
 800405e:	d050      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x11a>
 8004060:	2b60      	cmp	r3, #96	; 0x60
 8004062:	d877      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b50      	cmp	r3, #80	; 0x50
 8004066:	d03c      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0xfa>
 8004068:	2b50      	cmp	r3, #80	; 0x50
 800406a:	d873      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d058      	beq.n	8004122 <HAL_TIM_ConfigClockSource+0x13a>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d86f      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b30      	cmp	r3, #48	; 0x30
 8004076:	d064      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x15a>
 8004078:	2b30      	cmp	r3, #48	; 0x30
 800407a:	d86b      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b20      	cmp	r3, #32
 800407e:	d060      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x15a>
 8004080:	2b20      	cmp	r3, #32
 8004082:	d867      	bhi.n	8004154 <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d05c      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x15a>
 8004088:	2b10      	cmp	r3, #16
 800408a:	d05a      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0x15a>
 800408c:	e062      	b.n	8004154 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6899      	ldr	r1, [r3, #8]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f000 fb35 	bl	800470c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	609a      	str	r2, [r3, #8]
      break;
 80040ba:	e04f      	b.n	800415c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6899      	ldr	r1, [r3, #8]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f000 fb1e 	bl	800470c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040de:	609a      	str	r2, [r3, #8]
      break;
 80040e0:	e03c      	b.n	800415c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f000 fa92 	bl	8004618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2150      	movs	r1, #80	; 0x50
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 faeb 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 8004100:	e02c      	b.n	800415c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6859      	ldr	r1, [r3, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	461a      	mov	r2, r3
 8004110:	f000 fab1 	bl	8004676 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2160      	movs	r1, #96	; 0x60
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fadb 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 8004120:	e01c      	b.n	800415c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6859      	ldr	r1, [r3, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	461a      	mov	r2, r3
 8004130:	f000 fa72 	bl	8004618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2140      	movs	r1, #64	; 0x40
 800413a:	4618      	mov	r0, r3
 800413c:	f000 facb 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 8004140:	e00c      	b.n	800415c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4619      	mov	r1, r3
 800414c:	4610      	mov	r0, r2
 800414e:	f000 fac2 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 8004152:	e003      	b.n	800415c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
      break;
 8004158:	e000      	b.n	800415c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800415a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800416c:	7bfb      	ldrb	r3, [r7, #15]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a40      	ldr	r2, [pc, #256]	; (800428c <TIM_Base_SetConfig+0x114>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d013      	beq.n	80041b8 <TIM_Base_SetConfig+0x40>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004196:	d00f      	beq.n	80041b8 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a3d      	ldr	r2, [pc, #244]	; (8004290 <TIM_Base_SetConfig+0x118>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00b      	beq.n	80041b8 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a3c      	ldr	r2, [pc, #240]	; (8004294 <TIM_Base_SetConfig+0x11c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d007      	beq.n	80041b8 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a3b      	ldr	r2, [pc, #236]	; (8004298 <TIM_Base_SetConfig+0x120>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_Base_SetConfig+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a3a      	ldr	r2, [pc, #232]	; (800429c <TIM_Base_SetConfig+0x124>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d108      	bne.n	80041ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a2f      	ldr	r2, [pc, #188]	; (800428c <TIM_Base_SetConfig+0x114>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d02b      	beq.n	800422a <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d027      	beq.n	800422a <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2c      	ldr	r2, [pc, #176]	; (8004290 <TIM_Base_SetConfig+0x118>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d023      	beq.n	800422a <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a2b      	ldr	r2, [pc, #172]	; (8004294 <TIM_Base_SetConfig+0x11c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01f      	beq.n	800422a <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a2a      	ldr	r2, [pc, #168]	; (8004298 <TIM_Base_SetConfig+0x120>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d01b      	beq.n	800422a <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a29      	ldr	r2, [pc, #164]	; (800429c <TIM_Base_SetConfig+0x124>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d017      	beq.n	800422a <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <TIM_Base_SetConfig+0x128>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a27      	ldr	r2, [pc, #156]	; (80042a4 <TIM_Base_SetConfig+0x12c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00f      	beq.n	800422a <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a26      	ldr	r2, [pc, #152]	; (80042a8 <TIM_Base_SetConfig+0x130>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00b      	beq.n	800422a <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a25      	ldr	r2, [pc, #148]	; (80042ac <TIM_Base_SetConfig+0x134>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d007      	beq.n	800422a <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a24      	ldr	r2, [pc, #144]	; (80042b0 <TIM_Base_SetConfig+0x138>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a23      	ldr	r2, [pc, #140]	; (80042b4 <TIM_Base_SetConfig+0x13c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d108      	bne.n	800423c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a0a      	ldr	r2, [pc, #40]	; (800428c <TIM_Base_SetConfig+0x114>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0xf8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a0c      	ldr	r2, [pc, #48]	; (800429c <TIM_Base_SetConfig+0x124>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d103      	bne.n	8004278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	615a      	str	r2, [r3, #20]
}
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40010000 	.word	0x40010000
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800
 8004298:	40000c00 	.word	0x40000c00
 800429c:	40010400 	.word	0x40010400
 80042a0:	40014000 	.word	0x40014000
 80042a4:	40014400 	.word	0x40014400
 80042a8:	40014800 	.word	0x40014800
 80042ac:	40001800 	.word	0x40001800
 80042b0:	40001c00 	.word	0x40001c00
 80042b4:	40002000 	.word	0x40002000

080042b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f023 0201 	bic.w	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f023 0302 	bic.w	r3, r3, #2
 8004300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a20      	ldr	r2, [pc, #128]	; (8004390 <TIM_OC1_SetConfig+0xd8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d003      	beq.n	800431c <TIM_OC1_SetConfig+0x64>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <TIM_OC1_SetConfig+0xdc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d10c      	bne.n	8004336 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0308 	bic.w	r3, r3, #8
 8004322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f023 0304 	bic.w	r3, r3, #4
 8004334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a15      	ldr	r2, [pc, #84]	; (8004390 <TIM_OC1_SetConfig+0xd8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d003      	beq.n	8004346 <TIM_OC1_SetConfig+0x8e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a14      	ldr	r2, [pc, #80]	; (8004394 <TIM_OC1_SetConfig+0xdc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d111      	bne.n	800436a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800434c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	621a      	str	r2, [r3, #32]
}
 8004384:	bf00      	nop
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40010000 	.word	0x40010000
 8004394:	40010400 	.word	0x40010400

08004398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f023 0210 	bic.w	r2, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 0320 	bic.w	r3, r3, #32
 80043e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a22      	ldr	r2, [pc, #136]	; (800447c <TIM_OC2_SetConfig+0xe4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_OC2_SetConfig+0x68>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a21      	ldr	r2, [pc, #132]	; (8004480 <TIM_OC2_SetConfig+0xe8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d10d      	bne.n	800441c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a17      	ldr	r2, [pc, #92]	; (800447c <TIM_OC2_SetConfig+0xe4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_OC2_SetConfig+0x94>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a16      	ldr	r2, [pc, #88]	; (8004480 <TIM_OC2_SetConfig+0xe8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d113      	bne.n	8004454 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800443a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40010000 	.word	0x40010000
 8004480:	40010400 	.word	0x40010400

08004484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a21      	ldr	r2, [pc, #132]	; (8004564 <TIM_OC3_SetConfig+0xe0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_OC3_SetConfig+0x66>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a20      	ldr	r2, [pc, #128]	; (8004568 <TIM_OC3_SetConfig+0xe4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d10d      	bne.n	8004506 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a16      	ldr	r2, [pc, #88]	; (8004564 <TIM_OC3_SetConfig+0xe0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d003      	beq.n	8004516 <TIM_OC3_SetConfig+0x92>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a15      	ldr	r2, [pc, #84]	; (8004568 <TIM_OC3_SetConfig+0xe4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d113      	bne.n	800453e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800451c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	621a      	str	r2, [r3, #32]
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	40010000 	.word	0x40010000
 8004568:	40010400 	.word	0x40010400

0800456c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	031b      	lsls	r3, r3, #12
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a12      	ldr	r2, [pc, #72]	; (8004610 <TIM_OC4_SetConfig+0xa4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_OC4_SetConfig+0x68>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a11      	ldr	r2, [pc, #68]	; (8004614 <TIM_OC4_SetConfig+0xa8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d109      	bne.n	80045e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	019b      	lsls	r3, r3, #6
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40010000 	.word	0x40010000
 8004614:	40010400 	.word	0x40010400

08004618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	f023 0201 	bic.w	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 030a 	bic.w	r3, r3, #10
 8004654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004676:	b480      	push	{r7}
 8004678:	b087      	sub	sp, #28
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 0210 	bic.w	r2, r3, #16
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	031b      	lsls	r3, r3, #12
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	621a      	str	r2, [r3, #32]
}
 80046ca:	bf00      	nop
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b085      	sub	sp, #20
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f043 0307 	orr.w	r3, r3, #7
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	609a      	str	r2, [r3, #8]
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	431a      	orrs	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4313      	orrs	r3, r2
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004760:	2302      	movs	r3, #2
 8004762:	e05a      	b.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a21      	ldr	r2, [pc, #132]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d022      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b0:	d01d      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1d      	ldr	r2, [pc, #116]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a17      	ldr	r2, [pc, #92]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a15      	ldr	r2, [pc, #84]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10c      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40010400 	.word	0x40010400
 800483c:	40014000 	.word	0x40014000
 8004840:	40001800 	.word	0x40001800

08004844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e03f      	b.n	80048d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd f8fa 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	; 0x24
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 ff49 	bl	8005720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800489c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08c      	sub	sp, #48	; 0x30
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	4613      	mov	r3, r2
 80048ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d165      	bne.n	80049c6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_UART_Transmit_DMA+0x26>
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e05e      	b.n	80049c8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_UART_Transmit_DMA+0x38>
 8004914:	2302      	movs	r3, #2
 8004916:	e057      	b.n	80049c8 <HAL_UART_Transmit_DMA+0xe8>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	88fa      	ldrh	r2, [r7, #6]
 800492a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	88fa      	ldrh	r2, [r7, #6]
 8004930:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2221      	movs	r2, #33	; 0x21
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <HAL_UART_Transmit_DMA+0xf0>)
 8004946:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494c:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <HAL_UART_Transmit_DMA+0xf4>)
 800494e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <HAL_UART_Transmit_DMA+0xf8>)
 8004956:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	2200      	movs	r2, #0
 800495e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004960:	f107 0308 	add.w	r3, r7, #8
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3304      	adds	r3, #4
 8004974:	461a      	mov	r2, r3
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	f7fd ffaa 	bl	80028d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004984:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3314      	adds	r3, #20
 8004994:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	617b      	str	r3, [r7, #20]
   return(result);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3314      	adds	r3, #20
 80049ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ae:	627a      	str	r2, [r7, #36]	; 0x24
 80049b0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6a39      	ldr	r1, [r7, #32]
 80049b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e5      	bne.n	800498e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e000      	b.n	80049c8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
  }
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3730      	adds	r7, #48	; 0x30
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	08004fc1 	.word	0x08004fc1
 80049d4:	0800505b 	.word	0x0800505b
 80049d8:	080051d3 	.word	0x080051d3

080049dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d11d      	bne.n	8004a32 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_UART_Receive_DMA+0x26>
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e016      	b.n	8004a34 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_UART_Receive_DMA+0x38>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e00f      	b.n	8004a34 <HAL_UART_Receive_DMA+0x58>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	461a      	mov	r2, r3
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fc1d 	bl	8005268 <UART_Start_Receive_DMA>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	e000      	b.n	8004a34 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b0ba      	sub	sp, #232	; 0xe8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10f      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x66>
 8004a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fd85 	bl	80055aa <UART_Receive_IT>
      return;
 8004aa0:	e256      	b.n	8004f50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80de 	beq.w	8004c68 <HAL_UART_IRQHandler+0x22c>
 8004aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004abc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80d1 	beq.w	8004c68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00b      	beq.n	8004aea <HAL_UART_IRQHandler+0xae>
 8004ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d005      	beq.n	8004aea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f043 0201 	orr.w	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_UART_IRQHandler+0xd2>
 8004af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f043 0202 	orr.w	r2, r3, #2
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_UART_IRQHandler+0xf6>
 8004b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f043 0204 	orr.w	r2, r3, #4
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d011      	beq.n	8004b62 <HAL_UART_IRQHandler+0x126>
 8004b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d105      	bne.n	8004b56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f043 0208 	orr.w	r2, r3, #8
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 81ed 	beq.w	8004f46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_UART_IRQHandler+0x14e>
 8004b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fd10 	bl	80055aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	bf0c      	ite	eq
 8004b98:	2301      	moveq	r3, #1
 8004b9a:	2300      	movne	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x17a>
 8004bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d04f      	beq.n	8004c56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fc18 	bl	80053ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d141      	bne.n	8004c4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3314      	adds	r3, #20
 8004bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1d9      	bne.n	8004bca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d013      	beq.n	8004c46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	4a7d      	ldr	r2, [pc, #500]	; (8004e18 <HAL_UART_IRQHandler+0x3dc>)
 8004c24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd ff18 	bl	8002a60 <HAL_DMA_Abort_IT>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d016      	beq.n	8004c64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c40:	4610      	mov	r0, r2
 8004c42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	e00e      	b.n	8004c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9a4 	bl	8004f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	e00a      	b.n	8004c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9a0 	bl	8004f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	e006      	b.n	8004c64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f99c 	bl	8004f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c62:	e170      	b.n	8004f46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	bf00      	nop
    return;
 8004c66:	e16e      	b.n	8004f46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	f040 814a 	bne.w	8004f06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 8143 	beq.w	8004f06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 813c 	beq.w	8004f06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60bb      	str	r3, [r7, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	f040 80b4 	bne.w	8004e1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8140 	beq.w	8004f4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	f080 8139 	bcs.w	8004f4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cea:	f000 8088 	beq.w	8004dfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1d9      	bne.n	8004cee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3314      	adds	r3, #20
 8004d40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3314      	adds	r3, #20
 8004d5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e1      	bne.n	8004d3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3314      	adds	r3, #20
 8004d7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3314      	adds	r3, #20
 8004d96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004da0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e3      	bne.n	8004d76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dce:	f023 0310 	bic.w	r3, r3, #16
 8004dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	330c      	adds	r3, #12
 8004ddc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004de0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004de2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004de6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e3      	bne.n	8004dbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fd fdc1 	bl	8002980 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f8ca 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e14:	e099      	b.n	8004f4a <HAL_UART_IRQHandler+0x50e>
 8004e16:	bf00      	nop
 8004e18:	080054b3 	.word	0x080054b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 808b 	beq.w	8004f4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8086 	beq.w	8004f4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e66:	647a      	str	r2, [r7, #68]	; 0x44
 8004e68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e3      	bne.n	8004e42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3314      	adds	r3, #20
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	623b      	str	r3, [r7, #32]
   return(result);
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3314      	adds	r3, #20
 8004e9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e9e:	633a      	str	r2, [r7, #48]	; 0x30
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e3      	bne.n	8004e7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	330c      	adds	r3, #12
 8004ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0310 	bic.w	r3, r3, #16
 8004ed6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ee4:	61fa      	str	r2, [r7, #28]
 8004ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	69b9      	ldr	r1, [r7, #24]
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	e841 2300 	strex	r3, r2, [r1]
 8004ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e3      	bne.n	8004ec0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ef8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f852 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f04:	e023      	b.n	8004f4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_UART_IRQHandler+0x4ea>
 8004f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fadb 	bl	80054da <UART_Transmit_IT>
    return;
 8004f24:	e014      	b.n	8004f50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00e      	beq.n	8004f50 <HAL_UART_IRQHandler+0x514>
 8004f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fb1b 	bl	800557a <UART_EndTransmit_IT>
    return;
 8004f44:	e004      	b.n	8004f50 <HAL_UART_IRQHandler+0x514>
    return;
 8004f46:	bf00      	nop
 8004f48:	e002      	b.n	8004f50 <HAL_UART_IRQHandler+0x514>
      return;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_UART_IRQHandler+0x514>
      return;
 8004f4e:	bf00      	nop
  }
}
 8004f50:	37e8      	adds	r7, #232	; 0xe8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop

08004f58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b090      	sub	sp, #64	; 0x40
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d137      	bne.n	800504c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fde:	2200      	movs	r2, #0
 8004fe0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3314      	adds	r3, #20
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3314      	adds	r3, #20
 8005000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005002:	633a      	str	r2, [r7, #48]	; 0x30
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e5      	bne.n	8004fe2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	60fb      	str	r3, [r7, #12]
   return(result);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800502c:	637b      	str	r3, [r7, #52]	; 0x34
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	330c      	adds	r3, #12
 8005034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005036:	61fa      	str	r2, [r7, #28]
 8005038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	69b9      	ldr	r1, [r7, #24]
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	617b      	str	r3, [r7, #20]
   return(result);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e5      	bne.n	8005016 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800504a:	e002      	b.n	8005052 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800504c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800504e:	f7ff ff83 	bl	8004f58 <HAL_UART_TxCpltCallback>
}
 8005052:	bf00      	nop
 8005054:	3740      	adds	r7, #64	; 0x40
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff ff7f 	bl	8004f6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b09c      	sub	sp, #112	; 0x70
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	2b00      	cmp	r3, #0
 8005090:	d172      	bne.n	8005178 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005094:	2200      	movs	r2, #0
 8005096:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80050b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e5      	bne.n	8005098 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3314      	adds	r3, #20
 80050d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	667b      	str	r3, [r7, #100]	; 0x64
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3314      	adds	r3, #20
 80050ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050ec:	647a      	str	r2, [r7, #68]	; 0x44
 80050ee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	623b      	str	r3, [r7, #32]
   return(result);
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005116:	663b      	str	r3, [r7, #96]	; 0x60
 8005118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005120:	633a      	str	r2, [r7, #48]	; 0x30
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005128:	e841 2300 	strex	r3, r2, [r1]
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e5      	bne.n	8005100 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	2b01      	cmp	r3, #1
 8005142:	d119      	bne.n	8005178 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	330c      	adds	r3, #12
 800514a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	60fb      	str	r3, [r7, #12]
   return(result);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0310 	bic.w	r3, r3, #16
 800515a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800515c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	330c      	adds	r3, #12
 8005162:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005164:	61fa      	str	r2, [r7, #28]
 8005166:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	69b9      	ldr	r1, [r7, #24]
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	617b      	str	r3, [r7, #20]
   return(result);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e5      	bne.n	8005144 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	2b01      	cmp	r3, #1
 800517e:	d106      	bne.n	800518e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005182:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005184:	4619      	mov	r1, r3
 8005186:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005188:	f7ff ff0e 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800518c:	e002      	b.n	8005194 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800518e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005190:	f7fb fbda 	bl	8000948 <HAL_UART_RxCpltCallback>
}
 8005194:	bf00      	nop
 8005196:	3770      	adds	r7, #112	; 0x70
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d108      	bne.n	80051c4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	4619      	mov	r1, r3
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fef3 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80051c2:	e002      	b.n	80051ca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff fedb 	bl	8004f80 <HAL_UART_RxHalfCpltCallback>
}
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ee:	2b80      	cmp	r3, #128	; 0x80
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b21      	cmp	r3, #33	; 0x21
 8005204:	d108      	bne.n	8005218 <UART_DMAError+0x46>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2200      	movs	r2, #0
 8005210:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005212:	68b8      	ldr	r0, [r7, #8]
 8005214:	f000 f8c2 	bl	800539c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b22      	cmp	r3, #34	; 0x22
 8005238:	d108      	bne.n	800524c <UART_DMAError+0x7a>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2200      	movs	r2, #0
 8005244:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005246:	68b8      	ldr	r0, [r7, #8]
 8005248:	f000 f8d0 	bl	80053ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	f043 0210 	orr.w	r2, r3, #16
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005258:	68b8      	ldr	r0, [r7, #8]
 800525a:	f7ff fe9b 	bl	8004f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b098      	sub	sp, #96	; 0x60
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	88fa      	ldrh	r2, [r7, #6]
 8005280:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2222      	movs	r2, #34	; 0x22
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	4a3e      	ldr	r2, [pc, #248]	; (8005390 <UART_Start_Receive_DMA+0x128>)
 8005296:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	4a3d      	ldr	r2, [pc, #244]	; (8005394 <UART_Start_Receive_DMA+0x12c>)
 800529e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	4a3c      	ldr	r2, [pc, #240]	; (8005398 <UART_Start_Receive_DMA+0x130>)
 80052a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	2200      	movs	r2, #0
 80052ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80052b0:	f107 0308 	add.w	r3, r7, #8
 80052b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3304      	adds	r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	f7fd fb02 	bl	80028d0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80052cc:	2300      	movs	r3, #0
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005300:	65bb      	str	r3, [r7, #88]	; 0x58
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	330c      	adds	r3, #12
 8005308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800530a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800530c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e5      	bne.n	80052ea <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	657b      	str	r3, [r7, #84]	; 0x54
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3314      	adds	r3, #20
 800533c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800533e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	617b      	str	r3, [r7, #20]
   return(result);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005368:	653b      	str	r3, [r7, #80]	; 0x50
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3314      	adds	r3, #20
 8005370:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005372:	627a      	str	r2, [r7, #36]	; 0x24
 8005374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6a39      	ldr	r1, [r7, #32]
 8005378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e5      	bne.n	8005352 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3760      	adds	r7, #96	; 0x60
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	08005077 	.word	0x08005077
 8005394:	0800519d 	.word	0x0800519d
 8005398:	080051d3 	.word	0x080051d3

0800539c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b089      	sub	sp, #36	; 0x24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053ba:	61fb      	str	r3, [r7, #28]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330c      	adds	r3, #12
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	61ba      	str	r2, [r7, #24]
 80053c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6979      	ldr	r1, [r7, #20]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	613b      	str	r3, [r7, #16]
   return(result);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e5      	bne.n	80053a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80053e0:	bf00      	nop
 80053e2:	3724      	adds	r7, #36	; 0x24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b095      	sub	sp, #84	; 0x54
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800540a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	330c      	adds	r3, #12
 8005412:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005414:	643a      	str	r2, [r7, #64]	; 0x40
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005418:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800541a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800541c:	e841 2300 	strex	r3, r2, [r1]
 8005420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1e5      	bne.n	80053f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3314      	adds	r3, #20
 800542e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	61fb      	str	r3, [r7, #28]
   return(result);
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f023 0301 	bic.w	r3, r3, #1
 800543e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3314      	adds	r3, #20
 8005446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800544e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e5      	bne.n	8005428 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	2b01      	cmp	r3, #1
 8005462:	d119      	bne.n	8005498 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330c      	adds	r3, #12
 800546a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	60bb      	str	r3, [r7, #8]
   return(result);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f023 0310 	bic.w	r3, r3, #16
 800547a:	647b      	str	r3, [r7, #68]	; 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005484:	61ba      	str	r2, [r7, #24]
 8005486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	6979      	ldr	r1, [r7, #20]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	613b      	str	r3, [r7, #16]
   return(result);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e5      	bne.n	8005464 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054a6:	bf00      	nop
 80054a8:	3754      	adds	r7, #84	; 0x54
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7ff fd61 	bl	8004f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d2:	bf00      	nop
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b21      	cmp	r3, #33	; 0x21
 80054ec:	d13e      	bne.n	800556c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	d114      	bne.n	8005522 <UART_Transmit_IT+0x48>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d110      	bne.n	8005522 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005514:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	1c9a      	adds	r2, r3, #2
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	621a      	str	r2, [r3, #32]
 8005520:	e008      	b.n	8005534 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	1c59      	adds	r1, r3, #1
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6211      	str	r1, [r2, #32]
 800552c:	781a      	ldrb	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29b      	uxth	r3, r3
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4619      	mov	r1, r3
 8005542:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10f      	bne.n	8005568 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005556:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005566:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005590:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff fcdc 	bl	8004f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b08c      	sub	sp, #48	; 0x30
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b22      	cmp	r3, #34	; 0x22
 80055bc:	f040 80ab 	bne.w	8005716 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c8:	d117      	bne.n	80055fa <UART_Receive_IT+0x50>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d113      	bne.n	80055fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	1c9a      	adds	r2, r3, #2
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	629a      	str	r2, [r3, #40]	; 0x28
 80055f8:	e026      	b.n	8005648 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005600:	2300      	movs	r3, #0
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560c:	d007      	beq.n	800561e <UART_Receive_IT+0x74>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <UART_Receive_IT+0x82>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e008      	b.n	800563e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005638:	b2da      	uxtb	r2, r3
 800563a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29b      	uxth	r3, r3
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	4619      	mov	r1, r3
 8005656:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005658:	2b00      	cmp	r3, #0
 800565a:	d15a      	bne.n	8005712 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0220 	bic.w	r2, r2, #32
 800566a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800567a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	2b01      	cmp	r3, #1
 800569a:	d135      	bne.n	8005708 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	613b      	str	r3, [r7, #16]
   return(result);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f023 0310 	bic.w	r3, r3, #16
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c2:	623a      	str	r2, [r7, #32]
 80056c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	69f9      	ldr	r1, [r7, #28]
 80056c8:	6a3a      	ldr	r2, [r7, #32]
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d10a      	bne.n	80056fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fc51 	bl	8004fa8 <HAL_UARTEx_RxEventCallback>
 8005706:	e002      	b.n	800570e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7fb f91d 	bl	8000948 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e002      	b.n	8005718 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e000      	b.n	8005718 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005716:	2302      	movs	r3, #2
  }
}
 8005718:	4618      	mov	r0, r3
 800571a:	3730      	adds	r7, #48	; 0x30
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005724:	b09f      	sub	sp, #124	; 0x7c
 8005726:	af00      	add	r7, sp, #0
 8005728:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005736:	68d9      	ldr	r1, [r3, #12]
 8005738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	ea40 0301 	orr.w	r3, r0, r1
 8005740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	431a      	orrs	r2, r3
 800574c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	431a      	orrs	r2, r3
 8005752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	4313      	orrs	r3, r2
 8005758:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800575a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005764:	f021 010c 	bic.w	r1, r1, #12
 8005768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800576e:	430b      	orrs	r3, r1
 8005770:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800577c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577e:	6999      	ldr	r1, [r3, #24]
 8005780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	ea40 0301 	orr.w	r3, r0, r1
 8005788:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800578a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4bc5      	ldr	r3, [pc, #788]	; (8005aa4 <UART_SetConfig+0x384>)
 8005790:	429a      	cmp	r2, r3
 8005792:	d004      	beq.n	800579e <UART_SetConfig+0x7e>
 8005794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	4bc3      	ldr	r3, [pc, #780]	; (8005aa8 <UART_SetConfig+0x388>)
 800579a:	429a      	cmp	r2, r3
 800579c:	d103      	bne.n	80057a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800579e:	f7fe fa1b 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 80057a2:	6778      	str	r0, [r7, #116]	; 0x74
 80057a4:	e002      	b.n	80057ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057a6:	f7fe fa03 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 80057aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b4:	f040 80b6 	bne.w	8005924 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ba:	461c      	mov	r4, r3
 80057bc:	f04f 0500 	mov.w	r5, #0
 80057c0:	4622      	mov	r2, r4
 80057c2:	462b      	mov	r3, r5
 80057c4:	1891      	adds	r1, r2, r2
 80057c6:	6439      	str	r1, [r7, #64]	; 0x40
 80057c8:	415b      	adcs	r3, r3
 80057ca:	647b      	str	r3, [r7, #68]	; 0x44
 80057cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057d0:	1912      	adds	r2, r2, r4
 80057d2:	eb45 0303 	adc.w	r3, r5, r3
 80057d6:	f04f 0000 	mov.w	r0, #0
 80057da:	f04f 0100 	mov.w	r1, #0
 80057de:	00d9      	lsls	r1, r3, #3
 80057e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057e4:	00d0      	lsls	r0, r2, #3
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	1911      	adds	r1, r2, r4
 80057ec:	6639      	str	r1, [r7, #96]	; 0x60
 80057ee:	416b      	adcs	r3, r5
 80057f0:	667b      	str	r3, [r7, #100]	; 0x64
 80057f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	1891      	adds	r1, r2, r2
 80057fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005800:	415b      	adcs	r3, r3
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005808:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800580c:	f7fa ff20 	bl	8000650 <__aeabi_uldivmod>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4ba5      	ldr	r3, [pc, #660]	; (8005aac <UART_SetConfig+0x38c>)
 8005816:	fba3 2302 	umull	r2, r3, r3, r2
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	011e      	lsls	r6, r3, #4
 800581e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005820:	461c      	mov	r4, r3
 8005822:	f04f 0500 	mov.w	r5, #0
 8005826:	4622      	mov	r2, r4
 8005828:	462b      	mov	r3, r5
 800582a:	1891      	adds	r1, r2, r2
 800582c:	6339      	str	r1, [r7, #48]	; 0x30
 800582e:	415b      	adcs	r3, r3
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
 8005832:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005836:	1912      	adds	r2, r2, r4
 8005838:	eb45 0303 	adc.w	r3, r5, r3
 800583c:	f04f 0000 	mov.w	r0, #0
 8005840:	f04f 0100 	mov.w	r1, #0
 8005844:	00d9      	lsls	r1, r3, #3
 8005846:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800584a:	00d0      	lsls	r0, r2, #3
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	1911      	adds	r1, r2, r4
 8005852:	65b9      	str	r1, [r7, #88]	; 0x58
 8005854:	416b      	adcs	r3, r5
 8005856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	461a      	mov	r2, r3
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	1891      	adds	r1, r2, r2
 8005864:	62b9      	str	r1, [r7, #40]	; 0x28
 8005866:	415b      	adcs	r3, r3
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800586e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005872:	f7fa feed 	bl	8000650 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4b8c      	ldr	r3, [pc, #560]	; (8005aac <UART_SetConfig+0x38c>)
 800587c:	fba3 1302 	umull	r1, r3, r3, r2
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	2164      	movs	r1, #100	; 0x64
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	3332      	adds	r3, #50	; 0x32
 800588e:	4a87      	ldr	r2, [pc, #540]	; (8005aac <UART_SetConfig+0x38c>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800589c:	441e      	add	r6, r3
 800589e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a0:	4618      	mov	r0, r3
 80058a2:	f04f 0100 	mov.w	r1, #0
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	1894      	adds	r4, r2, r2
 80058ac:	623c      	str	r4, [r7, #32]
 80058ae:	415b      	adcs	r3, r3
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
 80058b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058b6:	1812      	adds	r2, r2, r0
 80058b8:	eb41 0303 	adc.w	r3, r1, r3
 80058bc:	f04f 0400 	mov.w	r4, #0
 80058c0:	f04f 0500 	mov.w	r5, #0
 80058c4:	00dd      	lsls	r5, r3, #3
 80058c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058ca:	00d4      	lsls	r4, r2, #3
 80058cc:	4622      	mov	r2, r4
 80058ce:	462b      	mov	r3, r5
 80058d0:	1814      	adds	r4, r2, r0
 80058d2:	653c      	str	r4, [r7, #80]	; 0x50
 80058d4:	414b      	adcs	r3, r1
 80058d6:	657b      	str	r3, [r7, #84]	; 0x54
 80058d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	461a      	mov	r2, r3
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	1891      	adds	r1, r2, r2
 80058e4:	61b9      	str	r1, [r7, #24]
 80058e6:	415b      	adcs	r3, r3
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058f2:	f7fa fead 	bl	8000650 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4b6c      	ldr	r3, [pc, #432]	; (8005aac <UART_SetConfig+0x38c>)
 80058fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	2164      	movs	r1, #100	; 0x64
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	3332      	adds	r3, #50	; 0x32
 800590e:	4a67      	ldr	r2, [pc, #412]	; (8005aac <UART_SetConfig+0x38c>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	f003 0207 	and.w	r2, r3, #7
 800591a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4432      	add	r2, r6
 8005920:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005922:	e0b9      	b.n	8005a98 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005924:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005926:	461c      	mov	r4, r3
 8005928:	f04f 0500 	mov.w	r5, #0
 800592c:	4622      	mov	r2, r4
 800592e:	462b      	mov	r3, r5
 8005930:	1891      	adds	r1, r2, r2
 8005932:	6139      	str	r1, [r7, #16]
 8005934:	415b      	adcs	r3, r3
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800593c:	1912      	adds	r2, r2, r4
 800593e:	eb45 0303 	adc.w	r3, r5, r3
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f04f 0100 	mov.w	r1, #0
 800594a:	00d9      	lsls	r1, r3, #3
 800594c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005950:	00d0      	lsls	r0, r2, #3
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	eb12 0804 	adds.w	r8, r2, r4
 800595a:	eb43 0905 	adc.w	r9, r3, r5
 800595e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4618      	mov	r0, r3
 8005964:	f04f 0100 	mov.w	r1, #0
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	008b      	lsls	r3, r1, #2
 8005972:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005976:	0082      	lsls	r2, r0, #2
 8005978:	4640      	mov	r0, r8
 800597a:	4649      	mov	r1, r9
 800597c:	f7fa fe68 	bl	8000650 <__aeabi_uldivmod>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4b49      	ldr	r3, [pc, #292]	; (8005aac <UART_SetConfig+0x38c>)
 8005986:	fba3 2302 	umull	r2, r3, r3, r2
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	011e      	lsls	r6, r3, #4
 800598e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005990:	4618      	mov	r0, r3
 8005992:	f04f 0100 	mov.w	r1, #0
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	1894      	adds	r4, r2, r2
 800599c:	60bc      	str	r4, [r7, #8]
 800599e:	415b      	adcs	r3, r3
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a6:	1812      	adds	r2, r2, r0
 80059a8:	eb41 0303 	adc.w	r3, r1, r3
 80059ac:	f04f 0400 	mov.w	r4, #0
 80059b0:	f04f 0500 	mov.w	r5, #0
 80059b4:	00dd      	lsls	r5, r3, #3
 80059b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059ba:	00d4      	lsls	r4, r2, #3
 80059bc:	4622      	mov	r2, r4
 80059be:	462b      	mov	r3, r5
 80059c0:	1814      	adds	r4, r2, r0
 80059c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80059c4:	414b      	adcs	r3, r1
 80059c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f04f 0100 	mov.w	r1, #0
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	008b      	lsls	r3, r1, #2
 80059dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059e0:	0082      	lsls	r2, r0, #2
 80059e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80059e6:	f7fa fe33 	bl	8000650 <__aeabi_uldivmod>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4b2f      	ldr	r3, [pc, #188]	; (8005aac <UART_SetConfig+0x38c>)
 80059f0:	fba3 1302 	umull	r1, r3, r3, r2
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	2164      	movs	r1, #100	; 0x64
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	3332      	adds	r3, #50	; 0x32
 8005a02:	4a2a      	ldr	r2, [pc, #168]	; (8005aac <UART_SetConfig+0x38c>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0e:	441e      	add	r6, r3
 8005a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a12:	4618      	mov	r0, r3
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	1894      	adds	r4, r2, r2
 8005a1e:	603c      	str	r4, [r7, #0]
 8005a20:	415b      	adcs	r3, r3
 8005a22:	607b      	str	r3, [r7, #4]
 8005a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a28:	1812      	adds	r2, r2, r0
 8005a2a:	eb41 0303 	adc.w	r3, r1, r3
 8005a2e:	f04f 0400 	mov.w	r4, #0
 8005a32:	f04f 0500 	mov.w	r5, #0
 8005a36:	00dd      	lsls	r5, r3, #3
 8005a38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a3c:	00d4      	lsls	r4, r2, #3
 8005a3e:	4622      	mov	r2, r4
 8005a40:	462b      	mov	r3, r5
 8005a42:	eb12 0a00 	adds.w	sl, r2, r0
 8005a46:	eb43 0b01 	adc.w	fp, r3, r1
 8005a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f04f 0100 	mov.w	r1, #0
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	008b      	lsls	r3, r1, #2
 8005a5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a62:	0082      	lsls	r2, r0, #2
 8005a64:	4650      	mov	r0, sl
 8005a66:	4659      	mov	r1, fp
 8005a68:	f7fa fdf2 	bl	8000650 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4b0e      	ldr	r3, [pc, #56]	; (8005aac <UART_SetConfig+0x38c>)
 8005a72:	fba3 1302 	umull	r1, r3, r3, r2
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	2164      	movs	r1, #100	; 0x64
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	3332      	adds	r3, #50	; 0x32
 8005a84:	4a09      	ldr	r2, [pc, #36]	; (8005aac <UART_SetConfig+0x38c>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4432      	add	r2, r6
 8005a96:	609a      	str	r2, [r3, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	377c      	adds	r7, #124	; 0x7c
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40011000 	.word	0x40011000
 8005aa8:	40011400 	.word	0x40011400
 8005aac:	51eb851f 	.word	0x51eb851f

08005ab0 <__libc_init_array>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4d0d      	ldr	r5, [pc, #52]	; (8005ae8 <__libc_init_array+0x38>)
 8005ab4:	4c0d      	ldr	r4, [pc, #52]	; (8005aec <__libc_init_array+0x3c>)
 8005ab6:	1b64      	subs	r4, r4, r5
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	2600      	movs	r6, #0
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	d109      	bne.n	8005ad4 <__libc_init_array+0x24>
 8005ac0:	4d0b      	ldr	r5, [pc, #44]	; (8005af0 <__libc_init_array+0x40>)
 8005ac2:	4c0c      	ldr	r4, [pc, #48]	; (8005af4 <__libc_init_array+0x44>)
 8005ac4:	f000 f820 	bl	8005b08 <_init>
 8005ac8:	1b64      	subs	r4, r4, r5
 8005aca:	10a4      	asrs	r4, r4, #2
 8005acc:	2600      	movs	r6, #0
 8005ace:	42a6      	cmp	r6, r4
 8005ad0:	d105      	bne.n	8005ade <__libc_init_array+0x2e>
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad8:	4798      	blx	r3
 8005ada:	3601      	adds	r6, #1
 8005adc:	e7ee      	b.n	8005abc <__libc_init_array+0xc>
 8005ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae2:	4798      	blx	r3
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	e7f2      	b.n	8005ace <__libc_init_array+0x1e>
 8005ae8:	08005b48 	.word	0x08005b48
 8005aec:	08005b48 	.word	0x08005b48
 8005af0:	08005b48 	.word	0x08005b48
 8005af4:	08005b4c 	.word	0x08005b4c

08005af8 <memset>:
 8005af8:	4402      	add	r2, r0
 8005afa:	4603      	mov	r3, r0
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d100      	bne.n	8005b02 <memset+0xa>
 8005b00:	4770      	bx	lr
 8005b02:	f803 1b01 	strb.w	r1, [r3], #1
 8005b06:	e7f9      	b.n	8005afc <memset+0x4>

08005b08 <_init>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	bf00      	nop
 8005b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0e:	bc08      	pop	{r3}
 8005b10:	469e      	mov	lr, r3
 8005b12:	4770      	bx	lr

08005b14 <_fini>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr
