
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a580  0800a580  0001a580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a600  0800a600  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a600  0800a600  0001a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a608  0800a608  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a608  0800a608  0001a608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a60c  0800a60c  0001a60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000006d0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000744  20000744  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d76  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003296  00000000  00000000  00037e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  0003b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f8  00000000  00000000  0003c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024459  00000000  00000000  0003d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b33  00000000  00000000  00061841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc0ad  00000000  00000000  00078374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00154421  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e48  00000000  00000000  00154474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a568 	.word	0x0800a568

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800a568 	.word	0x0800a568

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b08b      	sub	sp, #44	; 0x2c
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <FusionAhrsInitialise+0x74>)
 8000d1a:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <FusionAhrsInitialise+0x78>)
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000d62:	bf00      	nop
 8000d64:	372c      	adds	r7, #44	; 0x2c
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	7f7fffff 	.word	0x7f7fffff
 8000d74:	41200000 	.word	0x41200000

08000d78 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8000d78:	b490      	push	{r4, r7}
 8000d7a:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d84:	6018      	str	r0, [r3, #0]
 8000d86:	f107 0120 	add.w	r1, r7, #32
 8000d8a:	eeb0 5a61 	vmov.f32	s10, s3
 8000d8e:	eef0 5a42 	vmov.f32	s11, s4
 8000d92:	eeb0 6a62 	vmov.f32	s12, s5
 8000d96:	f107 0214 	add.w	r2, r7, #20
 8000d9a:	eef0 6a43 	vmov.f32	s13, s6
 8000d9e:	eeb0 7a63 	vmov.f32	s14, s7
 8000da2:	eef0 7a44 	vmov.f32	s15, s8
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	1d38      	adds	r0, r7, #4
 8000dac:	edc0 4a00 	vstr	s9, [r0]
 8000db0:	ed81 0a00 	vstr	s0, [r1]
 8000db4:	edc1 0a01 	vstr	s1, [r1, #4]
 8000db8:	ed81 1a02 	vstr	s2, [r1, #8]
 8000dbc:	ed82 5a00 	vstr	s10, [r2]
 8000dc0:	edc2 5a01 	vstr	s11, [r2, #4]
 8000dc4:	ed82 6a02 	vstr	s12, [r2, #8]
 8000dc8:	edc3 6a00 	vstr	s13, [r3]
 8000dcc:	ed83 7a01 	vstr	s14, [r3, #4]
 8000dd0:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8000dd4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000dec:	f04f 0200 	mov.w	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	edd3 7a00 	vldr	s15, [r3]
 8000dfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e02:	d112      	bne.n	8000e2a <FusionAhrsUpdate+0xb2>
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e0c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e14:	d109      	bne.n	8000e2a <FusionAhrsUpdate+0xb2>
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	f000 8437 	beq.w	8001698 <FusionAhrsUpdate+0x920>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8000e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	ed93 7a04 	vldr	s14, [r3, #16]
 8000e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	edd3 6a03 	vldr	s13, [r3, #12]
 8000e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000e5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000e62:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8000e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	edd3 6a05 	vldr	s13, [r3, #20]
 8000e88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e96:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000e9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000e9e:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8000ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ebe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	edd3 6a06 	vldr	s13, [r3, #24]
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eda:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000ede:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000ee2:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ee6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000eea:	f107 0214 	add.w	r2, r7, #20
 8000eee:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ef0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ef4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ef8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000efc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000efe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8000f02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f06:	ed93 7a00 	vldr	s14, [r3]
 8000f0a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f0e:	edd3 7a00 	vldr	s15, [r3]
 8000f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f16:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f1a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f1e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f22:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f2e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f32:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f36:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f46:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000f4a:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8000f4e:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000f52:	edd3 7a00 	vldr	s15, [r3]
 8000f56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000f62:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8000f66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f6a:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8000f72:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f7c:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8000f7e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	105a      	asrs	r2, r3, #1
 8000f86:	4b9a      	ldr	r3, [pc, #616]	; (80011f0 <FusionAhrsUpdate+0x478>)
 8000f88:	1a9b      	subs	r3, r3, r2
 8000f8a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000f8e:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8000f90:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f9a:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8000f9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fa0:	ed93 7a00 	vldr	s14, [r3]
 8000fa4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000fa8:	edd3 7a00 	vldr	s15, [r3]
 8000fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fbc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000fc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fc4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fc8:	edd3 7a00 	vldr	s15, [r3]
 8000fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fd4:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8000fd8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fdc:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8000fde:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fe8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000fec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ff2:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8000ffc:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8000ffe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001002:	ed93 7a00 	vldr	s14, [r3]
 8001006:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800100a:	edd3 7a00 	vldr	s15, [r3]
 800100e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001012:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001016:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 800101a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800101e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001022:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001032:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001036:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800103a:	ed93 7a02 	vldr	s14, [r3, #8]
 800103e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800104e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001052:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001056:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800105a:	ca07      	ldmia	r2, {r0, r1, r2}
 800105c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001060:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8001064:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8001068:	ca07      	ldmia	r2, {r0, r1, r2}
 800106a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800106e:	bf00      	nop
 8001070:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8001074:	461c      	mov	r4, r3
 8001076:	f507 734d 	add.w	r3, r7, #820	; 0x334
 800107a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800107e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001082:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001086:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 800108a:	ca07      	ldmia	r2, {r0, r1, r2}
 800108c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001090:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001094:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001098:	ca07      	ldmia	r2, {r0, r1, r2}
 800109a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 800109e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80010a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80010ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010be:	edd3 7a01 	vldr	s15, [r3, #4]
 80010c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010ce:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 80010d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80010da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ea:	edd3 6a00 	vldr	s13, [r3]
 80010ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001102:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001106:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800110a:	ed93 7a00 	vldr	s14, [r3]
 800110e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001112:	edd3 7a01 	vldr	s15, [r3, #4]
 8001116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800111e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001122:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001132:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001136:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800113a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 800113e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001142:	ca07      	ldmia	r2, {r0, r1, r2}
 8001144:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001148:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800114c:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8001150:	ca07      	ldmia	r2, {r0, r1, r2}
 8001152:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800115a:	f107 0208 	add.w	r2, r7, #8
 800115e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001160:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8001164:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001168:	ed93 7a00 	vldr	s14, [r3]
 800116c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800117c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001184:	edd3 7a01 	vldr	s15, [r3, #4]
 8001188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001194:	edd3 6a02 	vldr	s13, [r3, #8]
 8001198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800119c:	edd3 7a02 	vldr	s15, [r3, #8]
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 80011a8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80011ac:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 80011b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80011be:	ed93 7a00 	vldr	s14, [r3]
 80011c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	f100 8266 	bmi.w	800169a <FusionAhrsUpdate+0x922>
 80011ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80011d8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80011dc:	ed93 7a00 	vldr	s14, [r3]
 80011e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	f300 8257 	bgt.w	800169a <FusionAhrsUpdate+0x922>
 80011ec:	e002      	b.n	80011f4 <FusionAhrsUpdate+0x47c>
 80011ee:	bf00      	nop
 80011f0:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 80011f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	ed93 7a04 	vldr	s14, [r3, #16]
 80011fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	edd3 7a05 	vldr	s15, [r3, #20]
 8001208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800120c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	edd3 6a03 	vldr	s13, [r3, #12]
 8001216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001224:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001228:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800122c:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	ed93 7a03 	vldr	s14, [r3, #12]
 800123a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	edd3 7a03 	vldr	s15, [r3, #12]
 8001244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001248:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800124c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001250:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	edd3 6a05 	vldr	s13, [r3, #20]
 800125a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	edd3 7a05 	vldr	s15, [r3, #20]
 8001264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001268:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 800126c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001270:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 8001274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	ed93 7a05 	vldr	s14, [r3, #20]
 800127e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	edd3 7a06 	vldr	s15, [r3, #24]
 8001288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800128c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	edd3 6a03 	vldr	s13, [r3, #12]
 8001296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	edd3 7a04 	vldr	s15, [r3, #16]
 80012a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80012a8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80012ac:	edc3 7a02 	vstr	s15, [r3, #8]
 80012b0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80012b4:	f107 0214 	add.w	r2, r7, #20
 80012b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80012ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012c2:	f107 0208 	add.w	r2, r7, #8
 80012c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80012cc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80012d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80012d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012e0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80012e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80012e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80012f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80012fc:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001300:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001304:	ed93 7a02 	vldr	s14, [r3, #8]
 8001308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001314:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001318:	edd3 6a00 	vldr	s13, [r3]
 800131c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001320:	edd3 7a02 	vldr	s15, [r3, #8]
 8001324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001330:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001334:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001338:	ed93 7a00 	vldr	s14, [r3]
 800133c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001340:	edd3 7a01 	vldr	s15, [r3, #4]
 8001344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001348:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800134c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001360:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001364:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001368:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800136c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001370:	ca07      	ldmia	r2, {r0, r1, r2}
 8001372:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001376:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800137a:	461c      	mov	r4, r3
 800137c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001380:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001388:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800138c:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 8001390:	ca07      	ldmia	r2, {r0, r1, r2}
 8001392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001396:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800139a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800139e:	ca07      	ldmia	r2, {r0, r1, r2}
 80013a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80013a4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013a8:	ed93 7a00 	vldr	s14, [r3]
 80013ac:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80013c0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80013d8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80013e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e8:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80013ec:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 80013f0:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001400:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001404:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001408:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800140c:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001414:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800141e:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001420:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	105a      	asrs	r2, r3, #1
 8001428:	4b99      	ldr	r3, [pc, #612]	; (8001690 <FusionAhrsUpdate+0x918>)
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001430:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001432:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800143c:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 800143e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001442:	ed93 7a00 	vldr	s14, [r3]
 8001446:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001452:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001462:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001466:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001472:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001476:	edc3 7a00 	vstr	s15, [r3]
    return y;
 800147a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800147e:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001480:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800148a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800148e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001490:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001494:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800149e:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 80014a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014b8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80014bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80014c4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014d4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80014d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80014e0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ec:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014f0:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80014f4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80014f8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80014fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80014fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001502:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001506:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800150a:	ca07      	ldmia	r2, {r0, r1, r2}
 800150c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001510:	bf00      	nop
 8001512:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8001516:	461c      	mov	r4, r3
 8001518:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800151c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001524:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001528:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 800152c:	ca07      	ldmia	r2, {r0, r1, r2}
 800152e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001532:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001536:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800153a:	ca07      	ldmia	r2, {r0, r1, r2}
 800153c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001540:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001544:	ed93 7a01 	vldr	s14, [r3, #4]
 8001548:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800154c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001554:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001558:	edd3 6a02 	vldr	s13, [r3, #8]
 800155c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001560:	edd3 7a01 	vldr	s15, [r3, #4]
 8001564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001570:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001574:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001578:	ed93 7a02 	vldr	s14, [r3, #8]
 800157c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001588:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800158c:	edd3 6a00 	vldr	s13, [r3]
 8001590:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001594:	edd3 7a02 	vldr	s15, [r3, #8]
 8001598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015a4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80015a8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015ac:	ed93 7a00 	vldr	s14, [r3]
 80015b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80015b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80015c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015d8:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80015dc:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80015e0:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80015e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80015e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015ea:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80015ee:	461c      	mov	r4, r3
 80015f0:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 80015f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001600:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8001604:	ca07      	ldmia	r2, {r0, r1, r2}
 8001606:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800160a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800160e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8001612:	ca07      	ldmia	r2, {r0, r1, r2}
 8001614:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001618:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001630:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001634:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001638:	ed93 7a01 	vldr	s14, [r3, #4]
 800163c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001640:	edd3 7a01 	vldr	s15, [r3, #4]
 8001644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001648:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800164c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001650:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001654:	ed93 7a02 	vldr	s14, [r3, #8]
 8001658:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800165c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001664:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001668:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800166c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001670:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001674:	ca07      	ldmia	r2, {r0, r1, r2}
 8001676:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800167a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800167e:	461c      	mov	r4, r3
 8001680:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001684:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800168c:	e005      	b.n	800169a <FusionAhrsUpdate+0x922>
 800168e:	bf00      	nop
 8001690:	5f3759df 	.word	0x5f3759df
 8001694:	3c8efa35 	.word	0x3c8efa35
            break;
 8001698:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 800169a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d105      	bne.n	80016ba <FusionAhrsUpdate+0x942>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 80016ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 80016ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f207 4224 	addw	r2, r7, #1060	; 0x424
 80016c6:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 80016c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	dd24      	ble.n	8001730 <FusionAhrsUpdate+0x9b8>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 80016e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800170c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001710:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 8001722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800172e:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 8001730:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 8001694 <FusionAhrsUpdate+0x91c>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 8001734:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001740:	f107 0220 	add.w	r2, r7, #32
 8001744:	ca07      	ldmia	r2, {r0, r1, r2}
 8001746:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800174a:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 800174e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001752:	ed93 7a00 	vldr	s14, [r3]
 8001756:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001762:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001766:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800176a:	ed93 7a01 	vldr	s14, [r3, #4]
 800176e:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 8001772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001776:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800177a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800177e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001782:	ed93 7a02 	vldr	s14, [r3, #8]
 8001786:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800178a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001792:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001796:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 800179a:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800179e:	ca07      	ldmia	r2, {r0, r1, r2}
 80017a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017a4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80017a8:	461c      	mov	r4, r3
 80017aa:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80017ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80017b6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80017ba:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80017be:	ca07      	ldmia	r2, {r0, r1, r2}
 80017c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017c4:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 80017ce:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80017d2:	ed93 7a00 	vldr	s14, [r3]
 80017d6:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 80017da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017de:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80017e2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80017e6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80017ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80017ee:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 80017f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f6:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80017fa:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80017fe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001802:	ed93 7a02 	vldr	s14, [r3, #8]
 8001806:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 800180a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001812:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001816:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800181a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800181e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001820:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001824:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001828:	461c      	mov	r4, r3
 800182a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800182e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001836:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800183a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800183e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001840:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001844:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001848:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 800184c:	ca07      	ldmia	r2, {r0, r1, r2}
 800184e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001852:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001866:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800186a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 800186e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001872:	ed93 7a01 	vldr	s14, [r3, #4]
 8001876:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800187a:	edd3 7a01 	vldr	s15, [r3, #4]
 800187e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001882:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001886:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 800188a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800188e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001892:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001896:	edd3 7a02 	vldr	s15, [r3, #8]
 800189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80018a2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80018a6:	f507 7210 	add.w	r2, r7, #576	; 0x240
 80018aa:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80018ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80018b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018b4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80018b8:	461c      	mov	r4, r3
 80018ba:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80018be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80018c6:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80018ca:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80018ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 80018dc:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80018e0:	ed93 7a00 	vldr	s14, [r3]
 80018e4:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 80018e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ec:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80018f0:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80018f4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80018f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80018fc:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001904:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001908:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800190c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001910:	ed93 7a02 	vldr	s14, [r3, #8]
 8001914:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001920:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001924:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001928:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800192c:	ca07      	ldmia	r2, {r0, r1, r2}
 800192e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001932:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001936:	461c      	mov	r4, r3
 8001938:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800193c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001940:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001944:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4614      	mov	r4, r2
 8001950:	330c      	adds	r3, #12
 8001952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001958:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800195c:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8001960:	ca07      	ldmia	r2, {r0, r1, r2}
 8001962:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001966:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800196a:	edd3 7a01 	vldr	s15, [r3, #4]
 800196e:	eeb1 7a67 	vneg.f32	s14, s15
 8001972:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001982:	edd3 6a02 	vldr	s13, [r3, #8]
 8001986:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800198a:	edd3 7a01 	vldr	s15, [r3, #4]
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001996:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800199a:	edd3 6a03 	vldr	s13, [r3, #12]
 800199e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80019a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80019a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ae:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80019b2:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 80019b6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80019ba:	ed93 7a00 	vldr	s14, [r3]
 80019be:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ca:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80019ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80019d2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80019d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80019e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80019ea:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80019ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80019f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80019fe:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8001a02:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001a06:	ed93 7a00 	vldr	s14, [r3]
 8001a0a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001a0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a16:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001a1a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a1e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001a22:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001a32:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a36:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a46:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001a4a:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 8001a4e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001a52:	ed93 7a00 	vldr	s14, [r3]
 8001a56:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001a5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a62:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001a66:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a6a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001a6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a7a:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001a7e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a82:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a92:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001a96:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001a9a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001a9e:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 8001aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001aa8:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001aac:	461c      	mov	r4, r3
 8001aae:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ab8:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8001abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4614      	mov	r4, r2
 8001ac4:	330c      	adds	r3, #12
 8001ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001acc:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8001ad0:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 8001adc:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001ae0:	ed93 7a00 	vldr	s14, [r3]
 8001ae4:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af0:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001af4:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001af8:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001afc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b00:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001b04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001b10:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001b14:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001b18:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b1c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001b20:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001b2c:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001b30:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001b34:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b38:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001b3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b44:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001b48:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 8001b4c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001b50:	f507 7466 	add.w	r4, r7, #920	; 0x398
 8001b54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b5a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001b5e:	461c      	mov	r4, r3
 8001b60:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 8001b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8001b74:	f103 040c 	add.w	r4, r3, #12
 8001b78:	4613      	mov	r3, r2
 8001b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b80:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4614      	mov	r4, r2
 8001b8c:	330c      	adds	r3, #12
 8001b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001b94:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001b98:	ed93 7a00 	vldr	s14, [r3]
 8001b9c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001bac:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bb0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001bb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001bc4:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bc8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001bcc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001bdc:	edd3 6a03 	vldr	s13, [r3, #12]
 8001be0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001be4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001be8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf0:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 8001bf4:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8001bf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c00:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 8001c04:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c08:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8001c0c:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001c0e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001c18:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001c1a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	105a      	asrs	r2, r3, #1
 8001c22:	4b98      	ldr	r3, [pc, #608]	; (8001e84 <FusionAhrsUpdate+0x110c>)
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8001c2a:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001c2c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c36:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001c38:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c3c:	ed93 7a00 	vldr	s14, [r3]
 8001c40:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8001c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c48:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c54:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001c58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c5c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c68:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c6c:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001c70:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c74:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001c76:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8001c7a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001c7e:	ed93 7a00 	vldr	s14, [r3]
 8001c82:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001c8e:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8001c92:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001c96:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c9a:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001ca6:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8001caa:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001cae:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cb2:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cba:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001cbe:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8001cc2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001cc6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cca:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001cd6:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 8001cda:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001cde:	f507 7462 	add.w	r4, r7, #904	; 0x388
 8001ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ce8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001cec:	461c      	mov	r4, r3
 8001cee:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 8001cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8001d02:	f103 040c 	add.w	r4, r3, #12
 8001d06:	4613      	mov	r3, r2
 8001d08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 8001d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d42:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001d46:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001d4a:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8001d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d82:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001d86:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001d8a:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 8001d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001daa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	edd3 6a06 	vldr	s13, [r3, #24]
 8001db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001dce:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001dd2:	edc3 7a02 	vstr	s15, [r3, #8]
 8001dd6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001dda:	f107 0214 	add.w	r2, r7, #20
 8001dde:	ca07      	ldmia	r2, {r0, r1, r2}
 8001de0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001de4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001de8:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8001dec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8001df2:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001df6:	ed93 7a00 	vldr	s14, [r3]
 8001dfa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e06:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001e0a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8001e0e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001e12:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e16:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001e1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e22:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001e26:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8001e2a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001e2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e32:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001e36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001e42:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001e46:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001e4a:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001e4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e54:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e58:	461c      	mov	r4, r3
 8001e5a:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001e5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 8001e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001e70:	331c      	adds	r3, #28
 8001e72:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e74:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 8001e78:	bf00      	nop
 8001e7a:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc90      	pop	{r4, r7}
 8001e82:	4770      	bx	lr
 8001e84:	5f3759df 	.word	0x5f3759df

08001e88 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 8001e88:	b490      	push	{r4, r7}
 8001e8a:	b096      	sub	sp, #88	; 0x58
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6178      	str	r0, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001e96:	330c      	adds	r3, #12
 8001e98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 8001e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea0:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 8001ea2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ea6:	eef1 7a67 	vneg.f32	s15, s15
 8001eaa:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 8001eae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001eb2:	eef1 7a67 	vneg.f32	s15, s15
 8001eb6:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 8001eba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ebe:	eef1 7a67 	vneg.f32	s15, s15
 8001ec2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 8001ec6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001eca:	f107 0318 	add.w	r3, r7, #24
 8001ece:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ed4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001ed8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001edc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ede:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 8001ee2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ee4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ee6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eea:	ee06 0a10 	vmov	s12, r0
 8001eee:	ee06 1a90 	vmov	s13, r1
 8001ef2:	ee07 2a10 	vmov	s14, r2
 8001ef6:	ee07 3a90 	vmov	s15, r3
}
 8001efa:	eeb0 0a46 	vmov.f32	s0, s12
 8001efe:	eef0 0a66 	vmov.f32	s1, s13
 8001f02:	eeb0 1a47 	vmov.f32	s2, s14
 8001f06:	eef0 1a67 	vmov.f32	s3, s15
 8001f0a:	3758      	adds	r7, #88	; 0x58
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc90      	pop	{r4, r7}
 8001f10:	4770      	bx	lr
 8001f12:	0000      	movs	r0, r0
 8001f14:	0000      	movs	r0, r0
	...

08001f18 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f24:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe faa9 	bl	8000490 <__aeabi_f2d>
 8001f3e:	a312      	add	r3, pc, #72	; (adr r3, 8001f88 <FusionBiasInitialise+0x70>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fafc 	bl	8000540 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f7fe fd08 	bl	8000964 <__aeabi_d2f>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	f3af 8000 	nop.w
 8001f88:	8c0eff43 	.word	0x8c0eff43
 8001f8c:	3fc015bf 	.word	0x3fc015bf

08001f90 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 8001f90:	b490      	push	{r4, r7}
 8001f92:	b0b4      	sub	sp, #208	; 0xd0
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	61f8      	str	r0, [r7, #28]
 8001f98:	eef0 6a40 	vmov.f32	s13, s0
 8001f9c:	eeb0 7a60 	vmov.f32	s14, s1
 8001fa0:	eef0 7a41 	vmov.f32	s15, s2
 8001fa4:	edc7 6a04 	vstr	s13, [r7, #16]
 8001fa8:	ed87 7a05 	vstr	s14, [r7, #20]
 8001fac:	edc7 7a06 	vstr	s15, [r7, #24]
 8001fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fb4:	f107 0210 	add.w	r2, r7, #16
 8001fb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fc4:	3210      	adds	r2, #16
 8001fc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8001fcc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001fd0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8001fdc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001fe0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8001fec:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ff0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ff8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 8001ffc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002000:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002004:	ca07      	ldmia	r2, {r0, r1, r2}
 8002006:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002012:	ca07      	ldmia	r2, {r0, r1, r2}
 8002014:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8002018:	edd7 7a04 	vldr	s15, [r7, #16]
 800201c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800202a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202e:	dc17      	bgt.n	8002060 <FusionBiasUpdate+0xd0>
 8002030:	edd7 7a05 	vldr	s15, [r7, #20]
 8002034:	eeb0 7ae7 	vabs.f32	s14, s15
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	dc0b      	bgt.n	8002060 <FusionBiasUpdate+0xd0>
 8002048:	edd7 7a06 	vldr	s15, [r7, #24]
 800204c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205e:	dd0b      	ble.n	8002078 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8002068:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800206c:	f107 0210 	add.w	r2, r7, #16
 8002070:	ca07      	ldmia	r2, {r0, r1, r2}
 8002072:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002076:	e08f      	b.n	8002198 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	edd3 7a03 	vldr	s15, [r3, #12]
 800207e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	d512      	bpl.n	80020b2 <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	edd3 7a01 	vldr	s15, [r3, #4]
 8002098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 80020a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020a6:	f107 0210 	add.w	r2, r7, #16
 80020aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020b0:	e072      	b.n	8002198 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	689c      	ldr	r4, [r3, #8]
 80020b6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80020ba:	f107 0210 	add.w	r2, r7, #16
 80020be:	ca07      	ldmia	r2, {r0, r1, r2}
 80020c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020c4:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 80020c8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80020cc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80020d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 80020d8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80020dc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80020e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 80020e8:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80020ec:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80020f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 80020f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020fc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002100:	ca07      	ldmia	r2, {r0, r1, r2}
 8002102:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002106:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800210a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800210e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002110:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800211a:	3210      	adds	r2, #16
 800211c:	ca07      	ldmia	r2, {r0, r1, r2}
 800211e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002122:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002126:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800212a:	ca07      	ldmia	r2, {r0, r1, r2}
 800212c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8002130:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002134:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8002140:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002144:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8002150:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002154:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 8002160:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002164:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002168:	ca07      	ldmia	r2, {r0, r1, r2}
 800216a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800216e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002172:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002176:	ca07      	ldmia	r2, {r0, r1, r2}
 8002178:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	3310      	adds	r3, #16
 8002180:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002184:	ca07      	ldmia	r2, {r0, r1, r2}
 8002186:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 800218a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800218e:	f107 0210 	add.w	r2, r7, #16
 8002192:	ca07      	ldmia	r2, {r0, r1, r2}
 8002194:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002198:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800219c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021a4:	ee06 1a90 	vmov	s13, r1
 80021a8:	ee07 2a10 	vmov	s14, r2
 80021ac:	ee07 3a90 	vmov	s15, r3
}
 80021b0:	eeb0 0a66 	vmov.f32	s0, s13
 80021b4:	eef0 0a47 	vmov.f32	s1, s14
 80021b8:	eeb0 1a67 	vmov.f32	s2, s15
 80021bc:	37d0      	adds	r7, #208	; 0xd0
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc90      	pop	{r4, r7}
 80021c2:	4770      	bx	lr

080021c4 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 80021c8:	bf00      	nop
 80021ca:	f000 f91f 	bl	800240c <icm20948_who_am_i>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f083 0301 	eor.w	r3, r3, #1
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f7      	bne.n	80021ca <icm20948_init+0x6>

	icm20948_device_reset();
 80021da:	f000 f93c 	bl	8002456 <icm20948_device_reset>
	icm20948_wakeup();
 80021de:	f000 f951 	bl	8002484 <icm20948_wakeup>

	icm20948_clock_source(1);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f000 f9c9 	bl	800257a <icm20948_clock_source>
	icm20948_odr_align_enable();
 80021e8:	f000 f9e0 	bl	80025ac <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 80021ec:	f000 f964 	bl	80024b8 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 80021f0:	2000      	movs	r0, #0
 80021f2:	f000 f9e4 	bl	80025be <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f000 f9fe 	bl	80025f8 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f000 fa18 	bl	8002632 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002202:	2000      	movs	r0, #0
 8002204:	f000 fa24 	bl	8002650 <icm20948_accel_sample_rate_divider>

	//icm20948_gyro_calibration();
	//icm20948_accel_calibration();

	icm20948_gyro_full_scale_select(_2000dps);
 8002208:	2003      	movs	r0, #3
 800220a:	f000 fa51 	bl	80026b0 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_2g);
 800220e:	2000      	movs	r0, #0
 8002210:	f000 fa98 	bl	8002744 <icm20948_accel_full_scale_select>
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <ak09916_init>:

void ak09916_init()
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 800221c:	f000 f963 	bl	80024e6 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8002220:	f000 f978 	bl	8002514 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8002224:	2007      	movs	r0, #7
 8002226:	f000 f98f 	bl	8002548 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 800222a:	bf00      	nop
 800222c:	f000 f901 	bl	8002432 <ak09916_who_am_i>
 8002230:	4603      	mov	r3, r0
 8002232:	f083 0301 	eor.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f7      	bne.n	800222c <ak09916_init+0x14>

	ak09916_soft_reset();
 800223c:	f000 f917 	bl	800246e <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8002240:	2008      	movs	r0, #8
 8002242:	f000 fa23 	bl	800268c <ak09916_operation_mode_setting>
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}

0800224a <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8002252:	2206      	movs	r2, #6
 8002254:	2133      	movs	r1, #51	; 0x33
 8002256:	2000      	movs	r0, #0
 8002258:	f000 fb3c 	bl	80028d4 <read_multiple_icm20948_reg>
 800225c:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	b21a      	sxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b21b      	sxth	r3, r3
 800226e:	4313      	orrs	r3, r2
 8002270:	b21b      	sxth	r3, r3
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3302      	adds	r3, #2
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	b21a      	sxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3303      	adds	r3, #3
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b21b      	sxth	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b21b      	sxth	r3, r3
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3304      	adds	r3, #4
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3305      	adds	r3, #5
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 80022d8:	2206      	movs	r2, #6
 80022da:	212d      	movs	r1, #45	; 0x2d
 80022dc:	2000      	movs	r0, #0
 80022de:	f000 faf9 	bl	80028d4 <read_multiple_icm20948_reg>
 80022e2:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | (temp[1]));
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3301      	adds	r3, #1
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	4313      	orrs	r3, r2
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | (temp[3]));
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3302      	adds	r3, #2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	b21a      	sxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3303      	adds	r3, #3
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b21b      	sxth	r3, r3
 8002318:	4313      	orrs	r3, r2
 800231a:	b21b      	sxth	r3, r3
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | (temp[5]));
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3304      	adds	r3, #4
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	b21a      	sxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3305      	adds	r3, #5
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b21b      	sxth	r3, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	b21b      	sxth	r3, r3
 8002340:	ee07 3a90 	vmov	s15, r3
 8002344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add scale factor because calibraiton function offset gravity acceleration.
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 800235e:	2010      	movs	r0, #16
 8002360:	f000 fae8 	bl	8002934 <read_single_ak09916_reg>
 8002364:	4603      	mov	r3, r0
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <ak09916_mag_read+0x20>
 8002372:	2300      	movs	r3, #0
 8002374:	e046      	b.n	8002404 <ak09916_mag_read+0xae>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8002376:	2106      	movs	r1, #6
 8002378:	2011      	movs	r0, #17
 800237a:	f000 fb1e 	bl	80029ba <read_multiple_ak09916_reg>
 800237e:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8002380:	2018      	movs	r0, #24
 8002382:	f000 fad7 	bl	8002934 <read_single_ak09916_reg>
 8002386:	4603      	mov	r3, r0
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <ak09916_mag_read+0x42>
 8002394:	2300      	movs	r3, #0
 8002396:	e035      	b.n	8002404 <ak09916_mag_read+0xae>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	3301      	adds	r3, #1
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	ee07 3a90 	vmov	s15, r3
 80023b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	3303      	adds	r3, #3
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	3302      	adds	r3, #2
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	ee07 3a90 	vmov	s15, r3
 80023d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	3305      	adds	r3, #5
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	b21a      	sxth	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	3304      	adds	r3, #4
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	ee07 3a90 	vmov	s15, r3
 80023f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	edc3 7a02 	vstr	s15, [r3, #8]

	return true;
 8002402:	2301      	movs	r3, #1
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8002412:	2100      	movs	r1, #0
 8002414:	2000      	movs	r0, #0
 8002416:	f000 fa0d 	bl	8002834 <read_single_icm20948_reg>
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	2bea      	cmp	r3, #234	; 0xea
 8002422:	d101      	bne.n	8002428 <icm20948_who_am_i+0x1c>
		return true;
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <icm20948_who_am_i+0x1e>
	else
		return false;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8002438:	2001      	movs	r0, #1
 800243a:	f000 fa7b 	bl	8002934 <read_single_ak09916_reg>
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	2b09      	cmp	r3, #9
 8002446:	d101      	bne.n	800244c <ak09916_who_am_i+0x1a>
		return true;
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <ak09916_who_am_i+0x1c>
	else
		return false;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8002456:	b580      	push	{r7, lr}
 8002458:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 800245a:	22c1      	movs	r2, #193	; 0xc1
 800245c:	2106      	movs	r1, #6
 800245e:	2000      	movs	r0, #0
 8002460:	f000 fa14 	bl	800288c <write_single_icm20948_reg>
	HAL_Delay(100);
 8002464:	2064      	movs	r0, #100	; 0x64
 8002466:	f003 f92b 	bl	80056c0 <HAL_Delay>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}

0800246e <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 800246e:	b580      	push	{r7, lr}
 8002470:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8002472:	2101      	movs	r1, #1
 8002474:	2032      	movs	r0, #50	; 0x32
 8002476:	f000 fa7e 	bl	8002976 <write_single_ak09916_reg>
	HAL_Delay(100);
 800247a:	2064      	movs	r0, #100	; 0x64
 800247c:	f003 f920 	bl	80056c0 <HAL_Delay>
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}

08002484 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800248a:	2106      	movs	r1, #6
 800248c:	2000      	movs	r0, #0
 800248e:	f000 f9d1 	bl	8002834 <read_single_icm20948_reg>
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800249c:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	461a      	mov	r2, r3
 80024a2:	2106      	movs	r1, #6
 80024a4:	2000      	movs	r0, #0
 80024a6:	f000 f9f1 	bl	800288c <write_single_icm20948_reg>
	HAL_Delay(100);
 80024aa:	2064      	movs	r0, #100	; 0x64
 80024ac:	f003 f908 	bl	80056c0 <HAL_Delay>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80024be:	2103      	movs	r1, #3
 80024c0:	2000      	movs	r0, #0
 80024c2:	f000 f9b7 	bl	8002834 <read_single_icm20948_reg>
 80024c6:	4603      	mov	r3, r0
 80024c8:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f043 0310 	orr.w	r3, r3, #16
 80024d0:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	461a      	mov	r2, r3
 80024d6:	2103      	movs	r1, #3
 80024d8:	2000      	movs	r0, #0
 80024da:	f000 f9d7 	bl	800288c <write_single_icm20948_reg>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80024ec:	2103      	movs	r1, #3
 80024ee:	2000      	movs	r0, #0
 80024f0:	f000 f9a0 	bl	8002834 <read_single_icm20948_reg>
 80024f4:	4603      	mov	r3, r0
 80024f6:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f043 0302 	orr.w	r3, r3, #2
 80024fe:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	461a      	mov	r2, r3
 8002504:	2103      	movs	r1, #3
 8002506:	2000      	movs	r0, #0
 8002508:	f000 f9c0 	bl	800288c <write_single_icm20948_reg>
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 800251a:	2103      	movs	r1, #3
 800251c:	2000      	movs	r0, #0
 800251e:	f000 f989 	bl	8002834 <read_single_icm20948_reg>
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	f043 0320 	orr.w	r3, r3, #32
 800252c:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	461a      	mov	r2, r3
 8002532:	2103      	movs	r1, #3
 8002534:	2000      	movs	r0, #0
 8002536:	f000 f9a9 	bl	800288c <write_single_icm20948_reg>
	HAL_Delay(100);
 800253a:	2064      	movs	r0, #100	; 0x64
 800253c:	f003 f8c0 	bl	80056c0 <HAL_Delay>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8002552:	2101      	movs	r1, #1
 8002554:	2030      	movs	r0, #48	; 0x30
 8002556:	f000 f96d 	bl	8002834 <read_single_icm20948_reg>
 800255a:	4603      	mov	r3, r0
 800255c:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	4313      	orrs	r3, r2
 8002564:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	461a      	mov	r2, r3
 800256a:	2101      	movs	r1, #1
 800256c:	2030      	movs	r0, #48	; 0x30
 800256e:	f000 f98d 	bl	800288c <write_single_icm20948_reg>
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002584:	2106      	movs	r1, #6
 8002586:	2000      	movs	r0, #0
 8002588:	f000 f954 	bl	8002834 <read_single_icm20948_reg>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4313      	orrs	r3, r2
 8002596:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	461a      	mov	r2, r3
 800259c:	2106      	movs	r1, #6
 800259e:	2000      	movs	r0, #0
 80025a0:	f000 f974 	bl	800288c <write_single_icm20948_reg>
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 80025b0:	2201      	movs	r2, #1
 80025b2:	2109      	movs	r1, #9
 80025b4:	2020      	movs	r0, #32
 80025b6:	f000 f969 	bl	800288c <write_single_icm20948_reg>
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}

080025be <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 80025c8:	2101      	movs	r1, #1
 80025ca:	2020      	movs	r0, #32
 80025cc:	f000 f932 	bl	8002834 <read_single_icm20948_reg>
 80025d0:	4603      	mov	r3, r0
 80025d2:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	b25a      	sxtb	r2, r3
 80025da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025de:	4313      	orrs	r3, r2
 80025e0:	b25b      	sxtb	r3, r3
 80025e2:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	461a      	mov	r2, r3
 80025e8:	2101      	movs	r1, #1
 80025ea:	2020      	movs	r0, #32
 80025ec:	f000 f94e 	bl	800288c <write_single_icm20948_reg>
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002602:	2114      	movs	r1, #20
 8002604:	2020      	movs	r0, #32
 8002606:	f000 f915 	bl	8002834 <read_single_icm20948_reg>
 800260a:	4603      	mov	r3, r0
 800260c:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	b25a      	sxtb	r2, r3
 8002614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002618:	4313      	orrs	r3, r2
 800261a:	b25b      	sxtb	r3, r3
 800261c:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	461a      	mov	r2, r3
 8002622:	2101      	movs	r1, #1
 8002624:	2020      	movs	r0, #32
 8002626:	f000 f931 	bl	800288c <write_single_icm20948_reg>
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	461a      	mov	r2, r3
 8002640:	2100      	movs	r1, #0
 8002642:	2020      	movs	r0, #32
 8002644:	f000 f922 	bl	800288c <write_single_icm20948_reg>
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	b29b      	uxth	r3, r3
 8002660:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	461a      	mov	r2, r3
 8002670:	2110      	movs	r1, #16
 8002672:	2020      	movs	r0, #32
 8002674:	f000 f90a 	bl	800288c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8002678:	7bbb      	ldrb	r3, [r7, #14]
 800267a:	461a      	mov	r2, r3
 800267c:	2111      	movs	r1, #17
 800267e:	2020      	movs	r0, #32
 8002680:	f000 f904 	bl	800288c <write_single_icm20948_reg>
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	4619      	mov	r1, r3
 800269a:	2031      	movs	r0, #49	; 0x31
 800269c:	f000 f96b 	bl	8002976 <write_single_ak09916_reg>
	HAL_Delay(100);
 80026a0:	2064      	movs	r0, #100	; 0x64
 80026a2:	f003 f80d 	bl	80056c0 <HAL_Delay>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <icm20948_gyro_full_scale_select>:
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
}

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 80026ba:	2101      	movs	r1, #1
 80026bc:	2020      	movs	r0, #32
 80026be:	f000 f8b9 	bl	8002834 <read_single_icm20948_reg>
 80026c2:	4603      	mov	r3, r0
 80026c4:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d827      	bhi.n	800271c <icm20948_gyro_full_scale_select+0x6c>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <icm20948_gyro_full_scale_select+0x24>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	080026ed 	.word	0x080026ed
 80026dc:	080026fd 	.word	0x080026fd
 80026e0:	0800270d 	.word	0x0800270d
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <icm20948_gyro_full_scale_select+0x80>)
 80026e6:	4a13      	ldr	r2, [pc, #76]	; (8002734 <icm20948_gyro_full_scale_select+0x84>)
 80026e8:	601a      	str	r2, [r3, #0]
			break;
 80026ea:	e017      	b.n	800271c <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	f043 0302 	orr.w	r3, r3, #2
 80026f2:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <icm20948_gyro_full_scale_select+0x80>)
 80026f6:	4a10      	ldr	r2, [pc, #64]	; (8002738 <icm20948_gyro_full_scale_select+0x88>)
 80026f8:	601a      	str	r2, [r3, #0]
			break;
 80026fa:	e00f      	b.n	800271c <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <icm20948_gyro_full_scale_select+0x80>)
 8002706:	4a0d      	ldr	r2, [pc, #52]	; (800273c <icm20948_gyro_full_scale_select+0x8c>)
 8002708:	601a      	str	r2, [r3, #0]
			break;
 800270a:	e007      	b.n	800271c <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	f043 0306 	orr.w	r3, r3, #6
 8002712:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <icm20948_gyro_full_scale_select+0x80>)
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <icm20948_gyro_full_scale_select+0x90>)
 8002718:	601a      	str	r2, [r3, #0]
			break;
 800271a:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	461a      	mov	r2, r3
 8002720:	2101      	movs	r1, #1
 8002722:	2020      	movs	r0, #32
 8002724:	f000 f8b2 	bl	800288c <write_single_icm20948_reg>
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000090 	.word	0x20000090
 8002734:	43030000 	.word	0x43030000
 8002738:	42830000 	.word	0x42830000
 800273c:	42033333 	.word	0x42033333
 8002740:	41833333 	.word	0x41833333

08002744 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800274e:	2114      	movs	r1, #20
 8002750:	2020      	movs	r0, #32
 8002752:	f000 f86f 	bl	8002834 <read_single_icm20948_reg>
 8002756:	4603      	mov	r3, r0
 8002758:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d82b      	bhi.n	80027b8 <icm20948_accel_full_scale_select+0x74>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <icm20948_accel_full_scale_select+0x24>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002779 	.word	0x08002779
 800276c:	08002783 	.word	0x08002783
 8002770:	08002795 	.word	0x08002795
 8002774:	080027a7 	.word	0x080027a7
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <icm20948_accel_full_scale_select+0x88>)
 800277a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800277e:	601a      	str	r2, [r3, #0]
			break;
 8002780:	e01a      	b.n	80027b8 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <icm20948_accel_full_scale_select+0x88>)
 800278c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002790:	601a      	str	r2, [r3, #0]
			break;
 8002792:	e011      	b.n	80027b8 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <icm20948_accel_full_scale_select+0x88>)
 800279e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80027a2:	601a      	str	r2, [r3, #0]
			break;
 80027a4:	e008      	b.n	80027b8 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	f043 0306 	orr.w	r3, r3, #6
 80027ac:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <icm20948_accel_full_scale_select+0x88>)
 80027b0:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80027b4:	601a      	str	r2, [r3, #0]
			break;
 80027b6:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	461a      	mov	r2, r3
 80027bc:	2114      	movs	r1, #20
 80027be:	2020      	movs	r0, #32
 80027c0:	f000 f864 	bl	800288c <write_single_icm20948_reg>
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000094 	.word	0x20000094

080027d0 <cs_high>:


/* Static Functions */
static void cs_high()
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 80027d4:	2201      	movs	r2, #1
 80027d6:	2104      	movs	r1, #4
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <cs_high+0x14>)
 80027da:	f004 fa5d 	bl	8006c98 <HAL_GPIO_WritePin>
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000

080027e8 <cs_low>:

static void cs_low()
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2104      	movs	r1, #4
 80027f0:	4802      	ldr	r0, [pc, #8]	; (80027fc <cs_low+0x14>)
 80027f2:	f004 fa51 	bl	8006c98 <HAL_GPIO_WritePin>
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000

08002800 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 800280a:	237f      	movs	r3, #127	; 0x7f
 800280c:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	737b      	strb	r3, [r7, #13]

	cs_low();
 8002812:	f7ff ffe9 	bl	80027e8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8002816:	f107 010c 	add.w	r1, r7, #12
 800281a:	230a      	movs	r3, #10
 800281c:	2202      	movs	r2, #2
 800281e:	4804      	ldr	r0, [pc, #16]	; (8002830 <select_user_bank+0x30>)
 8002820:	f004 ff6b 	bl	80076fa <HAL_SPI_Transmit>
	cs_high();
 8002824:	f7ff ffd4 	bl	80027d0 <cs_high>
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200002d0 	.word	0x200002d0

08002834 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	460a      	mov	r2, r1
 800283e:	71fb      	strb	r3, [r7, #7]
 8002840:	4613      	mov	r3, r2
 8002842:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8002844:	79bb      	ldrb	r3, [r7, #6]
 8002846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800284a:	b2db      	uxtb	r3, r3
 800284c:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ffd5 	bl	8002800 <select_user_bank>

	cs_low();
 8002856:	f7ff ffc7 	bl	80027e8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800285a:	f107 010f 	add.w	r1, r7, #15
 800285e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002862:	2201      	movs	r2, #1
 8002864:	4808      	ldr	r0, [pc, #32]	; (8002888 <read_single_icm20948_reg+0x54>)
 8002866:	f004 ff48 	bl	80076fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 800286a:	f107 010e 	add.w	r1, r7, #14
 800286e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002872:	2201      	movs	r2, #1
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <read_single_icm20948_reg+0x54>)
 8002876:	f005 f87c 	bl	8007972 <HAL_SPI_Receive>
	cs_high();
 800287a:	f7ff ffa9 	bl	80027d0 <cs_high>

	return reg_val;
 800287e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200002d0 	.word	0x200002d0

0800288c <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
 8002896:	460b      	mov	r3, r1
 8002898:	71bb      	strb	r3, [r7, #6]
 800289a:	4613      	mov	r3, r2
 800289c:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 800289e:	79bb      	ldrb	r3, [r7, #6]
 80028a0:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 80028a2:	797b      	ldrb	r3, [r7, #5]
 80028a4:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ffa9 	bl	8002800 <select_user_bank>

	cs_low();
 80028ae:	f7ff ff9b 	bl	80027e8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 80028b2:	f107 010c 	add.w	r1, r7, #12
 80028b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ba:	2202      	movs	r2, #2
 80028bc:	4804      	ldr	r0, [pc, #16]	; (80028d0 <write_single_icm20948_reg+0x44>)
 80028be:	f004 ff1c 	bl	80076fa <HAL_SPI_Transmit>
	cs_high();
 80028c2:	f7ff ff85 	bl	80027d0 <cs_high>
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200002d0 	.word	0x200002d0

080028d4 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
 80028de:	460b      	mov	r3, r1
 80028e0:	71bb      	strb	r3, [r7, #6]
 80028e2:	4613      	mov	r3, r2
 80028e4:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 80028e6:	79bb      	ldrb	r3, [r7, #6]
 80028e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ff84 	bl	8002800 <select_user_bank>

	cs_low();
 80028f8:	f7ff ff76 	bl	80027e8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80028fc:	f107 010f 	add.w	r1, r7, #15
 8002900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002904:	2201      	movs	r2, #1
 8002906:	4809      	ldr	r0, [pc, #36]	; (800292c <read_multiple_icm20948_reg+0x58>)
 8002908:	f004 fef7 	bl	80076fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 800290c:	797b      	ldrb	r3, [r7, #5]
 800290e:	b29a      	uxth	r2, r3
 8002910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002914:	4906      	ldr	r1, [pc, #24]	; (8002930 <read_multiple_icm20948_reg+0x5c>)
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <read_multiple_icm20948_reg+0x58>)
 8002918:	f005 f82b 	bl	8007972 <HAL_SPI_Receive>
	cs_high();
 800291c:	f7ff ff58 	bl	80027d0 <cs_high>

	return reg_val;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <read_multiple_icm20948_reg+0x5c>)
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200002d0 	.word	0x200002d0
 8002930:	20000098 	.word	0x20000098

08002934 <read_single_ak09916_reg>:
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
	cs_high();
}

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 800293e:	228c      	movs	r2, #140	; 0x8c
 8002940:	2103      	movs	r1, #3
 8002942:	2030      	movs	r0, #48	; 0x30
 8002944:	f7ff ffa2 	bl	800288c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	461a      	mov	r2, r3
 800294c:	2104      	movs	r1, #4
 800294e:	2030      	movs	r0, #48	; 0x30
 8002950:	f7ff ff9c 	bl	800288c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8002954:	2281      	movs	r2, #129	; 0x81
 8002956:	2105      	movs	r1, #5
 8002958:	2030      	movs	r0, #48	; 0x30
 800295a:	f7ff ff97 	bl	800288c <write_single_icm20948_reg>

	HAL_Delay(1);
 800295e:	2001      	movs	r0, #1
 8002960:	f002 feae 	bl	80056c0 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8002964:	213b      	movs	r1, #59	; 0x3b
 8002966:	2000      	movs	r0, #0
 8002968:	f7ff ff64 	bl	8002834 <read_single_icm20948_reg>
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	4603      	mov	r3, r0
 800297e:	460a      	mov	r2, r1
 8002980:	71fb      	strb	r3, [r7, #7]
 8002982:	4613      	mov	r3, r2
 8002984:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8002986:	220c      	movs	r2, #12
 8002988:	2103      	movs	r1, #3
 800298a:	2030      	movs	r0, #48	; 0x30
 800298c:	f7ff ff7e 	bl	800288c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	461a      	mov	r2, r3
 8002994:	2104      	movs	r1, #4
 8002996:	2030      	movs	r0, #48	; 0x30
 8002998:	f7ff ff78 	bl	800288c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 800299c:	79bb      	ldrb	r3, [r7, #6]
 800299e:	461a      	mov	r2, r3
 80029a0:	2106      	movs	r1, #6
 80029a2:	2030      	movs	r0, #48	; 0x30
 80029a4:	f7ff ff72 	bl	800288c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80029a8:	2281      	movs	r2, #129	; 0x81
 80029aa:	2105      	movs	r1, #5
 80029ac:	2030      	movs	r0, #48	; 0x30
 80029ae:	f7ff ff6d 	bl	800288c <write_single_icm20948_reg>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	460a      	mov	r2, r1
 80029c4:	71fb      	strb	r3, [r7, #7]
 80029c6:	4613      	mov	r3, r2
 80029c8:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80029ca:	228c      	movs	r2, #140	; 0x8c
 80029cc:	2103      	movs	r1, #3
 80029ce:	2030      	movs	r0, #48	; 0x30
 80029d0:	f7ff ff5c 	bl	800288c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	461a      	mov	r2, r3
 80029d8:	2104      	movs	r1, #4
 80029da:	2030      	movs	r0, #48	; 0x30
 80029dc:	f7ff ff56 	bl	800288c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 80029e0:	79bb      	ldrb	r3, [r7, #6]
 80029e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	2105      	movs	r1, #5
 80029ec:	2030      	movs	r0, #48	; 0x30
 80029ee:	f7ff ff4d 	bl	800288c <write_single_icm20948_reg>

	HAL_Delay(1);
 80029f2:	2001      	movs	r0, #1
 80029f4:	f002 fe64 	bl	80056c0 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 80029f8:	79bb      	ldrb	r3, [r7, #6]
 80029fa:	461a      	mov	r2, r3
 80029fc:	213b      	movs	r1, #59	; 0x3b
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7ff ff68 	bl	80028d4 <read_multiple_icm20948_reg>
 8002a04:	4603      	mov	r3, r0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a16:	463b      	mov	r3, r7
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002a22:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a24:	4a21      	ldr	r2, [pc, #132]	; (8002aac <MX_ADC1_Init+0x9c>)
 8002a26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002a36:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a50:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a52:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <MX_ADC1_Init+0xa0>)
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a70:	480d      	ldr	r0, [pc, #52]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a72:	f002 fe49 	bl	8005708 <HAL_ADC_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002a7c:	f001 ffcc 	bl	8004a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002a80:	2308      	movs	r3, #8
 8002a82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a84:	2301      	movs	r3, #1
 8002a86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a8c:	463b      	mov	r3, r7
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <MX_ADC1_Init+0x98>)
 8002a92:	f003 f81b 	bl	8005acc <HAL_ADC_ConfigChannel>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a9c:	f001 ffbc 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200000bc 	.word	0x200000bc
 8002aac:	40012000 	.word	0x40012000
 8002ab0:	0f000001 	.word	0x0f000001

08002ab4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	; 0x30
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 031c 	add.w	r3, r7, #28
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a31      	ldr	r2, [pc, #196]	; (8002b98 <HAL_ADC_MspInit+0xe4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d15b      	bne.n	8002b8e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	4a2f      	ldr	r2, [pc, #188]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a28      	ldr	r2, [pc, #160]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <HAL_ADC_MspInit+0xe8>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_6_Pin|ADC_7_Pin|ADC_8_Pin;
 8002b46:	2307      	movs	r3, #7
 8002b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b52:	f107 031c 	add.w	r3, r7, #28
 8002b56:	4619      	mov	r1, r3
 8002b58:	4811      	ldr	r0, [pc, #68]	; (8002ba0 <HAL_ADC_MspInit+0xec>)
 8002b5a:	f003 fee9 	bl	8006930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|ADC_2_Pin|ADC_3_Pin;
 8002b5e:	2307      	movs	r3, #7
 8002b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b62:	2303      	movs	r3, #3
 8002b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f107 031c 	add.w	r3, r7, #28
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480c      	ldr	r0, [pc, #48]	; (8002ba4 <HAL_ADC_MspInit+0xf0>)
 8002b72:	f003 fedd 	bl	8006930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_4_Pin|ADC_5_Pin;
 8002b76:	2303      	movs	r3, #3
 8002b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	4619      	mov	r1, r3
 8002b88:	4807      	ldr	r0, [pc, #28]	; (8002ba8 <HAL_ADC_MspInit+0xf4>)
 8002b8a:	f003 fed1 	bl	8006930 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3730      	adds	r7, #48	; 0x30
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40012000 	.word	0x40012000
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40020800 	.word	0x40020800
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	40020400 	.word	0x40020400

08002bac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	4b2f      	ldr	r3, [pc, #188]	; (8002c74 <MX_DMA_Init+0xc8>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a2e      	ldr	r2, [pc, #184]	; (8002c74 <MX_DMA_Init+0xc8>)
 8002bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <MX_DMA_Init+0xc8>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bca:	607b      	str	r3, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	603b      	str	r3, [r7, #0]
 8002bd2:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <MX_DMA_Init+0xc8>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <MX_DMA_Init+0xc8>)
 8002bd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <MX_DMA_Init+0xc8>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2100      	movs	r1, #0
 8002bee:	200c      	movs	r0, #12
 8002bf0:	f003 fa65 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002bf4:	200c      	movs	r0, #12
 8002bf6:	f003 fa7e 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	200e      	movs	r0, #14
 8002c00:	f003 fa5d 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002c04:	200e      	movs	r0, #14
 8002c06:	f003 fa76 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	200f      	movs	r0, #15
 8002c10:	f003 fa55 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002c14:	200f      	movs	r0, #15
 8002c16:	f003 fa6e 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2010      	movs	r0, #16
 8002c20:	f003 fa4d 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002c24:	2010      	movs	r0, #16
 8002c26:	f003 fa66 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2011      	movs	r0, #17
 8002c30:	f003 fa45 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002c34:	2011      	movs	r0, #17
 8002c36:	f003 fa5e 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2039      	movs	r0, #57	; 0x39
 8002c40:	f003 fa3d 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002c44:	2039      	movs	r0, #57	; 0x39
 8002c46:	f003 fa56 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	203a      	movs	r0, #58	; 0x3a
 8002c50:	f003 fa35 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002c54:	203a      	movs	r0, #58	; 0x3a
 8002c56:	f003 fa4e 	bl	80060f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2045      	movs	r0, #69	; 0x45
 8002c60:	f003 fa2d 	bl	80060be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002c64:	2045      	movs	r0, #69	; 0x45
 8002c66:	f003 fa46 	bl	80060f6 <HAL_NVIC_EnableIRQ>

}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800

08002c78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7e:	f107 031c 	add.w	r3, r7, #28
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	60da      	str	r2, [r3, #12]
 8002c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	4b4f      	ldr	r3, [pc, #316]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a4e      	ldr	r2, [pc, #312]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002c98:	f043 0310 	orr.w	r3, r3, #16
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b4c      	ldr	r3, [pc, #304]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	4b48      	ldr	r3, [pc, #288]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a47      	ldr	r2, [pc, #284]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002cb4:	f043 0304 	orr.w	r3, r3, #4
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b45      	ldr	r3, [pc, #276]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a40      	ldr	r2, [pc, #256]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b3e      	ldr	r3, [pc, #248]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b3a      	ldr	r3, [pc, #232]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	4a39      	ldr	r2, [pc, #228]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf2:	4b37      	ldr	r3, [pc, #220]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	4b33      	ldr	r3, [pc, #204]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a32      	ldr	r2, [pc, #200]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002d24:	f043 0308 	orr.w	r3, r3, #8
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <MX_GPIO_Init+0x158>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ICM20948_CS_Pin|DRIVER_EN_Pin, GPIO_PIN_RESET);
 8002d36:	2200      	movs	r2, #0
 8002d38:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002d3c:	4825      	ldr	r0, [pc, #148]	; (8002dd4 <MX_GPIO_Init+0x15c>)
 8002d3e:	f003 ffab 	bl	8006c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 8002d42:	2200      	movs	r2, #0
 8002d44:	2130      	movs	r1, #48	; 0x30
 8002d46:	4824      	ldr	r0, [pc, #144]	; (8002dd8 <MX_GPIO_Init+0x160>)
 8002d48:	f003 ffa6 	bl	8006c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002d52:	4822      	ldr	r0, [pc, #136]	; (8002ddc <MX_GPIO_Init+0x164>)
 8002d54:	f003 ffa0 	bl	8006c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin|DRIVER_EN_Pin;
 8002d58:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d6a:	f107 031c 	add.w	r3, r7, #28
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4818      	ldr	r0, [pc, #96]	; (8002dd4 <MX_GPIO_Init+0x15c>)
 8002d72:	f003 fddd 	bl	8006930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_PARK_UP_Pin|BTN_PARK_DOWN_Pin;
 8002d76:	2330      	movs	r3, #48	; 0x30
 8002d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d82:	f107 031c 	add.w	r3, r7, #28
 8002d86:	4619      	mov	r1, r3
 8002d88:	4812      	ldr	r0, [pc, #72]	; (8002dd4 <MX_GPIO_Init+0x15c>)
 8002d8a:	f003 fdd1 	bl	8006930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin;
 8002d8e:	2330      	movs	r3, #48	; 0x30
 8002d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d92:	2301      	movs	r3, #1
 8002d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9e:	f107 031c 	add.w	r3, r7, #28
 8002da2:	4619      	mov	r1, r3
 8002da4:	480c      	ldr	r0, [pc, #48]	; (8002dd8 <MX_GPIO_Init+0x160>)
 8002da6:	f003 fdc3 	bl	8006930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8002daa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4806      	ldr	r0, [pc, #24]	; (8002ddc <MX_GPIO_Init+0x164>)
 8002dc4:	f003 fdb4 	bl	8006930 <HAL_GPIO_Init>

}
 8002dc8:	bf00      	nop
 8002dca:	3730      	adds	r7, #48	; 0x30
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40020c00 	.word	0x40020c00

08002de0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	if (UartHandle->Instance == SYSTEM_HARDWARE_UART_HIGH_INSTANSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a71      	ldr	r2, [pc, #452]	; (8002fb4 <HAL_UART_RxCpltCallback+0x1d4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d16b      	bne.n	8002eca <HAL_UART_RxCpltCallback+0xea>
	{
		if (UartHighReceiveState == 0)
 8002df2:	4b71      	ldr	r3, [pc, #452]	; (8002fb8 <HAL_UART_RxCpltCallback+0x1d8>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d11f      	bne.n	8002e3c <HAL_UART_RxCpltCallback+0x5c>
		{
			if ((SerialHighLevelRequest.CR != 13) || (SerialHighLevelRequest.LF != 10))
 8002dfc:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <HAL_UART_RxCpltCallback+0x1dc>)
 8002dfe:	7b9b      	ldrb	r3, [r3, #14]
 8002e00:	2b0d      	cmp	r3, #13
 8002e02:	d103      	bne.n	8002e0c <HAL_UART_RxCpltCallback+0x2c>
 8002e04:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <HAL_UART_RxCpltCallback+0x1dc>)
 8002e06:	7bdb      	ldrb	r3, [r3, #15]
 8002e08:	2b0a      	cmp	r3, #10
 8002e0a:	d00c      	beq.n	8002e26 <HAL_UART_RxCpltCallback+0x46>
			{
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, LostByte, 1);
 8002e0c:	4b6c      	ldr	r3, [pc, #432]	; (8002fc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2201      	movs	r2, #1
 8002e12:	4619      	mov	r1, r3
 8002e14:	486b      	ldr	r0, [pc, #428]	; (8002fc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8002e16:	f006 f845 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	73fb      	strb	r3, [r7, #15]
				UartHighReceiveState = 1;
 8002e1e:	4b66      	ldr	r3, [pc, #408]	; (8002fb8 <HAL_UART_RxCpltCallback+0x1d8>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	e042      	b.n	8002eac <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				UartHighReceiveState = 10;
 8002e26:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <HAL_UART_RxCpltCallback+0x1d8>)
 8002e28:	220a      	movs	r2, #10
 8002e2a:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	4963      	ldr	r1, [pc, #396]	; (8002fbc <HAL_UART_RxCpltCallback+0x1dc>)
 8002e30:	4864      	ldr	r0, [pc, #400]	; (8002fc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8002e32:	f006 f837 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002e36:	4603      	mov	r3, r0
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e037      	b.n	8002eac <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else
		{
			if(UartHighReceiveState == 1)
 8002e3c:	4b5e      	ldr	r3, [pc, #376]	; (8002fb8 <HAL_UART_RxCpltCallback+0x1d8>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d111      	bne.n	8002e6a <HAL_UART_RxCpltCallback+0x8a>
			{
				if (LostByte[0] == 13)
 8002e46:	4b5e      	ldr	r3, [pc, #376]	; (8002fc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b0d      	cmp	r3, #13
 8002e4e:	d102      	bne.n	8002e56 <HAL_UART_RxCpltCallback+0x76>
				{
					UartHighReceiveState = 2;
 8002e50:	4b59      	ldr	r3, [pc, #356]	; (8002fb8 <HAL_UART_RxCpltCallback+0x1d8>)
 8002e52:	2202      	movs	r2, #2
 8002e54:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)LostByte, 1);
 8002e56:	4b5a      	ldr	r3, [pc, #360]	; (8002fc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4859      	ldr	r0, [pc, #356]	; (8002fc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8002e60:	f006 f820 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002e64:	4603      	mov	r3, r0
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e020      	b.n	8002eac <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				if (UartHighReceiveState == 2)
 8002e6a:	4b53      	ldr	r3, [pc, #332]	; (8002fb8 <HAL_UART_RxCpltCallback+0x1d8>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d11b      	bne.n	8002eac <HAL_UART_RxCpltCallback+0xcc>
				{
					if (LostByte[0] == 10)
 8002e74:	4b52      	ldr	r3, [pc, #328]	; (8002fc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b0a      	cmp	r3, #10
 8002e7c:	d10a      	bne.n	8002e94 <HAL_UART_RxCpltCallback+0xb4>
					{
						UartHighReceiveState = 0;
 8002e7e:	4b4e      	ldr	r3, [pc, #312]	; (8002fb8 <HAL_UART_RxCpltCallback+0x1d8>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 8002e84:	2210      	movs	r2, #16
 8002e86:	494d      	ldr	r1, [pc, #308]	; (8002fbc <HAL_UART_RxCpltCallback+0x1dc>)
 8002e88:	484e      	ldr	r0, [pc, #312]	; (8002fc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8002e8a:	f006 f80b 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	e00b      	b.n	8002eac <HAL_UART_RxCpltCallback+0xcc>
					}
					else
					{
						UartHighReceiveState = 1;
 8002e94:	4b48      	ldr	r3, [pc, #288]	; (8002fb8 <HAL_UART_RxCpltCallback+0x1d8>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)LostByte, 1);
 8002e9a:	4b49      	ldr	r3, [pc, #292]	; (8002fc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4848      	ldr	r0, [pc, #288]	; (8002fc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8002ea4:	f005 fffe 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}
		if (Res != HAL_OK)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_UART_RxCpltCallback+0xea>
		{
			MX_USART3_UART_Init();
 8002eb2:	f002 f9c1 	bl	8005238 <MX_USART3_UART_Init>
			UartHighReceiveState = 0;
 8002eb6:	4b40      	ldr	r3, [pc, #256]	; (8002fb8 <HAL_UART_RxCpltCallback+0x1d8>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	493f      	ldr	r1, [pc, #252]	; (8002fbc <HAL_UART_RxCpltCallback+0x1dc>)
 8002ec0:	4840      	ldr	r0, [pc, #256]	; (8002fc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8002ec2:	f005 ffef 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == SYSTEM_HARDWARE_UART_LOW_INSTANSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a3e      	ldr	r2, [pc, #248]	; (8002fc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d16b      	bne.n	8002fac <HAL_UART_RxCpltCallback+0x1cc>
	{
		if (UartLowReceiveState == 0)
 8002ed4:	4b3d      	ldr	r3, [pc, #244]	; (8002fcc <HAL_UART_RxCpltCallback+0x1ec>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11f      	bne.n	8002f1e <HAL_UART_RxCpltCallback+0x13e>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 8002ede:	4b3c      	ldr	r3, [pc, #240]	; (8002fd0 <HAL_UART_RxCpltCallback+0x1f0>)
 8002ee0:	7b9b      	ldrb	r3, [r3, #14]
 8002ee2:	2b0d      	cmp	r3, #13
 8002ee4:	d103      	bne.n	8002eee <HAL_UART_RxCpltCallback+0x10e>
 8002ee6:	4b3a      	ldr	r3, [pc, #232]	; (8002fd0 <HAL_UART_RxCpltCallback+0x1f0>)
 8002ee8:	7bdb      	ldrb	r3, [r3, #15]
 8002eea:	2b0a      	cmp	r3, #10
 8002eec:	d00c      	beq.n	8002f08 <HAL_UART_RxCpltCallback+0x128>
			{
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, LostByte, 1);
 8002eee:	4b34      	ldr	r3, [pc, #208]	; (8002fc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4837      	ldr	r0, [pc, #220]	; (8002fd4 <HAL_UART_RxCpltCallback+0x1f4>)
 8002ef8:	f005 ffd4 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002efc:	4603      	mov	r3, r0
 8002efe:	73fb      	strb	r3, [r7, #15]
				UartLowReceiveState = 1;
 8002f00:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_UART_RxCpltCallback+0x1ec>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	e042      	b.n	8002f8e <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				UartLowReceiveState = 10;
 8002f08:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_UART_RxCpltCallback+0x1ec>)
 8002f0a:	220a      	movs	r2, #10
 8002f0c:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002f0e:	2210      	movs	r2, #16
 8002f10:	492f      	ldr	r1, [pc, #188]	; (8002fd0 <HAL_UART_RxCpltCallback+0x1f0>)
 8002f12:	4830      	ldr	r0, [pc, #192]	; (8002fd4 <HAL_UART_RxCpltCallback+0x1f4>)
 8002f14:	f005 ffc6 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e037      	b.n	8002f8e <HAL_UART_RxCpltCallback+0x1ae>
			}
		}
		else
		{
			if(UartLowReceiveState == 1)
 8002f1e:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <HAL_UART_RxCpltCallback+0x1ec>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d111      	bne.n	8002f4c <HAL_UART_RxCpltCallback+0x16c>
			{
				if (LostByte[0] == 13)
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b0d      	cmp	r3, #13
 8002f30:	d102      	bne.n	8002f38 <HAL_UART_RxCpltCallback+0x158>
				{
					UartLowReceiveState = 2;
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <HAL_UART_RxCpltCallback+0x1ec>)
 8002f34:	2202      	movs	r2, #2
 8002f36:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)LostByte, 1);
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4824      	ldr	r0, [pc, #144]	; (8002fd4 <HAL_UART_RxCpltCallback+0x1f4>)
 8002f42:	f005 ffaf 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002f46:	4603      	mov	r3, r0
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	e020      	b.n	8002f8e <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				if (UartLowReceiveState == 2)
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <HAL_UART_RxCpltCallback+0x1ec>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d11b      	bne.n	8002f8e <HAL_UART_RxCpltCallback+0x1ae>
				{
					if (LostByte[0] == 10)
 8002f56:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b0a      	cmp	r3, #10
 8002f5e:	d10a      	bne.n	8002f76 <HAL_UART_RxCpltCallback+0x196>
					{
						UartLowReceiveState = 0;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <HAL_UART_RxCpltCallback+0x1ec>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002f66:	2210      	movs	r2, #16
 8002f68:	4919      	ldr	r1, [pc, #100]	; (8002fd0 <HAL_UART_RxCpltCallback+0x1f0>)
 8002f6a:	481a      	ldr	r0, [pc, #104]	; (8002fd4 <HAL_UART_RxCpltCallback+0x1f4>)
 8002f6c:	f005 ff9a 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002f70:	4603      	mov	r3, r0
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	e00b      	b.n	8002f8e <HAL_UART_RxCpltCallback+0x1ae>
					}
					else
					{
						UartLowReceiveState = 1;
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <HAL_UART_RxCpltCallback+0x1ec>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)LostByte, 1);
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2201      	movs	r2, #1
 8002f82:	4619      	mov	r1, r3
 8002f84:	4813      	ldr	r0, [pc, #76]	; (8002fd4 <HAL_UART_RxCpltCallback+0x1f4>)
 8002f86:	f005 ff8d 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <HAL_UART_RxCpltCallback+0x1cc>
		{
			MX_USART2_UART_Init();
 8002f94:	f002 f926 	bl	80051e4 <MX_USART2_UART_Init>
			UartLowReceiveState = 0;
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_UART_RxCpltCallback+0x1ec>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	490b      	ldr	r1, [pc, #44]	; (8002fd0 <HAL_UART_RxCpltCallback+0x1f0>)
 8002fa2:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <HAL_UART_RxCpltCallback+0x1f4>)
 8002fa4:	f005 ff7e 	bl	8008ea4 <HAL_UART_Receive_DMA>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40004800 	.word	0x40004800
 8002fb8:	200000a9 	.word	0x200000a9
 8002fbc:	20000220 	.word	0x20000220
 8002fc0:	200002cc 	.word	0x200002cc
 8002fc4:	200005f8 	.word	0x200005f8
 8002fc8:	40004400 	.word	0x40004400
 8002fcc:	200000a8 	.word	0x200000a8
 8002fd0:	2000014c 	.word	0x2000014c
 8002fd4:	200006fc 	.word	0x200006fc

08002fd8 <UartLowPrepareRaw>:
void UartLowPrepareRaw(uint16_t Difference, int32_t* InputHall, uint8_t Count)
{
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	80fb      	strh	r3, [r7, #6]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	717b      	strb	r3, [r7, #5]
	if(InitionHall == 0)
 8002fe8:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <UartLowPrepareRaw+0x200>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d115      	bne.n	800301c <UartLowPrepareRaw+0x44>
	{
		for(int i = 0; i < Count; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e00b      	b.n	800300e <UartLowPrepareRaw+0x36>
		{
			WheelsHall[i].LastHall = InputHall[i];
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4976      	ldr	r1, [pc, #472]	; (80031dc <UartLowPrepareRaw+0x204>)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		for(int i = 0; i < Count; i++)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3301      	adds	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	797b      	ldrb	r3, [r7, #5]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	429a      	cmp	r2, r3
 8003014:	dbef      	blt.n	8002ff6 <UartLowPrepareRaw+0x1e>
		}
		InitionHall = 1;
 8003016:	4b70      	ldr	r3, [pc, #448]	; (80031d8 <UartLowPrepareRaw+0x200>)
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
	}
	for (int i = 0; i < Count; i++)
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	e03e      	b.n	80030a0 <UartLowPrepareRaw+0xc8>
	{
		if (HallActualize(InputHall[i], WheelsHall[i].LastHall, Difference))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	4413      	add	r3, r2
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	4a6b      	ldr	r2, [pc, #428]	; (80031dc <UartLowPrepareRaw+0x204>)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	4619      	mov	r1, r3
 8003038:	f000 f8da 	bl	80031f0 <HallActualize>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d012      	beq.n	8003068 <UartLowPrepareRaw+0x90>
		{
			WheelsHall[i].OutputHall = InputHall[i];
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	4413      	add	r3, r2
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4963      	ldr	r1, [pc, #396]	; (80031dc <UartLowPrepareRaw+0x204>)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	605a      	str	r2, [r3, #4]
			WheelsHall[i].LastHall = InputHall[i];
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	4413      	add	r3, r2
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	495e      	ldr	r1, [pc, #376]	; (80031dc <UartLowPrepareRaw+0x204>)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		}
		if (!HallActualize(InputHall[i], WheelsHall[i].LastHall, Difference))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	4413      	add	r3, r2
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	4a5a      	ldr	r2, [pc, #360]	; (80031dc <UartLowPrepareRaw+0x204>)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800307a:	88fa      	ldrh	r2, [r7, #6]
 800307c:	4619      	mov	r1, r3
 800307e:	f000 f8b7 	bl	80031f0 <HallActualize>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d108      	bne.n	800309a <UartLowPrepareRaw+0xc2>
		{
			WheelsHall[i].LastHall = InputHall[i];
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	4413      	add	r3, r2
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4952      	ldr	r1, [pc, #328]	; (80031dc <UartLowPrepareRaw+0x204>)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < Count; i++)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3301      	adds	r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	797b      	ldrb	r3, [r7, #5]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	dbbc      	blt.n	8003022 <UartLowPrepareRaw+0x4a>
		}
	}

	switch (SerialControlWheelsResponce.ParameterNumber)
 80030a8:	4b4d      	ldr	r3, [pc, #308]	; (80031e0 <UartLowPrepareRaw+0x208>)
 80030aa:	785b      	ldrb	r3, [r3, #1]
 80030ac:	2b07      	cmp	r3, #7
 80030ae:	f200 8088 	bhi.w	80031c2 <UartLowPrepareRaw+0x1ea>
 80030b2:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UartLowPrepareRaw+0xe0>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030d9 	.word	0x080030d9
 80030bc:	0800316f 	.word	0x0800316f
 80030c0:	0800317b 	.word	0x0800317b
 80030c4:	08003187 	.word	0x08003187
 80030c8:	08003193 	.word	0x08003193
 80030cc:	0800319f 	.word	0x0800319f
 80030d0:	080031ab 	.word	0x080031ab
 80030d4:	080031b7 	.word	0x080031b7
	{
		case 0:
			LowDiagnostic.Voltage = SerialControlWheelsResponce.ParameterValue;
 80030d8:	4b41      	ldr	r3, [pc, #260]	; (80031e0 <UartLowPrepareRaw+0x208>)
 80030da:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80030de:	4a41      	ldr	r2, [pc, #260]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 80030e0:	6013      	str	r3, [r2, #0]
			LowDiagnostic.Battery += ((Interpolation(LowDiagnostic.Voltage, 28, 41) * 100.0) - LowDiagnostic.Battery) * 0.01;
 80030e2:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80031e8 <UartLowPrepareRaw+0x210>
 80030ec:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 80030f0:	eeb0 0a67 	vmov.f32	s0, s15
 80030f4:	f000 f8b0 	bl	8003258 <Interpolation>
 80030f8:	ee10 3a10 	vmov	r3, s0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd f9c7 	bl	8000490 <__aeabi_f2d>
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	4b39      	ldr	r3, [pc, #228]	; (80031ec <UartLowPrepareRaw+0x214>)
 8003108:	f7fd fa1a 	bl	8000540 <__aeabi_dmul>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4614      	mov	r4, r2
 8003112:	461d      	mov	r5, r3
 8003114:	4b33      	ldr	r3, [pc, #204]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd f9b9 	bl	8000490 <__aeabi_f2d>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4620      	mov	r0, r4
 8003124:	4629      	mov	r1, r5
 8003126:	f7fd f853 	bl	80001d0 <__aeabi_dsub>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	a327      	add	r3, pc, #156	; (adr r3, 80031d0 <UartLowPrepareRaw+0x1f8>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f7fd fa02 	bl	8000540 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4614      	mov	r4, r2
 8003142:	461d      	mov	r5, r3
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd f9a1 	bl	8000490 <__aeabi_f2d>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4620      	mov	r0, r4
 8003154:	4629      	mov	r1, r5
 8003156:	f7fd f83d 	bl	80001d4 <__adddf3>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	f7fd fbff 	bl	8000964 <__aeabi_d2f>
 8003166:	4603      	mov	r3, r0
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 800316a:	6053      	str	r3, [r2, #4]
		  	break;
 800316c:	e029      	b.n	80031c2 <UartLowPrepareRaw+0x1ea>
		case 1:
			LowDiagnostic.CurrentLeft = SerialControlWheelsResponce.ParameterValue;
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <UartLowPrepareRaw+0x208>)
 8003170:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 8003176:	6093      	str	r3, [r2, #8]
			break;
 8003178:	e023      	b.n	80031c2 <UartLowPrepareRaw+0x1ea>
		case 2:
			LowDiagnostic.CurrentRight = SerialControlWheelsResponce.ParameterValue;
 800317a:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <UartLowPrepareRaw+0x208>)
 800317c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003180:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 8003182:	60d3      	str	r3, [r2, #12]
			break;
 8003184:	e01d      	b.n	80031c2 <UartLowPrepareRaw+0x1ea>
		case 3:
			LowDiagnostic.RPSLeft = SerialControlWheelsResponce.ParameterValue;
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <UartLowPrepareRaw+0x208>)
 8003188:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800318c:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 800318e:	6113      	str	r3, [r2, #16]
			break;
 8003190:	e017      	b.n	80031c2 <UartLowPrepareRaw+0x1ea>
		case 4:
			LowDiagnostic.RPSRight = SerialControlWheelsResponce.ParameterValue;
 8003192:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <UartLowPrepareRaw+0x208>)
 8003194:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003198:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 800319a:	6153      	str	r3, [r2, #20]
			break;
 800319c:	e011      	b.n	80031c2 <UartLowPrepareRaw+0x1ea>
		case 5:
			LowDiagnostic.OverCurrCount = SerialControlWheelsResponce.ParameterValue;
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <UartLowPrepareRaw+0x208>)
 80031a0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80031a4:	4a0f      	ldr	r2, [pc, #60]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 80031a6:	6193      	str	r3, [r2, #24]
			break;
 80031a8:	e00b      	b.n	80031c2 <UartLowPrepareRaw+0x1ea>
		case 6:
			LowDiagnostic.ConnErrCount = SerialControlWheelsResponce.ParameterValue;
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <UartLowPrepareRaw+0x208>)
 80031ac:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80031b0:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 80031b2:	61d3      	str	r3, [r2, #28]
			break;
 80031b4:	e005      	b.n	80031c2 <UartLowPrepareRaw+0x1ea>
		case 7:
			LowDiagnostic.CommTime = SerialControlWheelsResponce.ParameterValue;
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <UartLowPrepareRaw+0x208>)
 80031b8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80031bc:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <UartLowPrepareRaw+0x20c>)
 80031be:	6213      	str	r3, [r2, #32]
		  	break;
 80031c0:	bf00      	nop
	}
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bdb0      	pop	{r4, r5, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	f3af 8000 	nop.w
 80031d0:	47ae147b 	.word	0x47ae147b
 80031d4:	3f847ae1 	.word	0x3f847ae1
 80031d8:	200000aa 	.word	0x200000aa
 80031dc:	200002bc 	.word	0x200002bc
 80031e0:	2000014c 	.word	0x2000014c
 80031e4:	20000170 	.word	0x20000170
 80031e8:	42240000 	.word	0x42240000
 80031ec:	40590000 	.word	0x40590000

080031f0 <HallActualize>:
int HallActualize(int32_t NewStep, int32_t LastStep, int32_t Difference)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
	int32_t CalcDiff = abs(LastStep - NewStep);
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	bfb8      	it	lt
 8003206:	425b      	neglt	r3, r3
 8003208:	617b      	str	r3, [r7, #20]
	if (CalcDiff <= Difference)
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	dc01      	bgt.n	8003216 <HallActualize+0x26>
	{
		return 1;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HallActualize+0x28>
	}
	return 0;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <GPIOUpdate>:
void GPIOUpdate()
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
	FootButtonUp = HAL_GPIO_ReadPin(SYSTEM_HARDWARE_PARKING_LEG_UP_PORT, SYSTEM_HARDWARE_PARKING_LEG_UP_PIN);
 8003228:	2120      	movs	r1, #32
 800322a:	4808      	ldr	r0, [pc, #32]	; (800324c <GPIOUpdate+0x28>)
 800322c:	f003 fd1c 	bl	8006c68 <HAL_GPIO_ReadPin>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <GPIOUpdate+0x2c>)
 8003236:	701a      	strb	r2, [r3, #0]
	FootButtonDown = HAL_GPIO_ReadPin(SYSTEM_HARDWARE_PARKING_LEG_DOWN_PORT, SYSTEM_HARDWARE_PARKING_LEG_DOWN_PIN);
 8003238:	2110      	movs	r1, #16
 800323a:	4804      	ldr	r0, [pc, #16]	; (800324c <GPIOUpdate+0x28>)
 800323c:	f003 fd14 	bl	8006c68 <HAL_GPIO_ReadPin>
 8003240:	4603      	mov	r3, r0
 8003242:	461a      	mov	r2, r3
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <GPIOUpdate+0x30>)
 8003246:	701a      	strb	r2, [r3, #0]
}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	200000ab 	.word	0x200000ab
 8003254:	200000ac 	.word	0x200000ac

08003258 <Interpolation>:
float Interpolation(float Value, float Min, float Max)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003262:	edc7 0a02 	vstr	s1, [r7, #8]
 8003266:	ed87 1a01 	vstr	s2, [r7, #4]
    float Result = (Value - Min) / (Max - Min);
 800326a:	ed97 7a03 	vldr	s14, [r7, #12]
 800326e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003272:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003276:	ed97 7a01 	vldr	s14, [r7, #4]
 800327a:	edd7 7a02 	vldr	s15, [r7, #8]
 800327e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003286:	edc7 7a05 	vstr	s15, [r7, #20]
    if (Result > 1)
 800328a:	edd7 7a05 	vldr	s15, [r7, #20]
 800328e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329a:	dd02      	ble.n	80032a2 <Interpolation+0x4a>
    {
        return 1;
 800329c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80032a0:	e00a      	b.n	80032b8 <Interpolation+0x60>
    }
    if (Result < 0)
 80032a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80032a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ae:	d502      	bpl.n	80032b6 <Interpolation+0x5e>
    {
        return 0;
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e000      	b.n	80032b8 <Interpolation+0x60>
    }
    return Result;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	ee07 3a90 	vmov	s15, r3
}
 80032bc:	eeb0 0a67 	vmov.f32	s0, s15
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <ADCInit>:
void ADCInit()
{
 80032cc:	b480      	push	{r7}
 80032ce:	b08b      	sub	sp, #44	; 0x2c
 80032d0:	af00      	add	r7, sp, #0
	uint16_t Raw[SYSTEM_HARDWARE_ADC_Channel_Count];
	uint16_t Sensors[SYSTEM_HARDWARE_ADC_Channel_Count - 3];
	float Amperage[SYSTEM_HARDWARE_ADC_Channel_Count - 5];
	AdcModule.Raw = Raw;
 80032d2:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <ADCInit+0x28>)
 80032d4:	f107 0318 	add.w	r3, r7, #24
 80032d8:	6013      	str	r3, [r2, #0]
	AdcModule.Sensors = Sensors;
 80032da:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <ADCInit+0x28>)
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	6053      	str	r3, [r2, #4]
	AdcModule.Amperage = Amperage;
 80032e2:	4a04      	ldr	r2, [pc, #16]	; (80032f4 <ADCInit+0x28>)
 80032e4:	463b      	mov	r3, r7
 80032e6:	6093      	str	r3, [r2, #8]
}
 80032e8:	bf00      	nop
 80032ea:	372c      	adds	r7, #44	; 0x2c
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	2000019c 	.word	0x2000019c

080032f8 <ADCUpdate>:
void ADCUpdate()
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++)
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	e00e      	b.n	8003322 <ADCUpdate+0x2a>
	{
		AdcModule.Raw[i] = ReadAdcChanel(i);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	b2d9      	uxtb	r1, r3
 8003308:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <ADCUpdate+0x88>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	18d4      	adds	r4, r2, r3
 8003312:	4608      	mov	r0, r1
 8003314:	f000 f8ea 	bl	80034ec <ReadAdcChanel>
 8003318:	4603      	mov	r3, r0
 800331a:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3301      	adds	r3, #1
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b07      	cmp	r3, #7
 8003326:	dded      	ble.n	8003304 <ADCUpdate+0xc>
	}
#ifndef DEBUG_NO_ADC_ALL
#ifndef DEBUG_NO_ADC_RAW
	DebugADCRawFL = AdcModule.Raw[0];
 8003328:	4b15      	ldr	r3, [pc, #84]	; (8003380 <ADCUpdate+0x88>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <ADCUpdate+0x8c>)
 8003330:	801a      	strh	r2, [r3, #0]
	DebugADCRawFR = AdcModule.Raw[1];
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <ADCUpdate+0x88>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	885a      	ldrh	r2, [r3, #2]
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <ADCUpdate+0x90>)
 800333a:	801a      	strh	r2, [r3, #0]
	DebugADCRawBL = AdcModule.Raw[2];
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <ADCUpdate+0x88>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	889a      	ldrh	r2, [r3, #4]
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <ADCUpdate+0x94>)
 8003344:	801a      	strh	r2, [r3, #0]
	DebugADCRawBR = AdcModule.Raw[3];
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <ADCUpdate+0x88>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	88da      	ldrh	r2, [r3, #6]
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <ADCUpdate+0x98>)
 800334e:	801a      	strh	r2, [r3, #0]
	DebugADCRawCN = AdcModule.Raw[4];
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <ADCUpdate+0x88>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	891a      	ldrh	r2, [r3, #8]
 8003356:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <ADCUpdate+0x9c>)
 8003358:	801a      	strh	r2, [r3, #0]
	DebugADCRaw36 = AdcModule.Raw[5];
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <ADCUpdate+0x88>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	895a      	ldrh	r2, [r3, #10]
 8003360:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <ADCUpdate+0xa0>)
 8003362:	801a      	strh	r2, [r3, #0]
	DebugADCRaw12 = AdcModule.Raw[6];
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <ADCUpdate+0x88>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	899a      	ldrh	r2, [r3, #12]
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <ADCUpdate+0xa4>)
 800336c:	801a      	strh	r2, [r3, #0]
	DebugADCRaw5 = AdcModule.Raw[7];
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <ADCUpdate+0x88>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	89da      	ldrh	r2, [r3, #14]
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <ADCUpdate+0xa8>)
 8003376:	801a      	strh	r2, [r3, #0]
#endif
#endif
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bd90      	pop	{r4, r7, pc}
 8003380:	2000019c 	.word	0x2000019c
 8003384:	20000104 	.word	0x20000104
 8003388:	2000010c 	.word	0x2000010c
 800338c:	20000144 	.word	0x20000144
 8003390:	20000128 	.word	0x20000128
 8003394:	20000146 	.word	0x20000146
 8003398:	2000027c 	.word	0x2000027c
 800339c:	2000015c 	.word	0x2000015c
 80033a0:	2000024c 	.word	0x2000024c
 80033a4:	00000000 	.word	0x00000000

080033a8 <ADCPrepare>:
void ADCPrepare()
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count - 3; i++) // Sensor
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e00e      	b.n	80033d2 <ADCPrepare+0x2a>
	{
		AdcModule.Sensors[i] = AdcModule.Raw[i] * 1; // No conversion
 80033b4:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <ADCPrepare+0x140>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	441a      	add	r2, r3
 80033be:	4b4a      	ldr	r3, [pc, #296]	; (80034e8 <ADCPrepare+0x140>)
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	440b      	add	r3, r1
 80033c8:	8812      	ldrh	r2, [r2, #0]
 80033ca:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count - 3; i++) // Sensor
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	dded      	ble.n	80033b4 <ADCPrepare+0xc>
	}
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 3; i < SYSTEM_HARDWARE_ADC_Channel_Count - 2; i++) // Current 30A
 80033d8:	2305      	movs	r3, #5
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	e032      	b.n	8003444 <ADCPrepare+0x9c>
	{
		AdcModule.Amperage[i - (SYSTEM_HARDWARE_ADC_Channel_Count - 3)] = (AdcModule.Raw[i] * 3.3 / 4095) * 0.066;
 80033de:	4b42      	ldr	r3, [pc, #264]	; (80034e8 <ADCPrepare+0x140>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd f83e 	bl	800046c <__aeabi_i2d>
 80033f0:	a335      	add	r3, pc, #212	; (adr r3, 80034c8 <ADCPrepare+0x120>)
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	f7fd f8a3 	bl	8000540 <__aeabi_dmul>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	a333      	add	r3, pc, #204	; (adr r3, 80034d0 <ADCPrepare+0x128>)
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f7fd f9c4 	bl	8000794 <__aeabi_ddiv>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	a330      	add	r3, pc, #192	; (adr r3, 80034d8 <ADCPrepare+0x130>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f891 	bl	8000540 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <ADCPrepare+0x140>)
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003430:	3b05      	subs	r3, #5
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	18d4      	adds	r4, r2, r3
 8003436:	f7fd fa95 	bl	8000964 <__aeabi_d2f>
 800343a:	4603      	mov	r3, r0
 800343c:	6023      	str	r3, [r4, #0]
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 3; i < SYSTEM_HARDWARE_ADC_Channel_Count - 2; i++) // Current 30A
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3301      	adds	r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b05      	cmp	r3, #5
 8003448:	ddc9      	ble.n	80033de <ADCPrepare+0x36>
	}
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 2; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++) // Current 20A
 800344a:	2306      	movs	r3, #6
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	e032      	b.n	80034b6 <ADCPrepare+0x10e>
	{
		AdcModule.Amperage[i - (SYSTEM_HARDWARE_ADC_Channel_Count - 2)] = (AdcModule.Raw[i] * 3.3 / 4095) * 0.1;
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <ADCPrepare+0x140>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f805 	bl	800046c <__aeabi_i2d>
 8003462:	a319      	add	r3, pc, #100	; (adr r3, 80034c8 <ADCPrepare+0x120>)
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f7fd f86a 	bl	8000540 <__aeabi_dmul>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	a316      	add	r3, pc, #88	; (adr r3, 80034d0 <ADCPrepare+0x128>)
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f7fd f98b 	bl	8000794 <__aeabi_ddiv>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4610      	mov	r0, r2
 8003484:	4619      	mov	r1, r3
 8003486:	a316      	add	r3, pc, #88	; (adr r3, 80034e0 <ADCPrepare+0x138>)
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f7fd f858 	bl	8000540 <__aeabi_dmul>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <ADCPrepare+0x140>)
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034a2:	3b06      	subs	r3, #6
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	18d4      	adds	r4, r2, r3
 80034a8:	f7fd fa5c 	bl	8000964 <__aeabi_d2f>
 80034ac:	4603      	mov	r3, r0
 80034ae:	6023      	str	r3, [r4, #0]
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 2; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++) // Current 20A
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3301      	adds	r3, #1
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b07      	cmp	r3, #7
 80034ba:	ddc9      	ble.n	8003450 <ADCPrepare+0xa8>
	}
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd90      	pop	{r4, r7, pc}
 80034c6:	bf00      	nop
 80034c8:	66666666 	.word	0x66666666
 80034cc:	400a6666 	.word	0x400a6666
 80034d0:	00000000 	.word	0x00000000
 80034d4:	40affe00 	.word	0x40affe00
 80034d8:	4189374c 	.word	0x4189374c
 80034dc:	3fb0e560 	.word	0x3fb0e560
 80034e0:	9999999a 	.word	0x9999999a
 80034e4:	3fb99999 	.word	0x3fb99999
 80034e8:	2000019c 	.word	0x2000019c

080034ec <ReadAdcChanel>:
uint16_t ReadAdcChanel(uint8_t Channel)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	60da      	str	r2, [r3, #12]

	uint16_t RetVal;

	switch(Channel)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	2b07      	cmp	r3, #7
 8003508:	d82a      	bhi.n	8003560 <ReadAdcChanel+0x74>
 800350a:	a201      	add	r2, pc, #4	; (adr r2, 8003510 <ReadAdcChanel+0x24>)
 800350c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003510:	08003531 	.word	0x08003531
 8003514:	08003537 	.word	0x08003537
 8003518:	0800353d 	.word	0x0800353d
 800351c:	08003543 	.word	0x08003543
 8003520:	08003549 	.word	0x08003549
 8003524:	0800354f 	.word	0x0800354f
 8003528:	08003555 	.word	0x08003555
 800352c:	0800355b 	.word	0x0800355b
	{
	case 0:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_FL;
 8003530:	230b      	movs	r3, #11
 8003532:	60fb      	str	r3, [r7, #12]
		break;
 8003534:	e014      	b.n	8003560 <ReadAdcChanel+0x74>
	case 1:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_FR;
 8003536:	230c      	movs	r3, #12
 8003538:	60fb      	str	r3, [r7, #12]
		break;
 800353a:	e011      	b.n	8003560 <ReadAdcChanel+0x74>
	case 2:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_BL;
 800353c:	2301      	movs	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
		break;
 8003540:	e00e      	b.n	8003560 <ReadAdcChanel+0x74>
	case 3:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_BR;
 8003542:	230a      	movs	r3, #10
 8003544:	60fb      	str	r3, [r7, #12]
		break;
 8003546:	e00b      	b.n	8003560 <ReadAdcChanel+0x74>
	case 4:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_CN;
 8003548:	2302      	movs	r3, #2
 800354a:	60fb      	str	r3, [r7, #12]
		break;
 800354c:	e008      	b.n	8003560 <ReadAdcChanel+0x74>
	case 5:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_36;
 800354e:	2309      	movs	r3, #9
 8003550:	60fb      	str	r3, [r7, #12]
		break;
 8003552:	e005      	b.n	8003560 <ReadAdcChanel+0x74>
	case 6:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_12;
 8003554:	2308      	movs	r3, #8
 8003556:	60fb      	str	r3, [r7, #12]
		break;
 8003558:	e002      	b.n	8003560 <ReadAdcChanel+0x74>
	case 7:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_5;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
		break;
 800355e:	bf00      	nop
	}

	sConfig.Rank = 1;
 8003560:	2301      	movs	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(SYSTEM_HARDWARE_ADC, &sConfig) != HAL_OK)
 8003568:	f107 030c 	add.w	r3, r7, #12
 800356c:	4619      	mov	r1, r3
 800356e:	480e      	ldr	r0, [pc, #56]	; (80035a8 <ReadAdcChanel+0xbc>)
 8003570:	f002 faac 	bl	8005acc <HAL_ADC_ConfigChannel>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <ReadAdcChanel+0x92>
	{
		Error_Handler();
 800357a:	f001 fa4d 	bl	8004a18 <Error_Handler>
	}
	HAL_ADC_Start(SYSTEM_HARDWARE_ADC);
 800357e:	480a      	ldr	r0, [pc, #40]	; (80035a8 <ReadAdcChanel+0xbc>)
 8003580:	f002 f906 	bl	8005790 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(SYSTEM_HARDWARE_ADC, 1000);
 8003584:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003588:	4807      	ldr	r0, [pc, #28]	; (80035a8 <ReadAdcChanel+0xbc>)
 800358a:	f002 fa06 	bl	800599a <HAL_ADC_PollForConversion>
	RetVal = HAL_ADC_GetValue(SYSTEM_HARDWARE_ADC);
 800358e:	4806      	ldr	r0, [pc, #24]	; (80035a8 <ReadAdcChanel+0xbc>)
 8003590:	f002 fa8e 	bl	8005ab0 <HAL_ADC_GetValue>
 8003594:	4603      	mov	r3, r0
 8003596:	83fb      	strh	r3, [r7, #30]
	HAL_ADC_Stop(SYSTEM_HARDWARE_ADC);
 8003598:	4803      	ldr	r0, [pc, #12]	; (80035a8 <ReadAdcChanel+0xbc>)
 800359a:	f002 f9cb 	bl	8005934 <HAL_ADC_Stop>
	return RetVal;
 800359e:	8bfb      	ldrh	r3, [r7, #30]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200000bc 	.word	0x200000bc

080035ac <SerialLowControlLoop>:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
		HAL_Delay(period);
	}
}
void SerialLowControlLoop()
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
	SerialControlWheelsRequest.ControlMode = 0;
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <SerialLowControlLoop+0x40>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
	SerialControlWheelsRequest.ParameterNumber = 0;
 80035b6:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <SerialLowControlLoop+0x40>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	705a      	strb	r2, [r3, #1]
	SerialControlWheelsRequest.WheelLeft = BTControl.Front;
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <SerialLowControlLoop+0x44>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <SerialLowControlLoop+0x40>)
 80035c2:	3306      	adds	r3, #6
 80035c4:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight = BTControl.Turn;
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <SerialLowControlLoop+0x44>)
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <SerialLowControlLoop+0x40>)
 80035cc:	330a      	adds	r3, #10
 80035ce:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.CR=13;
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <SerialLowControlLoop+0x40>)
 80035d2:	220d      	movs	r2, #13
 80035d4:	739a      	strb	r2, [r3, #14]
	SerialControlWheelsRequest.LF=10;
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <SerialLowControlLoop+0x40>)
 80035d8:	220a      	movs	r2, #10
 80035da:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsRequest.Buffer, WHEELS_REQUEST_SIZE);
 80035dc:	2210      	movs	r2, #16
 80035de:	4903      	ldr	r1, [pc, #12]	; (80035ec <SerialLowControlLoop+0x40>)
 80035e0:	4804      	ldr	r0, [pc, #16]	; (80035f4 <SerialLowControlLoop+0x48>)
 80035e2:	f005 fbe1 	bl	8008da8 <HAL_UART_Transmit_DMA>
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000160 	.word	0x20000160
 80035f0:	20000110 	.word	0x20000110
 80035f4:	200006fc 	.word	0x200006fc

080035f8 <ImuAccelUpdate>:
void ImuAccelUpdate()
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	ed2d 8b02 	vpush	{d8}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
	axises NewData;
	icm20948_accel_read(&NewData);
 8003602:	1d3b      	adds	r3, r7, #4
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe fe63 	bl	80022d0 <icm20948_accel_read>

	ResAccel.x += roundf((((NewData.x / 16384) - ResAccel.x) * SYSTEM_IMU_ACCEL_FILTER) * 100) / 100;
 800360a:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <ImuAccelUpdate+0x188>)
 800360c:	ed93 8a00 	vldr	s16, [r3]
 8003610:	edd7 7a01 	vldr	s15, [r7, #4]
 8003614:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8003784 <ImuAccelUpdate+0x18c>
 8003618:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800361c:	4b58      	ldr	r3, [pc, #352]	; (8003780 <ImuAccelUpdate+0x188>)
 800361e:	edd3 7a00 	vldr	s15, [r3]
 8003622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003626:	ee17 0a90 	vmov	r0, s15
 800362a:	f7fc ff31 	bl	8000490 <__aeabi_f2d>
 800362e:	a352      	add	r3, pc, #328	; (adr r3, 8003778 <ImuAccelUpdate+0x180>)
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f7fc ff84 	bl	8000540 <__aeabi_dmul>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4610      	mov	r0, r2
 800363e:	4619      	mov	r1, r3
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <ImuAccelUpdate+0x190>)
 8003646:	f7fc ff7b 	bl	8000540 <__aeabi_dmul>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	f7fd f987 	bl	8000964 <__aeabi_d2f>
 8003656:	4603      	mov	r3, r0
 8003658:	ee00 3a10 	vmov	s0, r3
 800365c:	f006 fc8c 	bl	8009f78 <roundf>
 8003660:	eeb0 7a40 	vmov.f32	s14, s0
 8003664:	eddf 6a49 	vldr	s13, [pc, #292]	; 800378c <ImuAccelUpdate+0x194>
 8003668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800366c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003670:	4b43      	ldr	r3, [pc, #268]	; (8003780 <ImuAccelUpdate+0x188>)
 8003672:	edc3 7a00 	vstr	s15, [r3]
	ResAccel.y += roundf((((NewData.y / 16384) - ResAccel.y) * SYSTEM_IMU_ACCEL_FILTER) * 100) / 100;
 8003676:	4b42      	ldr	r3, [pc, #264]	; (8003780 <ImuAccelUpdate+0x188>)
 8003678:	ed93 8a01 	vldr	s16, [r3, #4]
 800367c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003680:	eddf 6a40 	vldr	s13, [pc, #256]	; 8003784 <ImuAccelUpdate+0x18c>
 8003684:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003688:	4b3d      	ldr	r3, [pc, #244]	; (8003780 <ImuAccelUpdate+0x188>)
 800368a:	edd3 7a01 	vldr	s15, [r3, #4]
 800368e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003692:	ee17 0a90 	vmov	r0, s15
 8003696:	f7fc fefb 	bl	8000490 <__aeabi_f2d>
 800369a:	a337      	add	r3, pc, #220	; (adr r3, 8003778 <ImuAccelUpdate+0x180>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f7fc ff4e 	bl	8000540 <__aeabi_dmul>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	4b35      	ldr	r3, [pc, #212]	; (8003788 <ImuAccelUpdate+0x190>)
 80036b2:	f7fc ff45 	bl	8000540 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	f7fd f951 	bl	8000964 <__aeabi_d2f>
 80036c2:	4603      	mov	r3, r0
 80036c4:	ee00 3a10 	vmov	s0, r3
 80036c8:	f006 fc56 	bl	8009f78 <roundf>
 80036cc:	eeb0 7a40 	vmov.f32	s14, s0
 80036d0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800378c <ImuAccelUpdate+0x194>
 80036d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036d8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80036dc:	4b28      	ldr	r3, [pc, #160]	; (8003780 <ImuAccelUpdate+0x188>)
 80036de:	edc3 7a01 	vstr	s15, [r3, #4]
	ResAccel.z += roundf((((NewData.z / 16384) - ResAccel.z) * SYSTEM_IMU_ACCEL_FILTER) * 100) / 100;
 80036e2:	4b27      	ldr	r3, [pc, #156]	; (8003780 <ImuAccelUpdate+0x188>)
 80036e4:	ed93 8a02 	vldr	s16, [r3, #8]
 80036e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036ec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003784 <ImuAccelUpdate+0x18c>
 80036f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036f4:	4b22      	ldr	r3, [pc, #136]	; (8003780 <ImuAccelUpdate+0x188>)
 80036f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80036fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036fe:	ee17 0a90 	vmov	r0, s15
 8003702:	f7fc fec5 	bl	8000490 <__aeabi_f2d>
 8003706:	a31c      	add	r3, pc, #112	; (adr r3, 8003778 <ImuAccelUpdate+0x180>)
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f7fc ff18 	bl	8000540 <__aeabi_dmul>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4610      	mov	r0, r2
 8003716:	4619      	mov	r1, r3
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <ImuAccelUpdate+0x190>)
 800371e:	f7fc ff0f 	bl	8000540 <__aeabi_dmul>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	f7fd f91b 	bl	8000964 <__aeabi_d2f>
 800372e:	4603      	mov	r3, r0
 8003730:	ee00 3a10 	vmov	s0, r3
 8003734:	f006 fc20 	bl	8009f78 <roundf>
 8003738:	eeb0 7a40 	vmov.f32	s14, s0
 800373c:	eddf 6a13 	vldr	s13, [pc, #76]	; 800378c <ImuAccelUpdate+0x194>
 8003740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003744:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <ImuAccelUpdate+0x188>)
 800374a:	edc3 7a02 	vstr	s15, [r3, #8]

	DebugImuAccX = ResAccel.x;
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <ImuAccelUpdate+0x188>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <ImuAccelUpdate+0x198>)
 8003754:	6013      	str	r3, [r2, #0]
	DebugImuAccY = ResAccel.y;
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <ImuAccelUpdate+0x188>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <ImuAccelUpdate+0x19c>)
 800375c:	6013      	str	r3, [r2, #0]
	DebugImuAccZ = ResAccel.z;
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <ImuAccelUpdate+0x188>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <ImuAccelUpdate+0x1a0>)
 8003764:	6013      	str	r3, [r2, #0]
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	ecbd 8b02 	vpop	{d8}
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	f3af 8000 	nop.w
 8003778:	9999999a 	.word	0x9999999a
 800377c:	3fb99999 	.word	0x3fb99999
 8003780:	200001e0 	.word	0x200001e0
 8003784:	46800000 	.word	0x46800000
 8003788:	40590000 	.word	0x40590000
 800378c:	42c80000 	.word	0x42c80000
 8003790:	200001a8 	.word	0x200001a8
 8003794:	20000208 	.word	0x20000208
 8003798:	20000124 	.word	0x20000124
 800379c:	00000000 	.word	0x00000000

080037a0 <ImuGyroUpdate>:
void ImuGyroUpdate()
{
 80037a0:	b5b0      	push	{r4, r5, r7, lr}
 80037a2:	ed2d 8b02 	vpush	{d8}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
	axises NewData;
	icm20948_gyro_read(&NewData);
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe fd4c 	bl	800224a <icm20948_gyro_read>

	ResGyro.x += roundf((((NewData.x / 16.4) - ResGyro.x) * SYSTEM_IMU_GYRO_FILTER) * 100) / 100;
 80037b2:	4b71      	ldr	r3, [pc, #452]	; (8003978 <ImuGyroUpdate+0x1d8>)
 80037b4:	ed93 8a00 	vldr	s16, [r3]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fc fe68 	bl	8000490 <__aeabi_f2d>
 80037c0:	a369      	add	r3, pc, #420	; (adr r3, 8003968 <ImuGyroUpdate+0x1c8>)
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f7fc ffe5 	bl	8000794 <__aeabi_ddiv>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4614      	mov	r4, r2
 80037d0:	461d      	mov	r5, r3
 80037d2:	4b69      	ldr	r3, [pc, #420]	; (8003978 <ImuGyroUpdate+0x1d8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc fe5a 	bl	8000490 <__aeabi_f2d>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4620      	mov	r0, r4
 80037e2:	4629      	mov	r1, r5
 80037e4:	f7fc fcf4 	bl	80001d0 <__aeabi_dsub>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	a35f      	add	r3, pc, #380	; (adr r3, 8003970 <ImuGyroUpdate+0x1d0>)
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	f7fc fea3 	bl	8000540 <__aeabi_dmul>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	4b5d      	ldr	r3, [pc, #372]	; (800397c <ImuGyroUpdate+0x1dc>)
 8003808:	f7fc fe9a 	bl	8000540 <__aeabi_dmul>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4610      	mov	r0, r2
 8003812:	4619      	mov	r1, r3
 8003814:	f7fd f8a6 	bl	8000964 <__aeabi_d2f>
 8003818:	4603      	mov	r3, r0
 800381a:	ee00 3a10 	vmov	s0, r3
 800381e:	f006 fbab 	bl	8009f78 <roundf>
 8003822:	eeb0 7a40 	vmov.f32	s14, s0
 8003826:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003980 <ImuGyroUpdate+0x1e0>
 800382a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800382e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003832:	4b51      	ldr	r3, [pc, #324]	; (8003978 <ImuGyroUpdate+0x1d8>)
 8003834:	edc3 7a00 	vstr	s15, [r3]
	ResGyro.y += roundf((((NewData.y / 16.4) - ResGyro.y) * SYSTEM_IMU_GYRO_FILTER) * 100) / 100;
 8003838:	4b4f      	ldr	r3, [pc, #316]	; (8003978 <ImuGyroUpdate+0x1d8>)
 800383a:	ed93 8a01 	vldr	s16, [r3, #4]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fc fe25 	bl	8000490 <__aeabi_f2d>
 8003846:	a348      	add	r3, pc, #288	; (adr r3, 8003968 <ImuGyroUpdate+0x1c8>)
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	f7fc ffa2 	bl	8000794 <__aeabi_ddiv>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4614      	mov	r4, r2
 8003856:	461d      	mov	r5, r3
 8003858:	4b47      	ldr	r3, [pc, #284]	; (8003978 <ImuGyroUpdate+0x1d8>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4618      	mov	r0, r3
 800385e:	f7fc fe17 	bl	8000490 <__aeabi_f2d>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4620      	mov	r0, r4
 8003868:	4629      	mov	r1, r5
 800386a:	f7fc fcb1 	bl	80001d0 <__aeabi_dsub>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	a33e      	add	r3, pc, #248	; (adr r3, 8003970 <ImuGyroUpdate+0x1d0>)
 8003878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387c:	f7fc fe60 	bl	8000540 <__aeabi_dmul>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	4b3b      	ldr	r3, [pc, #236]	; (800397c <ImuGyroUpdate+0x1dc>)
 800388e:	f7fc fe57 	bl	8000540 <__aeabi_dmul>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4610      	mov	r0, r2
 8003898:	4619      	mov	r1, r3
 800389a:	f7fd f863 	bl	8000964 <__aeabi_d2f>
 800389e:	4603      	mov	r3, r0
 80038a0:	ee00 3a10 	vmov	s0, r3
 80038a4:	f006 fb68 	bl	8009f78 <roundf>
 80038a8:	eeb0 7a40 	vmov.f32	s14, s0
 80038ac:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003980 <ImuGyroUpdate+0x1e0>
 80038b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038b4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80038b8:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <ImuGyroUpdate+0x1d8>)
 80038ba:	edc3 7a01 	vstr	s15, [r3, #4]
	ResGyro.z += roundf((((NewData.z / 16.4) - ResGyro.z) * SYSTEM_IMU_GYRO_FILTER) * 100) / 100;
 80038be:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <ImuGyroUpdate+0x1d8>)
 80038c0:	ed93 8a02 	vldr	s16, [r3, #8]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fc fde2 	bl	8000490 <__aeabi_f2d>
 80038cc:	a326      	add	r3, pc, #152	; (adr r3, 8003968 <ImuGyroUpdate+0x1c8>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f7fc ff5f 	bl	8000794 <__aeabi_ddiv>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4614      	mov	r4, r2
 80038dc:	461d      	mov	r5, r3
 80038de:	4b26      	ldr	r3, [pc, #152]	; (8003978 <ImuGyroUpdate+0x1d8>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fdd4 	bl	8000490 <__aeabi_f2d>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4620      	mov	r0, r4
 80038ee:	4629      	mov	r1, r5
 80038f0:	f7fc fc6e 	bl	80001d0 <__aeabi_dsub>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	a31c      	add	r3, pc, #112	; (adr r3, 8003970 <ImuGyroUpdate+0x1d0>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f7fc fe1d 	bl	8000540 <__aeabi_dmul>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	4b1a      	ldr	r3, [pc, #104]	; (800397c <ImuGyroUpdate+0x1dc>)
 8003914:	f7fc fe14 	bl	8000540 <__aeabi_dmul>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	f7fd f820 	bl	8000964 <__aeabi_d2f>
 8003924:	4603      	mov	r3, r0
 8003926:	ee00 3a10 	vmov	s0, r3
 800392a:	f006 fb25 	bl	8009f78 <roundf>
 800392e:	eeb0 7a40 	vmov.f32	s14, s0
 8003932:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003980 <ImuGyroUpdate+0x1e0>
 8003936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800393a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800393e:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <ImuGyroUpdate+0x1d8>)
 8003940:	edc3 7a02 	vstr	s15, [r3, #8]

	DebugImuGyrX = ResGyro.x;
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <ImuGyroUpdate+0x1d8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a0e      	ldr	r2, [pc, #56]	; (8003984 <ImuGyroUpdate+0x1e4>)
 800394a:	6013      	str	r3, [r2, #0]
	DebugImuGyrY = ResGyro.y;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <ImuGyroUpdate+0x1d8>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4a0d      	ldr	r2, [pc, #52]	; (8003988 <ImuGyroUpdate+0x1e8>)
 8003952:	6013      	str	r3, [r2, #0]
	DebugImuGyrZ = ResGyro.z;
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <ImuGyroUpdate+0x1d8>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a0c      	ldr	r2, [pc, #48]	; (800398c <ImuGyroUpdate+0x1ec>)
 800395a:	6013      	str	r3, [r2, #0]
}
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	ecbd 8b02 	vpop	{d8}
 8003966:	bdb0      	pop	{r4, r5, r7, pc}
 8003968:	66666666 	.word	0x66666666
 800396c:	40306666 	.word	0x40306666
 8003970:	9999999a 	.word	0x9999999a
 8003974:	3fb99999 	.word	0x3fb99999
 8003978:	2000012c 	.word	0x2000012c
 800397c:	40590000 	.word	0x40590000
 8003980:	42c80000 	.word	0x42c80000
 8003984:	20000120 	.word	0x20000120
 8003988:	20000248 	.word	0x20000248
 800398c:	20000214 	.word	0x20000214

08003990 <ImuMagUpdate>:
void ImuMagUpdate()
{
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	ed2d 8b02 	vpush	{d8}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
	axises NewData;
	ak09916_mag_read(&NewData);
 800399a:	1d3b      	adds	r3, r7, #4
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe fcda 	bl	8002356 <ak09916_mag_read>

	ResMag.x += roundf((((NewData.x * 0.15) - ResMag.x) * SYSTEM_IMU_MAG_FILTER) * 100) / 100;
 80039a2:	4b71      	ldr	r3, [pc, #452]	; (8003b68 <ImuMagUpdate+0x1d8>)
 80039a4:	ed93 8a00 	vldr	s16, [r3]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fc fd70 	bl	8000490 <__aeabi_f2d>
 80039b0:	a369      	add	r3, pc, #420	; (adr r3, 8003b58 <ImuMagUpdate+0x1c8>)
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f7fc fdc3 	bl	8000540 <__aeabi_dmul>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4614      	mov	r4, r2
 80039c0:	461d      	mov	r5, r3
 80039c2:	4b69      	ldr	r3, [pc, #420]	; (8003b68 <ImuMagUpdate+0x1d8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fc fd62 	bl	8000490 <__aeabi_f2d>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4620      	mov	r0, r4
 80039d2:	4629      	mov	r1, r5
 80039d4:	f7fc fbfc 	bl	80001d0 <__aeabi_dsub>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4610      	mov	r0, r2
 80039de:	4619      	mov	r1, r3
 80039e0:	a35f      	add	r3, pc, #380	; (adr r3, 8003b60 <ImuMagUpdate+0x1d0>)
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f7fc fdab 	bl	8000540 <__aeabi_dmul>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	4b5d      	ldr	r3, [pc, #372]	; (8003b6c <ImuMagUpdate+0x1dc>)
 80039f8:	f7fc fda2 	bl	8000540 <__aeabi_dmul>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	f7fc ffae 	bl	8000964 <__aeabi_d2f>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	ee00 3a10 	vmov	s0, r3
 8003a0e:	f006 fab3 	bl	8009f78 <roundf>
 8003a12:	eeb0 7a40 	vmov.f32	s14, s0
 8003a16:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003b70 <ImuMagUpdate+0x1e0>
 8003a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a1e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003a22:	4b51      	ldr	r3, [pc, #324]	; (8003b68 <ImuMagUpdate+0x1d8>)
 8003a24:	edc3 7a00 	vstr	s15, [r3]
	ResMag.y += roundf((((NewData.y * 0.15) - ResMag.y) * SYSTEM_IMU_MAG_FILTER) * 100) / 100;
 8003a28:	4b4f      	ldr	r3, [pc, #316]	; (8003b68 <ImuMagUpdate+0x1d8>)
 8003a2a:	ed93 8a01 	vldr	s16, [r3, #4]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fc fd2d 	bl	8000490 <__aeabi_f2d>
 8003a36:	a348      	add	r3, pc, #288	; (adr r3, 8003b58 <ImuMagUpdate+0x1c8>)
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	f7fc fd80 	bl	8000540 <__aeabi_dmul>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4614      	mov	r4, r2
 8003a46:	461d      	mov	r5, r3
 8003a48:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <ImuMagUpdate+0x1d8>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fc fd1f 	bl	8000490 <__aeabi_f2d>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4620      	mov	r0, r4
 8003a58:	4629      	mov	r1, r5
 8003a5a:	f7fc fbb9 	bl	80001d0 <__aeabi_dsub>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	a33e      	add	r3, pc, #248	; (adr r3, 8003b60 <ImuMagUpdate+0x1d0>)
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f7fc fd68 	bl	8000540 <__aeabi_dmul>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <ImuMagUpdate+0x1dc>)
 8003a7e:	f7fc fd5f 	bl	8000540 <__aeabi_dmul>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4610      	mov	r0, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f7fc ff6b 	bl	8000964 <__aeabi_d2f>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	ee00 3a10 	vmov	s0, r3
 8003a94:	f006 fa70 	bl	8009f78 <roundf>
 8003a98:	eeb0 7a40 	vmov.f32	s14, s0
 8003a9c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003b70 <ImuMagUpdate+0x1e0>
 8003aa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aa4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003aa8:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <ImuMagUpdate+0x1d8>)
 8003aaa:	edc3 7a01 	vstr	s15, [r3, #4]
	ResMag.z += roundf((((NewData.z * 0.15) - ResMag.z) * SYSTEM_IMU_MAG_FILTER) * 100) / 100;
 8003aae:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <ImuMagUpdate+0x1d8>)
 8003ab0:	ed93 8a02 	vldr	s16, [r3, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fc fcea 	bl	8000490 <__aeabi_f2d>
 8003abc:	a326      	add	r3, pc, #152	; (adr r3, 8003b58 <ImuMagUpdate+0x1c8>)
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	f7fc fd3d 	bl	8000540 <__aeabi_dmul>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4614      	mov	r4, r2
 8003acc:	461d      	mov	r5, r3
 8003ace:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <ImuMagUpdate+0x1d8>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fc fcdc 	bl	8000490 <__aeabi_f2d>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4620      	mov	r0, r4
 8003ade:	4629      	mov	r1, r5
 8003ae0:	f7fc fb76 	bl	80001d0 <__aeabi_dsub>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	a31c      	add	r3, pc, #112	; (adr r3, 8003b60 <ImuMagUpdate+0x1d0>)
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f7fc fd25 	bl	8000540 <__aeabi_dmul>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <ImuMagUpdate+0x1dc>)
 8003b04:	f7fc fd1c 	bl	8000540 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f7fc ff28 	bl	8000964 <__aeabi_d2f>
 8003b14:	4603      	mov	r3, r0
 8003b16:	ee00 3a10 	vmov	s0, r3
 8003b1a:	f006 fa2d 	bl	8009f78 <roundf>
 8003b1e:	eeb0 7a40 	vmov.f32	s14, s0
 8003b22:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003b70 <ImuMagUpdate+0x1e0>
 8003b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b2a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <ImuMagUpdate+0x1d8>)
 8003b30:	edc3 7a02 	vstr	s15, [r3, #8]

	DebugImuMagX = ResMag.x;
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <ImuMagUpdate+0x1d8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <ImuMagUpdate+0x1e4>)
 8003b3a:	6013      	str	r3, [r2, #0]
	DebugImuMagY = ResMag.y;
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <ImuMagUpdate+0x1d8>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <ImuMagUpdate+0x1e8>)
 8003b42:	6013      	str	r3, [r2, #0]
	DebugImuMagZ = ResMag.z;
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <ImuMagUpdate+0x1d8>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <ImuMagUpdate+0x1ec>)
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	ecbd 8b02 	vpop	{d8}
 8003b56:	bdb0      	pop	{r4, r5, r7, pc}
 8003b58:	33333333 	.word	0x33333333
 8003b5c:	3fc33333 	.word	0x3fc33333
 8003b60:	9999999a 	.word	0x9999999a
 8003b64:	3fb99999 	.word	0x3fb99999
 8003b68:	20000230 	.word	0x20000230
 8003b6c:	40590000 	.word	0x40590000
 8003b70:	42c80000 	.word	0x42c80000
 8003b74:	20000210 	.word	0x20000210
 8003b78:	20000290 	.word	0x20000290
 8003b7c:	2000028c 	.word	0x2000028c

08003b80 <ImuInit>:
void ImuInit()
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	gyroscopeSensitivity.axis.x = 1.0f;
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <ImuInit+0x70>)
 8003b86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b8a:	601a      	str	r2, [r3, #0]
	gyroscopeSensitivity.axis.y = 1.0f;
 8003b8c:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <ImuInit+0x70>)
 8003b8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b92:	605a      	str	r2, [r3, #4]
	gyroscopeSensitivity.axis.z = 1.0f;
 8003b94:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <ImuInit+0x70>)
 8003b96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b9a:	609a      	str	r2, [r3, #8]

	accelerometerSensitivity.axis.x = 1.0f;
 8003b9c:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <ImuInit+0x74>)
 8003b9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ba2:	601a      	str	r2, [r3, #0]
	accelerometerSensitivity.axis.y = 1.0f;
 8003ba4:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <ImuInit+0x74>)
 8003ba6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003baa:	605a      	str	r2, [r3, #4]
	accelerometerSensitivity.axis.z = 1.0f;
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <ImuInit+0x74>)
 8003bae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003bb2:	609a      	str	r2, [r3, #8]

	hardIronBias.axis.x = 0.0f;
 8003bb4:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <ImuInit+0x78>)
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
	hardIronBias.axis.y = 0.0f;
 8003bbc:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <ImuInit+0x78>)
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	605a      	str	r2, [r3, #4]
	hardIronBias.axis.z = 0.0f;
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <ImuInit+0x78>)
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	609a      	str	r2, [r3, #8]

	FusionBiasInitialise(&fusionBias, 0.5f, samplePeriod);
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <ImuInit+0x7c>)
 8003bce:	edd3 7a00 	vldr	s15, [r3]
 8003bd2:	eef0 0a67 	vmov.f32	s1, s15
 8003bd6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003bda:	4809      	ldr	r0, [pc, #36]	; (8003c00 <ImuInit+0x80>)
 8003bdc:	f7fe f99c 	bl	8001f18 <FusionBiasInitialise>
	FusionAhrsInitialise(&fusionAhrs, 0.5f);
 8003be0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003be4:	4807      	ldr	r0, [pc, #28]	; (8003c04 <ImuInit+0x84>)
 8003be6:	f7fd f889 	bl	8000cfc <FusionAhrsInitialise>
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000026c 	.word	0x2000026c
 8003bf4:	200002b0 	.word	0x200002b0
 8003bf8:	20000280 	.word	0x20000280
 8003bfc:	20000000 	.word	0x20000000
 8003c00:	200001ec 	.word	0x200001ec
 8003c04:	200001ac 	.word	0x200001ac

08003c08 <ImuUpdate>:
void ImuUpdate()
{
 8003c08:	b5b0      	push	{r4, r5, r7, lr}
 8003c0a:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
 8003c0e:	af00      	add	r7, sp, #0
	uncalibratedGyroscope.axis.x = ResGyro.x;
 8003c10:	4bd3      	ldr	r3, [pc, #844]	; (8003f60 <ImuUpdate+0x358>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4ad3      	ldr	r2, [pc, #844]	; (8003f64 <ImuUpdate+0x35c>)
 8003c16:	6013      	str	r3, [r2, #0]
	uncalibratedGyroscope.axis.y = ResGyro.y;
 8003c18:	4bd1      	ldr	r3, [pc, #836]	; (8003f60 <ImuUpdate+0x358>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4ad1      	ldr	r2, [pc, #836]	; (8003f64 <ImuUpdate+0x35c>)
 8003c1e:	6053      	str	r3, [r2, #4]
	uncalibratedGyroscope.axis.z = ResGyro.z;
 8003c20:	4bcf      	ldr	r3, [pc, #828]	; (8003f60 <ImuUpdate+0x358>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4acf      	ldr	r2, [pc, #828]	; (8003f64 <ImuUpdate+0x35c>)
 8003c26:	6093      	str	r3, [r2, #8]

	uncalibratedAccelerometer.axis.x = ResAccel.x;
 8003c28:	4bcf      	ldr	r3, [pc, #828]	; (8003f68 <ImuUpdate+0x360>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4acf      	ldr	r2, [pc, #828]	; (8003f6c <ImuUpdate+0x364>)
 8003c2e:	6013      	str	r3, [r2, #0]
	uncalibratedAccelerometer.axis.y = ResAccel.y;
 8003c30:	4bcd      	ldr	r3, [pc, #820]	; (8003f68 <ImuUpdate+0x360>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4acd      	ldr	r2, [pc, #820]	; (8003f6c <ImuUpdate+0x364>)
 8003c36:	6053      	str	r3, [r2, #4]
	uncalibratedAccelerometer.axis.z = ResAccel.z;
 8003c38:	4bcb      	ldr	r3, [pc, #812]	; (8003f68 <ImuUpdate+0x360>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4acb      	ldr	r2, [pc, #812]	; (8003f6c <ImuUpdate+0x364>)
 8003c3e:	6093      	str	r3, [r2, #8]

	uncalibratedMagnetometer.axis.x = ResMag.x;
 8003c40:	4bcb      	ldr	r3, [pc, #812]	; (8003f70 <ImuUpdate+0x368>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4acb      	ldr	r2, [pc, #812]	; (8003f74 <ImuUpdate+0x36c>)
 8003c46:	6013      	str	r3, [r2, #0]
	uncalibratedMagnetometer.axis.y = ResMag.y;
 8003c48:	4bc9      	ldr	r3, [pc, #804]	; (8003f70 <ImuUpdate+0x368>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4ac9      	ldr	r2, [pc, #804]	; (8003f74 <ImuUpdate+0x36c>)
 8003c4e:	6053      	str	r3, [r2, #4]
	uncalibratedMagnetometer.axis.z = ResMag.z;
 8003c50:	4bc7      	ldr	r3, [pc, #796]	; (8003f70 <ImuUpdate+0x368>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4ac7      	ldr	r2, [pc, #796]	; (8003f74 <ImuUpdate+0x36c>)
 8003c56:	6093      	str	r3, [r2, #8]

	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8003c58:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003c5c:	4ac6      	ldr	r2, [pc, #792]	; (8003f78 <ImuUpdate+0x370>)
 8003c5e:	461c      	mov	r4, r3
 8003c60:	4615      	mov	r5, r2
 8003c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	6023      	str	r3, [r4, #0]
 8003c6e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003c90:	4ab4      	ldr	r2, [pc, #720]	; (8003f64 <ImuUpdate+0x35c>)
 8003c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c98:	463a      	mov	r2, r7
 8003c9a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8003c9e:	4614      	mov	r4, r2
 8003ca0:	461d      	mov	r5, r3
 8003ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003caa:	682b      	ldr	r3, [r5, #0]
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8003cb2:	4ab2      	ldr	r2, [pc, #712]	; (8003f7c <ImuUpdate+0x374>)
 8003cb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003cba:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003cbe:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8003cc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003cc8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003ccc:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8003cd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003cd6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8003cda:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8003cde:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ce0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8003ce4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003ce8:	ed93 7a00 	vldr	s14, [r3]
 8003cec:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8003cf0:	edd3 7a00 	vldr	s15, [r3]
 8003cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8003cfc:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8003d00:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003d04:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d08:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8003d0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d14:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8003d18:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8003d1c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003d20:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d24:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8003d28:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d30:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8003d34:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003d38:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8003d3c:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003d40:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d46:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003d4a:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8003d4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d54:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003d58:	461c      	mov	r4, r3
 8003d5a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d66:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003d6a:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8003d6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8003d74:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003d78:	ed93 7a00 	vldr	s14, [r3]
 8003d7c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003d80:	edd3 7a00 	vldr	s15, [r3]
 8003d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d88:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003d8c:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8003d90:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003d94:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d98:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003d9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003da8:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8003dac:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003db0:	ed93 7a02 	vldr	s14, [r3, #8]
 8003db4:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003db8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003dc4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003dc8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003dcc:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8003dd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003dd6:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8003dda:	f507 7245 	add.w	r2, r7, #788	; 0x314
 8003dde:	ca07      	ldmia	r2, {r0, r1, r2}
 8003de0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003de4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003de8:	463b      	mov	r3, r7
 8003dea:	4614      	mov	r4, r2
 8003dec:	461d      	mov	r5, r3
 8003dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003df6:	682b      	ldr	r3, [r5, #0]
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003dfe:	461c      	mov	r4, r3
 8003e00:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8003e04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 8003e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e10:	ed93 7a00 	vldr	s14, [r3]
 8003e14:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003e18:	edd3 7a00 	vldr	s15, [r3]
 8003e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e24:	edd3 6a01 	vldr	s13, [r3, #4]
 8003e28:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003e2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e3c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003e40:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003e44:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003e54:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8003e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e5c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e60:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003e64:	edd3 7a00 	vldr	s15, [r3]
 8003e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e70:	edd3 6a04 	vldr	s13, [r3, #16]
 8003e74:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003e78:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e88:	edd3 6a05 	vldr	s13, [r3, #20]
 8003e8c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003e90:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003ea0:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea8:	ed93 7a06 	vldr	s14, [r3, #24]
 8003eac:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003eb0:	edd3 7a00 	vldr	s15, [r3]
 8003eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ebc:	edd3 6a07 	vldr	s13, [r3, #28]
 8003ec0:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003ec4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed4:	edd3 6a08 	vldr	s13, [r3, #32]
 8003ed8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003edc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003eec:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003ef0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8003ef4:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8003ef8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003efa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003efe:	f507 7351 	add.w	r3, r7, #836	; 0x344
 8003f02:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8003f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 8003f0c:	bf00      	nop
 8003f0e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003f12:	f507 7251 	add.w	r2, r7, #836	; 0x344
 8003f16:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 8003f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <ImuUpdate+0x370>)
 8003f22:	461c      	mov	r4, r3
 8003f24:	4615      	mov	r5, r2
 8003f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f2e:	682b      	ldr	r3, [r5, #0]
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003f54:	4a05      	ldr	r2, [pc, #20]	; (8003f6c <ImuUpdate+0x364>)
 8003f56:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003f5c:	463a      	mov	r2, r7
 8003f5e:	e00f      	b.n	8003f80 <ImuUpdate+0x378>
 8003f60:	2000012c 	.word	0x2000012c
 8003f64:	200002a4 	.word	0x200002a4
 8003f68:	200001e0 	.word	0x200001e0
 8003f6c:	2000023c 	.word	0x2000023c
 8003f70:	20000230 	.word	0x20000230
 8003f74:	20000294 	.word	0x20000294
 8003f78:	0800a580 	.word	0x0800a580
 8003f7c:	2000026c 	.word	0x2000026c
 8003f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f84:	4614      	mov	r4, r2
 8003f86:	461d      	mov	r5, r3
 8003f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	6023      	str	r3, [r4, #0]
 8003f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f98:	4ae8      	ldr	r2, [pc, #928]	; (800433c <ImuUpdate+0x734>)
 8003f9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003fa0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003fa4:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8003fa8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003faa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003fae:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003fb2:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8003fb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003fbc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003fc0:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8003fc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8003fca:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003fce:	ed93 7a00 	vldr	s14, [r3]
 8003fd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003fd6:	edd3 7a00 	vldr	s15, [r3]
 8003fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fde:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003fe2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8003fe6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003fea:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ff2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ffa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003ffe:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8004002:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004006:	ed93 7a02 	vldr	s14, [r3, #8]
 800400a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800400e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004016:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800401a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800401e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004022:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8004026:	ca07      	ldmia	r2, {r0, r1, r2}
 8004028:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800402c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004030:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8004034:	ca07      	ldmia	r2, {r0, r1, r2}
 8004036:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800403a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800403e:	461c      	mov	r4, r3
 8004040:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004044:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004048:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800404c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004050:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004054:	ca07      	ldmia	r2, {r0, r1, r2}
 8004056:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800405a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800405e:	ed93 7a00 	vldr	s14, [r3]
 8004062:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004066:	edd3 7a00 	vldr	s15, [r3]
 800406a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004072:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8004076:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800407a:	ed93 7a01 	vldr	s14, [r3, #4]
 800407e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004082:	edd3 7a01 	vldr	s15, [r3, #4]
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800408e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8004092:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004096:	ed93 7a02 	vldr	s14, [r3, #8]
 800409a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800409e:	edd3 7a02 	vldr	s15, [r3, #8]
 80040a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040aa:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80040ae:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80040b2:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80040b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80040b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80040bc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80040c0:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 80040c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80040c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80040ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80040ce:	463b      	mov	r3, r7
 80040d0:	4614      	mov	r4, r2
 80040d2:	461d      	mov	r5, r3
 80040d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80040e4:	461c      	mov	r4, r3
 80040e6:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80040ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 80040f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f6:	ed93 7a00 	vldr	s14, [r3]
 80040fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80040fe:	edd3 7a00 	vldr	s15, [r3]
 8004102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800410a:	edd3 6a01 	vldr	s13, [r3, #4]
 800410e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004112:	edd3 7a01 	vldr	s15, [r3, #4]
 8004116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800411a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800411e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004122:	edd3 6a02 	vldr	s13, [r3, #8]
 8004126:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800412a:	edd3 7a02 	vldr	s15, [r3, #8]
 800412e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004136:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800413a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800413e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004142:	ed93 7a03 	vldr	s14, [r3, #12]
 8004146:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800414a:	edd3 7a00 	vldr	s15, [r3]
 800414e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004156:	edd3 6a04 	vldr	s13, [r3, #16]
 800415a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800415e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004166:	ee37 7a27 	vadd.f32	s14, s14, s15
 800416a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800416e:	edd3 6a05 	vldr	s13, [r3, #20]
 8004172:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004176:	edd3 7a02 	vldr	s15, [r3, #8]
 800417a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800417e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004182:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004186:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800418a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800418e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004192:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004196:	edd3 7a00 	vldr	s15, [r3]
 800419a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800419e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a2:	edd3 6a07 	vldr	s13, [r3, #28]
 80041a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80041aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80041ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ba:	edd3 6a08 	vldr	s13, [r3, #32]
 80041be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80041c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80041c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041d2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80041d6:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80041da:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80041de:	ca07      	ldmia	r2, {r0, r1, r2}
 80041e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80041e4:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80041e8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80041ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80041ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80041f2:	bf00      	nop
 80041f4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80041f8:	461c      	mov	r4, r3
 80041fa:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80041fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	FusionVector3 calibratedMagnetometer = FusionCalibrationMagnetic(uncalibratedMagnetometer, FUSION_ROTATION_MATRIX_IDENTITY, hardIronBias);
 8004206:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800420a:	4a4d      	ldr	r2, [pc, #308]	; (8004340 <ImuUpdate+0x738>)
 800420c:	461c      	mov	r4, r3
 800420e:	4615      	mov	r5, r2
 8004210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	6023      	str	r3, [r4, #0]
 800421c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004220:	4a48      	ldr	r2, [pc, #288]	; (8004344 <ImuUpdate+0x73c>)
 8004222:	ca07      	ldmia	r2, {r0, r1, r2}
 8004224:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004228:	463a      	mov	r2, r7
 800422a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800422e:	4614      	mov	r4, r2
 8004230:	461d      	mov	r5, r3
 8004232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800423a:	682b      	ldr	r3, [r5, #0]
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004242:	4a41      	ldr	r2, [pc, #260]	; (8004348 <ImuUpdate+0x740>)
 8004244:	ca07      	ldmia	r2, {r0, r1, r2}
 8004246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800424a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800424e:	463b      	mov	r3, r7
 8004250:	4614      	mov	r4, r2
 8004252:	461d      	mov	r5, r3
 8004254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800425a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	6023      	str	r3, [r4, #0]
 8004260:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004264:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004268:	ca07      	ldmia	r2, {r0, r1, r2}
 800426a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800426e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004272:	ed93 7a00 	vldr	s14, [r3]
 8004276:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800427a:	edd3 7a00 	vldr	s15, [r3]
 800427e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004286:	edd3 6a01 	vldr	s13, [r3, #4]
 800428a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800428e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004296:	ee37 7a27 	vadd.f32	s14, s14, s15
 800429a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800429e:	edd3 6a02 	vldr	s13, [r3, #8]
 80042a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80042a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80042aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80042b6:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80042ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042be:	ed93 7a03 	vldr	s14, [r3, #12]
 80042c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80042c6:	edd3 7a00 	vldr	s15, [r3]
 80042ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042d2:	edd3 6a04 	vldr	s13, [r3, #16]
 80042d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80042da:	edd3 7a01 	vldr	s15, [r3, #4]
 80042de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ea:	edd3 6a05 	vldr	s13, [r3, #20]
 80042ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80042f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80042f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004302:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8004306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800430a:	ed93 7a06 	vldr	s14, [r3, #24]
 800430e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004312:	edd3 7a00 	vldr	s15, [r3]
 8004316:	ee27 7a27 	vmul.f32	s14, s14, s15
 800431a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800431e:	edd3 6a07 	vldr	s13, [r3, #28]
 8004322:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004326:	edd3 7a01 	vldr	s15, [r3, #4]
 800432a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800432e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004336:	edd3 6a08 	vldr	s13, [r3, #32]
 800433a:	e007      	b.n	800434c <ImuUpdate+0x744>
 800433c:	200002b0 	.word	0x200002b0
 8004340:	0800a580 	.word	0x0800a580
 8004344:	20000294 	.word	0x20000294
 8004348:	20000280 	.word	0x20000280
 800434c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004350:	edd3 7a02 	vldr	s15, [r3, #8]
 8004354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800435c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004360:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8004364:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8004368:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800436c:	ca07      	ldmia	r2, {r0, r1, r2}
 800436e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004372:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8004376:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800437a:	ca07      	ldmia	r2, {r0, r1, r2}
 800437c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004380:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004384:	461c      	mov	r4, r3
 8004386:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800438a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800438e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004392:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004396:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800439a:	ca07      	ldmia	r2, {r0, r1, r2}
 800439c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80043a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043a4:	ed93 7a00 	vldr	s14, [r3]
 80043a8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80043ac:	edd3 7a00 	vldr	s15, [r3]
 80043b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80043b8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80043bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80043c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80043c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80043cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80043d4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80043d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80043e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80043e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80043e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80043f0:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80043f4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80043f8:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80043fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80043fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004402:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8004406:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 800440a:	ca07      	ldmia	r2, {r0, r1, r2}
 800440c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param softIronMatrix Soft-iron matrix (may not be a true rotation matrix).
 * @param hardIronBias Hard-iron bias in uT.
 * @return Calibrated magnetometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationMagnetic(const FusionVector3 uncalibrated, const FusionRotationMatrix softIronMatrix, const FusionVector3 hardIronBias) {
    return FusionVectorSubtract(FusionRotationMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronBias);
 8004410:	bf00      	nop
 8004412:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004416:	461c      	mov	r4, r3
 8004418:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 800441c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004420:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	calibratedGyroscope = FusionBiasUpdate(&fusionBias, calibratedGyroscope);
 8004424:	edd7 6a9a 	vldr	s13, [r7, #616]	; 0x268
 8004428:	ed97 7a9b 	vldr	s14, [r7, #620]	; 0x26c
 800442c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8004430:	eeb0 0a66 	vmov.f32	s0, s13
 8004434:	eef0 0a47 	vmov.f32	s1, s14
 8004438:	eeb0 1a67 	vmov.f32	s2, s15
 800443c:	4892      	ldr	r0, [pc, #584]	; (8004688 <ImuUpdate+0xa80>)
 800443e:	f7fd fda7 	bl	8001f90 <FusionBiasUpdate>
 8004442:	eef0 6a40 	vmov.f32	s13, s0
 8004446:	eeb0 7a60 	vmov.f32	s14, s1
 800444a:	eef0 7a41 	vmov.f32	s15, s2
 800444e:	edc7 6a9a 	vstr	s13, [r7, #616]	; 0x268
 8004452:	ed87 7a9b 	vstr	s14, [r7, #620]	; 0x26c
 8004456:	edc7 7a9c 	vstr	s15, [r7, #624]	; 0x270
	FusionAhrsUpdate(&fusionAhrs, calibratedGyroscope, calibratedAccelerometer, calibratedMagnetometer, samplePeriod);
 800445a:	4b8c      	ldr	r3, [pc, #560]	; (800468c <ImuUpdate+0xa84>)
 800445c:	edd3 4a00 	vldr	s9, [r3]
 8004460:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004464:	ed93 3a00 	vldr	s6, [r3]
 8004468:	edd3 3a01 	vldr	s7, [r3, #4]
 800446c:	ed93 4a02 	vldr	s8, [r3, #8]
 8004470:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8004474:	ed93 5a00 	vldr	s10, [r3]
 8004478:	edd3 5a01 	vldr	s11, [r3, #4]
 800447c:	ed93 6a02 	vldr	s12, [r3, #8]
 8004480:	edd7 6a9a 	vldr	s13, [r7, #616]	; 0x268
 8004484:	ed97 7a9b 	vldr	s14, [r7, #620]	; 0x26c
 8004488:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800448c:	eef0 1a45 	vmov.f32	s3, s10
 8004490:	eeb0 2a65 	vmov.f32	s4, s11
 8004494:	eef0 2a46 	vmov.f32	s5, s12
 8004498:	eeb0 0a66 	vmov.f32	s0, s13
 800449c:	eef0 0a47 	vmov.f32	s1, s14
 80044a0:	eeb0 1a67 	vmov.f32	s2, s15
 80044a4:	487a      	ldr	r0, [pc, #488]	; (8004690 <ImuUpdate+0xa88>)
 80044a6:	f7fc fc67 	bl	8000d78 <FusionAhrsUpdate>
	eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(&fusionAhrs));
 80044aa:	4879      	ldr	r0, [pc, #484]	; (8004690 <ImuUpdate+0xa88>)
 80044ac:	f7fd fcec 	bl	8001e88 <FusionAhrsGetQuaternion>
 80044b0:	eeb0 6a40 	vmov.f32	s12, s0
 80044b4:	eef0 6a60 	vmov.f32	s13, s1
 80044b8:	eeb0 7a41 	vmov.f32	s14, s2
 80044bc:	eef0 7a61 	vmov.f32	s15, s3
 80044c0:	ed87 6a9d 	vstr	s12, [r7, #628]	; 0x274
 80044c4:	edc7 6a9e 	vstr	s13, [r7, #632]	; 0x278
 80044c8:	ed87 7a9f 	vstr	s14, [r7, #636]	; 0x27c
 80044cc:	edc7 7aa0 	vstr	s15, [r7, #640]	; 0x280
 80044d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80044d4:	461c      	mov	r4, r3
 80044d6:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80044da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 80044e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80044e4:	ed93 7a00 	vldr	s14, [r3]
 80044e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80044ec:	edd3 7a00 	vldr	s15, [r3]
 80044f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044fc:	edc7 7ad7 	vstr	s15, [r7, #860]	; 0x35c
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8004500:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004504:	ed93 7a02 	vldr	s14, [r3, #8]
 8004508:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800450c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004514:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004518:	edd3 6a00 	vldr	s13, [r3]
 800451c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004520:	edd3 7a01 	vldr	s15, [r3, #4]
 8004524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004528:	ee77 6a67 	vsub.f32	s13, s14, s15
 800452c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004530:	ed93 7a03 	vldr	s14, [r3, #12]
 8004534:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004538:	edd3 7a03 	vldr	s15, [r3, #12]
 800453c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004540:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 8004544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004548:	eef0 0a67 	vmov.f32	s1, s15
 800454c:	eeb0 0a66 	vmov.f32	s0, s13
 8004550:	f005 fd6a 	bl	800a028 <atan2f>
 8004554:	eef0 7a40 	vmov.f32	s15, s0
 8004558:	edc7 7ad6 	vstr	s15, [r7, #856]	; 0x358
    return radians * (180.0f / (float) M_PI);
 800455c:	edd7 7ad6 	vldr	s15, [r7, #856]	; 0x358
 8004560:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004694 <ImuUpdate+0xa8c>
 8004564:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 8004568:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800456c:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8004570:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004574:	ed93 7a01 	vldr	s14, [r3, #4]
 8004578:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800457c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004584:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004588:	edd3 6a00 	vldr	s13, [r3]
 800458c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004590:	edd3 7a02 	vldr	s15, [r3, #8]
 8004594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800459c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045a0:	eeb0 0a67 	vmov.f32	s0, s15
 80045a4:	f005 fd0e 	bl	8009fc4 <asinf>
 80045a8:	eef0 7a40 	vmov.f32	s15, s0
 80045ac:	eef1 7a67 	vneg.f32	s15, s15
 80045b0:	edc7 7ad5 	vstr	s15, [r7, #852]	; 0x354
    return radians * (180.0f / (float) M_PI);
 80045b4:	edd7 7ad5 	vldr	s15, [r7, #852]	; 0x354
 80045b8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004694 <ImuUpdate+0xa8c>
 80045bc:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 80045c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045c4:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 80045c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80045cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80045d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80045d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80045d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80045e0:	edd3 6a00 	vldr	s13, [r3]
 80045e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80045e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80045ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80045f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80045f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80045fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004600:	edd3 7a01 	vldr	s15, [r3, #4]
 8004604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004608:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 800460c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004610:	eef0 0a67 	vmov.f32	s1, s15
 8004614:	eeb0 0a66 	vmov.f32	s0, s13
 8004618:	f005 fd06 	bl	800a028 <atan2f>
 800461c:	eef0 7a40 	vmov.f32	s15, s0
 8004620:	edc7 7ad4 	vstr	s15, [r7, #848]	; 0x350
    return radians * (180.0f / (float) M_PI);
 8004624:	edd7 7ad4 	vldr	s15, [r7, #848]	; 0x350
 8004628:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004694 <ImuUpdate+0xa8c>
 800462c:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8004630:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004634:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 8004638:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800463c:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8004640:	ca07      	ldmia	r2, {r0, r1, r2}
 8004642:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004646:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800464a:	461c      	mov	r4, r3
 800464c:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8004650:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004658:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <ImuUpdate+0xa90>)
 800465a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800465e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004660:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	DebugImuPitch = eulerAngles.angle.pitch;
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <ImuUpdate+0xa90>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4a0c      	ldr	r2, [pc, #48]	; (800469c <ImuUpdate+0xa94>)
 800466a:	6013      	str	r3, [r2, #0]
	DebugImuRoll = eulerAngles.angle.roll;
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <ImuUpdate+0xa90>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <ImuUpdate+0xa98>)
 8004672:	6013      	str	r3, [r2, #0]
	DebugImuYaw = eulerAngles.angle.yaw;
 8004674:	4b08      	ldr	r3, [pc, #32]	; (8004698 <ImuUpdate+0xa90>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a0a      	ldr	r2, [pc, #40]	; (80046a4 <ImuUpdate+0xa9c>)
 800467a:	6013      	str	r3, [r2, #0]
}
 800467c:	bf00      	nop
 800467e:	f507 7758 	add.w	r7, r7, #864	; 0x360
 8004682:	46bd      	mov	sp, r7
 8004684:	bdb0      	pop	{r4, r5, r7, pc}
 8004686:	bf00      	nop
 8004688:	200001ec 	.word	0x200001ec
 800468c:	20000000 	.word	0x20000000
 8004690:	200001ac 	.word	0x200001ac
 8004694:	42652ee0 	.word	0x42652ee0
 8004698:	20000138 	.word	0x20000138
 800469c:	20000278 	.word	0x20000278
 80046a0:	20000108 	.word	0x20000108
 80046a4:	2000021c 	.word	0x2000021c

080046a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046ae:	f000 ff95 	bl	80055dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046b2:	f000 f947 	bl	8004944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046b6:	f7fe fadf 	bl	8002c78 <MX_GPIO_Init>
  MX_DMA_Init();
 80046ba:	f7fe fa77 	bl	8002bac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80046be:	f000 fd91 	bl	80051e4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80046c2:	f000 f9af 	bl	8004a24 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80046c6:	f000 fdb7 	bl	8005238 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80046ca:	f000 faf1 	bl	8004cb0 <MX_TIM1_Init>
  MX_TIM4_Init();
 80046ce:	f000 fba7 	bl	8004e20 <MX_TIM4_Init>
  MX_ADC1_Init();
 80046d2:	f7fe f99d 	bl	8002a10 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
#ifndef SYSTEM_NO_ADC_INIT
  ADCInit();
 80046d6:	f7fe fdf9 	bl	80032cc <ADCInit>
#endif
#ifndef SYSTEM_NO_IMU_HW_INIT
  icm20948_init();
 80046da:	f7fd fd73 	bl	80021c4 <icm20948_init>
  ak09916_init();
 80046de:	f7fd fd9b 	bl	8002218 <ak09916_init>
#endif
#ifndef SYSTEM_NO_IMU_INIT
  ImuInit();
 80046e2:	f7ff fa4d 	bl	8003b80 <ImuInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  if (HAL_GetTick() - LastPkgTimeUartLow > SYSTEM_TIMING_MS_UART_LOW)
 80046e6:	f000 ffdf 	bl	80056a8 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	4b83      	ldr	r3, [pc, #524]	; (80048fc <main+0x254>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d90e      	bls.n	8004714 <main+0x6c>
	  {
		  MX_USART2_UART_Init();
 80046f6:	f000 fd75 	bl	80051e4 <MX_USART2_UART_Init>
		  UartLowReceiveState = 0;
 80046fa:	4b81      	ldr	r3, [pc, #516]	; (8004900 <main+0x258>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8004700:	2210      	movs	r2, #16
 8004702:	4980      	ldr	r1, [pc, #512]	; (8004904 <main+0x25c>)
 8004704:	4880      	ldr	r0, [pc, #512]	; (8004908 <main+0x260>)
 8004706:	f004 fbcd 	bl	8008ea4 <HAL_UART_Receive_DMA>
		  LastPkgTimeUartLow = HAL_GetTick();
 800470a:	f000 ffcd 	bl	80056a8 <HAL_GetTick>
 800470e:	4603      	mov	r3, r0
 8004710:	4a7a      	ldr	r2, [pc, #488]	; (80048fc <main+0x254>)
 8004712:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_HIGH_UART_LOOP
	  if (HAL_GetTick() - LastPkgTimeUartHigh > SYSTEM_TIMING_MS_UART_HIGH)
 8004714:	f000 ffc8 	bl	80056a8 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	4b7c      	ldr	r3, [pc, #496]	; (800490c <main+0x264>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b64      	cmp	r3, #100	; 0x64
 8004722:	d90e      	bls.n	8004742 <main+0x9a>
	  {
		  MX_USART3_UART_Init();
 8004724:	f000 fd88 	bl	8005238 <MX_USART3_UART_Init>
		  UartHighReceiveState = 0;
 8004728:	4b79      	ldr	r3, [pc, #484]	; (8004910 <main+0x268>)
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 800472e:	2210      	movs	r2, #16
 8004730:	4978      	ldr	r1, [pc, #480]	; (8004914 <main+0x26c>)
 8004732:	4879      	ldr	r0, [pc, #484]	; (8004918 <main+0x270>)
 8004734:	f004 fbb6 	bl	8008ea4 <HAL_UART_Receive_DMA>
		  LastPkgTimeUartHigh = HAL_GetTick();
 8004738:	f000 ffb6 	bl	80056a8 <HAL_GetTick>
 800473c:	4603      	mov	r3, r0
 800473e:	4a73      	ldr	r2, [pc, #460]	; (800490c <main+0x264>)
 8004740:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  if ((UartLowReceiveState == 10) && (SerialControlWheelsResponce.CR == 13) && (SerialControlWheelsResponce.LF == 10))
 8004742:	4b6f      	ldr	r3, [pc, #444]	; (8004900 <main+0x258>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b0a      	cmp	r3, #10
 800474a:	d124      	bne.n	8004796 <main+0xee>
 800474c:	4b6d      	ldr	r3, [pc, #436]	; (8004904 <main+0x25c>)
 800474e:	7b9b      	ldrb	r3, [r3, #14]
 8004750:	2b0d      	cmp	r3, #13
 8004752:	d120      	bne.n	8004796 <main+0xee>
 8004754:	4b6b      	ldr	r3, [pc, #428]	; (8004904 <main+0x25c>)
 8004756:	7bdb      	ldrb	r3, [r3, #15]
 8004758:	2b0a      	cmp	r3, #10
 800475a:	d11c      	bne.n	8004796 <main+0xee>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800475c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004760:	486e      	ldr	r0, [pc, #440]	; (800491c <main+0x274>)
 8004762:	f002 fab2 	bl	8006cca <HAL_GPIO_TogglePin>
		  UartLowReceiveState = 0;
 8004766:	4b66      	ldr	r3, [pc, #408]	; (8004900 <main+0x258>)
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
		  int32_t TemplateWheels[2] = { SerialControlWheelsResponce.WheelLeftSteps, SerialControlWheelsResponce.WheelRightSteps };
 800476c:	4b65      	ldr	r3, [pc, #404]	; (8004904 <main+0x25c>)
 800476e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	4b63      	ldr	r3, [pc, #396]	; (8004904 <main+0x25c>)
 8004776:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800477a:	60fb      	str	r3, [r7, #12]
		  UartLowPrepareRaw(SYSTEM_HALL_FILTER_MAX, TemplateWheels, 2);
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	2202      	movs	r2, #2
 8004782:	4619      	mov	r1, r3
 8004784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004788:	f7fe fc26 	bl	8002fd8 <UartLowPrepareRaw>
		  LastPkgTimeUartLow = HAL_GetTick();
 800478c:	f000 ff8c 	bl	80056a8 <HAL_GetTick>
 8004790:	4603      	mov	r3, r0
 8004792:	4a5a      	ldr	r2, [pc, #360]	; (80048fc <main+0x254>)
 8004794:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_GPIO_LOOP
	  if (HAL_GetTick() - LastUpdateGPIO > SYSTEM_TIMING_MS_GPIO)
 8004796:	f000 ff87 	bl	80056a8 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	4b60      	ldr	r3, [pc, #384]	; (8004920 <main+0x278>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	; 0x64
 80047a4:	d906      	bls.n	80047b4 <main+0x10c>
	  {
		  GPIOUpdate();
 80047a6:	f7fe fd3d 	bl	8003224 <GPIOUpdate>
		  LastUpdateGPIO = HAL_GetTick();
 80047aa:	f000 ff7d 	bl	80056a8 <HAL_GetTick>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4a5b      	ldr	r2, [pc, #364]	; (8004920 <main+0x278>)
 80047b2:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_ADC_INIT
#ifndef SYSTEM_NO_ADC_LOOP
	  if (HAL_GetTick() - LastUpdateADC > SYSTEM_TIMING_MS_ADC)
 80047b4:	f000 ff78 	bl	80056a8 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b5a      	ldr	r3, [pc, #360]	; (8004924 <main+0x27c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b0a      	cmp	r3, #10
 80047c2:	d908      	bls.n	80047d6 <main+0x12e>
	  {
		  ADCUpdate();
 80047c4:	f7fe fd98 	bl	80032f8 <ADCUpdate>
		  ADCPrepare();
 80047c8:	f7fe fdee 	bl	80033a8 <ADCPrepare>
		  LastUpdateADC = HAL_GetTick();
 80047cc:	f000 ff6c 	bl	80056a8 <HAL_GetTick>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4a54      	ldr	r2, [pc, #336]	; (8004924 <main+0x27c>)
 80047d4:	6013      	str	r3, [r2, #0]
	  }
#endif
#endif

	  if(HAL_GetTick() - LastUpdateIMU > SYSTEM_TIMING_MS_IMU)
 80047d6:	f000 ff67 	bl	80056a8 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	4b52      	ldr	r3, [pc, #328]	; (8004928 <main+0x280>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b0a      	cmp	r3, #10
 80047e4:	d90c      	bls.n	8004800 <main+0x158>
	  {
		  ImuAccelUpdate();
 80047e6:	f7fe ff07 	bl	80035f8 <ImuAccelUpdate>
		  ImuGyroUpdate();
 80047ea:	f7fe ffd9 	bl	80037a0 <ImuGyroUpdate>
		  ImuMagUpdate();
 80047ee:	f7ff f8cf 	bl	8003990 <ImuMagUpdate>
		  ImuUpdate();
 80047f2:	f7ff fa09 	bl	8003c08 <ImuUpdate>
		  LastUpdateIMU = HAL_GetTick();
 80047f6:	f000 ff57 	bl	80056a8 <HAL_GetTick>
 80047fa:	4603      	mov	r3, r0
 80047fc:	4a4a      	ldr	r2, [pc, #296]	; (8004928 <main+0x280>)
 80047fe:	6013      	str	r3, [r2, #0]
	  }

#ifndef SYSTEM_NO_HIGH_UART_LOOP
	  if ((UartHighReceiveState == 10) && (SerialHighLevelRequest.CR == 13) && (SerialHighLevelRequest.LF == 10))
 8004800:	4b43      	ldr	r3, [pc, #268]	; (8004910 <main+0x268>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b0a      	cmp	r3, #10
 8004808:	d174      	bne.n	80048f4 <main+0x24c>
 800480a:	4b42      	ldr	r3, [pc, #264]	; (8004914 <main+0x26c>)
 800480c:	7b9b      	ldrb	r3, [r3, #14]
 800480e:	2b0d      	cmp	r3, #13
 8004810:	d170      	bne.n	80048f4 <main+0x24c>
 8004812:	4b40      	ldr	r3, [pc, #256]	; (8004914 <main+0x26c>)
 8004814:	7bdb      	ldrb	r3, [r3, #15]
 8004816:	2b0a      	cmp	r3, #10
 8004818:	d16c      	bne.n	80048f4 <main+0x24c>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800481a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800481e:	483f      	ldr	r0, [pc, #252]	; (800491c <main+0x274>)
 8004820:	f002 fa53 	bl	8006cca <HAL_GPIO_TogglePin>

		  BTControl.Front = SerialHighLevelRequest.Linear;
 8004824:	4b3b      	ldr	r3, [pc, #236]	; (8004914 <main+0x26c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a40      	ldr	r2, [pc, #256]	; (800492c <main+0x284>)
 800482a:	6013      	str	r3, [r2, #0]
		  BTControl.Turn = SerialHighLevelRequest.Angular;
 800482c:	4b39      	ldr	r3, [pc, #228]	; (8004914 <main+0x26c>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	4a3e      	ldr	r2, [pc, #248]	; (800492c <main+0x284>)
 8004832:	6053      	str	r3, [r2, #4]
		  BTControl.Drive = SerialHighLevelRequest.DriveMode;
 8004834:	4b37      	ldr	r3, [pc, #220]	; (8004914 <main+0x26c>)
 8004836:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004842:	4b3a      	ldr	r3, [pc, #232]	; (800492c <main+0x284>)
 8004844:	edc3 7a02 	vstr	s15, [r3, #8]

		  UartHighReceiveState = 0;
 8004848:	4b31      	ldr	r3, [pc, #196]	; (8004910 <main+0x268>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
		  SerialHighLevelResponce.ControllerState = -1;
 800484e:	4b38      	ldr	r3, [pc, #224]	; (8004930 <main+0x288>)
 8004850:	22ff      	movs	r2, #255	; 0xff
 8004852:	701a      	strb	r2, [r3, #0]
		  SerialHighLevelResponce.WheelLeftSteps = WheelsHall[0].OutputHall;
 8004854:	4b37      	ldr	r3, [pc, #220]	; (8004934 <main+0x28c>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4a35      	ldr	r2, [pc, #212]	; (8004930 <main+0x288>)
 800485a:	f8c2 3001 	str.w	r3, [r2, #1]
		  SerialHighLevelResponce.WheelRightSteps = WheelsHall[1].OutputHall;
 800485e:	4b35      	ldr	r3, [pc, #212]	; (8004934 <main+0x28c>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	4a33      	ldr	r2, [pc, #204]	; (8004930 <main+0x288>)
 8004864:	f8c2 3005 	str.w	r3, [r2, #5]
		  SerialHighLevelResponce.BatteryPersentage = LowDiagnostic.Battery;
 8004868:	4b33      	ldr	r3, [pc, #204]	; (8004938 <main+0x290>)
 800486a:	edd3 7a01 	vldr	s15, [r3, #4]
 800486e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004872:	edc7 7a01 	vstr	s15, [r7, #4]
 8004876:	793b      	ldrb	r3, [r7, #4]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	4b2d      	ldr	r3, [pc, #180]	; (8004930 <main+0x288>)
 800487c:	725a      	strb	r2, [r3, #9]
		  SerialHighLevelResponce.Roll = eulerAngles.angle.roll;
 800487e:	4b2f      	ldr	r3, [pc, #188]	; (800493c <main+0x294>)
 8004880:	edd3 7a00 	vldr	s15, [r3]
 8004884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004888:	ee17 3a90 	vmov	r3, s15
 800488c:	b21a      	sxth	r2, r3
 800488e:	4b28      	ldr	r3, [pc, #160]	; (8004930 <main+0x288>)
 8004890:	815a      	strh	r2, [r3, #10]
		  SerialHighLevelResponce.Pitch = eulerAngles.angle.pitch;
 8004892:	4b2a      	ldr	r3, [pc, #168]	; (800493c <main+0x294>)
 8004894:	edd3 7a01 	vldr	s15, [r3, #4]
 8004898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800489c:	ee17 3a90 	vmov	r3, s15
 80048a0:	b21a      	sxth	r2, r3
 80048a2:	4b23      	ldr	r3, [pc, #140]	; (8004930 <main+0x288>)
 80048a4:	819a      	strh	r2, [r3, #12]
		  SerialHighLevelResponce.Yaw = eulerAngles.angle.yaw;
 80048a6:	4b25      	ldr	r3, [pc, #148]	; (800493c <main+0x294>)
 80048a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80048ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048b0:	ee17 3a90 	vmov	r3, s15
 80048b4:	b21a      	sxth	r2, r3
 80048b6:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <main+0x288>)
 80048b8:	81da      	strh	r2, [r3, #14]
		  SerialHighLevelResponce.CenterIkSensor = AdcModule.Sensors[4];
 80048ba:	4b21      	ldr	r3, [pc, #132]	; (8004940 <main+0x298>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	891a      	ldrh	r2, [r3, #8]
 80048c0:	4b1b      	ldr	r3, [pc, #108]	; (8004930 <main+0x288>)
 80048c2:	821a      	strh	r2, [r3, #16]
		  SerialHighLevelResponce.ParameterNumber = 0;
 80048c4:	4b1a      	ldr	r3, [pc, #104]	; (8004930 <main+0x288>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	749a      	strb	r2, [r3, #18]
		  SerialHighLevelResponce.ParametrValue = 0;
 80048ca:	4b19      	ldr	r3, [pc, #100]	; (8004930 <main+0x288>)
 80048cc:	3313      	adds	r3, #19
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
		  SerialHighLevelResponce.CR = 13;
 80048d4:	4b16      	ldr	r3, [pc, #88]	; (8004930 <main+0x288>)
 80048d6:	220d      	movs	r2, #13
 80048d8:	75da      	strb	r2, [r3, #23]
		  SerialHighLevelResponce.LF = 10;
 80048da:	4b15      	ldr	r3, [pc, #84]	; (8004930 <main+0x288>)
 80048dc:	220a      	movs	r2, #10
 80048de:	761a      	strb	r2, [r3, #24]
 		  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)SerialHighLevelResponce.Buffer, HIGH_LEVEL_RESPONCE_SIZE);
 80048e0:	2219      	movs	r2, #25
 80048e2:	4913      	ldr	r1, [pc, #76]	; (8004930 <main+0x288>)
 80048e4:	480c      	ldr	r0, [pc, #48]	; (8004918 <main+0x270>)
 80048e6:	f004 fa5f 	bl	8008da8 <HAL_UART_Transmit_DMA>
		  LastPkgTimeUartHigh = HAL_GetTick();
 80048ea:	f000 fedd 	bl	80056a8 <HAL_GetTick>
 80048ee:	4603      	mov	r3, r0
 80048f0:	4a06      	ldr	r2, [pc, #24]	; (800490c <main+0x264>)
 80048f2:	6013      	str	r3, [r2, #0]
		  BALANCE_Result_Loop();
		  LastUpdateLogic = HAL_GetTick();
	  }
*/
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  SerialLowControlLoop();
 80048f4:	f7fe fe5a 	bl	80035ac <SerialLowControlLoop>
	  if (HAL_GetTick() - LastPkgTimeUartLow > SYSTEM_TIMING_MS_UART_LOW)
 80048f8:	e6f5      	b.n	80046e6 <main+0x3e>
 80048fa:	bf00      	nop
 80048fc:	200000a0 	.word	0x200000a0
 8004900:	200000a8 	.word	0x200000a8
 8004904:	2000014c 	.word	0x2000014c
 8004908:	200006fc 	.word	0x200006fc
 800490c:	200000a4 	.word	0x200000a4
 8004910:	200000a9 	.word	0x200000a9
 8004914:	20000220 	.word	0x20000220
 8004918:	200005f8 	.word	0x200005f8
 800491c:	40020c00 	.word	0x40020c00
 8004920:	200000b0 	.word	0x200000b0
 8004924:	200000b4 	.word	0x200000b4
 8004928:	200000b8 	.word	0x200000b8
 800492c:	20000110 	.word	0x20000110
 8004930:	20000250 	.word	0x20000250
 8004934:	200002bc 	.word	0x200002bc
 8004938:	20000170 	.word	0x20000170
 800493c:	20000138 	.word	0x20000138
 8004940:	2000019c 	.word	0x2000019c

08004944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b094      	sub	sp, #80	; 0x50
 8004948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800494a:	f107 0320 	add.w	r3, r7, #32
 800494e:	2230      	movs	r2, #48	; 0x30
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f005 fe00 	bl	800a558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004958:	f107 030c 	add.w	r3, r7, #12
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004968:	2300      	movs	r3, #0
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	4b28      	ldr	r3, [pc, #160]	; (8004a10 <SystemClock_Config+0xcc>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <SystemClock_Config+0xcc>)
 8004972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004976:	6413      	str	r3, [r2, #64]	; 0x40
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <SystemClock_Config+0xcc>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004984:	2300      	movs	r3, #0
 8004986:	607b      	str	r3, [r7, #4]
 8004988:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <SystemClock_Config+0xd0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <SystemClock_Config+0xd0>)
 800498e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <SystemClock_Config+0xd0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80049a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049aa:	2302      	movs	r3, #2
 80049ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80049ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80049b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80049b4:	2304      	movs	r3, #4
 80049b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80049b8:	23a8      	movs	r3, #168	; 0xa8
 80049ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049bc:	2302      	movs	r3, #2
 80049be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80049c0:	2304      	movs	r3, #4
 80049c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80049c4:	f107 0320 	add.w	r3, r7, #32
 80049c8:	4618      	mov	r0, r3
 80049ca:	f002 f999 	bl	8006d00 <HAL_RCC_OscConfig>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80049d4:	f000 f820 	bl	8004a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049d8:	230f      	movs	r3, #15
 80049da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049dc:	2302      	movs	r3, #2
 80049de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80049e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80049e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80049ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80049f0:	f107 030c 	add.w	r3, r7, #12
 80049f4:	2105      	movs	r1, #5
 80049f6:	4618      	mov	r0, r3
 80049f8:	f002 fbfa 	bl	80071f0 <HAL_RCC_ClockConfig>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004a02:	f000 f809 	bl	8004a18 <Error_Handler>
  }
}
 8004a06:	bf00      	nop
 8004a08:	3750      	adds	r7, #80	; 0x50
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40007000 	.word	0x40007000

08004a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a1c:	b672      	cpsid	i
}
 8004a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a20:	e7fe      	b.n	8004a20 <Error_Handler+0x8>
	...

08004a24 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004a28:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a2a:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <MX_SPI2_Init+0x68>)
 8004a2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004a2e:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a3c:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a44:	2202      	movs	r2, #2
 8004a46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004a56:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a58:	2210      	movs	r2, #16
 8004a5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a62:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a70:	220a      	movs	r2, #10
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a74:	4804      	ldr	r0, [pc, #16]	; (8004a88 <MX_SPI2_Init+0x64>)
 8004a76:	f002 fdb7 	bl	80075e8 <HAL_SPI_Init>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004a80:	f7ff ffca 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004a84:	bf00      	nop
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	200002d0 	.word	0x200002d0
 8004a8c:	40003800 	.word	0x40003800

08004a90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a98:	f107 0314 	add.w	r3, r7, #20
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a19      	ldr	r2, [pc, #100]	; (8004b14 <HAL_SPI_MspInit+0x84>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d12c      	bne.n	8004b0c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	4b18      	ldr	r3, [pc, #96]	; (8004b18 <HAL_SPI_MspInit+0x88>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <HAL_SPI_MspInit+0x88>)
 8004abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <HAL_SPI_MspInit+0x88>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <HAL_SPI_MspInit+0x88>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	4a10      	ldr	r2, [pc, #64]	; (8004b18 <HAL_SPI_MspInit+0x88>)
 8004ad8:	f043 0302 	orr.w	r3, r3, #2
 8004adc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ade:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <HAL_SPI_MspInit+0x88>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 8004aea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af0:	2302      	movs	r3, #2
 8004af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af8:	2303      	movs	r3, #3
 8004afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004afc:	2305      	movs	r3, #5
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b00:	f107 0314 	add.w	r3, r7, #20
 8004b04:	4619      	mov	r1, r3
 8004b06:	4805      	ldr	r0, [pc, #20]	; (8004b1c <HAL_SPI_MspInit+0x8c>)
 8004b08:	f001 ff12 	bl	8006930 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40003800 	.word	0x40003800
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	40020400 	.word	0x40020400

08004b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b26:	2300      	movs	r3, #0
 8004b28:	607b      	str	r3, [r7, #4]
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <HAL_MspInit+0x4c>)
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2e:	4a0f      	ldr	r2, [pc, #60]	; (8004b6c <HAL_MspInit+0x4c>)
 8004b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b34:	6453      	str	r3, [r2, #68]	; 0x44
 8004b36:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <HAL_MspInit+0x4c>)
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b3e:	607b      	str	r3, [r7, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_MspInit+0x4c>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <HAL_MspInit+0x4c>)
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b50:	6413      	str	r3, [r2, #64]	; 0x40
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_MspInit+0x4c>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800

08004b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b74:	e7fe      	b.n	8004b74 <NMI_Handler+0x4>

08004b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b76:	b480      	push	{r7}
 8004b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b7a:	e7fe      	b.n	8004b7a <HardFault_Handler+0x4>

08004b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b80:	e7fe      	b.n	8004b80 <MemManage_Handler+0x4>

08004b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b82:	b480      	push	{r7}
 8004b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b86:	e7fe      	b.n	8004b86 <BusFault_Handler+0x4>

08004b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b8c:	e7fe      	b.n	8004b8c <UsageFault_Handler+0x4>

08004b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ba0:	bf00      	nop
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004baa:	b480      	push	{r7}
 8004bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bbc:	f000 fd60 	bl	8005680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bc0:	bf00      	nop
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004bc8:	4802      	ldr	r0, [pc, #8]	; (8004bd4 <DMA1_Stream1_IRQHandler+0x10>)
 8004bca:	f001 fc47 	bl	800645c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000598 	.word	0x20000598

08004bd8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8004bdc:	4802      	ldr	r0, [pc, #8]	; (8004be8 <DMA1_Stream3_IRQHandler+0x10>)
 8004bde:	f001 fc3d 	bl	800645c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000328 	.word	0x20000328

08004bec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004bf0:	4802      	ldr	r0, [pc, #8]	; (8004bfc <DMA1_Stream4_IRQHandler+0x10>)
 8004bf2:	f001 fc33 	bl	800645c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004bf6:	bf00      	nop
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	2000063c 	.word	0x2000063c

08004c00 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004c04:	4802      	ldr	r0, [pc, #8]	; (8004c10 <DMA1_Stream5_IRQHandler+0x10>)
 8004c06:	f001 fc29 	bl	800645c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000538 	.word	0x20000538

08004c14 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004c18:	4802      	ldr	r0, [pc, #8]	; (8004c24 <DMA1_Stream6_IRQHandler+0x10>)
 8004c1a:	f001 fc1f 	bl	800645c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	2000069c 	.word	0x2000069c

08004c28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c2c:	4802      	ldr	r0, [pc, #8]	; (8004c38 <USART2_IRQHandler+0x10>)
 8004c2e:	f004 f969 	bl	8008f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004c32:	bf00      	nop
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	200006fc 	.word	0x200006fc

08004c3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004c40:	4802      	ldr	r0, [pc, #8]	; (8004c4c <USART3_IRQHandler+0x10>)
 8004c42:	f004 f95f 	bl	8008f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004c46:	bf00      	nop
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	200005f8 	.word	0x200005f8

08004c50 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004c54:	4802      	ldr	r0, [pc, #8]	; (8004c60 <DMA2_Stream1_IRQHandler+0x10>)
 8004c56:	f001 fc01 	bl	800645c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004c5a:	bf00      	nop
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000388 	.word	0x20000388

08004c64 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8004c68:	4802      	ldr	r0, [pc, #8]	; (8004c74 <DMA2_Stream2_IRQHandler+0x10>)
 8004c6a:	f001 fbf7 	bl	800645c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004c6e:	bf00      	nop
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000490 	.word	0x20000490

08004c78 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8004c7c:	4802      	ldr	r0, [pc, #8]	; (8004c88 <DMA2_Stream6_IRQHandler+0x10>)
 8004c7e:	f001 fbed 	bl	800645c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004c82:	bf00      	nop
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000430 	.word	0x20000430

08004c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <SystemInit+0x20>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c96:	4a05      	ldr	r2, [pc, #20]	; (8004cac <SystemInit+0x20>)
 8004c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	e000ed00 	.word	0xe000ed00

08004cb0 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch3;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b096      	sub	sp, #88	; 0x58
 8004cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	605a      	str	r2, [r3, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
 8004cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	609a      	str	r2, [r3, #8]
 8004cda:	60da      	str	r2, [r3, #12]
 8004cdc:	611a      	str	r2, [r3, #16]
 8004cde:	615a      	str	r2, [r3, #20]
 8004ce0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f005 fc35 	bl	800a558 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004cee:	4b4a      	ldr	r3, [pc, #296]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004cf0:	4a4a      	ldr	r2, [pc, #296]	; (8004e1c <MX_TIM1_Init+0x16c>)
 8004cf2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8004cf4:	4b48      	ldr	r3, [pc, #288]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cfa:	4b47      	ldr	r3, [pc, #284]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 105;
 8004d00:	4b45      	ldr	r3, [pc, #276]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004d02:	2269      	movs	r2, #105	; 0x69
 8004d04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d06:	4b44      	ldr	r3, [pc, #272]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d0c:	4b42      	ldr	r3, [pc, #264]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d12:	4b41      	ldr	r3, [pc, #260]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d18:	483f      	ldr	r0, [pc, #252]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004d1a:	f003 fa0d 	bl	8008138 <HAL_TIM_Base_Init>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004d24:	f7ff fe78 	bl	8004a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d2c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d32:	4619      	mov	r1, r3
 8004d34:	4838      	ldr	r0, [pc, #224]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004d36:	f003 fb69 	bl	800840c <HAL_TIM_ConfigClockSource>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8004d40:	f7ff fe6a 	bl	8004a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004d44:	4834      	ldr	r0, [pc, #208]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004d46:	f003 fa46 	bl	80081d6 <HAL_TIM_PWM_Init>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8004d50:	f7ff fe62 	bl	8004a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d54:	2300      	movs	r3, #0
 8004d56:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d60:	4619      	mov	r1, r3
 8004d62:	482d      	ldr	r0, [pc, #180]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004d64:	f003 ff04 	bl	8008b70 <HAL_TIMEx_MasterConfigSynchronization>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8004d6e:	f7ff fe53 	bl	8004a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d72:	2360      	movs	r3, #96	; 0x60
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d86:	2300      	movs	r3, #0
 8004d88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d92:	2200      	movs	r2, #0
 8004d94:	4619      	mov	r1, r3
 8004d96:	4820      	ldr	r0, [pc, #128]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004d98:	f003 fa76 	bl	8008288 <HAL_TIM_PWM_ConfigChannel>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8004da2:	f7ff fe39 	bl	8004a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004daa:	2204      	movs	r2, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	481a      	ldr	r0, [pc, #104]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004db0:	f003 fa6a 	bl	8008288 <HAL_TIM_PWM_ConfigChannel>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8004dba:	f7ff fe2d 	bl	8004a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4814      	ldr	r0, [pc, #80]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004dc8:	f003 fa5e 	bl	8008288 <HAL_TIM_PWM_ConfigChannel>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8004dd2:	f7ff fe21 	bl	8004a18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004dea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004df4:	1d3b      	adds	r3, r7, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4807      	ldr	r0, [pc, #28]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004dfa:	f003 ff35 	bl	8008c68 <HAL_TIMEx_ConfigBreakDeadTime>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8004e04:	f7ff fe08 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e08:	4803      	ldr	r0, [pc, #12]	; (8004e18 <MX_TIM1_Init+0x168>)
 8004e0a:	f000 f989 	bl	8005120 <HAL_TIM_MspPostInit>

}
 8004e0e:	bf00      	nop
 8004e10:	3758      	adds	r7, #88	; 0x58
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	200004f0 	.word	0x200004f0
 8004e1c:	40010000 	.word	0x40010000

08004e20 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08e      	sub	sp, #56	; 0x38
 8004e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	605a      	str	r2, [r3, #4]
 8004e30:	609a      	str	r2, [r3, #8]
 8004e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e34:	f107 0320 	add.w	r3, r7, #32
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e3e:	1d3b      	adds	r3, r7, #4
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	611a      	str	r2, [r3, #16]
 8004e4c:	615a      	str	r2, [r3, #20]
 8004e4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004e50:	4b2c      	ldr	r3, [pc, #176]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004e52:	4a2d      	ldr	r2, [pc, #180]	; (8004f08 <MX_TIM4_Init+0xe8>)
 8004e54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004e56:	4b2b      	ldr	r3, [pc, #172]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e5c:	4b29      	ldr	r3, [pc, #164]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 8004e62:	4b28      	ldr	r3, [pc, #160]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004e64:	2269      	movs	r2, #105	; 0x69
 8004e66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e68:	4b26      	ldr	r3, [pc, #152]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e6e:	4b25      	ldr	r3, [pc, #148]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004e74:	4823      	ldr	r0, [pc, #140]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004e76:	f003 f95f 	bl	8008138 <HAL_TIM_Base_Init>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8004e80:	f7ff fdca 	bl	8004a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e8e:	4619      	mov	r1, r3
 8004e90:	481c      	ldr	r0, [pc, #112]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004e92:	f003 fabb 	bl	800840c <HAL_TIM_ConfigClockSource>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8004e9c:	f7ff fdbc 	bl	8004a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004ea0:	4818      	ldr	r0, [pc, #96]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004ea2:	f003 f998 	bl	80081d6 <HAL_TIM_PWM_Init>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8004eac:	f7ff fdb4 	bl	8004a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004eb8:	f107 0320 	add.w	r3, r7, #32
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4811      	ldr	r0, [pc, #68]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004ec0:	f003 fe56 	bl	8008b70 <HAL_TIMEx_MasterConfigSynchronization>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8004eca:	f7ff fda5 	bl	8004a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ece:	2360      	movs	r3, #96	; 0x60
 8004ed0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ede:	1d3b      	adds	r3, r7, #4
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4807      	ldr	r0, [pc, #28]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004ee6:	f003 f9cf 	bl	8008288 <HAL_TIM_PWM_ConfigChannel>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8004ef0:	f7ff fd92 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004ef4:	4803      	ldr	r0, [pc, #12]	; (8004f04 <MX_TIM4_Init+0xe4>)
 8004ef6:	f000 f913 	bl	8005120 <HAL_TIM_MspPostInit>

}
 8004efa:	bf00      	nop
 8004efc:	3738      	adds	r7, #56	; 0x38
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	200003e8 	.word	0x200003e8
 8004f08:	40000800 	.word	0x40000800

08004f0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a76      	ldr	r2, [pc, #472]	; (80050f4 <HAL_TIM_Base_MspInit+0x1e8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	f040 80a2 	bne.w	8005064 <HAL_TIM_Base_MspInit+0x158>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	4b74      	ldr	r3, [pc, #464]	; (80050f8 <HAL_TIM_Base_MspInit+0x1ec>)
 8004f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f28:	4a73      	ldr	r2, [pc, #460]	; (80050f8 <HAL_TIM_Base_MspInit+0x1ec>)
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	6453      	str	r3, [r2, #68]	; 0x44
 8004f30:	4b71      	ldr	r3, [pc, #452]	; (80050f8 <HAL_TIM_Base_MspInit+0x1ec>)
 8004f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8004f3c:	4b6f      	ldr	r3, [pc, #444]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f3e:	4a70      	ldr	r2, [pc, #448]	; (8005100 <HAL_TIM_Base_MspInit+0x1f4>)
 8004f40:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8004f42:	4b6e      	ldr	r3, [pc, #440]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f44:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004f48:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f4a:	4b6c      	ldr	r3, [pc, #432]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f4c:	2240      	movs	r2, #64	; 0x40
 8004f4e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f50:	4b6a      	ldr	r3, [pc, #424]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004f56:	4b69      	ldr	r3, [pc, #420]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f5c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004f5e:	4b67      	ldr	r3, [pc, #412]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f64:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004f66:	4b65      	ldr	r3, [pc, #404]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f6c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8004f6e:	4b63      	ldr	r3, [pc, #396]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f74:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8004f76:	4b61      	ldr	r3, [pc, #388]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f7c:	4b5f      	ldr	r3, [pc, #380]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8004f82:	485e      	ldr	r0, [pc, #376]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f84:	f001 f8d2 	bl	800612c <HAL_DMA_Init>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8004f8e:	f7ff fd43 	bl	8004a18 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a59      	ldr	r2, [pc, #356]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28
 8004f98:	4a58      	ldr	r2, [pc, #352]	; (80050fc <HAL_TIM_Base_MspInit+0x1f0>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8004f9e:	4b59      	ldr	r3, [pc, #356]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004fa0:	4a59      	ldr	r2, [pc, #356]	; (8005108 <HAL_TIM_Base_MspInit+0x1fc>)
 8004fa2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8004fa4:	4b57      	ldr	r3, [pc, #348]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004fa6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004faa:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fac:	4b55      	ldr	r3, [pc, #340]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004fae:	2240      	movs	r2, #64	; 0x40
 8004fb0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fb2:	4b54      	ldr	r3, [pc, #336]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004fb8:	4b52      	ldr	r3, [pc, #328]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fbe:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fc0:	4b50      	ldr	r3, [pc, #320]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004fc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fc6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004fc8:	4b4e      	ldr	r3, [pc, #312]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fce:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8004fd0:	4b4c      	ldr	r3, [pc, #304]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fd6:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004fd8:	4b4a      	ldr	r3, [pc, #296]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fde:	4b49      	ldr	r3, [pc, #292]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004fe4:	4847      	ldr	r0, [pc, #284]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004fe6:	f001 f8a1 	bl	800612c <HAL_DMA_Init>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <HAL_TIM_Base_MspInit+0xe8>
    {
      Error_Handler();
 8004ff0:	f7ff fd12 	bl	8004a18 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a43      	ldr	r2, [pc, #268]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24
 8004ffa:	4a42      	ldr	r2, [pc, #264]	; (8005104 <HAL_TIM_Base_MspInit+0x1f8>)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8005000:	4b42      	ldr	r3, [pc, #264]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 8005002:	4a43      	ldr	r2, [pc, #268]	; (8005110 <HAL_TIM_Base_MspInit+0x204>)
 8005004:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8005006:	4b41      	ldr	r3, [pc, #260]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 8005008:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800500c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800500e:	4b3f      	ldr	r3, [pc, #252]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 8005010:	2240      	movs	r2, #64	; 0x40
 8005012:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005014:	4b3d      	ldr	r3, [pc, #244]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 8005016:	2200      	movs	r2, #0
 8005018:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800501a:	4b3c      	ldr	r3, [pc, #240]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 800501c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005020:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005022:	4b3a      	ldr	r3, [pc, #232]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 8005024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005028:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800502a:	4b38      	ldr	r3, [pc, #224]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 800502c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005030:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 8005032:	4b36      	ldr	r3, [pc, #216]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 8005034:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005038:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800503a:	4b34      	ldr	r3, [pc, #208]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 800503c:	2200      	movs	r2, #0
 800503e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005040:	4b32      	ldr	r3, [pc, #200]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 8005042:	2200      	movs	r2, #0
 8005044:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8005046:	4831      	ldr	r0, [pc, #196]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 8005048:	f001 f870 	bl	800612c <HAL_DMA_Init>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_TIM_Base_MspInit+0x14a>
    {
      Error_Handler();
 8005052:	f7ff fce1 	bl	8004a18 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2c      	ldr	r2, [pc, #176]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c
 800505c:	4a2b      	ldr	r2, [pc, #172]	; (800510c <HAL_TIM_Base_MspInit+0x200>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005062:	e043      	b.n	80050ec <HAL_TIM_Base_MspInit+0x1e0>
  else if(tim_baseHandle->Instance==TIM4)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <HAL_TIM_Base_MspInit+0x208>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d13e      	bne.n	80050ec <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	4a20      	ldr	r2, [pc, #128]	; (80050f8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005078:	f043 0304 	orr.w	r3, r3, #4
 800507c:	6413      	str	r3, [r2, #64]	; 0x40
 800507e:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <HAL_TIM_Base_MspInit+0x1ec>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 800508a:	4b23      	ldr	r3, [pc, #140]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 800508c:	4a23      	ldr	r2, [pc, #140]	; (800511c <HAL_TIM_Base_MspInit+0x210>)
 800508e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8005090:	4b21      	ldr	r3, [pc, #132]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 8005092:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005096:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005098:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 800509a:	2240      	movs	r2, #64	; 0x40
 800509c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800509e:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80050a4:	4b1c      	ldr	r3, [pc, #112]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 80050a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050aa:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050ac:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 80050ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050b2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050b4:	4b18      	ldr	r3, [pc, #96]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 80050b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050ba:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80050bc:	4b16      	ldr	r3, [pc, #88]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 80050be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c2:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80050c4:	4b14      	ldr	r3, [pc, #80]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80050d0:	4811      	ldr	r0, [pc, #68]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 80050d2:	f001 f82b 	bl	800612c <HAL_DMA_Init>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_TIM_Base_MspInit+0x1d4>
      Error_Handler();
 80050dc:	f7ff fc9c 	bl	8004a18 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a0d      	ldr	r2, [pc, #52]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 80050e4:	629a      	str	r2, [r3, #40]	; 0x28
 80050e6:	4a0c      	ldr	r2, [pc, #48]	; (8005118 <HAL_TIM_Base_MspInit+0x20c>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6393      	str	r3, [r2, #56]	; 0x38
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40023800 	.word	0x40023800
 80050fc:	20000490 	.word	0x20000490
 8005100:	40026440 	.word	0x40026440
 8005104:	20000388 	.word	0x20000388
 8005108:	40026428 	.word	0x40026428
 800510c:	20000430 	.word	0x20000430
 8005110:	400264a0 	.word	0x400264a0
 8005114:	40000800 	.word	0x40000800
 8005118:	20000328 	.word	0x20000328
 800511c:	40026058 	.word	0x40026058

08005120 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005128:	f107 0314 	add.w	r3, r7, #20
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	605a      	str	r2, [r3, #4]
 8005132:	609a      	str	r2, [r3, #8]
 8005134:	60da      	str	r2, [r3, #12]
 8005136:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a24      	ldr	r2, [pc, #144]	; (80051d0 <HAL_TIM_MspPostInit+0xb0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d11f      	bne.n	8005182 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <HAL_TIM_MspPostInit+0xb4>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	4a22      	ldr	r2, [pc, #136]	; (80051d4 <HAL_TIM_MspPostInit+0xb4>)
 800514c:	f043 0310 	orr.w	r3, r3, #16
 8005150:	6313      	str	r3, [r2, #48]	; 0x30
 8005152:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <HAL_TIM_MspPostInit+0xb4>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_LED1_Pin|PWM_LED2_Pin|PWM_LED3_Pin;
 800515e:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8005162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005164:	2302      	movs	r3, #2
 8005166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516c:	2300      	movs	r3, #0
 800516e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005170:	2301      	movs	r3, #1
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005174:	f107 0314 	add.w	r3, r7, #20
 8005178:	4619      	mov	r1, r3
 800517a:	4817      	ldr	r0, [pc, #92]	; (80051d8 <HAL_TIM_MspPostInit+0xb8>)
 800517c:	f001 fbd8 	bl	8006930 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005180:	e022      	b.n	80051c8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a15      	ldr	r2, [pc, #84]	; (80051dc <HAL_TIM_MspPostInit+0xbc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d11d      	bne.n	80051c8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <HAL_TIM_MspPostInit+0xb4>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	4a0f      	ldr	r2, [pc, #60]	; (80051d4 <HAL_TIM_MspPostInit+0xb4>)
 8005196:	f043 0302 	orr.w	r3, r3, #2
 800519a:	6313      	str	r3, [r2, #48]	; 0x30
 800519c:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <HAL_TIM_MspPostInit+0xb4>)
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_LED4_Pin;
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ac:	2302      	movs	r3, #2
 80051ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b4:	2300      	movs	r3, #0
 80051b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80051b8:	2302      	movs	r3, #2
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LED4_GPIO_Port, &GPIO_InitStruct);
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4619      	mov	r1, r3
 80051c2:	4807      	ldr	r0, [pc, #28]	; (80051e0 <HAL_TIM_MspPostInit+0xc0>)
 80051c4:	f001 fbb4 	bl	8006930 <HAL_GPIO_Init>
}
 80051c8:	bf00      	nop
 80051ca:	3728      	adds	r7, #40	; 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40023800 	.word	0x40023800
 80051d8:	40021000 	.word	0x40021000
 80051dc:	40000800 	.word	0x40000800
 80051e0:	40020400 	.word	0x40020400

080051e4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80051e8:	4b11      	ldr	r3, [pc, #68]	; (8005230 <MX_USART2_UART_Init+0x4c>)
 80051ea:	4a12      	ldr	r2, [pc, #72]	; (8005234 <MX_USART2_UART_Init+0x50>)
 80051ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80051ee:	4b10      	ldr	r3, [pc, #64]	; (8005230 <MX_USART2_UART_Init+0x4c>)
 80051f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80051f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80051f6:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <MX_USART2_UART_Init+0x4c>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80051fc:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <MX_USART2_UART_Init+0x4c>)
 80051fe:	2200      	movs	r2, #0
 8005200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <MX_USART2_UART_Init+0x4c>)
 8005204:	2200      	movs	r2, #0
 8005206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005208:	4b09      	ldr	r3, [pc, #36]	; (8005230 <MX_USART2_UART_Init+0x4c>)
 800520a:	220c      	movs	r2, #12
 800520c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800520e:	4b08      	ldr	r3, [pc, #32]	; (8005230 <MX_USART2_UART_Init+0x4c>)
 8005210:	2200      	movs	r2, #0
 8005212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005214:	4b06      	ldr	r3, [pc, #24]	; (8005230 <MX_USART2_UART_Init+0x4c>)
 8005216:	2200      	movs	r2, #0
 8005218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800521a:	4805      	ldr	r0, [pc, #20]	; (8005230 <MX_USART2_UART_Init+0x4c>)
 800521c:	f003 fd76 	bl	8008d0c <HAL_UART_Init>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005226:	f7ff fbf7 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800522a:	bf00      	nop
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	200006fc 	.word	0x200006fc
 8005234:	40004400 	.word	0x40004400

08005238 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800523c:	4b11      	ldr	r3, [pc, #68]	; (8005284 <MX_USART3_UART_Init+0x4c>)
 800523e:	4a12      	ldr	r2, [pc, #72]	; (8005288 <MX_USART3_UART_Init+0x50>)
 8005240:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <MX_USART3_UART_Init+0x4c>)
 8005244:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005248:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800524a:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <MX_USART3_UART_Init+0x4c>)
 800524c:	2200      	movs	r2, #0
 800524e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <MX_USART3_UART_Init+0x4c>)
 8005252:	2200      	movs	r2, #0
 8005254:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005256:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <MX_USART3_UART_Init+0x4c>)
 8005258:	2200      	movs	r2, #0
 800525a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <MX_USART3_UART_Init+0x4c>)
 800525e:	220c      	movs	r2, #12
 8005260:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005262:	4b08      	ldr	r3, [pc, #32]	; (8005284 <MX_USART3_UART_Init+0x4c>)
 8005264:	2200      	movs	r2, #0
 8005266:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005268:	4b06      	ldr	r3, [pc, #24]	; (8005284 <MX_USART3_UART_Init+0x4c>)
 800526a:	2200      	movs	r2, #0
 800526c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800526e:	4805      	ldr	r0, [pc, #20]	; (8005284 <MX_USART3_UART_Init+0x4c>)
 8005270:	f003 fd4c 	bl	8008d0c <HAL_UART_Init>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800527a:	f7ff fbcd 	bl	8004a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800527e:	bf00      	nop
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200005f8 	.word	0x200005f8
 8005288:	40004800 	.word	0x40004800

0800528c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	; 0x30
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005294:	f107 031c 	add.w	r3, r7, #28
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a4b      	ldr	r2, [pc, #300]	; (80053d8 <HAL_UART_MspInit+0x14c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f040 80a2 	bne.w	80053f4 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	4b49      	ldr	r3, [pc, #292]	; (80053dc <HAL_UART_MspInit+0x150>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	4a48      	ldr	r2, [pc, #288]	; (80053dc <HAL_UART_MspInit+0x150>)
 80052ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052be:	6413      	str	r3, [r2, #64]	; 0x40
 80052c0:	4b46      	ldr	r3, [pc, #280]	; (80053dc <HAL_UART_MspInit+0x150>)
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	4b42      	ldr	r3, [pc, #264]	; (80053dc <HAL_UART_MspInit+0x150>)
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	4a41      	ldr	r2, [pc, #260]	; (80053dc <HAL_UART_MspInit+0x150>)
 80052d6:	f043 0308 	orr.w	r3, r3, #8
 80052da:	6313      	str	r3, [r2, #48]	; 0x30
 80052dc:	4b3f      	ldr	r3, [pc, #252]	; (80053dc <HAL_UART_MspInit+0x150>)
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOW_TX_Pin|LOW_RX_Pin;
 80052e8:	2360      	movs	r3, #96	; 0x60
 80052ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ec:	2302      	movs	r3, #2
 80052ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052f4:	2303      	movs	r3, #3
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80052f8:	2307      	movs	r3, #7
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052fc:	f107 031c 	add.w	r3, r7, #28
 8005300:	4619      	mov	r1, r3
 8005302:	4837      	ldr	r0, [pc, #220]	; (80053e0 <HAL_UART_MspInit+0x154>)
 8005304:	f001 fb14 	bl	8006930 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005308:	4b36      	ldr	r3, [pc, #216]	; (80053e4 <HAL_UART_MspInit+0x158>)
 800530a:	4a37      	ldr	r2, [pc, #220]	; (80053e8 <HAL_UART_MspInit+0x15c>)
 800530c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800530e:	4b35      	ldr	r3, [pc, #212]	; (80053e4 <HAL_UART_MspInit+0x158>)
 8005310:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005314:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005316:	4b33      	ldr	r3, [pc, #204]	; (80053e4 <HAL_UART_MspInit+0x158>)
 8005318:	2200      	movs	r2, #0
 800531a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800531c:	4b31      	ldr	r3, [pc, #196]	; (80053e4 <HAL_UART_MspInit+0x158>)
 800531e:	2200      	movs	r2, #0
 8005320:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005322:	4b30      	ldr	r3, [pc, #192]	; (80053e4 <HAL_UART_MspInit+0x158>)
 8005324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005328:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800532a:	4b2e      	ldr	r3, [pc, #184]	; (80053e4 <HAL_UART_MspInit+0x158>)
 800532c:	2200      	movs	r2, #0
 800532e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005330:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <HAL_UART_MspInit+0x158>)
 8005332:	2200      	movs	r2, #0
 8005334:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005336:	4b2b      	ldr	r3, [pc, #172]	; (80053e4 <HAL_UART_MspInit+0x158>)
 8005338:	2200      	movs	r2, #0
 800533a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800533c:	4b29      	ldr	r3, [pc, #164]	; (80053e4 <HAL_UART_MspInit+0x158>)
 800533e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005342:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005344:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <HAL_UART_MspInit+0x158>)
 8005346:	2200      	movs	r2, #0
 8005348:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800534a:	4826      	ldr	r0, [pc, #152]	; (80053e4 <HAL_UART_MspInit+0x158>)
 800534c:	f000 feee 	bl	800612c <HAL_DMA_Init>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005356:	f7ff fb5f 	bl	8004a18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a21      	ldr	r2, [pc, #132]	; (80053e4 <HAL_UART_MspInit+0x158>)
 800535e:	639a      	str	r2, [r3, #56]	; 0x38
 8005360:	4a20      	ldr	r2, [pc, #128]	; (80053e4 <HAL_UART_MspInit+0x158>)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005366:	4b21      	ldr	r3, [pc, #132]	; (80053ec <HAL_UART_MspInit+0x160>)
 8005368:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <HAL_UART_MspInit+0x164>)
 800536a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800536c:	4b1f      	ldr	r3, [pc, #124]	; (80053ec <HAL_UART_MspInit+0x160>)
 800536e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005372:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005374:	4b1d      	ldr	r3, [pc, #116]	; (80053ec <HAL_UART_MspInit+0x160>)
 8005376:	2240      	movs	r2, #64	; 0x40
 8005378:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800537a:	4b1c      	ldr	r3, [pc, #112]	; (80053ec <HAL_UART_MspInit+0x160>)
 800537c:	2200      	movs	r2, #0
 800537e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <HAL_UART_MspInit+0x160>)
 8005382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005386:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005388:	4b18      	ldr	r3, [pc, #96]	; (80053ec <HAL_UART_MspInit+0x160>)
 800538a:	2200      	movs	r2, #0
 800538c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800538e:	4b17      	ldr	r3, [pc, #92]	; (80053ec <HAL_UART_MspInit+0x160>)
 8005390:	2200      	movs	r2, #0
 8005392:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005394:	4b15      	ldr	r3, [pc, #84]	; (80053ec <HAL_UART_MspInit+0x160>)
 8005396:	2200      	movs	r2, #0
 8005398:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800539a:	4b14      	ldr	r3, [pc, #80]	; (80053ec <HAL_UART_MspInit+0x160>)
 800539c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_UART_MspInit+0x160>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80053a8:	4810      	ldr	r0, [pc, #64]	; (80053ec <HAL_UART_MspInit+0x160>)
 80053aa:	f000 febf 	bl	800612c <HAL_DMA_Init>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80053b4:	f7ff fb30 	bl	8004a18 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a0c      	ldr	r2, [pc, #48]	; (80053ec <HAL_UART_MspInit+0x160>)
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34
 80053be:	4a0b      	ldr	r2, [pc, #44]	; (80053ec <HAL_UART_MspInit+0x160>)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80053c4:	2200      	movs	r2, #0
 80053c6:	2100      	movs	r1, #0
 80053c8:	2026      	movs	r0, #38	; 0x26
 80053ca:	f000 fe78 	bl	80060be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80053ce:	2026      	movs	r0, #38	; 0x26
 80053d0:	f000 fe91 	bl	80060f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80053d4:	e0c4      	b.n	8005560 <HAL_UART_MspInit+0x2d4>
 80053d6:	bf00      	nop
 80053d8:	40004400 	.word	0x40004400
 80053dc:	40023800 	.word	0x40023800
 80053e0:	40020c00 	.word	0x40020c00
 80053e4:	20000538 	.word	0x20000538
 80053e8:	40026088 	.word	0x40026088
 80053ec:	2000069c 	.word	0x2000069c
 80053f0:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a5b      	ldr	r2, [pc, #364]	; (8005568 <HAL_UART_MspInit+0x2dc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	f040 80b0 	bne.w	8005560 <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005400:	2300      	movs	r3, #0
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	4b59      	ldr	r3, [pc, #356]	; (800556c <HAL_UART_MspInit+0x2e0>)
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	4a58      	ldr	r2, [pc, #352]	; (800556c <HAL_UART_MspInit+0x2e0>)
 800540a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800540e:	6413      	str	r3, [r2, #64]	; 0x40
 8005410:	4b56      	ldr	r3, [pc, #344]	; (800556c <HAL_UART_MspInit+0x2e0>)
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	4b52      	ldr	r3, [pc, #328]	; (800556c <HAL_UART_MspInit+0x2e0>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	4a51      	ldr	r2, [pc, #324]	; (800556c <HAL_UART_MspInit+0x2e0>)
 8005426:	f043 0302 	orr.w	r3, r3, #2
 800542a:	6313      	str	r3, [r2, #48]	; 0x30
 800542c:	4b4f      	ldr	r3, [pc, #316]	; (800556c <HAL_UART_MspInit+0x2e0>)
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005438:	2300      	movs	r3, #0
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	4b4b      	ldr	r3, [pc, #300]	; (800556c <HAL_UART_MspInit+0x2e0>)
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	4a4a      	ldr	r2, [pc, #296]	; (800556c <HAL_UART_MspInit+0x2e0>)
 8005442:	f043 0308 	orr.w	r3, r3, #8
 8005446:	6313      	str	r3, [r2, #48]	; 0x30
 8005448:	4b48      	ldr	r3, [pc, #288]	; (800556c <HAL_UART_MspInit+0x2e0>)
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HIGH_RX_Pin;
 8005454:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545a:	2302      	movs	r3, #2
 800545c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545e:	2300      	movs	r3, #0
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005462:	2303      	movs	r3, #3
 8005464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005466:	2307      	movs	r3, #7
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_RX_GPIO_Port, &GPIO_InitStruct);
 800546a:	f107 031c 	add.w	r3, r7, #28
 800546e:	4619      	mov	r1, r3
 8005470:	483f      	ldr	r0, [pc, #252]	; (8005570 <HAL_UART_MspInit+0x2e4>)
 8005472:	f001 fa5d 	bl	8006930 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HIGH_TX_Pin;
 8005476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800547a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800547c:	2302      	movs	r3, #2
 800547e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005480:	2300      	movs	r3, #0
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005484:	2303      	movs	r3, #3
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005488:	2307      	movs	r3, #7
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_TX_GPIO_Port, &GPIO_InitStruct);
 800548c:	f107 031c 	add.w	r3, r7, #28
 8005490:	4619      	mov	r1, r3
 8005492:	4838      	ldr	r0, [pc, #224]	; (8005574 <HAL_UART_MspInit+0x2e8>)
 8005494:	f001 fa4c 	bl	8006930 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005498:	4b37      	ldr	r3, [pc, #220]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 800549a:	4a38      	ldr	r2, [pc, #224]	; (800557c <HAL_UART_MspInit+0x2f0>)
 800549c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800549e:	4b36      	ldr	r3, [pc, #216]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054a6:	4b34      	ldr	r3, [pc, #208]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054ac:	4b32      	ldr	r3, [pc, #200]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054b2:	4b31      	ldr	r3, [pc, #196]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054ba:	4b2f      	ldr	r3, [pc, #188]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054bc:	2200      	movs	r2, #0
 80054be:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054c0:	4b2d      	ldr	r3, [pc, #180]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80054c6:	4b2c      	ldr	r3, [pc, #176]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80054cc:	4b2a      	ldr	r3, [pc, #168]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054d2:	4b29      	ldr	r3, [pc, #164]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80054d8:	4827      	ldr	r0, [pc, #156]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054da:	f000 fe27 	bl	800612c <HAL_DMA_Init>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 80054e4:	f7ff fa98 	bl	8004a18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a23      	ldr	r2, [pc, #140]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
 80054ee:	4a22      	ldr	r2, [pc, #136]	; (8005578 <HAL_UART_MspInit+0x2ec>)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80054f4:	4b22      	ldr	r3, [pc, #136]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 80054f6:	4a23      	ldr	r2, [pc, #140]	; (8005584 <HAL_UART_MspInit+0x2f8>)
 80054f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 80054fa:	4b21      	ldr	r3, [pc, #132]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 80054fc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005500:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005502:	4b1f      	ldr	r3, [pc, #124]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 8005504:	2240      	movs	r2, #64	; 0x40
 8005506:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005508:	4b1d      	ldr	r3, [pc, #116]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 800550a:	2200      	movs	r2, #0
 800550c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800550e:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 8005510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005514:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005516:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 8005518:	2200      	movs	r2, #0
 800551a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800551c:	4b18      	ldr	r3, [pc, #96]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 800551e:	2200      	movs	r2, #0
 8005520:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005522:	4b17      	ldr	r3, [pc, #92]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 8005524:	2200      	movs	r2, #0
 8005526:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005528:	4b15      	ldr	r3, [pc, #84]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 800552a:	2200      	movs	r2, #0
 800552c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800552e:	4b14      	ldr	r3, [pc, #80]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 8005530:	2200      	movs	r2, #0
 8005532:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005534:	4812      	ldr	r0, [pc, #72]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 8005536:	f000 fdf9 	bl	800612c <HAL_DMA_Init>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8005540:	f7ff fa6a 	bl	8004a18 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a0e      	ldr	r2, [pc, #56]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 8005548:	635a      	str	r2, [r3, #52]	; 0x34
 800554a:	4a0d      	ldr	r2, [pc, #52]	; (8005580 <HAL_UART_MspInit+0x2f4>)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005550:	2200      	movs	r2, #0
 8005552:	2100      	movs	r1, #0
 8005554:	2027      	movs	r0, #39	; 0x27
 8005556:	f000 fdb2 	bl	80060be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800555a:	2027      	movs	r0, #39	; 0x27
 800555c:	f000 fdcb 	bl	80060f6 <HAL_NVIC_EnableIRQ>
}
 8005560:	bf00      	nop
 8005562:	3730      	adds	r7, #48	; 0x30
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40004800 	.word	0x40004800
 800556c:	40023800 	.word	0x40023800
 8005570:	40020400 	.word	0x40020400
 8005574:	40020c00 	.word	0x40020c00
 8005578:	20000598 	.word	0x20000598
 800557c:	40026028 	.word	0x40026028
 8005580:	2000063c 	.word	0x2000063c
 8005584:	40026070 	.word	0x40026070

08005588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800558c:	480d      	ldr	r0, [pc, #52]	; (80055c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800558e:	490e      	ldr	r1, [pc, #56]	; (80055c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005590:	4a0e      	ldr	r2, [pc, #56]	; (80055cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005594:	e002      	b.n	800559c <LoopCopyDataInit>

08005596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800559a:	3304      	adds	r3, #4

0800559c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800559c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800559e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055a0:	d3f9      	bcc.n	8005596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055a2:	4a0b      	ldr	r2, [pc, #44]	; (80055d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055a4:	4c0b      	ldr	r4, [pc, #44]	; (80055d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80055a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055a8:	e001      	b.n	80055ae <LoopFillZerobss>

080055aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055ac:	3204      	adds	r2, #4

080055ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055b0:	d3fb      	bcc.n	80055aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80055b2:	f7ff fb6b 	bl	8004c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055b6:	f004 ffab 	bl	800a510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055ba:	f7ff f875 	bl	80046a8 <main>
  bx  lr    
 80055be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80055cc:	0800a610 	.word	0x0800a610
  ldr r2, =_sbss
 80055d0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80055d4:	20000744 	.word	0x20000744

080055d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055d8:	e7fe      	b.n	80055d8 <ADC_IRQHandler>
	...

080055dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055e0:	4b0e      	ldr	r3, [pc, #56]	; (800561c <HAL_Init+0x40>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a0d      	ldr	r2, [pc, #52]	; (800561c <HAL_Init+0x40>)
 80055e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055ec:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_Init+0x40>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0a      	ldr	r2, [pc, #40]	; (800561c <HAL_Init+0x40>)
 80055f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055f8:	4b08      	ldr	r3, [pc, #32]	; (800561c <HAL_Init+0x40>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a07      	ldr	r2, [pc, #28]	; (800561c <HAL_Init+0x40>)
 80055fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005604:	2003      	movs	r0, #3
 8005606:	f000 fd4f 	bl	80060a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800560a:	200f      	movs	r0, #15
 800560c:	f000 f808 	bl	8005620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005610:	f7ff fa86 	bl	8004b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40023c00 	.word	0x40023c00

08005620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005628:	4b12      	ldr	r3, [pc, #72]	; (8005674 <HAL_InitTick+0x54>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b12      	ldr	r3, [pc, #72]	; (8005678 <HAL_InitTick+0x58>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	4619      	mov	r1, r3
 8005632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005636:	fbb3 f3f1 	udiv	r3, r3, r1
 800563a:	fbb2 f3f3 	udiv	r3, r2, r3
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fd67 	bl	8006112 <HAL_SYSTICK_Config>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e00e      	b.n	800566c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b0f      	cmp	r3, #15
 8005652:	d80a      	bhi.n	800566a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005654:	2200      	movs	r2, #0
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	f000 fd2f 	bl	80060be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005660:	4a06      	ldr	r2, [pc, #24]	; (800567c <HAL_InitTick+0x5c>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e000      	b.n	800566c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000004 	.word	0x20000004
 8005678:	2000000c 	.word	0x2000000c
 800567c:	20000008 	.word	0x20000008

08005680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005684:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_IncTick+0x20>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <HAL_IncTick+0x24>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4413      	add	r3, r2
 8005690:	4a04      	ldr	r2, [pc, #16]	; (80056a4 <HAL_IncTick+0x24>)
 8005692:	6013      	str	r3, [r2, #0]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	2000000c 	.word	0x2000000c
 80056a4:	20000740 	.word	0x20000740

080056a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return uwTick;
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <HAL_GetTick+0x14>)
 80056ae:	681b      	ldr	r3, [r3, #0]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20000740 	.word	0x20000740

080056c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056c8:	f7ff ffee 	bl	80056a8 <HAL_GetTick>
 80056cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d8:	d005      	beq.n	80056e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056da:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <HAL_Delay+0x44>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056e6:	bf00      	nop
 80056e8:	f7ff ffde 	bl	80056a8 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d8f7      	bhi.n	80056e8 <HAL_Delay+0x28>
  {
  }
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	2000000c 	.word	0x2000000c

08005708 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e033      	b.n	8005786 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fd f9c4 	bl	8002ab4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f003 0310 	and.w	r3, r3, #16
 8005742:	2b00      	cmp	r3, #0
 8005744:	d118      	bne.n	8005778 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800574e:	f023 0302 	bic.w	r3, r3, #2
 8005752:	f043 0202 	orr.w	r2, r3, #2
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fad8 	bl	8005d10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f023 0303 	bic.w	r3, r3, #3
 800576e:	f043 0201 	orr.w	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	641a      	str	r2, [r3, #64]	; 0x40
 8005776:	e001      	b.n	800577c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_ADC_Start+0x1a>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e0b2      	b.n	8005910 <HAL_ADC_Start+0x180>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d018      	beq.n	80057f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057d0:	4b52      	ldr	r3, [pc, #328]	; (800591c <HAL_ADC_Start+0x18c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a52      	ldr	r2, [pc, #328]	; (8005920 <HAL_ADC_Start+0x190>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	0c9a      	lsrs	r2, r3, #18
 80057dc:	4613      	mov	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4413      	add	r3, r2
 80057e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80057e4:	e002      	b.n	80057ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f9      	bne.n	80057e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d17a      	bne.n	80058f6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800582a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800583a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583e:	d106      	bne.n	800584e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005844:	f023 0206 	bic.w	r2, r3, #6
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	645a      	str	r2, [r3, #68]	; 0x44
 800584c:	e002      	b.n	8005854 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800585c:	4b31      	ldr	r3, [pc, #196]	; (8005924 <HAL_ADC_Start+0x194>)
 800585e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005868:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	2b00      	cmp	r3, #0
 8005874:	d12a      	bne.n	80058cc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a2b      	ldr	r2, [pc, #172]	; (8005928 <HAL_ADC_Start+0x198>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d015      	beq.n	80058ac <HAL_ADC_Start+0x11c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a29      	ldr	r2, [pc, #164]	; (800592c <HAL_ADC_Start+0x19c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d105      	bne.n	8005896 <HAL_ADC_Start+0x106>
 800588a:	4b26      	ldr	r3, [pc, #152]	; (8005924 <HAL_ADC_Start+0x194>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a25      	ldr	r2, [pc, #148]	; (8005930 <HAL_ADC_Start+0x1a0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d136      	bne.n	800590e <HAL_ADC_Start+0x17e>
 80058a0:	4b20      	ldr	r3, [pc, #128]	; (8005924 <HAL_ADC_Start+0x194>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f003 0310 	and.w	r3, r3, #16
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d130      	bne.n	800590e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d129      	bne.n	800590e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80058c8:	609a      	str	r2, [r3, #8]
 80058ca:	e020      	b.n	800590e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a15      	ldr	r2, [pc, #84]	; (8005928 <HAL_ADC_Start+0x198>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d11b      	bne.n	800590e <HAL_ADC_Start+0x17e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d114      	bne.n	800590e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80058f2:	609a      	str	r2, [r3, #8]
 80058f4:	e00b      	b.n	800590e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	f043 0210 	orr.w	r2, r3, #16
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	f043 0201 	orr.w	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	20000004 	.word	0x20000004
 8005920:	431bde83 	.word	0x431bde83
 8005924:	40012300 	.word	0x40012300
 8005928:	40012000 	.word	0x40012000
 800592c:	40012100 	.word	0x40012100
 8005930:	40012200 	.word	0x40012200

08005934 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_ADC_Stop+0x16>
 8005946:	2302      	movs	r3, #2
 8005948:	e021      	b.n	800598e <HAL_ADC_Stop+0x5a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0201 	bic.w	r2, r2, #1
 8005960:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d109      	bne.n	8005984 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	f043 0201 	orr.w	r2, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b6:	d113      	bne.n	80059e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80059c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c6:	d10b      	bne.n	80059e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	f043 0220 	orr.w	r2, r3, #32
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e063      	b.n	8005aa8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80059e0:	f7ff fe62 	bl	80056a8 <HAL_GetTick>
 80059e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80059e6:	e021      	b.n	8005a2c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d01d      	beq.n	8005a2c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <HAL_ADC_PollForConversion+0x6c>
 80059f6:	f7ff fe57 	bl	80056a8 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d212      	bcs.n	8005a2c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d00b      	beq.n	8005a2c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a18:	f043 0204 	orr.w	r2, r3, #4
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e03d      	b.n	8005aa8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d1d6      	bne.n	80059e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f06f 0212 	mvn.w	r2, #18
 8005a42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d123      	bne.n	8005aa6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d11f      	bne.n	8005aa6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d006      	beq.n	8005a82 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d111      	bne.n	8005aa6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d105      	bne.n	8005aa6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f043 0201 	orr.w	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
	...

08005acc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d101      	bne.n	8005ae8 <HAL_ADC_ConfigChannel+0x1c>
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	e105      	b.n	8005cf4 <HAL_ADC_ConfigChannel+0x228>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b09      	cmp	r3, #9
 8005af6:	d925      	bls.n	8005b44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68d9      	ldr	r1, [r3, #12]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	4613      	mov	r3, r2
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3b1e      	subs	r3, #30
 8005b0e:	2207      	movs	r2, #7
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	43da      	mvns	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	400a      	ands	r2, r1
 8005b1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68d9      	ldr	r1, [r3, #12]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	4618      	mov	r0, r3
 8005b30:	4603      	mov	r3, r0
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4403      	add	r3, r0
 8005b36:	3b1e      	subs	r3, #30
 8005b38:	409a      	lsls	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	60da      	str	r2, [r3, #12]
 8005b42:	e022      	b.n	8005b8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6919      	ldr	r1, [r3, #16]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	4613      	mov	r3, r2
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	4413      	add	r3, r2
 8005b58:	2207      	movs	r2, #7
 8005b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5e:	43da      	mvns	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	400a      	ands	r2, r1
 8005b66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6919      	ldr	r1, [r3, #16]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	4618      	mov	r0, r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	4403      	add	r3, r0
 8005b80:	409a      	lsls	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d824      	bhi.n	8005bdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3b05      	subs	r3, #5
 8005ba4:	221f      	movs	r2, #31
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	43da      	mvns	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	400a      	ands	r2, r1
 8005bb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	3b05      	subs	r3, #5
 8005bce:	fa00 f203 	lsl.w	r2, r0, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8005bda:	e04c      	b.n	8005c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b0c      	cmp	r3, #12
 8005be2:	d824      	bhi.n	8005c2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3b23      	subs	r3, #35	; 0x23
 8005bf6:	221f      	movs	r2, #31
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	43da      	mvns	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	400a      	ands	r2, r1
 8005c04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	4618      	mov	r0, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3b23      	subs	r3, #35	; 0x23
 8005c20:	fa00 f203 	lsl.w	r2, r0, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c2c:	e023      	b.n	8005c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3b41      	subs	r3, #65	; 0x41
 8005c40:	221f      	movs	r2, #31
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43da      	mvns	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	400a      	ands	r2, r1
 8005c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	3b41      	subs	r3, #65	; 0x41
 8005c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c76:	4b22      	ldr	r3, [pc, #136]	; (8005d00 <HAL_ADC_ConfigChannel+0x234>)
 8005c78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a21      	ldr	r2, [pc, #132]	; (8005d04 <HAL_ADC_ConfigChannel+0x238>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d109      	bne.n	8005c98 <HAL_ADC_ConfigChannel+0x1cc>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b12      	cmp	r3, #18
 8005c8a:	d105      	bne.n	8005c98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <HAL_ADC_ConfigChannel+0x238>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d123      	bne.n	8005cea <HAL_ADC_ConfigChannel+0x21e>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d003      	beq.n	8005cb2 <HAL_ADC_ConfigChannel+0x1e6>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b11      	cmp	r3, #17
 8005cb0:	d11b      	bne.n	8005cea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d111      	bne.n	8005cea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <HAL_ADC_ConfigChannel+0x23c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a10      	ldr	r2, [pc, #64]	; (8005d0c <HAL_ADC_ConfigChannel+0x240>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	0c9a      	lsrs	r2, r3, #18
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005cdc:	e002      	b.n	8005ce4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f9      	bne.n	8005cde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40012300 	.word	0x40012300
 8005d04:	40012000 	.word	0x40012000
 8005d08:	20000004 	.word	0x20000004
 8005d0c:	431bde83 	.word	0x431bde83

08005d10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d18:	4b79      	ldr	r3, [pc, #484]	; (8005f00 <ADC_Init+0x1f0>)
 8005d1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6859      	ldr	r1, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	021a      	lsls	r2, r3, #8
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6859      	ldr	r1, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6899      	ldr	r1, [r3, #8]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	4a58      	ldr	r2, [pc, #352]	; (8005f04 <ADC_Init+0x1f4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d022      	beq.n	8005dee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005db6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6899      	ldr	r1, [r3, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6899      	ldr	r1, [r3, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	e00f      	b.n	8005e0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0202 	bic.w	r2, r2, #2
 8005e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6899      	ldr	r1, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	7e1b      	ldrb	r3, [r3, #24]
 8005e28:	005a      	lsls	r2, r3, #1
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01b      	beq.n	8005e74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005e5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6859      	ldr	r1, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	3b01      	subs	r3, #1
 8005e68:	035a      	lsls	r2, r3, #13
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
 8005e72:	e007      	b.n	8005e84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	051a      	lsls	r2, r3, #20
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6899      	ldr	r1, [r3, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ec6:	025a      	lsls	r2, r3, #9
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6899      	ldr	r1, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	029a      	lsls	r2, r3, #10
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	40012300 	.word	0x40012300
 8005f04:	0f000001 	.word	0x0f000001

08005f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f18:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <__NVIC_SetPriorityGrouping+0x44>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f24:	4013      	ands	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f3a:	4a04      	ldr	r2, [pc, #16]	; (8005f4c <__NVIC_SetPriorityGrouping+0x44>)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	60d3      	str	r3, [r2, #12]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	e000ed00 	.word	0xe000ed00

08005f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f54:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <__NVIC_GetPriorityGrouping+0x18>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	f003 0307 	and.w	r3, r3, #7
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	e000ed00 	.word	0xe000ed00

08005f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	db0b      	blt.n	8005f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	f003 021f 	and.w	r2, r3, #31
 8005f84:	4907      	ldr	r1, [pc, #28]	; (8005fa4 <__NVIC_EnableIRQ+0x38>)
 8005f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	e000e100 	.word	0xe000e100

08005fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	6039      	str	r1, [r7, #0]
 8005fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	db0a      	blt.n	8005fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	490c      	ldr	r1, [pc, #48]	; (8005ff4 <__NVIC_SetPriority+0x4c>)
 8005fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc6:	0112      	lsls	r2, r2, #4
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	440b      	add	r3, r1
 8005fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fd0:	e00a      	b.n	8005fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	4908      	ldr	r1, [pc, #32]	; (8005ff8 <__NVIC_SetPriority+0x50>)
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	3b04      	subs	r3, #4
 8005fe0:	0112      	lsls	r2, r2, #4
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	761a      	strb	r2, [r3, #24]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	e000e100 	.word	0xe000e100
 8005ff8:	e000ed00 	.word	0xe000ed00

08005ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b089      	sub	sp, #36	; 0x24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	f1c3 0307 	rsb	r3, r3, #7
 8006016:	2b04      	cmp	r3, #4
 8006018:	bf28      	it	cs
 800601a:	2304      	movcs	r3, #4
 800601c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	3304      	adds	r3, #4
 8006022:	2b06      	cmp	r3, #6
 8006024:	d902      	bls.n	800602c <NVIC_EncodePriority+0x30>
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	3b03      	subs	r3, #3
 800602a:	e000      	b.n	800602e <NVIC_EncodePriority+0x32>
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006030:	f04f 32ff 	mov.w	r2, #4294967295
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	fa02 f303 	lsl.w	r3, r2, r3
 800603a:	43da      	mvns	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	401a      	ands	r2, r3
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006044:	f04f 31ff 	mov.w	r1, #4294967295
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	43d9      	mvns	r1, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006054:	4313      	orrs	r3, r2
         );
}
 8006056:	4618      	mov	r0, r3
 8006058:	3724      	adds	r7, #36	; 0x24
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3b01      	subs	r3, #1
 8006070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006074:	d301      	bcc.n	800607a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006076:	2301      	movs	r3, #1
 8006078:	e00f      	b.n	800609a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800607a:	4a0a      	ldr	r2, [pc, #40]	; (80060a4 <SysTick_Config+0x40>)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3b01      	subs	r3, #1
 8006080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006082:	210f      	movs	r1, #15
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	f7ff ff8e 	bl	8005fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <SysTick_Config+0x40>)
 800608e:	2200      	movs	r2, #0
 8006090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006092:	4b04      	ldr	r3, [pc, #16]	; (80060a4 <SysTick_Config+0x40>)
 8006094:	2207      	movs	r2, #7
 8006096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	e000e010 	.word	0xe000e010

080060a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff ff29 	bl	8005f08 <__NVIC_SetPriorityGrouping>
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060be:	b580      	push	{r7, lr}
 80060c0:	b086      	sub	sp, #24
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	4603      	mov	r3, r0
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060d0:	f7ff ff3e 	bl	8005f50 <__NVIC_GetPriorityGrouping>
 80060d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	6978      	ldr	r0, [r7, #20]
 80060dc:	f7ff ff8e 	bl	8005ffc <NVIC_EncodePriority>
 80060e0:	4602      	mov	r2, r0
 80060e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060e6:	4611      	mov	r1, r2
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff ff5d 	bl	8005fa8 <__NVIC_SetPriority>
}
 80060ee:	bf00      	nop
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	4603      	mov	r3, r0
 80060fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff ff31 	bl	8005f6c <__NVIC_EnableIRQ>
}
 800610a:	bf00      	nop
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff ffa2 	bl	8006064 <SysTick_Config>
 8006120:	4603      	mov	r3, r0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006138:	f7ff fab6 	bl	80056a8 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e099      	b.n	800627c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006168:	e00f      	b.n	800618a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800616a:	f7ff fa9d 	bl	80056a8 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b05      	cmp	r3, #5
 8006176:	d908      	bls.n	800618a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2203      	movs	r2, #3
 8006182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e078      	b.n	800627c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e8      	bne.n	800616a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4b38      	ldr	r3, [pc, #224]	; (8006284 <HAL_DMA_Init+0x158>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d107      	bne.n	80061f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	4313      	orrs	r3, r2
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0307 	bic.w	r3, r3, #7
 800620a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	2b04      	cmp	r3, #4
 800621c:	d117      	bne.n	800624e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00e      	beq.n	800624e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fb01 	bl	8006838 <DMA_CheckFifoParam>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2240      	movs	r2, #64	; 0x40
 8006240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800624a:	2301      	movs	r3, #1
 800624c:	e016      	b.n	800627c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fab8 	bl	80067cc <DMA_CalcBaseAndBitshift>
 800625c:	4603      	mov	r3, r0
 800625e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006264:	223f      	movs	r2, #63	; 0x3f
 8006266:	409a      	lsls	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	f010803f 	.word	0xf010803f

08006288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_DMA_Start_IT+0x26>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e040      	b.n	8006330 <HAL_DMA_Start_IT+0xa8>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d12f      	bne.n	8006322 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 fa4a 	bl	8006770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e0:	223f      	movs	r2, #63	; 0x3f
 80062e2:	409a      	lsls	r2, r3
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0216 	orr.w	r2, r2, #22
 80062f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d007      	beq.n	8006310 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0208 	orr.w	r2, r2, #8
 800630e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e005      	b.n	800632e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800632a:	2302      	movs	r3, #2
 800632c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006346:	f7ff f9af 	bl	80056a8 <HAL_GetTick>
 800634a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d008      	beq.n	800636a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2280      	movs	r2, #128	; 0x80
 800635c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e052      	b.n	8006410 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0216 	bic.w	r2, r2, #22
 8006378:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695a      	ldr	r2, [r3, #20]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006388:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d103      	bne.n	800639a <HAL_DMA_Abort+0x62>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0208 	bic.w	r2, r2, #8
 80063a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0201 	bic.w	r2, r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063ba:	e013      	b.n	80063e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063bc:	f7ff f974 	bl	80056a8 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b05      	cmp	r3, #5
 80063c8:	d90c      	bls.n	80063e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2203      	movs	r2, #3
 80063d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e015      	b.n	8006410 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e4      	bne.n	80063bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f6:	223f      	movs	r2, #63	; 0x3f
 80063f8:	409a      	lsls	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d004      	beq.n	8006436 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2280      	movs	r2, #128	; 0x80
 8006430:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e00c      	b.n	8006450 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2205      	movs	r2, #5
 800643a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0201 	bic.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006468:	4b92      	ldr	r3, [pc, #584]	; (80066b4 <HAL_DMA_IRQHandler+0x258>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a92      	ldr	r2, [pc, #584]	; (80066b8 <HAL_DMA_IRQHandler+0x25c>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	0a9b      	lsrs	r3, r3, #10
 8006474:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006486:	2208      	movs	r2, #8
 8006488:	409a      	lsls	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4013      	ands	r3, r2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01a      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d013      	beq.n	80064c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0204 	bic.w	r2, r2, #4
 80064ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b4:	2208      	movs	r2, #8
 80064b6:	409a      	lsls	r2, r3
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c0:	f043 0201 	orr.w	r2, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064cc:	2201      	movs	r2, #1
 80064ce:	409a      	lsls	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d012      	beq.n	80064fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00b      	beq.n	80064fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ea:	2201      	movs	r2, #1
 80064ec:	409a      	lsls	r2, r3
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	f043 0202 	orr.w	r2, r3, #2
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006502:	2204      	movs	r2, #4
 8006504:	409a      	lsls	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4013      	ands	r3, r2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d012      	beq.n	8006534 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00b      	beq.n	8006534 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006520:	2204      	movs	r2, #4
 8006522:	409a      	lsls	r2, r3
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652c:	f043 0204 	orr.w	r2, r3, #4
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006538:	2210      	movs	r2, #16
 800653a:	409a      	lsls	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4013      	ands	r3, r2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d043      	beq.n	80065cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d03c      	beq.n	80065cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006556:	2210      	movs	r2, #16
 8006558:	409a      	lsls	r2, r3
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d018      	beq.n	800659e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d108      	bne.n	800658c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	d024      	beq.n	80065cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
 800658a:	e01f      	b.n	80065cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
 800659c:	e016      	b.n	80065cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d107      	bne.n	80065bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0208 	bic.w	r2, r2, #8
 80065ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d0:	2220      	movs	r2, #32
 80065d2:	409a      	lsls	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4013      	ands	r3, r2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 808e 	beq.w	80066fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 8086 	beq.w	80066fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f2:	2220      	movs	r2, #32
 80065f4:	409a      	lsls	r2, r3
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b05      	cmp	r3, #5
 8006604:	d136      	bne.n	8006674 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0216 	bic.w	r2, r2, #22
 8006614:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695a      	ldr	r2, [r3, #20]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006624:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d103      	bne.n	8006636 <HAL_DMA_IRQHandler+0x1da>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0208 	bic.w	r2, r2, #8
 8006644:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664a:	223f      	movs	r2, #63	; 0x3f
 800664c:	409a      	lsls	r2, r3
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006666:	2b00      	cmp	r3, #0
 8006668:	d07d      	beq.n	8006766 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
        }
        return;
 8006672:	e078      	b.n	8006766 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01c      	beq.n	80066bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d108      	bne.n	80066a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006694:	2b00      	cmp	r3, #0
 8006696:	d030      	beq.n	80066fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	4798      	blx	r3
 80066a0:	e02b      	b.n	80066fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d027      	beq.n	80066fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
 80066b2:	e022      	b.n	80066fa <HAL_DMA_IRQHandler+0x29e>
 80066b4:	20000004 	.word	0x20000004
 80066b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10f      	bne.n	80066ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0210 	bic.w	r2, r2, #16
 80066d8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d032      	beq.n	8006768 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d022      	beq.n	8006754 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2205      	movs	r2, #5
 8006712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	3301      	adds	r3, #1
 800672a:	60bb      	str	r3, [r7, #8]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	429a      	cmp	r2, r3
 8006730:	d307      	bcc.n	8006742 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1f2      	bne.n	8006726 <HAL_DMA_IRQHandler+0x2ca>
 8006740:	e000      	b.n	8006744 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006742:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
 8006764:	e000      	b.n	8006768 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006766:	bf00      	nop
    }
  }
}
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop

08006770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800678c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b40      	cmp	r3, #64	; 0x40
 800679c:	d108      	bne.n	80067b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067ae:	e007      	b.n	80067c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	60da      	str	r2, [r3, #12]
}
 80067c0:	bf00      	nop
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	3b10      	subs	r3, #16
 80067dc:	4a14      	ldr	r2, [pc, #80]	; (8006830 <DMA_CalcBaseAndBitshift+0x64>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	091b      	lsrs	r3, r3, #4
 80067e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067e6:	4a13      	ldr	r2, [pc, #76]	; (8006834 <DMA_CalcBaseAndBitshift+0x68>)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d909      	bls.n	800680e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	1d1a      	adds	r2, r3, #4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	659a      	str	r2, [r3, #88]	; 0x58
 800680c:	e007      	b.n	800681e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006816:	f023 0303 	bic.w	r3, r3, #3
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	aaaaaaab 	.word	0xaaaaaaab
 8006834:	0800a5bc 	.word	0x0800a5bc

08006838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d11f      	bne.n	8006892 <DMA_CheckFifoParam+0x5a>
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d856      	bhi.n	8006906 <DMA_CheckFifoParam+0xce>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <DMA_CheckFifoParam+0x28>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006871 	.word	0x08006871
 8006864:	08006883 	.word	0x08006883
 8006868:	08006871 	.word	0x08006871
 800686c:	08006907 	.word	0x08006907
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d046      	beq.n	800690a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006880:	e043      	b.n	800690a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800688a:	d140      	bne.n	800690e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006890:	e03d      	b.n	800690e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689a:	d121      	bne.n	80068e0 <DMA_CheckFifoParam+0xa8>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d837      	bhi.n	8006912 <DMA_CheckFifoParam+0xda>
 80068a2:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <DMA_CheckFifoParam+0x70>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	080068b9 	.word	0x080068b9
 80068ac:	080068bf 	.word	0x080068bf
 80068b0:	080068b9 	.word	0x080068b9
 80068b4:	080068d1 	.word	0x080068d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	73fb      	strb	r3, [r7, #15]
      break;
 80068bc:	e030      	b.n	8006920 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d025      	beq.n	8006916 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ce:	e022      	b.n	8006916 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068d8:	d11f      	bne.n	800691a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068de:	e01c      	b.n	800691a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d903      	bls.n	80068ee <DMA_CheckFifoParam+0xb6>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d003      	beq.n	80068f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068ec:	e018      	b.n	8006920 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	73fb      	strb	r3, [r7, #15]
      break;
 80068f2:	e015      	b.n	8006920 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00e      	beq.n	800691e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	73fb      	strb	r3, [r7, #15]
      break;
 8006904:	e00b      	b.n	800691e <DMA_CheckFifoParam+0xe6>
      break;
 8006906:	bf00      	nop
 8006908:	e00a      	b.n	8006920 <DMA_CheckFifoParam+0xe8>
      break;
 800690a:	bf00      	nop
 800690c:	e008      	b.n	8006920 <DMA_CheckFifoParam+0xe8>
      break;
 800690e:	bf00      	nop
 8006910:	e006      	b.n	8006920 <DMA_CheckFifoParam+0xe8>
      break;
 8006912:	bf00      	nop
 8006914:	e004      	b.n	8006920 <DMA_CheckFifoParam+0xe8>
      break;
 8006916:	bf00      	nop
 8006918:	e002      	b.n	8006920 <DMA_CheckFifoParam+0xe8>
      break;   
 800691a:	bf00      	nop
 800691c:	e000      	b.n	8006920 <DMA_CheckFifoParam+0xe8>
      break;
 800691e:	bf00      	nop
    }
  } 
  
  return status; 
 8006920:	7bfb      	ldrb	r3, [r7, #15]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop

08006930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006930:	b480      	push	{r7}
 8006932:	b089      	sub	sp, #36	; 0x24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006942:	2300      	movs	r3, #0
 8006944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006946:	2300      	movs	r3, #0
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	e16b      	b.n	8006c24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800694c:	2201      	movs	r2, #1
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	fa02 f303 	lsl.w	r3, r2, r3
 8006954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4013      	ands	r3, r2
 800695e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	429a      	cmp	r2, r3
 8006966:	f040 815a 	bne.w	8006c1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	2b01      	cmp	r3, #1
 8006974:	d005      	beq.n	8006982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800697e:	2b02      	cmp	r3, #2
 8006980:	d130      	bne.n	80069e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	2203      	movs	r2, #3
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	43db      	mvns	r3, r3
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	4013      	ands	r3, r2
 8006998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069b8:	2201      	movs	r2, #1
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	fa02 f303 	lsl.w	r3, r2, r3
 80069c0:	43db      	mvns	r3, r3
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	4013      	ands	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	091b      	lsrs	r3, r3, #4
 80069ce:	f003 0201 	and.w	r2, r3, #1
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4313      	orrs	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f003 0303 	and.w	r3, r3, #3
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d017      	beq.n	8006a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	2203      	movs	r2, #3
 80069fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006a00:	43db      	mvns	r3, r3
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	4013      	ands	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f003 0303 	and.w	r3, r3, #3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d123      	bne.n	8006a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	08da      	lsrs	r2, r3, #3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3208      	adds	r2, #8
 8006a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	f003 0307 	and.w	r3, r3, #7
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	220f      	movs	r2, #15
 8006a44:	fa02 f303 	lsl.w	r3, r2, r3
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	691a      	ldr	r2, [r3, #16]
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	08da      	lsrs	r2, r3, #3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3208      	adds	r2, #8
 8006a6e:	69b9      	ldr	r1, [r7, #24]
 8006a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	2203      	movs	r2, #3
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	43db      	mvns	r3, r3
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f003 0203 	and.w	r2, r3, #3
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 80b4 	beq.w	8006c1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	4b60      	ldr	r3, [pc, #384]	; (8006c3c <HAL_GPIO_Init+0x30c>)
 8006abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006abe:	4a5f      	ldr	r2, [pc, #380]	; (8006c3c <HAL_GPIO_Init+0x30c>)
 8006ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ac6:	4b5d      	ldr	r3, [pc, #372]	; (8006c3c <HAL_GPIO_Init+0x30c>)
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ad2:	4a5b      	ldr	r2, [pc, #364]	; (8006c40 <HAL_GPIO_Init+0x310>)
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	3302      	adds	r3, #2
 8006ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	220f      	movs	r2, #15
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	43db      	mvns	r3, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4013      	ands	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a52      	ldr	r2, [pc, #328]	; (8006c44 <HAL_GPIO_Init+0x314>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d02b      	beq.n	8006b56 <HAL_GPIO_Init+0x226>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a51      	ldr	r2, [pc, #324]	; (8006c48 <HAL_GPIO_Init+0x318>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d025      	beq.n	8006b52 <HAL_GPIO_Init+0x222>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a50      	ldr	r2, [pc, #320]	; (8006c4c <HAL_GPIO_Init+0x31c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d01f      	beq.n	8006b4e <HAL_GPIO_Init+0x21e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a4f      	ldr	r2, [pc, #316]	; (8006c50 <HAL_GPIO_Init+0x320>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d019      	beq.n	8006b4a <HAL_GPIO_Init+0x21a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a4e      	ldr	r2, [pc, #312]	; (8006c54 <HAL_GPIO_Init+0x324>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <HAL_GPIO_Init+0x216>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a4d      	ldr	r2, [pc, #308]	; (8006c58 <HAL_GPIO_Init+0x328>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00d      	beq.n	8006b42 <HAL_GPIO_Init+0x212>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a4c      	ldr	r2, [pc, #304]	; (8006c5c <HAL_GPIO_Init+0x32c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d007      	beq.n	8006b3e <HAL_GPIO_Init+0x20e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a4b      	ldr	r2, [pc, #300]	; (8006c60 <HAL_GPIO_Init+0x330>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d101      	bne.n	8006b3a <HAL_GPIO_Init+0x20a>
 8006b36:	2307      	movs	r3, #7
 8006b38:	e00e      	b.n	8006b58 <HAL_GPIO_Init+0x228>
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	e00c      	b.n	8006b58 <HAL_GPIO_Init+0x228>
 8006b3e:	2306      	movs	r3, #6
 8006b40:	e00a      	b.n	8006b58 <HAL_GPIO_Init+0x228>
 8006b42:	2305      	movs	r3, #5
 8006b44:	e008      	b.n	8006b58 <HAL_GPIO_Init+0x228>
 8006b46:	2304      	movs	r3, #4
 8006b48:	e006      	b.n	8006b58 <HAL_GPIO_Init+0x228>
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e004      	b.n	8006b58 <HAL_GPIO_Init+0x228>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e002      	b.n	8006b58 <HAL_GPIO_Init+0x228>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <HAL_GPIO_Init+0x228>
 8006b56:	2300      	movs	r3, #0
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	f002 0203 	and.w	r2, r2, #3
 8006b5e:	0092      	lsls	r2, r2, #2
 8006b60:	4093      	lsls	r3, r2
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b68:	4935      	ldr	r1, [pc, #212]	; (8006c40 <HAL_GPIO_Init+0x310>)
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	089b      	lsrs	r3, r3, #2
 8006b6e:	3302      	adds	r3, #2
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b76:	4b3b      	ldr	r3, [pc, #236]	; (8006c64 <HAL_GPIO_Init+0x334>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	43db      	mvns	r3, r3
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	4013      	ands	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b9a:	4a32      	ldr	r2, [pc, #200]	; (8006c64 <HAL_GPIO_Init+0x334>)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006ba0:	4b30      	ldr	r3, [pc, #192]	; (8006c64 <HAL_GPIO_Init+0x334>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4013      	ands	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bc4:	4a27      	ldr	r2, [pc, #156]	; (8006c64 <HAL_GPIO_Init+0x334>)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bca:	4b26      	ldr	r3, [pc, #152]	; (8006c64 <HAL_GPIO_Init+0x334>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006bee:	4a1d      	ldr	r2, [pc, #116]	; (8006c64 <HAL_GPIO_Init+0x334>)
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	; (8006c64 <HAL_GPIO_Init+0x334>)
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	4013      	ands	r3, r2
 8006c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c18:	4a12      	ldr	r2, [pc, #72]	; (8006c64 <HAL_GPIO_Init+0x334>)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	3301      	adds	r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	2b0f      	cmp	r3, #15
 8006c28:	f67f ae90 	bls.w	800694c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	3724      	adds	r7, #36	; 0x24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	40013800 	.word	0x40013800
 8006c44:	40020000 	.word	0x40020000
 8006c48:	40020400 	.word	0x40020400
 8006c4c:	40020800 	.word	0x40020800
 8006c50:	40020c00 	.word	0x40020c00
 8006c54:	40021000 	.word	0x40021000
 8006c58:	40021400 	.word	0x40021400
 8006c5c:	40021800 	.word	0x40021800
 8006c60:	40021c00 	.word	0x40021c00
 8006c64:	40013c00 	.word	0x40013c00

08006c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	887b      	ldrh	r3, [r7, #2]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c80:	2301      	movs	r3, #1
 8006c82:	73fb      	strb	r3, [r7, #15]
 8006c84:	e001      	b.n	8006c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c86:	2300      	movs	r3, #0
 8006c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	807b      	strh	r3, [r7, #2]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ca8:	787b      	ldrb	r3, [r7, #1]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cae:	887a      	ldrh	r2, [r7, #2]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006cb4:	e003      	b.n	8006cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006cb6:	887b      	ldrh	r3, [r7, #2]
 8006cb8:	041a      	lsls	r2, r3, #16
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	619a      	str	r2, [r3, #24]
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b085      	sub	sp, #20
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006cdc:	887a      	ldrh	r2, [r7, #2]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	041a      	lsls	r2, r3, #16
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	43d9      	mvns	r1, r3
 8006ce8:	887b      	ldrh	r3, [r7, #2]
 8006cea:	400b      	ands	r3, r1
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	619a      	str	r2, [r3, #24]
}
 8006cf2:	bf00      	nop
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
	...

08006d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e264      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d075      	beq.n	8006e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d1e:	4ba3      	ldr	r3, [pc, #652]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 030c 	and.w	r3, r3, #12
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d00c      	beq.n	8006d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d2a:	4ba0      	ldr	r3, [pc, #640]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d32:	2b08      	cmp	r3, #8
 8006d34:	d112      	bne.n	8006d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d36:	4b9d      	ldr	r3, [pc, #628]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d42:	d10b      	bne.n	8006d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d44:	4b99      	ldr	r3, [pc, #612]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d05b      	beq.n	8006e08 <HAL_RCC_OscConfig+0x108>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d157      	bne.n	8006e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e23f      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d64:	d106      	bne.n	8006d74 <HAL_RCC_OscConfig+0x74>
 8006d66:	4b91      	ldr	r3, [pc, #580]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a90      	ldr	r2, [pc, #576]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	e01d      	b.n	8006db0 <HAL_RCC_OscConfig+0xb0>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d7c:	d10c      	bne.n	8006d98 <HAL_RCC_OscConfig+0x98>
 8006d7e:	4b8b      	ldr	r3, [pc, #556]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a8a      	ldr	r2, [pc, #552]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	4b88      	ldr	r3, [pc, #544]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a87      	ldr	r2, [pc, #540]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	e00b      	b.n	8006db0 <HAL_RCC_OscConfig+0xb0>
 8006d98:	4b84      	ldr	r3, [pc, #528]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a83      	ldr	r2, [pc, #524]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	4b81      	ldr	r3, [pc, #516]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a80      	ldr	r2, [pc, #512]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d013      	beq.n	8006de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db8:	f7fe fc76 	bl	80056a8 <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006dc0:	f7fe fc72 	bl	80056a8 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b64      	cmp	r3, #100	; 0x64
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e204      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dd2:	4b76      	ldr	r3, [pc, #472]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0f0      	beq.n	8006dc0 <HAL_RCC_OscConfig+0xc0>
 8006dde:	e014      	b.n	8006e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de0:	f7fe fc62 	bl	80056a8 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006de8:	f7fe fc5e 	bl	80056a8 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b64      	cmp	r3, #100	; 0x64
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e1f0      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dfa:	4b6c      	ldr	r3, [pc, #432]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1f0      	bne.n	8006de8 <HAL_RCC_OscConfig+0xe8>
 8006e06:	e000      	b.n	8006e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d063      	beq.n	8006ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e16:	4b65      	ldr	r3, [pc, #404]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 030c 	and.w	r3, r3, #12
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00b      	beq.n	8006e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e22:	4b62      	ldr	r3, [pc, #392]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d11c      	bne.n	8006e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e2e:	4b5f      	ldr	r3, [pc, #380]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d116      	bne.n	8006e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e3a:	4b5c      	ldr	r3, [pc, #368]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <HAL_RCC_OscConfig+0x152>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d001      	beq.n	8006e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e1c4      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e52:	4b56      	ldr	r3, [pc, #344]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	4952      	ldr	r1, [pc, #328]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e66:	e03a      	b.n	8006ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d020      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e70:	4b4f      	ldr	r3, [pc, #316]	; (8006fb0 <HAL_RCC_OscConfig+0x2b0>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e76:	f7fe fc17 	bl	80056a8 <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e7c:	e008      	b.n	8006e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e7e:	f7fe fc13 	bl	80056a8 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e1a5      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e90:	4b46      	ldr	r3, [pc, #280]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0f0      	beq.n	8006e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e9c:	4b43      	ldr	r3, [pc, #268]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	4940      	ldr	r1, [pc, #256]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	600b      	str	r3, [r1, #0]
 8006eb0:	e015      	b.n	8006ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eb2:	4b3f      	ldr	r3, [pc, #252]	; (8006fb0 <HAL_RCC_OscConfig+0x2b0>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fe fbf6 	bl	80056a8 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ec0:	f7fe fbf2 	bl	80056a8 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e184      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ed2:	4b36      	ldr	r3, [pc, #216]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d030      	beq.n	8006f4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d016      	beq.n	8006f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ef2:	4b30      	ldr	r3, [pc, #192]	; (8006fb4 <HAL_RCC_OscConfig+0x2b4>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef8:	f7fe fbd6 	bl	80056a8 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f00:	f7fe fbd2 	bl	80056a8 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e164      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f12:	4b26      	ldr	r3, [pc, #152]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0f0      	beq.n	8006f00 <HAL_RCC_OscConfig+0x200>
 8006f1e:	e015      	b.n	8006f4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f20:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <HAL_RCC_OscConfig+0x2b4>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f26:	f7fe fbbf 	bl	80056a8 <HAL_GetTick>
 8006f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f2c:	e008      	b.n	8006f40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f2e:	f7fe fbbb 	bl	80056a8 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e14d      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f40:	4b1a      	ldr	r3, [pc, #104]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f0      	bne.n	8006f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80a0 	beq.w	800709a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f5e:	4b13      	ldr	r3, [pc, #76]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10f      	bne.n	8006f8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60bb      	str	r3, [r7, #8]
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	4a0e      	ldr	r2, [pc, #56]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f78:	6413      	str	r3, [r2, #64]	; 0x40
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <HAL_RCC_OscConfig+0x2ac>)
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f82:	60bb      	str	r3, [r7, #8]
 8006f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f86:	2301      	movs	r3, #1
 8006f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <HAL_RCC_OscConfig+0x2b8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d121      	bne.n	8006fda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f96:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <HAL_RCC_OscConfig+0x2b8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a07      	ldr	r2, [pc, #28]	; (8006fb8 <HAL_RCC_OscConfig+0x2b8>)
 8006f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fa2:	f7fe fb81 	bl	80056a8 <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa8:	e011      	b.n	8006fce <HAL_RCC_OscConfig+0x2ce>
 8006faa:	bf00      	nop
 8006fac:	40023800 	.word	0x40023800
 8006fb0:	42470000 	.word	0x42470000
 8006fb4:	42470e80 	.word	0x42470e80
 8006fb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fbc:	f7fe fb74 	bl	80056a8 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e106      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fce:	4b85      	ldr	r3, [pc, #532]	; (80071e4 <HAL_RCC_OscConfig+0x4e4>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0f0      	beq.n	8006fbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d106      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x2f0>
 8006fe2:	4b81      	ldr	r3, [pc, #516]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe6:	4a80      	ldr	r2, [pc, #512]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	6713      	str	r3, [r2, #112]	; 0x70
 8006fee:	e01c      	b.n	800702a <HAL_RCC_OscConfig+0x32a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b05      	cmp	r3, #5
 8006ff6:	d10c      	bne.n	8007012 <HAL_RCC_OscConfig+0x312>
 8006ff8:	4b7b      	ldr	r3, [pc, #492]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffc:	4a7a      	ldr	r2, [pc, #488]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8006ffe:	f043 0304 	orr.w	r3, r3, #4
 8007002:	6713      	str	r3, [r2, #112]	; 0x70
 8007004:	4b78      	ldr	r3, [pc, #480]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8007006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007008:	4a77      	ldr	r2, [pc, #476]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 800700a:	f043 0301 	orr.w	r3, r3, #1
 800700e:	6713      	str	r3, [r2, #112]	; 0x70
 8007010:	e00b      	b.n	800702a <HAL_RCC_OscConfig+0x32a>
 8007012:	4b75      	ldr	r3, [pc, #468]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8007014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007016:	4a74      	ldr	r2, [pc, #464]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	6713      	str	r3, [r2, #112]	; 0x70
 800701e:	4b72      	ldr	r3, [pc, #456]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8007020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007022:	4a71      	ldr	r2, [pc, #452]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8007024:	f023 0304 	bic.w	r3, r3, #4
 8007028:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d015      	beq.n	800705e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007032:	f7fe fb39 	bl	80056a8 <HAL_GetTick>
 8007036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007038:	e00a      	b.n	8007050 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800703a:	f7fe fb35 	bl	80056a8 <HAL_GetTick>
 800703e:	4602      	mov	r2, r0
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	f241 3288 	movw	r2, #5000	; 0x1388
 8007048:	4293      	cmp	r3, r2
 800704a:	d901      	bls.n	8007050 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e0c5      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007050:	4b65      	ldr	r3, [pc, #404]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8007052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0ee      	beq.n	800703a <HAL_RCC_OscConfig+0x33a>
 800705c:	e014      	b.n	8007088 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800705e:	f7fe fb23 	bl	80056a8 <HAL_GetTick>
 8007062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007064:	e00a      	b.n	800707c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007066:	f7fe fb1f 	bl	80056a8 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	f241 3288 	movw	r2, #5000	; 0x1388
 8007074:	4293      	cmp	r3, r2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e0af      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800707c:	4b5a      	ldr	r3, [pc, #360]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 800707e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1ee      	bne.n	8007066 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d105      	bne.n	800709a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800708e:	4b56      	ldr	r3, [pc, #344]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	4a55      	ldr	r2, [pc, #340]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8007094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007098:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 809b 	beq.w	80071da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070a4:	4b50      	ldr	r3, [pc, #320]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 030c 	and.w	r3, r3, #12
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d05c      	beq.n	800716a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d141      	bne.n	800713c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070b8:	4b4c      	ldr	r3, [pc, #304]	; (80071ec <HAL_RCC_OscConfig+0x4ec>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070be:	f7fe faf3 	bl	80056a8 <HAL_GetTick>
 80070c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070c4:	e008      	b.n	80070d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070c6:	f7fe faef 	bl	80056a8 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e081      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d8:	4b43      	ldr	r3, [pc, #268]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1f0      	bne.n	80070c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	69da      	ldr	r2, [r3, #28]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	019b      	lsls	r3, r3, #6
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	3b01      	subs	r3, #1
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	061b      	lsls	r3, r3, #24
 8007108:	4937      	ldr	r1, [pc, #220]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 800710a:	4313      	orrs	r3, r2
 800710c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800710e:	4b37      	ldr	r3, [pc, #220]	; (80071ec <HAL_RCC_OscConfig+0x4ec>)
 8007110:	2201      	movs	r2, #1
 8007112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007114:	f7fe fac8 	bl	80056a8 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800711c:	f7fe fac4 	bl	80056a8 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e056      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800712e:	4b2e      	ldr	r3, [pc, #184]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d0f0      	beq.n	800711c <HAL_RCC_OscConfig+0x41c>
 800713a:	e04e      	b.n	80071da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800713c:	4b2b      	ldr	r3, [pc, #172]	; (80071ec <HAL_RCC_OscConfig+0x4ec>)
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007142:	f7fe fab1 	bl	80056a8 <HAL_GetTick>
 8007146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007148:	e008      	b.n	800715c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800714a:	f7fe faad 	bl	80056a8 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d901      	bls.n	800715c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e03f      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800715c:	4b22      	ldr	r3, [pc, #136]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1f0      	bne.n	800714a <HAL_RCC_OscConfig+0x44a>
 8007168:	e037      	b.n	80071da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e032      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007176:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <HAL_RCC_OscConfig+0x4e8>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d028      	beq.n	80071d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800718e:	429a      	cmp	r2, r3
 8007190:	d121      	bne.n	80071d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800719c:	429a      	cmp	r2, r3
 800719e:	d11a      	bne.n	80071d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071a6:	4013      	ands	r3, r2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d111      	bne.n	80071d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	085b      	lsrs	r3, r3, #1
 80071be:	3b01      	subs	r3, #1
 80071c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d107      	bne.n	80071d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d001      	beq.n	80071da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	40007000 	.word	0x40007000
 80071e8:	40023800 	.word	0x40023800
 80071ec:	42470060 	.word	0x42470060

080071f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e0cc      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007204:	4b68      	ldr	r3, [pc, #416]	; (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d90c      	bls.n	800722c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007212:	4b65      	ldr	r3, [pc, #404]	; (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800721a:	4b63      	ldr	r3, [pc, #396]	; (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d001      	beq.n	800722c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0b8      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d020      	beq.n	800727a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007244:	4b59      	ldr	r3, [pc, #356]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	4a58      	ldr	r2, [pc, #352]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 800724a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800724e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0308 	and.w	r3, r3, #8
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800725c:	4b53      	ldr	r3, [pc, #332]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	4a52      	ldr	r2, [pc, #328]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007268:	4b50      	ldr	r3, [pc, #320]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	494d      	ldr	r1, [pc, #308]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007276:	4313      	orrs	r3, r2
 8007278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d044      	beq.n	8007310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d107      	bne.n	800729e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800728e:	4b47      	ldr	r3, [pc, #284]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d119      	bne.n	80072ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e07f      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d003      	beq.n	80072ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d107      	bne.n	80072be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ae:	4b3f      	ldr	r3, [pc, #252]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d109      	bne.n	80072ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e06f      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072be:	4b3b      	ldr	r3, [pc, #236]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e067      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072ce:	4b37      	ldr	r3, [pc, #220]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f023 0203 	bic.w	r2, r3, #3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	4934      	ldr	r1, [pc, #208]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072e0:	f7fe f9e2 	bl	80056a8 <HAL_GetTick>
 80072e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072e6:	e00a      	b.n	80072fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072e8:	f7fe f9de 	bl	80056a8 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e04f      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072fe:	4b2b      	ldr	r3, [pc, #172]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 020c 	and.w	r2, r3, #12
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	429a      	cmp	r2, r3
 800730e:	d1eb      	bne.n	80072e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007310:	4b25      	ldr	r3, [pc, #148]	; (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d20c      	bcs.n	8007338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800731e:	4b22      	ldr	r3, [pc, #136]	; (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007326:	4b20      	ldr	r3, [pc, #128]	; (80073a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	429a      	cmp	r2, r3
 8007332:	d001      	beq.n	8007338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e032      	b.n	800739e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b00      	cmp	r3, #0
 8007342:	d008      	beq.n	8007356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007344:	4b19      	ldr	r3, [pc, #100]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	4916      	ldr	r1, [pc, #88]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007352:	4313      	orrs	r3, r2
 8007354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007362:	4b12      	ldr	r3, [pc, #72]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	490e      	ldr	r1, [pc, #56]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 8007372:	4313      	orrs	r3, r2
 8007374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007376:	f000 f821 	bl	80073bc <HAL_RCC_GetSysClockFreq>
 800737a:	4602      	mov	r2, r0
 800737c:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <HAL_RCC_ClockConfig+0x1bc>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	091b      	lsrs	r3, r3, #4
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	490a      	ldr	r1, [pc, #40]	; (80073b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007388:	5ccb      	ldrb	r3, [r1, r3]
 800738a:	fa22 f303 	lsr.w	r3, r2, r3
 800738e:	4a09      	ldr	r2, [pc, #36]	; (80073b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007392:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe f942 	bl	8005620 <HAL_InitTick>

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	40023c00 	.word	0x40023c00
 80073ac:	40023800 	.word	0x40023800
 80073b0:	0800a5a4 	.word	0x0800a5a4
 80073b4:	20000004 	.word	0x20000004
 80073b8:	20000008 	.word	0x20000008

080073bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	607b      	str	r3, [r7, #4]
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	2300      	movs	r3, #0
 80073ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073d4:	4b67      	ldr	r3, [pc, #412]	; (8007574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 030c 	and.w	r3, r3, #12
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d00d      	beq.n	80073fc <HAL_RCC_GetSysClockFreq+0x40>
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	f200 80bd 	bhi.w	8007560 <HAL_RCC_GetSysClockFreq+0x1a4>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <HAL_RCC_GetSysClockFreq+0x34>
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d003      	beq.n	80073f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80073ee:	e0b7      	b.n	8007560 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073f0:	4b61      	ldr	r3, [pc, #388]	; (8007578 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073f2:	60bb      	str	r3, [r7, #8]
       break;
 80073f4:	e0b7      	b.n	8007566 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073f6:	4b61      	ldr	r3, [pc, #388]	; (800757c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80073f8:	60bb      	str	r3, [r7, #8]
      break;
 80073fa:	e0b4      	b.n	8007566 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073fc:	4b5d      	ldr	r3, [pc, #372]	; (8007574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007404:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007406:	4b5b      	ldr	r3, [pc, #364]	; (8007574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d04d      	beq.n	80074ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007412:	4b58      	ldr	r3, [pc, #352]	; (8007574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	099b      	lsrs	r3, r3, #6
 8007418:	461a      	mov	r2, r3
 800741a:	f04f 0300 	mov.w	r3, #0
 800741e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007422:	f04f 0100 	mov.w	r1, #0
 8007426:	ea02 0800 	and.w	r8, r2, r0
 800742a:	ea03 0901 	and.w	r9, r3, r1
 800742e:	4640      	mov	r0, r8
 8007430:	4649      	mov	r1, r9
 8007432:	f04f 0200 	mov.w	r2, #0
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	014b      	lsls	r3, r1, #5
 800743c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007440:	0142      	lsls	r2, r0, #5
 8007442:	4610      	mov	r0, r2
 8007444:	4619      	mov	r1, r3
 8007446:	ebb0 0008 	subs.w	r0, r0, r8
 800744a:	eb61 0109 	sbc.w	r1, r1, r9
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	f04f 0300 	mov.w	r3, #0
 8007456:	018b      	lsls	r3, r1, #6
 8007458:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800745c:	0182      	lsls	r2, r0, #6
 800745e:	1a12      	subs	r2, r2, r0
 8007460:	eb63 0301 	sbc.w	r3, r3, r1
 8007464:	f04f 0000 	mov.w	r0, #0
 8007468:	f04f 0100 	mov.w	r1, #0
 800746c:	00d9      	lsls	r1, r3, #3
 800746e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007472:	00d0      	lsls	r0, r2, #3
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	eb12 0208 	adds.w	r2, r2, r8
 800747c:	eb43 0309 	adc.w	r3, r3, r9
 8007480:	f04f 0000 	mov.w	r0, #0
 8007484:	f04f 0100 	mov.w	r1, #0
 8007488:	0259      	lsls	r1, r3, #9
 800748a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800748e:	0250      	lsls	r0, r2, #9
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4610      	mov	r0, r2
 8007496:	4619      	mov	r1, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	461a      	mov	r2, r3
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	f7f9 fab0 	bl	8000a04 <__aeabi_uldivmod>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4613      	mov	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	e04a      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074ae:	4b31      	ldr	r3, [pc, #196]	; (8007574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	099b      	lsrs	r3, r3, #6
 80074b4:	461a      	mov	r2, r3
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074be:	f04f 0100 	mov.w	r1, #0
 80074c2:	ea02 0400 	and.w	r4, r2, r0
 80074c6:	ea03 0501 	and.w	r5, r3, r1
 80074ca:	4620      	mov	r0, r4
 80074cc:	4629      	mov	r1, r5
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	014b      	lsls	r3, r1, #5
 80074d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074dc:	0142      	lsls	r2, r0, #5
 80074de:	4610      	mov	r0, r2
 80074e0:	4619      	mov	r1, r3
 80074e2:	1b00      	subs	r0, r0, r4
 80074e4:	eb61 0105 	sbc.w	r1, r1, r5
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	018b      	lsls	r3, r1, #6
 80074f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074f6:	0182      	lsls	r2, r0, #6
 80074f8:	1a12      	subs	r2, r2, r0
 80074fa:	eb63 0301 	sbc.w	r3, r3, r1
 80074fe:	f04f 0000 	mov.w	r0, #0
 8007502:	f04f 0100 	mov.w	r1, #0
 8007506:	00d9      	lsls	r1, r3, #3
 8007508:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800750c:	00d0      	lsls	r0, r2, #3
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	1912      	adds	r2, r2, r4
 8007514:	eb45 0303 	adc.w	r3, r5, r3
 8007518:	f04f 0000 	mov.w	r0, #0
 800751c:	f04f 0100 	mov.w	r1, #0
 8007520:	0299      	lsls	r1, r3, #10
 8007522:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007526:	0290      	lsls	r0, r2, #10
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4610      	mov	r0, r2
 800752e:	4619      	mov	r1, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	461a      	mov	r2, r3
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	f7f9 fa64 	bl	8000a04 <__aeabi_uldivmod>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4613      	mov	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007544:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	3301      	adds	r3, #1
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	fbb2 f3f3 	udiv	r3, r2, r3
 800755c:	60bb      	str	r3, [r7, #8]
      break;
 800755e:	e002      	b.n	8007566 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007562:	60bb      	str	r3, [r7, #8]
      break;
 8007564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007566:	68bb      	ldr	r3, [r7, #8]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007572:	bf00      	nop
 8007574:	40023800 	.word	0x40023800
 8007578:	00f42400 	.word	0x00f42400
 800757c:	007a1200 	.word	0x007a1200

08007580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007584:	4b03      	ldr	r3, [pc, #12]	; (8007594 <HAL_RCC_GetHCLKFreq+0x14>)
 8007586:	681b      	ldr	r3, [r3, #0]
}
 8007588:	4618      	mov	r0, r3
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	20000004 	.word	0x20000004

08007598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800759c:	f7ff fff0 	bl	8007580 <HAL_RCC_GetHCLKFreq>
 80075a0:	4602      	mov	r2, r0
 80075a2:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	0a9b      	lsrs	r3, r3, #10
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	4903      	ldr	r1, [pc, #12]	; (80075bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ae:	5ccb      	ldrb	r3, [r1, r3]
 80075b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	40023800 	.word	0x40023800
 80075bc:	0800a5b4 	.word	0x0800a5b4

080075c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075c4:	f7ff ffdc 	bl	8007580 <HAL_RCC_GetHCLKFreq>
 80075c8:	4602      	mov	r2, r0
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	0b5b      	lsrs	r3, r3, #13
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	4903      	ldr	r1, [pc, #12]	; (80075e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075d6:	5ccb      	ldrb	r3, [r1, r3]
 80075d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075dc:	4618      	mov	r0, r3
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	40023800 	.word	0x40023800
 80075e4:	0800a5b4 	.word	0x0800a5b4

080075e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e07b      	b.n	80076f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d108      	bne.n	8007614 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800760a:	d009      	beq.n	8007620 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	61da      	str	r2, [r3, #28]
 8007612:	e005      	b.n	8007620 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d106      	bne.n	8007640 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fd fa28 	bl	8004a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007656:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007668:	431a      	orrs	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007690:	431a      	orrs	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a4:	ea42 0103 	orr.w	r1, r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	0c1b      	lsrs	r3, r3, #16
 80076be:	f003 0104 	and.w	r1, r3, #4
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	f003 0210 	and.w	r2, r3, #16
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69da      	ldr	r2, [r3, #28]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b088      	sub	sp, #32
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	4613      	mov	r3, r2
 8007708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007714:	2b01      	cmp	r3, #1
 8007716:	d101      	bne.n	800771c <HAL_SPI_Transmit+0x22>
 8007718:	2302      	movs	r3, #2
 800771a:	e126      	b.n	800796a <HAL_SPI_Transmit+0x270>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007724:	f7fd ffc0 	bl	80056a8 <HAL_GetTick>
 8007728:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b01      	cmp	r3, #1
 8007738:	d002      	beq.n	8007740 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800773a:	2302      	movs	r3, #2
 800773c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800773e:	e10b      	b.n	8007958 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <HAL_SPI_Transmit+0x52>
 8007746:	88fb      	ldrh	r3, [r7, #6]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007750:	e102      	b.n	8007958 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2203      	movs	r2, #3
 8007756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	88fa      	ldrh	r2, [r7, #6]
 800776a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	88fa      	ldrh	r2, [r7, #6]
 8007770:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007798:	d10f      	bne.n	80077ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c4:	2b40      	cmp	r3, #64	; 0x40
 80077c6:	d007      	beq.n	80077d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e0:	d14b      	bne.n	800787a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <HAL_SPI_Transmit+0xf6>
 80077ea:	8afb      	ldrh	r3, [r7, #22]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d13e      	bne.n	800786e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f4:	881a      	ldrh	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007800:	1c9a      	adds	r2, r3, #2
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007814:	e02b      	b.n	800786e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b02      	cmp	r3, #2
 8007822:	d112      	bne.n	800784a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	881a      	ldrh	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	1c9a      	adds	r2, r3, #2
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800783e:	b29b      	uxth	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	86da      	strh	r2, [r3, #54]	; 0x36
 8007848:	e011      	b.n	800786e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800784a:	f7fd ff2d 	bl	80056a8 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d803      	bhi.n	8007862 <HAL_SPI_Transmit+0x168>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007860:	d102      	bne.n	8007868 <HAL_SPI_Transmit+0x16e>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800786c:	e074      	b.n	8007958 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1ce      	bne.n	8007816 <HAL_SPI_Transmit+0x11c>
 8007878:	e04c      	b.n	8007914 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <HAL_SPI_Transmit+0x18e>
 8007882:	8afb      	ldrh	r3, [r7, #22]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d140      	bne.n	800790a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	7812      	ldrb	r2, [r2, #0]
 8007894:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80078ae:	e02c      	b.n	800790a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d113      	bne.n	80078e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	7812      	ldrb	r2, [r2, #0]
 80078ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078da:	b29b      	uxth	r3, r3
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80078e4:	e011      	b.n	800790a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078e6:	f7fd fedf 	bl	80056a8 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d803      	bhi.n	80078fe <HAL_SPI_Transmit+0x204>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fc:	d102      	bne.n	8007904 <HAL_SPI_Transmit+0x20a>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007908:	e026      	b.n	8007958 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1cd      	bne.n	80078b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 fbcb 	bl	80080b4 <SPI_EndRxTxTransaction>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2220      	movs	r2, #32
 8007928:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007932:	2300      	movs	r3, #0
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	e000      	b.n	8007958 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007956:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007968:	7ffb      	ldrb	r3, [r7, #31]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3720      	adds	r7, #32
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b088      	sub	sp, #32
 8007976:	af02      	add	r7, sp, #8
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	4613      	mov	r3, r2
 8007980:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800798e:	d112      	bne.n	80079b6 <HAL_SPI_Receive+0x44>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10e      	bne.n	80079b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2204      	movs	r2, #4
 800799c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80079a0:	88fa      	ldrh	r2, [r7, #6]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	4613      	mov	r3, r2
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	68b9      	ldr	r1, [r7, #8]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f8f1 	bl	8007b94 <HAL_SPI_TransmitReceive>
 80079b2:	4603      	mov	r3, r0
 80079b4:	e0ea      	b.n	8007b8c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_SPI_Receive+0x52>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e0e3      	b.n	8007b8c <HAL_SPI_Receive+0x21a>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079cc:	f7fd fe6c 	bl	80056a8 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d002      	beq.n	80079e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80079de:	2302      	movs	r3, #2
 80079e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079e2:	e0ca      	b.n	8007b7a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <HAL_SPI_Receive+0x7e>
 80079ea:	88fb      	ldrh	r3, [r7, #6]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d102      	bne.n	80079f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079f4:	e0c1      	b.n	8007b7a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2204      	movs	r2, #4
 80079fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	88fa      	ldrh	r2, [r7, #6]
 8007a0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	88fa      	ldrh	r2, [r7, #6]
 8007a14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a3c:	d10f      	bne.n	8007a5e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a68:	2b40      	cmp	r3, #64	; 0x40
 8007a6a:	d007      	beq.n	8007a7c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d162      	bne.n	8007b4a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a84:	e02e      	b.n	8007ae4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d115      	bne.n	8007ac0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f103 020c 	add.w	r2, r3, #12
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	7812      	ldrb	r2, [r2, #0]
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007abe:	e011      	b.n	8007ae4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ac0:	f7fd fdf2 	bl	80056a8 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d803      	bhi.n	8007ad8 <HAL_SPI_Receive+0x166>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad6:	d102      	bne.n	8007ade <HAL_SPI_Receive+0x16c>
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d102      	bne.n	8007ae4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ae2:	e04a      	b.n	8007b7a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1cb      	bne.n	8007a86 <HAL_SPI_Receive+0x114>
 8007aee:	e031      	b.n	8007b54 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d113      	bne.n	8007b26 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	b292      	uxth	r2, r2
 8007b0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b10:	1c9a      	adds	r2, r3, #2
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b24:	e011      	b.n	8007b4a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b26:	f7fd fdbf 	bl	80056a8 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d803      	bhi.n	8007b3e <HAL_SPI_Receive+0x1cc>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3c:	d102      	bne.n	8007b44 <HAL_SPI_Receive+0x1d2>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d102      	bne.n	8007b4a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b48:	e017      	b.n	8007b7a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1cd      	bne.n	8007af0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fa45 	bl	8007fe8 <SPI_EndRxTransaction>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2220      	movs	r2, #32
 8007b68:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	75fb      	strb	r3, [r7, #23]
 8007b76:	e000      	b.n	8007b7a <HAL_SPI_Receive+0x208>
  }

error :
 8007b78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08c      	sub	sp, #48	; 0x30
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_SPI_TransmitReceive+0x26>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e18a      	b.n	8007ed0 <HAL_SPI_TransmitReceive+0x33c>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bc2:	f7fd fd71 	bl	80056a8 <HAL_GetTick>
 8007bc6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007bd8:	887b      	ldrh	r3, [r7, #2]
 8007bda:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d00f      	beq.n	8007c04 <HAL_SPI_TransmitReceive+0x70>
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bea:	d107      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d103      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x68>
 8007bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d003      	beq.n	8007c04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c02:	e15b      	b.n	8007ebc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <HAL_SPI_TransmitReceive+0x82>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <HAL_SPI_TransmitReceive+0x82>
 8007c10:	887b      	ldrh	r3, [r7, #2]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d103      	bne.n	8007c1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c1c:	e14e      	b.n	8007ebc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d003      	beq.n	8007c32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2205      	movs	r2, #5
 8007c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	887a      	ldrh	r2, [r7, #2]
 8007c42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	887a      	ldrh	r2, [r7, #2]
 8007c48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	887a      	ldrh	r2, [r7, #2]
 8007c54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	887a      	ldrh	r2, [r7, #2]
 8007c5a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d007      	beq.n	8007c86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c8e:	d178      	bne.n	8007d82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HAL_SPI_TransmitReceive+0x10a>
 8007c98:	8b7b      	ldrh	r3, [r7, #26]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d166      	bne.n	8007d6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca2:	881a      	ldrh	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cae:	1c9a      	adds	r2, r3, #2
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc2:	e053      	b.n	8007d6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d11b      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x176>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d016      	beq.n	8007d0a <HAL_SPI_TransmitReceive+0x176>
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d113      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce6:	881a      	ldrh	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf2:	1c9a      	adds	r2, r3, #2
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d119      	bne.n	8007d4c <HAL_SPI_TransmitReceive+0x1b8>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d014      	beq.n	8007d4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	b292      	uxth	r2, r2
 8007d2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d34:	1c9a      	adds	r2, r3, #2
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d4c:	f7fd fcac 	bl	80056a8 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d807      	bhi.n	8007d6c <HAL_SPI_TransmitReceive+0x1d8>
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d003      	beq.n	8007d6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d6a:	e0a7      	b.n	8007ebc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1a6      	bne.n	8007cc4 <HAL_SPI_TransmitReceive+0x130>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1a1      	bne.n	8007cc4 <HAL_SPI_TransmitReceive+0x130>
 8007d80:	e07c      	b.n	8007e7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <HAL_SPI_TransmitReceive+0x1fc>
 8007d8a:	8b7b      	ldrh	r3, [r7, #26]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d16b      	bne.n	8007e68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	7812      	ldrb	r2, [r2, #0]
 8007d9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007db6:	e057      	b.n	8007e68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d11c      	bne.n	8007e00 <HAL_SPI_TransmitReceive+0x26c>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d017      	beq.n	8007e00 <HAL_SPI_TransmitReceive+0x26c>
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d114      	bne.n	8007e00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	330c      	adds	r3, #12
 8007de0:	7812      	ldrb	r2, [r2, #0]
 8007de2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d119      	bne.n	8007e42 <HAL_SPI_TransmitReceive+0x2ae>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d014      	beq.n	8007e42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e22:	b2d2      	uxtb	r2, r2
 8007e24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007e42:	f7fd fc31 	bl	80056a8 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d803      	bhi.n	8007e5a <HAL_SPI_TransmitReceive+0x2c6>
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e58:	d102      	bne.n	8007e60 <HAL_SPI_TransmitReceive+0x2cc>
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d103      	bne.n	8007e68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e66:	e029      	b.n	8007ebc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1a2      	bne.n	8007db8 <HAL_SPI_TransmitReceive+0x224>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d19d      	bne.n	8007db8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 f917 	bl	80080b4 <SPI_EndRxTxTransaction>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d006      	beq.n	8007e9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2220      	movs	r2, #32
 8007e96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e98:	e010      	b.n	8007ebc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10b      	bne.n	8007eba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	617b      	str	r3, [r7, #20]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	617b      	str	r3, [r7, #20]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	e000      	b.n	8007ebc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007eba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ecc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3730      	adds	r7, #48	; 0x30
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ee8:	f7fd fbde 	bl	80056a8 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ef8:	f7fd fbd6 	bl	80056a8 <HAL_GetTick>
 8007efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007efe:	4b39      	ldr	r3, [pc, #228]	; (8007fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	015b      	lsls	r3, r3, #5
 8007f04:	0d1b      	lsrs	r3, r3, #20
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	fb02 f303 	mul.w	r3, r2, r3
 8007f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f0e:	e054      	b.n	8007fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f16:	d050      	beq.n	8007fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f18:	f7fd fbc6 	bl	80056a8 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d902      	bls.n	8007f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d13d      	bne.n	8007faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f46:	d111      	bne.n	8007f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f50:	d004      	beq.n	8007f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f5a:	d107      	bne.n	8007f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f74:	d10f      	bne.n	8007f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e017      	b.n	8007fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	bf0c      	ite	eq
 8007fca:	2301      	moveq	r3, #1
 8007fcc:	2300      	movne	r3, #0
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	79fb      	ldrb	r3, [r7, #7]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d19b      	bne.n	8007f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3720      	adds	r7, #32
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000004 	.word	0x20000004

08007fe8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ffc:	d111      	bne.n	8008022 <SPI_EndRxTransaction+0x3a>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008006:	d004      	beq.n	8008012 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008010:	d107      	bne.n	8008022 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008020:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800802a:	d12a      	bne.n	8008082 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008034:	d012      	beq.n	800805c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2200      	movs	r2, #0
 800803e:	2180      	movs	r1, #128	; 0x80
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f7ff ff49 	bl	8007ed8 <SPI_WaitFlagStateUntilTimeout>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d02d      	beq.n	80080a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008050:	f043 0220 	orr.w	r2, r3, #32
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e026      	b.n	80080aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2200      	movs	r2, #0
 8008064:	2101      	movs	r1, #1
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff ff36 	bl	8007ed8 <SPI_WaitFlagStateUntilTimeout>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d01a      	beq.n	80080a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008076:	f043 0220 	orr.w	r2, r3, #32
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e013      	b.n	80080aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2200      	movs	r2, #0
 800808a:	2101      	movs	r1, #1
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7ff ff23 	bl	8007ed8 <SPI_WaitFlagStateUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d007      	beq.n	80080a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809c:	f043 0220 	orr.w	r2, r3, #32
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e000      	b.n	80080aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af02      	add	r7, sp, #8
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080c0:	4b1b      	ldr	r3, [pc, #108]	; (8008130 <SPI_EndRxTxTransaction+0x7c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a1b      	ldr	r2, [pc, #108]	; (8008134 <SPI_EndRxTxTransaction+0x80>)
 80080c6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ca:	0d5b      	lsrs	r3, r3, #21
 80080cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080d0:	fb02 f303 	mul.w	r3, r2, r3
 80080d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080de:	d112      	bne.n	8008106 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2200      	movs	r2, #0
 80080e8:	2180      	movs	r1, #128	; 0x80
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f7ff fef4 	bl	8007ed8 <SPI_WaitFlagStateUntilTimeout>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d016      	beq.n	8008124 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fa:	f043 0220 	orr.w	r2, r3, #32
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e00f      	b.n	8008126 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	3b01      	subs	r3, #1
 8008110:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811c:	2b80      	cmp	r3, #128	; 0x80
 800811e:	d0f2      	beq.n	8008106 <SPI_EndRxTxTransaction+0x52>
 8008120:	e000      	b.n	8008124 <SPI_EndRxTxTransaction+0x70>
        break;
 8008122:	bf00      	nop
  }

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20000004 	.word	0x20000004
 8008134:	165e9f81 	.word	0x165e9f81

08008138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e041      	b.n	80081ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d106      	bne.n	8008164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7fc fed4 	bl	8004f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2202      	movs	r2, #2
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3304      	adds	r3, #4
 8008174:	4619      	mov	r1, r3
 8008176:	4610      	mov	r0, r2
 8008178:	f000 fa10 	bl	800859c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e041      	b.n	800826c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d106      	bne.n	8008202 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f839 	bl	8008274 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3304      	adds	r3, #4
 8008212:	4619      	mov	r1, r3
 8008214:	4610      	mov	r0, r2
 8008216:	f000 f9c1 	bl	800859c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d101      	bne.n	80082a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082a2:	2302      	movs	r3, #2
 80082a4:	e0ae      	b.n	8008404 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b0c      	cmp	r3, #12
 80082b2:	f200 809f 	bhi.w	80083f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082b6:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082bc:	080082f1 	.word	0x080082f1
 80082c0:	080083f5 	.word	0x080083f5
 80082c4:	080083f5 	.word	0x080083f5
 80082c8:	080083f5 	.word	0x080083f5
 80082cc:	08008331 	.word	0x08008331
 80082d0:	080083f5 	.word	0x080083f5
 80082d4:	080083f5 	.word	0x080083f5
 80082d8:	080083f5 	.word	0x080083f5
 80082dc:	08008373 	.word	0x08008373
 80082e0:	080083f5 	.word	0x080083f5
 80082e4:	080083f5 	.word	0x080083f5
 80082e8:	080083f5 	.word	0x080083f5
 80082ec:	080083b3 	.word	0x080083b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68b9      	ldr	r1, [r7, #8]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 f9f0 	bl	80086dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0208 	orr.w	r2, r2, #8
 800830a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	699a      	ldr	r2, [r3, #24]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0204 	bic.w	r2, r2, #4
 800831a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6999      	ldr	r1, [r3, #24]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	691a      	ldr	r2, [r3, #16]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	619a      	str	r2, [r3, #24]
      break;
 800832e:	e064      	b.n	80083fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68b9      	ldr	r1, [r7, #8]
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fa40 	bl	80087bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800834a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699a      	ldr	r2, [r3, #24]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800835a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6999      	ldr	r1, [r3, #24]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	021a      	lsls	r2, r3, #8
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	619a      	str	r2, [r3, #24]
      break;
 8008370:	e043      	b.n	80083fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68b9      	ldr	r1, [r7, #8]
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fa95 	bl	80088a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69da      	ldr	r2, [r3, #28]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f042 0208 	orr.w	r2, r2, #8
 800838c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69da      	ldr	r2, [r3, #28]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0204 	bic.w	r2, r2, #4
 800839c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	69d9      	ldr	r1, [r3, #28]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	691a      	ldr	r2, [r3, #16]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	61da      	str	r2, [r3, #28]
      break;
 80083b0:	e023      	b.n	80083fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68b9      	ldr	r1, [r7, #8]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fae9 	bl	8008990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69da      	ldr	r2, [r3, #28]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	69da      	ldr	r2, [r3, #28]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69d9      	ldr	r1, [r3, #28]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	021a      	lsls	r2, r3, #8
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	61da      	str	r2, [r3, #28]
      break;
 80083f2:	e002      	b.n	80083fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	75fb      	strb	r3, [r7, #23]
      break;
 80083f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_TIM_ConfigClockSource+0x1c>
 8008424:	2302      	movs	r3, #2
 8008426:	e0b4      	b.n	8008592 <HAL_TIM_ConfigClockSource+0x186>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800844e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008460:	d03e      	beq.n	80084e0 <HAL_TIM_ConfigClockSource+0xd4>
 8008462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008466:	f200 8087 	bhi.w	8008578 <HAL_TIM_ConfigClockSource+0x16c>
 800846a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846e:	f000 8086 	beq.w	800857e <HAL_TIM_ConfigClockSource+0x172>
 8008472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008476:	d87f      	bhi.n	8008578 <HAL_TIM_ConfigClockSource+0x16c>
 8008478:	2b70      	cmp	r3, #112	; 0x70
 800847a:	d01a      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0xa6>
 800847c:	2b70      	cmp	r3, #112	; 0x70
 800847e:	d87b      	bhi.n	8008578 <HAL_TIM_ConfigClockSource+0x16c>
 8008480:	2b60      	cmp	r3, #96	; 0x60
 8008482:	d050      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x11a>
 8008484:	2b60      	cmp	r3, #96	; 0x60
 8008486:	d877      	bhi.n	8008578 <HAL_TIM_ConfigClockSource+0x16c>
 8008488:	2b50      	cmp	r3, #80	; 0x50
 800848a:	d03c      	beq.n	8008506 <HAL_TIM_ConfigClockSource+0xfa>
 800848c:	2b50      	cmp	r3, #80	; 0x50
 800848e:	d873      	bhi.n	8008578 <HAL_TIM_ConfigClockSource+0x16c>
 8008490:	2b40      	cmp	r3, #64	; 0x40
 8008492:	d058      	beq.n	8008546 <HAL_TIM_ConfigClockSource+0x13a>
 8008494:	2b40      	cmp	r3, #64	; 0x40
 8008496:	d86f      	bhi.n	8008578 <HAL_TIM_ConfigClockSource+0x16c>
 8008498:	2b30      	cmp	r3, #48	; 0x30
 800849a:	d064      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0x15a>
 800849c:	2b30      	cmp	r3, #48	; 0x30
 800849e:	d86b      	bhi.n	8008578 <HAL_TIM_ConfigClockSource+0x16c>
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d060      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0x15a>
 80084a4:	2b20      	cmp	r3, #32
 80084a6:	d867      	bhi.n	8008578 <HAL_TIM_ConfigClockSource+0x16c>
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d05c      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0x15a>
 80084ac:	2b10      	cmp	r3, #16
 80084ae:	d05a      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0x15a>
 80084b0:	e062      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6818      	ldr	r0, [r3, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6899      	ldr	r1, [r3, #8]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	f000 fb35 	bl	8008b30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	609a      	str	r2, [r3, #8]
      break;
 80084de:	e04f      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6818      	ldr	r0, [r3, #0]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	6899      	ldr	r1, [r3, #8]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f000 fb1e 	bl	8008b30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689a      	ldr	r2, [r3, #8]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008502:	609a      	str	r2, [r3, #8]
      break;
 8008504:	e03c      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6859      	ldr	r1, [r3, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	461a      	mov	r2, r3
 8008514:	f000 fa92 	bl	8008a3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2150      	movs	r1, #80	; 0x50
 800851e:	4618      	mov	r0, r3
 8008520:	f000 faeb 	bl	8008afa <TIM_ITRx_SetConfig>
      break;
 8008524:	e02c      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	6859      	ldr	r1, [r3, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	461a      	mov	r2, r3
 8008534:	f000 fab1 	bl	8008a9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2160      	movs	r1, #96	; 0x60
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fadb 	bl	8008afa <TIM_ITRx_SetConfig>
      break;
 8008544:	e01c      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	6859      	ldr	r1, [r3, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	461a      	mov	r2, r3
 8008554:	f000 fa72 	bl	8008a3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2140      	movs	r1, #64	; 0x40
 800855e:	4618      	mov	r0, r3
 8008560:	f000 facb 	bl	8008afa <TIM_ITRx_SetConfig>
      break;
 8008564:	e00c      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4619      	mov	r1, r3
 8008570:	4610      	mov	r0, r2
 8008572:	f000 fac2 	bl	8008afa <TIM_ITRx_SetConfig>
      break;
 8008576:	e003      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	73fb      	strb	r3, [r7, #15]
      break;
 800857c:	e000      	b.n	8008580 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800857e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008590:	7bfb      	ldrb	r3, [r7, #15]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a40      	ldr	r2, [pc, #256]	; (80086b0 <TIM_Base_SetConfig+0x114>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d013      	beq.n	80085dc <TIM_Base_SetConfig+0x40>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ba:	d00f      	beq.n	80085dc <TIM_Base_SetConfig+0x40>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a3d      	ldr	r2, [pc, #244]	; (80086b4 <TIM_Base_SetConfig+0x118>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00b      	beq.n	80085dc <TIM_Base_SetConfig+0x40>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a3c      	ldr	r2, [pc, #240]	; (80086b8 <TIM_Base_SetConfig+0x11c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d007      	beq.n	80085dc <TIM_Base_SetConfig+0x40>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a3b      	ldr	r2, [pc, #236]	; (80086bc <TIM_Base_SetConfig+0x120>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d003      	beq.n	80085dc <TIM_Base_SetConfig+0x40>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a3a      	ldr	r2, [pc, #232]	; (80086c0 <TIM_Base_SetConfig+0x124>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d108      	bne.n	80085ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a2f      	ldr	r2, [pc, #188]	; (80086b0 <TIM_Base_SetConfig+0x114>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d02b      	beq.n	800864e <TIM_Base_SetConfig+0xb2>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085fc:	d027      	beq.n	800864e <TIM_Base_SetConfig+0xb2>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a2c      	ldr	r2, [pc, #176]	; (80086b4 <TIM_Base_SetConfig+0x118>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d023      	beq.n	800864e <TIM_Base_SetConfig+0xb2>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a2b      	ldr	r2, [pc, #172]	; (80086b8 <TIM_Base_SetConfig+0x11c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d01f      	beq.n	800864e <TIM_Base_SetConfig+0xb2>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a2a      	ldr	r2, [pc, #168]	; (80086bc <TIM_Base_SetConfig+0x120>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d01b      	beq.n	800864e <TIM_Base_SetConfig+0xb2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a29      	ldr	r2, [pc, #164]	; (80086c0 <TIM_Base_SetConfig+0x124>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d017      	beq.n	800864e <TIM_Base_SetConfig+0xb2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a28      	ldr	r2, [pc, #160]	; (80086c4 <TIM_Base_SetConfig+0x128>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d013      	beq.n	800864e <TIM_Base_SetConfig+0xb2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a27      	ldr	r2, [pc, #156]	; (80086c8 <TIM_Base_SetConfig+0x12c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d00f      	beq.n	800864e <TIM_Base_SetConfig+0xb2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a26      	ldr	r2, [pc, #152]	; (80086cc <TIM_Base_SetConfig+0x130>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d00b      	beq.n	800864e <TIM_Base_SetConfig+0xb2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a25      	ldr	r2, [pc, #148]	; (80086d0 <TIM_Base_SetConfig+0x134>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d007      	beq.n	800864e <TIM_Base_SetConfig+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a24      	ldr	r2, [pc, #144]	; (80086d4 <TIM_Base_SetConfig+0x138>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d003      	beq.n	800864e <TIM_Base_SetConfig+0xb2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a23      	ldr	r2, [pc, #140]	; (80086d8 <TIM_Base_SetConfig+0x13c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d108      	bne.n	8008660 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4313      	orrs	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	689a      	ldr	r2, [r3, #8]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a0a      	ldr	r2, [pc, #40]	; (80086b0 <TIM_Base_SetConfig+0x114>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d003      	beq.n	8008694 <TIM_Base_SetConfig+0xf8>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a0c      	ldr	r2, [pc, #48]	; (80086c0 <TIM_Base_SetConfig+0x124>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d103      	bne.n	800869c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	691a      	ldr	r2, [r3, #16]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	615a      	str	r2, [r3, #20]
}
 80086a2:	bf00      	nop
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	40010000 	.word	0x40010000
 80086b4:	40000400 	.word	0x40000400
 80086b8:	40000800 	.word	0x40000800
 80086bc:	40000c00 	.word	0x40000c00
 80086c0:	40010400 	.word	0x40010400
 80086c4:	40014000 	.word	0x40014000
 80086c8:	40014400 	.word	0x40014400
 80086cc:	40014800 	.word	0x40014800
 80086d0:	40001800 	.word	0x40001800
 80086d4:	40001c00 	.word	0x40001c00
 80086d8:	40002000 	.word	0x40002000

080086dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	f023 0201 	bic.w	r2, r3, #1
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0303 	bic.w	r3, r3, #3
 8008712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f023 0302 	bic.w	r3, r3, #2
 8008724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	4313      	orrs	r3, r2
 800872e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a20      	ldr	r2, [pc, #128]	; (80087b4 <TIM_OC1_SetConfig+0xd8>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d003      	beq.n	8008740 <TIM_OC1_SetConfig+0x64>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a1f      	ldr	r2, [pc, #124]	; (80087b8 <TIM_OC1_SetConfig+0xdc>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d10c      	bne.n	800875a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f023 0308 	bic.w	r3, r3, #8
 8008746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	4313      	orrs	r3, r2
 8008750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f023 0304 	bic.w	r3, r3, #4
 8008758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a15      	ldr	r2, [pc, #84]	; (80087b4 <TIM_OC1_SetConfig+0xd8>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d003      	beq.n	800876a <TIM_OC1_SetConfig+0x8e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a14      	ldr	r2, [pc, #80]	; (80087b8 <TIM_OC1_SetConfig+0xdc>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d111      	bne.n	800878e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	4313      	orrs	r3, r2
 800878c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	621a      	str	r2, [r3, #32]
}
 80087a8:	bf00      	nop
 80087aa:	371c      	adds	r7, #28
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	40010000 	.word	0x40010000
 80087b8:	40010400 	.word	0x40010400

080087bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	f023 0210 	bic.w	r2, r3, #16
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f023 0320 	bic.w	r3, r3, #32
 8008806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	011b      	lsls	r3, r3, #4
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	4313      	orrs	r3, r2
 8008812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a22      	ldr	r2, [pc, #136]	; (80088a0 <TIM_OC2_SetConfig+0xe4>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d003      	beq.n	8008824 <TIM_OC2_SetConfig+0x68>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a21      	ldr	r2, [pc, #132]	; (80088a4 <TIM_OC2_SetConfig+0xe8>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d10d      	bne.n	8008840 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800882a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	011b      	lsls	r3, r3, #4
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	4313      	orrs	r3, r2
 8008836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800883e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a17      	ldr	r2, [pc, #92]	; (80088a0 <TIM_OC2_SetConfig+0xe4>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d003      	beq.n	8008850 <TIM_OC2_SetConfig+0x94>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a16      	ldr	r2, [pc, #88]	; (80088a4 <TIM_OC2_SetConfig+0xe8>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d113      	bne.n	8008878 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800885e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	693a      	ldr	r2, [r7, #16]
 800887c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	621a      	str	r2, [r3, #32]
}
 8008892:	bf00      	nop
 8008894:	371c      	adds	r7, #28
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	40010000 	.word	0x40010000
 80088a4:	40010400 	.word	0x40010400

080088a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 0303 	bic.w	r3, r3, #3
 80088de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	021b      	lsls	r3, r3, #8
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a21      	ldr	r2, [pc, #132]	; (8008988 <TIM_OC3_SetConfig+0xe0>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d003      	beq.n	800890e <TIM_OC3_SetConfig+0x66>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a20      	ldr	r2, [pc, #128]	; (800898c <TIM_OC3_SetConfig+0xe4>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d10d      	bne.n	800892a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a16      	ldr	r2, [pc, #88]	; (8008988 <TIM_OC3_SetConfig+0xe0>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d003      	beq.n	800893a <TIM_OC3_SetConfig+0x92>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a15      	ldr	r2, [pc, #84]	; (800898c <TIM_OC3_SetConfig+0xe4>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d113      	bne.n	8008962 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	011b      	lsls	r3, r3, #4
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4313      	orrs	r3, r2
 8008960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	621a      	str	r2, [r3, #32]
}
 800897c:	bf00      	nop
 800897e:	371c      	adds	r7, #28
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	40010000 	.word	0x40010000
 800898c:	40010400 	.word	0x40010400

08008990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	021b      	lsls	r3, r3, #8
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	031b      	lsls	r3, r3, #12
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a12      	ldr	r2, [pc, #72]	; (8008a34 <TIM_OC4_SetConfig+0xa4>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d003      	beq.n	80089f8 <TIM_OC4_SetConfig+0x68>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a11      	ldr	r2, [pc, #68]	; (8008a38 <TIM_OC4_SetConfig+0xa8>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d109      	bne.n	8008a0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	019b      	lsls	r3, r3, #6
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	621a      	str	r2, [r3, #32]
}
 8008a26:	bf00      	nop
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	40010000 	.word	0x40010000
 8008a38:	40010400 	.word	0x40010400

08008a3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a1b      	ldr	r3, [r3, #32]
 8008a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	f023 0201 	bic.w	r2, r3, #1
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f023 030a 	bic.w	r3, r3, #10
 8008a78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	621a      	str	r2, [r3, #32]
}
 8008a8e:	bf00      	nop
 8008a90:	371c      	adds	r7, #28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b087      	sub	sp, #28
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	60f8      	str	r0, [r7, #12]
 8008aa2:	60b9      	str	r1, [r7, #8]
 8008aa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	f023 0210 	bic.w	r2, r3, #16
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	031b      	lsls	r3, r3, #12
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ad6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	011b      	lsls	r3, r3, #4
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	621a      	str	r2, [r3, #32]
}
 8008aee:	bf00      	nop
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b085      	sub	sp, #20
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	f043 0307 	orr.w	r3, r3, #7
 8008b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	609a      	str	r2, [r3, #8]
}
 8008b24:	bf00      	nop
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	021a      	lsls	r2, r3, #8
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	431a      	orrs	r2, r3
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	609a      	str	r2, [r3, #8]
}
 8008b64:	bf00      	nop
 8008b66:	371c      	adds	r7, #28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d101      	bne.n	8008b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b84:	2302      	movs	r3, #2
 8008b86:	e05a      	b.n	8008c3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a21      	ldr	r2, [pc, #132]	; (8008c4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d022      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bd4:	d01d      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a1d      	ldr	r2, [pc, #116]	; (8008c50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d018      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a1b      	ldr	r2, [pc, #108]	; (8008c54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d013      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a1a      	ldr	r2, [pc, #104]	; (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d00e      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a18      	ldr	r2, [pc, #96]	; (8008c5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d009      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a17      	ldr	r2, [pc, #92]	; (8008c60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d004      	beq.n	8008c12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a15      	ldr	r2, [pc, #84]	; (8008c64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d10c      	bne.n	8008c2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	40010000 	.word	0x40010000
 8008c50:	40000400 	.word	0x40000400
 8008c54:	40000800 	.word	0x40000800
 8008c58:	40000c00 	.word	0x40000c00
 8008c5c:	40010400 	.word	0x40010400
 8008c60:	40014000 	.word	0x40014000
 8008c64:	40001800 	.word	0x40001800

08008c68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e03d      	b.n	8008d00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e03f      	b.n	8008d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d106      	bne.n	8008d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7fc faaa 	bl	800528c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2224      	movs	r2, #36	; 0x24
 8008d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 ff49 	bl	8009be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	691a      	ldr	r2, [r3, #16]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	695a      	ldr	r2, [r3, #20]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68da      	ldr	r2, [r3, #12]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2220      	movs	r2, #32
 8008d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08c      	sub	sp, #48	; 0x30
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	4613      	mov	r3, r2
 8008db4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b20      	cmp	r3, #32
 8008dc0:	d165      	bne.n	8008e8e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <HAL_UART_Transmit_DMA+0x26>
 8008dc8:	88fb      	ldrh	r3, [r7, #6]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e05e      	b.n	8008e90 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d101      	bne.n	8008de0 <HAL_UART_Transmit_DMA+0x38>
 8008ddc:	2302      	movs	r3, #2
 8008dde:	e057      	b.n	8008e90 <HAL_UART_Transmit_DMA+0xe8>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	88fa      	ldrh	r2, [r7, #6]
 8008df2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	88fa      	ldrh	r2, [r7, #6]
 8008df8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2221      	movs	r2, #33	; 0x21
 8008e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0c:	4a22      	ldr	r2, [pc, #136]	; (8008e98 <HAL_UART_Transmit_DMA+0xf0>)
 8008e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e14:	4a21      	ldr	r2, [pc, #132]	; (8008e9c <HAL_UART_Transmit_DMA+0xf4>)
 8008e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1c:	4a20      	ldr	r2, [pc, #128]	; (8008ea0 <HAL_UART_Transmit_DMA+0xf8>)
 8008e1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e24:	2200      	movs	r2, #0
 8008e26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	6819      	ldr	r1, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	88fb      	ldrh	r3, [r7, #6]
 8008e40:	f7fd fa22 	bl	8006288 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e4c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3314      	adds	r3, #20
 8008e5c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	617b      	str	r3, [r7, #20]
   return(result);
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3314      	adds	r3, #20
 8008e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e76:	627a      	str	r2, [r7, #36]	; 0x24
 8008e78:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6a39      	ldr	r1, [r7, #32]
 8008e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e5      	bne.n	8008e56 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e000      	b.n	8008e90 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008e8e:	2302      	movs	r3, #2
  }
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3730      	adds	r7, #48	; 0x30
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	08009489 	.word	0x08009489
 8008e9c:	08009523 	.word	0x08009523
 8008ea0:	0800969b 	.word	0x0800969b

08008ea4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d11d      	bne.n	8008efa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <HAL_UART_Receive_DMA+0x26>
 8008ec4:	88fb      	ldrh	r3, [r7, #6]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e016      	b.n	8008efc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d101      	bne.n	8008edc <HAL_UART_Receive_DMA+0x38>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e00f      	b.n	8008efc <HAL_UART_Receive_DMA+0x58>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008eea:	88fb      	ldrh	r3, [r7, #6]
 8008eec:	461a      	mov	r2, r3
 8008eee:	68b9      	ldr	r1, [r7, #8]
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 fc1d 	bl	8009730 <UART_Start_Receive_DMA>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	e000      	b.n	8008efc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008efa:	2302      	movs	r3, #2
  }
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b0ba      	sub	sp, #232	; 0xe8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f3a:	f003 030f 	and.w	r3, r3, #15
 8008f3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10f      	bne.n	8008f6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f4e:	f003 0320 	and.w	r3, r3, #32
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d009      	beq.n	8008f6a <HAL_UART_IRQHandler+0x66>
 8008f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fd85 	bl	8009a72 <UART_Receive_IT>
      return;
 8008f68:	e256      	b.n	8009418 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 80de 	beq.w	8009130 <HAL_UART_IRQHandler+0x22c>
 8008f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d106      	bne.n	8008f8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 80d1 	beq.w	8009130 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00b      	beq.n	8008fb2 <HAL_UART_IRQHandler+0xae>
 8008f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d005      	beq.n	8008fb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008faa:	f043 0201 	orr.w	r2, r3, #1
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb6:	f003 0304 	and.w	r3, r3, #4
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00b      	beq.n	8008fd6 <HAL_UART_IRQHandler+0xd2>
 8008fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	f043 0202 	orr.w	r2, r3, #2
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00b      	beq.n	8008ffa <HAL_UART_IRQHandler+0xf6>
 8008fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d005      	beq.n	8008ffa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff2:	f043 0204 	orr.w	r2, r3, #4
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d011      	beq.n	800902a <HAL_UART_IRQHandler+0x126>
 8009006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800900a:	f003 0320 	and.w	r3, r3, #32
 800900e:	2b00      	cmp	r3, #0
 8009010:	d105      	bne.n	800901e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d005      	beq.n	800902a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009022:	f043 0208 	orr.w	r2, r3, #8
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 81ed 	beq.w	800940e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009038:	f003 0320 	and.w	r3, r3, #32
 800903c:	2b00      	cmp	r3, #0
 800903e:	d008      	beq.n	8009052 <HAL_UART_IRQHandler+0x14e>
 8009040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fd10 	bl	8009a72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905c:	2b40      	cmp	r3, #64	; 0x40
 800905e:	bf0c      	ite	eq
 8009060:	2301      	moveq	r3, #1
 8009062:	2300      	movne	r3, #0
 8009064:	b2db      	uxtb	r3, r3
 8009066:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d103      	bne.n	800907e <HAL_UART_IRQHandler+0x17a>
 8009076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800907a:	2b00      	cmp	r3, #0
 800907c:	d04f      	beq.n	800911e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fc18 	bl	80098b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908e:	2b40      	cmp	r3, #64	; 0x40
 8009090:	d141      	bne.n	8009116 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3314      	adds	r3, #20
 8009098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80090a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3314      	adds	r3, #20
 80090ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1d9      	bne.n	8009092 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d013      	beq.n	800910e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ea:	4a7d      	ldr	r2, [pc, #500]	; (80092e0 <HAL_UART_IRQHandler+0x3dc>)
 80090ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fd f990 	bl	8006418 <HAL_DMA_Abort_IT>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d016      	beq.n	800912c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800910c:	e00e      	b.n	800912c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f9a4 	bl	800945c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009114:	e00a      	b.n	800912c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f9a0 	bl	800945c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800911c:	e006      	b.n	800912c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f99c 	bl	800945c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800912a:	e170      	b.n	800940e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800912c:	bf00      	nop
    return;
 800912e:	e16e      	b.n	800940e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009134:	2b01      	cmp	r3, #1
 8009136:	f040 814a 	bne.w	80093ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800913a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800913e:	f003 0310 	and.w	r3, r3, #16
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 8143 	beq.w	80093ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800914c:	f003 0310 	and.w	r3, r3, #16
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 813c 	beq.w	80093ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009156:	2300      	movs	r3, #0
 8009158:	60bb      	str	r3, [r7, #8]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60bb      	str	r3, [r7, #8]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	60bb      	str	r3, [r7, #8]
 800916a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	695b      	ldr	r3, [r3, #20]
 8009172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009176:	2b40      	cmp	r3, #64	; 0x40
 8009178:	f040 80b4 	bne.w	80092e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009188:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 8140 	beq.w	8009412 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800919a:	429a      	cmp	r2, r3
 800919c:	f080 8139 	bcs.w	8009412 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b2:	f000 8088 	beq.w	80092c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	330c      	adds	r3, #12
 80091bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	330c      	adds	r3, #12
 80091de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80091e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1d9      	bne.n	80091b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3314      	adds	r3, #20
 8009208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800920c:	e853 3f00 	ldrex	r3, [r3]
 8009210:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009214:	f023 0301 	bic.w	r3, r3, #1
 8009218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3314      	adds	r3, #20
 8009222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009226:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800922a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800922e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e1      	bne.n	8009202 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3314      	adds	r3, #20
 8009244:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800924e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3314      	adds	r3, #20
 800925e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009262:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009266:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800926a:	e841 2300 	strex	r3, r2, [r1]
 800926e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1e3      	bne.n	800923e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2220      	movs	r2, #32
 800927a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	330c      	adds	r3, #12
 800928a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800928e:	e853 3f00 	ldrex	r3, [r3]
 8009292:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009296:	f023 0310 	bic.w	r3, r3, #16
 800929a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	330c      	adds	r3, #12
 80092a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80092a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80092aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092b0:	e841 2300 	strex	r3, r2, [r1]
 80092b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1e3      	bne.n	8009284 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fd f839 	bl	8006338 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f8ca 	bl	8009470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092dc:	e099      	b.n	8009412 <HAL_UART_IRQHandler+0x50e>
 80092de:	bf00      	nop
 80092e0:	0800997b 	.word	0x0800997b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 808b 	beq.w	8009416 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009300:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8086 	beq.w	8009416 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	330c      	adds	r3, #12
 8009310:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800931a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	330c      	adds	r3, #12
 800932a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800932e:	647a      	str	r2, [r7, #68]	; 0x44
 8009330:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800933c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e3      	bne.n	800930a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3314      	adds	r3, #20
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	623b      	str	r3, [r7, #32]
   return(result);
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	f023 0301 	bic.w	r3, r3, #1
 8009358:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3314      	adds	r3, #20
 8009362:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009366:	633a      	str	r2, [r7, #48]	; 0x30
 8009368:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800936c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e3      	bne.n	8009342 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2220      	movs	r2, #32
 800937e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	330c      	adds	r3, #12
 800938e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	60fb      	str	r3, [r7, #12]
   return(result);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0310 	bic.w	r3, r3, #16
 800939e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	330c      	adds	r3, #12
 80093a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80093ac:	61fa      	str	r2, [r7, #28]
 80093ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b0:	69b9      	ldr	r1, [r7, #24]
 80093b2:	69fa      	ldr	r2, [r7, #28]
 80093b4:	e841 2300 	strex	r3, r2, [r1]
 80093b8:	617b      	str	r3, [r7, #20]
   return(result);
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1e3      	bne.n	8009388 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f852 	bl	8009470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093cc:	e023      	b.n	8009416 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d009      	beq.n	80093ee <HAL_UART_IRQHandler+0x4ea>
 80093da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d003      	beq.n	80093ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fadb 	bl	80099a2 <UART_Transmit_IT>
    return;
 80093ec:	e014      	b.n	8009418 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00e      	beq.n	8009418 <HAL_UART_IRQHandler+0x514>
 80093fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009402:	2b00      	cmp	r3, #0
 8009404:	d008      	beq.n	8009418 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fb1b 	bl	8009a42 <UART_EndTransmit_IT>
    return;
 800940c:	e004      	b.n	8009418 <HAL_UART_IRQHandler+0x514>
    return;
 800940e:	bf00      	nop
 8009410:	e002      	b.n	8009418 <HAL_UART_IRQHandler+0x514>
      return;
 8009412:	bf00      	nop
 8009414:	e000      	b.n	8009418 <HAL_UART_IRQHandler+0x514>
      return;
 8009416:	bf00      	nop
  }
}
 8009418:	37e8      	adds	r7, #232	; 0xe8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop

08009420 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b090      	sub	sp, #64	; 0x40
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d137      	bne.n	8009514 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80094a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a6:	2200      	movs	r2, #0
 80094a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3314      	adds	r3, #20
 80094b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	623b      	str	r3, [r7, #32]
   return(result);
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80094c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3314      	adds	r3, #20
 80094c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094ca:	633a      	str	r2, [r7, #48]	; 0x30
 80094cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e5      	bne.n	80094aa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	330c      	adds	r3, #12
 80094e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
 80094f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	330c      	adds	r3, #12
 80094fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094fe:	61fa      	str	r2, [r7, #28]
 8009500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	69b9      	ldr	r1, [r7, #24]
 8009504:	69fa      	ldr	r2, [r7, #28]
 8009506:	e841 2300 	strex	r3, r2, [r1]
 800950a:	617b      	str	r3, [r7, #20]
   return(result);
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1e5      	bne.n	80094de <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009512:	e002      	b.n	800951a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009514:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009516:	f7ff ff83 	bl	8009420 <HAL_UART_TxCpltCallback>
}
 800951a:	bf00      	nop
 800951c:	3740      	adds	r7, #64	; 0x40
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f7ff ff7f 	bl	8009434 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b09c      	sub	sp, #112	; 0x70
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009556:	2b00      	cmp	r3, #0
 8009558:	d172      	bne.n	8009640 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800955a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800955c:	2200      	movs	r2, #0
 800955e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	330c      	adds	r3, #12
 8009566:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009576:	66bb      	str	r3, [r7, #104]	; 0x68
 8009578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	330c      	adds	r3, #12
 800957e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009580:	65ba      	str	r2, [r7, #88]	; 0x58
 8009582:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009588:	e841 2300 	strex	r3, r2, [r1]
 800958c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800958e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e5      	bne.n	8009560 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3314      	adds	r3, #20
 800959a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959e:	e853 3f00 	ldrex	r3, [r3]
 80095a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a6:	f023 0301 	bic.w	r3, r3, #1
 80095aa:	667b      	str	r3, [r7, #100]	; 0x64
 80095ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3314      	adds	r3, #20
 80095b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095b4:	647a      	str	r2, [r7, #68]	; 0x44
 80095b6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095bc:	e841 2300 	strex	r3, r2, [r1]
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e5      	bne.n	8009594 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3314      	adds	r3, #20
 80095ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	e853 3f00 	ldrex	r3, [r3]
 80095d6:	623b      	str	r3, [r7, #32]
   return(result);
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095de:	663b      	str	r3, [r7, #96]	; 0x60
 80095e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3314      	adds	r3, #20
 80095e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095e8:	633a      	str	r2, [r7, #48]	; 0x30
 80095ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e5      	bne.n	80095c8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095fe:	2220      	movs	r2, #32
 8009600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009608:	2b01      	cmp	r3, #1
 800960a:	d119      	bne.n	8009640 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800960c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	330c      	adds	r3, #12
 8009612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	e853 3f00 	ldrex	r3, [r3]
 800961a:	60fb      	str	r3, [r7, #12]
   return(result);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0310 	bic.w	r3, r3, #16
 8009622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	330c      	adds	r3, #12
 800962a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800962c:	61fa      	str	r2, [r7, #28]
 800962e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009630:	69b9      	ldr	r1, [r7, #24]
 8009632:	69fa      	ldr	r2, [r7, #28]
 8009634:	e841 2300 	strex	r3, r2, [r1]
 8009638:	617b      	str	r3, [r7, #20]
   return(result);
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1e5      	bne.n	800960c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009644:	2b01      	cmp	r3, #1
 8009646:	d106      	bne.n	8009656 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800964a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800964c:	4619      	mov	r1, r3
 800964e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009650:	f7ff ff0e 	bl	8009470 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009654:	e002      	b.n	800965c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009656:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009658:	f7f9 fbc2 	bl	8002de0 <HAL_UART_RxCpltCallback>
}
 800965c:	bf00      	nop
 800965e:	3770      	adds	r7, #112	; 0x70
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009670:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009676:	2b01      	cmp	r3, #1
 8009678:	d108      	bne.n	800968c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800967e:	085b      	lsrs	r3, r3, #1
 8009680:	b29b      	uxth	r3, r3
 8009682:	4619      	mov	r1, r3
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7ff fef3 	bl	8009470 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800968a:	e002      	b.n	8009692 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f7ff fedb 	bl	8009448 <HAL_UART_RxHalfCpltCallback>
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b6:	2b80      	cmp	r3, #128	; 0x80
 80096b8:	bf0c      	ite	eq
 80096ba:	2301      	moveq	r3, #1
 80096bc:	2300      	movne	r3, #0
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b21      	cmp	r3, #33	; 0x21
 80096cc:	d108      	bne.n	80096e0 <UART_DMAError+0x46>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2200      	movs	r2, #0
 80096d8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80096da:	68b8      	ldr	r0, [r7, #8]
 80096dc:	f000 f8c2 	bl	8009864 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ea:	2b40      	cmp	r3, #64	; 0x40
 80096ec:	bf0c      	ite	eq
 80096ee:	2301      	moveq	r3, #1
 80096f0:	2300      	movne	r3, #0
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b22      	cmp	r3, #34	; 0x22
 8009700:	d108      	bne.n	8009714 <UART_DMAError+0x7a>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d005      	beq.n	8009714 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2200      	movs	r2, #0
 800970c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800970e:	68b8      	ldr	r0, [r7, #8]
 8009710:	f000 f8d0 	bl	80098b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009718:	f043 0210 	orr.w	r2, r3, #16
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009720:	68b8      	ldr	r0, [r7, #8]
 8009722:	f7ff fe9b 	bl	800945c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009726:	bf00      	nop
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b098      	sub	sp, #96	; 0x60
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	4613      	mov	r3, r2
 800973c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	88fa      	ldrh	r2, [r7, #6]
 8009748:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2222      	movs	r2, #34	; 0x22
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	4a3e      	ldr	r2, [pc, #248]	; (8009858 <UART_Start_Receive_DMA+0x128>)
 800975e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	4a3d      	ldr	r2, [pc, #244]	; (800985c <UART_Start_Receive_DMA+0x12c>)
 8009766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	4a3c      	ldr	r2, [pc, #240]	; (8009860 <UART_Start_Receive_DMA+0x130>)
 800976e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009774:	2200      	movs	r2, #0
 8009776:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009778:	f107 0308 	add.w	r3, r7, #8
 800977c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3304      	adds	r3, #4
 8009788:	4619      	mov	r1, r3
 800978a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	88fb      	ldrh	r3, [r7, #6]
 8009790:	f7fc fd7a 	bl	8006288 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009794:	2300      	movs	r3, #0
 8009796:	613b      	str	r3, [r7, #16]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	613b      	str	r3, [r7, #16]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	613b      	str	r3, [r7, #16]
 80097a8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	330c      	adds	r3, #12
 80097b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	330c      	adds	r3, #12
 80097d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80097d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80097d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80097e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e5      	bne.n	80097b2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3314      	adds	r3, #20
 80097ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	f043 0301 	orr.w	r3, r3, #1
 80097fc:	657b      	str	r3, [r7, #84]	; 0x54
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3314      	adds	r3, #20
 8009804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009806:	63ba      	str	r2, [r7, #56]	; 0x38
 8009808:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800980c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e5      	bne.n	80097e6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3314      	adds	r3, #20
 8009820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	617b      	str	r3, [r7, #20]
   return(result);
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009830:	653b      	str	r3, [r7, #80]	; 0x50
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3314      	adds	r3, #20
 8009838:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800983a:	627a      	str	r2, [r7, #36]	; 0x24
 800983c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6a39      	ldr	r1, [r7, #32]
 8009840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	61fb      	str	r3, [r7, #28]
   return(result);
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e5      	bne.n	800981a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3760      	adds	r7, #96	; 0x60
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	0800953f 	.word	0x0800953f
 800985c:	08009665 	.word	0x08009665
 8009860:	0800969b 	.word	0x0800969b

08009864 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009864:	b480      	push	{r7}
 8009866:	b089      	sub	sp, #36	; 0x24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	330c      	adds	r3, #12
 8009872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	60bb      	str	r3, [r7, #8]
   return(result);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009882:	61fb      	str	r3, [r7, #28]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	330c      	adds	r3, #12
 800988a:	69fa      	ldr	r2, [r7, #28]
 800988c:	61ba      	str	r2, [r7, #24]
 800988e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009890:	6979      	ldr	r1, [r7, #20]
 8009892:	69ba      	ldr	r2, [r7, #24]
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	613b      	str	r3, [r7, #16]
   return(result);
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e5      	bne.n	800986c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2220      	movs	r2, #32
 80098a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80098a8:	bf00      	nop
 80098aa:	3724      	adds	r7, #36	; 0x24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b095      	sub	sp, #84	; 0x54
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	330c      	adds	r3, #12
 80098c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c6:	e853 3f00 	ldrex	r3, [r3]
 80098ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	330c      	adds	r3, #12
 80098da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098dc:	643a      	str	r2, [r7, #64]	; 0x40
 80098de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098e4:	e841 2300 	strex	r3, r2, [r1]
 80098e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1e5      	bne.n	80098bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3314      	adds	r3, #20
 80098f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	e853 3f00 	ldrex	r3, [r3]
 80098fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	f023 0301 	bic.w	r3, r3, #1
 8009906:	64bb      	str	r3, [r7, #72]	; 0x48
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3314      	adds	r3, #20
 800990e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009918:	e841 2300 	strex	r3, r2, [r1]
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e5      	bne.n	80098f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009928:	2b01      	cmp	r3, #1
 800992a:	d119      	bne.n	8009960 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	330c      	adds	r3, #12
 8009932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	e853 3f00 	ldrex	r3, [r3]
 800993a:	60bb      	str	r3, [r7, #8]
   return(result);
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f023 0310 	bic.w	r3, r3, #16
 8009942:	647b      	str	r3, [r7, #68]	; 0x44
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	330c      	adds	r3, #12
 800994a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800994c:	61ba      	str	r2, [r7, #24]
 800994e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009950:	6979      	ldr	r1, [r7, #20]
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	e841 2300 	strex	r3, r2, [r1]
 8009958:	613b      	str	r3, [r7, #16]
   return(result);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1e5      	bne.n	800992c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2220      	movs	r2, #32
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800996e:	bf00      	nop
 8009970:	3754      	adds	r7, #84	; 0x54
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009986:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f7ff fd61 	bl	800945c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800999a:	bf00      	nop
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b085      	sub	sp, #20
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b21      	cmp	r3, #33	; 0x21
 80099b4:	d13e      	bne.n	8009a34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099be:	d114      	bne.n	80099ea <UART_Transmit_IT+0x48>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d110      	bne.n	80099ea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	881b      	ldrh	r3, [r3, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	1c9a      	adds	r2, r3, #2
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	621a      	str	r2, [r3, #32]
 80099e8:	e008      	b.n	80099fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	1c59      	adds	r1, r3, #1
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	6211      	str	r1, [r2, #32]
 80099f4:	781a      	ldrb	r2, [r3, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	3b01      	subs	r3, #1
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10f      	bne.n	8009a30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68da      	ldr	r2, [r3, #12]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e000      	b.n	8009a36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a34:	2302      	movs	r3, #2
  }
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3714      	adds	r7, #20
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7ff fcdc 	bl	8009420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b08c      	sub	sp, #48	; 0x30
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b22      	cmp	r3, #34	; 0x22
 8009a84:	f040 80ab 	bne.w	8009bde <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a90:	d117      	bne.n	8009ac2 <UART_Receive_IT+0x50>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d113      	bne.n	8009ac2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aba:	1c9a      	adds	r2, r3, #2
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	629a      	str	r2, [r3, #40]	; 0x28
 8009ac0:	e026      	b.n	8009b10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ad4:	d007      	beq.n	8009ae6 <UART_Receive_IT+0x74>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10a      	bne.n	8009af4 <UART_Receive_IT+0x82>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af0:	701a      	strb	r2, [r3, #0]
 8009af2:	e008      	b.n	8009b06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b00:	b2da      	uxtb	r2, r3
 8009b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	3b01      	subs	r3, #1
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d15a      	bne.n	8009bda <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68da      	ldr	r2, [r3, #12]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 0220 	bic.w	r2, r2, #32
 8009b32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	695a      	ldr	r2, [r3, #20]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f022 0201 	bic.w	r2, r2, #1
 8009b52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d135      	bne.n	8009bd0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	330c      	adds	r3, #12
 8009b70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	e853 3f00 	ldrex	r3, [r3]
 8009b78:	613b      	str	r3, [r7, #16]
   return(result);
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f023 0310 	bic.w	r3, r3, #16
 8009b80:	627b      	str	r3, [r7, #36]	; 0x24
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	330c      	adds	r3, #12
 8009b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b8a:	623a      	str	r2, [r7, #32]
 8009b8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b8e:	69f9      	ldr	r1, [r7, #28]
 8009b90:	6a3a      	ldr	r2, [r7, #32]
 8009b92:	e841 2300 	strex	r3, r2, [r1]
 8009b96:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d1e5      	bne.n	8009b6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0310 	and.w	r3, r3, #16
 8009ba8:	2b10      	cmp	r3, #16
 8009baa:	d10a      	bne.n	8009bc2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff fc51 	bl	8009470 <HAL_UARTEx_RxEventCallback>
 8009bce:	e002      	b.n	8009bd6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7f9 f905 	bl	8002de0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	e002      	b.n	8009be0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e000      	b.n	8009be0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009bde:	2302      	movs	r3, #2
  }
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3730      	adds	r7, #48	; 0x30
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	b09f      	sub	sp, #124	; 0x7c
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bfe:	68d9      	ldr	r1, [r3, #12]
 8009c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	ea40 0301 	orr.w	r3, r0, r1
 8009c08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c0c:	689a      	ldr	r2, [r3, #8]
 8009c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	431a      	orrs	r2, r3
 8009c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c16:	695b      	ldr	r3, [r3, #20]
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c2c:	f021 010c 	bic.w	r1, r1, #12
 8009c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c36:	430b      	orrs	r3, r1
 8009c38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c46:	6999      	ldr	r1, [r3, #24]
 8009c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	ea40 0301 	orr.w	r3, r0, r1
 8009c50:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	4bc5      	ldr	r3, [pc, #788]	; (8009f6c <UART_SetConfig+0x384>)
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d004      	beq.n	8009c66 <UART_SetConfig+0x7e>
 8009c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	4bc3      	ldr	r3, [pc, #780]	; (8009f70 <UART_SetConfig+0x388>)
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d103      	bne.n	8009c6e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c66:	f7fd fcab 	bl	80075c0 <HAL_RCC_GetPCLK2Freq>
 8009c6a:	6778      	str	r0, [r7, #116]	; 0x74
 8009c6c:	e002      	b.n	8009c74 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c6e:	f7fd fc93 	bl	8007598 <HAL_RCC_GetPCLK1Freq>
 8009c72:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c7c:	f040 80b6 	bne.w	8009dec <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c82:	461c      	mov	r4, r3
 8009c84:	f04f 0500 	mov.w	r5, #0
 8009c88:	4622      	mov	r2, r4
 8009c8a:	462b      	mov	r3, r5
 8009c8c:	1891      	adds	r1, r2, r2
 8009c8e:	6439      	str	r1, [r7, #64]	; 0x40
 8009c90:	415b      	adcs	r3, r3
 8009c92:	647b      	str	r3, [r7, #68]	; 0x44
 8009c94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009c98:	1912      	adds	r2, r2, r4
 8009c9a:	eb45 0303 	adc.w	r3, r5, r3
 8009c9e:	f04f 0000 	mov.w	r0, #0
 8009ca2:	f04f 0100 	mov.w	r1, #0
 8009ca6:	00d9      	lsls	r1, r3, #3
 8009ca8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009cac:	00d0      	lsls	r0, r2, #3
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	1911      	adds	r1, r2, r4
 8009cb4:	6639      	str	r1, [r7, #96]	; 0x60
 8009cb6:	416b      	adcs	r3, r5
 8009cb8:	667b      	str	r3, [r7, #100]	; 0x64
 8009cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f04f 0300 	mov.w	r3, #0
 8009cc4:	1891      	adds	r1, r2, r2
 8009cc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8009cc8:	415b      	adcs	r3, r3
 8009cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ccc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009cd0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009cd4:	f7f6 fe96 	bl	8000a04 <__aeabi_uldivmod>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4ba5      	ldr	r3, [pc, #660]	; (8009f74 <UART_SetConfig+0x38c>)
 8009cde:	fba3 2302 	umull	r2, r3, r3, r2
 8009ce2:	095b      	lsrs	r3, r3, #5
 8009ce4:	011e      	lsls	r6, r3, #4
 8009ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ce8:	461c      	mov	r4, r3
 8009cea:	f04f 0500 	mov.w	r5, #0
 8009cee:	4622      	mov	r2, r4
 8009cf0:	462b      	mov	r3, r5
 8009cf2:	1891      	adds	r1, r2, r2
 8009cf4:	6339      	str	r1, [r7, #48]	; 0x30
 8009cf6:	415b      	adcs	r3, r3
 8009cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8009cfa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009cfe:	1912      	adds	r2, r2, r4
 8009d00:	eb45 0303 	adc.w	r3, r5, r3
 8009d04:	f04f 0000 	mov.w	r0, #0
 8009d08:	f04f 0100 	mov.w	r1, #0
 8009d0c:	00d9      	lsls	r1, r3, #3
 8009d0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d12:	00d0      	lsls	r0, r2, #3
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	1911      	adds	r1, r2, r4
 8009d1a:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d1c:	416b      	adcs	r3, r5
 8009d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	461a      	mov	r2, r3
 8009d26:	f04f 0300 	mov.w	r3, #0
 8009d2a:	1891      	adds	r1, r2, r2
 8009d2c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d2e:	415b      	adcs	r3, r3
 8009d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d36:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009d3a:	f7f6 fe63 	bl	8000a04 <__aeabi_uldivmod>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4b8c      	ldr	r3, [pc, #560]	; (8009f74 <UART_SetConfig+0x38c>)
 8009d44:	fba3 1302 	umull	r1, r3, r3, r2
 8009d48:	095b      	lsrs	r3, r3, #5
 8009d4a:	2164      	movs	r1, #100	; 0x64
 8009d4c:	fb01 f303 	mul.w	r3, r1, r3
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	3332      	adds	r3, #50	; 0x32
 8009d56:	4a87      	ldr	r2, [pc, #540]	; (8009f74 <UART_SetConfig+0x38c>)
 8009d58:	fba2 2303 	umull	r2, r3, r2, r3
 8009d5c:	095b      	lsrs	r3, r3, #5
 8009d5e:	005b      	lsls	r3, r3, #1
 8009d60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d64:	441e      	add	r6, r3
 8009d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f04f 0100 	mov.w	r1, #0
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	1894      	adds	r4, r2, r2
 8009d74:	623c      	str	r4, [r7, #32]
 8009d76:	415b      	adcs	r3, r3
 8009d78:	627b      	str	r3, [r7, #36]	; 0x24
 8009d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d7e:	1812      	adds	r2, r2, r0
 8009d80:	eb41 0303 	adc.w	r3, r1, r3
 8009d84:	f04f 0400 	mov.w	r4, #0
 8009d88:	f04f 0500 	mov.w	r5, #0
 8009d8c:	00dd      	lsls	r5, r3, #3
 8009d8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009d92:	00d4      	lsls	r4, r2, #3
 8009d94:	4622      	mov	r2, r4
 8009d96:	462b      	mov	r3, r5
 8009d98:	1814      	adds	r4, r2, r0
 8009d9a:	653c      	str	r4, [r7, #80]	; 0x50
 8009d9c:	414b      	adcs	r3, r1
 8009d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8009da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	461a      	mov	r2, r3
 8009da6:	f04f 0300 	mov.w	r3, #0
 8009daa:	1891      	adds	r1, r2, r2
 8009dac:	61b9      	str	r1, [r7, #24]
 8009dae:	415b      	adcs	r3, r3
 8009db0:	61fb      	str	r3, [r7, #28]
 8009db2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009db6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009dba:	f7f6 fe23 	bl	8000a04 <__aeabi_uldivmod>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4b6c      	ldr	r3, [pc, #432]	; (8009f74 <UART_SetConfig+0x38c>)
 8009dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8009dc8:	095b      	lsrs	r3, r3, #5
 8009dca:	2164      	movs	r1, #100	; 0x64
 8009dcc:	fb01 f303 	mul.w	r3, r1, r3
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	3332      	adds	r3, #50	; 0x32
 8009dd6:	4a67      	ldr	r2, [pc, #412]	; (8009f74 <UART_SetConfig+0x38c>)
 8009dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ddc:	095b      	lsrs	r3, r3, #5
 8009dde:	f003 0207 	and.w	r2, r3, #7
 8009de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4432      	add	r2, r6
 8009de8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009dea:	e0b9      	b.n	8009f60 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dee:	461c      	mov	r4, r3
 8009df0:	f04f 0500 	mov.w	r5, #0
 8009df4:	4622      	mov	r2, r4
 8009df6:	462b      	mov	r3, r5
 8009df8:	1891      	adds	r1, r2, r2
 8009dfa:	6139      	str	r1, [r7, #16]
 8009dfc:	415b      	adcs	r3, r3
 8009dfe:	617b      	str	r3, [r7, #20]
 8009e00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e04:	1912      	adds	r2, r2, r4
 8009e06:	eb45 0303 	adc.w	r3, r5, r3
 8009e0a:	f04f 0000 	mov.w	r0, #0
 8009e0e:	f04f 0100 	mov.w	r1, #0
 8009e12:	00d9      	lsls	r1, r3, #3
 8009e14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e18:	00d0      	lsls	r0, r2, #3
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	eb12 0804 	adds.w	r8, r2, r4
 8009e22:	eb43 0905 	adc.w	r9, r3, r5
 8009e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f04f 0100 	mov.w	r1, #0
 8009e30:	f04f 0200 	mov.w	r2, #0
 8009e34:	f04f 0300 	mov.w	r3, #0
 8009e38:	008b      	lsls	r3, r1, #2
 8009e3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e3e:	0082      	lsls	r2, r0, #2
 8009e40:	4640      	mov	r0, r8
 8009e42:	4649      	mov	r1, r9
 8009e44:	f7f6 fdde 	bl	8000a04 <__aeabi_uldivmod>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4b49      	ldr	r3, [pc, #292]	; (8009f74 <UART_SetConfig+0x38c>)
 8009e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8009e52:	095b      	lsrs	r3, r3, #5
 8009e54:	011e      	lsls	r6, r3, #4
 8009e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f04f 0100 	mov.w	r1, #0
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	1894      	adds	r4, r2, r2
 8009e64:	60bc      	str	r4, [r7, #8]
 8009e66:	415b      	adcs	r3, r3
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e6e:	1812      	adds	r2, r2, r0
 8009e70:	eb41 0303 	adc.w	r3, r1, r3
 8009e74:	f04f 0400 	mov.w	r4, #0
 8009e78:	f04f 0500 	mov.w	r5, #0
 8009e7c:	00dd      	lsls	r5, r3, #3
 8009e7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009e82:	00d4      	lsls	r4, r2, #3
 8009e84:	4622      	mov	r2, r4
 8009e86:	462b      	mov	r3, r5
 8009e88:	1814      	adds	r4, r2, r0
 8009e8a:	64bc      	str	r4, [r7, #72]	; 0x48
 8009e8c:	414b      	adcs	r3, r1
 8009e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f04f 0100 	mov.w	r1, #0
 8009e9a:	f04f 0200 	mov.w	r2, #0
 8009e9e:	f04f 0300 	mov.w	r3, #0
 8009ea2:	008b      	lsls	r3, r1, #2
 8009ea4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ea8:	0082      	lsls	r2, r0, #2
 8009eaa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009eae:	f7f6 fda9 	bl	8000a04 <__aeabi_uldivmod>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4b2f      	ldr	r3, [pc, #188]	; (8009f74 <UART_SetConfig+0x38c>)
 8009eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8009ebc:	095b      	lsrs	r3, r3, #5
 8009ebe:	2164      	movs	r1, #100	; 0x64
 8009ec0:	fb01 f303 	mul.w	r3, r1, r3
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	3332      	adds	r3, #50	; 0x32
 8009eca:	4a2a      	ldr	r2, [pc, #168]	; (8009f74 <UART_SetConfig+0x38c>)
 8009ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed0:	095b      	lsrs	r3, r3, #5
 8009ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ed6:	441e      	add	r6, r3
 8009ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009eda:	4618      	mov	r0, r3
 8009edc:	f04f 0100 	mov.w	r1, #0
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	1894      	adds	r4, r2, r2
 8009ee6:	603c      	str	r4, [r7, #0]
 8009ee8:	415b      	adcs	r3, r3
 8009eea:	607b      	str	r3, [r7, #4]
 8009eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ef0:	1812      	adds	r2, r2, r0
 8009ef2:	eb41 0303 	adc.w	r3, r1, r3
 8009ef6:	f04f 0400 	mov.w	r4, #0
 8009efa:	f04f 0500 	mov.w	r5, #0
 8009efe:	00dd      	lsls	r5, r3, #3
 8009f00:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f04:	00d4      	lsls	r4, r2, #3
 8009f06:	4622      	mov	r2, r4
 8009f08:	462b      	mov	r3, r5
 8009f0a:	eb12 0a00 	adds.w	sl, r2, r0
 8009f0e:	eb43 0b01 	adc.w	fp, r3, r1
 8009f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f04f 0100 	mov.w	r1, #0
 8009f1c:	f04f 0200 	mov.w	r2, #0
 8009f20:	f04f 0300 	mov.w	r3, #0
 8009f24:	008b      	lsls	r3, r1, #2
 8009f26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f2a:	0082      	lsls	r2, r0, #2
 8009f2c:	4650      	mov	r0, sl
 8009f2e:	4659      	mov	r1, fp
 8009f30:	f7f6 fd68 	bl	8000a04 <__aeabi_uldivmod>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	4b0e      	ldr	r3, [pc, #56]	; (8009f74 <UART_SetConfig+0x38c>)
 8009f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8009f3e:	095b      	lsrs	r3, r3, #5
 8009f40:	2164      	movs	r1, #100	; 0x64
 8009f42:	fb01 f303 	mul.w	r3, r1, r3
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	011b      	lsls	r3, r3, #4
 8009f4a:	3332      	adds	r3, #50	; 0x32
 8009f4c:	4a09      	ldr	r2, [pc, #36]	; (8009f74 <UART_SetConfig+0x38c>)
 8009f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f52:	095b      	lsrs	r3, r3, #5
 8009f54:	f003 020f 	and.w	r2, r3, #15
 8009f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4432      	add	r2, r6
 8009f5e:	609a      	str	r2, [r3, #8]
}
 8009f60:	bf00      	nop
 8009f62:	377c      	adds	r7, #124	; 0x7c
 8009f64:	46bd      	mov	sp, r7
 8009f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6a:	bf00      	nop
 8009f6c:	40011000 	.word	0x40011000
 8009f70:	40011400 	.word	0x40011400
 8009f74:	51eb851f 	.word	0x51eb851f

08009f78 <roundf>:
 8009f78:	ee10 0a10 	vmov	r0, s0
 8009f7c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009f80:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8009f84:	2a16      	cmp	r2, #22
 8009f86:	dc15      	bgt.n	8009fb4 <roundf+0x3c>
 8009f88:	2a00      	cmp	r2, #0
 8009f8a:	da08      	bge.n	8009f9e <roundf+0x26>
 8009f8c:	3201      	adds	r2, #1
 8009f8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8009f92:	d101      	bne.n	8009f98 <roundf+0x20>
 8009f94:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8009f98:	ee00 3a10 	vmov	s0, r3
 8009f9c:	4770      	bx	lr
 8009f9e:	4908      	ldr	r1, [pc, #32]	; (8009fc0 <roundf+0x48>)
 8009fa0:	4111      	asrs	r1, r2
 8009fa2:	4208      	tst	r0, r1
 8009fa4:	d0fa      	beq.n	8009f9c <roundf+0x24>
 8009fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009faa:	4113      	asrs	r3, r2
 8009fac:	4403      	add	r3, r0
 8009fae:	ea23 0301 	bic.w	r3, r3, r1
 8009fb2:	e7f1      	b.n	8009f98 <roundf+0x20>
 8009fb4:	2a80      	cmp	r2, #128	; 0x80
 8009fb6:	d1f1      	bne.n	8009f9c <roundf+0x24>
 8009fb8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	007fffff 	.word	0x007fffff

08009fc4 <asinf>:
 8009fc4:	b508      	push	{r3, lr}
 8009fc6:	ed2d 8b02 	vpush	{d8}
 8009fca:	eeb0 8a40 	vmov.f32	s16, s0
 8009fce:	f000 f82d 	bl	800a02c <__ieee754_asinf>
 8009fd2:	4b13      	ldr	r3, [pc, #76]	; (800a020 <asinf+0x5c>)
 8009fd4:	f993 3000 	ldrsb.w	r3, [r3]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	eef0 8a40 	vmov.f32	s17, s0
 8009fde:	d01a      	beq.n	800a016 <asinf+0x52>
 8009fe0:	eeb4 8a48 	vcmp.f32	s16, s16
 8009fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe8:	d615      	bvs.n	800a016 <asinf+0x52>
 8009fea:	eeb0 0a48 	vmov.f32	s0, s16
 8009fee:	f000 fa7b 	bl	800a4e8 <fabsf>
 8009ff2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009ff6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ffe:	dd0a      	ble.n	800a016 <asinf+0x52>
 800a000:	f000 fa80 	bl	800a504 <__errno>
 800a004:	ecbd 8b02 	vpop	{d8}
 800a008:	2321      	movs	r3, #33	; 0x21
 800a00a:	6003      	str	r3, [r0, #0]
 800a00c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a010:	4804      	ldr	r0, [pc, #16]	; (800a024 <asinf+0x60>)
 800a012:	f000 ba71 	b.w	800a4f8 <nanf>
 800a016:	eeb0 0a68 	vmov.f32	s0, s17
 800a01a:	ecbd 8b02 	vpop	{d8}
 800a01e:	bd08      	pop	{r3, pc}
 800a020:	2000000d 	.word	0x2000000d
 800a024:	0800a5c4 	.word	0x0800a5c4

0800a028 <atan2f>:
 800a028:	f000 b8e6 	b.w	800a1f8 <__ieee754_atan2f>

0800a02c <__ieee754_asinf>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	ee10 5a10 	vmov	r5, s0
 800a032:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a036:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a03a:	ed2d 8b04 	vpush	{d8-d9}
 800a03e:	d10c      	bne.n	800a05a <__ieee754_asinf+0x2e>
 800a040:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a1b8 <__ieee754_asinf+0x18c>
 800a044:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a1bc <__ieee754_asinf+0x190>
 800a048:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a04c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a050:	eeb0 0a67 	vmov.f32	s0, s15
 800a054:	ecbd 8b04 	vpop	{d8-d9}
 800a058:	bd38      	pop	{r3, r4, r5, pc}
 800a05a:	dd04      	ble.n	800a066 <__ieee754_asinf+0x3a>
 800a05c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a060:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a064:	e7f6      	b.n	800a054 <__ieee754_asinf+0x28>
 800a066:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a06a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a06e:	da0b      	bge.n	800a088 <__ieee754_asinf+0x5c>
 800a070:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a074:	da52      	bge.n	800a11c <__ieee754_asinf+0xf0>
 800a076:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a1c0 <__ieee754_asinf+0x194>
 800a07a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a07e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a086:	dce5      	bgt.n	800a054 <__ieee754_asinf+0x28>
 800a088:	f000 fa2e 	bl	800a4e8 <fabsf>
 800a08c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a090:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a094:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a098:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a1c4 <__ieee754_asinf+0x198>
 800a09c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a1c8 <__ieee754_asinf+0x19c>
 800a0a0:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a1cc <__ieee754_asinf+0x1a0>
 800a0a4:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a0a8:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a1d0 <__ieee754_asinf+0x1a4>
 800a0ac:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a0b0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a1d4 <__ieee754_asinf+0x1a8>
 800a0b4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a0b8:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a1d8 <__ieee754_asinf+0x1ac>
 800a0bc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a0c0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a1dc <__ieee754_asinf+0x1b0>
 800a0c4:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a0c8:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a1e0 <__ieee754_asinf+0x1b4>
 800a0cc:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a0d0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a1e4 <__ieee754_asinf+0x1b8>
 800a0d4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a0d8:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a1e8 <__ieee754_asinf+0x1bc>
 800a0dc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a0e0:	eeb0 0a48 	vmov.f32	s0, s16
 800a0e4:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a0e8:	f000 f926 	bl	800a338 <__ieee754_sqrtf>
 800a0ec:	4b3f      	ldr	r3, [pc, #252]	; (800a1ec <__ieee754_asinf+0x1c0>)
 800a0ee:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a0f2:	429c      	cmp	r4, r3
 800a0f4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a0f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a0fc:	dd3d      	ble.n	800a17a <__ieee754_asinf+0x14e>
 800a0fe:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a102:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a1f0 <__ieee754_asinf+0x1c4>
 800a106:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a10a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a1bc <__ieee754_asinf+0x190>
 800a10e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a112:	2d00      	cmp	r5, #0
 800a114:	bfd8      	it	le
 800a116:	eeb1 0a40 	vnegle.f32	s0, s0
 800a11a:	e79b      	b.n	800a054 <__ieee754_asinf+0x28>
 800a11c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a120:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a1c4 <__ieee754_asinf+0x198>
 800a124:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a1c8 <__ieee754_asinf+0x19c>
 800a128:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a1dc <__ieee754_asinf+0x1b0>
 800a12c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a130:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a1d0 <__ieee754_asinf+0x1a4>
 800a134:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a138:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a1d4 <__ieee754_asinf+0x1a8>
 800a13c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a140:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a1d8 <__ieee754_asinf+0x1ac>
 800a144:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a148:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a1cc <__ieee754_asinf+0x1a0>
 800a14c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a150:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a1e0 <__ieee754_asinf+0x1b4>
 800a154:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a158:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a1e4 <__ieee754_asinf+0x1b8>
 800a15c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a160:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a1e8 <__ieee754_asinf+0x1bc>
 800a164:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a16c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a170:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a174:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a178:	e76c      	b.n	800a054 <__ieee754_asinf+0x28>
 800a17a:	ee10 3a10 	vmov	r3, s0
 800a17e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a182:	f023 030f 	bic.w	r3, r3, #15
 800a186:	ee07 3a10 	vmov	s14, r3
 800a18a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a18e:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a192:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a196:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a19a:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a1b8 <__ieee754_asinf+0x18c>
 800a19e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a1a2:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a1a6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a1f4 <__ieee754_asinf+0x1c8>
 800a1aa:	eeb0 6a40 	vmov.f32	s12, s0
 800a1ae:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a1b2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a1b6:	e7aa      	b.n	800a10e <__ieee754_asinf+0xe2>
 800a1b8:	b33bbd2e 	.word	0xb33bbd2e
 800a1bc:	3fc90fdb 	.word	0x3fc90fdb
 800a1c0:	7149f2ca 	.word	0x7149f2ca
 800a1c4:	3811ef08 	.word	0x3811ef08
 800a1c8:	3a4f7f04 	.word	0x3a4f7f04
 800a1cc:	3e2aaaab 	.word	0x3e2aaaab
 800a1d0:	bd241146 	.word	0xbd241146
 800a1d4:	3e4e0aa8 	.word	0x3e4e0aa8
 800a1d8:	bea6b090 	.word	0xbea6b090
 800a1dc:	3d9dc62e 	.word	0x3d9dc62e
 800a1e0:	bf303361 	.word	0xbf303361
 800a1e4:	4001572d 	.word	0x4001572d
 800a1e8:	c019d139 	.word	0xc019d139
 800a1ec:	3f799999 	.word	0x3f799999
 800a1f0:	333bbd2e 	.word	0x333bbd2e
 800a1f4:	3f490fdb 	.word	0x3f490fdb

0800a1f8 <__ieee754_atan2f>:
 800a1f8:	ee10 2a90 	vmov	r2, s1
 800a1fc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a200:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a204:	b510      	push	{r4, lr}
 800a206:	eef0 7a40 	vmov.f32	s15, s0
 800a20a:	dc06      	bgt.n	800a21a <__ieee754_atan2f+0x22>
 800a20c:	ee10 0a10 	vmov	r0, s0
 800a210:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a214:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a218:	dd04      	ble.n	800a224 <__ieee754_atan2f+0x2c>
 800a21a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a21e:	eeb0 0a67 	vmov.f32	s0, s15
 800a222:	bd10      	pop	{r4, pc}
 800a224:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a228:	d103      	bne.n	800a232 <__ieee754_atan2f+0x3a>
 800a22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a22e:	f000 b887 	b.w	800a340 <atanf>
 800a232:	1794      	asrs	r4, r2, #30
 800a234:	f004 0402 	and.w	r4, r4, #2
 800a238:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a23c:	b943      	cbnz	r3, 800a250 <__ieee754_atan2f+0x58>
 800a23e:	2c02      	cmp	r4, #2
 800a240:	d05e      	beq.n	800a300 <__ieee754_atan2f+0x108>
 800a242:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a314 <__ieee754_atan2f+0x11c>
 800a246:	2c03      	cmp	r4, #3
 800a248:	bf08      	it	eq
 800a24a:	eef0 7a47 	vmoveq.f32	s15, s14
 800a24e:	e7e6      	b.n	800a21e <__ieee754_atan2f+0x26>
 800a250:	b941      	cbnz	r1, 800a264 <__ieee754_atan2f+0x6c>
 800a252:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a318 <__ieee754_atan2f+0x120>
 800a256:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a31c <__ieee754_atan2f+0x124>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	bfb8      	it	lt
 800a25e:	eef0 7a40 	vmovlt.f32	s15, s0
 800a262:	e7dc      	b.n	800a21e <__ieee754_atan2f+0x26>
 800a264:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a268:	d110      	bne.n	800a28c <__ieee754_atan2f+0x94>
 800a26a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a26e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a272:	d107      	bne.n	800a284 <__ieee754_atan2f+0x8c>
 800a274:	2c02      	cmp	r4, #2
 800a276:	d846      	bhi.n	800a306 <__ieee754_atan2f+0x10e>
 800a278:	4b29      	ldr	r3, [pc, #164]	; (800a320 <__ieee754_atan2f+0x128>)
 800a27a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a27e:	edd4 7a00 	vldr	s15, [r4]
 800a282:	e7cc      	b.n	800a21e <__ieee754_atan2f+0x26>
 800a284:	2c02      	cmp	r4, #2
 800a286:	d841      	bhi.n	800a30c <__ieee754_atan2f+0x114>
 800a288:	4b26      	ldr	r3, [pc, #152]	; (800a324 <__ieee754_atan2f+0x12c>)
 800a28a:	e7f6      	b.n	800a27a <__ieee754_atan2f+0x82>
 800a28c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a290:	d0df      	beq.n	800a252 <__ieee754_atan2f+0x5a>
 800a292:	1a5b      	subs	r3, r3, r1
 800a294:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a298:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a29c:	da1a      	bge.n	800a2d4 <__ieee754_atan2f+0xdc>
 800a29e:	2a00      	cmp	r2, #0
 800a2a0:	da01      	bge.n	800a2a6 <__ieee754_atan2f+0xae>
 800a2a2:	313c      	adds	r1, #60	; 0x3c
 800a2a4:	db19      	blt.n	800a2da <__ieee754_atan2f+0xe2>
 800a2a6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a2aa:	f000 f91d 	bl	800a4e8 <fabsf>
 800a2ae:	f000 f847 	bl	800a340 <atanf>
 800a2b2:	eef0 7a40 	vmov.f32	s15, s0
 800a2b6:	2c01      	cmp	r4, #1
 800a2b8:	d012      	beq.n	800a2e0 <__ieee754_atan2f+0xe8>
 800a2ba:	2c02      	cmp	r4, #2
 800a2bc:	d017      	beq.n	800a2ee <__ieee754_atan2f+0xf6>
 800a2be:	2c00      	cmp	r4, #0
 800a2c0:	d0ad      	beq.n	800a21e <__ieee754_atan2f+0x26>
 800a2c2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a328 <__ieee754_atan2f+0x130>
 800a2c6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a2ca:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a32c <__ieee754_atan2f+0x134>
 800a2ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a2d2:	e7a4      	b.n	800a21e <__ieee754_atan2f+0x26>
 800a2d4:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a318 <__ieee754_atan2f+0x120>
 800a2d8:	e7ed      	b.n	800a2b6 <__ieee754_atan2f+0xbe>
 800a2da:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a330 <__ieee754_atan2f+0x138>
 800a2de:	e7ea      	b.n	800a2b6 <__ieee754_atan2f+0xbe>
 800a2e0:	ee17 3a90 	vmov	r3, s15
 800a2e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a2e8:	ee07 3a90 	vmov	s15, r3
 800a2ec:	e797      	b.n	800a21e <__ieee754_atan2f+0x26>
 800a2ee:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a328 <__ieee754_atan2f+0x130>
 800a2f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a2f6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a32c <__ieee754_atan2f+0x134>
 800a2fa:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a2fe:	e78e      	b.n	800a21e <__ieee754_atan2f+0x26>
 800a300:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a32c <__ieee754_atan2f+0x134>
 800a304:	e78b      	b.n	800a21e <__ieee754_atan2f+0x26>
 800a306:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a334 <__ieee754_atan2f+0x13c>
 800a30a:	e788      	b.n	800a21e <__ieee754_atan2f+0x26>
 800a30c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a330 <__ieee754_atan2f+0x138>
 800a310:	e785      	b.n	800a21e <__ieee754_atan2f+0x26>
 800a312:	bf00      	nop
 800a314:	c0490fdb 	.word	0xc0490fdb
 800a318:	3fc90fdb 	.word	0x3fc90fdb
 800a31c:	bfc90fdb 	.word	0xbfc90fdb
 800a320:	0800a5c8 	.word	0x0800a5c8
 800a324:	0800a5d4 	.word	0x0800a5d4
 800a328:	33bbbd2e 	.word	0x33bbbd2e
 800a32c:	40490fdb 	.word	0x40490fdb
 800a330:	00000000 	.word	0x00000000
 800a334:	3f490fdb 	.word	0x3f490fdb

0800a338 <__ieee754_sqrtf>:
 800a338:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a33c:	4770      	bx	lr
	...

0800a340 <atanf>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	ee10 5a10 	vmov	r5, s0
 800a346:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a34a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a34e:	eef0 7a40 	vmov.f32	s15, s0
 800a352:	db10      	blt.n	800a376 <atanf+0x36>
 800a354:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a358:	dd04      	ble.n	800a364 <atanf+0x24>
 800a35a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a35e:	eeb0 0a67 	vmov.f32	s0, s15
 800a362:	bd38      	pop	{r3, r4, r5, pc}
 800a364:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a49c <atanf+0x15c>
 800a368:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a4a0 <atanf+0x160>
 800a36c:	2d00      	cmp	r5, #0
 800a36e:	bfd8      	it	le
 800a370:	eef0 7a40 	vmovle.f32	s15, s0
 800a374:	e7f3      	b.n	800a35e <atanf+0x1e>
 800a376:	4b4b      	ldr	r3, [pc, #300]	; (800a4a4 <atanf+0x164>)
 800a378:	429c      	cmp	r4, r3
 800a37a:	dc10      	bgt.n	800a39e <atanf+0x5e>
 800a37c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a380:	da0a      	bge.n	800a398 <atanf+0x58>
 800a382:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a4a8 <atanf+0x168>
 800a386:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a38a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a38e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a396:	dce2      	bgt.n	800a35e <atanf+0x1e>
 800a398:	f04f 33ff 	mov.w	r3, #4294967295
 800a39c:	e013      	b.n	800a3c6 <atanf+0x86>
 800a39e:	f000 f8a3 	bl	800a4e8 <fabsf>
 800a3a2:	4b42      	ldr	r3, [pc, #264]	; (800a4ac <atanf+0x16c>)
 800a3a4:	429c      	cmp	r4, r3
 800a3a6:	dc4f      	bgt.n	800a448 <atanf+0x108>
 800a3a8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a3ac:	429c      	cmp	r4, r3
 800a3ae:	dc41      	bgt.n	800a434 <atanf+0xf4>
 800a3b0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a3b4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a3b8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a3bc:	2300      	movs	r3, #0
 800a3be:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a3c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a3cc:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a4b0 <atanf+0x170>
 800a3d0:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800a4b4 <atanf+0x174>
 800a3d4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a4b8 <atanf+0x178>
 800a3d8:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800a4bc <atanf+0x17c>
 800a3dc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a3e0:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a3e4:	eddf 5a36 	vldr	s11, [pc, #216]	; 800a4c0 <atanf+0x180>
 800a3e8:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a3ec:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800a4c4 <atanf+0x184>
 800a3f0:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a3f4:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a4c8 <atanf+0x188>
 800a3f8:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a3fc:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800a4cc <atanf+0x18c>
 800a400:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a404:	eddf 5a32 	vldr	s11, [pc, #200]	; 800a4d0 <atanf+0x190>
 800a408:	eee7 5a05 	vfma.f32	s11, s14, s10
 800a40c:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800a4d4 <atanf+0x194>
 800a410:	eea5 5a87 	vfma.f32	s10, s11, s14
 800a414:	eddf 5a30 	vldr	s11, [pc, #192]	; 800a4d8 <atanf+0x198>
 800a418:	eee5 5a07 	vfma.f32	s11, s10, s14
 800a41c:	eea5 0a87 	vfma.f32	s0, s11, s14
 800a420:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a424:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a428:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a42c:	d121      	bne.n	800a472 <atanf+0x132>
 800a42e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a432:	e794      	b.n	800a35e <atanf+0x1e>
 800a434:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a438:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a43c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a440:	2301      	movs	r3, #1
 800a442:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a446:	e7be      	b.n	800a3c6 <atanf+0x86>
 800a448:	4b24      	ldr	r3, [pc, #144]	; (800a4dc <atanf+0x19c>)
 800a44a:	429c      	cmp	r4, r3
 800a44c:	dc0b      	bgt.n	800a466 <atanf+0x126>
 800a44e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a456:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a45a:	2302      	movs	r3, #2
 800a45c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a464:	e7af      	b.n	800a3c6 <atanf+0x86>
 800a466:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a46a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a46e:	2303      	movs	r3, #3
 800a470:	e7a9      	b.n	800a3c6 <atanf+0x86>
 800a472:	4a1b      	ldr	r2, [pc, #108]	; (800a4e0 <atanf+0x1a0>)
 800a474:	491b      	ldr	r1, [pc, #108]	; (800a4e4 <atanf+0x1a4>)
 800a476:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a47a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a47e:	ed93 7a00 	vldr	s14, [r3]
 800a482:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a486:	2d00      	cmp	r5, #0
 800a488:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a48c:	ed92 0a00 	vldr	s0, [r2]
 800a490:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a494:	bfb8      	it	lt
 800a496:	eef1 7a67 	vneglt.f32	s15, s15
 800a49a:	e760      	b.n	800a35e <atanf+0x1e>
 800a49c:	3fc90fdb 	.word	0x3fc90fdb
 800a4a0:	bfc90fdb 	.word	0xbfc90fdb
 800a4a4:	3edfffff 	.word	0x3edfffff
 800a4a8:	7149f2ca 	.word	0x7149f2ca
 800a4ac:	3f97ffff 	.word	0x3f97ffff
 800a4b0:	3c8569d7 	.word	0x3c8569d7
 800a4b4:	3d4bda59 	.word	0x3d4bda59
 800a4b8:	bd15a221 	.word	0xbd15a221
 800a4bc:	be4ccccd 	.word	0xbe4ccccd
 800a4c0:	3d886b35 	.word	0x3d886b35
 800a4c4:	3dba2e6e 	.word	0x3dba2e6e
 800a4c8:	3e124925 	.word	0x3e124925
 800a4cc:	3eaaaaab 	.word	0x3eaaaaab
 800a4d0:	bd6ef16b 	.word	0xbd6ef16b
 800a4d4:	bd9d8795 	.word	0xbd9d8795
 800a4d8:	bde38e38 	.word	0xbde38e38
 800a4dc:	401bffff 	.word	0x401bffff
 800a4e0:	0800a5e0 	.word	0x0800a5e0
 800a4e4:	0800a5f0 	.word	0x0800a5f0

0800a4e8 <fabsf>:
 800a4e8:	ee10 3a10 	vmov	r3, s0
 800a4ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4f0:	ee00 3a10 	vmov	s0, r3
 800a4f4:	4770      	bx	lr
	...

0800a4f8 <nanf>:
 800a4f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a500 <nanf+0x8>
 800a4fc:	4770      	bx	lr
 800a4fe:	bf00      	nop
 800a500:	7fc00000 	.word	0x7fc00000

0800a504 <__errno>:
 800a504:	4b01      	ldr	r3, [pc, #4]	; (800a50c <__errno+0x8>)
 800a506:	6818      	ldr	r0, [r3, #0]
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	20000010 	.word	0x20000010

0800a510 <__libc_init_array>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	4d0d      	ldr	r5, [pc, #52]	; (800a548 <__libc_init_array+0x38>)
 800a514:	4c0d      	ldr	r4, [pc, #52]	; (800a54c <__libc_init_array+0x3c>)
 800a516:	1b64      	subs	r4, r4, r5
 800a518:	10a4      	asrs	r4, r4, #2
 800a51a:	2600      	movs	r6, #0
 800a51c:	42a6      	cmp	r6, r4
 800a51e:	d109      	bne.n	800a534 <__libc_init_array+0x24>
 800a520:	4d0b      	ldr	r5, [pc, #44]	; (800a550 <__libc_init_array+0x40>)
 800a522:	4c0c      	ldr	r4, [pc, #48]	; (800a554 <__libc_init_array+0x44>)
 800a524:	f000 f820 	bl	800a568 <_init>
 800a528:	1b64      	subs	r4, r4, r5
 800a52a:	10a4      	asrs	r4, r4, #2
 800a52c:	2600      	movs	r6, #0
 800a52e:	42a6      	cmp	r6, r4
 800a530:	d105      	bne.n	800a53e <__libc_init_array+0x2e>
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	f855 3b04 	ldr.w	r3, [r5], #4
 800a538:	4798      	blx	r3
 800a53a:	3601      	adds	r6, #1
 800a53c:	e7ee      	b.n	800a51c <__libc_init_array+0xc>
 800a53e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a542:	4798      	blx	r3
 800a544:	3601      	adds	r6, #1
 800a546:	e7f2      	b.n	800a52e <__libc_init_array+0x1e>
 800a548:	0800a608 	.word	0x0800a608
 800a54c:	0800a608 	.word	0x0800a608
 800a550:	0800a608 	.word	0x0800a608
 800a554:	0800a60c 	.word	0x0800a60c

0800a558 <memset>:
 800a558:	4402      	add	r2, r0
 800a55a:	4603      	mov	r3, r0
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d100      	bne.n	800a562 <memset+0xa>
 800a560:	4770      	bx	lr
 800a562:	f803 1b01 	strb.w	r1, [r3], #1
 800a566:	e7f9      	b.n	800a55c <memset+0x4>

0800a568 <_init>:
 800a568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56a:	bf00      	nop
 800a56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56e:	bc08      	pop	{r3}
 800a570:	469e      	mov	lr, r3
 800a572:	4770      	bx	lr

0800a574 <_fini>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	bf00      	nop
 800a578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57a:	bc08      	pop	{r3}
 800a57c:	469e      	mov	lr, r3
 800a57e:	4770      	bx	lr
