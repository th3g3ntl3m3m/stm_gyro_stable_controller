
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007758  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007900  08007900  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007900  08007900  00017900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007908  08007908  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000604  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000610  20000610  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000152bc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c0b  00000000  00000000  000352f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00037f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001060  00000000  00000000  00039090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000225df  00000000  00000000  0003a0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151a2  00000000  00000000  0005c6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db23c  00000000  00000000  00071871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014caad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049d8  00000000  00000000  0014cb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080078c8 	.word	0x080078c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080078c8 	.word	0x080078c8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8000d00:	bf00      	nop
 8000d02:	f000 f868 	bl	8000dd6 <icm20948_who_am_i>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f083 0301 	eor.w	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f7      	bne.n	8000d02 <icm20948_init+0x6>

	icm20948_device_reset();
 8000d12:	f000 f873 	bl	8000dfc <icm20948_device_reset>
	icm20948_wakeup();
 8000d16:	f000 f87d 	bl	8000e14 <icm20948_wakeup>

	icm20948_clock_source(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f000 f8ab 	bl	8000e76 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000d20:	f000 f8c2 	bl	8000ea8 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 8000d24:	f000 f890 	bl	8000e48 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 f8c6 	bl	8000eba <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 f8e0 	bl	8000ef4 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 f8fa 	bl	8000f2e <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f906 	bl	8000f4c <icm20948_accel_sample_rate_divider>

	//icm20948_gyro_calibration();
	//icm20948_accel_calibration();

	icm20948_gyro_full_scale_select(_2000dps);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f921 	bl	8000f88 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_2g);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 f968 	bl	800101c <icm20948_accel_full_scale_select>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <icm20948_accel_read>:
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
}

void icm20948_accel_read(axises* data)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000d58:	2206      	movs	r2, #6
 8000d5a:	212d      	movs	r1, #45	; 0x2d
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f000 fa25 	bl	80011ac <read_multiple_icm20948_reg>
 8000d62:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | (temp[1]));
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	ee07 3a90 	vmov	s15, r3
 8000d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | (temp[3]));
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	3302      	adds	r3, #2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3303      	adds	r3, #3
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b21b      	sxth	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | (temp[5]));
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	3304      	adds	r3, #4
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3305      	adds	r3, #5
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	ee07 3a90 	vmov	s15, r3
 8000dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f994 	bl	800110c <read_single_icm20948_reg>
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2bea      	cmp	r3, #234	; 0xea
 8000dec:	d101      	bne.n	8000df2 <icm20948_who_am_i+0x1c>
		return true;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <icm20948_who_am_i+0x1e>
	else
		return false;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <icm20948_device_reset>:
	else
		return false;
}

void icm20948_device_reset()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000e00:	22c1      	movs	r2, #193	; 0xc1
 8000e02:	2106      	movs	r1, #6
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 f9ad 	bl	8001164 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000e0a:	2064      	movs	r0, #100	; 0x64
 8000e0c:	f002 f8ae 	bl	8002f6c <HAL_Delay>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <icm20948_wakeup>:
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
	HAL_Delay(100);
}

void icm20948_wakeup()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000e1a:	2106      	movs	r1, #6
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 f975 	bl	800110c <read_single_icm20948_reg>
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e2c:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	461a      	mov	r2, r3
 8000e32:	2106      	movs	r1, #6
 8000e34:	2000      	movs	r0, #0
 8000e36:	f000 f995 	bl	8001164 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000e3a:	2064      	movs	r0, #100	; 0x64
 8000e3c:	f002 f896 	bl	8002f6c <HAL_Delay>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000e4e:	2103      	movs	r1, #3
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f95b 	bl	800110c <read_single_icm20948_reg>
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f043 0310 	orr.w	r3, r3, #16
 8000e60:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	461a      	mov	r2, r3
 8000e66:	2103      	movs	r1, #3
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f000 f97b 	bl	8001164 <write_single_icm20948_reg>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <icm20948_clock_source>:

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
}

void icm20948_clock_source(uint8_t source)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000e80:	2106      	movs	r1, #6
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f942 	bl	800110c <read_single_icm20948_reg>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	461a      	mov	r2, r3
 8000e98:	2106      	movs	r1, #6
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f962 	bl	8001164 <write_single_icm20948_reg>
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000eac:	2201      	movs	r2, #1
 8000eae:	2109      	movs	r1, #9
 8000eb0:	2020      	movs	r0, #32
 8000eb2:	f000 f957 	bl	8001164 <write_single_icm20948_reg>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	2020      	movs	r0, #32
 8000ec8:	f000 f920 	bl	800110c <read_single_icm20948_reg>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	b25a      	sxtb	r2, r3
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	2020      	movs	r0, #32
 8000ee8:	f000 f93c 	bl	8001164 <write_single_icm20948_reg>
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8000efe:	2114      	movs	r1, #20
 8000f00:	2020      	movs	r0, #32
 8000f02:	f000 f903 	bl	800110c <read_single_icm20948_reg>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	b25a      	sxtb	r2, r3
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2101      	movs	r1, #1
 8000f20:	2020      	movs	r0, #32
 8000f22:	f000 f91f 	bl	8001164 <write_single_icm20948_reg>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2020      	movs	r0, #32
 8000f40:	f000 f910 	bl	8001164 <write_single_icm20948_reg>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	2020      	movs	r0, #32
 8000f70:	f000 f8f8 	bl	8001164 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	461a      	mov	r2, r3
 8000f78:	2111      	movs	r1, #17
 8000f7a:	2020      	movs	r0, #32
 8000f7c:	f000 f8f2 	bl	8001164 <write_single_icm20948_reg>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <icm20948_gyro_full_scale_select>:
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
}

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8000f92:	2101      	movs	r1, #1
 8000f94:	2020      	movs	r0, #32
 8000f96:	f000 f8b9 	bl	800110c <read_single_icm20948_reg>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d827      	bhi.n	8000ff4 <icm20948_gyro_full_scale_select+0x6c>
 8000fa4:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <icm20948_gyro_full_scale_select+0x24>)
 8000fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	08000fbd 	.word	0x08000fbd
 8000fb0:	08000fc5 	.word	0x08000fc5
 8000fb4:	08000fd5 	.word	0x08000fd5
 8000fb8:	08000fe5 	.word	0x08000fe5
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <icm20948_gyro_full_scale_select+0x80>)
 8000fbe:	4a13      	ldr	r2, [pc, #76]	; (800100c <icm20948_gyro_full_scale_select+0x84>)
 8000fc0:	601a      	str	r2, [r3, #0]
			break;
 8000fc2:	e017      	b.n	8000ff4 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <icm20948_gyro_full_scale_select+0x80>)
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <icm20948_gyro_full_scale_select+0x88>)
 8000fd0:	601a      	str	r2, [r3, #0]
			break;
 8000fd2:	e00f      	b.n	8000ff4 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <icm20948_gyro_full_scale_select+0x80>)
 8000fde:	4a0d      	ldr	r2, [pc, #52]	; (8001014 <icm20948_gyro_full_scale_select+0x8c>)
 8000fe0:	601a      	str	r2, [r3, #0]
			break;
 8000fe2:	e007      	b.n	8000ff4 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 0306 	orr.w	r3, r3, #6
 8000fea:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <icm20948_gyro_full_scale_select+0x80>)
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <icm20948_gyro_full_scale_select+0x90>)
 8000ff0:	601a      	str	r2, [r3, #0]
			break;
 8000ff2:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	2020      	movs	r0, #32
 8000ffc:	f000 f8b2 	bl	8001164 <write_single_icm20948_reg>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000028 	.word	0x20000028
 800100c:	43030000 	.word	0x43030000
 8001010:	42830000 	.word	0x42830000
 8001014:	42033333 	.word	0x42033333
 8001018:	41833333 	.word	0x41833333

0800101c <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001026:	2114      	movs	r1, #20
 8001028:	2020      	movs	r0, #32
 800102a:	f000 f86f 	bl	800110c <read_single_icm20948_reg>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b03      	cmp	r3, #3
 8001036:	d82b      	bhi.n	8001090 <icm20948_accel_full_scale_select+0x74>
 8001038:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <icm20948_accel_full_scale_select+0x24>)
 800103a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103e:	bf00      	nop
 8001040:	08001051 	.word	0x08001051
 8001044:	0800105b 	.word	0x0800105b
 8001048:	0800106d 	.word	0x0800106d
 800104c:	0800107f 	.word	0x0800107f
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <icm20948_accel_full_scale_select+0x88>)
 8001052:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001056:	601a      	str	r2, [r3, #0]
			break;
 8001058:	e01a      	b.n	8001090 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <icm20948_accel_full_scale_select+0x88>)
 8001064:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001068:	601a      	str	r2, [r3, #0]
			break;
 800106a:	e011      	b.n	8001090 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <icm20948_accel_full_scale_select+0x88>)
 8001076:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800107a:	601a      	str	r2, [r3, #0]
			break;
 800107c:	e008      	b.n	8001090 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	f043 0306 	orr.w	r3, r3, #6
 8001084:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <icm20948_accel_full_scale_select+0x88>)
 8001088:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800108c:	601a      	str	r2, [r3, #0]
			break;
 800108e:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	461a      	mov	r2, r3
 8001094:	2114      	movs	r1, #20
 8001096:	2020      	movs	r0, #32
 8001098:	f000 f864 	bl	8001164 <write_single_icm20948_reg>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000002c 	.word	0x2000002c

080010a8 <cs_high>:


/* Static Functions */
static void cs_high()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 80010ac:	2201      	movs	r2, #1
 80010ae:	2104      	movs	r1, #4
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <cs_high+0x14>)
 80010b2:	f003 fa47 	bl	8004544 <HAL_GPIO_WritePin>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <cs_low>:

static void cs_low()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2104      	movs	r1, #4
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <cs_low+0x14>)
 80010ca:	f003 fa3b 	bl	8004544 <HAL_GPIO_WritePin>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000

080010d8 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 80010e2:	237f      	movs	r3, #127	; 0x7f
 80010e4:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	737b      	strb	r3, [r7, #13]

	cs_low();
 80010ea:	f7ff ffe9 	bl	80010c0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80010ee:	f107 010c 	add.w	r1, r7, #12
 80010f2:	230a      	movs	r3, #10
 80010f4:	2202      	movs	r2, #2
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <select_user_bank+0x30>)
 80010f8:	f003 ff55 	bl	8004fa6 <HAL_SPI_Transmit>
	cs_high();
 80010fc:	f7ff ffd4 	bl	80010a8 <cs_high>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000019c 	.word	0x2000019c

0800110c <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	460a      	mov	r2, r1
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	4613      	mov	r3, r2
 800111a:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001122:	b2db      	uxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ffd5 	bl	80010d8 <select_user_bank>

	cs_low();
 800112e:	f7ff ffc7 	bl	80010c0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001132:	f107 010f 	add.w	r1, r7, #15
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	2201      	movs	r2, #1
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <read_single_icm20948_reg+0x54>)
 800113e:	f003 ff32 	bl	8004fa6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001142:	f107 010e 	add.w	r1, r7, #14
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	2201      	movs	r2, #1
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <read_single_icm20948_reg+0x54>)
 800114e:	f004 f866 	bl	800521e <HAL_SPI_Receive>
	cs_high();
 8001152:	f7ff ffa9 	bl	80010a8 <cs_high>

	return reg_val;
 8001156:	7bbb      	ldrb	r3, [r7, #14]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000019c 	.word	0x2000019c

08001164 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	460b      	mov	r3, r1
 8001170:	71bb      	strb	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 800117a:	797b      	ldrb	r3, [r7, #5]
 800117c:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ffa9 	bl	80010d8 <select_user_bank>

	cs_low();
 8001186:	f7ff ff9b 	bl	80010c0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 800118a:	f107 010c 	add.w	r1, r7, #12
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	2202      	movs	r2, #2
 8001194:	4804      	ldr	r0, [pc, #16]	; (80011a8 <write_single_icm20948_reg+0x44>)
 8001196:	f003 ff06 	bl	8004fa6 <HAL_SPI_Transmit>
	cs_high();
 800119a:	f7ff ff85 	bl	80010a8 <cs_high>
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000019c 	.word	0x2000019c

080011ac <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	460b      	mov	r3, r1
 80011b8:	71bb      	strb	r3, [r7, #6]
 80011ba:	4613      	mov	r3, r2
 80011bc:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff84 	bl	80010d8 <select_user_bank>

	cs_low();
 80011d0:	f7ff ff76 	bl	80010c0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80011d4:	f107 010f 	add.w	r1, r7, #15
 80011d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011dc:	2201      	movs	r2, #1
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <read_multiple_icm20948_reg+0x58>)
 80011e0:	f003 fee1 	bl	8004fa6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80011e4:	797b      	ldrb	r3, [r7, #5]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ec:	4906      	ldr	r1, [pc, #24]	; (8001208 <read_multiple_icm20948_reg+0x5c>)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <read_multiple_icm20948_reg+0x58>)
 80011f0:	f004 f815 	bl	800521e <HAL_SPI_Receive>
	cs_high();
 80011f4:	f7ff ff58 	bl	80010a8 <cs_high>

	return reg_val;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <read_multiple_icm20948_reg+0x5c>)
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000019c 	.word	0x2000019c
 8001208:	20000030 	.word	0x20000030

0800120c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <MX_ADC1_Init+0x9c>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800122a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_ADC1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_ADC1_Init+0x98>)
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_ADC1_Init+0xa0>)
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_ADC1_Init+0x98>)
 800125a:	2201      	movs	r2, #1
 800125c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001268:	2201      	movs	r2, #1
 800126a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_ADC1_Init+0x98>)
 800126e:	f001 fea1 	bl	8002fb4 <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001278:	f001 f824 	bl	80022c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800127c:	2308      	movs	r3, #8
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_ADC1_Init+0x98>)
 800128e:	f002 f873 	bl	8003378 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001298:	f001 f814 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000054 	.word	0x20000054
 80012a8:	40012000 	.word	0x40012000
 80012ac:	0f000001 	.word	0x0f000001

080012b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a31      	ldr	r2, [pc, #196]	; (8001394 <HAL_ADC_MspInit+0xe4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d15b      	bne.n	800138a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6453      	str	r3, [r2, #68]	; 0x44
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a28      	ldr	r2, [pc, #160]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a21      	ldr	r2, [pc, #132]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a1a      	ldr	r2, [pc, #104]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_ADC_MspInit+0xe8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_6_Pin|ADC_7_Pin|ADC_8_Pin;
 8001342:	2307      	movs	r3, #7
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4811      	ldr	r0, [pc, #68]	; (800139c <HAL_ADC_MspInit+0xec>)
 8001356:	f002 ff41 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|ADC_2_Pin|ADC_3_Pin;
 800135a:	2307      	movs	r3, #7
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <HAL_ADC_MspInit+0xf0>)
 800136e:	f002 ff35 	bl	80041dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_4_Pin|ADC_5_Pin;
 8001372:	2303      	movs	r3, #3
 8001374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001376:	2303      	movs	r3, #3
 8001378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <HAL_ADC_MspInit+0xf4>)
 8001386:	f002 ff29 	bl	80041dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800138a:	bf00      	nop
 800138c:	3730      	adds	r7, #48	; 0x30
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40012000 	.word	0x40012000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400

080013a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <MX_DMA_Init+0xc8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a2e      	ldr	r2, [pc, #184]	; (8001470 <MX_DMA_Init+0xc8>)
 80013b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <MX_DMA_Init+0xc8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <MX_DMA_Init+0xc8>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a27      	ldr	r2, [pc, #156]	; (8001470 <MX_DMA_Init+0xc8>)
 80013d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <MX_DMA_Init+0xc8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	200c      	movs	r0, #12
 80013ec:	f002 fabd 	bl	800396a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013f0:	200c      	movs	r0, #12
 80013f2:	f002 fad6 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	200e      	movs	r0, #14
 80013fc:	f002 fab5 	bl	800396a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001400:	200e      	movs	r0, #14
 8001402:	f002 face 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	200f      	movs	r0, #15
 800140c:	f002 faad 	bl	800396a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001410:	200f      	movs	r0, #15
 8001412:	f002 fac6 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2010      	movs	r0, #16
 800141c:	f002 faa5 	bl	800396a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001420:	2010      	movs	r0, #16
 8001422:	f002 fabe 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2011      	movs	r0, #17
 800142c:	f002 fa9d 	bl	800396a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001430:	2011      	movs	r0, #17
 8001432:	f002 fab6 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	2039      	movs	r0, #57	; 0x39
 800143c:	f002 fa95 	bl	800396a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001440:	2039      	movs	r0, #57	; 0x39
 8001442:	f002 faae 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	203a      	movs	r0, #58	; 0x3a
 800144c:	f002 fa8d 	bl	800396a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001450:	203a      	movs	r0, #58	; 0x3a
 8001452:	f002 faa6 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2045      	movs	r0, #69	; 0x45
 800145c:	f002 fa85 	bl	800396a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001460:	2045      	movs	r0, #69	; 0x45
 8001462:	f002 fa9e 	bl	80039a2 <HAL_NVIC_EnableIRQ>

}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	; 0x30
 8001478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <MX_GPIO_Init+0x158>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a4e      	ldr	r2, [pc, #312]	; (80015cc <MX_GPIO_Init+0x158>)
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <MX_GPIO_Init+0x158>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	4b48      	ldr	r3, [pc, #288]	; (80015cc <MX_GPIO_Init+0x158>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a47      	ldr	r2, [pc, #284]	; (80015cc <MX_GPIO_Init+0x158>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b45      	ldr	r3, [pc, #276]	; (80015cc <MX_GPIO_Init+0x158>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <MX_GPIO_Init+0x158>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a40      	ldr	r2, [pc, #256]	; (80015cc <MX_GPIO_Init+0x158>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <MX_GPIO_Init+0x158>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <MX_GPIO_Init+0x158>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a39      	ldr	r2, [pc, #228]	; (80015cc <MX_GPIO_Init+0x158>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b37      	ldr	r3, [pc, #220]	; (80015cc <MX_GPIO_Init+0x158>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b33      	ldr	r3, [pc, #204]	; (80015cc <MX_GPIO_Init+0x158>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a32      	ldr	r2, [pc, #200]	; (80015cc <MX_GPIO_Init+0x158>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b30      	ldr	r3, [pc, #192]	; (80015cc <MX_GPIO_Init+0x158>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <MX_GPIO_Init+0x158>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <MX_GPIO_Init+0x158>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b29      	ldr	r3, [pc, #164]	; (80015cc <MX_GPIO_Init+0x158>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ICM20948_CS_Pin|DRIVER_EN_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001538:	4825      	ldr	r0, [pc, #148]	; (80015d0 <MX_GPIO_Init+0x15c>)
 800153a:	f003 f803 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2130      	movs	r1, #48	; 0x30
 8001542:	4824      	ldr	r0, [pc, #144]	; (80015d4 <MX_GPIO_Init+0x160>)
 8001544:	f002 fffe 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800154e:	4822      	ldr	r0, [pc, #136]	; (80015d8 <MX_GPIO_Init+0x164>)
 8001550:	f002 fff8 	bl	8004544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin|DRIVER_EN_Pin;
 8001554:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4818      	ldr	r0, [pc, #96]	; (80015d0 <MX_GPIO_Init+0x15c>)
 800156e:	f002 fe35 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BTN_PARK_UP_Pin|BTN_PARK_DOWN_Pin;
 8001572:	2330      	movs	r3, #48	; 0x30
 8001574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800157a:	2302      	movs	r3, #2
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <MX_GPIO_Init+0x15c>)
 8001586:	f002 fe29 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin;
 800158a:	2330      	movs	r3, #48	; 0x30
 800158c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_GPIO_Init+0x160>)
 80015a2:	f002 fe1b 	bl	80041dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80015a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <MX_GPIO_Init+0x164>)
 80015c0:	f002 fe0c 	bl	80041dc <HAL_GPIO_Init>

}
 80015c4:	bf00      	nop
 80015c6:	3730      	adds	r7, #48	; 0x30
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00

080015dc <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	if (UartHandle->Instance == SYSTEM_HARDWARE_UART_HIGH_INSTANSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a71      	ldr	r2, [pc, #452]	; (80017b0 <HAL_UART_RxCpltCallback+0x1d4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d16b      	bne.n	80016c6 <HAL_UART_RxCpltCallback+0xea>
	{
		if (UartHighReceiveState == 0)
 80015ee:	4b71      	ldr	r3, [pc, #452]	; (80017b4 <HAL_UART_RxCpltCallback+0x1d8>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d11f      	bne.n	8001638 <HAL_UART_RxCpltCallback+0x5c>
		{
			if ((SerialHighLevelRequest.CR != 13) || (SerialHighLevelRequest.LF != 10))
 80015f8:	4b6f      	ldr	r3, [pc, #444]	; (80017b8 <HAL_UART_RxCpltCallback+0x1dc>)
 80015fa:	7b9b      	ldrb	r3, [r3, #14]
 80015fc:	2b0d      	cmp	r3, #13
 80015fe:	d103      	bne.n	8001608 <HAL_UART_RxCpltCallback+0x2c>
 8001600:	4b6d      	ldr	r3, [pc, #436]	; (80017b8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001602:	7bdb      	ldrb	r3, [r3, #15]
 8001604:	2b0a      	cmp	r3, #10
 8001606:	d00c      	beq.n	8001622 <HAL_UART_RxCpltCallback+0x46>
			{
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, LostByte, 1);
 8001608:	4b6c      	ldr	r3, [pc, #432]	; (80017bc <HAL_UART_RxCpltCallback+0x1e0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2201      	movs	r2, #1
 800160e:	4619      	mov	r1, r3
 8001610:	486b      	ldr	r0, [pc, #428]	; (80017c0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001612:	f005 f89d 	bl	8006750 <HAL_UART_Receive_DMA>
 8001616:	4603      	mov	r3, r0
 8001618:	73fb      	strb	r3, [r7, #15]
				UartHighReceiveState = 1;
 800161a:	4b66      	ldr	r3, [pc, #408]	; (80017b4 <HAL_UART_RxCpltCallback+0x1d8>)
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	e042      	b.n	80016a8 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				UartHighReceiveState = 10;
 8001622:	4b64      	ldr	r3, [pc, #400]	; (80017b4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001624:	220a      	movs	r2, #10
 8001626:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 8001628:	2210      	movs	r2, #16
 800162a:	4963      	ldr	r1, [pc, #396]	; (80017b8 <HAL_UART_RxCpltCallback+0x1dc>)
 800162c:	4864      	ldr	r0, [pc, #400]	; (80017c0 <HAL_UART_RxCpltCallback+0x1e4>)
 800162e:	f005 f88f 	bl	8006750 <HAL_UART_Receive_DMA>
 8001632:	4603      	mov	r3, r0
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e037      	b.n	80016a8 <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else
		{
			if(UartHighReceiveState == 1)
 8001638:	4b5e      	ldr	r3, [pc, #376]	; (80017b4 <HAL_UART_RxCpltCallback+0x1d8>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d111      	bne.n	8001666 <HAL_UART_RxCpltCallback+0x8a>
			{
				if (LostByte[0] == 13)
 8001642:	4b5e      	ldr	r3, [pc, #376]	; (80017bc <HAL_UART_RxCpltCallback+0x1e0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b0d      	cmp	r3, #13
 800164a:	d102      	bne.n	8001652 <HAL_UART_RxCpltCallback+0x76>
				{
					UartHighReceiveState = 2;
 800164c:	4b59      	ldr	r3, [pc, #356]	; (80017b4 <HAL_UART_RxCpltCallback+0x1d8>)
 800164e:	2202      	movs	r2, #2
 8001650:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)LostByte, 1);
 8001652:	4b5a      	ldr	r3, [pc, #360]	; (80017bc <HAL_UART_RxCpltCallback+0x1e0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2201      	movs	r2, #1
 8001658:	4619      	mov	r1, r3
 800165a:	4859      	ldr	r0, [pc, #356]	; (80017c0 <HAL_UART_RxCpltCallback+0x1e4>)
 800165c:	f005 f878 	bl	8006750 <HAL_UART_Receive_DMA>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e020      	b.n	80016a8 <HAL_UART_RxCpltCallback+0xcc>
			}
			else
			{
				if (UartHighReceiveState == 2)
 8001666:	4b53      	ldr	r3, [pc, #332]	; (80017b4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d11b      	bne.n	80016a8 <HAL_UART_RxCpltCallback+0xcc>
				{
					if (LostByte[0] == 10)
 8001670:	4b52      	ldr	r3, [pc, #328]	; (80017bc <HAL_UART_RxCpltCallback+0x1e0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b0a      	cmp	r3, #10
 8001678:	d10a      	bne.n	8001690 <HAL_UART_RxCpltCallback+0xb4>
					{
						UartHighReceiveState = 0;
 800167a:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <HAL_UART_RxCpltCallback+0x1d8>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 8001680:	2210      	movs	r2, #16
 8001682:	494d      	ldr	r1, [pc, #308]	; (80017b8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001684:	484e      	ldr	r0, [pc, #312]	; (80017c0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001686:	f005 f863 	bl	8006750 <HAL_UART_Receive_DMA>
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	e00b      	b.n	80016a8 <HAL_UART_RxCpltCallback+0xcc>
					}
					else
					{
						UartHighReceiveState = 1;
 8001690:	4b48      	ldr	r3, [pc, #288]	; (80017b4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)LostByte, 1);
 8001696:	4b49      	ldr	r3, [pc, #292]	; (80017bc <HAL_UART_RxCpltCallback+0x1e0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2201      	movs	r2, #1
 800169c:	4619      	mov	r1, r3
 800169e:	4848      	ldr	r0, [pc, #288]	; (80017c0 <HAL_UART_RxCpltCallback+0x1e4>)
 80016a0:	f005 f856 	bl	8006750 <HAL_UART_Receive_DMA>
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}
		if (Res != HAL_OK)
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <HAL_UART_RxCpltCallback+0xea>
		{
			MX_USART3_UART_Init();
 80016ae:	f001 fa19 	bl	8002ae4 <MX_USART3_UART_Init>
			UartHighReceiveState = 0;
 80016b2:	4b40      	ldr	r3, [pc, #256]	; (80017b4 <HAL_UART_RxCpltCallback+0x1d8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 80016b8:	2210      	movs	r2, #16
 80016ba:	493f      	ldr	r1, [pc, #252]	; (80017b8 <HAL_UART_RxCpltCallback+0x1dc>)
 80016bc:	4840      	ldr	r0, [pc, #256]	; (80017c0 <HAL_UART_RxCpltCallback+0x1e4>)
 80016be:	f005 f847 	bl	8006750 <HAL_UART_Receive_DMA>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == SYSTEM_HARDWARE_UART_LOW_INSTANSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a3e      	ldr	r2, [pc, #248]	; (80017c4 <HAL_UART_RxCpltCallback+0x1e8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d16b      	bne.n	80017a8 <HAL_UART_RxCpltCallback+0x1cc>
	{
		if (UartLowReceiveState == 0)
 80016d0:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <HAL_UART_RxCpltCallback+0x1ec>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11f      	bne.n	800171a <HAL_UART_RxCpltCallback+0x13e>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <HAL_UART_RxCpltCallback+0x1f0>)
 80016dc:	7b9b      	ldrb	r3, [r3, #14]
 80016de:	2b0d      	cmp	r3, #13
 80016e0:	d103      	bne.n	80016ea <HAL_UART_RxCpltCallback+0x10e>
 80016e2:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <HAL_UART_RxCpltCallback+0x1f0>)
 80016e4:	7bdb      	ldrb	r3, [r3, #15]
 80016e6:	2b0a      	cmp	r3, #10
 80016e8:	d00c      	beq.n	8001704 <HAL_UART_RxCpltCallback+0x128>
			{
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, LostByte, 1);
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_UART_RxCpltCallback+0x1e0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2201      	movs	r2, #1
 80016f0:	4619      	mov	r1, r3
 80016f2:	4837      	ldr	r0, [pc, #220]	; (80017d0 <HAL_UART_RxCpltCallback+0x1f4>)
 80016f4:	f005 f82c 	bl	8006750 <HAL_UART_Receive_DMA>
 80016f8:	4603      	mov	r3, r0
 80016fa:	73fb      	strb	r3, [r7, #15]
				UartLowReceiveState = 1;
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <HAL_UART_RxCpltCallback+0x1ec>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e042      	b.n	800178a <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				UartLowReceiveState = 10;
 8001704:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001706:	220a      	movs	r2, #10
 8001708:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 800170a:	2210      	movs	r2, #16
 800170c:	492f      	ldr	r1, [pc, #188]	; (80017cc <HAL_UART_RxCpltCallback+0x1f0>)
 800170e:	4830      	ldr	r0, [pc, #192]	; (80017d0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001710:	f005 f81e 	bl	8006750 <HAL_UART_Receive_DMA>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e037      	b.n	800178a <HAL_UART_RxCpltCallback+0x1ae>
			}
		}
		else
		{
			if(UartLowReceiveState == 1)
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_UART_RxCpltCallback+0x1ec>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d111      	bne.n	8001748 <HAL_UART_RxCpltCallback+0x16c>
			{
				if (LostByte[0] == 13)
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_UART_RxCpltCallback+0x1e0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b0d      	cmp	r3, #13
 800172c:	d102      	bne.n	8001734 <HAL_UART_RxCpltCallback+0x158>
				{
					UartLowReceiveState = 2;
 800172e:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001730:	2202      	movs	r2, #2
 8001732:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)LostByte, 1);
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <HAL_UART_RxCpltCallback+0x1e0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	4619      	mov	r1, r3
 800173c:	4824      	ldr	r0, [pc, #144]	; (80017d0 <HAL_UART_RxCpltCallback+0x1f4>)
 800173e:	f005 f807 	bl	8006750 <HAL_UART_Receive_DMA>
 8001742:	4603      	mov	r3, r0
 8001744:	73fb      	strb	r3, [r7, #15]
 8001746:	e020      	b.n	800178a <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				if (UartLowReceiveState == 2)
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_UART_RxCpltCallback+0x1ec>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d11b      	bne.n	800178a <HAL_UART_RxCpltCallback+0x1ae>
				{
					if (LostByte[0] == 10)
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_UART_RxCpltCallback+0x1e0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b0a      	cmp	r3, #10
 800175a:	d10a      	bne.n	8001772 <HAL_UART_RxCpltCallback+0x196>
					{
						UartLowReceiveState = 0;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_UART_RxCpltCallback+0x1ec>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8001762:	2210      	movs	r2, #16
 8001764:	4919      	ldr	r1, [pc, #100]	; (80017cc <HAL_UART_RxCpltCallback+0x1f0>)
 8001766:	481a      	ldr	r0, [pc, #104]	; (80017d0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001768:	f004 fff2 	bl	8006750 <HAL_UART_Receive_DMA>
 800176c:	4603      	mov	r3, r0
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	e00b      	b.n	800178a <HAL_UART_RxCpltCallback+0x1ae>
					}
					else
					{
						UartLowReceiveState = 1;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)LostByte, 1);
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_UART_RxCpltCallback+0x1e0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4619      	mov	r1, r3
 8001780:	4813      	ldr	r0, [pc, #76]	; (80017d0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001782:	f004 ffe5 	bl	8006750 <HAL_UART_Receive_DMA>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00b      	beq.n	80017a8 <HAL_UART_RxCpltCallback+0x1cc>
		{
			MX_USART2_UART_Init();
 8001790:	f001 f97e 	bl	8002a90 <MX_USART2_UART_Init>
			UartLowReceiveState = 0;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 800179a:	2210      	movs	r2, #16
 800179c:	490b      	ldr	r1, [pc, #44]	; (80017cc <HAL_UART_RxCpltCallback+0x1f0>)
 800179e:	480c      	ldr	r0, [pc, #48]	; (80017d0 <HAL_UART_RxCpltCallback+0x1f4>)
 80017a0:	f004 ffd6 	bl	8006750 <HAL_UART_Receive_DMA>
 80017a4:	4603      	mov	r3, r0
 80017a6:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40004800 	.word	0x40004800
 80017b4:	20000041 	.word	0x20000041
 80017b8:	20000144 	.word	0x20000144
 80017bc:	20000198 	.word	0x20000198
 80017c0:	200004c4 	.word	0x200004c4
 80017c4:	40004400 	.word	0x40004400
 80017c8:	20000040 	.word	0x20000040
 80017cc:	200000c4 	.word	0x200000c4
 80017d0:	200005c8 	.word	0x200005c8
 80017d4:	00000000 	.word	0x00000000

080017d8 <UartLowPrepareRaw>:
void UartLowPrepareRaw(uint16_t Difference, int32_t* InputHall, uint8_t Count)
{
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	if(InitionHall == 0)
 80017e8:	4b7b      	ldr	r3, [pc, #492]	; (80019d8 <UartLowPrepareRaw+0x200>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d115      	bne.n	800181c <UartLowPrepareRaw+0x44>
	{
		for(int i = 0; i < Count; i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e00b      	b.n	800180e <UartLowPrepareRaw+0x36>
		{
			WheelsHall[i].LastHall = InputHall[i];
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4976      	ldr	r1, [pc, #472]	; (80019dc <UartLowPrepareRaw+0x204>)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		for(int i = 0; i < Count; i++)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	797b      	ldrb	r3, [r7, #5]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	429a      	cmp	r2, r3
 8001814:	dbef      	blt.n	80017f6 <UartLowPrepareRaw+0x1e>
		}
		InitionHall = 1;
 8001816:	4b70      	ldr	r3, [pc, #448]	; (80019d8 <UartLowPrepareRaw+0x200>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
	}
	for (int i = 0; i < Count; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	e03e      	b.n	80018a0 <UartLowPrepareRaw+0xc8>
	{
		if (HallActualize(InputHall[i], WheelsHall[i].LastHall, Difference))
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	4413      	add	r3, r2
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	4a6b      	ldr	r2, [pc, #428]	; (80019dc <UartLowPrepareRaw+0x204>)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001834:	88fa      	ldrh	r2, [r7, #6]
 8001836:	4619      	mov	r1, r3
 8001838:	f000 f8da 	bl	80019f0 <HallActualize>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d012      	beq.n	8001868 <UartLowPrepareRaw+0x90>
		{
			WheelsHall[i].OutputHall = InputHall[i];
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	4413      	add	r3, r2
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4963      	ldr	r1, [pc, #396]	; (80019dc <UartLowPrepareRaw+0x204>)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	605a      	str	r2, [r3, #4]
			WheelsHall[i].LastHall = InputHall[i];
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	4413      	add	r3, r2
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	495e      	ldr	r1, [pc, #376]	; (80019dc <UartLowPrepareRaw+0x204>)
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		}
		if (!HallActualize(InputHall[i], WheelsHall[i].LastHall, Difference))
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	4a5a      	ldr	r2, [pc, #360]	; (80019dc <UartLowPrepareRaw+0x204>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800187a:	88fa      	ldrh	r2, [r7, #6]
 800187c:	4619      	mov	r1, r3
 800187e:	f000 f8b7 	bl	80019f0 <HallActualize>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d108      	bne.n	800189a <UartLowPrepareRaw+0xc2>
		{
			WheelsHall[i].LastHall = InputHall[i];
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4413      	add	r3, r2
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4952      	ldr	r1, [pc, #328]	; (80019dc <UartLowPrepareRaw+0x204>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < Count; i++)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3301      	adds	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	797b      	ldrb	r3, [r7, #5]
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbbc      	blt.n	8001822 <UartLowPrepareRaw+0x4a>
		}
	}

	switch (SerialControlWheelsResponce.ParameterNumber)
 80018a8:	4b4d      	ldr	r3, [pc, #308]	; (80019e0 <UartLowPrepareRaw+0x208>)
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	2b07      	cmp	r3, #7
 80018ae:	f200 8088 	bhi.w	80019c2 <UartLowPrepareRaw+0x1ea>
 80018b2:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <UartLowPrepareRaw+0xe0>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	080018d9 	.word	0x080018d9
 80018bc:	0800196f 	.word	0x0800196f
 80018c0:	0800197b 	.word	0x0800197b
 80018c4:	08001987 	.word	0x08001987
 80018c8:	08001993 	.word	0x08001993
 80018cc:	0800199f 	.word	0x0800199f
 80018d0:	080019ab 	.word	0x080019ab
 80018d4:	080019b7 	.word	0x080019b7
	{
		case 0:
			LowDiagnostic.Voltage = SerialControlWheelsResponce.ParameterValue;
 80018d8:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <UartLowPrepareRaw+0x208>)
 80018da:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80018de:	4a41      	ldr	r2, [pc, #260]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 80018e0:	6013      	str	r3, [r2, #0]
			LowDiagnostic.Battery += ((Interpolation(LowDiagnostic.Voltage, 28, 41) * 100.0) - LowDiagnostic.Battery) * 0.01;
 80018e2:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 80019e8 <UartLowPrepareRaw+0x210>
 80018ec:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 80018f0:	eeb0 0a67 	vmov.f32	s0, s15
 80018f4:	f000 f8b0 	bl	8001a58 <Interpolation>
 80018f8:	ee10 3a10 	vmov	r3, s0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fdc7 	bl	8000490 <__aeabi_f2d>
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b39      	ldr	r3, [pc, #228]	; (80019ec <UartLowPrepareRaw+0x214>)
 8001908:	f7fe fe1a 	bl	8000540 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4614      	mov	r4, r2
 8001912:	461d      	mov	r5, r3
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fdb9 	bl	8000490 <__aeabi_f2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4620      	mov	r0, r4
 8001924:	4629      	mov	r1, r5
 8001926:	f7fe fc53 	bl	80001d0 <__aeabi_dsub>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	a327      	add	r3, pc, #156	; (adr r3, 80019d0 <UartLowPrepareRaw+0x1f8>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fe02 	bl	8000540 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4614      	mov	r4, r2
 8001942:	461d      	mov	r5, r3
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fda1 	bl	8000490 <__aeabi_f2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4620      	mov	r0, r4
 8001954:	4629      	mov	r1, r5
 8001956:	f7fe fc3d 	bl	80001d4 <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f7fe ffff 	bl	8000964 <__aeabi_d2f>
 8001966:	4603      	mov	r3, r0
 8001968:	4a1e      	ldr	r2, [pc, #120]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 800196a:	6053      	str	r3, [r2, #4]
		  	break;
 800196c:	e029      	b.n	80019c2 <UartLowPrepareRaw+0x1ea>
		case 1:
			LowDiagnostic.CurrentLeft = SerialControlWheelsResponce.ParameterValue;
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <UartLowPrepareRaw+0x208>)
 8001970:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001974:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 8001976:	6093      	str	r3, [r2, #8]
			break;
 8001978:	e023      	b.n	80019c2 <UartLowPrepareRaw+0x1ea>
		case 2:
			LowDiagnostic.CurrentRight = SerialControlWheelsResponce.ParameterValue;
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <UartLowPrepareRaw+0x208>)
 800197c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001980:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 8001982:	60d3      	str	r3, [r2, #12]
			break;
 8001984:	e01d      	b.n	80019c2 <UartLowPrepareRaw+0x1ea>
		case 3:
			LowDiagnostic.RPSLeft = SerialControlWheelsResponce.ParameterValue;
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <UartLowPrepareRaw+0x208>)
 8001988:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800198c:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 800198e:	6113      	str	r3, [r2, #16]
			break;
 8001990:	e017      	b.n	80019c2 <UartLowPrepareRaw+0x1ea>
		case 4:
			LowDiagnostic.RPSRight = SerialControlWheelsResponce.ParameterValue;
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <UartLowPrepareRaw+0x208>)
 8001994:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001998:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 800199a:	6153      	str	r3, [r2, #20]
			break;
 800199c:	e011      	b.n	80019c2 <UartLowPrepareRaw+0x1ea>
		case 5:
			LowDiagnostic.OverCurrCount = SerialControlWheelsResponce.ParameterValue;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <UartLowPrepareRaw+0x208>)
 80019a0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80019a4:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 80019a6:	6193      	str	r3, [r2, #24]
			break;
 80019a8:	e00b      	b.n	80019c2 <UartLowPrepareRaw+0x1ea>
		case 6:
			LowDiagnostic.ConnErrCount = SerialControlWheelsResponce.ParameterValue;
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <UartLowPrepareRaw+0x208>)
 80019ac:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80019b0:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 80019b2:	61d3      	str	r3, [r2, #28]
			break;
 80019b4:	e005      	b.n	80019c2 <UartLowPrepareRaw+0x1ea>
		case 7:
			LowDiagnostic.CommTime = SerialControlWheelsResponce.ParameterValue;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <UartLowPrepareRaw+0x208>)
 80019b8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80019bc:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <UartLowPrepareRaw+0x20c>)
 80019be:	6213      	str	r3, [r2, #32]
		  	break;
 80019c0:	bf00      	nop
	}
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	f3af 8000 	nop.w
 80019d0:	47ae147b 	.word	0x47ae147b
 80019d4:	3f847ae1 	.word	0x3f847ae1
 80019d8:	20000042 	.word	0x20000042
 80019dc:	20000188 	.word	0x20000188
 80019e0:	200000c4 	.word	0x200000c4
 80019e4:	200000ec 	.word	0x200000ec
 80019e8:	42240000 	.word	0x42240000
 80019ec:	40590000 	.word	0x40590000

080019f0 <HallActualize>:
int HallActualize(int32_t NewStep, int32_t LastStep, int32_t Difference)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
	int32_t CalcDiff = abs(LastStep - NewStep);
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bfb8      	it	lt
 8001a06:	425b      	neglt	r3, r3
 8001a08:	617b      	str	r3, [r7, #20]
	if (CalcDiff <= Difference)
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	dc01      	bgt.n	8001a16 <HallActualize+0x26>
	{
		return 1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HallActualize+0x28>
	}
	return 0;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <GPIOUpdate>:
void GPIOUpdate()
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	FootButtonUp = HAL_GPIO_ReadPin(SYSTEM_HARDWARE_PARKING_LEG_UP_PORT, SYSTEM_HARDWARE_PARKING_LEG_UP_PIN);
 8001a28:	2120      	movs	r1, #32
 8001a2a:	4808      	ldr	r0, [pc, #32]	; (8001a4c <GPIOUpdate+0x28>)
 8001a2c:	f002 fd72 	bl	8004514 <HAL_GPIO_ReadPin>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <GPIOUpdate+0x2c>)
 8001a36:	701a      	strb	r2, [r3, #0]
	FootButtonDown = HAL_GPIO_ReadPin(SYSTEM_HARDWARE_PARKING_LEG_DOWN_PORT, SYSTEM_HARDWARE_PARKING_LEG_DOWN_PIN);
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4804      	ldr	r0, [pc, #16]	; (8001a4c <GPIOUpdate+0x28>)
 8001a3c:	f002 fd6a 	bl	8004514 <HAL_GPIO_ReadPin>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <GPIOUpdate+0x30>)
 8001a46:	701a      	strb	r2, [r3, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	20000043 	.word	0x20000043
 8001a54:	20000044 	.word	0x20000044

08001a58 <Interpolation>:
float Interpolation(float Value, float Min, float Max)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a62:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a66:	ed87 1a01 	vstr	s2, [r7, #4]
    float Result = (Value - Min) / (Max - Min);
 8001a6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a72:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a76:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a86:	edc7 7a05 	vstr	s15, [r7, #20]
    if (Result > 1)
 8001a8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	dd02      	ble.n	8001aa2 <Interpolation+0x4a>
    {
        return 1;
 8001a9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001aa0:	e00a      	b.n	8001ab8 <Interpolation+0x60>
    }
    if (Result < 0)
 8001aa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	d502      	bpl.n	8001ab6 <Interpolation+0x5e>
    {
        return 0;
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <Interpolation+0x60>
    }
    return Result;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	ee07 3a90 	vmov	s15, r3
}
 8001abc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <ADCInit>:
void ADCInit()
{
 8001acc:	b480      	push	{r7}
 8001ace:	b08b      	sub	sp, #44	; 0x2c
 8001ad0:	af00      	add	r7, sp, #0
	uint16_t Raw[SYSTEM_HARDWARE_ADC_Channel_Count];
	uint16_t Sensors[SYSTEM_HARDWARE_ADC_Channel_Count - 3];
	float Amperage[SYSTEM_HARDWARE_ADC_Channel_Count - 5];
	AdcModule.Raw = Raw;
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <ADCInit+0x28>)
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	6013      	str	r3, [r2, #0]
	AdcModule.Sensors = Sensors;
 8001ada:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <ADCInit+0x28>)
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	6053      	str	r3, [r2, #4]
	AdcModule.Amperage = Amperage;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <ADCInit+0x28>)
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	6093      	str	r3, [r2, #8]
}
 8001ae8:	bf00      	nop
 8001aea:	372c      	adds	r7, #44	; 0x2c
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	20000118 	.word	0x20000118

08001af8 <ADCUpdate>:
void ADCUpdate()
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	e00e      	b.n	8001b22 <ADCUpdate+0x2a>
	{
		AdcModule.Raw[i] = ReadAdcChanel(i);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	b2d9      	uxtb	r1, r3
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <ADCUpdate+0x88>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	18d4      	adds	r4, r2, r3
 8001b12:	4608      	mov	r0, r1
 8001b14:	f000 f8ea 	bl	8001cec <ReadAdcChanel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b07      	cmp	r3, #7
 8001b26:	dded      	ble.n	8001b04 <ADCUpdate+0xc>
	}
#ifndef DEBUG_NO_ADC_ALL
#ifndef DEBUG_NO_ADC_RAW
	DebugADCRawFL = AdcModule.Raw[0];
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <ADCUpdate+0x88>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	881a      	ldrh	r2, [r3, #0]
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <ADCUpdate+0x8c>)
 8001b30:	801a      	strh	r2, [r3, #0]
	DebugADCRawFR = AdcModule.Raw[1];
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <ADCUpdate+0x88>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	885a      	ldrh	r2, [r3, #2]
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <ADCUpdate+0x90>)
 8001b3a:	801a      	strh	r2, [r3, #0]
	DebugADCRawBL = AdcModule.Raw[2];
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <ADCUpdate+0x88>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	889a      	ldrh	r2, [r3, #4]
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <ADCUpdate+0x94>)
 8001b44:	801a      	strh	r2, [r3, #0]
	DebugADCRawBR = AdcModule.Raw[3];
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <ADCUpdate+0x88>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	88da      	ldrh	r2, [r3, #6]
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <ADCUpdate+0x98>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	DebugADCRawCN = AdcModule.Raw[4];
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <ADCUpdate+0x88>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	891a      	ldrh	r2, [r3, #8]
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <ADCUpdate+0x9c>)
 8001b58:	801a      	strh	r2, [r3, #0]
	DebugADCRaw36 = AdcModule.Raw[5];
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <ADCUpdate+0x88>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	895a      	ldrh	r2, [r3, #10]
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <ADCUpdate+0xa0>)
 8001b62:	801a      	strh	r2, [r3, #0]
	DebugADCRaw12 = AdcModule.Raw[6];
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <ADCUpdate+0x88>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	899a      	ldrh	r2, [r3, #12]
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <ADCUpdate+0xa4>)
 8001b6c:	801a      	strh	r2, [r3, #0]
	DebugADCRaw5 = AdcModule.Raw[7];
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <ADCUpdate+0x88>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	89da      	ldrh	r2, [r3, #14]
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <ADCUpdate+0xa8>)
 8001b76:	801a      	strh	r2, [r3, #0]
#endif
#endif
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	20000118 	.word	0x20000118
 8001b84:	2000009c 	.word	0x2000009c
 8001b88:	2000009e 	.word	0x2000009e
 8001b8c:	200000bc 	.word	0x200000bc
 8001b90:	200000ac 	.word	0x200000ac
 8001b94:	200000be 	.word	0x200000be
 8001b98:	20000184 	.word	0x20000184
 8001b9c:	200000d4 	.word	0x200000d4
 8001ba0:	20000160 	.word	0x20000160
 8001ba4:	00000000 	.word	0x00000000

08001ba8 <ADCPrepare>:
void ADCPrepare()
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count - 3; i++) // Sensor
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	e00e      	b.n	8001bd2 <ADCPrepare+0x2a>
	{
		AdcModule.Sensors[i] = AdcModule.Raw[i] * 1; // No conversion
 8001bb4:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <ADCPrepare+0x140>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	441a      	add	r2, r3
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <ADCPrepare+0x140>)
 8001bc0:	6859      	ldr	r1, [r3, #4]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	440b      	add	r3, r1
 8001bc8:	8812      	ldrh	r2, [r2, #0]
 8001bca:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < SYSTEM_HARDWARE_ADC_Channel_Count - 3; i++) // Sensor
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	dded      	ble.n	8001bb4 <ADCPrepare+0xc>
	}
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 3; i < SYSTEM_HARDWARE_ADC_Channel_Count - 2; i++) // Current 30A
 8001bd8:	2305      	movs	r3, #5
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	e032      	b.n	8001c44 <ADCPrepare+0x9c>
	{
		AdcModule.Amperage[i - (SYSTEM_HARDWARE_ADC_Channel_Count - 3)] = (AdcModule.Raw[i] * 3.3 / 4095) * 0.066;
 8001bde:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <ADCPrepare+0x140>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fc3e 	bl	800046c <__aeabi_i2d>
 8001bf0:	a335      	add	r3, pc, #212	; (adr r3, 8001cc8 <ADCPrepare+0x120>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fca3 	bl	8000540 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	a333      	add	r3, pc, #204	; (adr r3, 8001cd0 <ADCPrepare+0x128>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe fdc4 	bl	8000794 <__aeabi_ddiv>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	a330      	add	r3, pc, #192	; (adr r3, 8001cd8 <ADCPrepare+0x130>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fc91 	bl	8000540 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <ADCPrepare+0x140>)
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c30:	3b05      	subs	r3, #5
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	18d4      	adds	r4, r2, r3
 8001c36:	f7fe fe95 	bl	8000964 <__aeabi_d2f>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6023      	str	r3, [r4, #0]
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 3; i < SYSTEM_HARDWARE_ADC_Channel_Count - 2; i++) // Current 30A
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3301      	adds	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	ddc9      	ble.n	8001bde <ADCPrepare+0x36>
	}
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 2; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++) // Current 20A
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	e032      	b.n	8001cb6 <ADCPrepare+0x10e>
	{
		AdcModule.Amperage[i - (SYSTEM_HARDWARE_ADC_Channel_Count - 2)] = (AdcModule.Raw[i] * 3.3 / 4095) * 0.1;
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <ADCPrepare+0x140>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc05 	bl	800046c <__aeabi_i2d>
 8001c62:	a319      	add	r3, pc, #100	; (adr r3, 8001cc8 <ADCPrepare+0x120>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe fc6a 	bl	8000540 <__aeabi_dmul>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	a316      	add	r3, pc, #88	; (adr r3, 8001cd0 <ADCPrepare+0x128>)
 8001c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7a:	f7fe fd8b 	bl	8000794 <__aeabi_ddiv>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	a316      	add	r3, pc, #88	; (adr r3, 8001ce0 <ADCPrepare+0x138>)
 8001c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8c:	f7fe fc58 	bl	8000540 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <ADCPrepare+0x140>)
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ca2:	3b06      	subs	r3, #6
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	18d4      	adds	r4, r2, r3
 8001ca8:	f7fe fe5c 	bl	8000964 <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	6023      	str	r3, [r4, #0]
	for (int i = SYSTEM_HARDWARE_ADC_Channel_Count - 2; i < SYSTEM_HARDWARE_ADC_Channel_Count; i++) // Current 20A
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b07      	cmp	r3, #7
 8001cba:	ddc9      	ble.n	8001c50 <ADCPrepare+0xa8>
	}
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd90      	pop	{r4, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	66666666 	.word	0x66666666
 8001ccc:	400a6666 	.word	0x400a6666
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	40affe00 	.word	0x40affe00
 8001cd8:	4189374c 	.word	0x4189374c
 8001cdc:	3fb0e560 	.word	0x3fb0e560
 8001ce0:	9999999a 	.word	0x9999999a
 8001ce4:	3fb99999 	.word	0x3fb99999
 8001ce8:	20000118 	.word	0x20000118

08001cec <ReadAdcChanel>:
uint16_t ReadAdcChanel(uint8_t Channel)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]

	uint16_t RetVal;

	switch(Channel)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b07      	cmp	r3, #7
 8001d08:	d82a      	bhi.n	8001d60 <ReadAdcChanel+0x74>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <ReadAdcChanel+0x24>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d31 	.word	0x08001d31
 8001d14:	08001d37 	.word	0x08001d37
 8001d18:	08001d3d 	.word	0x08001d3d
 8001d1c:	08001d43 	.word	0x08001d43
 8001d20:	08001d49 	.word	0x08001d49
 8001d24:	08001d4f 	.word	0x08001d4f
 8001d28:	08001d55 	.word	0x08001d55
 8001d2c:	08001d5b 	.word	0x08001d5b
	{
	case 0:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_FL;
 8001d30:	230b      	movs	r3, #11
 8001d32:	60fb      	str	r3, [r7, #12]
		break;
 8001d34:	e014      	b.n	8001d60 <ReadAdcChanel+0x74>
	case 1:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_FR;
 8001d36:	230c      	movs	r3, #12
 8001d38:	60fb      	str	r3, [r7, #12]
		break;
 8001d3a:	e011      	b.n	8001d60 <ReadAdcChanel+0x74>
	case 2:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_BL;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
		break;
 8001d40:	e00e      	b.n	8001d60 <ReadAdcChanel+0x74>
	case 3:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_BR;
 8001d42:	230a      	movs	r3, #10
 8001d44:	60fb      	str	r3, [r7, #12]
		break;
 8001d46:	e00b      	b.n	8001d60 <ReadAdcChanel+0x74>
	case 4:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_IK_CN;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	60fb      	str	r3, [r7, #12]
		break;
 8001d4c:	e008      	b.n	8001d60 <ReadAdcChanel+0x74>
	case 5:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_36;
 8001d4e:	2309      	movs	r3, #9
 8001d50:	60fb      	str	r3, [r7, #12]
		break;
 8001d52:	e005      	b.n	8001d60 <ReadAdcChanel+0x74>
	case 6:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_12;
 8001d54:	2308      	movs	r3, #8
 8001d56:	60fb      	str	r3, [r7, #12]
		break;
 8001d58:	e002      	b.n	8001d60 <ReadAdcChanel+0x74>
	case 7:
		sConfig.Channel = SYSTEM_HARDWARE_ADC_AMP_5;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
		break;
 8001d5e:	bf00      	nop
	}

	sConfig.Rank = 1;
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(SYSTEM_HARDWARE_ADC, &sConfig) != HAL_OK)
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480e      	ldr	r0, [pc, #56]	; (8001da8 <ReadAdcChanel+0xbc>)
 8001d70:	f001 fb02 	bl	8003378 <HAL_ADC_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <ReadAdcChanel+0x92>
	{
		Error_Handler();
 8001d7a:	f000 faa3 	bl	80022c4 <Error_Handler>
	}
	HAL_ADC_Start(SYSTEM_HARDWARE_ADC);
 8001d7e:	480a      	ldr	r0, [pc, #40]	; (8001da8 <ReadAdcChanel+0xbc>)
 8001d80:	f001 f95c 	bl	800303c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(SYSTEM_HARDWARE_ADC, 1000);
 8001d84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <ReadAdcChanel+0xbc>)
 8001d8a:	f001 fa5c 	bl	8003246 <HAL_ADC_PollForConversion>
	RetVal = HAL_ADC_GetValue(SYSTEM_HARDWARE_ADC);
 8001d8e:	4806      	ldr	r0, [pc, #24]	; (8001da8 <ReadAdcChanel+0xbc>)
 8001d90:	f001 fae4 	bl	800335c <HAL_ADC_GetValue>
 8001d94:	4603      	mov	r3, r0
 8001d96:	83fb      	strh	r3, [r7, #30]
	HAL_ADC_Stop(SYSTEM_HARDWARE_ADC);
 8001d98:	4803      	ldr	r0, [pc, #12]	; (8001da8 <ReadAdcChanel+0xbc>)
 8001d9a:	f001 fa21 	bl	80031e0 <HAL_ADC_Stop>
	return RetVal;
 8001d9e:	8bfb      	ldrh	r3, [r7, #30]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000054 	.word	0x20000054

08001dac <SerialLowControlLoop>:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
		HAL_Delay(period);
	}
}
void SerialLowControlLoop()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	SerialControlWheelsRequest.ControlMode = 0;
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <SerialLowControlLoop+0x40>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
	SerialControlWheelsRequest.ParameterNumber = 0;
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <SerialLowControlLoop+0x40>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	705a      	strb	r2, [r3, #1]
	SerialControlWheelsRequest.WheelLeft = 0;
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <SerialLowControlLoop+0x40>)
 8001dbe:	3306      	adds	r3, #6
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight = 0;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <SerialLowControlLoop+0x40>)
 8001dc8:	330a      	adds	r3, #10
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.CR=13;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <SerialLowControlLoop+0x40>)
 8001dd2:	220d      	movs	r2, #13
 8001dd4:	739a      	strb	r2, [r3, #14]
	SerialControlWheelsRequest.LF=10;
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SerialLowControlLoop+0x40>)
 8001dd8:	220a      	movs	r2, #10
 8001dda:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsRequest.Buffer, WHEELS_REQUEST_SIZE);
 8001ddc:	2210      	movs	r2, #16
 8001dde:	4903      	ldr	r1, [pc, #12]	; (8001dec <SerialLowControlLoop+0x40>)
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <SerialLowControlLoop+0x44>)
 8001de2:	f004 fc37 	bl	8006654 <HAL_UART_Transmit_DMA>
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200000dc 	.word	0x200000dc
 8001df0:	200005c8 	.word	0x200005c8
 8001df4:	00000000 	.word	0x00000000

08001df8 <ImuAccelUpdate>:
void ImuAccelUpdate()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	ed2d 8b02 	vpush	{d8}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
	axises NewData;
	icm20948_accel_read(&NewData);
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe ffa3 	bl	8000d50 <icm20948_accel_read>

	ResAccel.x += roundf((((NewData.x / 16384) - ResAccel.x) * SYSTEM_IMU_ACCEL_RAW_FILTER) * 100) / 100;
 8001e0a:	4b5d      	ldr	r3, [pc, #372]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001e0c:	ed93 8a00 	vldr	s16, [r3]
 8001e10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e14:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8001f84 <ImuAccelUpdate+0x18c>
 8001e18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e1c:	4b58      	ldr	r3, [pc, #352]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e26:	ee17 0a90 	vmov	r0, s15
 8001e2a:	f7fe fb31 	bl	8000490 <__aeabi_f2d>
 8001e2e:	a352      	add	r3, pc, #328	; (adr r3, 8001f78 <ImuAccelUpdate+0x180>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fb84 	bl	8000540 <__aeabi_dmul>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <ImuAccelUpdate+0x190>)
 8001e46:	f7fe fb7b 	bl	8000540 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7fe fd87 	bl	8000964 <__aeabi_d2f>
 8001e56:	4603      	mov	r3, r0
 8001e58:	ee00 3a10 	vmov	s0, r3
 8001e5c:	f005 fce2 	bl	8007824 <roundf>
 8001e60:	eeb0 7a40 	vmov.f32	s14, s0
 8001e64:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001f8c <ImuAccelUpdate+0x194>
 8001e68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001e70:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001e72:	edc3 7a00 	vstr	s15, [r3]
	ResAccel.y += roundf((((NewData.y / 16384) - ResAccel.y) * SYSTEM_IMU_ACCEL_RAW_FILTER) * 100) / 100;
 8001e76:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001e78:	ed93 8a01 	vldr	s16, [r3, #4]
 8001e7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e80:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001f84 <ImuAccelUpdate+0x18c>
 8001e84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e88:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001e8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e92:	ee17 0a90 	vmov	r0, s15
 8001e96:	f7fe fafb 	bl	8000490 <__aeabi_f2d>
 8001e9a:	a337      	add	r3, pc, #220	; (adr r3, 8001f78 <ImuAccelUpdate+0x180>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fb4e 	bl	8000540 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <ImuAccelUpdate+0x190>)
 8001eb2:	f7fe fb45 	bl	8000540 <__aeabi_dmul>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fd51 	bl	8000964 <__aeabi_d2f>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	ee00 3a10 	vmov	s0, r3
 8001ec8:	f005 fcac 	bl	8007824 <roundf>
 8001ecc:	eeb0 7a40 	vmov.f32	s14, s0
 8001ed0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001f8c <ImuAccelUpdate+0x194>
 8001ed4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001ede:	edc3 7a01 	vstr	s15, [r3, #4]
	ResAccel.z += roundf((((NewData.z / 16384) - ResAccel.z) * SYSTEM_IMU_ACCEL_RAW_FILTER) * 100) / 100;
 8001ee2:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001ee4:	ed93 8a02 	vldr	s16, [r3, #8]
 8001ee8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001f84 <ImuAccelUpdate+0x18c>
 8001ef0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ef4:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001ef6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efe:	ee17 0a90 	vmov	r0, s15
 8001f02:	f7fe fac5 	bl	8000490 <__aeabi_f2d>
 8001f06:	a31c      	add	r3, pc, #112	; (adr r3, 8001f78 <ImuAccelUpdate+0x180>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb18 	bl	8000540 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <ImuAccelUpdate+0x190>)
 8001f1e:	f7fe fb0f 	bl	8000540 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fd1b 	bl	8000964 <__aeabi_d2f>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	ee00 3a10 	vmov	s0, r3
 8001f34:	f005 fc76 	bl	8007824 <roundf>
 8001f38:	eeb0 7a40 	vmov.f32	s14, s0
 8001f3c:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001f8c <ImuAccelUpdate+0x194>
 8001f40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f44:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001f4a:	edc3 7a02 	vstr	s15, [r3, #8]

	DebugImuAccX = ResAccel.x;
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <ImuAccelUpdate+0x198>)
 8001f54:	6013      	str	r3, [r2, #0]
	DebugImuAccY = ResAccel.y;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <ImuAccelUpdate+0x19c>)
 8001f5c:	6013      	str	r3, [r2, #0]
	DebugImuAccZ = ResAccel.z;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <ImuAccelUpdate+0x188>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4a0d      	ldr	r2, [pc, #52]	; (8001f98 <ImuAccelUpdate+0x1a0>)
 8001f64:	6013      	str	r3, [r2, #0]
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	ecbd 8b02 	vpop	{d8}
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	f3af 8000 	nop.w
 8001f78:	9999999a 	.word	0x9999999a
 8001f7c:	3fb99999 	.word	0x3fb99999
 8001f80:	2000012c 	.word	0x2000012c
 8001f84:	46800000 	.word	0x46800000
 8001f88:	40590000 	.word	0x40590000
 8001f8c:	42c80000 	.word	0x42c80000
 8001f90:	20000124 	.word	0x20000124
 8001f94:	20000138 	.word	0x20000138
 8001f98:	200000a8 	.word	0x200000a8

08001f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa2:	f000 ff71 	bl	8002e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa6:	f000 f923 	bl	80021f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001faa:	f7ff fa63 	bl	8001474 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fae:	f7ff f9fb 	bl	80013a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001fb2:	f000 fd6d 	bl	8002a90 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001fb6:	f000 f98b 	bl	80022d0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8001fba:	f000 fd93 	bl	8002ae4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001fbe:	f000 facd 	bl	800255c <MX_TIM1_Init>
  MX_TIM4_Init();
 8001fc2:	f000 fb83 	bl	80026cc <MX_TIM4_Init>
  MX_ADC1_Init();
 8001fc6:	f7ff f921 	bl	800120c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
#ifndef SYSTEM_NO_ADC_INIT
  ADCInit();
 8001fca:	f7ff fd7f 	bl	8001acc <ADCInit>
#endif
#ifndef SYSTEM_NO_IMU_HW_INIT
  icm20948_init();
 8001fce:	f7fe fe95 	bl	8000cfc <icm20948_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  if (HAL_GetTick() - LastPkgTimeUartLow > SYSTEM_TIMING_MS_UART_LOW)
 8001fd2:	f000 ffbf 	bl	8002f54 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b78      	ldr	r3, [pc, #480]	; (80021bc <main+0x220>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d90e      	bls.n	8002000 <main+0x64>
	  {
		  MX_USART2_UART_Init();
 8001fe2:	f000 fd55 	bl	8002a90 <MX_USART2_UART_Init>
		  UartLowReceiveState = 0;
 8001fe6:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <main+0x224>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_LOW, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8001fec:	2210      	movs	r2, #16
 8001fee:	4975      	ldr	r1, [pc, #468]	; (80021c4 <main+0x228>)
 8001ff0:	4875      	ldr	r0, [pc, #468]	; (80021c8 <main+0x22c>)
 8001ff2:	f004 fbad 	bl	8006750 <HAL_UART_Receive_DMA>
		  LastPkgTimeUartLow = HAL_GetTick();
 8001ff6:	f000 ffad 	bl	8002f54 <HAL_GetTick>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a6f      	ldr	r2, [pc, #444]	; (80021bc <main+0x220>)
 8001ffe:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_HIGH_UART_LOOP
	  if (HAL_GetTick() - LastPkgTimeUartHigh > SYSTEM_TIMING_MS_UART_HIGH)
 8002000:	f000 ffa8 	bl	8002f54 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	4b71      	ldr	r3, [pc, #452]	; (80021cc <main+0x230>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b64      	cmp	r3, #100	; 0x64
 800200e:	d90e      	bls.n	800202e <main+0x92>
	  {
		  MX_USART3_UART_Init();
 8002010:	f000 fd68 	bl	8002ae4 <MX_USART3_UART_Init>
		  UartHighReceiveState = 0;
 8002014:	4b6e      	ldr	r3, [pc, #440]	; (80021d0 <main+0x234>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(SYSTEM_HARDWARE_UART_HIGH, (uint8_t*)SerialHighLevelRequest.Buffer, HIGH_LEVEL_REQUEST_SIZE);
 800201a:	2210      	movs	r2, #16
 800201c:	496d      	ldr	r1, [pc, #436]	; (80021d4 <main+0x238>)
 800201e:	486e      	ldr	r0, [pc, #440]	; (80021d8 <main+0x23c>)
 8002020:	f004 fb96 	bl	8006750 <HAL_UART_Receive_DMA>
		  LastPkgTimeUartHigh = HAL_GetTick();
 8002024:	f000 ff96 	bl	8002f54 <HAL_GetTick>
 8002028:	4603      	mov	r3, r0
 800202a:	4a68      	ldr	r2, [pc, #416]	; (80021cc <main+0x230>)
 800202c:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  if ((UartLowReceiveState == 10) && (SerialControlWheelsResponce.CR == 13) && (SerialControlWheelsResponce.LF == 10))
 800202e:	4b64      	ldr	r3, [pc, #400]	; (80021c0 <main+0x224>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b0a      	cmp	r3, #10
 8002036:	d123      	bne.n	8002080 <main+0xe4>
 8002038:	4b62      	ldr	r3, [pc, #392]	; (80021c4 <main+0x228>)
 800203a:	7b9b      	ldrb	r3, [r3, #14]
 800203c:	2b0d      	cmp	r3, #13
 800203e:	d11f      	bne.n	8002080 <main+0xe4>
 8002040:	4b60      	ldr	r3, [pc, #384]	; (80021c4 <main+0x228>)
 8002042:	7bdb      	ldrb	r3, [r3, #15]
 8002044:	2b0a      	cmp	r3, #10
 8002046:	d11b      	bne.n	8002080 <main+0xe4>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800204c:	4863      	ldr	r0, [pc, #396]	; (80021dc <main+0x240>)
 800204e:	f002 fa92 	bl	8004576 <HAL_GPIO_TogglePin>
		  UartLowReceiveState = 0;
 8002052:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <main+0x224>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
		  int32_t TemplateWheels[2] = { SerialControlWheelsResponce.WheelLeftSteps, SerialControlWheelsResponce.WheelRightSteps };
 8002058:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <main+0x228>)
 800205a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4b58      	ldr	r3, [pc, #352]	; (80021c4 <main+0x228>)
 8002062:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8002066:	607b      	str	r3, [r7, #4]
		  UartLowPrepareRaw(SYSTEM_HALL_FILTER_MAX, TemplateWheels, 2);
 8002068:	463b      	mov	r3, r7
 800206a:	2202      	movs	r2, #2
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002072:	f7ff fbb1 	bl	80017d8 <UartLowPrepareRaw>
		  LastPkgTimeUartLow = HAL_GetTick();
 8002076:	f000 ff6d 	bl	8002f54 <HAL_GetTick>
 800207a:	4603      	mov	r3, r0
 800207c:	4a4f      	ldr	r2, [pc, #316]	; (80021bc <main+0x220>)
 800207e:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_GPIO_LOOP
	  if (HAL_GetTick() - LastUpdateGPIO > SYSTEM_TIMING_MS_GPIO)
 8002080:	f000 ff68 	bl	8002f54 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	4b56      	ldr	r3, [pc, #344]	; (80021e0 <main+0x244>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	; 0x64
 800208e:	d906      	bls.n	800209e <main+0x102>
	  {
		  GPIOUpdate();
 8002090:	f7ff fcc8 	bl	8001a24 <GPIOUpdate>
		  LastUpdateGPIO = HAL_GetTick();
 8002094:	f000 ff5e 	bl	8002f54 <HAL_GetTick>
 8002098:	4603      	mov	r3, r0
 800209a:	4a51      	ldr	r2, [pc, #324]	; (80021e0 <main+0x244>)
 800209c:	6013      	str	r3, [r2, #0]
	  }
#endif
#ifndef SYSTEM_NO_ADC_INIT
#ifndef SYSTEM_NO_ADC_LOOP
	  if (HAL_GetTick() - LastUpdateADC > SYSTEM_TIMING_MS_ADC)
 800209e:	f000 ff59 	bl	8002f54 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	4b4f      	ldr	r3, [pc, #316]	; (80021e4 <main+0x248>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b0a      	cmp	r3, #10
 80020ac:	d908      	bls.n	80020c0 <main+0x124>
	  {
		  ADCUpdate();
 80020ae:	f7ff fd23 	bl	8001af8 <ADCUpdate>
		  ADCPrepare();
 80020b2:	f7ff fd79 	bl	8001ba8 <ADCPrepare>
		  LastUpdateADC = HAL_GetTick();
 80020b6:	f000 ff4d 	bl	8002f54 <HAL_GetTick>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a49      	ldr	r2, [pc, #292]	; (80021e4 <main+0x248>)
 80020be:	6013      	str	r3, [r2, #0]
	  }
#endif
#endif

	  if(HAL_GetTick() - LastUpdateIMU > SYSTEM_TIMING_MS_IMU)
 80020c0:	f000 ff48 	bl	8002f54 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <main+0x24c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b0a      	cmp	r3, #10
 80020ce:	d906      	bls.n	80020de <main+0x142>
	  {
		  ImuAccelUpdate();
 80020d0:	f7ff fe92 	bl	8001df8 <ImuAccelUpdate>

		  LastUpdateIMU = HAL_GetTick();
 80020d4:	f000 ff3e 	bl	8002f54 <HAL_GetTick>
 80020d8:	4603      	mov	r3, r0
 80020da:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <main+0x24c>)
 80020dc:	6013      	str	r3, [r2, #0]
		  IMU_UPDATE();
		  LastUpdateIMU = HAL_GetTick();
	  }
		*/
#ifndef SYSTEM_NO_HIGH_UART_LOOP
	  if ((UartHighReceiveState == 10) && (SerialHighLevelRequest.CR == 13) && (SerialHighLevelRequest.LF == 10))
 80020de:	4b3c      	ldr	r3, [pc, #240]	; (80021d0 <main+0x234>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b0a      	cmp	r3, #10
 80020e6:	d165      	bne.n	80021b4 <main+0x218>
 80020e8:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <main+0x238>)
 80020ea:	7b9b      	ldrb	r3, [r3, #14]
 80020ec:	2b0d      	cmp	r3, #13
 80020ee:	d161      	bne.n	80021b4 <main+0x218>
 80020f0:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <main+0x238>)
 80020f2:	7bdb      	ldrb	r3, [r3, #15]
 80020f4:	2b0a      	cmp	r3, #10
 80020f6:	d15d      	bne.n	80021b4 <main+0x218>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80020f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020fc:	4837      	ldr	r0, [pc, #220]	; (80021dc <main+0x240>)
 80020fe:	f002 fa3a 	bl	8004576 <HAL_GPIO_TogglePin>
		  UartHighReceiveState = 0;
 8002102:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <main+0x234>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
		  SerialHighLevelResponce.ControllerState = 0;
 8002108:	4b38      	ldr	r3, [pc, #224]	; (80021ec <main+0x250>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
		  SerialHighLevelResponce.WheelLeftSteps = 228;
 800210e:	4b37      	ldr	r3, [pc, #220]	; (80021ec <main+0x250>)
 8002110:	2200      	movs	r2, #0
 8002112:	f062 021b 	orn	r2, r2, #27
 8002116:	705a      	strb	r2, [r3, #1]
 8002118:	2200      	movs	r2, #0
 800211a:	709a      	strb	r2, [r3, #2]
 800211c:	2200      	movs	r2, #0
 800211e:	70da      	strb	r2, [r3, #3]
 8002120:	2200      	movs	r2, #0
 8002122:	711a      	strb	r2, [r3, #4]
		  SerialHighLevelResponce.WheelRightSteps = 1337;
 8002124:	4b31      	ldr	r3, [pc, #196]	; (80021ec <main+0x250>)
 8002126:	2200      	movs	r2, #0
 8002128:	f042 0239 	orr.w	r2, r2, #57	; 0x39
 800212c:	715a      	strb	r2, [r3, #5]
 800212e:	2200      	movs	r2, #0
 8002130:	f042 0205 	orr.w	r2, r2, #5
 8002134:	719a      	strb	r2, [r3, #6]
 8002136:	2200      	movs	r2, #0
 8002138:	71da      	strb	r2, [r3, #7]
 800213a:	2200      	movs	r2, #0
 800213c:	721a      	strb	r2, [r3, #8]
		  SerialHighLevelResponce.BatteryPersentage = 99;
 800213e:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <main+0x250>)
 8002140:	2263      	movs	r2, #99	; 0x63
 8002142:	725a      	strb	r2, [r3, #9]
		  SerialHighLevelResponce.Roll = 174;
 8002144:	4b29      	ldr	r3, [pc, #164]	; (80021ec <main+0x250>)
 8002146:	2200      	movs	r2, #0
 8002148:	f062 0251 	orn	r2, r2, #81	; 0x51
 800214c:	729a      	strb	r2, [r3, #10]
 800214e:	2200      	movs	r2, #0
 8002150:	72da      	strb	r2, [r3, #11]
		  SerialHighLevelResponce.Pitch = 666;
 8002152:	4b26      	ldr	r3, [pc, #152]	; (80021ec <main+0x250>)
 8002154:	2200      	movs	r2, #0
 8002156:	f062 0265 	orn	r2, r2, #101	; 0x65
 800215a:	731a      	strb	r2, [r3, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f042 0202 	orr.w	r2, r2, #2
 8002162:	735a      	strb	r2, [r3, #13]
		  SerialHighLevelResponce.Yaw = 777;
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <main+0x250>)
 8002166:	2200      	movs	r2, #0
 8002168:	f042 0209 	orr.w	r2, r2, #9
 800216c:	739a      	strb	r2, [r3, #14]
 800216e:	2200      	movs	r2, #0
 8002170:	f042 0203 	orr.w	r2, r2, #3
 8002174:	73da      	strb	r2, [r3, #15]
		  SerialHighLevelResponce.CenterIkSensor = 150;
 8002176:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <main+0x250>)
 8002178:	2200      	movs	r2, #0
 800217a:	f062 0269 	orn	r2, r2, #105	; 0x69
 800217e:	741a      	strb	r2, [r3, #16]
 8002180:	2200      	movs	r2, #0
 8002182:	745a      	strb	r2, [r3, #17]
		  SerialHighLevelResponce.ParameterNumber = 0;
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <main+0x250>)
 8002186:	2200      	movs	r2, #0
 8002188:	749a      	strb	r2, [r3, #18]
		  SerialHighLevelResponce.ParametrValue = 0;
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <main+0x250>)
 800218c:	3313      	adds	r3, #19
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
		  SerialHighLevelResponce.CR = 13;
 8002194:	4b15      	ldr	r3, [pc, #84]	; (80021ec <main+0x250>)
 8002196:	220d      	movs	r2, #13
 8002198:	75da      	strb	r2, [r3, #23]
		  SerialHighLevelResponce.LF = 10;
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <main+0x250>)
 800219c:	220a      	movs	r2, #10
 800219e:	761a      	strb	r2, [r3, #24]
 		  HAL_UART_Transmit_DMA(&huart3, (uint8_t*)SerialHighLevelResponce.Buffer, HIGH_LEVEL_RESPONCE_SIZE);
 80021a0:	2219      	movs	r2, #25
 80021a2:	4912      	ldr	r1, [pc, #72]	; (80021ec <main+0x250>)
 80021a4:	480c      	ldr	r0, [pc, #48]	; (80021d8 <main+0x23c>)
 80021a6:	f004 fa55 	bl	8006654 <HAL_UART_Transmit_DMA>
		  LastPkgTimeUartHigh = HAL_GetTick();
 80021aa:	f000 fed3 	bl	8002f54 <HAL_GetTick>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a06      	ldr	r2, [pc, #24]	; (80021cc <main+0x230>)
 80021b2:	6013      	str	r3, [r2, #0]
	  else
	  {
		  MotopStop();
	  }*/
#ifndef SYSTEM_NO_LOW_UART_LOOP
	  SerialLowControlLoop();
 80021b4:	f7ff fdfa 	bl	8001dac <SerialLowControlLoop>
	  if (HAL_GetTick() - LastPkgTimeUartLow > SYSTEM_TIMING_MS_UART_LOW)
 80021b8:	e70b      	b.n	8001fd2 <main+0x36>
 80021ba:	bf00      	nop
 80021bc:	20000038 	.word	0x20000038
 80021c0:	20000040 	.word	0x20000040
 80021c4:	200000c4 	.word	0x200000c4
 80021c8:	200005c8 	.word	0x200005c8
 80021cc:	2000003c 	.word	0x2000003c
 80021d0:	20000041 	.word	0x20000041
 80021d4:	20000144 	.word	0x20000144
 80021d8:	200004c4 	.word	0x200004c4
 80021dc:	40020c00 	.word	0x40020c00
 80021e0:	20000048 	.word	0x20000048
 80021e4:	2000004c 	.word	0x2000004c
 80021e8:	20000050 	.word	0x20000050
 80021ec:	20000164 	.word	0x20000164

080021f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b094      	sub	sp, #80	; 0x50
 80021f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f6:	f107 0320 	add.w	r3, r7, #32
 80021fa:	2230      	movs	r2, #48	; 0x30
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f005 fb5a 	bl	80078b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	4b28      	ldr	r3, [pc, #160]	; (80022bc <SystemClock_Config+0xcc>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <SystemClock_Config+0xcc>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002222:	6413      	str	r3, [r2, #64]	; 0x40
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <SystemClock_Config+0xcc>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002230:	2300      	movs	r3, #0
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <SystemClock_Config+0xd0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <SystemClock_Config+0xd0>)
 800223a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <SystemClock_Config+0xd0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800224c:	2301      	movs	r3, #1
 800224e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002256:	2302      	movs	r3, #2
 8002258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800225a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002260:	2304      	movs	r3, #4
 8002262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002264:	23a8      	movs	r3, #168	; 0xa8
 8002266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002268:	2302      	movs	r3, #2
 800226a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800226c:	2304      	movs	r3, #4
 800226e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002270:	f107 0320 	add.w	r3, r7, #32
 8002274:	4618      	mov	r0, r3
 8002276:	f002 f999 	bl	80045ac <HAL_RCC_OscConfig>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002280:	f000 f820 	bl	80022c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002284:	230f      	movs	r3, #15
 8002286:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002288:	2302      	movs	r3, #2
 800228a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002290:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2105      	movs	r1, #5
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fbfa 	bl	8004a9c <HAL_RCC_ClockConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022ae:	f000 f809 	bl	80022c4 <Error_Handler>
  }
}
 80022b2:	bf00      	nop
 80022b4:	3750      	adds	r7, #80	; 0x50
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40007000 	.word	0x40007000

080022c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c8:	b672      	cpsid	i
}
 80022ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022cc:	e7fe      	b.n	80022cc <Error_Handler+0x8>
	...

080022d0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80022d4:	4b17      	ldr	r3, [pc, #92]	; (8002334 <MX_SPI2_Init+0x64>)
 80022d6:	4a18      	ldr	r2, [pc, #96]	; (8002338 <MX_SPI2_Init+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <MX_SPI2_Init+0x64>)
 80022dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_SPI2_Init+0x64>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <MX_SPI2_Init+0x64>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_SPI2_Init+0x64>)
 80022f0:	2202      	movs	r2, #2
 80022f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_SPI2_Init+0x64>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_SPI2_Init+0x64>)
 80022fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002300:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_SPI2_Init+0x64>)
 8002304:	2210      	movs	r2, #16
 8002306:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <MX_SPI2_Init+0x64>)
 800230a:	2200      	movs	r2, #0
 800230c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_SPI2_Init+0x64>)
 8002310:	2200      	movs	r2, #0
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002314:	4b07      	ldr	r3, [pc, #28]	; (8002334 <MX_SPI2_Init+0x64>)
 8002316:	2200      	movs	r2, #0
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_SPI2_Init+0x64>)
 800231c:	220a      	movs	r2, #10
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002320:	4804      	ldr	r0, [pc, #16]	; (8002334 <MX_SPI2_Init+0x64>)
 8002322:	f002 fdb7 	bl	8004e94 <HAL_SPI_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800232c:	f7ff ffca 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	2000019c 	.word	0x2000019c
 8002338:	40003800 	.word	0x40003800

0800233c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_SPI_MspInit+0x84>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d12c      	bne.n	80023b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <HAL_SPI_MspInit+0x88>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 8002396:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a8:	2305      	movs	r3, #5
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4619      	mov	r1, r3
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HAL_SPI_MspInit+0x8c>)
 80023b4:	f001 ff12 	bl	80041dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80023b8:	bf00      	nop
 80023ba:	3728      	adds	r7, #40	; 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40003800 	.word	0x40003800
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020400 	.word	0x40020400

080023cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_MspInit+0x4c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <HAL_MspInit+0x4c>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_MspInit+0x4c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_MspInit+0x4c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <HAL_MspInit+0x4c>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	; 0x40
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_MspInit+0x4c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800

0800241c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <NMI_Handler+0x4>

08002422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002426:	e7fe      	b.n	8002426 <HardFault_Handler+0x4>

08002428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242c:	e7fe      	b.n	800242c <MemManage_Handler+0x4>

0800242e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <BusFault_Handler+0x4>

08002434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <UsageFault_Handler+0x4>

0800243a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002468:	f000 fd60 	bl	8002f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}

08002470 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <DMA1_Stream1_IRQHandler+0x10>)
 8002476:	f001 fc47 	bl	8003d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000464 	.word	0x20000464

08002484 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <DMA1_Stream3_IRQHandler+0x10>)
 800248a:	f001 fc3d 	bl	8003d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200001f4 	.word	0x200001f4

08002498 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <DMA1_Stream4_IRQHandler+0x10>)
 800249e:	f001 fc33 	bl	8003d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000508 	.word	0x20000508

080024ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <DMA1_Stream5_IRQHandler+0x10>)
 80024b2:	f001 fc29 	bl	8003d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000404 	.word	0x20000404

080024c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <DMA1_Stream6_IRQHandler+0x10>)
 80024c6:	f001 fc1f 	bl	8003d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000568 	.word	0x20000568

080024d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <USART2_IRQHandler+0x10>)
 80024da:	f004 f969 	bl	80067b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200005c8 	.word	0x200005c8

080024e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <USART3_IRQHandler+0x10>)
 80024ee:	f004 f95f 	bl	80067b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200004c4 	.word	0x200004c4

080024fc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <DMA2_Stream1_IRQHandler+0x10>)
 8002502:	f001 fc01 	bl	8003d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000254 	.word	0x20000254

08002510 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <DMA2_Stream2_IRQHandler+0x10>)
 8002516:	f001 fbf7 	bl	8003d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000035c 	.word	0x2000035c

08002524 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <DMA2_Stream6_IRQHandler+0x10>)
 800252a:	f001 fbed 	bl	8003d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200002fc 	.word	0x200002fc

08002538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <SystemInit+0x20>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <SystemInit+0x20>)
 8002544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch3;
DMA_HandleTypeDef hdma_tim4_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b096      	sub	sp, #88	; 0x58
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002562:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002570:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	611a      	str	r2, [r3, #16]
 800258a:	615a      	str	r2, [r3, #20]
 800258c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	2220      	movs	r2, #32
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f005 f98f 	bl	80078b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800259a:	4b4a      	ldr	r3, [pc, #296]	; (80026c4 <MX_TIM1_Init+0x168>)
 800259c:	4a4a      	ldr	r2, [pc, #296]	; (80026c8 <MX_TIM1_Init+0x16c>)
 800259e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80025a0:	4b48      	ldr	r3, [pc, #288]	; (80026c4 <MX_TIM1_Init+0x168>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <MX_TIM1_Init+0x168>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 105;
 80025ac:	4b45      	ldr	r3, [pc, #276]	; (80026c4 <MX_TIM1_Init+0x168>)
 80025ae:	2269      	movs	r2, #105	; 0x69
 80025b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b2:	4b44      	ldr	r3, [pc, #272]	; (80026c4 <MX_TIM1_Init+0x168>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025b8:	4b42      	ldr	r3, [pc, #264]	; (80026c4 <MX_TIM1_Init+0x168>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025be:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <MX_TIM1_Init+0x168>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025c4:	483f      	ldr	r0, [pc, #252]	; (80026c4 <MX_TIM1_Init+0x168>)
 80025c6:	f003 fa0d 	bl	80059e4 <HAL_TIM_Base_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80025d0:	f7ff fe78 	bl	80022c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025de:	4619      	mov	r1, r3
 80025e0:	4838      	ldr	r0, [pc, #224]	; (80026c4 <MX_TIM1_Init+0x168>)
 80025e2:	f003 fb69 	bl	8005cb8 <HAL_TIM_ConfigClockSource>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80025ec:	f7ff fe6a 	bl	80022c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025f0:	4834      	ldr	r0, [pc, #208]	; (80026c4 <MX_TIM1_Init+0x168>)
 80025f2:	f003 fa46 	bl	8005a82 <HAL_TIM_PWM_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80025fc:	f7ff fe62 	bl	80022c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002608:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800260c:	4619      	mov	r1, r3
 800260e:	482d      	ldr	r0, [pc, #180]	; (80026c4 <MX_TIM1_Init+0x168>)
 8002610:	f003 ff04 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800261a:	f7ff fe53 	bl	80022c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800261e:	2360      	movs	r3, #96	; 0x60
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002626:	2300      	movs	r3, #0
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800262a:	2300      	movs	r3, #0
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002632:	2300      	movs	r3, #0
 8002634:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800263a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263e:	2200      	movs	r2, #0
 8002640:	4619      	mov	r1, r3
 8002642:	4820      	ldr	r0, [pc, #128]	; (80026c4 <MX_TIM1_Init+0x168>)
 8002644:	f003 fa76 	bl	8005b34 <HAL_TIM_PWM_ConfigChannel>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800264e:	f7ff fe39 	bl	80022c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002656:	2204      	movs	r2, #4
 8002658:	4619      	mov	r1, r3
 800265a:	481a      	ldr	r0, [pc, #104]	; (80026c4 <MX_TIM1_Init+0x168>)
 800265c:	f003 fa6a 	bl	8005b34 <HAL_TIM_PWM_ConfigChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002666:	f7ff fe2d 	bl	80022c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800266a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266e:	2208      	movs	r2, #8
 8002670:	4619      	mov	r1, r3
 8002672:	4814      	ldr	r0, [pc, #80]	; (80026c4 <MX_TIM1_Init+0x168>)
 8002674:	f003 fa5e 	bl	8005b34 <HAL_TIM_PWM_ConfigChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800267e:	f7ff fe21 	bl	80022c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	4619      	mov	r1, r3
 80026a4:	4807      	ldr	r0, [pc, #28]	; (80026c4 <MX_TIM1_Init+0x168>)
 80026a6:	f003 ff35 	bl	8006514 <HAL_TIMEx_ConfigBreakDeadTime>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80026b0:	f7ff fe08 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026b4:	4803      	ldr	r0, [pc, #12]	; (80026c4 <MX_TIM1_Init+0x168>)
 80026b6:	f000 f989 	bl	80029cc <HAL_TIM_MspPostInit>

}
 80026ba:	bf00      	nop
 80026bc:	3758      	adds	r7, #88	; 0x58
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200003bc 	.word	0x200003bc
 80026c8:	40010000 	.word	0x40010000

080026cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08e      	sub	sp, #56	; 0x38
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e0:	f107 0320 	add.w	r3, r7, #32
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
 80026f8:	615a      	str	r2, [r3, #20]
 80026fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026fc:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <MX_TIM4_Init+0xe4>)
 80026fe:	4a2d      	ldr	r2, [pc, #180]	; (80027b4 <MX_TIM4_Init+0xe8>)
 8002700:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002702:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <MX_TIM4_Init+0xe4>)
 8002704:	2200      	movs	r2, #0
 8002706:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <MX_TIM4_Init+0xe4>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 800270e:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <MX_TIM4_Init+0xe4>)
 8002710:	2269      	movs	r2, #105	; 0x69
 8002712:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002714:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <MX_TIM4_Init+0xe4>)
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <MX_TIM4_Init+0xe4>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002720:	4823      	ldr	r0, [pc, #140]	; (80027b0 <MX_TIM4_Init+0xe4>)
 8002722:	f003 f95f 	bl	80059e4 <HAL_TIM_Base_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800272c:	f7ff fdca 	bl	80022c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800273a:	4619      	mov	r1, r3
 800273c:	481c      	ldr	r0, [pc, #112]	; (80027b0 <MX_TIM4_Init+0xe4>)
 800273e:	f003 fabb 	bl	8005cb8 <HAL_TIM_ConfigClockSource>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002748:	f7ff fdbc 	bl	80022c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800274c:	4818      	ldr	r0, [pc, #96]	; (80027b0 <MX_TIM4_Init+0xe4>)
 800274e:	f003 f998 	bl	8005a82 <HAL_TIM_PWM_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002758:	f7ff fdb4 	bl	80022c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002764:	f107 0320 	add.w	r3, r7, #32
 8002768:	4619      	mov	r1, r3
 800276a:	4811      	ldr	r0, [pc, #68]	; (80027b0 <MX_TIM4_Init+0xe4>)
 800276c:	f003 fe56 	bl	800641c <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002776:	f7ff fda5 	bl	80022c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800277a:	2360      	movs	r3, #96	; 0x60
 800277c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	2204      	movs	r2, #4
 800278e:	4619      	mov	r1, r3
 8002790:	4807      	ldr	r0, [pc, #28]	; (80027b0 <MX_TIM4_Init+0xe4>)
 8002792:	f003 f9cf 	bl	8005b34 <HAL_TIM_PWM_ConfigChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800279c:	f7ff fd92 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027a0:	4803      	ldr	r0, [pc, #12]	; (80027b0 <MX_TIM4_Init+0xe4>)
 80027a2:	f000 f913 	bl	80029cc <HAL_TIM_MspPostInit>

}
 80027a6:	bf00      	nop
 80027a8:	3738      	adds	r7, #56	; 0x38
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200002b4 	.word	0x200002b4
 80027b4:	40000800 	.word	0x40000800

080027b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a76      	ldr	r2, [pc, #472]	; (80029a0 <HAL_TIM_Base_MspInit+0x1e8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	f040 80a2 	bne.w	8002910 <HAL_TIM_Base_MspInit+0x158>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4b74      	ldr	r3, [pc, #464]	; (80029a4 <HAL_TIM_Base_MspInit+0x1ec>)
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	4a73      	ldr	r2, [pc, #460]	; (80029a4 <HAL_TIM_Base_MspInit+0x1ec>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6453      	str	r3, [r2, #68]	; 0x44
 80027dc:	4b71      	ldr	r3, [pc, #452]	; (80029a4 <HAL_TIM_Base_MspInit+0x1ec>)
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 80027e8:	4b6f      	ldr	r3, [pc, #444]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 80027ea:	4a70      	ldr	r2, [pc, #448]	; (80029ac <HAL_TIM_Base_MspInit+0x1f4>)
 80027ec:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 80027ee:	4b6e      	ldr	r3, [pc, #440]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 80027f0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80027f4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027f6:	4b6c      	ldr	r3, [pc, #432]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 80027f8:	2240      	movs	r2, #64	; 0x40
 80027fa:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80027fc:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002802:	4b69      	ldr	r3, [pc, #420]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002808:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800280a:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 800280c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002810:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002812:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002814:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002818:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 800281a:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 800281c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002820:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002822:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002828:	4b5f      	ldr	r3, [pc, #380]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 800282a:	2200      	movs	r2, #0
 800282c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800282e:	485e      	ldr	r0, [pc, #376]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002830:	f001 f8d2 	bl	80039d8 <HAL_DMA_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 800283a:	f7ff fd43 	bl	80022c4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a59      	ldr	r2, [pc, #356]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_TIM_Base_MspInit+0x1f0>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800284a:	4b59      	ldr	r3, [pc, #356]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 800284c:	4a59      	ldr	r2, [pc, #356]	; (80029b4 <HAL_TIM_Base_MspInit+0x1fc>)
 800284e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002850:	4b57      	ldr	r3, [pc, #348]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 8002852:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002856:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002858:	4b55      	ldr	r3, [pc, #340]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 800285a:	2240      	movs	r2, #64	; 0x40
 800285c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800285e:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 8002860:	2200      	movs	r2, #0
 8002862:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002864:	4b52      	ldr	r3, [pc, #328]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 8002866:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800286a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800286c:	4b50      	ldr	r3, [pc, #320]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 800286e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002872:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002874:	4b4e      	ldr	r3, [pc, #312]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 8002876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800287a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800287c:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 800287e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002882:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002884:	4b4a      	ldr	r3, [pc, #296]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 8002886:	2200      	movs	r2, #0
 8002888:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800288a:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 800288c:	2200      	movs	r2, #0
 800288e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002890:	4847      	ldr	r0, [pc, #284]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 8002892:	f001 f8a1 	bl	80039d8 <HAL_DMA_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_TIM_Base_MspInit+0xe8>
    {
      Error_Handler();
 800289c:	f7ff fd12 	bl	80022c4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a43      	ldr	r2, [pc, #268]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24
 80028a6:	4a42      	ldr	r2, [pc, #264]	; (80029b0 <HAL_TIM_Base_MspInit+0x1f8>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 80028ac:	4b42      	ldr	r3, [pc, #264]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 80028ae:	4a43      	ldr	r2, [pc, #268]	; (80029bc <HAL_TIM_Base_MspInit+0x204>)
 80028b0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 80028b2:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 80028b4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80028b8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ba:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 80028bc:	2240      	movs	r2, #64	; 0x40
 80028be:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c0:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80028c6:	4b3c      	ldr	r3, [pc, #240]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 80028c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028cc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028ce:	4b3a      	ldr	r3, [pc, #232]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 80028d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028d4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 80028d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028dc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 80028de:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 80028e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ec:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80028f2:	4831      	ldr	r0, [pc, #196]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 80028f4:	f001 f870 	bl	80039d8 <HAL_DMA_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_TIM_Base_MspInit+0x14a>
    {
      Error_Handler();
 80028fe:	f7ff fce1 	bl	80022c4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a2c      	ldr	r2, [pc, #176]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
 8002908:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <HAL_TIM_Base_MspInit+0x200>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800290e:	e043      	b.n	8002998 <HAL_TIM_Base_MspInit+0x1e0>
  else if(tim_baseHandle->Instance==TIM4)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a2a      	ldr	r2, [pc, #168]	; (80029c0 <HAL_TIM_Base_MspInit+0x208>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d13e      	bne.n	8002998 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <HAL_TIM_Base_MspInit+0x1ec>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <HAL_TIM_Base_MspInit+0x1ec>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_TIM_Base_MspInit+0x1ec>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8002936:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 8002938:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <HAL_TIM_Base_MspInit+0x210>)
 800293a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 800293e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002942:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002944:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 8002946:	2240      	movs	r2, #64	; 0x40
 8002948:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 800294c:	2200      	movs	r2, #0
 800294e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002950:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 8002952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002956:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 800295a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800295e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 8002962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002966:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 8002968:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 800296a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296e:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002970:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 8002972:	2200      	movs	r2, #0
 8002974:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 8002978:	2200      	movs	r2, #0
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800297c:	4811      	ldr	r0, [pc, #68]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 800297e:	f001 f82b 	bl	80039d8 <HAL_DMA_Init>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_TIM_Base_MspInit+0x1d4>
      Error_Handler();
 8002988:	f7ff fc9c 	bl	80022c4 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0d      	ldr	r2, [pc, #52]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
 8002992:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <HAL_TIM_Base_MspInit+0x20c>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40023800 	.word	0x40023800
 80029a8:	2000035c 	.word	0x2000035c
 80029ac:	40026440 	.word	0x40026440
 80029b0:	20000254 	.word	0x20000254
 80029b4:	40026428 	.word	0x40026428
 80029b8:	200002fc 	.word	0x200002fc
 80029bc:	400264a0 	.word	0x400264a0
 80029c0:	40000800 	.word	0x40000800
 80029c4:	200001f4 	.word	0x200001f4
 80029c8:	40026058 	.word	0x40026058

080029cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	; 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_TIM_MspPostInit+0xb0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d11f      	bne.n	8002a2e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <HAL_TIM_MspPostInit+0xb4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <HAL_TIM_MspPostInit+0xb4>)
 80029f8:	f043 0310 	orr.w	r3, r3, #16
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_TIM_MspPostInit+0xb4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_LED1_Pin|PWM_LED2_Pin|PWM_LED3_Pin;
 8002a0a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8002a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	4817      	ldr	r0, [pc, #92]	; (8002a84 <HAL_TIM_MspPostInit+0xb8>)
 8002a28:	f001 fbd8 	bl	80041dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a2c:	e022      	b.n	8002a74 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a15      	ldr	r2, [pc, #84]	; (8002a88 <HAL_TIM_MspPostInit+0xbc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d11d      	bne.n	8002a74 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_TIM_MspPostInit+0xb4>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	4a0f      	ldr	r2, [pc, #60]	; (8002a80 <HAL_TIM_MspPostInit+0xb4>)
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	6313      	str	r3, [r2, #48]	; 0x30
 8002a48:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_TIM_MspPostInit+0xb4>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_LED4_Pin;
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a64:	2302      	movs	r3, #2
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LED4_GPIO_Port, &GPIO_InitStruct);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4807      	ldr	r0, [pc, #28]	; (8002a8c <HAL_TIM_MspPostInit+0xc0>)
 8002a70:	f001 fbb4 	bl	80041dc <HAL_GPIO_Init>
}
 8002a74:	bf00      	nop
 8002a76:	3728      	adds	r7, #40	; 0x28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40020400 	.word	0x40020400

08002a90 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002a96:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <MX_USART2_UART_Init+0x50>)
 8002a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002a9c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002aae:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ac6:	4805      	ldr	r0, [pc, #20]	; (8002adc <MX_USART2_UART_Init+0x4c>)
 8002ac8:	f003 fd76 	bl	80065b8 <HAL_UART_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ad2:	f7ff fbf7 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200005c8 	.word	0x200005c8
 8002ae0:	40004400 	.word	0x40004400

08002ae4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <MX_USART3_UART_Init+0x50>)
 8002aec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002af0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002af4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <MX_USART3_UART_Init+0x4c>)
 8002b1c:	f003 fd4c 	bl	80065b8 <HAL_UART_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b26:	f7ff fbcd 	bl	80022c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200004c4 	.word	0x200004c4
 8002b34:	40004800 	.word	0x40004800

08002b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	; 0x30
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 031c 	add.w	r3, r7, #28
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a4b      	ldr	r2, [pc, #300]	; (8002c84 <HAL_UART_MspInit+0x14c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	f040 80a2 	bne.w	8002ca0 <HAL_UART_MspInit+0x168>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	4b49      	ldr	r3, [pc, #292]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	4a48      	ldr	r2, [pc, #288]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6c:	4b46      	ldr	r3, [pc, #280]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	4b42      	ldr	r3, [pc, #264]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	4a41      	ldr	r2, [pc, #260]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b82:	f043 0308 	orr.w	r3, r3, #8
 8002b86:	6313      	str	r3, [r2, #48]	; 0x30
 8002b88:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_UART_MspInit+0x150>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = LOW_TX_Pin|LOW_RX_Pin;
 8002b94:	2360      	movs	r3, #96	; 0x60
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ba4:	2307      	movs	r3, #7
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba8:	f107 031c 	add.w	r3, r7, #28
 8002bac:	4619      	mov	r1, r3
 8002bae:	4837      	ldr	r0, [pc, #220]	; (8002c8c <HAL_UART_MspInit+0x154>)
 8002bb0:	f001 fb14 	bl	80041dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002bb4:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002bb6:	4a37      	ldr	r2, [pc, #220]	; (8002c94 <HAL_UART_MspInit+0x15c>)
 8002bb8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002bba:	4b35      	ldr	r3, [pc, #212]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002bbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bc2:	4b33      	ldr	r3, [pc, #204]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bc8:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bce:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002be2:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002be8:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bee:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002bf6:	4826      	ldr	r0, [pc, #152]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002bf8:	f000 feee 	bl	80039d8 <HAL_DMA_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002c02:	f7ff fb5f 	bl	80022c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a21      	ldr	r2, [pc, #132]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38
 8002c0c:	4a20      	ldr	r2, [pc, #128]	; (8002c90 <HAL_UART_MspInit+0x158>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002c12:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c14:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <HAL_UART_MspInit+0x164>)
 8002c16:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002c18:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c26:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c32:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c34:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002c40:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c4c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002c54:	4810      	ldr	r0, [pc, #64]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c56:	f000 febf 	bl	80039d8 <HAL_DMA_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002c60:	f7ff fb30 	bl	80022c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a0c      	ldr	r2, [pc, #48]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c68:	635a      	str	r2, [r3, #52]	; 0x34
 8002c6a:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <HAL_UART_MspInit+0x160>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c70:	2200      	movs	r2, #0
 8002c72:	2100      	movs	r1, #0
 8002c74:	2026      	movs	r0, #38	; 0x26
 8002c76:	f000 fe78 	bl	800396a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c7a:	2026      	movs	r0, #38	; 0x26
 8002c7c:	f000 fe91 	bl	80039a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c80:	e0c4      	b.n	8002e0c <HAL_UART_MspInit+0x2d4>
 8002c82:	bf00      	nop
 8002c84:	40004400 	.word	0x40004400
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020c00 	.word	0x40020c00
 8002c90:	20000404 	.word	0x20000404
 8002c94:	40026088 	.word	0x40026088
 8002c98:	20000568 	.word	0x20000568
 8002c9c:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a5b      	ldr	r2, [pc, #364]	; (8002e14 <HAL_UART_MspInit+0x2dc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	f040 80b0 	bne.w	8002e0c <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_UART_MspInit+0x2e0>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	4a58      	ldr	r2, [pc, #352]	; (8002e18 <HAL_UART_MspInit+0x2e0>)
 8002cb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cba:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbc:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <HAL_UART_MspInit+0x2e0>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	4b52      	ldr	r3, [pc, #328]	; (8002e18 <HAL_UART_MspInit+0x2e0>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	4a51      	ldr	r2, [pc, #324]	; (8002e18 <HAL_UART_MspInit+0x2e0>)
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd8:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <HAL_UART_MspInit+0x2e0>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	4b4b      	ldr	r3, [pc, #300]	; (8002e18 <HAL_UART_MspInit+0x2e0>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	4a4a      	ldr	r2, [pc, #296]	; (8002e18 <HAL_UART_MspInit+0x2e0>)
 8002cee:	f043 0308 	orr.w	r3, r3, #8
 8002cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf4:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <HAL_UART_MspInit+0x2e0>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HIGH_RX_Pin;
 8002d00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d12:	2307      	movs	r3, #7
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_RX_GPIO_Port, &GPIO_InitStruct);
 8002d16:	f107 031c 	add.w	r3, r7, #28
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	483f      	ldr	r0, [pc, #252]	; (8002e1c <HAL_UART_MspInit+0x2e4>)
 8002d1e:	f001 fa5d 	bl	80041dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HIGH_TX_Pin;
 8002d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d34:	2307      	movs	r3, #7
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIGH_TX_GPIO_Port, &GPIO_InitStruct);
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4838      	ldr	r0, [pc, #224]	; (8002e20 <HAL_UART_MspInit+0x2e8>)
 8002d40:	f001 fa4c 	bl	80041dc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002d44:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d46:	4a38      	ldr	r2, [pc, #224]	; (8002e28 <HAL_UART_MspInit+0x2f0>)
 8002d48:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002d4a:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d50:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d58:	4b32      	ldr	r3, [pc, #200]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d5e:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d64:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d66:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002d72:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d7e:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002d84:	4827      	ldr	r0, [pc, #156]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d86:	f000 fe27 	bl	80039d8 <HAL_DMA_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8002d90:	f7ff fa98 	bl	80022c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a23      	ldr	r2, [pc, #140]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
 8002d9a:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <HAL_UART_MspInit+0x2ec>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002da2:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <HAL_UART_MspInit+0x2f8>)
 8002da4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 8002da6:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002da8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002dac:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dae:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002db0:	2240      	movs	r2, #64	; 0x40
 8002db2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002de0:	4812      	ldr	r0, [pc, #72]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002de2:	f000 fdf9 	bl	80039d8 <HAL_DMA_Init>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_UART_MspInit+0x2b8>
      Error_Handler();
 8002dec:	f7ff fa6a 	bl	80022c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34
 8002df6:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <HAL_UART_MspInit+0x2f4>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2100      	movs	r1, #0
 8002e00:	2027      	movs	r0, #39	; 0x27
 8002e02:	f000 fdb2 	bl	800396a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e06:	2027      	movs	r0, #39	; 0x27
 8002e08:	f000 fdcb 	bl	80039a2 <HAL_NVIC_EnableIRQ>
}
 8002e0c:	bf00      	nop
 8002e0e:	3730      	adds	r7, #48	; 0x30
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40004800 	.word	0x40004800
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020400 	.word	0x40020400
 8002e20:	40020c00 	.word	0x40020c00
 8002e24:	20000464 	.word	0x20000464
 8002e28:	40026028 	.word	0x40026028
 8002e2c:	20000508 	.word	0x20000508
 8002e30:	40026070 	.word	0x40026070

08002e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e38:	480d      	ldr	r0, [pc, #52]	; (8002e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e3a:	490e      	ldr	r1, [pc, #56]	; (8002e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e3c:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e40:	e002      	b.n	8002e48 <LoopCopyDataInit>

08002e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e46:	3304      	adds	r3, #4

08002e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e4c:	d3f9      	bcc.n	8002e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e50:	4c0b      	ldr	r4, [pc, #44]	; (8002e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e54:	e001      	b.n	8002e5a <LoopFillZerobss>

08002e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e58:	3204      	adds	r2, #4

08002e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e5c:	d3fb      	bcc.n	8002e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e5e:	f7ff fb6b 	bl	8002538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e62:	f004 fd05 	bl	8007870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e66:	f7ff f899 	bl	8001f9c <main>
  bx  lr    
 8002e6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002e78:	08007910 	.word	0x08007910
  ldr r2, =_sbss
 8002e7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002e80:	20000610 	.word	0x20000610

08002e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e84:	e7fe      	b.n	8002e84 <ADC_IRQHandler>
	...

08002e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_Init+0x40>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <HAL_Init+0x40>)
 8002e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HAL_Init+0x40>)
 8002e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_Init+0x40>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <HAL_Init+0x40>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eb0:	2003      	movs	r0, #3
 8002eb2:	f000 fd4f 	bl	8003954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eb6:	200f      	movs	r0, #15
 8002eb8:	f000 f808 	bl	8002ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ebc:	f7ff fa86 	bl	80023cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023c00 	.word	0x40023c00

08002ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_InitTick+0x54>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_InitTick+0x58>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	4619      	mov	r1, r3
 8002ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fd67 	bl	80039be <HAL_SYSTICK_Config>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00e      	b.n	8002f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b0f      	cmp	r3, #15
 8002efe:	d80a      	bhi.n	8002f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f00:	2200      	movs	r2, #0
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295
 8002f08:	f000 fd2f 	bl	800396a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f0c:	4a06      	ldr	r2, [pc, #24]	; (8002f28 <HAL_InitTick+0x5c>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000000 	.word	0x20000000
 8002f24:	20000008 	.word	0x20000008
 8002f28:	20000004 	.word	0x20000004

08002f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_IncTick+0x20>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_IncTick+0x24>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <HAL_IncTick+0x24>)
 8002f3e:	6013      	str	r3, [r2, #0]
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000008 	.word	0x20000008
 8002f50:	2000060c 	.word	0x2000060c

08002f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return uwTick;
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_GetTick+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	2000060c 	.word	0x2000060c

08002f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f74:	f7ff ffee 	bl	8002f54 <HAL_GetTick>
 8002f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d005      	beq.n	8002f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <HAL_Delay+0x44>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f92:	bf00      	nop
 8002f94:	f7ff ffde 	bl	8002f54 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d8f7      	bhi.n	8002f94 <HAL_Delay+0x28>
  {
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000008 	.word	0x20000008

08002fb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e033      	b.n	8003032 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe f96c 	bl	80012b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d118      	bne.n	8003024 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ffa:	f023 0302 	bic.w	r3, r3, #2
 8002ffe:	f043 0202 	orr.w	r2, r3, #2
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fad8 	bl	80035bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
 8003022:	e001      	b.n	8003028 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_ADC_Start+0x1a>
 8003052:	2302      	movs	r3, #2
 8003054:	e0b2      	b.n	80031bc <HAL_ADC_Start+0x180>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d018      	beq.n	800309e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800307c:	4b52      	ldr	r3, [pc, #328]	; (80031c8 <HAL_ADC_Start+0x18c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a52      	ldr	r2, [pc, #328]	; (80031cc <HAL_ADC_Start+0x190>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	0c9a      	lsrs	r2, r3, #18
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003090:	e002      	b.n	8003098 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3b01      	subs	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f9      	bne.n	8003092 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d17a      	bne.n	80031a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ea:	d106      	bne.n	80030fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	f023 0206 	bic.w	r2, r3, #6
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	645a      	str	r2, [r3, #68]	; 0x44
 80030f8:	e002      	b.n	8003100 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003108:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_ADC_Start+0x194>)
 800310a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003114:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 031f 	and.w	r3, r3, #31
 800311e:	2b00      	cmp	r3, #0
 8003120:	d12a      	bne.n	8003178 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2b      	ldr	r2, [pc, #172]	; (80031d4 <HAL_ADC_Start+0x198>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d015      	beq.n	8003158 <HAL_ADC_Start+0x11c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a29      	ldr	r2, [pc, #164]	; (80031d8 <HAL_ADC_Start+0x19c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d105      	bne.n	8003142 <HAL_ADC_Start+0x106>
 8003136:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <HAL_ADC_Start+0x194>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a25      	ldr	r2, [pc, #148]	; (80031dc <HAL_ADC_Start+0x1a0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d136      	bne.n	80031ba <HAL_ADC_Start+0x17e>
 800314c:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_ADC_Start+0x194>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	d130      	bne.n	80031ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d129      	bne.n	80031ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	e020      	b.n	80031ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <HAL_ADC_Start+0x198>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d11b      	bne.n	80031ba <HAL_ADC_Start+0x17e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d114      	bne.n	80031ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	e00b      	b.n	80031ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f043 0210 	orr.w	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f043 0201 	orr.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	20000000 	.word	0x20000000
 80031cc:	431bde83 	.word	0x431bde83
 80031d0:	40012300 	.word	0x40012300
 80031d4:	40012000 	.word	0x40012000
 80031d8:	40012100 	.word	0x40012100
 80031dc:	40012200 	.word	0x40012200

080031e0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_Stop+0x16>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e021      	b.n	800323a <HAL_ADC_Stop+0x5a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003262:	d113      	bne.n	800328c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800326e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003272:	d10b      	bne.n	800328c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e063      	b.n	8003354 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800328c:	f7ff fe62 	bl	8002f54 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003292:	e021      	b.n	80032d8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329a:	d01d      	beq.n	80032d8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <HAL_ADC_PollForConversion+0x6c>
 80032a2:	f7ff fe57 	bl	8002f54 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d212      	bcs.n	80032d8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d00b      	beq.n	80032d8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f043 0204 	orr.w	r2, r3, #4
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e03d      	b.n	8003354 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d1d6      	bne.n	8003294 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 0212 	mvn.w	r2, #18
 80032ee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d123      	bne.n	8003352 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800330e:	2b00      	cmp	r3, #0
 8003310:	d11f      	bne.n	8003352 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800331c:	2b00      	cmp	r3, #0
 800331e:	d006      	beq.n	800332e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800332a:	2b00      	cmp	r3, #0
 800332c:	d111      	bne.n	8003352 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x1c>
 8003390:	2302      	movs	r3, #2
 8003392:	e105      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x228>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b09      	cmp	r3, #9
 80033a2:	d925      	bls.n	80033f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68d9      	ldr	r1, [r3, #12]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	3b1e      	subs	r3, #30
 80033ba:	2207      	movs	r2, #7
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43da      	mvns	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	400a      	ands	r2, r1
 80033c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68d9      	ldr	r1, [r3, #12]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	4618      	mov	r0, r3
 80033dc:	4603      	mov	r3, r0
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4403      	add	r3, r0
 80033e2:	3b1e      	subs	r3, #30
 80033e4:	409a      	lsls	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	e022      	b.n	8003436 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6919      	ldr	r1, [r3, #16]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	2207      	movs	r2, #7
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43da      	mvns	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	400a      	ands	r2, r1
 8003412:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6919      	ldr	r1, [r3, #16]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	4618      	mov	r0, r3
 8003426:	4603      	mov	r3, r0
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4403      	add	r3, r0
 800342c:	409a      	lsls	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b06      	cmp	r3, #6
 800343c:	d824      	bhi.n	8003488 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	3b05      	subs	r3, #5
 8003450:	221f      	movs	r2, #31
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	400a      	ands	r2, r1
 800345e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	4618      	mov	r0, r3
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	3b05      	subs	r3, #5
 800347a:	fa00 f203 	lsl.w	r2, r0, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	635a      	str	r2, [r3, #52]	; 0x34
 8003486:	e04c      	b.n	8003522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d824      	bhi.n	80034da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	3b23      	subs	r3, #35	; 0x23
 80034a2:	221f      	movs	r2, #31
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43da      	mvns	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	400a      	ands	r2, r1
 80034b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	4618      	mov	r0, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	3b23      	subs	r3, #35	; 0x23
 80034cc:	fa00 f203 	lsl.w	r2, r0, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
 80034d8:	e023      	b.n	8003522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	3b41      	subs	r3, #65	; 0x41
 80034ec:	221f      	movs	r2, #31
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	400a      	ands	r2, r1
 80034fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	4618      	mov	r0, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	3b41      	subs	r3, #65	; 0x41
 8003516:	fa00 f203 	lsl.w	r2, r0, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003522:	4b22      	ldr	r3, [pc, #136]	; (80035ac <HAL_ADC_ConfigChannel+0x234>)
 8003524:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a21      	ldr	r2, [pc, #132]	; (80035b0 <HAL_ADC_ConfigChannel+0x238>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d109      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x1cc>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b12      	cmp	r3, #18
 8003536:	d105      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_ADC_ConfigChannel+0x238>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d123      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x21e>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b10      	cmp	r3, #16
 8003554:	d003      	beq.n	800355e <HAL_ADC_ConfigChannel+0x1e6>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b11      	cmp	r3, #17
 800355c:	d11b      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b10      	cmp	r3, #16
 8003570:	d111      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <HAL_ADC_ConfigChannel+0x23c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a10      	ldr	r2, [pc, #64]	; (80035b8 <HAL_ADC_ConfigChannel+0x240>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	0c9a      	lsrs	r2, r3, #18
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003588:	e002      	b.n	8003590 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3b01      	subs	r3, #1
 800358e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f9      	bne.n	800358a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40012300 	.word	0x40012300
 80035b0:	40012000 	.word	0x40012000
 80035b4:	20000000 	.word	0x20000000
 80035b8:	431bde83 	.word	0x431bde83

080035bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035c4:	4b79      	ldr	r3, [pc, #484]	; (80037ac <ADC_Init+0x1f0>)
 80035c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	021a      	lsls	r2, r3, #8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6899      	ldr	r1, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	4a58      	ldr	r2, [pc, #352]	; (80037b0 <ADC_Init+0x1f4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003662:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6899      	ldr	r1, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6899      	ldr	r1, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	e00f      	b.n	80036ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0202 	bic.w	r2, r2, #2
 80036c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6899      	ldr	r1, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	7e1b      	ldrb	r3, [r3, #24]
 80036d4:	005a      	lsls	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01b      	beq.n	8003720 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003706:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	3b01      	subs	r3, #1
 8003714:	035a      	lsls	r2, r3, #13
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	e007      	b.n	8003730 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800372e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	3b01      	subs	r3, #1
 800374c:	051a      	lsls	r2, r3, #20
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6899      	ldr	r1, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003772:	025a      	lsls	r2, r3, #9
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6899      	ldr	r1, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	029a      	lsls	r2, r3, #10
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	40012300 	.word	0x40012300
 80037b0:	0f000001 	.word	0x0f000001

080037b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <__NVIC_SetPriorityGrouping+0x44>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d0:	4013      	ands	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037e6:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <__NVIC_SetPriorityGrouping+0x44>)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	60d3      	str	r3, [r2, #12]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <__NVIC_GetPriorityGrouping+0x18>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	f003 0307 	and.w	r3, r3, #7
}
 800380a:	4618      	mov	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	2b00      	cmp	r3, #0
 8003828:	db0b      	blt.n	8003842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	f003 021f 	and.w	r2, r3, #31
 8003830:	4907      	ldr	r1, [pc, #28]	; (8003850 <__NVIC_EnableIRQ+0x38>)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	2001      	movs	r0, #1
 800383a:	fa00 f202 	lsl.w	r2, r0, r2
 800383e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	e000e100 	.word	0xe000e100

08003854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	6039      	str	r1, [r7, #0]
 800385e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	2b00      	cmp	r3, #0
 8003866:	db0a      	blt.n	800387e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	490c      	ldr	r1, [pc, #48]	; (80038a0 <__NVIC_SetPriority+0x4c>)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	0112      	lsls	r2, r2, #4
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	440b      	add	r3, r1
 8003878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800387c:	e00a      	b.n	8003894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4908      	ldr	r1, [pc, #32]	; (80038a4 <__NVIC_SetPriority+0x50>)
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	3b04      	subs	r3, #4
 800388c:	0112      	lsls	r2, r2, #4
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	440b      	add	r3, r1
 8003892:	761a      	strb	r2, [r3, #24]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000e100 	.word	0xe000e100
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	; 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f1c3 0307 	rsb	r3, r3, #7
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	bf28      	it	cs
 80038c6:	2304      	movcs	r3, #4
 80038c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3304      	adds	r3, #4
 80038ce:	2b06      	cmp	r3, #6
 80038d0:	d902      	bls.n	80038d8 <NVIC_EncodePriority+0x30>
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3b03      	subs	r3, #3
 80038d6:	e000      	b.n	80038da <NVIC_EncodePriority+0x32>
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038dc:	f04f 32ff 	mov.w	r2, #4294967295
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43da      	mvns	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	401a      	ands	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f0:	f04f 31ff 	mov.w	r1, #4294967295
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	fa01 f303 	lsl.w	r3, r1, r3
 80038fa:	43d9      	mvns	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003900:	4313      	orrs	r3, r2
         );
}
 8003902:	4618      	mov	r0, r3
 8003904:	3724      	adds	r7, #36	; 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003920:	d301      	bcc.n	8003926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003922:	2301      	movs	r3, #1
 8003924:	e00f      	b.n	8003946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003926:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <SysTick_Config+0x40>)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800392e:	210f      	movs	r1, #15
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	f7ff ff8e 	bl	8003854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <SysTick_Config+0x40>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <SysTick_Config+0x40>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	e000e010 	.word	0xe000e010

08003954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff29 	bl	80037b4 <__NVIC_SetPriorityGrouping>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800396a:	b580      	push	{r7, lr}
 800396c:	b086      	sub	sp, #24
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800397c:	f7ff ff3e 	bl	80037fc <__NVIC_GetPriorityGrouping>
 8003980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f7ff ff8e 	bl	80038a8 <NVIC_EncodePriority>
 800398c:	4602      	mov	r2, r0
 800398e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff5d 	bl	8003854 <__NVIC_SetPriority>
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	4603      	mov	r3, r0
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff31 	bl	8003818 <__NVIC_EnableIRQ>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff ffa2 	bl	8003910 <SysTick_Config>
 80039cc:	4603      	mov	r3, r0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039e4:	f7ff fab6 	bl	8002f54 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e099      	b.n	8003b28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0201 	bic.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a14:	e00f      	b.n	8003a36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a16:	f7ff fa9d 	bl	8002f54 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d908      	bls.n	8003a36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e078      	b.n	8003b28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e8      	bne.n	8003a16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4b38      	ldr	r3, [pc, #224]	; (8003b30 <HAL_DMA_Init+0x158>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d107      	bne.n	8003aa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0307 	bic.w	r3, r3, #7
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d117      	bne.n	8003afa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fb01 	bl	80040e4 <DMA_CheckFifoParam>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2240      	movs	r2, #64	; 0x40
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003af6:	2301      	movs	r3, #1
 8003af8:	e016      	b.n	8003b28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fab8 	bl	8004078 <DMA_CalcBaseAndBitshift>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	223f      	movs	r2, #63	; 0x3f
 8003b12:	409a      	lsls	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	f010803f 	.word	0xf010803f

08003b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_DMA_Start_IT+0x26>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e040      	b.n	8003bdc <HAL_DMA_Start_IT+0xa8>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d12f      	bne.n	8003bce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fa4a 	bl	800401c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	223f      	movs	r2, #63	; 0x3f
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0216 	orr.w	r2, r2, #22
 8003ba2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0208 	orr.w	r2, r2, #8
 8003bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e005      	b.n	8003bda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bf2:	f7ff f9af 	bl	8002f54 <HAL_GetTick>
 8003bf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d008      	beq.n	8003c16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e052      	b.n	8003cbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0216 	bic.w	r2, r2, #22
 8003c24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <HAL_DMA_Abort+0x62>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0208 	bic.w	r2, r2, #8
 8003c54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c66:	e013      	b.n	8003c90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c68:	f7ff f974 	bl	8002f54 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d90c      	bls.n	8003c90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2203      	movs	r2, #3
 8003c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e015      	b.n	8003cbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e4      	bne.n	8003c68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	223f      	movs	r2, #63	; 0x3f
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d004      	beq.n	8003ce2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e00c      	b.n	8003cfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2205      	movs	r2, #5
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d14:	4b92      	ldr	r3, [pc, #584]	; (8003f60 <HAL_DMA_IRQHandler+0x258>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a92      	ldr	r2, [pc, #584]	; (8003f64 <HAL_DMA_IRQHandler+0x25c>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	0a9b      	lsrs	r3, r3, #10
 8003d20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d32:	2208      	movs	r2, #8
 8003d34:	409a      	lsls	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01a      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d013      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	2208      	movs	r2, #8
 8003d62:	409a      	lsls	r2, r3
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f043 0201 	orr.w	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	2201      	movs	r2, #1
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d012      	beq.n	8003daa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	2201      	movs	r2, #1
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da2:	f043 0202 	orr.w	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	2204      	movs	r2, #4
 8003db0:	409a      	lsls	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d012      	beq.n	8003de0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	2204      	movs	r2, #4
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	f043 0204 	orr.w	r2, r3, #4
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	2210      	movs	r2, #16
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d043      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d03c      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e02:	2210      	movs	r2, #16
 8003e04:	409a      	lsls	r2, r3
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d018      	beq.n	8003e4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d108      	bne.n	8003e38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d024      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
 8003e36:	e01f      	b.n	8003e78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d01b      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
 8003e48:	e016      	b.n	8003e78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0208 	bic.w	r2, r2, #8
 8003e66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 808e 	beq.w	8003fa6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8086 	beq.w	8003fa6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b05      	cmp	r3, #5
 8003eb0:	d136      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0216 	bic.w	r2, r2, #22
 8003ec0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ed0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0x1da>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0208 	bic.w	r2, r2, #8
 8003ef0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef6:	223f      	movs	r2, #63	; 0x3f
 8003ef8:	409a      	lsls	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d07d      	beq.n	8004012 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
        }
        return;
 8003f1e:	e078      	b.n	8004012 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d01c      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d108      	bne.n	8003f4e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d030      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	4798      	blx	r3
 8003f4c:	e02b      	b.n	8003fa6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d027      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
 8003f5e:	e022      	b.n	8003fa6 <HAL_DMA_IRQHandler+0x29e>
 8003f60:	20000000 	.word	0x20000000
 8003f64:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10f      	bne.n	8003f96 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0210 	bic.w	r2, r2, #16
 8003f84:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d032      	beq.n	8004014 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d022      	beq.n	8004000 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2205      	movs	r2, #5
 8003fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d307      	bcc.n	8003fee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f2      	bne.n	8003fd2 <HAL_DMA_IRQHandler+0x2ca>
 8003fec:	e000      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003fee:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	4798      	blx	r3
 8004010:	e000      	b.n	8004014 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004012:	bf00      	nop
    }
  }
}
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop

0800401c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004038:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b40      	cmp	r3, #64	; 0x40
 8004048:	d108      	bne.n	800405c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800405a:	e007      	b.n	800406c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	60da      	str	r2, [r3, #12]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	3b10      	subs	r3, #16
 8004088:	4a14      	ldr	r2, [pc, #80]	; (80040dc <DMA_CalcBaseAndBitshift+0x64>)
 800408a:	fba2 2303 	umull	r2, r3, r2, r3
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004092:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <DMA_CalcBaseAndBitshift+0x68>)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d909      	bls.n	80040ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ae:	f023 0303 	bic.w	r3, r3, #3
 80040b2:	1d1a      	adds	r2, r3, #4
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	659a      	str	r2, [r3, #88]	; 0x58
 80040b8:	e007      	b.n	80040ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040c2:	f023 0303 	bic.w	r3, r3, #3
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	aaaaaaab 	.word	0xaaaaaaab
 80040e0:	080078f8 	.word	0x080078f8

080040e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11f      	bne.n	800413e <DMA_CheckFifoParam+0x5a>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d856      	bhi.n	80041b2 <DMA_CheckFifoParam+0xce>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <DMA_CheckFifoParam+0x28>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	0800411d 	.word	0x0800411d
 8004110:	0800412f 	.word	0x0800412f
 8004114:	0800411d 	.word	0x0800411d
 8004118:	080041b3 	.word	0x080041b3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d046      	beq.n	80041b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412c:	e043      	b.n	80041b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004136:	d140      	bne.n	80041ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413c:	e03d      	b.n	80041ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004146:	d121      	bne.n	800418c <DMA_CheckFifoParam+0xa8>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d837      	bhi.n	80041be <DMA_CheckFifoParam+0xda>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <DMA_CheckFifoParam+0x70>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004165 	.word	0x08004165
 8004158:	0800416b 	.word	0x0800416b
 800415c:	08004165 	.word	0x08004165
 8004160:	0800417d 	.word	0x0800417d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      break;
 8004168:	e030      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d025      	beq.n	80041c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417a:	e022      	b.n	80041c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004184:	d11f      	bne.n	80041c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800418a:	e01c      	b.n	80041c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d903      	bls.n	800419a <DMA_CheckFifoParam+0xb6>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d003      	beq.n	80041a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004198:	e018      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
      break;
 800419e:	e015      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      break;
 80041b0:	e00b      	b.n	80041ca <DMA_CheckFifoParam+0xe6>
      break;
 80041b2:	bf00      	nop
 80041b4:	e00a      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041b6:	bf00      	nop
 80041b8:	e008      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041ba:	bf00      	nop
 80041bc:	e006      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041be:	bf00      	nop
 80041c0:	e004      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;   
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
    }
  } 
  
  return status; 
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop

080041dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041dc:	b480      	push	{r7}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	e16b      	b.n	80044d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041f8:	2201      	movs	r2, #1
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	4013      	ands	r3, r2
 800420a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	429a      	cmp	r2, r3
 8004212:	f040 815a 	bne.w	80044ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d005      	beq.n	800422e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800422a:	2b02      	cmp	r3, #2
 800422c:	d130      	bne.n	8004290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	2203      	movs	r2, #3
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4313      	orrs	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004264:	2201      	movs	r2, #1
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 0201 	and.w	r2, r3, #1
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	2b03      	cmp	r3, #3
 800429a:	d017      	beq.n	80042cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	2203      	movs	r2, #3
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4013      	ands	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d123      	bne.n	8004320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	08da      	lsrs	r2, r3, #3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3208      	adds	r2, #8
 80042e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	220f      	movs	r2, #15
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	08da      	lsrs	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3208      	adds	r2, #8
 800431a:	69b9      	ldr	r1, [r7, #24]
 800431c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	2203      	movs	r2, #3
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0203 	and.w	r2, r3, #3
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80b4 	beq.w	80044ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	4b60      	ldr	r3, [pc, #384]	; (80044e8 <HAL_GPIO_Init+0x30c>)
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	4a5f      	ldr	r2, [pc, #380]	; (80044e8 <HAL_GPIO_Init+0x30c>)
 800436c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004370:	6453      	str	r3, [r2, #68]	; 0x44
 8004372:	4b5d      	ldr	r3, [pc, #372]	; (80044e8 <HAL_GPIO_Init+0x30c>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800437e:	4a5b      	ldr	r2, [pc, #364]	; (80044ec <HAL_GPIO_Init+0x310>)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	089b      	lsrs	r3, r3, #2
 8004384:	3302      	adds	r3, #2
 8004386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	220f      	movs	r2, #15
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4013      	ands	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a52      	ldr	r2, [pc, #328]	; (80044f0 <HAL_GPIO_Init+0x314>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d02b      	beq.n	8004402 <HAL_GPIO_Init+0x226>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a51      	ldr	r2, [pc, #324]	; (80044f4 <HAL_GPIO_Init+0x318>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d025      	beq.n	80043fe <HAL_GPIO_Init+0x222>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a50      	ldr	r2, [pc, #320]	; (80044f8 <HAL_GPIO_Init+0x31c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01f      	beq.n	80043fa <HAL_GPIO_Init+0x21e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a4f      	ldr	r2, [pc, #316]	; (80044fc <HAL_GPIO_Init+0x320>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d019      	beq.n	80043f6 <HAL_GPIO_Init+0x21a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a4e      	ldr	r2, [pc, #312]	; (8004500 <HAL_GPIO_Init+0x324>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <HAL_GPIO_Init+0x216>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a4d      	ldr	r2, [pc, #308]	; (8004504 <HAL_GPIO_Init+0x328>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00d      	beq.n	80043ee <HAL_GPIO_Init+0x212>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a4c      	ldr	r2, [pc, #304]	; (8004508 <HAL_GPIO_Init+0x32c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d007      	beq.n	80043ea <HAL_GPIO_Init+0x20e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a4b      	ldr	r2, [pc, #300]	; (800450c <HAL_GPIO_Init+0x330>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d101      	bne.n	80043e6 <HAL_GPIO_Init+0x20a>
 80043e2:	2307      	movs	r3, #7
 80043e4:	e00e      	b.n	8004404 <HAL_GPIO_Init+0x228>
 80043e6:	2308      	movs	r3, #8
 80043e8:	e00c      	b.n	8004404 <HAL_GPIO_Init+0x228>
 80043ea:	2306      	movs	r3, #6
 80043ec:	e00a      	b.n	8004404 <HAL_GPIO_Init+0x228>
 80043ee:	2305      	movs	r3, #5
 80043f0:	e008      	b.n	8004404 <HAL_GPIO_Init+0x228>
 80043f2:	2304      	movs	r3, #4
 80043f4:	e006      	b.n	8004404 <HAL_GPIO_Init+0x228>
 80043f6:	2303      	movs	r3, #3
 80043f8:	e004      	b.n	8004404 <HAL_GPIO_Init+0x228>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e002      	b.n	8004404 <HAL_GPIO_Init+0x228>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <HAL_GPIO_Init+0x228>
 8004402:	2300      	movs	r3, #0
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	f002 0203 	and.w	r2, r2, #3
 800440a:	0092      	lsls	r2, r2, #2
 800440c:	4093      	lsls	r3, r2
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004414:	4935      	ldr	r1, [pc, #212]	; (80044ec <HAL_GPIO_Init+0x310>)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	089b      	lsrs	r3, r3, #2
 800441a:	3302      	adds	r3, #2
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004422:	4b3b      	ldr	r3, [pc, #236]	; (8004510 <HAL_GPIO_Init+0x334>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004446:	4a32      	ldr	r2, [pc, #200]	; (8004510 <HAL_GPIO_Init+0x334>)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800444c:	4b30      	ldr	r3, [pc, #192]	; (8004510 <HAL_GPIO_Init+0x334>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004470:	4a27      	ldr	r2, [pc, #156]	; (8004510 <HAL_GPIO_Init+0x334>)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004476:	4b26      	ldr	r3, [pc, #152]	; (8004510 <HAL_GPIO_Init+0x334>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	43db      	mvns	r3, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4013      	ands	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800449a:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <HAL_GPIO_Init+0x334>)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_GPIO_Init+0x334>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4013      	ands	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044c4:	4a12      	ldr	r2, [pc, #72]	; (8004510 <HAL_GPIO_Init+0x334>)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3301      	adds	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2b0f      	cmp	r3, #15
 80044d4:	f67f ae90 	bls.w	80041f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	3724      	adds	r7, #36	; 0x24
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40013800 	.word	0x40013800
 80044f0:	40020000 	.word	0x40020000
 80044f4:	40020400 	.word	0x40020400
 80044f8:	40020800 	.word	0x40020800
 80044fc:	40020c00 	.word	0x40020c00
 8004500:	40021000 	.word	0x40021000
 8004504:	40021400 	.word	0x40021400
 8004508:	40021800 	.word	0x40021800
 800450c:	40021c00 	.word	0x40021c00
 8004510:	40013c00 	.word	0x40013c00

08004514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
 8004530:	e001      	b.n	8004536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004536:	7bfb      	ldrb	r3, [r7, #15]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
 8004550:	4613      	mov	r3, r2
 8004552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004554:	787b      	ldrb	r3, [r7, #1]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004560:	e003      	b.n	800456a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004562:	887b      	ldrh	r3, [r7, #2]
 8004564:	041a      	lsls	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	619a      	str	r2, [r3, #24]
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004588:	887a      	ldrh	r2, [r7, #2]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4013      	ands	r3, r2
 800458e:	041a      	lsls	r2, r3, #16
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	43d9      	mvns	r1, r3
 8004594:	887b      	ldrh	r3, [r7, #2]
 8004596:	400b      	ands	r3, r1
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	619a      	str	r2, [r3, #24]
}
 800459e:	bf00      	nop
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e264      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d075      	beq.n	80046b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ca:	4ba3      	ldr	r3, [pc, #652]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d00c      	beq.n	80045f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045d6:	4ba0      	ldr	r3, [pc, #640]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d112      	bne.n	8004608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045e2:	4b9d      	ldr	r3, [pc, #628]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ee:	d10b      	bne.n	8004608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f0:	4b99      	ldr	r3, [pc, #612]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d05b      	beq.n	80046b4 <HAL_RCC_OscConfig+0x108>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d157      	bne.n	80046b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e23f      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d106      	bne.n	8004620 <HAL_RCC_OscConfig+0x74>
 8004612:	4b91      	ldr	r3, [pc, #580]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a90      	ldr	r2, [pc, #576]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	e01d      	b.n	800465c <HAL_RCC_OscConfig+0xb0>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x98>
 800462a:	4b8b      	ldr	r3, [pc, #556]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a8a      	ldr	r2, [pc, #552]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b88      	ldr	r3, [pc, #544]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a87      	ldr	r2, [pc, #540]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e00b      	b.n	800465c <HAL_RCC_OscConfig+0xb0>
 8004644:	4b84      	ldr	r3, [pc, #528]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a83      	ldr	r2, [pc, #524]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800464a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4b81      	ldr	r3, [pc, #516]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a80      	ldr	r2, [pc, #512]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800465a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d013      	beq.n	800468c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fe fc76 	bl	8002f54 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800466c:	f7fe fc72 	bl	8002f54 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e204      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	4b76      	ldr	r3, [pc, #472]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0xc0>
 800468a:	e014      	b.n	80046b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fe fc62 	bl	8002f54 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004694:	f7fe fc5e 	bl	8002f54 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	; 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e1f0      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046a6:	4b6c      	ldr	r3, [pc, #432]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0xe8>
 80046b2:	e000      	b.n	80046b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d063      	beq.n	800478a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046c2:	4b65      	ldr	r3, [pc, #404]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ce:	4b62      	ldr	r3, [pc, #392]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d11c      	bne.n	8004714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046da:	4b5f      	ldr	r3, [pc, #380]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d116      	bne.n	8004714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e6:	4b5c      	ldr	r3, [pc, #368]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_RCC_OscConfig+0x152>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e1c4      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fe:	4b56      	ldr	r3, [pc, #344]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4952      	ldr	r1, [pc, #328]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004712:	e03a      	b.n	800478a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d020      	beq.n	800475e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800471c:	4b4f      	ldr	r3, [pc, #316]	; (800485c <HAL_RCC_OscConfig+0x2b0>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004722:	f7fe fc17 	bl	8002f54 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800472a:	f7fe fc13 	bl	8002f54 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e1a5      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473c:	4b46      	ldr	r3, [pc, #280]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004748:	4b43      	ldr	r3, [pc, #268]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4940      	ldr	r1, [pc, #256]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
 800475c:	e015      	b.n	800478a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800475e:	4b3f      	ldr	r3, [pc, #252]	; (800485c <HAL_RCC_OscConfig+0x2b0>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fe fbf6 	bl	8002f54 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476c:	f7fe fbf2 	bl	8002f54 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e184      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800477e:	4b36      	ldr	r3, [pc, #216]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d030      	beq.n	80047f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800479e:	4b30      	ldr	r3, [pc, #192]	; (8004860 <HAL_RCC_OscConfig+0x2b4>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a4:	f7fe fbd6 	bl	8002f54 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ac:	f7fe fbd2 	bl	8002f54 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e164      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047be:	4b26      	ldr	r3, [pc, #152]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x200>
 80047ca:	e015      	b.n	80047f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047cc:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_OscConfig+0x2b4>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d2:	f7fe fbbf 	bl	8002f54 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047da:	f7fe fbbb 	bl	8002f54 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e14d      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ec:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 80047ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 80a0 	beq.w	8004946 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004806:	2300      	movs	r3, #0
 8004808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480a:	4b13      	ldr	r3, [pc, #76]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10f      	bne.n	8004836 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	4a0e      	ldr	r2, [pc, #56]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004824:	6413      	str	r3, [r2, #64]	; 0x40
 8004826:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <HAL_RCC_OscConfig+0x2ac>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004832:	2301      	movs	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCC_OscConfig+0x2b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d121      	bne.n	8004886 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004842:	4b08      	ldr	r3, [pc, #32]	; (8004864 <HAL_RCC_OscConfig+0x2b8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a07      	ldr	r2, [pc, #28]	; (8004864 <HAL_RCC_OscConfig+0x2b8>)
 8004848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800484e:	f7fe fb81 	bl	8002f54 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004854:	e011      	b.n	800487a <HAL_RCC_OscConfig+0x2ce>
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800
 800485c:	42470000 	.word	0x42470000
 8004860:	42470e80 	.word	0x42470e80
 8004864:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004868:	f7fe fb74 	bl	8002f54 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e106      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	4b85      	ldr	r3, [pc, #532]	; (8004a90 <HAL_RCC_OscConfig+0x4e4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d106      	bne.n	800489c <HAL_RCC_OscConfig+0x2f0>
 800488e:	4b81      	ldr	r3, [pc, #516]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	4a80      	ldr	r2, [pc, #512]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6713      	str	r3, [r2, #112]	; 0x70
 800489a:	e01c      	b.n	80048d6 <HAL_RCC_OscConfig+0x32a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d10c      	bne.n	80048be <HAL_RCC_OscConfig+0x312>
 80048a4:	4b7b      	ldr	r3, [pc, #492]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a8:	4a7a      	ldr	r2, [pc, #488]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048aa:	f043 0304 	orr.w	r3, r3, #4
 80048ae:	6713      	str	r3, [r2, #112]	; 0x70
 80048b0:	4b78      	ldr	r3, [pc, #480]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	4a77      	ldr	r2, [pc, #476]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6713      	str	r3, [r2, #112]	; 0x70
 80048bc:	e00b      	b.n	80048d6 <HAL_RCC_OscConfig+0x32a>
 80048be:	4b75      	ldr	r3, [pc, #468]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	4a74      	ldr	r2, [pc, #464]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	6713      	str	r3, [r2, #112]	; 0x70
 80048ca:	4b72      	ldr	r3, [pc, #456]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ce:	4a71      	ldr	r2, [pc, #452]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048d0:	f023 0304 	bic.w	r3, r3, #4
 80048d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d015      	beq.n	800490a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fe fb39 	bl	8002f54 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	e00a      	b.n	80048fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fe fb35 	bl	8002f54 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0c5      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fc:	4b65      	ldr	r3, [pc, #404]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ee      	beq.n	80048e6 <HAL_RCC_OscConfig+0x33a>
 8004908:	e014      	b.n	8004934 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490a:	f7fe fb23 	bl	8002f54 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004910:	e00a      	b.n	8004928 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004912:	f7fe fb1f 	bl	8002f54 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e0af      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004928:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ee      	bne.n	8004912 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d105      	bne.n	8004946 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493a:	4b56      	ldr	r3, [pc, #344]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a55      	ldr	r2, [pc, #340]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 809b 	beq.w	8004a86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004950:	4b50      	ldr	r3, [pc, #320]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d05c      	beq.n	8004a16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d141      	bne.n	80049e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004964:	4b4c      	ldr	r3, [pc, #304]	; (8004a98 <HAL_RCC_OscConfig+0x4ec>)
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496a:	f7fe faf3 	bl	8002f54 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004972:	f7fe faef 	bl	8002f54 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e081      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004984:	4b43      	ldr	r3, [pc, #268]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f0      	bne.n	8004972 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	019b      	lsls	r3, r3, #6
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	3b01      	subs	r3, #1
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	061b      	lsls	r3, r3, #24
 80049b4:	4937      	ldr	r1, [pc, #220]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ba:	4b37      	ldr	r3, [pc, #220]	; (8004a98 <HAL_RCC_OscConfig+0x4ec>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fe fac8 	bl	8002f54 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fe fac4 	bl	8002f54 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e056      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049da:	4b2e      	ldr	r3, [pc, #184]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0x41c>
 80049e6:	e04e      	b.n	8004a86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e8:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <HAL_RCC_OscConfig+0x4ec>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7fe fab1 	bl	8002f54 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f6:	f7fe faad 	bl	8002f54 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e03f      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a08:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f0      	bne.n	80049f6 <HAL_RCC_OscConfig+0x44a>
 8004a14:	e037      	b.n	8004a86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e032      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <HAL_RCC_OscConfig+0x4e8>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d028      	beq.n	8004a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d121      	bne.n	8004a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d11a      	bne.n	8004a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a52:	4013      	ands	r3, r2
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d111      	bne.n	8004a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	085b      	lsrs	r3, r3, #1
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d107      	bne.n	8004a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d001      	beq.n	8004a86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40007000 	.word	0x40007000
 8004a94:	40023800 	.word	0x40023800
 8004a98:	42470060 	.word	0x42470060

08004a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0cc      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b68      	ldr	r3, [pc, #416]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d90c      	bls.n	8004ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b65      	ldr	r3, [pc, #404]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	4b63      	ldr	r3, [pc, #396]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0b8      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d020      	beq.n	8004b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af0:	4b59      	ldr	r3, [pc, #356]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4a58      	ldr	r2, [pc, #352]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b08:	4b53      	ldr	r3, [pc, #332]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	4a52      	ldr	r2, [pc, #328]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b14:	4b50      	ldr	r3, [pc, #320]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	494d      	ldr	r1, [pc, #308]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d044      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d107      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	4b47      	ldr	r3, [pc, #284]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d119      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e07f      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d003      	beq.n	8004b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d107      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5a:	4b3f      	ldr	r3, [pc, #252]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e06f      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6a:	4b3b      	ldr	r3, [pc, #236]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e067      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b7a:	4b37      	ldr	r3, [pc, #220]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 0203 	bic.w	r2, r3, #3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4934      	ldr	r1, [pc, #208]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b8c:	f7fe f9e2 	bl	8002f54 <HAL_GetTick>
 8004b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b92:	e00a      	b.n	8004baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b94:	f7fe f9de 	bl	8002f54 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e04f      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	4b2b      	ldr	r3, [pc, #172]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 020c 	and.w	r2, r3, #12
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d1eb      	bne.n	8004b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d20c      	bcs.n	8004be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b22      	ldr	r3, [pc, #136]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	b2d2      	uxtb	r2, r2
 8004bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e032      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf0:	4b19      	ldr	r3, [pc, #100]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	4916      	ldr	r1, [pc, #88]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	490e      	ldr	r1, [pc, #56]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c22:	f000 f821 	bl	8004c68 <HAL_RCC_GetSysClockFreq>
 8004c26:	4602      	mov	r2, r0
 8004c28:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	f003 030f 	and.w	r3, r3, #15
 8004c32:	490a      	ldr	r1, [pc, #40]	; (8004c5c <HAL_RCC_ClockConfig+0x1c0>)
 8004c34:	5ccb      	ldrb	r3, [r1, r3]
 8004c36:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3a:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_RCC_ClockConfig+0x1c8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe f942 	bl	8002ecc <HAL_InitTick>

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40023c00 	.word	0x40023c00
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	080078e0 	.word	0x080078e0
 8004c60:	20000000 	.word	0x20000000
 8004c64:	20000004 	.word	0x20000004

08004c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c80:	4b67      	ldr	r3, [pc, #412]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 030c 	and.w	r3, r3, #12
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d00d      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	f200 80bd 	bhi.w	8004e0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_RCC_GetSysClockFreq+0x34>
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c9a:	e0b7      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c9c:	4b61      	ldr	r3, [pc, #388]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c9e:	60bb      	str	r3, [r7, #8]
       break;
 8004ca0:	e0b7      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ca2:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ca4:	60bb      	str	r3, [r7, #8]
      break;
 8004ca6:	e0b4      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca8:	4b5d      	ldr	r3, [pc, #372]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb2:	4b5b      	ldr	r3, [pc, #364]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d04d      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cbe:	4b58      	ldr	r3, [pc, #352]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	099b      	lsrs	r3, r3, #6
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	ea02 0800 	and.w	r8, r2, r0
 8004cd6:	ea03 0901 	and.w	r9, r3, r1
 8004cda:	4640      	mov	r0, r8
 8004cdc:	4649      	mov	r1, r9
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	014b      	lsls	r3, r1, #5
 8004ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cec:	0142      	lsls	r2, r0, #5
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	ebb0 0008 	subs.w	r0, r0, r8
 8004cf6:	eb61 0109 	sbc.w	r1, r1, r9
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	018b      	lsls	r3, r1, #6
 8004d04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d08:	0182      	lsls	r2, r0, #6
 8004d0a:	1a12      	subs	r2, r2, r0
 8004d0c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d10:	f04f 0000 	mov.w	r0, #0
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	00d9      	lsls	r1, r3, #3
 8004d1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d1e:	00d0      	lsls	r0, r2, #3
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	eb12 0208 	adds.w	r2, r2, r8
 8004d28:	eb43 0309 	adc.w	r3, r3, r9
 8004d2c:	f04f 0000 	mov.w	r0, #0
 8004d30:	f04f 0100 	mov.w	r1, #0
 8004d34:	0259      	lsls	r1, r3, #9
 8004d36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d3a:	0250      	lsls	r0, r2, #9
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	461a      	mov	r2, r3
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	f7fb fe5a 	bl	8000a04 <__aeabi_uldivmod>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4613      	mov	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	e04a      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5a:	4b31      	ldr	r3, [pc, #196]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	099b      	lsrs	r3, r3, #6
 8004d60:	461a      	mov	r2, r3
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d6a:	f04f 0100 	mov.w	r1, #0
 8004d6e:	ea02 0400 	and.w	r4, r2, r0
 8004d72:	ea03 0501 	and.w	r5, r3, r1
 8004d76:	4620      	mov	r0, r4
 8004d78:	4629      	mov	r1, r5
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	014b      	lsls	r3, r1, #5
 8004d84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d88:	0142      	lsls	r2, r0, #5
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	1b00      	subs	r0, r0, r4
 8004d90:	eb61 0105 	sbc.w	r1, r1, r5
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	018b      	lsls	r3, r1, #6
 8004d9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004da2:	0182      	lsls	r2, r0, #6
 8004da4:	1a12      	subs	r2, r2, r0
 8004da6:	eb63 0301 	sbc.w	r3, r3, r1
 8004daa:	f04f 0000 	mov.w	r0, #0
 8004dae:	f04f 0100 	mov.w	r1, #0
 8004db2:	00d9      	lsls	r1, r3, #3
 8004db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004db8:	00d0      	lsls	r0, r2, #3
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	1912      	adds	r2, r2, r4
 8004dc0:	eb45 0303 	adc.w	r3, r5, r3
 8004dc4:	f04f 0000 	mov.w	r0, #0
 8004dc8:	f04f 0100 	mov.w	r1, #0
 8004dcc:	0299      	lsls	r1, r3, #10
 8004dce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004dd2:	0290      	lsls	r0, r2, #10
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	f7fb fe0e 	bl	8000a04 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4613      	mov	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	60bb      	str	r3, [r7, #8]
      break;
 8004e0a:	e002      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e0e:	60bb      	str	r3, [r7, #8]
      break;
 8004e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e12:	68bb      	ldr	r3, [r7, #8]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	007a1200 	.word	0x007a1200

08004e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000000 	.word	0x20000000

08004e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e48:	f7ff fff0 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0a9b      	lsrs	r3, r3, #10
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4903      	ldr	r1, [pc, #12]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	080078f0 	.word	0x080078f0

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e70:	f7ff ffdc 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0b5b      	lsrs	r3, r3, #13
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4903      	ldr	r1, [pc, #12]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	080078f0 	.word	0x080078f0

08004e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e07b      	b.n	8004f9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d108      	bne.n	8004ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb6:	d009      	beq.n	8004ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	61da      	str	r2, [r3, #28]
 8004ebe:	e005      	b.n	8004ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fd fa28 	bl	800233c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	ea42 0103 	orr.w	r1, r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	f003 0104 	and.w	r1, r3, #4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	f003 0210 	and.w	r2, r3, #16
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b088      	sub	sp, #32
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_SPI_Transmit+0x22>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e126      	b.n	8005216 <HAL_SPI_Transmit+0x270>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fd0:	f7fd ffc0 	bl	8002f54 <HAL_GetTick>
 8004fd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004fd6:	88fb      	ldrh	r3, [r7, #6]
 8004fd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d002      	beq.n	8004fec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fea:	e10b      	b.n	8005204 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <HAL_SPI_Transmit+0x52>
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ffc:	e102      	b.n	8005204 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2203      	movs	r2, #3
 8005002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	88fa      	ldrh	r2, [r7, #6]
 8005016:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	88fa      	ldrh	r2, [r7, #6]
 800501c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005044:	d10f      	bne.n	8005066 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005064:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	d007      	beq.n	8005084 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800508c:	d14b      	bne.n	8005126 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SPI_Transmit+0xf6>
 8005096:	8afb      	ldrh	r3, [r7, #22]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d13e      	bne.n	800511a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	881a      	ldrh	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	1c9a      	adds	r2, r3, #2
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050c0:	e02b      	b.n	800511a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d112      	bne.n	80050f6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	881a      	ldrh	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	86da      	strh	r2, [r3, #54]	; 0x36
 80050f4:	e011      	b.n	800511a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050f6:	f7fd ff2d 	bl	8002f54 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d803      	bhi.n	800510e <HAL_SPI_Transmit+0x168>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d102      	bne.n	8005114 <HAL_SPI_Transmit+0x16e>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005118:	e074      	b.n	8005204 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ce      	bne.n	80050c2 <HAL_SPI_Transmit+0x11c>
 8005124:	e04c      	b.n	80051c0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_SPI_Transmit+0x18e>
 800512e:	8afb      	ldrh	r3, [r7, #22]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d140      	bne.n	80051b6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	330c      	adds	r3, #12
 800513e:	7812      	ldrb	r2, [r2, #0]
 8005140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800515a:	e02c      	b.n	80051b6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b02      	cmp	r3, #2
 8005168:	d113      	bne.n	8005192 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005190:	e011      	b.n	80051b6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005192:	f7fd fedf 	bl	8002f54 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d803      	bhi.n	80051aa <HAL_SPI_Transmit+0x204>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a8:	d102      	bne.n	80051b0 <HAL_SPI_Transmit+0x20a>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051b4:	e026      	b.n	8005204 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1cd      	bne.n	800515c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	6839      	ldr	r1, [r7, #0]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fbcb 	bl	8005960 <SPI_EndRxTxTransaction>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	77fb      	strb	r3, [r7, #31]
 8005200:	e000      	b.n	8005204 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005202:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005214:	7ffb      	ldrb	r3, [r7, #31]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b088      	sub	sp, #32
 8005222:	af02      	add	r7, sp, #8
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523a:	d112      	bne.n	8005262 <HAL_SPI_Receive+0x44>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10e      	bne.n	8005262 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2204      	movs	r2, #4
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800524c:	88fa      	ldrh	r2, [r7, #6]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f8f1 	bl	8005440 <HAL_SPI_TransmitReceive>
 800525e:	4603      	mov	r3, r0
 8005260:	e0ea      	b.n	8005438 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_SPI_Receive+0x52>
 800526c:	2302      	movs	r3, #2
 800526e:	e0e3      	b.n	8005438 <HAL_SPI_Receive+0x21a>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005278:	f7fd fe6c 	bl	8002f54 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b01      	cmp	r3, #1
 8005288:	d002      	beq.n	8005290 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800528a:	2302      	movs	r3, #2
 800528c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800528e:	e0ca      	b.n	8005426 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_SPI_Receive+0x7e>
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d102      	bne.n	80052a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052a0:	e0c1      	b.n	8005426 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2204      	movs	r2, #4
 80052a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	88fa      	ldrh	r2, [r7, #6]
 80052ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	88fa      	ldrh	r2, [r7, #6]
 80052c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e8:	d10f      	bne.n	800530a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005308:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d007      	beq.n	8005328 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005326:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d162      	bne.n	80053f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005330:	e02e      	b.n	8005390 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b01      	cmp	r3, #1
 800533e:	d115      	bne.n	800536c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f103 020c 	add.w	r2, r3, #12
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	7812      	ldrb	r2, [r2, #0]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	87da      	strh	r2, [r3, #62]	; 0x3e
 800536a:	e011      	b.n	8005390 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800536c:	f7fd fdf2 	bl	8002f54 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d803      	bhi.n	8005384 <HAL_SPI_Receive+0x166>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005382:	d102      	bne.n	800538a <HAL_SPI_Receive+0x16c>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800538e:	e04a      	b.n	8005426 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1cb      	bne.n	8005332 <HAL_SPI_Receive+0x114>
 800539a:	e031      	b.n	8005400 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d113      	bne.n	80053d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	b292      	uxth	r2, r2
 80053b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	1c9a      	adds	r2, r3, #2
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053d0:	e011      	b.n	80053f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053d2:	f7fd fdbf 	bl	8002f54 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d803      	bhi.n	80053ea <HAL_SPI_Receive+0x1cc>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d102      	bne.n	80053f0 <HAL_SPI_Receive+0x1d2>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053f4:	e017      	b.n	8005426 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1cd      	bne.n	800539c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	6839      	ldr	r1, [r7, #0]
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fa45 	bl	8005894 <SPI_EndRxTransaction>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	75fb      	strb	r3, [r7, #23]
 8005422:	e000      	b.n	8005426 <HAL_SPI_Receive+0x208>
  }

error :
 8005424:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005436:	7dfb      	ldrb	r3, [r7, #23]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08c      	sub	sp, #48	; 0x30
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800544e:	2301      	movs	r3, #1
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x26>
 8005462:	2302      	movs	r3, #2
 8005464:	e18a      	b.n	800577c <HAL_SPI_TransmitReceive+0x33c>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800546e:	f7fd fd71 	bl	8002f54 <HAL_GetTick>
 8005472:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005484:	887b      	ldrh	r3, [r7, #2]
 8005486:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800548c:	2b01      	cmp	r3, #1
 800548e:	d00f      	beq.n	80054b0 <HAL_SPI_TransmitReceive+0x70>
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005496:	d107      	bne.n	80054a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d103      	bne.n	80054a8 <HAL_SPI_TransmitReceive+0x68>
 80054a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d003      	beq.n	80054b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054a8:	2302      	movs	r3, #2
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054ae:	e15b      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x82>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x82>
 80054bc:	887b      	ldrh	r3, [r7, #2]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d103      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054c8:	e14e      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d003      	beq.n	80054de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2205      	movs	r2, #5
 80054da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	887a      	ldrh	r2, [r7, #2]
 80054ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	887a      	ldrh	r2, [r7, #2]
 80054f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	887a      	ldrh	r2, [r7, #2]
 8005500:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	887a      	ldrh	r2, [r7, #2]
 8005506:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b40      	cmp	r3, #64	; 0x40
 8005520:	d007      	beq.n	8005532 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005530:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553a:	d178      	bne.n	800562e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_SPI_TransmitReceive+0x10a>
 8005544:	8b7b      	ldrh	r3, [r7, #26]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d166      	bne.n	8005618 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	881a      	ldrh	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	1c9a      	adds	r2, r3, #2
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800556e:	e053      	b.n	8005618 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b02      	cmp	r3, #2
 800557c:	d11b      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x176>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d016      	beq.n	80055b6 <HAL_SPI_TransmitReceive+0x176>
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d113      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	881a      	ldrh	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	1c9a      	adds	r2, r3, #2
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d119      	bne.n	80055f8 <HAL_SPI_TransmitReceive+0x1b8>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d014      	beq.n	80055f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	b292      	uxth	r2, r2
 80055da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	1c9a      	adds	r2, r3, #2
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055f4:	2301      	movs	r3, #1
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055f8:	f7fd fcac 	bl	8002f54 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005604:	429a      	cmp	r2, r3
 8005606:	d807      	bhi.n	8005618 <HAL_SPI_TransmitReceive+0x1d8>
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d003      	beq.n	8005618 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005616:	e0a7      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1a6      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x130>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1a1      	bne.n	8005570 <HAL_SPI_TransmitReceive+0x130>
 800562c:	e07c      	b.n	8005728 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_SPI_TransmitReceive+0x1fc>
 8005636:	8b7b      	ldrh	r3, [r7, #26]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d16b      	bne.n	8005714 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	7812      	ldrb	r2, [r2, #0]
 8005648:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005662:	e057      	b.n	8005714 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b02      	cmp	r3, #2
 8005670:	d11c      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x26c>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d017      	beq.n	80056ac <HAL_SPI_TransmitReceive+0x26c>
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d114      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	7812      	ldrb	r2, [r2, #0]
 800568e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d119      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x2ae>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d014      	beq.n	80056ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056ea:	2301      	movs	r3, #1
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056ee:	f7fd fc31 	bl	8002f54 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d803      	bhi.n	8005706 <HAL_SPI_TransmitReceive+0x2c6>
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d102      	bne.n	800570c <HAL_SPI_TransmitReceive+0x2cc>
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	2b00      	cmp	r3, #0
 800570a:	d103      	bne.n	8005714 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005712:	e029      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1a2      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x224>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d19d      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f917 	bl	8005960 <SPI_EndRxTxTransaction>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d006      	beq.n	8005746 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005744:	e010      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	e000      	b.n	8005768 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005766:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005778:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800577c:	4618      	mov	r0, r3
 800577e:	3730      	adds	r7, #48	; 0x30
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	4613      	mov	r3, r2
 8005792:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005794:	f7fd fbde 	bl	8002f54 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	4413      	add	r3, r2
 80057a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057a4:	f7fd fbd6 	bl	8002f54 <HAL_GetTick>
 80057a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057aa:	4b39      	ldr	r3, [pc, #228]	; (8005890 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	015b      	lsls	r3, r3, #5
 80057b0:	0d1b      	lsrs	r3, r3, #20
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	fb02 f303 	mul.w	r3, r2, r3
 80057b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057ba:	e054      	b.n	8005866 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d050      	beq.n	8005866 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057c4:	f7fd fbc6 	bl	8002f54 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d902      	bls.n	80057da <SPI_WaitFlagStateUntilTimeout+0x56>
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d13d      	bne.n	8005856 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f2:	d111      	bne.n	8005818 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fc:	d004      	beq.n	8005808 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005806:	d107      	bne.n	8005818 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005816:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005820:	d10f      	bne.n	8005842 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005840:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e017      	b.n	8005886 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	3b01      	subs	r3, #1
 8005864:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4013      	ands	r3, r2
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	429a      	cmp	r2, r3
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2300      	movne	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	429a      	cmp	r2, r3
 8005882:	d19b      	bne.n	80057bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000000 	.word	0x20000000

08005894 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a8:	d111      	bne.n	80058ce <SPI_EndRxTransaction+0x3a>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b2:	d004      	beq.n	80058be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d107      	bne.n	80058ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d6:	d12a      	bne.n	800592e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e0:	d012      	beq.n	8005908 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2200      	movs	r2, #0
 80058ea:	2180      	movs	r1, #128	; 0x80
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7ff ff49 	bl	8005784 <SPI_WaitFlagStateUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d02d      	beq.n	8005954 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fc:	f043 0220 	orr.w	r2, r3, #32
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e026      	b.n	8005956 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	2101      	movs	r1, #1
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7ff ff36 	bl	8005784 <SPI_WaitFlagStateUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d01a      	beq.n	8005954 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005922:	f043 0220 	orr.w	r2, r3, #32
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e013      	b.n	8005956 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2200      	movs	r2, #0
 8005936:	2101      	movs	r1, #1
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff ff23 	bl	8005784 <SPI_WaitFlagStateUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	f043 0220 	orr.w	r2, r3, #32
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e000      	b.n	8005956 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <SPI_EndRxTxTransaction+0x7c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1b      	ldr	r2, [pc, #108]	; (80059e0 <SPI_EndRxTxTransaction+0x80>)
 8005972:	fba2 2303 	umull	r2, r3, r2, r3
 8005976:	0d5b      	lsrs	r3, r3, #21
 8005978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800597c:	fb02 f303 	mul.w	r3, r2, r3
 8005980:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800598a:	d112      	bne.n	80059b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2200      	movs	r2, #0
 8005994:	2180      	movs	r1, #128	; 0x80
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff fef4 	bl	8005784 <SPI_WaitFlagStateUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d016      	beq.n	80059d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e00f      	b.n	80059d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d0f2      	beq.n	80059b2 <SPI_EndRxTxTransaction+0x52>
 80059cc:	e000      	b.n	80059d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80059ce:	bf00      	nop
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000000 	.word	0x20000000
 80059e0:	165e9f81 	.word	0x165e9f81

080059e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e041      	b.n	8005a7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fc fed4 	bl	80027b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4610      	mov	r0, r2
 8005a24:	f000 fa10 	bl	8005e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e041      	b.n	8005b18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d106      	bne.n	8005aae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f839 	bl	8005b20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3304      	adds	r3, #4
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	f000 f9c1 	bl	8005e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e0ae      	b.n	8005cb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b0c      	cmp	r3, #12
 8005b5e:	f200 809f 	bhi.w	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b9d 	.word	0x08005b9d
 8005b6c:	08005ca1 	.word	0x08005ca1
 8005b70:	08005ca1 	.word	0x08005ca1
 8005b74:	08005ca1 	.word	0x08005ca1
 8005b78:	08005bdd 	.word	0x08005bdd
 8005b7c:	08005ca1 	.word	0x08005ca1
 8005b80:	08005ca1 	.word	0x08005ca1
 8005b84:	08005ca1 	.word	0x08005ca1
 8005b88:	08005c1f 	.word	0x08005c1f
 8005b8c:	08005ca1 	.word	0x08005ca1
 8005b90:	08005ca1 	.word	0x08005ca1
 8005b94:	08005ca1 	.word	0x08005ca1
 8005b98:	08005c5f 	.word	0x08005c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f9f0 	bl	8005f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0208 	orr.w	r2, r2, #8
 8005bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0204 	bic.w	r2, r2, #4
 8005bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6999      	ldr	r1, [r3, #24]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	619a      	str	r2, [r3, #24]
      break;
 8005bda:	e064      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fa40 	bl	8006068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6999      	ldr	r1, [r3, #24]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	021a      	lsls	r2, r3, #8
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	619a      	str	r2, [r3, #24]
      break;
 8005c1c:	e043      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fa95 	bl	8006154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0208 	orr.w	r2, r2, #8
 8005c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0204 	bic.w	r2, r2, #4
 8005c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69d9      	ldr	r1, [r3, #28]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	61da      	str	r2, [r3, #28]
      break;
 8005c5c:	e023      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fae9 	bl	800623c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69d9      	ldr	r1, [r3, #28]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	021a      	lsls	r2, r3, #8
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	61da      	str	r2, [r3, #28]
      break;
 8005c9e:	e002      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e0b4      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x186>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d0c:	d03e      	beq.n	8005d8c <HAL_TIM_ConfigClockSource+0xd4>
 8005d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d12:	f200 8087 	bhi.w	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1a:	f000 8086 	beq.w	8005e2a <HAL_TIM_ConfigClockSource+0x172>
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d22:	d87f      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d24:	2b70      	cmp	r3, #112	; 0x70
 8005d26:	d01a      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0xa6>
 8005d28:	2b70      	cmp	r3, #112	; 0x70
 8005d2a:	d87b      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d2c:	2b60      	cmp	r3, #96	; 0x60
 8005d2e:	d050      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x11a>
 8005d30:	2b60      	cmp	r3, #96	; 0x60
 8005d32:	d877      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d34:	2b50      	cmp	r3, #80	; 0x50
 8005d36:	d03c      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0xfa>
 8005d38:	2b50      	cmp	r3, #80	; 0x50
 8005d3a:	d873      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d3c:	2b40      	cmp	r3, #64	; 0x40
 8005d3e:	d058      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0x13a>
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d86f      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d44:	2b30      	cmp	r3, #48	; 0x30
 8005d46:	d064      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0x15a>
 8005d48:	2b30      	cmp	r3, #48	; 0x30
 8005d4a:	d86b      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d060      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0x15a>
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d867      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05c      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0x15a>
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d05a      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0x15a>
 8005d5c:	e062      	b.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6899      	ldr	r1, [r3, #8]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f000 fb35 	bl	80063dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	609a      	str	r2, [r3, #8]
      break;
 8005d8a:	e04f      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	6899      	ldr	r1, [r3, #8]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f000 fb1e 	bl	80063dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dae:	609a      	str	r2, [r3, #8]
      break;
 8005db0:	e03c      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6859      	ldr	r1, [r3, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f000 fa92 	bl	80062e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2150      	movs	r1, #80	; 0x50
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 faeb 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005dd0:	e02c      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	6859      	ldr	r1, [r3, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	461a      	mov	r2, r3
 8005de0:	f000 fab1 	bl	8006346 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2160      	movs	r1, #96	; 0x60
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fadb 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005df0:	e01c      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6859      	ldr	r1, [r3, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f000 fa72 	bl	80062e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2140      	movs	r1, #64	; 0x40
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 facb 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005e10:	e00c      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	f000 fac2 	bl	80063a6 <TIM_ITRx_SetConfig>
      break;
 8005e22:	e003      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
      break;
 8005e28:	e000      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a40      	ldr	r2, [pc, #256]	; (8005f5c <TIM_Base_SetConfig+0x114>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d013      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e66:	d00f      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a3d      	ldr	r2, [pc, #244]	; (8005f60 <TIM_Base_SetConfig+0x118>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00b      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a3c      	ldr	r2, [pc, #240]	; (8005f64 <TIM_Base_SetConfig+0x11c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d007      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a3b      	ldr	r2, [pc, #236]	; (8005f68 <TIM_Base_SetConfig+0x120>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d003      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a3a      	ldr	r2, [pc, #232]	; (8005f6c <TIM_Base_SetConfig+0x124>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d108      	bne.n	8005e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2f      	ldr	r2, [pc, #188]	; (8005f5c <TIM_Base_SetConfig+0x114>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d02b      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea8:	d027      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a2c      	ldr	r2, [pc, #176]	; (8005f60 <TIM_Base_SetConfig+0x118>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d023      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a2b      	ldr	r2, [pc, #172]	; (8005f64 <TIM_Base_SetConfig+0x11c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01f      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a2a      	ldr	r2, [pc, #168]	; (8005f68 <TIM_Base_SetConfig+0x120>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d01b      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a29      	ldr	r2, [pc, #164]	; (8005f6c <TIM_Base_SetConfig+0x124>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d017      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <TIM_Base_SetConfig+0x128>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a27      	ldr	r2, [pc, #156]	; (8005f74 <TIM_Base_SetConfig+0x12c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00f      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a26      	ldr	r2, [pc, #152]	; (8005f78 <TIM_Base_SetConfig+0x130>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00b      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a25      	ldr	r2, [pc, #148]	; (8005f7c <TIM_Base_SetConfig+0x134>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d007      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a24      	ldr	r2, [pc, #144]	; (8005f80 <TIM_Base_SetConfig+0x138>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a23      	ldr	r2, [pc, #140]	; (8005f84 <TIM_Base_SetConfig+0x13c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <TIM_Base_SetConfig+0x114>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_Base_SetConfig+0xf8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a0c      	ldr	r2, [pc, #48]	; (8005f6c <TIM_Base_SetConfig+0x124>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d103      	bne.n	8005f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	615a      	str	r2, [r3, #20]
}
 8005f4e:	bf00      	nop
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40010400 	.word	0x40010400
 8005f70:	40014000 	.word	0x40014000
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800
 8005f7c:	40001800 	.word	0x40001800
 8005f80:	40001c00 	.word	0x40001c00
 8005f84:	40002000 	.word	0x40002000

08005f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	f023 0201 	bic.w	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0303 	bic.w	r3, r3, #3
 8005fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f023 0302 	bic.w	r3, r3, #2
 8005fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a20      	ldr	r2, [pc, #128]	; (8006060 <TIM_OC1_SetConfig+0xd8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_OC1_SetConfig+0x64>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <TIM_OC1_SetConfig+0xdc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d10c      	bne.n	8006006 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f023 0308 	bic.w	r3, r3, #8
 8005ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f023 0304 	bic.w	r3, r3, #4
 8006004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a15      	ldr	r2, [pc, #84]	; (8006060 <TIM_OC1_SetConfig+0xd8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d003      	beq.n	8006016 <TIM_OC1_SetConfig+0x8e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a14      	ldr	r2, [pc, #80]	; (8006064 <TIM_OC1_SetConfig+0xdc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d111      	bne.n	800603a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800601c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	621a      	str	r2, [r3, #32]
}
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	40010000 	.word	0x40010000
 8006064:	40010400 	.word	0x40010400

08006068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	f023 0210 	bic.w	r2, r3, #16
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800609e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	021b      	lsls	r3, r3, #8
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f023 0320 	bic.w	r3, r3, #32
 80060b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a22      	ldr	r2, [pc, #136]	; (800614c <TIM_OC2_SetConfig+0xe4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d003      	beq.n	80060d0 <TIM_OC2_SetConfig+0x68>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a21      	ldr	r2, [pc, #132]	; (8006150 <TIM_OC2_SetConfig+0xe8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d10d      	bne.n	80060ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a17      	ldr	r2, [pc, #92]	; (800614c <TIM_OC2_SetConfig+0xe4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_OC2_SetConfig+0x94>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a16      	ldr	r2, [pc, #88]	; (8006150 <TIM_OC2_SetConfig+0xe8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d113      	bne.n	8006124 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800610a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40010000 	.word	0x40010000
 8006150:	40010400 	.word	0x40010400

08006154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0303 	bic.w	r3, r3, #3
 800618a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800619c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a21      	ldr	r2, [pc, #132]	; (8006234 <TIM_OC3_SetConfig+0xe0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d003      	beq.n	80061ba <TIM_OC3_SetConfig+0x66>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a20      	ldr	r2, [pc, #128]	; (8006238 <TIM_OC3_SetConfig+0xe4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d10d      	bne.n	80061d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a16      	ldr	r2, [pc, #88]	; (8006234 <TIM_OC3_SetConfig+0xe0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_OC3_SetConfig+0x92>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a15      	ldr	r2, [pc, #84]	; (8006238 <TIM_OC3_SetConfig+0xe4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d113      	bne.n	800620e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	621a      	str	r2, [r3, #32]
}
 8006228:	bf00      	nop
 800622a:	371c      	adds	r7, #28
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	40010000 	.word	0x40010000
 8006238:	40010400 	.word	0x40010400

0800623c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	031b      	lsls	r3, r3, #12
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <TIM_OC4_SetConfig+0xa4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_OC4_SetConfig+0x68>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <TIM_OC4_SetConfig+0xa8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d109      	bne.n	80062b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	019b      	lsls	r3, r3, #6
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	621a      	str	r2, [r3, #32]
}
 80062d2:	bf00      	nop
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40010000 	.word	0x40010000
 80062e4:	40010400 	.word	0x40010400

080062e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f023 0201 	bic.w	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f023 030a 	bic.w	r3, r3, #10
 8006324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006346:	b480      	push	{r7}
 8006348:	b087      	sub	sp, #28
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	f023 0210 	bic.w	r2, r3, #16
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	031b      	lsls	r3, r3, #12
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006382:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f043 0307 	orr.w	r3, r3, #7
 80063c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	609a      	str	r2, [r3, #8]
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	021a      	lsls	r2, r3, #8
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	431a      	orrs	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	609a      	str	r2, [r3, #8]
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006430:	2302      	movs	r3, #2
 8006432:	e05a      	b.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a21      	ldr	r2, [pc, #132]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d022      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006480:	d01d      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1d      	ldr	r2, [pc, #116]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d018      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1a      	ldr	r2, [pc, #104]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00e      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a18      	ldr	r2, [pc, #96]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d009      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a17      	ldr	r2, [pc, #92]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a15      	ldr	r2, [pc, #84]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d10c      	bne.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40010000 	.word	0x40010000
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40000c00 	.word	0x40000c00
 8006508:	40010400 	.word	0x40010400
 800650c:	40014000 	.word	0x40014000
 8006510:	40001800 	.word	0x40001800

08006514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800652c:	2302      	movs	r3, #2
 800652e:	e03d      	b.n	80065ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e03f      	b.n	800664a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d106      	bne.n	80065e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7fc faaa 	bl	8002b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2224      	movs	r2, #36	; 0x24
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 ff49 	bl	8007494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695a      	ldr	r2, [r3, #20]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08c      	sub	sp, #48	; 0x30
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b20      	cmp	r3, #32
 800666c:	d165      	bne.n	800673a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_UART_Transmit_DMA+0x26>
 8006674:	88fb      	ldrh	r3, [r7, #6]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e05e      	b.n	800673c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <HAL_UART_Transmit_DMA+0x38>
 8006688:	2302      	movs	r3, #2
 800668a:	e057      	b.n	800673c <HAL_UART_Transmit_DMA+0xe8>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	88fa      	ldrh	r2, [r7, #6]
 800669e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2221      	movs	r2, #33	; 0x21
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b8:	4a22      	ldr	r2, [pc, #136]	; (8006744 <HAL_UART_Transmit_DMA+0xf0>)
 80066ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c0:	4a21      	ldr	r2, [pc, #132]	; (8006748 <HAL_UART_Transmit_DMA+0xf4>)
 80066c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c8:	4a20      	ldr	r2, [pc, #128]	; (800674c <HAL_UART_Transmit_DMA+0xf8>)
 80066ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d0:	2200      	movs	r2, #0
 80066d2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80066d4:	f107 0308 	add.w	r3, r7, #8
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	6819      	ldr	r1, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3304      	adds	r3, #4
 80066e8:	461a      	mov	r2, r3
 80066ea:	88fb      	ldrh	r3, [r7, #6]
 80066ec:	f7fd fa22 	bl	8003b34 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066f8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3314      	adds	r3, #20
 8006708:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	617b      	str	r3, [r7, #20]
   return(result);
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3314      	adds	r3, #20
 8006720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006722:	627a      	str	r2, [r7, #36]	; 0x24
 8006724:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6a39      	ldr	r1, [r7, #32]
 8006728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e5      	bne.n	8006702 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	e000      	b.n	800673c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800673a:	2302      	movs	r3, #2
  }
}
 800673c:	4618      	mov	r0, r3
 800673e:	3730      	adds	r7, #48	; 0x30
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	08006d35 	.word	0x08006d35
 8006748:	08006dcf 	.word	0x08006dcf
 800674c:	08006f47 	.word	0x08006f47

08006750 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b20      	cmp	r3, #32
 8006768:	d11d      	bne.n	80067a6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_UART_Receive_DMA+0x26>
 8006770:	88fb      	ldrh	r3, [r7, #6]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e016      	b.n	80067a8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_UART_Receive_DMA+0x38>
 8006784:	2302      	movs	r3, #2
 8006786:	e00f      	b.n	80067a8 <HAL_UART_Receive_DMA+0x58>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006796:	88fb      	ldrh	r3, [r7, #6]
 8006798:	461a      	mov	r2, r3
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 fc1d 	bl	8006fdc <UART_Start_Receive_DMA>
 80067a2:	4603      	mov	r3, r0
 80067a4:	e000      	b.n	80067a8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80067a6:	2302      	movs	r3, #2
  }
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b0ba      	sub	sp, #232	; 0xe8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80067dc:	2300      	movs	r3, #0
 80067de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80067ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10f      	bne.n	8006816 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <HAL_UART_IRQHandler+0x66>
 8006802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fd85 	bl	800731e <UART_Receive_IT>
      return;
 8006814:	e256      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80de 	beq.w	80069dc <HAL_UART_IRQHandler+0x22c>
 8006820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800682c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006830:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80d1 	beq.w	80069dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <HAL_UART_IRQHandler+0xae>
 8006846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	f043 0201 	orr.w	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006862:	f003 0304 	and.w	r3, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <HAL_UART_IRQHandler+0xd2>
 800686a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	f043 0202 	orr.w	r2, r3, #2
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <HAL_UART_IRQHandler+0xf6>
 800688e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f043 0204 	orr.w	r2, r3, #4
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d011      	beq.n	80068d6 <HAL_UART_IRQHandler+0x126>
 80068b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d105      	bne.n	80068ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f043 0208 	orr.w	r2, r3, #8
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 81ed 	beq.w	8006cba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d008      	beq.n	80068fe <HAL_UART_IRQHandler+0x14e>
 80068ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fd10 	bl	800731e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b40      	cmp	r3, #64	; 0x40
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <HAL_UART_IRQHandler+0x17a>
 8006922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006926:	2b00      	cmp	r3, #0
 8006928:	d04f      	beq.n	80069ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fc18 	bl	8007160 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d141      	bne.n	80069c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006954:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800695c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3314      	adds	r3, #20
 8006966:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800696a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800696e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006976:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1d9      	bne.n	800693e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	2b00      	cmp	r3, #0
 8006990:	d013      	beq.n	80069ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	4a7d      	ldr	r2, [pc, #500]	; (8006b8c <HAL_UART_IRQHandler+0x3dc>)
 8006998:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fd f990 	bl	8003cc4 <HAL_DMA_Abort_IT>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d016      	beq.n	80069d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069b4:	4610      	mov	r0, r2
 80069b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b8:	e00e      	b.n	80069d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f9a4 	bl	8006d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c0:	e00a      	b.n	80069d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f9a0 	bl	8006d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c8:	e006      	b.n	80069d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f99c 	bl	8006d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069d6:	e170      	b.n	8006cba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d8:	bf00      	nop
    return;
 80069da:	e16e      	b.n	8006cba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	f040 814a 	bne.w	8006c7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ea:	f003 0310 	and.w	r3, r3, #16
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 8143 	beq.w	8006c7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 813c 	beq.w	8006c7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a02:	2300      	movs	r3, #0
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60bb      	str	r3, [r7, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b40      	cmp	r3, #64	; 0x40
 8006a24:	f040 80b4 	bne.w	8006b90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8140 	beq.w	8006cbe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a46:	429a      	cmp	r2, r3
 8006a48:	f080 8139 	bcs.w	8006cbe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a5e:	f000 8088 	beq.w	8006b72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	330c      	adds	r3, #12
 8006a68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1d9      	bne.n	8006a62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3314      	adds	r3, #20
 8006ab4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ac0:	f023 0301 	bic.w	r3, r3, #1
 8006ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3314      	adds	r3, #20
 8006ace:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ad2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ad6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ada:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e1      	bne.n	8006aae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3314      	adds	r3, #20
 8006af0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3314      	adds	r3, #20
 8006b0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1e3      	bne.n	8006aea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	330c      	adds	r3, #12
 8006b36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b42:	f023 0310 	bic.w	r3, r3, #16
 8006b46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b54:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e3      	bne.n	8006b30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fd f839 	bl	8003be4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4619      	mov	r1, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f8ca 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b88:	e099      	b.n	8006cbe <HAL_UART_IRQHandler+0x50e>
 8006b8a:	bf00      	nop
 8006b8c:	08007227 	.word	0x08007227
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 808b 	beq.w	8006cc2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006bac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8086 	beq.w	8006cc2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	330c      	adds	r3, #12
 8006bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bda:	647a      	str	r2, [r7, #68]	; 0x44
 8006bdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006be0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e3      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3314      	adds	r3, #20
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	623b      	str	r3, [r7, #32]
   return(result);
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	f023 0301 	bic.w	r3, r3, #1
 8006c04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3314      	adds	r3, #20
 8006c0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c12:	633a      	str	r2, [r7, #48]	; 0x30
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e3      	bne.n	8006bee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0310 	bic.w	r3, r3, #16
 8006c4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	330c      	adds	r3, #12
 8006c54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c58:	61fa      	str	r2, [r7, #28]
 8006c5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	69b9      	ldr	r1, [r7, #24]
 8006c5e:	69fa      	ldr	r2, [r7, #28]
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	617b      	str	r3, [r7, #20]
   return(result);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e3      	bne.n	8006c34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f852 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c78:	e023      	b.n	8006cc2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <HAL_UART_IRQHandler+0x4ea>
 8006c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fadb 	bl	800724e <UART_Transmit_IT>
    return;
 8006c98:	e014      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x514>
 8006ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fb1b 	bl	80072ee <UART_EndTransmit_IT>
    return;
 8006cb8:	e004      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
    return;
 8006cba:	bf00      	nop
 8006cbc:	e002      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
      return;
 8006cbe:	bf00      	nop
 8006cc0:	e000      	b.n	8006cc4 <HAL_UART_IRQHandler+0x514>
      return;
 8006cc2:	bf00      	nop
  }
}
 8006cc4:	37e8      	adds	r7, #232	; 0xe8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop

08006ccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b090      	sub	sp, #64	; 0x40
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d137      	bne.n	8006dc0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d52:	2200      	movs	r2, #0
 8006d54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3314      	adds	r3, #20
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	623b      	str	r3, [r7, #32]
   return(result);
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3314      	adds	r3, #20
 8006d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d76:	633a      	str	r2, [r7, #48]	; 0x30
 8006d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e5      	bne.n	8006d56 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	330c      	adds	r3, #12
 8006d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
 8006da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	330c      	adds	r3, #12
 8006da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006daa:	61fa      	str	r2, [r7, #28]
 8006dac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	69b9      	ldr	r1, [r7, #24]
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	617b      	str	r3, [r7, #20]
   return(result);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e5      	bne.n	8006d8a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dbe:	e002      	b.n	8006dc6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006dc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006dc2:	f7ff ff83 	bl	8006ccc <HAL_UART_TxCpltCallback>
}
 8006dc6:	bf00      	nop
 8006dc8:	3740      	adds	r7, #64	; 0x40
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff ff7f 	bl	8006ce0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b09c      	sub	sp, #112	; 0x70
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d172      	bne.n	8006eec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e08:	2200      	movs	r2, #0
 8006e0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	330c      	adds	r3, #12
 8006e12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e22:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	330c      	adds	r3, #12
 8006e2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e5      	bne.n	8006e0c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3314      	adds	r3, #20
 8006e46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e52:	f023 0301 	bic.w	r3, r3, #1
 8006e56:	667b      	str	r3, [r7, #100]	; 0x64
 8006e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3314      	adds	r3, #20
 8006e5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e60:	647a      	str	r2, [r7, #68]	; 0x44
 8006e62:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e68:	e841 2300 	strex	r3, r2, [r1]
 8006e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e5      	bne.n	8006e40 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3314      	adds	r3, #20
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	623b      	str	r3, [r7, #32]
   return(result);
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8006e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3314      	adds	r3, #20
 8006e92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e94:	633a      	str	r2, [r7, #48]	; 0x30
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e5      	bne.n	8006e74 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d119      	bne.n	8006eec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0310 	bic.w	r3, r3, #16
 8006ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ed8:	61fa      	str	r2, [r7, #28]
 8006eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	69b9      	ldr	r1, [r7, #24]
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e5      	bne.n	8006eb8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d106      	bne.n	8006f02 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006efc:	f7ff ff0e 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f00:	e002      	b.n	8006f08 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006f02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f04:	f7fa fb6a 	bl	80015dc <HAL_UART_RxCpltCallback>
}
 8006f08:	bf00      	nop
 8006f0a:	3770      	adds	r7, #112	; 0x70
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d108      	bne.n	8006f38 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	4619      	mov	r1, r3
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7ff fef3 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f36:	e002      	b.n	8006f3e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7ff fedb 	bl	8006cf4 <HAL_UART_RxHalfCpltCallback>
}
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f62:	2b80      	cmp	r3, #128	; 0x80
 8006f64:	bf0c      	ite	eq
 8006f66:	2301      	moveq	r3, #1
 8006f68:	2300      	movne	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b21      	cmp	r3, #33	; 0x21
 8006f78:	d108      	bne.n	8006f8c <UART_DMAError+0x46>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d005      	beq.n	8006f8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2200      	movs	r2, #0
 8006f84:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006f86:	68b8      	ldr	r0, [r7, #8]
 8006f88:	f000 f8c2 	bl	8007110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	bf0c      	ite	eq
 8006f9a:	2301      	moveq	r3, #1
 8006f9c:	2300      	movne	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b22      	cmp	r3, #34	; 0x22
 8006fac:	d108      	bne.n	8006fc0 <UART_DMAError+0x7a>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006fba:	68b8      	ldr	r0, [r7, #8]
 8006fbc:	f000 f8d0 	bl	8007160 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	f043 0210 	orr.w	r2, r3, #16
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fcc:	68b8      	ldr	r0, [r7, #8]
 8006fce:	f7ff fe9b 	bl	8006d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd2:	bf00      	nop
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b098      	sub	sp, #96	; 0x60
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2222      	movs	r2, #34	; 0x22
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	4a3e      	ldr	r2, [pc, #248]	; (8007104 <UART_Start_Receive_DMA+0x128>)
 800700a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	4a3d      	ldr	r2, [pc, #244]	; (8007108 <UART_Start_Receive_DMA+0x12c>)
 8007012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	4a3c      	ldr	r2, [pc, #240]	; (800710c <UART_Start_Receive_DMA+0x130>)
 800701a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	2200      	movs	r2, #0
 8007022:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007024:	f107 0308 	add.w	r3, r7, #8
 8007028:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3304      	adds	r3, #4
 8007034:	4619      	mov	r1, r3
 8007036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	f7fc fd7a 	bl	8003b34 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007040:	2300      	movs	r3, #0
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	330c      	adds	r3, #12
 8007064:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007068:	e853 3f00 	ldrex	r3, [r3]
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800706e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007074:	65bb      	str	r3, [r7, #88]	; 0x58
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800707e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007080:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007082:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007084:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800708c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e5      	bne.n	800705e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3314      	adds	r3, #20
 8007098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	f043 0301 	orr.w	r3, r3, #1
 80070a8:	657b      	str	r3, [r7, #84]	; 0x54
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3314      	adds	r3, #20
 80070b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1e5      	bne.n	8007092 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3314      	adds	r3, #20
 80070cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	e853 3f00 	ldrex	r3, [r3]
 80070d4:	617b      	str	r3, [r7, #20]
   return(result);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070dc:	653b      	str	r3, [r7, #80]	; 0x50
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	3314      	adds	r3, #20
 80070e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070e6:	627a      	str	r2, [r7, #36]	; 0x24
 80070e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6a39      	ldr	r1, [r7, #32]
 80070ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e5      	bne.n	80070c6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3760      	adds	r7, #96	; 0x60
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	08006deb 	.word	0x08006deb
 8007108:	08006f11 	.word	0x08006f11
 800710c:	08006f47 	.word	0x08006f47

08007110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007110:	b480      	push	{r7}
 8007112:	b089      	sub	sp, #36	; 0x24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	330c      	adds	r3, #12
 800711e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	60bb      	str	r3, [r7, #8]
   return(result);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800712e:	61fb      	str	r3, [r7, #28]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	61ba      	str	r2, [r7, #24]
 800713a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6979      	ldr	r1, [r7, #20]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	613b      	str	r3, [r7, #16]
   return(result);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e5      	bne.n	8007118 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007154:	bf00      	nop
 8007156:	3724      	adds	r7, #36	; 0x24
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b095      	sub	sp, #84	; 0x54
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	330c      	adds	r3, #12
 800716e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800717e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	330c      	adds	r3, #12
 8007186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007188:	643a      	str	r2, [r7, #64]	; 0x40
 800718a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800718e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e5      	bne.n	8007168 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3314      	adds	r3, #20
 80071a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3314      	adds	r3, #20
 80071ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e5      	bne.n	800719c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d119      	bne.n	800720c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	330c      	adds	r3, #12
 80071de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f023 0310 	bic.w	r3, r3, #16
 80071ee:	647b      	str	r3, [r7, #68]	; 0x44
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	330c      	adds	r3, #12
 80071f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071f8:	61ba      	str	r2, [r7, #24]
 80071fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6979      	ldr	r1, [r7, #20]
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	613b      	str	r3, [r7, #16]
   return(result);
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e5      	bne.n	80071d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	631a      	str	r2, [r3, #48]	; 0x30
}
 800721a:	bf00      	nop
 800721c:	3754      	adds	r7, #84	; 0x54
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fd61 	bl	8006d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b21      	cmp	r3, #33	; 0x21
 8007260:	d13e      	bne.n	80072e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726a:	d114      	bne.n	8007296 <UART_Transmit_IT+0x48>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d110      	bne.n	8007296 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007288:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	1c9a      	adds	r2, r3, #2
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	621a      	str	r2, [r3, #32]
 8007294:	e008      	b.n	80072a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	1c59      	adds	r1, r3, #1
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6211      	str	r1, [r2, #32]
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4619      	mov	r1, r3
 80072b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10f      	bne.n	80072dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	e000      	b.n	80072e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007304:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff fcdc 	bl	8006ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b08c      	sub	sp, #48	; 0x30
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b22      	cmp	r3, #34	; 0x22
 8007330:	f040 80ab 	bne.w	800748a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733c:	d117      	bne.n	800736e <UART_Receive_IT+0x50>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d113      	bne.n	800736e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	b29b      	uxth	r3, r3
 8007358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735c:	b29a      	uxth	r2, r3
 800735e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007360:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	1c9a      	adds	r2, r3, #2
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	629a      	str	r2, [r3, #40]	; 0x28
 800736c:	e026      	b.n	80073bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007374:	2300      	movs	r3, #0
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007380:	d007      	beq.n	8007392 <UART_Receive_IT+0x74>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <UART_Receive_IT+0x82>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d106      	bne.n	80073a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	b2da      	uxtb	r2, r3
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	e008      	b.n	80073b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	4619      	mov	r1, r3
 80073ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d15a      	bne.n	8007486 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0220 	bic.w	r2, r2, #32
 80073de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	695a      	ldr	r2, [r3, #20]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	2b01      	cmp	r3, #1
 800740e:	d135      	bne.n	800747c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	613b      	str	r3, [r7, #16]
   return(result);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f023 0310 	bic.w	r3, r3, #16
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	330c      	adds	r3, #12
 8007434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007436:	623a      	str	r2, [r7, #32]
 8007438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	69f9      	ldr	r1, [r7, #28]
 800743c:	6a3a      	ldr	r2, [r7, #32]
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	61bb      	str	r3, [r7, #24]
   return(result);
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e5      	bne.n	8007416 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b10      	cmp	r3, #16
 8007456:	d10a      	bne.n	800746e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fc51 	bl	8006d1c <HAL_UARTEx_RxEventCallback>
 800747a:	e002      	b.n	8007482 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fa f8ad 	bl	80015dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	e002      	b.n	800748c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	e000      	b.n	800748c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800748a:	2302      	movs	r3, #2
  }
}
 800748c:	4618      	mov	r0, r3
 800748e:	3730      	adds	r7, #48	; 0x30
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007498:	b09f      	sub	sp, #124	; 0x7c
 800749a:	af00      	add	r7, sp, #0
 800749c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800749e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074aa:	68d9      	ldr	r1, [r3, #12]
 80074ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	ea40 0301 	orr.w	r3, r0, r1
 80074b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	431a      	orrs	r2, r3
 80074c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	431a      	orrs	r2, r3
 80074c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80074ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074d8:	f021 010c 	bic.w	r1, r1, #12
 80074dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074e2:	430b      	orrs	r3, r1
 80074e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f2:	6999      	ldr	r1, [r3, #24]
 80074f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	ea40 0301 	orr.w	r3, r0, r1
 80074fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4bc5      	ldr	r3, [pc, #788]	; (8007818 <UART_SetConfig+0x384>)
 8007504:	429a      	cmp	r2, r3
 8007506:	d004      	beq.n	8007512 <UART_SetConfig+0x7e>
 8007508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	4bc3      	ldr	r3, [pc, #780]	; (800781c <UART_SetConfig+0x388>)
 800750e:	429a      	cmp	r2, r3
 8007510:	d103      	bne.n	800751a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007512:	f7fd fcab 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8007516:	6778      	str	r0, [r7, #116]	; 0x74
 8007518:	e002      	b.n	8007520 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800751a:	f7fd fc93 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 800751e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007528:	f040 80b6 	bne.w	8007698 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800752c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800752e:	461c      	mov	r4, r3
 8007530:	f04f 0500 	mov.w	r5, #0
 8007534:	4622      	mov	r2, r4
 8007536:	462b      	mov	r3, r5
 8007538:	1891      	adds	r1, r2, r2
 800753a:	6439      	str	r1, [r7, #64]	; 0x40
 800753c:	415b      	adcs	r3, r3
 800753e:	647b      	str	r3, [r7, #68]	; 0x44
 8007540:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007544:	1912      	adds	r2, r2, r4
 8007546:	eb45 0303 	adc.w	r3, r5, r3
 800754a:	f04f 0000 	mov.w	r0, #0
 800754e:	f04f 0100 	mov.w	r1, #0
 8007552:	00d9      	lsls	r1, r3, #3
 8007554:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007558:	00d0      	lsls	r0, r2, #3
 800755a:	4602      	mov	r2, r0
 800755c:	460b      	mov	r3, r1
 800755e:	1911      	adds	r1, r2, r4
 8007560:	6639      	str	r1, [r7, #96]	; 0x60
 8007562:	416b      	adcs	r3, r5
 8007564:	667b      	str	r3, [r7, #100]	; 0x64
 8007566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	461a      	mov	r2, r3
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	1891      	adds	r1, r2, r2
 8007572:	63b9      	str	r1, [r7, #56]	; 0x38
 8007574:	415b      	adcs	r3, r3
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007578:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800757c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007580:	f7f9 fa40 	bl	8000a04 <__aeabi_uldivmod>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4ba5      	ldr	r3, [pc, #660]	; (8007820 <UART_SetConfig+0x38c>)
 800758a:	fba3 2302 	umull	r2, r3, r3, r2
 800758e:	095b      	lsrs	r3, r3, #5
 8007590:	011e      	lsls	r6, r3, #4
 8007592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007594:	461c      	mov	r4, r3
 8007596:	f04f 0500 	mov.w	r5, #0
 800759a:	4622      	mov	r2, r4
 800759c:	462b      	mov	r3, r5
 800759e:	1891      	adds	r1, r2, r2
 80075a0:	6339      	str	r1, [r7, #48]	; 0x30
 80075a2:	415b      	adcs	r3, r3
 80075a4:	637b      	str	r3, [r7, #52]	; 0x34
 80075a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075aa:	1912      	adds	r2, r2, r4
 80075ac:	eb45 0303 	adc.w	r3, r5, r3
 80075b0:	f04f 0000 	mov.w	r0, #0
 80075b4:	f04f 0100 	mov.w	r1, #0
 80075b8:	00d9      	lsls	r1, r3, #3
 80075ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075be:	00d0      	lsls	r0, r2, #3
 80075c0:	4602      	mov	r2, r0
 80075c2:	460b      	mov	r3, r1
 80075c4:	1911      	adds	r1, r2, r4
 80075c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80075c8:	416b      	adcs	r3, r5
 80075ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	461a      	mov	r2, r3
 80075d2:	f04f 0300 	mov.w	r3, #0
 80075d6:	1891      	adds	r1, r2, r2
 80075d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80075da:	415b      	adcs	r3, r3
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80075e6:	f7f9 fa0d 	bl	8000a04 <__aeabi_uldivmod>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4b8c      	ldr	r3, [pc, #560]	; (8007820 <UART_SetConfig+0x38c>)
 80075f0:	fba3 1302 	umull	r1, r3, r3, r2
 80075f4:	095b      	lsrs	r3, r3, #5
 80075f6:	2164      	movs	r1, #100	; 0x64
 80075f8:	fb01 f303 	mul.w	r3, r1, r3
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	3332      	adds	r3, #50	; 0x32
 8007602:	4a87      	ldr	r2, [pc, #540]	; (8007820 <UART_SetConfig+0x38c>)
 8007604:	fba2 2303 	umull	r2, r3, r2, r3
 8007608:	095b      	lsrs	r3, r3, #5
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007610:	441e      	add	r6, r3
 8007612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007614:	4618      	mov	r0, r3
 8007616:	f04f 0100 	mov.w	r1, #0
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	1894      	adds	r4, r2, r2
 8007620:	623c      	str	r4, [r7, #32]
 8007622:	415b      	adcs	r3, r3
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
 8007626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800762a:	1812      	adds	r2, r2, r0
 800762c:	eb41 0303 	adc.w	r3, r1, r3
 8007630:	f04f 0400 	mov.w	r4, #0
 8007634:	f04f 0500 	mov.w	r5, #0
 8007638:	00dd      	lsls	r5, r3, #3
 800763a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800763e:	00d4      	lsls	r4, r2, #3
 8007640:	4622      	mov	r2, r4
 8007642:	462b      	mov	r3, r5
 8007644:	1814      	adds	r4, r2, r0
 8007646:	653c      	str	r4, [r7, #80]	; 0x50
 8007648:	414b      	adcs	r3, r1
 800764a:	657b      	str	r3, [r7, #84]	; 0x54
 800764c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	461a      	mov	r2, r3
 8007652:	f04f 0300 	mov.w	r3, #0
 8007656:	1891      	adds	r1, r2, r2
 8007658:	61b9      	str	r1, [r7, #24]
 800765a:	415b      	adcs	r3, r3
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007662:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007666:	f7f9 f9cd 	bl	8000a04 <__aeabi_uldivmod>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4b6c      	ldr	r3, [pc, #432]	; (8007820 <UART_SetConfig+0x38c>)
 8007670:	fba3 1302 	umull	r1, r3, r3, r2
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	2164      	movs	r1, #100	; 0x64
 8007678:	fb01 f303 	mul.w	r3, r1, r3
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	3332      	adds	r3, #50	; 0x32
 8007682:	4a67      	ldr	r2, [pc, #412]	; (8007820 <UART_SetConfig+0x38c>)
 8007684:	fba2 2303 	umull	r2, r3, r2, r3
 8007688:	095b      	lsrs	r3, r3, #5
 800768a:	f003 0207 	and.w	r2, r3, #7
 800768e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4432      	add	r2, r6
 8007694:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007696:	e0b9      	b.n	800780c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800769a:	461c      	mov	r4, r3
 800769c:	f04f 0500 	mov.w	r5, #0
 80076a0:	4622      	mov	r2, r4
 80076a2:	462b      	mov	r3, r5
 80076a4:	1891      	adds	r1, r2, r2
 80076a6:	6139      	str	r1, [r7, #16]
 80076a8:	415b      	adcs	r3, r3
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076b0:	1912      	adds	r2, r2, r4
 80076b2:	eb45 0303 	adc.w	r3, r5, r3
 80076b6:	f04f 0000 	mov.w	r0, #0
 80076ba:	f04f 0100 	mov.w	r1, #0
 80076be:	00d9      	lsls	r1, r3, #3
 80076c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80076c4:	00d0      	lsls	r0, r2, #3
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	eb12 0804 	adds.w	r8, r2, r4
 80076ce:	eb43 0905 	adc.w	r9, r3, r5
 80076d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f04f 0100 	mov.w	r1, #0
 80076dc:	f04f 0200 	mov.w	r2, #0
 80076e0:	f04f 0300 	mov.w	r3, #0
 80076e4:	008b      	lsls	r3, r1, #2
 80076e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076ea:	0082      	lsls	r2, r0, #2
 80076ec:	4640      	mov	r0, r8
 80076ee:	4649      	mov	r1, r9
 80076f0:	f7f9 f988 	bl	8000a04 <__aeabi_uldivmod>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4b49      	ldr	r3, [pc, #292]	; (8007820 <UART_SetConfig+0x38c>)
 80076fa:	fba3 2302 	umull	r2, r3, r3, r2
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	011e      	lsls	r6, r3, #4
 8007702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007704:	4618      	mov	r0, r3
 8007706:	f04f 0100 	mov.w	r1, #0
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	1894      	adds	r4, r2, r2
 8007710:	60bc      	str	r4, [r7, #8]
 8007712:	415b      	adcs	r3, r3
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800771a:	1812      	adds	r2, r2, r0
 800771c:	eb41 0303 	adc.w	r3, r1, r3
 8007720:	f04f 0400 	mov.w	r4, #0
 8007724:	f04f 0500 	mov.w	r5, #0
 8007728:	00dd      	lsls	r5, r3, #3
 800772a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800772e:	00d4      	lsls	r4, r2, #3
 8007730:	4622      	mov	r2, r4
 8007732:	462b      	mov	r3, r5
 8007734:	1814      	adds	r4, r2, r0
 8007736:	64bc      	str	r4, [r7, #72]	; 0x48
 8007738:	414b      	adcs	r3, r1
 800773a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800773c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	4618      	mov	r0, r3
 8007742:	f04f 0100 	mov.w	r1, #0
 8007746:	f04f 0200 	mov.w	r2, #0
 800774a:	f04f 0300 	mov.w	r3, #0
 800774e:	008b      	lsls	r3, r1, #2
 8007750:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007754:	0082      	lsls	r2, r0, #2
 8007756:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800775a:	f7f9 f953 	bl	8000a04 <__aeabi_uldivmod>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4b2f      	ldr	r3, [pc, #188]	; (8007820 <UART_SetConfig+0x38c>)
 8007764:	fba3 1302 	umull	r1, r3, r3, r2
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	2164      	movs	r1, #100	; 0x64
 800776c:	fb01 f303 	mul.w	r3, r1, r3
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	3332      	adds	r3, #50	; 0x32
 8007776:	4a2a      	ldr	r2, [pc, #168]	; (8007820 <UART_SetConfig+0x38c>)
 8007778:	fba2 2303 	umull	r2, r3, r2, r3
 800777c:	095b      	lsrs	r3, r3, #5
 800777e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007782:	441e      	add	r6, r3
 8007784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007786:	4618      	mov	r0, r3
 8007788:	f04f 0100 	mov.w	r1, #0
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	1894      	adds	r4, r2, r2
 8007792:	603c      	str	r4, [r7, #0]
 8007794:	415b      	adcs	r3, r3
 8007796:	607b      	str	r3, [r7, #4]
 8007798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800779c:	1812      	adds	r2, r2, r0
 800779e:	eb41 0303 	adc.w	r3, r1, r3
 80077a2:	f04f 0400 	mov.w	r4, #0
 80077a6:	f04f 0500 	mov.w	r5, #0
 80077aa:	00dd      	lsls	r5, r3, #3
 80077ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80077b0:	00d4      	lsls	r4, r2, #3
 80077b2:	4622      	mov	r2, r4
 80077b4:	462b      	mov	r3, r5
 80077b6:	eb12 0a00 	adds.w	sl, r2, r0
 80077ba:	eb43 0b01 	adc.w	fp, r3, r1
 80077be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f04f 0100 	mov.w	r1, #0
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	008b      	lsls	r3, r1, #2
 80077d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80077d6:	0082      	lsls	r2, r0, #2
 80077d8:	4650      	mov	r0, sl
 80077da:	4659      	mov	r1, fp
 80077dc:	f7f9 f912 	bl	8000a04 <__aeabi_uldivmod>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4b0e      	ldr	r3, [pc, #56]	; (8007820 <UART_SetConfig+0x38c>)
 80077e6:	fba3 1302 	umull	r1, r3, r3, r2
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	2164      	movs	r1, #100	; 0x64
 80077ee:	fb01 f303 	mul.w	r3, r1, r3
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	3332      	adds	r3, #50	; 0x32
 80077f8:	4a09      	ldr	r2, [pc, #36]	; (8007820 <UART_SetConfig+0x38c>)
 80077fa:	fba2 2303 	umull	r2, r3, r2, r3
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	f003 020f 	and.w	r2, r3, #15
 8007804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4432      	add	r2, r6
 800780a:	609a      	str	r2, [r3, #8]
}
 800780c:	bf00      	nop
 800780e:	377c      	adds	r7, #124	; 0x7c
 8007810:	46bd      	mov	sp, r7
 8007812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007816:	bf00      	nop
 8007818:	40011000 	.word	0x40011000
 800781c:	40011400 	.word	0x40011400
 8007820:	51eb851f 	.word	0x51eb851f

08007824 <roundf>:
 8007824:	ee10 0a10 	vmov	r0, s0
 8007828:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800782c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8007830:	2a16      	cmp	r2, #22
 8007832:	dc15      	bgt.n	8007860 <roundf+0x3c>
 8007834:	2a00      	cmp	r2, #0
 8007836:	da08      	bge.n	800784a <roundf+0x26>
 8007838:	3201      	adds	r2, #1
 800783a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800783e:	d101      	bne.n	8007844 <roundf+0x20>
 8007840:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8007844:	ee00 3a10 	vmov	s0, r3
 8007848:	4770      	bx	lr
 800784a:	4908      	ldr	r1, [pc, #32]	; (800786c <roundf+0x48>)
 800784c:	4111      	asrs	r1, r2
 800784e:	4208      	tst	r0, r1
 8007850:	d0fa      	beq.n	8007848 <roundf+0x24>
 8007852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007856:	4113      	asrs	r3, r2
 8007858:	4403      	add	r3, r0
 800785a:	ea23 0301 	bic.w	r3, r3, r1
 800785e:	e7f1      	b.n	8007844 <roundf+0x20>
 8007860:	2a80      	cmp	r2, #128	; 0x80
 8007862:	d1f1      	bne.n	8007848 <roundf+0x24>
 8007864:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	007fffff 	.word	0x007fffff

08007870 <__libc_init_array>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	4d0d      	ldr	r5, [pc, #52]	; (80078a8 <__libc_init_array+0x38>)
 8007874:	4c0d      	ldr	r4, [pc, #52]	; (80078ac <__libc_init_array+0x3c>)
 8007876:	1b64      	subs	r4, r4, r5
 8007878:	10a4      	asrs	r4, r4, #2
 800787a:	2600      	movs	r6, #0
 800787c:	42a6      	cmp	r6, r4
 800787e:	d109      	bne.n	8007894 <__libc_init_array+0x24>
 8007880:	4d0b      	ldr	r5, [pc, #44]	; (80078b0 <__libc_init_array+0x40>)
 8007882:	4c0c      	ldr	r4, [pc, #48]	; (80078b4 <__libc_init_array+0x44>)
 8007884:	f000 f820 	bl	80078c8 <_init>
 8007888:	1b64      	subs	r4, r4, r5
 800788a:	10a4      	asrs	r4, r4, #2
 800788c:	2600      	movs	r6, #0
 800788e:	42a6      	cmp	r6, r4
 8007890:	d105      	bne.n	800789e <__libc_init_array+0x2e>
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	f855 3b04 	ldr.w	r3, [r5], #4
 8007898:	4798      	blx	r3
 800789a:	3601      	adds	r6, #1
 800789c:	e7ee      	b.n	800787c <__libc_init_array+0xc>
 800789e:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a2:	4798      	blx	r3
 80078a4:	3601      	adds	r6, #1
 80078a6:	e7f2      	b.n	800788e <__libc_init_array+0x1e>
 80078a8:	08007908 	.word	0x08007908
 80078ac:	08007908 	.word	0x08007908
 80078b0:	08007908 	.word	0x08007908
 80078b4:	0800790c 	.word	0x0800790c

080078b8 <memset>:
 80078b8:	4402      	add	r2, r0
 80078ba:	4603      	mov	r3, r0
 80078bc:	4293      	cmp	r3, r2
 80078be:	d100      	bne.n	80078c2 <memset+0xa>
 80078c0:	4770      	bx	lr
 80078c2:	f803 1b01 	strb.w	r1, [r3], #1
 80078c6:	e7f9      	b.n	80078bc <memset+0x4>

080078c8 <_init>:
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	bf00      	nop
 80078cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ce:	bc08      	pop	{r3}
 80078d0:	469e      	mov	lr, r3
 80078d2:	4770      	bx	lr

080078d4 <_fini>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr
