
stm_gyro_stable_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009470  08009470  00019470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094f0  080094f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080094f0  080094f0  000194f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094f8  080094f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094fc  080094fc  000194fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000538  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ac  200005ac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001762a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032aa  00000000  00000000  000376ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  0003a978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010a0  00000000  00000000  0003bb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242f6  00000000  00000000  0003cc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016550  00000000  00000000  00060ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db9e4  00000000  00000000  00077446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00152e2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c60  00000000  00000000  00152e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009458 	.word	0x08009458

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08009458 	.word	0x08009458

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b96e 	b.w	8000b28 <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	4604      	mov	r4, r0
 800086c:	468c      	mov	ip, r1
 800086e:	2b00      	cmp	r3, #0
 8000870:	f040 8083 	bne.w	800097a <__udivmoddi4+0x116>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d947      	bls.n	800090a <__udivmoddi4+0xa6>
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	b142      	cbz	r2, 8000892 <__udivmoddi4+0x2e>
 8000880:	f1c2 0020 	rsb	r0, r2, #32
 8000884:	fa24 f000 	lsr.w	r0, r4, r0
 8000888:	4091      	lsls	r1, r2
 800088a:	4097      	lsls	r7, r2
 800088c:	ea40 0c01 	orr.w	ip, r0, r1
 8000890:	4094      	lsls	r4, r2
 8000892:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000896:	0c23      	lsrs	r3, r4, #16
 8000898:	fbbc f6f8 	udiv	r6, ip, r8
 800089c:	fa1f fe87 	uxth.w	lr, r7
 80008a0:	fb08 c116 	mls	r1, r8, r6, ip
 80008a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a8:	fb06 f10e 	mul.w	r1, r6, lr
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x60>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008b6:	f080 8119 	bcs.w	8000aec <__udivmoddi4+0x288>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 8116 	bls.w	8000aec <__udivmoddi4+0x288>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008cc:	fb08 3310 	mls	r3, r8, r0, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d8:	45a6      	cmp	lr, r4
 80008da:	d909      	bls.n	80008f0 <__udivmoddi4+0x8c>
 80008dc:	193c      	adds	r4, r7, r4
 80008de:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e2:	f080 8105 	bcs.w	8000af0 <__udivmoddi4+0x28c>
 80008e6:	45a6      	cmp	lr, r4
 80008e8:	f240 8102 	bls.w	8000af0 <__udivmoddi4+0x28c>
 80008ec:	3802      	subs	r0, #2
 80008ee:	443c      	add	r4, r7
 80008f0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f4:	eba4 040e 	sub.w	r4, r4, lr
 80008f8:	2600      	movs	r6, #0
 80008fa:	b11d      	cbz	r5, 8000904 <__udivmoddi4+0xa0>
 80008fc:	40d4      	lsrs	r4, r2
 80008fe:	2300      	movs	r3, #0
 8000900:	e9c5 4300 	strd	r4, r3, [r5]
 8000904:	4631      	mov	r1, r6
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	b902      	cbnz	r2, 800090e <__udivmoddi4+0xaa>
 800090c:	deff      	udf	#255	; 0xff
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	2a00      	cmp	r2, #0
 8000914:	d150      	bne.n	80009b8 <__udivmoddi4+0x154>
 8000916:	1bcb      	subs	r3, r1, r7
 8000918:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800091c:	fa1f f887 	uxth.w	r8, r7
 8000920:	2601      	movs	r6, #1
 8000922:	fbb3 fcfe 	udiv	ip, r3, lr
 8000926:	0c21      	lsrs	r1, r4, #16
 8000928:	fb0e 331c 	mls	r3, lr, ip, r3
 800092c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000930:	fb08 f30c 	mul.w	r3, r8, ip
 8000934:	428b      	cmp	r3, r1
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0xe4>
 8000938:	1879      	adds	r1, r7, r1
 800093a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0xe2>
 8000940:	428b      	cmp	r3, r1
 8000942:	f200 80e9 	bhi.w	8000b18 <__udivmoddi4+0x2b4>
 8000946:	4684      	mov	ip, r0
 8000948:	1ac9      	subs	r1, r1, r3
 800094a:	b2a3      	uxth	r3, r4
 800094c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000950:	fb0e 1110 	mls	r1, lr, r0, r1
 8000954:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000958:	fb08 f800 	mul.w	r8, r8, r0
 800095c:	45a0      	cmp	r8, r4
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0x10c>
 8000960:	193c      	adds	r4, r7, r4
 8000962:	f100 33ff 	add.w	r3, r0, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x10a>
 8000968:	45a0      	cmp	r8, r4
 800096a:	f200 80d9 	bhi.w	8000b20 <__udivmoddi4+0x2bc>
 800096e:	4618      	mov	r0, r3
 8000970:	eba4 0408 	sub.w	r4, r4, r8
 8000974:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000978:	e7bf      	b.n	80008fa <__udivmoddi4+0x96>
 800097a:	428b      	cmp	r3, r1
 800097c:	d909      	bls.n	8000992 <__udivmoddi4+0x12e>
 800097e:	2d00      	cmp	r5, #0
 8000980:	f000 80b1 	beq.w	8000ae6 <__udivmoddi4+0x282>
 8000984:	2600      	movs	r6, #0
 8000986:	e9c5 0100 	strd	r0, r1, [r5]
 800098a:	4630      	mov	r0, r6
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	fab3 f683 	clz	r6, r3
 8000996:	2e00      	cmp	r6, #0
 8000998:	d14a      	bne.n	8000a30 <__udivmoddi4+0x1cc>
 800099a:	428b      	cmp	r3, r1
 800099c:	d302      	bcc.n	80009a4 <__udivmoddi4+0x140>
 800099e:	4282      	cmp	r2, r0
 80009a0:	f200 80b8 	bhi.w	8000b14 <__udivmoddi4+0x2b0>
 80009a4:	1a84      	subs	r4, r0, r2
 80009a6:	eb61 0103 	sbc.w	r1, r1, r3
 80009aa:	2001      	movs	r0, #1
 80009ac:	468c      	mov	ip, r1
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d0a8      	beq.n	8000904 <__udivmoddi4+0xa0>
 80009b2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0xa0>
 80009b8:	f1c2 0320 	rsb	r3, r2, #32
 80009bc:	fa20 f603 	lsr.w	r6, r0, r3
 80009c0:	4097      	lsls	r7, r2
 80009c2:	fa01 f002 	lsl.w	r0, r1, r2
 80009c6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ca:	40d9      	lsrs	r1, r3
 80009cc:	4330      	orrs	r0, r6
 80009ce:	0c03      	lsrs	r3, r0, #16
 80009d0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009e0:	fb06 f108 	mul.w	r1, r6, r8
 80009e4:	4299      	cmp	r1, r3
 80009e6:	fa04 f402 	lsl.w	r4, r4, r2
 80009ea:	d909      	bls.n	8000a00 <__udivmoddi4+0x19c>
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	f106 3cff 	add.w	ip, r6, #4294967295
 80009f2:	f080 808d 	bcs.w	8000b10 <__udivmoddi4+0x2ac>
 80009f6:	4299      	cmp	r1, r3
 80009f8:	f240 808a 	bls.w	8000b10 <__udivmoddi4+0x2ac>
 80009fc:	3e02      	subs	r6, #2
 80009fe:	443b      	add	r3, r7
 8000a00:	1a5b      	subs	r3, r3, r1
 8000a02:	b281      	uxth	r1, r0
 8000a04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a10:	fb00 f308 	mul.w	r3, r0, r8
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x1c4>
 8000a18:	1879      	adds	r1, r7, r1
 8000a1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a1e:	d273      	bcs.n	8000b08 <__udivmoddi4+0x2a4>
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d971      	bls.n	8000b08 <__udivmoddi4+0x2a4>
 8000a24:	3802      	subs	r0, #2
 8000a26:	4439      	add	r1, r7
 8000a28:	1acb      	subs	r3, r1, r3
 8000a2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a2e:	e778      	b.n	8000922 <__udivmoddi4+0xbe>
 8000a30:	f1c6 0c20 	rsb	ip, r6, #32
 8000a34:	fa03 f406 	lsl.w	r4, r3, r6
 8000a38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a3c:	431c      	orrs	r4, r3
 8000a3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a42:	fa01 f306 	lsl.w	r3, r1, r6
 8000a46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a4e:	431f      	orrs	r7, r3
 8000a50:	0c3b      	lsrs	r3, r7, #16
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fa1f f884 	uxth.w	r8, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a62:	fb09 fa08 	mul.w	sl, r9, r8
 8000a66:	458a      	cmp	sl, r1
 8000a68:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x220>
 8000a72:	1861      	adds	r1, r4, r1
 8000a74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a78:	d248      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7a:	458a      	cmp	sl, r1
 8000a7c:	d946      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000a7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a82:	4421      	add	r1, r4
 8000a84:	eba1 010a 	sub.w	r1, r1, sl
 8000a88:	b2bf      	uxth	r7, r7
 8000a8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a96:	fb00 f808 	mul.w	r8, r0, r8
 8000a9a:	45b8      	cmp	r8, r7
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x24a>
 8000a9e:	19e7      	adds	r7, r4, r7
 8000aa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aa4:	d22e      	bcs.n	8000b04 <__udivmoddi4+0x2a0>
 8000aa6:	45b8      	cmp	r8, r7
 8000aa8:	d92c      	bls.n	8000b04 <__udivmoddi4+0x2a0>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4427      	add	r7, r4
 8000aae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ab2:	eba7 0708 	sub.w	r7, r7, r8
 8000ab6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aba:	454f      	cmp	r7, r9
 8000abc:	46c6      	mov	lr, r8
 8000abe:	4649      	mov	r1, r9
 8000ac0:	d31a      	bcc.n	8000af8 <__udivmoddi4+0x294>
 8000ac2:	d017      	beq.n	8000af4 <__udivmoddi4+0x290>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x27a>
 8000ac6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aca:	eb67 0701 	sbc.w	r7, r7, r1
 8000ace:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ad2:	40f2      	lsrs	r2, r6
 8000ad4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ad8:	40f7      	lsrs	r7, r6
 8000ada:	e9c5 2700 	strd	r2, r7, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	462e      	mov	r6, r5
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e70b      	b.n	8000904 <__udivmoddi4+0xa0>
 8000aec:	4606      	mov	r6, r0
 8000aee:	e6e9      	b.n	80008c4 <__udivmoddi4+0x60>
 8000af0:	4618      	mov	r0, r3
 8000af2:	e6fd      	b.n	80008f0 <__udivmoddi4+0x8c>
 8000af4:	4543      	cmp	r3, r8
 8000af6:	d2e5      	bcs.n	8000ac4 <__udivmoddi4+0x260>
 8000af8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000afc:	eb69 0104 	sbc.w	r1, r9, r4
 8000b00:	3801      	subs	r0, #1
 8000b02:	e7df      	b.n	8000ac4 <__udivmoddi4+0x260>
 8000b04:	4608      	mov	r0, r1
 8000b06:	e7d2      	b.n	8000aae <__udivmoddi4+0x24a>
 8000b08:	4660      	mov	r0, ip
 8000b0a:	e78d      	b.n	8000a28 <__udivmoddi4+0x1c4>
 8000b0c:	4681      	mov	r9, r0
 8000b0e:	e7b9      	b.n	8000a84 <__udivmoddi4+0x220>
 8000b10:	4666      	mov	r6, ip
 8000b12:	e775      	b.n	8000a00 <__udivmoddi4+0x19c>
 8000b14:	4630      	mov	r0, r6
 8000b16:	e74a      	b.n	80009ae <__udivmoddi4+0x14a>
 8000b18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b1c:	4439      	add	r1, r7
 8000b1e:	e713      	b.n	8000948 <__udivmoddi4+0xe4>
 8000b20:	3802      	subs	r0, #2
 8000b22:	443c      	add	r4, r7
 8000b24:	e724      	b.n	8000970 <__udivmoddi4+0x10c>
 8000b26:	bf00      	nop

08000b28 <__aeabi_idiv0>:
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <FusionAhrsInitialise>:
/**
 * @brief Initialises the AHRS algorithm structure.
 * @param fusionAhrs AHRS algorithm structure.
 * @param gain AHRS algorithm gain.
 */
void FusionAhrsInitialise(FusionAhrs * const fusionAhrs, const float gain) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b08b      	sub	sp, #44	; 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	ed87 0a00 	vstr	s0, [r7]
    fusionAhrs->gain = gain;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	683a      	ldr	r2, [r7, #0]
 8000b3c:	601a      	str	r2, [r3, #0]
    fusionAhrs->minimumMagneticFieldSquared = 0.0f;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f04f 0200 	mov.w	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
    fusionAhrs->maximumMagneticFieldSquared = FLT_MAX;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <FusionAhrsInitialise+0x74>)
 8000b4a:	609a      	str	r2, [r3, #8]
    fusionAhrs->quaternion = FUSION_QUATERNION_IDENTITY;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f04f 0200 	mov.w	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
    fusionAhrs->linearAcceleration = FUSION_VECTOR3_ZERO;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f04f 0200 	mov.w	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f04f 0200 	mov.w	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
    fusionAhrs->rampedGain = INITIAL_GAIN;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <FusionAhrsInitialise+0x78>)
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
    fusionAhrs->zeroYawPending = false;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8000b92:	bf00      	nop
 8000b94:	372c      	adds	r7, #44	; 0x2c
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	7f7fffff 	.word	0x7f7fffff
 8000ba4:	41200000 	.word	0x41200000

08000ba8 <FusionAhrsUpdate>:
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in uT.
 * @param samplePeriod Sample period in seconds.  This is the difference in time
 * between the current and previous gyroscope measurements.
 */
void FusionAhrsUpdate(FusionAhrs * const fusionAhrs, const FusionVector3 gyroscope, const FusionVector3 accelerometer, const FusionVector3 magnetometer, const float samplePeriod) {
 8000ba8:	b490      	push	{r4, r7}
 8000baa:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb4:	6018      	str	r0, [r3, #0]
 8000bb6:	f107 0120 	add.w	r1, r7, #32
 8000bba:	eeb0 5a61 	vmov.f32	s10, s3
 8000bbe:	eef0 5a42 	vmov.f32	s11, s4
 8000bc2:	eeb0 6a62 	vmov.f32	s12, s5
 8000bc6:	f107 0214 	add.w	r2, r7, #20
 8000bca:	eef0 6a43 	vmov.f32	s13, s6
 8000bce:	eeb0 7a63 	vmov.f32	s14, s7
 8000bd2:	eef0 7a44 	vmov.f32	s15, s8
 8000bd6:	f107 0308 	add.w	r3, r7, #8
 8000bda:	1d38      	adds	r0, r7, #4
 8000bdc:	edc0 4a00 	vstr	s9, [r0]
 8000be0:	ed81 0a00 	vstr	s0, [r1]
 8000be4:	edc1 0a01 	vstr	s1, [r1, #4]
 8000be8:	ed81 1a02 	vstr	s2, [r1, #8]
 8000bec:	ed82 5a00 	vstr	s10, [r2]
 8000bf0:	edc2 5a01 	vstr	s11, [r2, #4]
 8000bf4:	ed82 6a02 	vstr	s12, [r2, #8]
 8000bf8:	edc3 6a00 	vstr	s13, [r3]
 8000bfc:	ed83 7a01 	vstr	s14, [r3, #4]
 8000c00:	edc3 7a02 	vstr	s15, [r3, #8]
#define Q fusionAhrs->quaternion.element // define shorthand label for more readable code

    // Calculate feedback error
    FusionVector3 halfFeedbackError = FUSION_VECTOR3_ZERO; // scaled by 0.5 to avoid repeated multiplications by 2
 8000c04:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000c08:	f04f 0200 	mov.w	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
    do {
        // Abandon feedback calculation if accelerometer measurement invalid
        if ((accelerometer.axis.x == 0.0f) && (accelerometer.axis.y == 0.0f) && (accelerometer.axis.z == 0.0f)) {
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c32:	d112      	bne.n	8000c5a <FusionAhrsUpdate+0xb2>
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c44:	d109      	bne.n	8000c5a <FusionAhrsUpdate+0xb2>
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c56:	f000 8437 	beq.w	80014c8 <FusionAhrsUpdate+0x920>
            break;
        }

        // Calculate direction of gravity assumed by quaternion
        const FusionVector3 halfGravity = {
            .axis.x = Q.x * Q.z - Q.w * Q.y,
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	ed93 7a04 	vldr	s14, [r3, #16]
 8000c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	edd3 6a03 	vldr	s13, [r3, #12]
 8000c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c8a:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000c8e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000c92:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.x + Q.y * Q.z,
 8000c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	edd3 6a05 	vldr	s13, [r3, #20]
 8000cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	edd3 7a06 	vldr	s15, [r3, #24]
 8000cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000cca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000cce:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8000cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000cee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	edd3 6a06 	vldr	s13, [r3, #24]
 8000cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfGravity = {
 8000d0e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000d12:	edc3 7a02 	vstr	s15, [r3, #8]
 8000d16:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000d1a:	f107 0214 	add.w	r2, r7, #20
 8000d1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000d24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d28:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000d2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vector Vector of the operation.
 * @return Vector magnitude squared.
 */
static inline __attribute__((always_inline)) float FusionVectorMagnitudeSquared(const FusionVector3 vector) {
#define V vector.axis // define shorthand label for more readable code
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8000d32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d36:	ed93 7a00 	vldr	s14, [r3]
 8000d3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d3e:	edd3 7a00 	vldr	s15, [r3]
 8000d42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d52:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d62:	edd3 6a02 	vldr	s13, [r3, #8]
 8000d66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d76:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000d7a:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8000d7e:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8000d82:	edd3 7a00 	vldr	s15, [r3]
 8000d86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d8e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000d92:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8000d96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d9a:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8000da2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000dac:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8000dae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	105a      	asrs	r2, r3, #1
 8000db6:	4b9a      	ldr	r3, [pc, #616]	; (8001020 <FusionAhrsUpdate+0x478>)
 8000db8:	1a9b      	subs	r3, r3, r2
 8000dba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000dbe:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8000dc0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dca:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8000dcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dd0:	ed93 7a00 	vldr	s14, [r3]
 8000dd4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000dd8:	edd3 7a00 	vldr	s15, [r3]
 8000ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000de0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000de4:	edd3 7a00 	vldr	s15, [r3]
 8000de8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dec:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000df0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000df4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e04:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8000e08:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e0c:	681b      	ldr	r3, [r3, #0]
 * square root approximation.
 * @param vector Vector to be normalised.
 * @return Normalised vector.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorFastNormalise(const FusionVector3 vector) {
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8000e0e:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e18:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000e1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e22:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8000e2c:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 8000e2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e32:	ed93 7a00 	vldr	s14, [r3]
 8000e36:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000e3a:	edd3 7a00 	vldr	s15, [r3]
 8000e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e46:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8000e4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e52:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e62:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8000e66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e6e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000e72:	edd3 7a00 	vldr	s15, [r3]
 8000e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e7a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e7e:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8000e82:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8000e86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000e8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e90:	f507 724a 	add.w	r2, r7, #808	; 0x328
 8000e94:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8000e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8000e9e:	bf00      	nop
 8000ea0:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8000ea4:	461c      	mov	r4, r3
 8000ea6:	f507 734d 	add.w	r3, r7, #820	; 0x334
 8000eaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000eb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eb6:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8000eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ebc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ec0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8000ec8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8000ece:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ed2:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ed6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eda:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ee6:	edd3 6a02 	vldr	s13, [r3, #8]
 8000eea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eee:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000efe:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8000f02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f06:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f0e:	edd3 7a00 	vldr	s15, [r3]
 8000f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f1a:	edd3 6a00 	vldr	s13, [r3]
 8000f1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f22:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f32:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8000f36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f3a:	ed93 7a00 	vldr	s14, [r3]
 8000f3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f42:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f66:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8000f6a:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 8000f6e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000f72:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000f78:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000f7c:	f507 7247 	add.w	r2, r7, #796	; 0x31c
 8000f80:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000f86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f8a:	f107 0208 	add.w	r2, r7, #8
 8000f8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 8000f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f98:	ed93 7a00 	vldr	s14, [r3]
 8000f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fac:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fcc:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd4:	ee77 7a27 	vadd.f32	s15, s14, s15

        // Calculate accelerometer feedback error
        halfFeedbackError = FusionVectorCrossProduct(FusionVectorFastNormalise(accelerometer), halfGravity);

        // Abandon magnetometer feedback calculation if magnetometer measurement invalid
        const float magnetometerMagnitudeSquared = FusionVectorMagnitudeSquared(magnetometer);
 8000fd8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fdc:	edc3 7a00 	vstr	s15, [r3]
        if ((magnetometerMagnitudeSquared < fusionAhrs->minimumMagneticFieldSquared) || (magnetometerMagnitudeSquared > fusionAhrs->maximumMagneticFieldSquared)) {
 8000fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fea:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000fee:	ed93 7a00 	vldr	s14, [r3]
 8000ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	f100 8266 	bmi.w	80014ca <FusionAhrsUpdate+0x922>
 8000ffe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	edd3 7a02 	vldr	s15, [r3, #8]
 8001008:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800100c:	ed93 7a00 	vldr	s14, [r3]
 8001010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	f300 8257 	bgt.w	80014ca <FusionAhrsUpdate+0x922>
 800101c:	e002      	b.n	8001024 <FusionAhrsUpdate+0x47c>
 800101e:	bf00      	nop
 8001020:	5f3759df 	.word	0x5f3759df
            break;
        }

        // Compute direction of 'magnetic west' assumed by quaternion
        const FusionVector3 halfWest = {
            .axis.x = Q.x * Q.y + Q.w * Q.z,
 8001024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	ed93 7a04 	vldr	s14, [r3, #16]
 800102e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	edd3 7a05 	vldr	s15, [r3, #20]
 8001038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	edd3 6a03 	vldr	s13, [r3, #12]
 8001046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 8001058:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800105c:	edc3 7a00 	vstr	s15, [r3]
            .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	ed93 7a03 	vldr	s14, [r3, #12]
 800106a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	edd3 7a03 	vldr	s15, [r3, #12]
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800107c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	edd3 6a05 	vldr	s13, [r3, #20]
 800108a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	edd3 7a05 	vldr	s15, [r3, #20]
 8001094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001098:	ee77 7a27 	vadd.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 800109c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80010a0:	edc3 7a01 	vstr	s15, [r3, #4]
            .axis.z = Q.y * Q.z - Q.w * Q.x
 80010a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80010ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80010b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80010c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee77 7a67 	vsub.f32	s15, s14, s15
        const FusionVector3 halfWest = {
 80010d8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80010dc:	edc3 7a02 	vstr	s15, [r3, #8]
 80010e0:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80010e4:	f107 0214 	add.w	r2, r7, #20
 80010e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80010ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010f2:	f107 0208 	add.w	r2, r7, #8
 80010f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 80010fc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001100:	ed93 7a01 	vldr	s14, [r3, #4]
 8001104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001108:	edd3 7a02 	vldr	s15, [r3, #8]
 800110c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001110:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001114:	edd3 6a02 	vldr	s13, [r3, #8]
 8001118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800111c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001128:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800112c:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 8001130:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001134:	ed93 7a02 	vldr	s14, [r3, #8]
 8001138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800113c:	edd3 7a00 	vldr	s15, [r3]
 8001140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001144:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001148:	edd3 6a00 	vldr	s13, [r3]
 800114c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001150:	edd3 7a02 	vldr	s15, [r3, #8]
 8001154:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001160:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 8001164:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001168:	ed93 7a00 	vldr	s14, [r3]
 800116c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001170:	edd3 7a01 	vldr	s15, [r3, #4]
 8001174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001178:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800117c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001190:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001194:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001198:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800119c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011a6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80011aa:	461c      	mov	r4, r3
 80011ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011b8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80011bc:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80011c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011ca:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80011ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return V.x * V.x + V.y * V.y + V.z * V.z;
 80011d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011d8:	ed93 7a00 	vldr	s14, [r3]
 80011dc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011e8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80011f0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001200:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001204:	edd3 6a02 	vldr	s13, [r3, #8]
 8001208:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800120c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 800121c:	edc3 7a00 	vstr	s15, [r3]
    float halfx = 0.5f * x;
 8001220:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800122c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001230:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001234:	edc3 7a00 	vstr	s15, [r3]
    float y = x;
 8001238:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800123c:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001244:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800124e:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001250:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	105a      	asrs	r2, r3, #1
 8001258:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <FusionAhrsUpdate+0x918>)
 800125a:	1a9b      	subs	r3, r3, r2
 800125c:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001260:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001262:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800126c:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 800126e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001272:	ed93 7a00 	vldr	s14, [r3]
 8001276:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001282:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001292:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001296:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012a6:	edc3 7a00 	vstr	s15, [r3]
    return y;
 80012aa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012ae:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80012b0:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012ba:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80012be:	ca07      	ldmia	r2, {r0, r1, r2}
 80012c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012c4:	f207 4304 	addw	r3, r7, #1028	; 0x404
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80012ce:	6013      	str	r3, [r2, #0]
    result.axis.x = vector.axis.x * scalar;
 80012d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012d4:	ed93 7a00 	vldr	s14, [r3]
 80012d8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012e8:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 80012ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80012f4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001300:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001304:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 8001308:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800130c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001310:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001320:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001324:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001328:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800132c:	ca07      	ldmia	r2, {r0, r1, r2}
 800132e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001332:	f507 7359 	add.w	r3, r7, #868	; 0x364
 8001336:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800133a:	ca07      	ldmia	r2, {r0, r1, r2}
 800133c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001340:	bf00      	nop
 8001342:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8001346:	461c      	mov	r4, r3
 8001348:	f507 7359 	add.w	r3, r7, #868	; 0x364
 800134c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001350:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001354:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001358:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 800135c:	ca07      	ldmia	r2, {r0, r1, r2}
 800135e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001362:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001366:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800136a:	ca07      	ldmia	r2, {r0, r1, r2}
 800136c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = A.y * B.z - A.z * B.y;
 8001370:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001374:	ed93 7a01 	vldr	s14, [r3, #4]
 8001378:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800137c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001380:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001384:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001388:	edd3 6a02 	vldr	s13, [r3, #8]
 800138c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001390:	edd3 7a01 	vldr	s15, [r3, #4]
 8001394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013a0:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = A.z * B.x - A.x * B.z;
 80013a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80013ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013bc:	edd3 6a00 	vldr	s13, [r3]
 80013c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80013c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013d4:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = A.x * B.y - A.y * B.x;
 80013d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013dc:	ed93 7a00 	vldr	s14, [r3]
 80013e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80013f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001404:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001408:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800140c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001410:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001414:	ca07      	ldmia	r2, {r0, r1, r2}
 8001416:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800141a:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800141e:	461c      	mov	r4, r3
 8001420:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 8001424:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800142c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001430:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8001434:	ca07      	ldmia	r2, {r0, r1, r2}
 8001436:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800143a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800143e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8001442:	ca07      	ldmia	r2, {r0, r1, r2}
 8001444:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001448:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001460:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001464:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001468:	ed93 7a01 	vldr	s14, [r3, #4]
 800146c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001470:	edd3 7a01 	vldr	s15, [r3, #4]
 8001474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001478:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800147c:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001480:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001484:	ed93 7a02 	vldr	s14, [r3, #8]
 8001488:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800148c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001494:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001498:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800149c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80014a0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80014a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014aa:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80014ae:	461c      	mov	r4, r3
 80014b0:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80014b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014bc:	e005      	b.n	80014ca <FusionAhrsUpdate+0x922>
 80014be:	bf00      	nop
 80014c0:	5f3759df 	.word	0x5f3759df
 80014c4:	3c8efa35 	.word	0x3c8efa35
            break;
 80014c8:	bf00      	nop
        halfFeedbackError = FusionVectorAdd(halfFeedbackError, FusionVectorCrossProduct(FusionVectorFastNormalise(FusionVectorCrossProduct(accelerometer, magnetometer)), halfWest));

    } while (false);

    // Ramp down gain until initialisation complete
    if (fusionAhrs->gain == 0) {
 80014ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d105      	bne.n	80014ea <FusionAhrsUpdate+0x942>
        fusionAhrs->rampedGain = 0; // skip initialisation if gain is zero
 80014de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
    }
    float feedbackGain = fusionAhrs->gain;
 80014ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f207 4224 	addw	r2, r7, #1060	; 0x424
 80014f6:	6013      	str	r3, [r2, #0]
    if (fusionAhrs->rampedGain > fusionAhrs->gain) {
 80014f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	dd24      	ble.n	8001560 <FusionAhrsUpdate+0x9b8>
        fusionAhrs->rampedGain -= (INITIAL_GAIN - fusionAhrs->gain) * samplePeriod / INITIALISATION_PERIOD;
 8001516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800152e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800153c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8001540:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001548:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        feedbackGain = fusionAhrs->rampedGain;
 8001552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800155e:	6013      	str	r3, [r2, #0]
    return degrees * ((float) M_PI / 180.0f);
 8001560:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 80014c4 <FusionAhrsUpdate+0x91c>
    }

    // Convert gyroscope to radians per second scaled by 0.5
    FusionVector3 halfGyroscope = FusionVectorMultiplyScalar(gyroscope, 0.5f * FusionDegreesToRadians(1.0f));
 8001564:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001570:	f107 0220 	add.w	r2, r7, #32
 8001574:	ca07      	ldmia	r2, {r0, r1, r2}
 8001576:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800157a:	edc7 7afa 	vstr	s15, [r7, #1000]	; 0x3e8
    result.axis.x = vector.axis.x * scalar;
 800157e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001582:	ed93 7a00 	vldr	s14, [r3]
 8001586:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 800158a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001592:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001596:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800159a:	ed93 7a01 	vldr	s14, [r3, #4]
 800159e:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 80015a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a6:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80015aa:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 80015ae:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80015b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80015b6:	edd7 7afa 	vldr	s15, [r7, #1000]	; 0x3e8
 80015ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015be:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 80015c2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80015c6:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 80015ca:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80015ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80015d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015d4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80015d8:	461c      	mov	r4, r3
 80015da:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 80015de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80015e6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80015ea:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80015ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80015f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015f4:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    result.axis.x = vector.axis.x * scalar;
 80015fe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001612:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001616:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800161a:	ed93 7a01 	vldr	s14, [r3, #4]
 800161e:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 8001622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001626:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800162a:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800162e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001632:	ed93 7a02 	vldr	s14, [r3, #8]
 8001636:	edd7 7afb 	vldr	s15, [r7, #1004]	; 0x3ec
 800163a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001642:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001646:	f507 7219 	add.w	r2, r7, #612	; 0x264
 800164a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800164e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001650:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001654:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001658:	461c      	mov	r4, r3
 800165a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800165e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001666:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800166a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 800166e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001670:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001674:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001678:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 800167c:	ca07      	ldmia	r2, {r0, r1, r2}
 800167e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001682:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001686:	ed93 7a00 	vldr	s14, [r3]
 800168a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800169a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 800169e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80016a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80016a6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80016aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80016b6:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 80016ba:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80016be:	ed93 7a02 	vldr	s14, [r3, #8]
 80016c2:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80016c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ce:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80016d2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80016d6:	f507 7210 	add.w	r2, r7, #576	; 0x240
 80016da:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80016de:	ca07      	ldmia	r2, {r0, r1, r2}
 80016e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016e4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80016e8:	461c      	mov	r4, r3
 80016ea:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 80016ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016f6:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80016fa:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80016fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001700:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    result.axis.x = vector.axis.x * scalar;
 800170c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001710:	ed93 7a00 	vldr	s14, [r3]
 8001714:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001720:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vector.axis.y * scalar;
 8001724:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001728:	ed93 7a01 	vldr	s14, [r3, #4]
 800172c:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001734:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001738:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vector.axis.z * scalar;
 800173c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001740:	ed93 7a02 	vldr	s14, [r3, #8]
 8001744:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001750:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001754:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001758:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800175c:	ca07      	ldmia	r2, {r0, r1, r2}
 800175e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001762:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8001766:	461c      	mov	r4, r3
 8001768:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 800176c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001774:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4614      	mov	r4, r2
 8001780:	330c      	adds	r3, #12
 8001782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001788:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800178c:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8001790:	ca07      	ldmia	r2, {r0, r1, r2}
 8001792:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector3 vector) {
#define Q quaternion.element // define shorthand labels for more readable code
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 8001796:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800179a:	edd3 7a01 	vldr	s15, [r3, #4]
 800179e:	eeb1 7a67 	vneg.f32	s14, s15
 80017a2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ae:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80017b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80017b6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80017ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80017be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80017ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80017ce:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80017d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80017d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017de:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80017e2:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 80017e6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80017ea:	ed93 7a00 	vldr	s14, [r3]
 80017ee:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017fa:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80017fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8001802:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001806:	edd3 7a02 	vldr	s15, [r3, #8]
 800180a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001812:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001816:	edd3 6a03 	vldr	s13, [r3, #12]
 800181a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800181e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800182e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 8001832:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001836:	ed93 7a00 	vldr	s14, [r3]
 800183a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800183e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001846:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800184a:	edd3 6a01 	vldr	s13, [r3, #4]
 800184e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001852:	edd3 7a02 	vldr	s15, [r3, #8]
 8001856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800185a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001862:	edd3 6a03 	vldr	s13, [r3, #12]
 8001866:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001876:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800187a:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 800187e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001882:	ed93 7a00 	vldr	s14, [r3]
 8001886:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800188a:	edd3 7a02 	vldr	s15, [r3, #8]
 800188e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001892:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001896:	edd3 6a01 	vldr	s13, [r3, #4]
 800189a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800189e:	edd3 7a01 	vldr	s15, [r3, #4]
 80018a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018aa:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80018ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80018b2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018c2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80018c6:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 80018ca:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80018ce:	f507 746a 	add.w	r4, r7, #936	; 0x3a8
 80018d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018d8:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 80018dc:	461c      	mov	r4, r3
 80018de:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80018e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018e8:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4614      	mov	r4, r2
 80018f4:	330c      	adds	r3, #12
 80018f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80018fc:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8001900:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001904:	4614      	mov	r4, r2
 8001906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    result.element.w = quaternionA.element.w + quaternionB.element.w;
 800190c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001910:	ed93 7a00 	vldr	s14, [r3]
 8001914:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001920:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001924:	edc3 7a00 	vstr	s15, [r3]
    result.element.x = quaternionA.element.x + quaternionB.element.x;
 8001928:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800192c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001930:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001934:	edd3 7a01 	vldr	s15, [r3, #4]
 8001938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001940:	edc3 7a01 	vstr	s15, [r3, #4]
    result.element.y = quaternionA.element.y + quaternionB.element.y;
 8001944:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001948:	ed93 7a02 	vldr	s14, [r3, #8]
 800194c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8001950:	edd3 7a02 	vldr	s15, [r3, #8]
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001958:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800195c:	edc3 7a02 	vstr	s15, [r3, #8]
    result.element.z = quaternionA.element.z + quaternionB.element.z;
 8001960:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8001964:	ed93 7a03 	vldr	s14, [r3, #12]
 8001968:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 800196c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001974:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001978:	edc3 7a03 	vstr	s15, [r3, #12]
    return result;
 800197c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001980:	f507 7466 	add.w	r4, r7, #920	; 0x398
 8001984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800198a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800198e:	461c      	mov	r4, r3
 8001990:	f507 7366 	add.w	r3, r7, #920	; 0x398
 8001994:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Apply feedback to gyroscope
    halfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(halfFeedbackError, feedbackGain));

    // Integrate rate of change of quaternion
    fusionAhrs->quaternion = FusionQuaternionAdd(fusionAhrs->quaternion, FusionQuaternionMultiplyVector(fusionAhrs->quaternion, FusionVectorMultiplyScalar(halfGyroscope, samplePeriod)));
 800199a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 80019a4:	f103 040c 	add.w	r4, r3, #12
 80019a8:	4613      	mov	r3, r2
 80019aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019b0:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 80019b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4614      	mov	r4, r2
 80019bc:	330c      	adds	r3, #12
 80019be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be normalised.
 * @return Normalised quaternion.
 */
static inline __attribute__((always_inline)) FusionQuaternion FusionQuaternionFastNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 80019c4:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019c8:	ed93 7a00 	vldr	s14, [r3]
 80019cc:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80019e0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019f0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80019f8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80019fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a08:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001a0c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a10:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001a14:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a20:	edc7 7aff 	vstr	s15, [r7, #1020]	; 0x3fc
    float halfx = 0.5f * x;
 8001a24:	edd7 7aff 	vldr	s15, [r7, #1020]	; 0x3fc
 8001a28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a30:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
    float y = x;
 8001a34:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a38:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 8001a3c:	601a      	str	r2, [r3, #0]
    int32_t i = *(int32_t*) & y;
 8001a3e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001a48:	601a      	str	r2, [r3, #0]
    i = 0x5f3759df - (i >> 1);
 8001a4a:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	105a      	asrs	r2, r3, #1
 8001a52:	4b98      	ldr	r3, [pc, #608]	; (8001cb4 <FusionAhrsUpdate+0x110c>)
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8001a5a:	6013      	str	r3, [r2, #0]
    y = *(float*) &i;
 8001a5c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a66:	601a      	str	r2, [r3, #0]
    y = y * (1.5f - (halfx * y * y));
 8001a68:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a6c:	ed93 7a00 	vldr	s14, [r3]
 8001a70:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8001a74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a78:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a84:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001a88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a8c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
    return y;
 8001aa0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001aa4:	681b      	ldr	r3, [r3, #0]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001aa6:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 8001aaa:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aba:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001abe:	edc3 7a00 	vstr	s15, [r3]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 8001ac2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001ac6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001aca:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001ad6:	edc3 7a01 	vstr	s15, [r3, #4]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 8001ada:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001ade:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ae2:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aea:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001aee:	edc3 7a02 	vstr	s15, [r3, #8]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 8001af2:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001af6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001afa:	edd7 7afd 	vldr	s15, [r7, #1012]	; 0x3f4
 8001afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b02:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001b06:	edc3 7a03 	vstr	s15, [r3, #12]
    return normalisedQuaternion;
 8001b0a:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001b0e:	f507 7462 	add.w	r4, r7, #904	; 0x388
 8001b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b18:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8001b1c:	461c      	mov	r4, r3
 8001b1e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Normalise quaternion
    fusionAhrs->quaternion = FusionQuaternionFastNormalise(fusionAhrs->quaternion);
 8001b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8001b32:	f103 040c 	add.w	r4, r3, #12
 8001b36:	4613      	mov	r3, r2
 8001b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Calculate linear acceleration
    const FusionVector3 gravity = {
        .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 8001b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b72:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001b76:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001b7a:	edc3 7a00 	vstr	s15, [r3]
        .axis.y = 2.0f * (Q.w * Q.x + Q.y * Q.z),
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001bb6:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001bba:	edc3 7a01 	vstr	s15, [r3, #4]
        .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 8001bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bda:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	edd3 6a06 	vldr	s13, [r3, #24]
 8001be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	edd3 7a06 	vldr	s15, [r3, #24]
 8001bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
    const FusionVector3 gravity = {
 8001bfe:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001c02:	edc3 7a02 	vstr	s15, [r3, #8]
 8001c06:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001c0a:	f107 0214 	add.w	r2, r7, #20
 8001c0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c14:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c18:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8001c1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8001c22:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001c26:	ed93 7a00 	vldr	s14, [r3]
 8001c2a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c36:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8001c3e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001c42:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c46:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c52:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001c56:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8001c5a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001c5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c62:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001c66:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001c72:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8001c76:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8001c7a:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001c7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c84:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c88:	461c      	mov	r4, r3
 8001c8a:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 8001c8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }; // equal to 3rd column of rotation matrix representation
    fusionAhrs->linearAcceleration = FusionVectorSubtract(accelerometer, gravity);
 8001c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001ca0:	331c      	adds	r3, #28
 8001ca2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ca4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

#undef Q // undefine shorthand label
}
 8001ca8:	bf00      	nop
 8001caa:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc90      	pop	{r4, r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	5f3759df 	.word	0x5f3759df

08001cb8 <FusionAhrsGetQuaternion>:
/**
 * @brief Gets the quaternion describing the sensor relative to the Earth.
 * @param fusionAhrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs * const fusionAhrs) {
 8001cb8:	b490      	push	{r4, r7}
 8001cba:	b096      	sub	sp, #88	; 0x58
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6178      	str	r0, [r7, #20]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001cc6:	330c      	adds	r3, #12
 8001cc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    conjugate.element.w = quaternion.element.w;
 8001cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd0:	61bb      	str	r3, [r7, #24]
    conjugate.element.x = -1.0f * quaternion.element.x;
 8001cd2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cd6:	eef1 7a67 	vneg.f32	s15, s15
 8001cda:	edc7 7a07 	vstr	s15, [r7, #28]
    conjugate.element.y = -1.0f * quaternion.element.y;
 8001cde:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ce2:	eef1 7a67 	vneg.f32	s15, s15
 8001ce6:	edc7 7a08 	vstr	s15, [r7, #32]
    conjugate.element.z = -1.0f * quaternion.element.z;
 8001cea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001cee:	eef1 7a67 	vneg.f32	s15, s15
 8001cf2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return conjugate;
 8001cf6:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001cfa:	f107 0318 	add.w	r3, r7, #24
 8001cfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d04:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001d08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return FusionQuaternionConjugate(fusionAhrs->quaternion);
 8001d12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001d14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d1a:	ee06 0a10 	vmov	s12, r0
 8001d1e:	ee06 1a90 	vmov	s13, r1
 8001d22:	ee07 2a10 	vmov	s14, r2
 8001d26:	ee07 3a90 	vmov	s15, r3
}
 8001d2a:	eeb0 0a46 	vmov.f32	s0, s12
 8001d2e:	eef0 0a66 	vmov.f32	s1, s13
 8001d32:	eeb0 1a47 	vmov.f32	s2, s14
 8001d36:	eef0 1a67 	vmov.f32	s3, s15
 8001d3a:	3758      	adds	r7, #88	; 0x58
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc90      	pop	{r4, r7}
 8001d40:	4770      	bx	lr
 8001d42:	0000      	movs	r0, r0
 8001d44:	0000      	movs	r0, r0
	...

08001d48 <FusionBiasInitialise>:
 * @param threshold Gyroscope threshold (in degrees per second) below which the
 * gyroscope is detected stationary.
 * @param samplePeriod Nominal sample period (in seconds) corresponding the rate
 * at which the application will update the algorithm.
 */
void FusionBiasInitialise(FusionBias * const fusionBias, const float threshold, const float samplePeriod) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d54:	edc7 0a01 	vstr	s1, [r7, #4]
    fusionBias->threshold = threshold;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	601a      	str	r2, [r3, #0]
    fusionBias->samplePeriod = samplePeriod;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	605a      	str	r2, [r3, #4]
    fusionBias->filterCoefficient = (2.0f * M_PI * CORNER_FREQUENCY) * fusionBias->samplePeriod;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fcbb 	bl	80006e4 <__aeabi_f2d>
 8001d6e:	a312      	add	r3, pc, #72	; (adr r3, 8001db8 <FusionBiasInitialise+0x70>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fa28 	bl	80001c8 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7fe fd08 	bl	8000794 <__aeabi_d2f>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	609a      	str	r2, [r3, #8]
    fusionBias->stationaryTimer = 0.0f;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
    fusionBias->gyroscopeBias = FUSION_VECTOR3_ZERO;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	f3af 8000 	nop.w
 8001db8:	8c0eff43 	.word	0x8c0eff43
 8001dbc:	3fc015bf 	.word	0x3fc015bf

08001dc0 <FusionBiasUpdate>:
 * corrected gyroscope measurement.
 * @param fusionBias FusionBias structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector3 FusionBiasUpdate(FusionBias * const fusionBias, FusionVector3 gyroscope) {
 8001dc0:	b490      	push	{r4, r7}
 8001dc2:	b0b4      	sub	sp, #208	; 0xd0
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	61f8      	str	r0, [r7, #28]
 8001dc8:	eef0 6a40 	vmov.f32	s13, s0
 8001dcc:	eeb0 7a60 	vmov.f32	s14, s1
 8001dd0:	eef0 7a41 	vmov.f32	s15, s2
 8001dd4:	edc7 6a04 	vstr	s13, [r7, #16]
 8001dd8:	ed87 7a05 	vstr	s14, [r7, #20]
 8001ddc:	edc7 7a06 	vstr	s15, [r7, #24]
 8001de0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001de4:	f107 0210 	add.w	r2, r7, #16
 8001de8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001dee:	69fa      	ldr	r2, [r7, #28]
 8001df0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001df4:	3210      	adds	r2, #16
 8001df6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001df8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8001dfc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001e00:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 8001e0c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001e10:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e18:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 8001e1c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001e20:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e28:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    return result;
 8001e2c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001e30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001e42:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e44:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Subtract bias from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, fusionBias->gyroscopeBias);

    // Reset stationary timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > fusionBias->threshold) || (fabs(gyroscope.axis.y) > fusionBias->threshold) || (fabs(gyroscope.axis.z) > fusionBias->threshold)) {
 8001e48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e4c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	dc17      	bgt.n	8001e90 <FusionBiasUpdate+0xd0>
 8001e60:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e64:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	dc0b      	bgt.n	8001e90 <FusionBiasUpdate+0xd0>
 8001e78:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e7c:	eeb0 7ae7 	vabs.f32	s14, s15
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8e:	dd0b      	ble.n	8001ea8 <FusionBiasUpdate+0xe8>
        fusionBias->stationaryTimer = 0.0f;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
        return gyroscope;
 8001e98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e9c:	f107 0210 	add.w	r2, r7, #16
 8001ea0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ea2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ea6:	e08f      	b.n	8001fc8 <FusionBiasUpdate+0x208>
    }

    // Increment stationary timer while gyroscope stationary
    if (fusionBias->stationaryTimer < STATIONARY_PERIOD) {
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eae:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eba:	d512      	bpl.n	8001ee2 <FusionBiasUpdate+0x122>
        fusionBias->stationaryTimer += fusionBias->samplePeriod;
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	edc3 7a03 	vstr	s15, [r3, #12]
        return gyroscope;
 8001ed2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ed6:	f107 0210 	add.w	r2, r7, #16
 8001eda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001edc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ee0:	e072      	b.n	8001fc8 <FusionBiasUpdate+0x208>
    }

    // Adjust bias if stationary timer has elapsed
    fusionBias->gyroscopeBias = FusionVectorAdd(fusionBias->gyroscopeBias, FusionVectorMultiplyScalar(gyroscope, fusionBias->filterCoefficient));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	689c      	ldr	r4, [r3, #8]
 8001ee6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001eea:	f107 0210 	add.w	r2, r7, #16
 8001eee:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ef0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ef4:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
    result.axis.x = vector.axis.x * scalar;
 8001ef8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001efc:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f04:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    result.axis.y = vector.axis.y * scalar;
 8001f08:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001f0c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f14:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    result.axis.z = vector.axis.z * scalar;
 8001f18:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001f1c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f24:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    return result;
 8001f28:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f2c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001f30:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f3a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f4a:	3210      	adds	r2, #16
 8001f4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f56:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001f5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
 8001f60:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001f64:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
 8001f70:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001f74:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
 8001f80:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001f84:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    return result;
 8001f90:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001f98:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001f9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fa2:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001fa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fa8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	3310      	adds	r3, #16
 8001fb0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001fb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return gyroscope;
 8001fba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001fbe:	f107 0210 	add.w	r2, r7, #16
 8001fc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001fc8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001fcc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fd4:	ee06 1a90 	vmov	s13, r1
 8001fd8:	ee07 2a10 	vmov	s14, r2
 8001fdc:	ee07 3a90 	vmov	s15, r3
}
 8001fe0:	eeb0 0a66 	vmov.f32	s0, s13
 8001fe4:	eef0 0a47 	vmov.f32	s1, s14
 8001fe8:	eeb0 1a67 	vmov.f32	s2, s15
 8001fec:	37d0      	adds	r7, #208	; 0xd0
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc90      	pop	{r4, r7}
 8001ff2:	4770      	bx	lr

08001ff4 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8001ff8:	bf00      	nop
 8001ffa:	f000 f9d1 	bl	80023a0 <icm20948_who_am_i>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f083 0301 	eor.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f7      	bne.n	8001ffa <icm20948_init+0x6>

	icm20948_device_reset();
 800200a:	f000 f9ee 	bl	80023ea <icm20948_device_reset>
	icm20948_wakeup();
 800200e:	f000 fa03 	bl	8002418 <icm20948_wakeup>

	icm20948_clock_source(1);
 8002012:	2001      	movs	r0, #1
 8002014:	f000 fa7b 	bl	800250e <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002018:	f000 fa92 	bl	8002540 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 800201c:	f000 fa16 	bl	800244c <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8002020:	2000      	movs	r0, #0
 8002022:	f000 fa96 	bl	8002552 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002026:	2000      	movs	r0, #0
 8002028:	f000 fab0 	bl	800258c <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 800202c:	2000      	movs	r0, #0
 800202e:	f000 faca 	bl	80025c6 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002032:	2000      	movs	r0, #0
 8002034:	f000 fad6 	bl	80025e4 <icm20948_accel_sample_rate_divider>

	//icm20948_gyro_calibration();
	//icm20948_accel_calibration();

	icm20948_gyro_full_scale_select(_2000dps);
 8002038:	2003      	movs	r0, #3
 800203a:	f000 fb03 	bl	8002644 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 800203e:	2003      	movs	r0, #3
 8002040:	f000 fb4a 	bl	80026d8 <icm20948_accel_full_scale_select>
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <ak09916_init>:

void ak09916_init()
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 800204c:	f000 fa15 	bl	800247a <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8002050:	f000 fa2a 	bl	80024a8 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8002054:	2007      	movs	r0, #7
 8002056:	f000 fa41 	bl	80024dc <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 800205a:	bf00      	nop
 800205c:	f000 f9b3 	bl	80023c6 <ak09916_who_am_i>
 8002060:	4603      	mov	r3, r0
 8002062:	f083 0301 	eor.w	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f7      	bne.n	800205c <ak09916_init+0x14>

	ak09916_soft_reset();
 800206c:	f000 f9c9 	bl	8002402 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8002070:	2008      	movs	r0, #8
 8002072:	f000 fad5 	bl	8002620 <ak09916_operation_mode_setting>
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}

0800207a <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8002082:	2206      	movs	r2, #6
 8002084:	2133      	movs	r1, #51	; 0x33
 8002086:	2000      	movs	r0, #0
 8002088:	f000 fbee 	bl	8002868 <read_multiple_icm20948_reg>
 800208c:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	b21a      	sxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3301      	adds	r3, #1
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	b21b      	sxth	r3, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3302      	adds	r3, #2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3303      	adds	r3, #3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	4313      	orrs	r3, r2
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3304      	adds	r3, #4
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	b21a      	sxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3305      	adds	r3, #5
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8002108:	2206      	movs	r2, #6
 800210a:	212d      	movs	r1, #45	; 0x2d
 800210c:	2000      	movs	r0, #0
 800210e:	f000 fbab 	bl	8002868 <read_multiple_icm20948_reg>
 8002112:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | (temp[1]));
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21a      	sxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3301      	adds	r3, #1
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b21b      	sxth	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	b21b      	sxth	r3, r3
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | (temp[3]));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3302      	adds	r3, #2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	b21a      	sxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3303      	adds	r3, #3
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b21b      	sxth	r3, r3
 8002148:	4313      	orrs	r3, r2
 800214a:	b21b      	sxth	r3, r3
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | (temp[5]));
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	3304      	adds	r3, #4
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21a      	sxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3305      	adds	r3, #5
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b21b      	sxth	r3, r3
 800216c:	4313      	orrs	r3, r2
 800216e:	b21b      	sxth	r3, r3
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	edc3 7a02 	vstr	s15, [r3, #8]

	// Add scale factor because calibraiton function offset gravity acceleration.
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 800218e:	2010      	movs	r0, #16
 8002190:	f000 fb9a 	bl	80028c8 <read_single_ak09916_reg>
 8002194:	4603      	mov	r3, r0
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <ak09916_mag_read+0x20>
 80021a2:	2300      	movs	r3, #0
 80021a4:	e046      	b.n	8002234 <ak09916_mag_read+0xae>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 80021a6:	2106      	movs	r1, #6
 80021a8:	2011      	movs	r0, #17
 80021aa:	f000 fbd0 	bl	800294e <read_multiple_ak09916_reg>
 80021ae:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 80021b0:	2018      	movs	r0, #24
 80021b2:	f000 fb89 	bl	80028c8 <read_single_ak09916_reg>
 80021b6:	4603      	mov	r3, r0
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <ak09916_mag_read+0x42>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e035      	b.n	8002234 <ak09916_mag_read+0xae>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	3301      	adds	r3, #1
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21b      	sxth	r3, r3
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	3303      	adds	r3, #3
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	3302      	adds	r3, #2
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b21b      	sxth	r3, r3
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	3305      	adds	r3, #5
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	b21a      	sxth	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	3304      	adds	r3, #4
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b21b      	sxth	r3, r3
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	edc3 7a02 	vstr	s15, [r3, #8]

	return true;
 8002232:	2301      	movs	r3, #1
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <icm20948_gyro_read_dps>:

void icm20948_gyro_read_dps(axises* data)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff18 	bl	800207a <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	edd3 6a00 	vldr	s13, [r3]
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <icm20948_gyro_read_dps+0x58>)
 8002252:	ed93 7a00 	vldr	s14, [r3]
 8002256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	edc3 7a00 	vstr	s15, [r3]
	data->y /= gyro_scale_factor;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edd3 6a01 	vldr	s13, [r3, #4]
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <icm20948_gyro_read_dps+0x58>)
 8002268:	ed93 7a00 	vldr	s14, [r3]
 800226c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= gyro_scale_factor;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	edd3 6a02 	vldr	s13, [r3, #8]
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <icm20948_gyro_read_dps+0x58>)
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000090 	.word	0x20000090

08002298 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises* data)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	icm20948_accel_read(data);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff2d 	bl	8002100 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	edd3 6a00 	vldr	s13, [r3]
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <icm20948_accel_read_g+0x58>)
 80022ae:	ed93 7a00 	vldr	s14, [r3]
 80022b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	edc3 7a00 	vstr	s15, [r3]
	data->y /= accel_scale_factor;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	edd3 6a01 	vldr	s13, [r3, #4]
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <icm20948_accel_read_g+0x58>)
 80022c4:	ed93 7a00 	vldr	s14, [r3]
 80022c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z /= accel_scale_factor;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <icm20948_accel_read_g+0x58>)
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000094 	.word	0x20000094
 80022f4:	00000000 	.word	0x00000000

080022f8 <ak09916_mag_read_uT>:

bool ak09916_mag_read_uT(axises* data)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	axises temp;
	bool new_data = ak09916_mag_read(&temp);
 8002300:	f107 0308 	add.w	r3, r7, #8
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff3e 	bl	8002186 <ak09916_mag_read>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
	if(!new_data)	return false;
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	f083 0301 	eor.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <ak09916_mag_read_uT+0x26>
 800231a:	2300      	movs	r3, #0
 800231c:	e036      	b.n	800238c <ak09916_mag_read_uT+0x94>

	data->x = (float)(temp.x * 0.15);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f9df 	bl	80006e4 <__aeabi_f2d>
 8002326:	a31c      	add	r3, pc, #112	; (adr r3, 8002398 <ak09916_mag_read_uT+0xa0>)
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	f7fd ff4c 	bl	80001c8 <__aeabi_dmul>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f7fe fa2c 	bl	8000794 <__aeabi_d2f>
 800233c:	4602      	mov	r2, r0
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	601a      	str	r2, [r3, #0]
	data->y = (float)(temp.y * 0.15);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f9cd 	bl	80006e4 <__aeabi_f2d>
 800234a:	a313      	add	r3, pc, #76	; (adr r3, 8002398 <ak09916_mag_read_uT+0xa0>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fd ff3a 	bl	80001c8 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fa1a 	bl	8000794 <__aeabi_d2f>
 8002360:	4602      	mov	r2, r0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	605a      	str	r2, [r3, #4]
	data->z = (float)(temp.z * 0.15);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f9bb 	bl	80006e4 <__aeabi_f2d>
 800236e:	a30a      	add	r3, pc, #40	; (adr r3, 8002398 <ak09916_mag_read_uT+0xa0>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fd ff28 	bl	80001c8 <__aeabi_dmul>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f7fe fa08 	bl	8000794 <__aeabi_d2f>
 8002384:	4602      	mov	r2, r0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	609a      	str	r2, [r3, #8]

	return true;
 800238a:	2301      	movs	r3, #1
}	
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	f3af 8000 	nop.w
 8002398:	33333333 	.word	0x33333333
 800239c:	3fc33333 	.word	0x3fc33333

080023a0 <icm20948_who_am_i>:


/* Sub Functions */
bool icm20948_who_am_i()
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 80023a6:	2100      	movs	r1, #0
 80023a8:	2000      	movs	r0, #0
 80023aa:	f000 fa0d 	bl	80027c8 <read_single_icm20948_reg>
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	2bea      	cmp	r3, #234	; 0xea
 80023b6:	d101      	bne.n	80023bc <icm20948_who_am_i+0x1c>
		return true;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <icm20948_who_am_i+0x1e>
	else
		return false;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f000 fa7b 	bl	80028c8 <read_single_ak09916_reg>
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b09      	cmp	r3, #9
 80023da:	d101      	bne.n	80023e0 <ak09916_who_am_i+0x1a>
		return true;
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <ak09916_who_am_i+0x1c>
	else
		return false;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <icm20948_device_reset>:

void icm20948_device_reset()
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 80023ee:	22c1      	movs	r2, #193	; 0xc1
 80023f0:	2106      	movs	r1, #6
 80023f2:	2000      	movs	r0, #0
 80023f4:	f000 fa14 	bl	8002820 <write_single_icm20948_reg>
	HAL_Delay(100);
 80023f8:	2064      	movs	r0, #100	; 0x64
 80023fa:	f002 fb07 	bl	8004a0c <HAL_Delay>
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}

08002402 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8002406:	2101      	movs	r1, #1
 8002408:	2032      	movs	r0, #50	; 0x32
 800240a:	f000 fa7e 	bl	800290a <write_single_ak09916_reg>
	HAL_Delay(100);
 800240e:	2064      	movs	r0, #100	; 0x64
 8002410:	f002 fafc 	bl	8004a0c <HAL_Delay>
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800241e:	2106      	movs	r1, #6
 8002420:	2000      	movs	r0, #0
 8002422:	f000 f9d1 	bl	80027c8 <read_single_icm20948_reg>
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002430:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	461a      	mov	r2, r3
 8002436:	2106      	movs	r1, #6
 8002438:	2000      	movs	r0, #0
 800243a:	f000 f9f1 	bl	8002820 <write_single_icm20948_reg>
	HAL_Delay(100);
 800243e:	2064      	movs	r0, #100	; 0x64
 8002440:	f002 fae4 	bl	8004a0c <HAL_Delay>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002452:	2103      	movs	r1, #3
 8002454:	2000      	movs	r0, #0
 8002456:	f000 f9b7 	bl	80027c8 <read_single_icm20948_reg>
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f043 0310 	orr.w	r3, r3, #16
 8002464:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	461a      	mov	r2, r3
 800246a:	2103      	movs	r1, #3
 800246c:	2000      	movs	r0, #0
 800246e:	f000 f9d7 	bl	8002820 <write_single_icm20948_reg>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002480:	2103      	movs	r1, #3
 8002482:	2000      	movs	r0, #0
 8002484:	f000 f9a0 	bl	80027c8 <read_single_icm20948_reg>
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f043 0302 	orr.w	r3, r3, #2
 8002492:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	461a      	mov	r2, r3
 8002498:	2103      	movs	r1, #3
 800249a:	2000      	movs	r0, #0
 800249c:	f000 f9c0 	bl	8002820 <write_single_icm20948_reg>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80024ae:	2103      	movs	r1, #3
 80024b0:	2000      	movs	r0, #0
 80024b2:	f000 f989 	bl	80027c8 <read_single_icm20948_reg>
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	f043 0320 	orr.w	r3, r3, #32
 80024c0:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	461a      	mov	r2, r3
 80024c6:	2103      	movs	r1, #3
 80024c8:	2000      	movs	r0, #0
 80024ca:	f000 f9a9 	bl	8002820 <write_single_icm20948_reg>
	HAL_Delay(100);
 80024ce:	2064      	movs	r0, #100	; 0x64
 80024d0:	f002 fa9c 	bl	8004a0c <HAL_Delay>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 80024e6:	2101      	movs	r1, #1
 80024e8:	2030      	movs	r0, #48	; 0x30
 80024ea:	f000 f96d 	bl	80027c8 <read_single_icm20948_reg>
 80024ee:	4603      	mov	r3, r0
 80024f0:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	461a      	mov	r2, r3
 80024fe:	2101      	movs	r1, #1
 8002500:	2030      	movs	r0, #48	; 0x30
 8002502:	f000 f98d 	bl	8002820 <write_single_icm20948_reg>
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b084      	sub	sp, #16
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002518:	2106      	movs	r1, #6
 800251a:	2000      	movs	r0, #0
 800251c:	f000 f954 	bl	80027c8 <read_single_icm20948_reg>
 8002520:	4603      	mov	r3, r0
 8002522:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4313      	orrs	r3, r2
 800252a:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	461a      	mov	r2, r3
 8002530:	2106      	movs	r1, #6
 8002532:	2000      	movs	r0, #0
 8002534:	f000 f974 	bl	8002820 <write_single_icm20948_reg>
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8002544:	2201      	movs	r2, #1
 8002546:	2109      	movs	r1, #9
 8002548:	2020      	movs	r0, #32
 800254a:	f000 f969 	bl	8002820 <write_single_icm20948_reg>
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}

08002552 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800255c:	2101      	movs	r1, #1
 800255e:	2020      	movs	r0, #32
 8002560:	f000 f932 	bl	80027c8 <read_single_icm20948_reg>
 8002564:	4603      	mov	r3, r0
 8002566:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	b25a      	sxtb	r2, r3
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	4313      	orrs	r3, r2
 8002574:	b25b      	sxtb	r3, r3
 8002576:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	461a      	mov	r2, r3
 800257c:	2101      	movs	r1, #1
 800257e:	2020      	movs	r0, #32
 8002580:	f000 f94e 	bl	8002820 <write_single_icm20948_reg>
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8002596:	2114      	movs	r1, #20
 8002598:	2020      	movs	r0, #32
 800259a:	f000 f915 	bl	80027c8 <read_single_icm20948_reg>
 800259e:	4603      	mov	r3, r0
 80025a0:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	b25a      	sxtb	r2, r3
 80025a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	461a      	mov	r2, r3
 80025b6:	2101      	movs	r1, #1
 80025b8:	2020      	movs	r0, #32
 80025ba:	f000 f931 	bl	8002820 <write_single_icm20948_reg>
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	461a      	mov	r2, r3
 80025d4:	2100      	movs	r1, #0
 80025d6:	2020      	movs	r0, #32
 80025d8:	f000 f922 	bl	8002820 <write_single_icm20948_reg>
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	461a      	mov	r2, r3
 8002604:	2110      	movs	r1, #16
 8002606:	2020      	movs	r0, #32
 8002608:	f000 f90a 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 800260c:	7bbb      	ldrb	r3, [r7, #14]
 800260e:	461a      	mov	r2, r3
 8002610:	2111      	movs	r1, #17
 8002612:	2020      	movs	r0, #32
 8002614:	f000 f904 	bl	8002820 <write_single_icm20948_reg>
}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	4619      	mov	r1, r3
 800262e:	2031      	movs	r0, #49	; 0x31
 8002630:	f000 f96b 	bl	800290a <write_single_ak09916_reg>
	HAL_Delay(100);
 8002634:	2064      	movs	r0, #100	; 0x64
 8002636:	f002 f9e9 	bl	8004a0c <HAL_Delay>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <icm20948_gyro_full_scale_select>:
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
}

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800264e:	2101      	movs	r1, #1
 8002650:	2020      	movs	r0, #32
 8002652:	f000 f8b9 	bl	80027c8 <read_single_icm20948_reg>
 8002656:	4603      	mov	r3, r0
 8002658:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d827      	bhi.n	80026b0 <icm20948_gyro_full_scale_select+0x6c>
 8002660:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <icm20948_gyro_full_scale_select+0x24>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	08002679 	.word	0x08002679
 800266c:	08002681 	.word	0x08002681
 8002670:	08002691 	.word	0x08002691
 8002674:	080026a1 	.word	0x080026a1
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <icm20948_gyro_full_scale_select+0x80>)
 800267a:	4a13      	ldr	r2, [pc, #76]	; (80026c8 <icm20948_gyro_full_scale_select+0x84>)
 800267c:	601a      	str	r2, [r3, #0]
			break;
 800267e:	e017      	b.n	80026b0 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8002688:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <icm20948_gyro_full_scale_select+0x80>)
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <icm20948_gyro_full_scale_select+0x88>)
 800268c:	601a      	str	r2, [r3, #0]
			break;
 800268e:	e00f      	b.n	80026b0 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <icm20948_gyro_full_scale_select+0x80>)
 800269a:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <icm20948_gyro_full_scale_select+0x8c>)
 800269c:	601a      	str	r2, [r3, #0]
			break;
 800269e:	e007      	b.n	80026b0 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	f043 0306 	orr.w	r3, r3, #6
 80026a6:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <icm20948_gyro_full_scale_select+0x80>)
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <icm20948_gyro_full_scale_select+0x90>)
 80026ac:	601a      	str	r2, [r3, #0]
			break;
 80026ae:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	461a      	mov	r2, r3
 80026b4:	2101      	movs	r1, #1
 80026b6:	2020      	movs	r0, #32
 80026b8:	f000 f8b2 	bl	8002820 <write_single_icm20948_reg>
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000090 	.word	0x20000090
 80026c8:	43030000 	.word	0x43030000
 80026cc:	42830000 	.word	0x42830000
 80026d0:	42033333 	.word	0x42033333
 80026d4:	41833333 	.word	0x41833333

080026d8 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80026e2:	2114      	movs	r1, #20
 80026e4:	2020      	movs	r0, #32
 80026e6:	f000 f86f 	bl	80027c8 <read_single_icm20948_reg>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d82b      	bhi.n	800274c <icm20948_accel_full_scale_select+0x74>
 80026f4:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <icm20948_accel_full_scale_select+0x24>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	08002717 	.word	0x08002717
 8002704:	08002729 	.word	0x08002729
 8002708:	0800273b 	.word	0x0800273b
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <icm20948_accel_full_scale_select+0x88>)
 800270e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8002712:	601a      	str	r2, [r3, #0]
			break;
 8002714:	e01a      	b.n	800274c <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <icm20948_accel_full_scale_select+0x88>)
 8002720:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002724:	601a      	str	r2, [r3, #0]
			break;
 8002726:	e011      	b.n	800274c <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <icm20948_accel_full_scale_select+0x88>)
 8002732:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8002736:	601a      	str	r2, [r3, #0]
			break;
 8002738:	e008      	b.n	800274c <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	f043 0306 	orr.w	r3, r3, #6
 8002740:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <icm20948_accel_full_scale_select+0x88>)
 8002744:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002748:	601a      	str	r2, [r3, #0]
			break;
 800274a:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	461a      	mov	r2, r3
 8002750:	2114      	movs	r1, #20
 8002752:	2020      	movs	r0, #32
 8002754:	f000 f864 	bl	8002820 <write_single_icm20948_reg>
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000094 	.word	0x20000094

08002764 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8002768:	2201      	movs	r2, #1
 800276a:	2104      	movs	r1, #4
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <cs_high+0x14>)
 800276e:	f003 fa83 	bl	8005c78 <HAL_GPIO_WritePin>
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000

0800277c <cs_low>:

static void cs_low()
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	2104      	movs	r1, #4
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <cs_low+0x14>)
 8002786:	f003 fa77 	bl	8005c78 <HAL_GPIO_WritePin>
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000

08002794 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 800279e:	237f      	movs	r3, #127	; 0x7f
 80027a0:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	737b      	strb	r3, [r7, #13]

	cs_low();
 80027a6:	f7ff ffe9 	bl	800277c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80027aa:	f107 010c 	add.w	r1, r7, #12
 80027ae:	230a      	movs	r3, #10
 80027b0:	2202      	movs	r2, #2
 80027b2:	4804      	ldr	r0, [pc, #16]	; (80027c4 <select_user_bank+0x30>)
 80027b4:	f003 ff91 	bl	80066da <HAL_SPI_Transmit>
	cs_high();
 80027b8:	f7ff ffd4 	bl	8002764 <cs_high>
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000228 	.word	0x20000228

080027c8 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	460a      	mov	r2, r1
 80027d2:	71fb      	strb	r3, [r7, #7]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 80027d8:	79bb      	ldrb	r3, [r7, #6]
 80027da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ffd5 	bl	8002794 <select_user_bank>

	cs_low();
 80027ea:	f7ff ffc7 	bl	800277c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80027ee:	f107 010f 	add.w	r1, r7, #15
 80027f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f6:	2201      	movs	r2, #1
 80027f8:	4808      	ldr	r0, [pc, #32]	; (800281c <read_single_icm20948_reg+0x54>)
 80027fa:	f003 ff6e 	bl	80066da <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80027fe:	f107 010e 	add.w	r1, r7, #14
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	2201      	movs	r2, #1
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <read_single_icm20948_reg+0x54>)
 800280a:	f004 f8a2 	bl	8006952 <HAL_SPI_Receive>
	cs_high();
 800280e:	f7ff ffa9 	bl	8002764 <cs_high>

	return reg_val;
 8002812:	7bbb      	ldrb	r3, [r7, #14]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000228 	.word	0x20000228

08002820 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
 800282a:	460b      	mov	r3, r1
 800282c:	71bb      	strb	r3, [r7, #6]
 800282e:	4613      	mov	r3, r2
 8002830:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8002832:	79bb      	ldrb	r3, [r7, #6]
 8002834:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8002836:	797b      	ldrb	r3, [r7, #5]
 8002838:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ffa9 	bl	8002794 <select_user_bank>

	cs_low();
 8002842:	f7ff ff9b 	bl	800277c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8002846:	f107 010c 	add.w	r1, r7, #12
 800284a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284e:	2202      	movs	r2, #2
 8002850:	4804      	ldr	r0, [pc, #16]	; (8002864 <write_single_icm20948_reg+0x44>)
 8002852:	f003 ff42 	bl	80066da <HAL_SPI_Transmit>
	cs_high();
 8002856:	f7ff ff85 	bl	8002764 <cs_high>
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000228 	.word	0x20000228

08002868 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
 8002872:	460b      	mov	r3, r1
 8002874:	71bb      	strb	r3, [r7, #6]
 8002876:	4613      	mov	r3, r2
 8002878:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 800287a:	79bb      	ldrb	r3, [r7, #6]
 800287c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002880:	b2db      	uxtb	r3, r3
 8002882:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff84 	bl	8002794 <select_user_bank>

	cs_low();
 800288c:	f7ff ff76 	bl	800277c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8002890:	f107 010f 	add.w	r1, r7, #15
 8002894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002898:	2201      	movs	r2, #1
 800289a:	4809      	ldr	r0, [pc, #36]	; (80028c0 <read_multiple_icm20948_reg+0x58>)
 800289c:	f003 ff1d 	bl	80066da <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80028a0:	797b      	ldrb	r3, [r7, #5]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a8:	4906      	ldr	r1, [pc, #24]	; (80028c4 <read_multiple_icm20948_reg+0x5c>)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <read_multiple_icm20948_reg+0x58>)
 80028ac:	f004 f851 	bl	8006952 <HAL_SPI_Receive>
	cs_high();
 80028b0:	f7ff ff58 	bl	8002764 <cs_high>

	return reg_val;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <read_multiple_icm20948_reg+0x5c>)
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000228 	.word	0x20000228
 80028c4:	20000098 	.word	0x20000098

080028c8 <read_single_ak09916_reg>:
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
	cs_high();
}

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80028d2:	228c      	movs	r2, #140	; 0x8c
 80028d4:	2103      	movs	r1, #3
 80028d6:	2030      	movs	r0, #48	; 0x30
 80028d8:	f7ff ffa2 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	461a      	mov	r2, r3
 80028e0:	2104      	movs	r1, #4
 80028e2:	2030      	movs	r0, #48	; 0x30
 80028e4:	f7ff ff9c 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80028e8:	2281      	movs	r2, #129	; 0x81
 80028ea:	2105      	movs	r1, #5
 80028ec:	2030      	movs	r0, #48	; 0x30
 80028ee:	f7ff ff97 	bl	8002820 <write_single_icm20948_reg>

	HAL_Delay(1);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f002 f88a 	bl	8004a0c <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 80028f8:	213b      	movs	r1, #59	; 0x3b
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7ff ff64 	bl	80027c8 <read_single_icm20948_reg>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	4603      	mov	r3, r0
 8002912:	460a      	mov	r2, r1
 8002914:	71fb      	strb	r3, [r7, #7]
 8002916:	4613      	mov	r3, r2
 8002918:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 800291a:	220c      	movs	r2, #12
 800291c:	2103      	movs	r1, #3
 800291e:	2030      	movs	r0, #48	; 0x30
 8002920:	f7ff ff7e 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	461a      	mov	r2, r3
 8002928:	2104      	movs	r1, #4
 800292a:	2030      	movs	r0, #48	; 0x30
 800292c:	f7ff ff78 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	461a      	mov	r2, r3
 8002934:	2106      	movs	r1, #6
 8002936:	2030      	movs	r0, #48	; 0x30
 8002938:	f7ff ff72 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 800293c:	2281      	movs	r2, #129	; 0x81
 800293e:	2105      	movs	r1, #5
 8002940:	2030      	movs	r0, #48	; 0x30
 8002942:	f7ff ff6d 	bl	8002820 <write_single_icm20948_reg>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	460a      	mov	r2, r1
 8002958:	71fb      	strb	r3, [r7, #7]
 800295a:	4613      	mov	r3, r2
 800295c:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 800295e:	228c      	movs	r2, #140	; 0x8c
 8002960:	2103      	movs	r1, #3
 8002962:	2030      	movs	r0, #48	; 0x30
 8002964:	f7ff ff5c 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	461a      	mov	r2, r3
 800296c:	2104      	movs	r1, #4
 800296e:	2030      	movs	r0, #48	; 0x30
 8002970:	f7ff ff56 	bl	8002820 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8002974:	79bb      	ldrb	r3, [r7, #6]
 8002976:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	2105      	movs	r1, #5
 8002980:	2030      	movs	r0, #48	; 0x30
 8002982:	f7ff ff4d 	bl	8002820 <write_single_icm20948_reg>

	HAL_Delay(1);
 8002986:	2001      	movs	r0, #1
 8002988:	f002 f840 	bl	8004a0c <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	461a      	mov	r2, r3
 8002990:	213b      	movs	r1, #59	; 0x3b
 8002992:	2000      	movs	r0, #0
 8002994:	f7ff ff68 	bl	8002868 <read_multiple_icm20948_reg>
 8002998:	4603      	mov	r3, r0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029aa:	463b      	mov	r3, r7
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029b6:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029b8:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <MX_ADC1_Init+0x9c>)
 80029ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029bc:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029de:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029e6:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <MX_ADC1_Init+0xa0>)
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029ea:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <MX_ADC1_Init+0x98>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <MX_ADC1_Init+0x98>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a04:	480d      	ldr	r0, [pc, #52]	; (8002a3c <MX_ADC1_Init+0x98>)
 8002a06:	f002 f825 	bl	8004a54 <HAL_ADC_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002a10:	f001 fa5a 	bl	8003ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002a14:	2302      	movs	r3, #2
 8002a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a20:	463b      	mov	r3, r7
 8002a22:	4619      	mov	r1, r3
 8002a24:	4805      	ldr	r0, [pc, #20]	; (8002a3c <MX_ADC1_Init+0x98>)
 8002a26:	f002 f859 	bl	8004adc <HAL_ADC_ConfigChannel>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a30:	f001 fa4a 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200000a8 	.word	0x200000a8
 8002a40:	40012000 	.word	0x40012000
 8002a44:	0f000001 	.word	0x0f000001

08002a48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	; 0x30
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a31      	ldr	r2, [pc, #196]	; (8002b2c <HAL_ADC_MspInit+0xe4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d15b      	bne.n	8002b22 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a2f      	ldr	r2, [pc, #188]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	61bb      	str	r3, [r7, #24]
 8002a84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a28      	ldr	r2, [pc, #160]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a21      	ldr	r2, [pc, #132]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <HAL_ADC_MspInit+0xe8>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_AMP_36V_Pin|ADC_VOLT_BAT_Pin|ADC_VOLT_PWR_ST_Pin;
 8002ada:	230d      	movs	r3, #13
 8002adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4619      	mov	r1, r3
 8002aec:	4811      	ldr	r0, [pc, #68]	; (8002b34 <HAL_ADC_MspInit+0xec>)
 8002aee:	f002 ff27 	bl	8005940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IK_CENTER_Pin|ADC_IK_BACK_LEFT_Pin|ADC_IK_BACK_RIGHT_Pin|ADC_IK_FRONT_LEFT_Pin
 8002af2:	237c      	movs	r3, #124	; 0x7c
 8002af4:	61fb      	str	r3, [r7, #28]
                          |ADC_IK_FRONT_RIGHT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af6:	2303      	movs	r3, #3
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f107 031c 	add.w	r3, r7, #28
 8002b02:	4619      	mov	r1, r3
 8002b04:	480c      	ldr	r0, [pc, #48]	; (8002b38 <HAL_ADC_MspInit+0xf0>)
 8002b06:	f002 ff1b 	bl	8005940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_AMP_5V_Pin|ADC_AMP_12V_Pin;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4807      	ldr	r0, [pc, #28]	; (8002b3c <HAL_ADC_MspInit+0xf4>)
 8002b1e:	f002 ff0f 	bl	8005940 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002b22:	bf00      	nop
 8002b24:	3730      	adds	r7, #48	; 0x30
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40012000 	.word	0x40012000
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020800 	.word	0x40020800
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40020400 	.word	0x40020400

08002b40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <MX_DMA_Init+0x6c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <MX_DMA_Init+0x6c>)
 8002b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <MX_DMA_Init+0x6c>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2100      	movs	r1, #0
 8002b66:	200d      	movs	r0, #13
 8002b68:	f002 fab1 	bl	80050ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002b6c:	200d      	movs	r0, #13
 8002b6e:	f002 faca 	bl	8005106 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	200f      	movs	r0, #15
 8002b78:	f002 faa9 	bl	80050ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002b7c:	200f      	movs	r0, #15
 8002b7e:	f002 fac2 	bl	8005106 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	2010      	movs	r0, #16
 8002b88:	f002 faa1 	bl	80050ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b8c:	2010      	movs	r0, #16
 8002b8e:	f002 faba 	bl	8005106 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	2011      	movs	r0, #17
 8002b98:	f002 fa99 	bl	80050ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b9c:	2011      	movs	r0, #17
 8002b9e:	f002 fab2 	bl	8005106 <HAL_NVIC_EnableIRQ>

}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800

08002bb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	f107 031c 	add.w	r3, r7, #28
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	4b48      	ldr	r3, [pc, #288]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a47      	ldr	r2, [pc, #284]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002bd0:	f043 0310 	orr.w	r3, r3, #16
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b45      	ldr	r3, [pc, #276]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	61bb      	str	r3, [r7, #24]
 8002be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	4b41      	ldr	r3, [pc, #260]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a40      	ldr	r2, [pc, #256]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002bec:	f043 0304 	orr.w	r3, r3, #4
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b3e      	ldr	r3, [pc, #248]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a39      	ldr	r2, [pc, #228]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	4b33      	ldr	r3, [pc, #204]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a32      	ldr	r2, [pc, #200]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b30      	ldr	r3, [pc, #192]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	4b2c      	ldr	r3, [pc, #176]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a2b      	ldr	r2, [pc, #172]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b29      	ldr	r3, [pc, #164]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	4b25      	ldr	r3, [pc, #148]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a24      	ldr	r2, [pc, #144]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c5c:	f043 0308 	orr.w	r3, r3, #8
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b22      	ldr	r3, [pc, #136]	; (8002cec <MX_GPIO_Init+0x13c>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2104      	movs	r1, #4
 8002c72:	481f      	ldr	r0, [pc, #124]	; (8002cf0 <MX_GPIO_Init+0x140>)
 8002c74:	f003 f800 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRIVER_STEP_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2130      	movs	r1, #48	; 0x30
 8002c7c:	481d      	ldr	r0, [pc, #116]	; (8002cf4 <MX_GPIO_Init+0x144>)
 8002c7e:	f002 fffb 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8002c82:	2200      	movs	r2, #0
 8002c84:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002c88:	481b      	ldr	r0, [pc, #108]	; (8002cf8 <MX_GPIO_Init+0x148>)
 8002c8a:	f002 fff5 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c92:	2301      	movs	r3, #1
 8002c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8002c9e:	f107 031c 	add.w	r3, r7, #28
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4812      	ldr	r0, [pc, #72]	; (8002cf0 <MX_GPIO_Init+0x140>)
 8002ca6:	f002 fe4b 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DRIVER_STEP_Pin|DRIVER_DIR_Pin;
 8002caa:	2330      	movs	r3, #48	; 0x30
 8002cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cba:	f107 031c 	add.w	r3, r7, #28
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	480c      	ldr	r0, [pc, #48]	; (8002cf4 <MX_GPIO_Init+0x144>)
 8002cc2:	f002 fe3d 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8002cc6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4806      	ldr	r0, [pc, #24]	; (8002cf8 <MX_GPIO_Init+0x148>)
 8002ce0:	f002 fe2e 	bl	8005940 <HAL_GPIO_Init>

}
 8002ce4:	bf00      	nop
 8002ce6:	3730      	adds	r7, #48	; 0x30
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40020800 	.word	0x40020800
 8002cf8:	40020c00 	.word	0x40020c00

08002cfc <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef Res;

	if (UartHandle->Instance == UART4){ // Jetson commutation
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a71      	ldr	r2, [pc, #452]	; (8002ed0 <HAL_UART_RxCpltCallback+0x1d4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d16b      	bne.n	8002de6 <HAL_UART_RxCpltCallback+0xea>
		if (USART1ReceiveState == 0){
 8002d0e:	4b71      	ldr	r3, [pc, #452]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d11f      	bne.n	8002d58 <HAL_UART_RxCpltCallback+0x5c>
			if ((SerialOnBoardRequest.CR != 13) || (SerialOnBoardRequest.LF != 10)){
 8002d18:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002d1a:	7a1b      	ldrb	r3, [r3, #8]
 8002d1c:	2b0d      	cmp	r3, #13
 8002d1e:	d103      	bne.n	8002d28 <HAL_UART_RxCpltCallback+0x2c>
 8002d20:	4b6d      	ldr	r3, [pc, #436]	; (8002ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002d22:	7a5b      	ldrb	r3, [r3, #9]
 8002d24:	2b0a      	cmp	r3, #10
 8002d26:	d00c      	beq.n	8002d42 <HAL_UART_RxCpltCallback+0x46>
				Res = HAL_UART_Receive_DMA(&huart4, LostByte, 1);
 8002d28:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	4619      	mov	r1, r3
 8002d30:	486b      	ldr	r0, [pc, #428]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002d32:	f005 f855 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002d36:	4603      	mov	r3, r0
 8002d38:	73fb      	strb	r3, [r7, #15]
				USART1ReceiveState = 1;
 8002d3a:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e042      	b.n	8002dc8 <HAL_UART_RxCpltCallback+0xcc>
			}
			else{
 				USART1ReceiveState = 10;
 8002d42:	4b64      	ldr	r3, [pc, #400]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d44:	220a      	movs	r2, #10
 8002d46:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8002d48:	220a      	movs	r2, #10
 8002d4a:	4963      	ldr	r1, [pc, #396]	; (8002ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002d4c:	4864      	ldr	r0, [pc, #400]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002d4e:	f005 f847 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002d52:	4603      	mov	r3, r0
 8002d54:	73fb      	strb	r3, [r7, #15]
 8002d56:	e037      	b.n	8002dc8 <HAL_UART_RxCpltCallback+0xcc>
			}
		}
		else{
			if(USART1ReceiveState == 1){
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d111      	bne.n	8002d86 <HAL_UART_RxCpltCallback+0x8a>
				if (LostByte[0] == 13){
 8002d62:	4b5e      	ldr	r3, [pc, #376]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b0d      	cmp	r3, #13
 8002d6a:	d102      	bne.n	8002d72 <HAL_UART_RxCpltCallback+0x76>
					USART1ReceiveState = 2;
 8002d6c:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d6e:	2202      	movs	r2, #2
 8002d70:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)LostByte, 1);
 8002d72:	4b5a      	ldr	r3, [pc, #360]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4859      	ldr	r0, [pc, #356]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002d7c:	f005 f830 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002d80:	4603      	mov	r3, r0
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e020      	b.n	8002dc8 <HAL_UART_RxCpltCallback+0xcc>
			}
			else{
				if (USART1ReceiveState == 2){
 8002d86:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_UART_RxCpltCallback+0xcc>
					if (LostByte[0] == 10){
 8002d90:	4b52      	ldr	r3, [pc, #328]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b0a      	cmp	r3, #10
 8002d98:	d10a      	bne.n	8002db0 <HAL_UART_RxCpltCallback+0xb4>
						USART1ReceiveState = 0;
 8002d9a:	4b4e      	ldr	r3, [pc, #312]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8002da0:	220a      	movs	r2, #10
 8002da2:	494d      	ldr	r1, [pc, #308]	; (8002ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002da4:	484e      	ldr	r0, [pc, #312]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002da6:	f005 f81b 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	e00b      	b.n	8002dc8 <HAL_UART_RxCpltCallback+0xcc>
					}
					else{
						USART1ReceiveState = 1;
 8002db0:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)LostByte, 1);
 8002db6:	4b49      	ldr	r3, [pc, #292]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4848      	ldr	r0, [pc, #288]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002dc0:	f005 f80e 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}
		if (Res != HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_UART_RxCpltCallback+0xea>
		{
			MX_UART4_Init();
 8002dce:	f001 fbd1 	bl	8004574 <MX_UART4_Init>
			USART1ReceiveState = 0;
 8002dd2:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart4, (uint8_t*)SerialOnBoardRequest.Buffer, ON_BOARD_CONTROL_REQUEST_SIZE);
 8002dd8:	220a      	movs	r2, #10
 8002dda:	493f      	ldr	r1, [pc, #252]	; (8002ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8002ddc:	4840      	ldr	r0, [pc, #256]	; (8002ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8002dde:	f004 ffff 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002de2:	4603      	mov	r3, r0
 8002de4:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (UartHandle->Instance == USART2)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a3e      	ldr	r2, [pc, #248]	; (8002ee4 <HAL_UART_RxCpltCallback+0x1e8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d16b      	bne.n	8002ec8 <HAL_UART_RxCpltCallback+0x1cc>
	{
		if (USART2ReceiveState == 0)
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d11f      	bne.n	8002e3a <HAL_UART_RxCpltCallback+0x13e>
		{
			if ((SerialControlWheelsResponce.CR != 13) || (SerialControlWheelsResponce.LF != 10))
 8002dfa:	4b3c      	ldr	r3, [pc, #240]	; (8002eec <HAL_UART_RxCpltCallback+0x1f0>)
 8002dfc:	7b9b      	ldrb	r3, [r3, #14]
 8002dfe:	2b0d      	cmp	r3, #13
 8002e00:	d103      	bne.n	8002e0a <HAL_UART_RxCpltCallback+0x10e>
 8002e02:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <HAL_UART_RxCpltCallback+0x1f0>)
 8002e04:	7bdb      	ldrb	r3, [r3, #15]
 8002e06:	2b0a      	cmp	r3, #10
 8002e08:	d00c      	beq.n	8002e24 <HAL_UART_RxCpltCallback+0x128>
			{
				Res = HAL_UART_Receive_DMA(&huart2, LostByte, 1);
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4619      	mov	r1, r3
 8002e12:	4837      	ldr	r0, [pc, #220]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002e14:	f004 ffe4 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	73fb      	strb	r3, [r7, #15]
				USART2ReceiveState = 1;
 8002e1c:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	e042      	b.n	8002eaa <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				USART2ReceiveState = 10;
 8002e24:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e26:	220a      	movs	r2, #10
 8002e28:	701a      	strb	r2, [r3, #0]
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	492f      	ldr	r1, [pc, #188]	; (8002eec <HAL_UART_RxCpltCallback+0x1f0>)
 8002e2e:	4830      	ldr	r0, [pc, #192]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002e30:	f004 ffd6 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002e34:	4603      	mov	r3, r0
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e037      	b.n	8002eaa <HAL_UART_RxCpltCallback+0x1ae>
			}
		}
		else
		{
			if(USART2ReceiveState == 1)
 8002e3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d111      	bne.n	8002e68 <HAL_UART_RxCpltCallback+0x16c>
			{
				if (LostByte[0] == 13)
 8002e44:	4b25      	ldr	r3, [pc, #148]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b0d      	cmp	r3, #13
 8002e4c:	d102      	bne.n	8002e54 <HAL_UART_RxCpltCallback+0x158>
				{
					USART2ReceiveState = 2;
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e50:	2202      	movs	r2, #2
 8002e52:	701a      	strb	r2, [r3, #0]
				}
				Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8002e54:	4b21      	ldr	r3, [pc, #132]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4824      	ldr	r0, [pc, #144]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002e5e:	f004 ffbf 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002e62:	4603      	mov	r3, r0
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e020      	b.n	8002eaa <HAL_UART_RxCpltCallback+0x1ae>
			}
			else
			{
				if (USART2ReceiveState == 2)
 8002e68:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d11b      	bne.n	8002eaa <HAL_UART_RxCpltCallback+0x1ae>
				{
					if (LostByte[0] == 10)
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b0a      	cmp	r3, #10
 8002e7a:	d10a      	bne.n	8002e92 <HAL_UART_RxCpltCallback+0x196>
					{
						USART2ReceiveState = 0;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002e82:	2210      	movs	r2, #16
 8002e84:	4919      	ldr	r1, [pc, #100]	; (8002eec <HAL_UART_RxCpltCallback+0x1f0>)
 8002e86:	481a      	ldr	r0, [pc, #104]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002e88:	f004 ffaa 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	e00b      	b.n	8002eaa <HAL_UART_RxCpltCallback+0x1ae>
					}
					else
					{
						USART2ReceiveState = 1;
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
						Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)LostByte, 1);
 8002e98:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_UART_RxCpltCallback+0x1e0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4813      	ldr	r0, [pc, #76]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002ea2:	f004 ff9d 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	73fb      	strb	r3, [r7, #15]
					}
				}
			}
		}

		if (Res != HAL_OK)
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <HAL_UART_RxCpltCallback+0x1cc>
		{
			MX_USART2_UART_Init();
 8002eb0:	f001 fb8a 	bl	80045c8 <MX_USART2_UART_Init>
			USART2ReceiveState = 0;
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
			Res = HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8002eba:	2210      	movs	r2, #16
 8002ebc:	490b      	ldr	r1, [pc, #44]	; (8002eec <HAL_UART_RxCpltCallback+0x1f0>)
 8002ebe:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8002ec0:	f004 ff8e 	bl	8007de0 <HAL_UART_Receive_DMA>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	73fb      	strb	r3, [r7, #15]
		}
	}
}
 8002ec8:	bf00      	nop
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40004c00 	.word	0x40004c00
 8002ed4:	2000009e 	.word	0x2000009e
 8002ed8:	200001a0 	.word	0x200001a0
 8002edc:	20000224 	.word	0x20000224
 8002ee0:	200004c0 	.word	0x200004c0
 8002ee4:	40004400 	.word	0x40004400
 8002ee8:	2000009f 	.word	0x2000009f
 8002eec:	20000108 	.word	0x20000108
 8002ef0:	20000504 	.word	0x20000504

08002ef4 <HallActualize>:
int HallActualize(float NewStep, float LastStep, float difference)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	ed87 0a03 	vstr	s0, [r7, #12]
 8002efe:	edc7 0a02 	vstr	s1, [r7, #8]
 8002f02:	ed87 1a01 	vstr	s2, [r7, #4]
	float MIN_VAL = LastStep - difference;
 8002f06:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f12:	edc7 7a05 	vstr	s15, [r7, #20]
	float MAX_VAL = LastStep + difference;
 8002f16:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f22:	edc7 7a04 	vstr	s15, [r7, #16]

	if ((NewStep < MAX_VAL) && (NewStep > MIN_VAL))
 8002f26:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f36:	d50a      	bpl.n	8002f4e <HallActualize+0x5a>
 8002f38:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f48:	dd01      	ble.n	8002f4e <HallActualize+0x5a>
	{
		return 1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HallActualize+0x5c>
	}
	return 0;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <IMU_INIT>:
void IMU_INIT()
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	gyroscopeSensitivity.axis.x = 1.0f;
 8002f60:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <IMU_INIT+0x70>)
 8002f62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f66:	601a      	str	r2, [r3, #0]
	gyroscopeSensitivity.axis.y = 1.0f;
 8002f68:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <IMU_INIT+0x70>)
 8002f6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f6e:	605a      	str	r2, [r3, #4]
	gyroscopeSensitivity.axis.z = 1.0f;
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <IMU_INIT+0x70>)
 8002f72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f76:	609a      	str	r2, [r3, #8]

	accelerometerSensitivity.axis.x = 1.0f;
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <IMU_INIT+0x74>)
 8002f7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f7e:	601a      	str	r2, [r3, #0]
	accelerometerSensitivity.axis.y = 1.0f;
 8002f80:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <IMU_INIT+0x74>)
 8002f82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f86:	605a      	str	r2, [r3, #4]
	accelerometerSensitivity.axis.z = 1.0f;
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <IMU_INIT+0x74>)
 8002f8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f8e:	609a      	str	r2, [r3, #8]

	hardIronBias.axis.x = 0.0f;
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <IMU_INIT+0x78>)
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
	hardIronBias.axis.y = 0.0f;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <IMU_INIT+0x78>)
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	605a      	str	r2, [r3, #4]
	hardIronBias.axis.z = 0.0f;
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <IMU_INIT+0x78>)
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]

	FusionBiasInitialise(&fusionBias, 0.5f, samplePeriod);
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <IMU_INIT+0x7c>)
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	eef0 0a67 	vmov.f32	s1, s15
 8002fb2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002fb6:	4809      	ldr	r0, [pc, #36]	; (8002fdc <IMU_INIT+0x80>)
 8002fb8:	f7fe fec6 	bl	8001d48 <FusionBiasInitialise>
	FusionAhrsInitialise(&fusionAhrs, 0.5f);
 8002fbc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002fc0:	4807      	ldr	r0, [pc, #28]	; (8002fe0 <IMU_INIT+0x84>)
 8002fc2:	f7fd fdb3 	bl	8000b2c <FusionAhrsInitialise>
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200001b8 	.word	0x200001b8
 8002fd0:	20000208 	.word	0x20000208
 8002fd4:	200001d0 	.word	0x200001d0
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	20000160 	.word	0x20000160
 8002fe0:	20000130 	.word	0x20000130

08002fe4 <IMU_UPDATE>:
void IMU_UPDATE()
{
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
 8002fea:	af00      	add	r7, sp, #0
	icm20948_gyro_read_dps(&my_gyro);
 8002fec:	48d3      	ldr	r0, [pc, #844]	; (800333c <IMU_UPDATE+0x358>)
 8002fee:	f7ff f925 	bl	800223c <icm20948_gyro_read_dps>
	icm20948_accel_read_g(&my_accel);
 8002ff2:	48d3      	ldr	r0, [pc, #844]	; (8003340 <IMU_UPDATE+0x35c>)
 8002ff4:	f7ff f950 	bl	8002298 <icm20948_accel_read_g>
	ak09916_mag_read_uT(&my_mag);
 8002ff8:	48d2      	ldr	r0, [pc, #840]	; (8003344 <IMU_UPDATE+0x360>)
 8002ffa:	f7ff f97d 	bl	80022f8 <ak09916_mag_read_uT>

	uncalibratedGyroscope.axis.x = my_gyro.x;
 8002ffe:	4bcf      	ldr	r3, [pc, #828]	; (800333c <IMU_UPDATE+0x358>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4ad1      	ldr	r2, [pc, #836]	; (8003348 <IMU_UPDATE+0x364>)
 8003004:	6013      	str	r3, [r2, #0]
	uncalibratedGyroscope.axis.y = my_gyro.y;
 8003006:	4bcd      	ldr	r3, [pc, #820]	; (800333c <IMU_UPDATE+0x358>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	4acf      	ldr	r2, [pc, #828]	; (8003348 <IMU_UPDATE+0x364>)
 800300c:	6053      	str	r3, [r2, #4]
	uncalibratedGyroscope.axis.z = my_gyro.z;
 800300e:	4bcb      	ldr	r3, [pc, #812]	; (800333c <IMU_UPDATE+0x358>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	4acd      	ldr	r2, [pc, #820]	; (8003348 <IMU_UPDATE+0x364>)
 8003014:	6093      	str	r3, [r2, #8]

	uncalibratedAccelerometer.axis.x = my_accel.x;
 8003016:	4bca      	ldr	r3, [pc, #808]	; (8003340 <IMU_UPDATE+0x35c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4acc      	ldr	r2, [pc, #816]	; (800334c <IMU_UPDATE+0x368>)
 800301c:	6013      	str	r3, [r2, #0]
	uncalibratedAccelerometer.axis.y = my_accel.y;
 800301e:	4bc8      	ldr	r3, [pc, #800]	; (8003340 <IMU_UPDATE+0x35c>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4aca      	ldr	r2, [pc, #808]	; (800334c <IMU_UPDATE+0x368>)
 8003024:	6053      	str	r3, [r2, #4]
	uncalibratedAccelerometer.axis.z = my_accel.z;
 8003026:	4bc6      	ldr	r3, [pc, #792]	; (8003340 <IMU_UPDATE+0x35c>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	4ac8      	ldr	r2, [pc, #800]	; (800334c <IMU_UPDATE+0x368>)
 800302c:	6093      	str	r3, [r2, #8]

	uncalibratedMagnetometer.axis.x = my_mag.x;
 800302e:	4bc5      	ldr	r3, [pc, #788]	; (8003344 <IMU_UPDATE+0x360>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4ac7      	ldr	r2, [pc, #796]	; (8003350 <IMU_UPDATE+0x36c>)
 8003034:	6013      	str	r3, [r2, #0]
	uncalibratedMagnetometer.axis.y = my_mag.y;
 8003036:	4bc3      	ldr	r3, [pc, #780]	; (8003344 <IMU_UPDATE+0x360>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4ac5      	ldr	r2, [pc, #788]	; (8003350 <IMU_UPDATE+0x36c>)
 800303c:	6053      	str	r3, [r2, #4]
	uncalibratedMagnetometer.axis.z = my_mag.z;
 800303e:	4bc1      	ldr	r3, [pc, #772]	; (8003344 <IMU_UPDATE+0x360>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	4ac3      	ldr	r2, [pc, #780]	; (8003350 <IMU_UPDATE+0x36c>)
 8003044:	6093      	str	r3, [r2, #8]

	FusionVector3 calibratedGyroscope = FusionCalibrationInertial(uncalibratedGyroscope, FUSION_ROTATION_MATRIX_IDENTITY, gyroscopeSensitivity, FUSION_VECTOR3_ZERO);
 8003046:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800304a:	4ac2      	ldr	r2, [pc, #776]	; (8003354 <IMU_UPDATE+0x370>)
 800304c:	461c      	mov	r4, r3
 800304e:	4615      	mov	r5, r2
 8003050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003058:	682b      	ldr	r3, [r5, #0]
 800305a:	6023      	str	r3, [r4, #0]
 800305c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
 800307a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800307e:	4ab2      	ldr	r2, [pc, #712]	; (8003348 <IMU_UPDATE+0x364>)
 8003080:	ca07      	ldmia	r2, {r0, r1, r2}
 8003082:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003086:	463a      	mov	r2, r7
 8003088:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800308c:	4614      	mov	r4, r2
 800308e:	461d      	mov	r5, r3
 8003090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003098:	682b      	ldr	r3, [r5, #0]
 800309a:	6023      	str	r3, [r4, #0]
 800309c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80030a0:	4aad      	ldr	r2, [pc, #692]	; (8003358 <IMU_UPDATE+0x374>)
 80030a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80030a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030a8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80030ac:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80030b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80030b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030b6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80030ba:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80030be:	ca07      	ldmia	r2, {r0, r1, r2}
 80030c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030c4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80030c8:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 80030cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80030ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return vectorB subtracted from vectorA.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorSubtract(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80030d2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80030d6:	ed93 7a00 	vldr	s14, [r3]
 80030da:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e6:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80030ea:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80030ee:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80030f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80030f6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80030fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80030fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003102:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8003106:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 800310a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800310e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003112:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8003116:	edd3 7a02 	vldr	s15, [r3, #8]
 800311a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800311e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8003122:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003126:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 800312a:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800312e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003130:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003134:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003138:	f507 7242 	add.w	r2, r7, #776	; 0x308
 800313c:	ca07      	ldmia	r2, {r0, r1, r2}
 800313e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003142:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003146:	461c      	mov	r4, r3
 8003148:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800314c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003150:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003154:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8003158:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 800315c:	ca07      	ldmia	r2, {r0, r1, r2}
 800315e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param vectorB Second vector of the operation.
 * @return Hadamard product of vectorA and vectorB.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionVectorHadamardProduct(const FusionVector3 vectorA, const FusionVector3 vectorB) {
    FusionVector3 result;
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 8003162:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003166:	ed93 7a00 	vldr	s14, [r3]
 800316a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800316e:	edd3 7a00 	vldr	s15, [r3]
 8003172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003176:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800317a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 800317e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003182:	ed93 7a01 	vldr	s14, [r3, #4]
 8003186:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800318a:	edd3 7a01 	vldr	s15, [r3, #4]
 800318e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003192:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003196:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 800319a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800319e:	ed93 7a02 	vldr	s14, [r3, #8]
 80031a2:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80031a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80031aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80031b2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80031b6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80031ba:	f507 7345 	add.w	r3, r7, #788	; 0x314
 80031be:	ca07      	ldmia	r2, {r0, r1, r2}
 80031c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031c4:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80031c8:	f507 7245 	add.w	r2, r7, #788	; 0x314
 80031cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80031d6:	463b      	mov	r3, r7
 80031d8:	4614      	mov	r4, r2
 80031da:	461d      	mov	r5, r3
 80031dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e4:	682b      	ldr	r3, [r5, #0]
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80031ec:	461c      	mov	r4, r3
 80031ee:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80031f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 * @return Rotation matrix multiplied with scalar.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionRotationMatrixMultiplyVector(const FusionRotationMatrix rotationMatrix, const FusionVector3 vector) {
#define R rotationMatrix.element // define shorthand label for more readable code
    FusionVector3 result;
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 80031fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031fe:	ed93 7a00 	vldr	s14, [r3]
 8003202:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800320e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003212:	edd3 6a01 	vldr	s13, [r3, #4]
 8003216:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800321a:	edd3 7a01 	vldr	s15, [r3, #4]
 800321e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322a:	edd3 6a02 	vldr	s13, [r3, #8]
 800322e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003232:	edd3 7a02 	vldr	s15, [r3, #8]
 8003236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800323a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003242:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 8003246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324a:	ed93 7a03 	vldr	s14, [r3, #12]
 800324e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003252:	edd3 7a00 	vldr	s15, [r3]
 8003256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800325a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325e:	edd3 6a04 	vldr	s13, [r3, #16]
 8003262:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003266:	edd3 7a01 	vldr	s15, [r3, #4]
 800326a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800326e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003276:	edd3 6a05 	vldr	s13, [r3, #20]
 800327a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800327e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800328a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800328e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 8003292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003296:	ed93 7a06 	vldr	s14, [r3, #24]
 800329a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800329e:	edd3 7a00 	vldr	s15, [r3]
 80032a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032aa:	edd3 6a07 	vldr	s13, [r3, #28]
 80032ae:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80032b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80032b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c2:	edd3 6a08 	vldr	s13, [r3, #32]
 80032c6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80032ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80032ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80032da:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80032de:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80032e2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80032e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80032e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80032ec:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80032f0:	f507 7248 	add.w	r2, r7, #800	; 0x320
 80032f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80032f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * per second per lsb for a gyroscope.
 * @param bias Bias in lsb.
 * @return Calibrated gyroscope or accelerometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationInertial(const FusionVector3 uncalibrated, const FusionRotationMatrix misalignment, const FusionVector3 sensitivity, const FusionVector3 bias) {
    return FusionRotationMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, bias), sensitivity));
 80032fa:	bf00      	nop
 80032fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003300:	f507 7251 	add.w	r2, r7, #836	; 0x344
 8003304:	ca07      	ldmia	r2, {r0, r1, r2}
 8003306:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	FusionVector3 calibratedAccelerometer = FusionCalibrationInertial(uncalibratedAccelerometer, FUSION_ROTATION_MATRIX_IDENTITY, accelerometerSensitivity, FUSION_VECTOR3_ZERO);
 800330a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330e:	4a11      	ldr	r2, [pc, #68]	; (8003354 <IMU_UPDATE+0x370>)
 8003310:	461c      	mov	r4, r3
 8003312:	4615      	mov	r5, r2
 8003314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800331a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	6023      	str	r3, [r4, #0]
 8003320:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8003338:	e010      	b.n	800335c <IMU_UPDATE+0x378>
 800333a:	bf00      	nop
 800333c:	20000214 	.word	0x20000214
 8003340:	200001ac 	.word	0x200001ac
 8003344:	200001dc 	.word	0x200001dc
 8003348:	200001fc 	.word	0x200001fc
 800334c:	20000190 	.word	0x20000190
 8003350:	200001e8 	.word	0x200001e8
 8003354:	08009470 	.word	0x08009470
 8003358:	200001b8 	.word	0x200001b8
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8003366:	4ae5      	ldr	r2, [pc, #916]	; (80036fc <IMU_UPDATE+0x718>)
 8003368:	ca07      	ldmia	r2, {r0, r1, r2}
 800336a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800336e:	463a      	mov	r2, r7
 8003370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003374:	4614      	mov	r4, r2
 8003376:	461d      	mov	r5, r3
 8003378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800337c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	6023      	str	r3, [r4, #0]
 8003384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003388:	4add      	ldr	r2, [pc, #884]	; (8003700 <IMU_UPDATE+0x71c>)
 800338a:	ca07      	ldmia	r2, {r0, r1, r2}
 800338c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003390:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8003394:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8003398:	ca07      	ldmia	r2, {r0, r1, r2}
 800339a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800339e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80033a2:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80033a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80033a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80033ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80033b0:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80033b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80033b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 80033ba:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80033be:	ed93 7a00 	vldr	s14, [r3]
 80033c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80033c6:	edd3 7a00 	vldr	s15, [r3]
 80033ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80033d2:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80033d6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80033da:	ed93 7a01 	vldr	s14, [r3, #4]
 80033de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80033e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80033e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80033ee:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80033f2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80033f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80033fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80033fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8003402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003406:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800340a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800340e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8003412:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003416:	ca07      	ldmia	r2, {r0, r1, r2}
 8003418:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800341c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003420:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8003424:	ca07      	ldmia	r2, {r0, r1, r2}
 8003426:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800342a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800342e:	461c      	mov	r4, r3
 8003430:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003434:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003438:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800343c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003440:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003444:	ca07      	ldmia	r2, {r0, r1, r2}
 8003446:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
 800344a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800344e:	ed93 7a00 	vldr	s14, [r3]
 8003452:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003456:	edd3 7a00 	vldr	s15, [r3]
 800345a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003462:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
 8003466:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800346a:	ed93 7a01 	vldr	s14, [r3, #4]
 800346e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003472:	edd3 7a01 	vldr	s15, [r3, #4]
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800347e:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
 8003482:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003486:	ed93 7a02 	vldr	s14, [r3, #8]
 800348a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800348e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003496:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800349a:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 800349e:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80034a2:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80034a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80034a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034ac:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80034b0:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 80034b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80034b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80034ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80034be:	463b      	mov	r3, r7
 80034c0:	4614      	mov	r4, r2
 80034c2:	461d      	mov	r5, r3
 80034c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034cc:	682b      	ldr	r3, [r5, #0]
 80034ce:	6023      	str	r3, [r4, #0]
 80034d0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80034d4:	461c      	mov	r4, r3
 80034d6:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80034da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 80034e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e6:	ed93 7a00 	vldr	s14, [r3]
 80034ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80034fe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003502:	edd3 7a01 	vldr	s15, [r3, #4]
 8003506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800350e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003512:	edd3 6a02 	vldr	s13, [r3, #8]
 8003516:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800351a:	edd3 7a02 	vldr	s15, [r3, #8]
 800351e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003526:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800352a:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 800352e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003532:	ed93 7a03 	vldr	s14, [r3, #12]
 8003536:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003546:	edd3 6a04 	vldr	s13, [r3, #16]
 800354a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800354e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355e:	edd3 6a05 	vldr	s13, [r3, #20]
 8003562:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003566:	edd3 7a02 	vldr	s15, [r3, #8]
 800356a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800356e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003572:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003576:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 800357a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003582:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003586:	edd3 7a00 	vldr	s15, [r3]
 800358a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800358e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003592:	edd3 6a07 	vldr	s13, [r3, #28]
 8003596:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800359a:	edd3 7a01 	vldr	s15, [r3, #4]
 800359e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035aa:	edd3 6a08 	vldr	s13, [r3, #32]
 80035ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80035b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80035b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035c2:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80035c6:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80035ca:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80035ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80035d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80035d4:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80035d8:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 80035dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80035de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80035e2:	bf00      	nop
 80035e4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80035e8:	461c      	mov	r4, r3
 80035ea:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 80035ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	FusionVector3 calibratedMagnetometer = FusionCalibrationMagnetic(uncalibratedMagnetometer, FUSION_ROTATION_MATRIX_IDENTITY, hardIronBias);
 80035f6:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80035fa:	4a42      	ldr	r2, [pc, #264]	; (8003704 <IMU_UPDATE+0x720>)
 80035fc:	461c      	mov	r4, r3
 80035fe:	4615      	mov	r5, r2
 8003600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003608:	682b      	ldr	r3, [r5, #0]
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003610:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <IMU_UPDATE+0x724>)
 8003612:	ca07      	ldmia	r2, {r0, r1, r2}
 8003614:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003618:	463a      	mov	r2, r7
 800361a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800361e:	4614      	mov	r4, r2
 8003620:	461d      	mov	r5, r3
 8003622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800362a:	682b      	ldr	r3, [r5, #0]
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003632:	4a36      	ldr	r2, [pc, #216]	; (800370c <IMU_UPDATE+0x728>)
 8003634:	ca07      	ldmia	r2, {r0, r1, r2}
 8003636:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800363a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800363e:	463b      	mov	r3, r7
 8003640:	4614      	mov	r4, r2
 8003642:	461d      	mov	r5, r3
 8003644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800364a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	6023      	str	r3, [r4, #0]
 8003650:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003654:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003658:	ca07      	ldmia	r2, {r0, r1, r2}
 800365a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 800365e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003662:	ed93 7a00 	vldr	s14, [r3]
 8003666:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003676:	edd3 6a01 	vldr	s13, [r3, #4]
 800367a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800367e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800368a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003692:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003696:	edd3 7a02 	vldr	s15, [r3, #8]
 800369a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800369e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036a6:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 80036aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80036b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036b6:	edd3 7a00 	vldr	s15, [r3]
 80036ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c2:	edd3 6a04 	vldr	s13, [r3, #16]
 80036c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80036ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036da:	edd3 6a05 	vldr	s13, [r3, #20]
 80036de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80036e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036f2:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 80036f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036fa:	e009      	b.n	8003710 <IMU_UPDATE+0x72c>
 80036fc:	20000190 	.word	0x20000190
 8003700:	20000208 	.word	0x20000208
 8003704:	08009470 	.word	0x08009470
 8003708:	200001e8 	.word	0x200001e8
 800370c:	200001d0 	.word	0x200001d0
 8003710:	ed93 7a06 	vldr	s14, [r3, #24]
 8003714:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003718:	edd3 7a00 	vldr	s15, [r3]
 800371c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003724:	edd3 6a07 	vldr	s13, [r3, #28]
 8003728:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800372c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003734:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800373c:	edd3 6a08 	vldr	s13, [r3, #32]
 8003740:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003744:	edd3 7a02 	vldr	s15, [r3, #8]
 8003748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800374c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003750:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003754:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 8003758:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800375c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003760:	ca07      	ldmia	r2, {r0, r1, r2}
 8003762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003766:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800376a:	f507 7224 	add.w	r2, r7, #656	; 0x290
 800376e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003770:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003774:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003778:	461c      	mov	r4, r3
 800377a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800377e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003786:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800378a:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800378e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003790:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    result.axis.x = vectorA.axis.x - vectorB.axis.x;
 8003794:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003798:	ed93 7a00 	vldr	s14, [r3]
 800379c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037ac:	edc3 7a00 	vstr	s15, [r3]
    result.axis.y = vectorA.axis.y - vectorB.axis.y;
 80037b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80037b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80037bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80037c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037c8:	edc3 7a01 	vstr	s15, [r3, #4]
    result.axis.z = vectorA.axis.z - vectorB.axis.z;
 80037cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80037d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80037d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80037d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80037dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037e4:	edc3 7a02 	vstr	s15, [r3, #8]
    return result;
 80037e8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80037ec:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80037f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80037f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037f6:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80037fa:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 80037fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8003800:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 * @param softIronMatrix Soft-iron matrix (may not be a true rotation matrix).
 * @param hardIronBias Hard-iron bias in uT.
 * @return Calibrated magnetometer measurement.
 */
static inline __attribute__((always_inline)) FusionVector3 FusionCalibrationMagnetic(const FusionVector3 uncalibrated, const FusionRotationMatrix softIronMatrix, const FusionVector3 hardIronBias) {
    return FusionVectorSubtract(FusionRotationMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronBias);
 8003804:	bf00      	nop
 8003806:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800380a:	461c      	mov	r4, r3
 800380c:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8003810:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003814:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	calibratedGyroscope = FusionBiasUpdate(&fusionBias, calibratedGyroscope);
 8003818:	edd7 6a9a 	vldr	s13, [r7, #616]	; 0x268
 800381c:	ed97 7a9b 	vldr	s14, [r7, #620]	; 0x26c
 8003820:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8003824:	eeb0 0a66 	vmov.f32	s0, s13
 8003828:	eef0 0a47 	vmov.f32	s1, s14
 800382c:	eeb0 1a67 	vmov.f32	s2, s15
 8003830:	488c      	ldr	r0, [pc, #560]	; (8003a64 <IMU_UPDATE+0xa80>)
 8003832:	f7fe fac5 	bl	8001dc0 <FusionBiasUpdate>
 8003836:	eef0 6a40 	vmov.f32	s13, s0
 800383a:	eeb0 7a60 	vmov.f32	s14, s1
 800383e:	eef0 7a41 	vmov.f32	s15, s2
 8003842:	edc7 6a9a 	vstr	s13, [r7, #616]	; 0x268
 8003846:	ed87 7a9b 	vstr	s14, [r7, #620]	; 0x26c
 800384a:	edc7 7a9c 	vstr	s15, [r7, #624]	; 0x270
	FusionAhrsUpdate(&fusionAhrs, calibratedGyroscope, calibratedAccelerometer, calibratedMagnetometer, samplePeriod);
 800384e:	4b86      	ldr	r3, [pc, #536]	; (8003a68 <IMU_UPDATE+0xa84>)
 8003850:	edd3 4a00 	vldr	s9, [r3]
 8003854:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003858:	ed93 3a00 	vldr	s6, [r3]
 800385c:	edd3 3a01 	vldr	s7, [r3, #4]
 8003860:	ed93 4a02 	vldr	s8, [r3, #8]
 8003864:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8003868:	ed93 5a00 	vldr	s10, [r3]
 800386c:	edd3 5a01 	vldr	s11, [r3, #4]
 8003870:	ed93 6a02 	vldr	s12, [r3, #8]
 8003874:	edd7 6a9a 	vldr	s13, [r7, #616]	; 0x268
 8003878:	ed97 7a9b 	vldr	s14, [r7, #620]	; 0x26c
 800387c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8003880:	eef0 1a45 	vmov.f32	s3, s10
 8003884:	eeb0 2a65 	vmov.f32	s4, s11
 8003888:	eef0 2a46 	vmov.f32	s5, s12
 800388c:	eeb0 0a66 	vmov.f32	s0, s13
 8003890:	eef0 0a47 	vmov.f32	s1, s14
 8003894:	eeb0 1a67 	vmov.f32	s2, s15
 8003898:	4874      	ldr	r0, [pc, #464]	; (8003a6c <IMU_UPDATE+0xa88>)
 800389a:	f7fd f985 	bl	8000ba8 <FusionAhrsUpdate>
	eulerAngles = FusionQuaternionToEulerAngles(FusionAhrsGetQuaternion(&fusionAhrs));
 800389e:	4873      	ldr	r0, [pc, #460]	; (8003a6c <IMU_UPDATE+0xa88>)
 80038a0:	f7fe fa0a 	bl	8001cb8 <FusionAhrsGetQuaternion>
 80038a4:	eeb0 6a40 	vmov.f32	s12, s0
 80038a8:	eef0 6a60 	vmov.f32	s13, s1
 80038ac:	eeb0 7a41 	vmov.f32	s14, s2
 80038b0:	eef0 7a61 	vmov.f32	s15, s3
 80038b4:	ed87 6a9d 	vstr	s12, [r7, #628]	; 0x274
 80038b8:	edc7 6a9e 	vstr	s13, [r7, #632]	; 0x278
 80038bc:	ed87 7a9f 	vstr	s14, [r7, #636]	; 0x27c
 80038c0:	edc7 7aa0 	vstr	s15, [r7, #640]	; 0x280
 80038c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80038c8:	461c      	mov	r4, r3
 80038ca:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80038ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 * @param quaternion Quaternion to be converted.
 * @return Euler angles in degrees.
 */
static inline __attribute__((always_inline)) FusionEulerAngles FusionQuaternionToEulerAngles(const FusionQuaternion quaternion) {
#define Q quaternion.element // define shorthand label for more readable code
    const float qwqwMinusHalf = Q.w * Q.w - 0.5f; // calculate common terms to avoid repeated operations
 80038d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80038d8:	ed93 7a00 	vldr	s14, [r3]
 80038dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80038e0:	edd3 7a00 	vldr	s15, [r3]
 80038e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80038ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038f0:	edc7 7ad7 	vstr	s15, [r7, #860]	; 0x35c
    FusionEulerAngles eulerAngles;
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 80038f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80038f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80038fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003900:	edd3 7a03 	vldr	s15, [r3, #12]
 8003904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003908:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800390c:	edd3 6a00 	vldr	s13, [r3]
 8003910:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003914:	edd3 7a01 	vldr	s15, [r3, #4]
 8003918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800391c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003920:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003924:	ed93 7a03 	vldr	s14, [r3, #12]
 8003928:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800392c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003934:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 8003938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393c:	eef0 0a67 	vmov.f32	s1, s15
 8003940:	eeb0 0a66 	vmov.f32	s0, s13
 8003944:	f005 fae8 	bl	8008f18 <atan2f>
 8003948:	eef0 7a40 	vmov.f32	s15, s0
 800394c:	edc7 7ad6 	vstr	s15, [r7, #856]	; 0x358
    return radians * (180.0f / (float) M_PI);
 8003950:	edd7 7ad6 	vldr	s15, [r7, #856]	; 0x358
 8003954:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003a70 <IMU_UPDATE+0xa8c>
 8003958:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.roll = FusionRadiansToDegrees(atan2f(Q.y * Q.z - Q.w * Q.x, qwqwMinusHalf + Q.z * Q.z));
 800395c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003960:	edc3 7a00 	vstr	s15, [r3]
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 8003964:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003968:	ed93 7a01 	vldr	s14, [r3, #4]
 800396c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003970:	edd3 7a03 	vldr	s15, [r3, #12]
 8003974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003978:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800397c:	edd3 6a00 	vldr	s13, [r3]
 8003980:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003984:	edd3 7a02 	vldr	s15, [r3, #8]
 8003988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800398c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003990:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003994:	eeb0 0a67 	vmov.f32	s0, s15
 8003998:	f005 fa8c 	bl	8008eb4 <asinf>
 800399c:	eef0 7a40 	vmov.f32	s15, s0
 80039a0:	eef1 7a67 	vneg.f32	s15, s15
 80039a4:	edc7 7ad5 	vstr	s15, [r7, #852]	; 0x354
    return radians * (180.0f / (float) M_PI);
 80039a8:	edd7 7ad5 	vldr	s15, [r7, #852]	; 0x354
 80039ac:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003a70 <IMU_UPDATE+0xa8c>
 80039b0:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.pitch = FusionRadiansToDegrees(-1.0f * asinf(2.0f * (Q.x * Q.z + Q.w * Q.y)));
 80039b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039b8:	edc3 7a01 	vstr	s15, [r3, #4]
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 80039bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80039c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80039cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039d4:	edd3 6a00 	vldr	s13, [r3]
 80039d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80039e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80039e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80039f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80039f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039fc:	edd7 7ad7 	vldr	s15, [r7, #860]	; 0x35c
 8003a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a04:	eef0 0a67 	vmov.f32	s1, s15
 8003a08:	eeb0 0a66 	vmov.f32	s0, s13
 8003a0c:	f005 fa84 	bl	8008f18 <atan2f>
 8003a10:	eef0 7a40 	vmov.f32	s15, s0
 8003a14:	edc7 7ad4 	vstr	s15, [r7, #848]	; 0x350
    return radians * (180.0f / (float) M_PI);
 8003a18:	edd7 7ad4 	vldr	s15, [r7, #848]	; 0x350
 8003a1c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003a70 <IMU_UPDATE+0xa8c>
 8003a20:	ee67 7a87 	vmul.f32	s15, s15, s14
    eulerAngles.angle.yaw = FusionRadiansToDegrees(atan2f(Q.x * Q.y - Q.w * Q.z, qwqwMinusHalf + Q.x * Q.x));
 8003a24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a28:	edc3 7a02 	vstr	s15, [r3, #8]
    return eulerAngles;
 8003a2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a30:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8003a34:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a3e:	461c      	mov	r4, r3
 8003a40:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8003a44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <IMU_UPDATE+0xa90>)
 8003a4e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003a58:	bf00      	nop
 8003a5a:	f507 7758 	add.w	r7, r7, #864	; 0x360
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bdb0      	pop	{r4, r5, r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000160 	.word	0x20000160
 8003a68:	20000000 	.word	0x20000000
 8003a6c:	20000130 	.word	0x20000130
 8003a70:	42652ee0 	.word	0x42652ee0
 8003a74:	200000f8 	.word	0x200000f8

08003a78 <SERIAL_CONTROL_LOOP>:
void SERIAL_CONTROL_LOOP()
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	SerialControlWheelsRequest.ControlMode = 0;
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <SERIAL_CONTROL_LOOP+0x40>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
	SerialControlWheelsRequest.ParameterNumber = 0;
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <SERIAL_CONTROL_LOOP+0x40>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	705a      	strb	r2, [r3, #1]
	SerialControlWheelsRequest.WheelLeft = 0.0;
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <SERIAL_CONTROL_LOOP+0x40>)
 8003a8a:	3306      	adds	r3, #6
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.WheelRight = 0.0;
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <SERIAL_CONTROL_LOOP+0x40>)
 8003a94:	330a      	adds	r3, #10
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
	SerialControlWheelsRequest.CR=13;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <SERIAL_CONTROL_LOOP+0x40>)
 8003a9e:	220d      	movs	r2, #13
 8003aa0:	739a      	strb	r2, [r3, #14]
	SerialControlWheelsRequest.LF=10;
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <SERIAL_CONTROL_LOOP+0x40>)
 8003aa4:	220a      	movs	r2, #10
 8003aa6:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)SerialControlWheelsRequest.Buffer, WHEELS_REQUEST_SIZE);
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	4903      	ldr	r1, [pc, #12]	; (8003ab8 <SERIAL_CONTROL_LOOP+0x40>)
 8003aac:	4803      	ldr	r0, [pc, #12]	; (8003abc <SERIAL_CONTROL_LOOP+0x44>)
 8003aae:	f004 f919 	bl	8007ce4 <HAL_UART_Transmit_DMA>
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000118 	.word	0x20000118
 8003abc:	20000504 	.word	0x20000504

08003ac0 <Interpolation>:
{
	Front = BTFront;
	Turn = BTTurn;
}
float Interpolation(float Value, float Min, float Max)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003aca:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ace:	ed87 1a01 	vstr	s2, [r7, #4]
    float Result = (Value - Min) / (Max - Min);
 8003ad2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ad6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ada:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003ade:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ae2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ae6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aee:	edc7 7a05 	vstr	s15, [r7, #20]
    if (Result > 1)
 8003af2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b02:	dd02      	ble.n	8003b0a <Interpolation+0x4a>
    {
        return 1;
 8003b04:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003b08:	e00a      	b.n	8003b20 <Interpolation+0x60>
    }
    if (Result < 0)
 8003b0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	d502      	bpl.n	8003b1e <Interpolation+0x5e>
    {
        return 0;
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e000      	b.n	8003b20 <Interpolation+0x60>
    }
    return Result;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	ee07 3a90 	vmov	s15, r3
}
 8003b24:	eeb0 0a67 	vmov.f32	s0, s15
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	0000      	movs	r0, r0
 8003b34:	0000      	movs	r0, r0
	...

08003b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b38:	b5b0      	push	{r4, r5, r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b3c:	f000 fef4 	bl	8004928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b40:	f000 f958 	bl	8003df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b44:	f7ff f834 	bl	8002bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b48:	f7fe fffa 	bl	8002b40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003b4c:	f000 fd3c 	bl	80045c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8003b50:	f7fe ff28 	bl	80029a4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8003b54:	f000 fadc 	bl	8004110 <MX_TIM2_Init>
  MX_TIM6_Init();
 8003b58:	f000 fb70 	bl	800423c <MX_TIM6_Init>
  MX_TIM7_Init();
 8003b5c:	f000 fba4 	bl	80042a8 <MX_TIM7_Init>
  MX_TIM14_Init();
 8003b60:	f000 fbd8 	bl	8004314 <MX_TIM14_Init>
  MX_UART4_Init();
 8003b64:	f000 fd06 	bl	8004574 <MX_UART4_Init>
  MX_SPI2_Init();
 8003b68:	f000 f9b4 	bl	8003ed4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  icm20948_init();
 8003b6c:	f7fe fa42 	bl	8001ff4 <icm20948_init>
  ak09916_init ();
 8003b70:	f7fe fa6a 	bl	8002048 <ak09916_init>
  IMU_INIT();
 8003b74:	f7ff f9f2 	bl	8002f5c <IMU_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  IMU_UPDATE();
 8003b78:	f7ff fa34 	bl	8002fe4 <IMU_UPDATE>

	  if (HAL_GetTick() - PackageLastTimeReset_Motherboard > 100) // UART2 RECEIVE FEEDBACK
 8003b7c:	f000 ff3a 	bl	80049f4 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b87      	ldr	r3, [pc, #540]	; (8003da0 <main+0x268>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	; 0x64
 8003b8a:	d90e      	bls.n	8003baa <main+0x72>
	  {
		  MX_USART2_UART_Init();
 8003b8c:	f000 fd1c 	bl	80045c8 <MX_USART2_UART_Init>
		  USART2ReceiveState = 0;
 8003b90:	4b84      	ldr	r3, [pc, #528]	; (8003da4 <main+0x26c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_DMA(&huart2, (uint8_t*)SerialControlWheelsResponce.Buffer, WHEELS_RESPONCE_SIZE);
 8003b96:	2210      	movs	r2, #16
 8003b98:	4983      	ldr	r1, [pc, #524]	; (8003da8 <main+0x270>)
 8003b9a:	4884      	ldr	r0, [pc, #528]	; (8003dac <main+0x274>)
 8003b9c:	f004 f920 	bl	8007de0 <HAL_UART_Receive_DMA>
		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 8003ba0:	f000 ff28 	bl	80049f4 <HAL_GetTick>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4a7e      	ldr	r2, [pc, #504]	; (8003da0 <main+0x268>)
 8003ba8:	6013      	str	r3, [r2, #0]
	  }

	  if ((USART2ReceiveState == 10) && (SerialControlWheelsResponce.CR == 13) && (SerialControlWheelsResponce.LF == 10))
 8003baa:	4b7e      	ldr	r3, [pc, #504]	; (8003da4 <main+0x26c>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b0a      	cmp	r3, #10
 8003bb2:	f040 80ec 	bne.w	8003d8e <main+0x256>
 8003bb6:	4b7c      	ldr	r3, [pc, #496]	; (8003da8 <main+0x270>)
 8003bb8:	7b9b      	ldrb	r3, [r3, #14]
 8003bba:	2b0d      	cmp	r3, #13
 8003bbc:	f040 80e7 	bne.w	8003d8e <main+0x256>
 8003bc0:	4b79      	ldr	r3, [pc, #484]	; (8003da8 <main+0x270>)
 8003bc2:	7bdb      	ldrb	r3, [r3, #15]
 8003bc4:	2b0a      	cmp	r3, #10
 8003bc6:	f040 80e2 	bne.w	8003d8e <main+0x256>
	  {
		  USART2ReceiveState = 0;
 8003bca:	4b76      	ldr	r3, [pc, #472]	; (8003da4 <main+0x26c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bd4:	4876      	ldr	r0, [pc, #472]	; (8003db0 <main+0x278>)
 8003bd6:	f002 f868 	bl	8005caa <HAL_GPIO_TogglePin>

		  if (HallActualize(SerialControlWheelsResponce.WheelLeftSteps, HallLeftStepPast, MOTHERBOARD_DIFF))
 8003bda:	4b73      	ldr	r3, [pc, #460]	; (8003da8 <main+0x270>)
 8003bdc:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8003be0:	ee07 3a90 	vmov	s15, r3
 8003be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003be8:	4b72      	ldr	r3, [pc, #456]	; (8003db4 <main+0x27c>)
 8003bea:	ed93 7a00 	vldr	s14, [r3]
 8003bee:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8003db8 <main+0x280>
 8003bf2:	eef0 0a47 	vmov.f32	s1, s14
 8003bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfa:	f7ff f97b 	bl	8002ef4 <HallActualize>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <main+0xe2>
		  {
			  HallLeftStep = SerialControlWheelsResponce.WheelLeftSteps;
 8003c04:	4b68      	ldr	r3, [pc, #416]	; (8003da8 <main+0x270>)
 8003c06:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c12:	4b6a      	ldr	r3, [pc, #424]	; (8003dbc <main+0x284>)
 8003c14:	edc3 7a00 	vstr	s15, [r3]
 8003c18:	e003      	b.n	8003c22 <main+0xea>
		  }
		  else
		  {
			  HallLeftStep = HallLeftStepPast;
 8003c1a:	4b66      	ldr	r3, [pc, #408]	; (8003db4 <main+0x27c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a67      	ldr	r2, [pc, #412]	; (8003dbc <main+0x284>)
 8003c20:	6013      	str	r3, [r2, #0]
		  }

		  if (HallActualize(SerialControlWheelsResponce.WheelRightSteps, HallRightStepPast, MOTHERBOARD_DIFF))
 8003c22:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <main+0x270>)
 8003c24:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c30:	4b63      	ldr	r3, [pc, #396]	; (8003dc0 <main+0x288>)
 8003c32:	ed93 7a00 	vldr	s14, [r3]
 8003c36:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8003db8 <main+0x280>
 8003c3a:	eef0 0a47 	vmov.f32	s1, s14
 8003c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c42:	f7ff f957 	bl	8002ef4 <HallActualize>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <main+0x12a>
		  {
			  HallRightStep = SerialControlWheelsResponce.WheelRightSteps;
 8003c4c:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <main+0x270>)
 8003c4e:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c5a:	4b5a      	ldr	r3, [pc, #360]	; (8003dc4 <main+0x28c>)
 8003c5c:	edc3 7a00 	vstr	s15, [r3]
 8003c60:	e003      	b.n	8003c6a <main+0x132>
		  }
		  else
		  {
			  HallRightStep = HallRightStepPast;
 8003c62:	4b57      	ldr	r3, [pc, #348]	; (8003dc0 <main+0x288>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a57      	ldr	r2, [pc, #348]	; (8003dc4 <main+0x28c>)
 8003c68:	6013      	str	r3, [r2, #0]
		  }

		  PackageLastTimeReset_Motherboard = HAL_GetTick();
 8003c6a:	f000 fec3 	bl	80049f4 <HAL_GetTick>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4a4b      	ldr	r2, [pc, #300]	; (8003da0 <main+0x268>)
 8003c72:	6013      	str	r3, [r2, #0]

		  switch (SerialControlWheelsResponce.ParameterNumber)
 8003c74:	4b4c      	ldr	r3, [pc, #304]	; (8003da8 <main+0x270>)
 8003c76:	785b      	ldrb	r3, [r3, #1]
 8003c78:	2b07      	cmp	r3, #7
 8003c7a:	f200 8089 	bhi.w	8003d90 <main+0x258>
 8003c7e:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <main+0x14c>)
 8003c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c84:	08003ca5 	.word	0x08003ca5
 8003c88:	08003d3b 	.word	0x08003d3b
 8003c8c:	08003d47 	.word	0x08003d47
 8003c90:	08003d53 	.word	0x08003d53
 8003c94:	08003d5f 	.word	0x08003d5f
 8003c98:	08003d6b 	.word	0x08003d6b
 8003c9c:	08003d77 	.word	0x08003d77
 8003ca0:	08003d83 	.word	0x08003d83
		  {
		  case 0:
			  Voltage = SerialControlWheelsResponce.ParameterValue;
 8003ca4:	4b40      	ldr	r3, [pc, #256]	; (8003da8 <main+0x270>)
 8003ca6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003caa:	4a47      	ldr	r2, [pc, #284]	; (8003dc8 <main+0x290>)
 8003cac:	6013      	str	r3, [r2, #0]
			  Battery += ((Interpolation(Voltage, 28, 41) * 100.0) - Battery) * 0.01;
 8003cae:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <main+0x290>)
 8003cb0:	edd3 7a00 	vldr	s15, [r3]
 8003cb4:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8003dcc <main+0x294>
 8003cb8:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 8003cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc0:	f7ff fefe 	bl	8003ac0 <Interpolation>
 8003cc4:	ee10 3a10 	vmov	r3, s0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fc fd0b 	bl	80006e4 <__aeabi_f2d>
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <main+0x298>)
 8003cd4:	f7fc fa78 	bl	80001c8 <__aeabi_dmul>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4614      	mov	r4, r2
 8003cde:	461d      	mov	r5, r3
 8003ce0:	4b3c      	ldr	r3, [pc, #240]	; (8003dd4 <main+0x29c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fc fcfd 	bl	80006e4 <__aeabi_f2d>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4620      	mov	r0, r4
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	f7fc fb97 	bl	8000424 <__aeabi_dsub>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	a326      	add	r3, pc, #152	; (adr r3, 8003d98 <main+0x260>)
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f7fc fa60 	bl	80001c8 <__aeabi_dmul>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	461d      	mov	r5, r3
 8003d10:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <main+0x29c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc fce5 	bl	80006e4 <__aeabi_f2d>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4620      	mov	r0, r4
 8003d20:	4629      	mov	r1, r5
 8003d22:	f7fc fb81 	bl	8000428 <__adddf3>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f7fc fd31 	bl	8000794 <__aeabi_d2f>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <main+0x29c>)
 8003d36:	6013      	str	r3, [r2, #0]
			  break;
 8003d38:	e02a      	b.n	8003d90 <main+0x258>
		  case 1:
			  CurrentLeft = SerialControlWheelsResponce.ParameterValue;
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <main+0x270>)
 8003d3c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003d40:	4a25      	ldr	r2, [pc, #148]	; (8003dd8 <main+0x2a0>)
 8003d42:	6013      	str	r3, [r2, #0]
		      break;
 8003d44:	e024      	b.n	8003d90 <main+0x258>
		  case 2:
		      CurrentRight = SerialControlWheelsResponce.ParameterValue;
 8003d46:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <main+0x270>)
 8003d48:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003d4c:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <main+0x2a4>)
 8003d4e:	6013      	str	r3, [r2, #0]
		      break;
 8003d50:	e01e      	b.n	8003d90 <main+0x258>
		  case 3:
		      RPSLeft = SerialControlWheelsResponce.ParameterValue;
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <main+0x270>)
 8003d54:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003d58:	4a21      	ldr	r2, [pc, #132]	; (8003de0 <main+0x2a8>)
 8003d5a:	6013      	str	r3, [r2, #0]
		      break;
 8003d5c:	e018      	b.n	8003d90 <main+0x258>
		  case 4:
		      RPSRight = SerialControlWheelsResponce.ParameterValue;
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <main+0x270>)
 8003d60:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003d64:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <main+0x2ac>)
 8003d66:	6013      	str	r3, [r2, #0]
		      break;
 8003d68:	e012      	b.n	8003d90 <main+0x258>
		  case 5:
		      OverCurrCount = SerialControlWheelsResponce.ParameterValue;
 8003d6a:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <main+0x270>)
 8003d6c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003d70:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <main+0x2b0>)
 8003d72:	6013      	str	r3, [r2, #0]
		      break;
 8003d74:	e00c      	b.n	8003d90 <main+0x258>
		  case 6:
		      ConnErrCount = SerialControlWheelsResponce.ParameterValue;
 8003d76:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <main+0x270>)
 8003d78:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003d7c:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <main+0x2b4>)
 8003d7e:	6013      	str	r3, [r2, #0]
		      break;
 8003d80:	e006      	b.n	8003d90 <main+0x258>
		  case 7:
		      CommTime = SerialControlWheelsResponce.ParameterValue;
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <main+0x270>)
 8003d84:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <main+0x2b8>)
 8003d8a:	6013      	str	r3, [r2, #0]
		      break;
 8003d8c:	e000      	b.n	8003d90 <main+0x258>
		  }
	  }
 8003d8e:	bf00      	nop
 		  HAL_UART_Transmit_DMA(&huart4, (uint8_t*)SerialOnBoardResponce.Buffer, ON_BOARD_CONTROL_RESPONCE_SIZE);

		  PackageLastTimeReset_OnBoardPC = HAL_GetTick();
	  }*/

	  SERIAL_CONTROL_LOOP();
 8003d90:	f7ff fe72 	bl	8003a78 <SERIAL_CONTROL_LOOP>
	  IMU_UPDATE();
 8003d94:	e6f0      	b.n	8003b78 <main+0x40>
 8003d96:	bf00      	nop
 8003d98:	47ae147b 	.word	0x47ae147b
 8003d9c:	3f847ae1 	.word	0x3f847ae1
 8003da0:	200001c8 	.word	0x200001c8
 8003da4:	2000009f 	.word	0x2000009f
 8003da8:	20000108 	.word	0x20000108
 8003dac:	20000504 	.word	0x20000504
 8003db0:	40020c00 	.word	0x40020c00
 8003db4:	200000a0 	.word	0x200000a0
 8003db8:	42c80000 	.word	0x42c80000
 8003dbc:	20000104 	.word	0x20000104
 8003dc0:	200000a4 	.word	0x200000a4
 8003dc4:	2000019c 	.word	0x2000019c
 8003dc8:	20000128 	.word	0x20000128
 8003dcc:	42240000 	.word	0x42240000
 8003dd0:	40590000 	.word	0x40590000
 8003dd4:	20000180 	.word	0x20000180
 8003dd8:	200000f0 	.word	0x200000f0
 8003ddc:	2000017c 	.word	0x2000017c
 8003de0:	200001f4 	.word	0x200001f4
 8003de4:	200001cc 	.word	0x200001cc
 8003de8:	200000f4 	.word	0x200000f4
 8003dec:	200001c4 	.word	0x200001c4
 8003df0:	200001f8 	.word	0x200001f8

08003df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b094      	sub	sp, #80	; 0x50
 8003df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dfa:	f107 0320 	add.w	r3, r7, #32
 8003dfe:	2230      	movs	r2, #48	; 0x30
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f005 fb20 	bl	8009448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <SystemClock_Config+0xcc>)
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <SystemClock_Config+0xcc>)
 8003e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6413      	str	r3, [r2, #64]	; 0x40
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <SystemClock_Config+0xcc>)
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e34:	2300      	movs	r3, #0
 8003e36:	607b      	str	r3, [r7, #4]
 8003e38:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <SystemClock_Config+0xd0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a21      	ldr	r2, [pc, #132]	; (8003ec4 <SystemClock_Config+0xd0>)
 8003e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <SystemClock_Config+0xd0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003e64:	2304      	movs	r3, #4
 8003e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003e68:	23a8      	movs	r3, #168	; 0xa8
 8003e6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e70:	2304      	movs	r3, #4
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e74:	f107 0320 	add.w	r3, r7, #32
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 ff31 	bl	8005ce0 <HAL_RCC_OscConfig>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003e84:	f000 f820 	bl	8003ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e88:	230f      	movs	r3, #15
 8003e8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ea0:	f107 030c 	add.w	r3, r7, #12
 8003ea4:	2105      	movs	r1, #5
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f002 f992 	bl	80061d0 <HAL_RCC_ClockConfig>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003eb2:	f000 f809 	bl	8003ec8 <Error_Handler>
  }
}
 8003eb6:	bf00      	nop
 8003eb8:	3750      	adds	r7, #80	; 0x50
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40007000 	.word	0x40007000

08003ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ecc:	b672      	cpsid	i
}
 8003ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ed0:	e7fe      	b.n	8003ed0 <Error_Handler+0x8>
	...

08003ed4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003ed8:	4b17      	ldr	r3, [pc, #92]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003eda:	4a18      	ldr	r2, [pc, #96]	; (8003f3c <MX_SPI2_Init+0x68>)
 8003edc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ede:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ee4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003ee6:	4b14      	ldr	r3, [pc, #80]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003eec:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003ef2:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003efe:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003f08:	2210      	movs	r2, #16
 8003f0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f18:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003f20:	220a      	movs	r2, #10
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003f24:	4804      	ldr	r0, [pc, #16]	; (8003f38 <MX_SPI2_Init+0x64>)
 8003f26:	f002 fb4f 	bl	80065c8 <HAL_SPI_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003f30:	f7ff ffca 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000228 	.word	0x20000228
 8003f3c:	40003800 	.word	0x40003800

08003f40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	; 0x28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f48:	f107 0314 	add.w	r3, r7, #20
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <HAL_SPI_MspInit+0x84>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d12c      	bne.n	8003fbc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <HAL_SPI_MspInit+0x88>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <HAL_SPI_MspInit+0x88>)
 8003f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <HAL_SPI_MspInit+0x88>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_SPI_MspInit+0x88>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4a10      	ldr	r2, [pc, #64]	; (8003fc8 <HAL_SPI_MspInit+0x88>)
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <HAL_SPI_MspInit+0x88>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin|ICM20948_MISO_Pin|ICM20948_MOSI_Pin;
 8003f9a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fac:	2305      	movs	r3, #5
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb0:	f107 0314 	add.w	r3, r7, #20
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4805      	ldr	r0, [pc, #20]	; (8003fcc <HAL_SPI_MspInit+0x8c>)
 8003fb8:	f001 fcc2 	bl	8005940 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	3728      	adds	r7, #40	; 0x28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40003800 	.word	0x40003800
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40020400 	.word	0x40020400

08003fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	607b      	str	r3, [r7, #4]
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <HAL_MspInit+0x4c>)
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	4a0f      	ldr	r2, [pc, #60]	; (800401c <HAL_MspInit+0x4c>)
 8003fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	; (800401c <HAL_MspInit+0x4c>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_MspInit+0x4c>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4a08      	ldr	r2, [pc, #32]	; (800401c <HAL_MspInit+0x4c>)
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004000:	6413      	str	r3, [r2, #64]	; 0x40
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_MspInit+0x4c>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800

08004020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004024:	e7fe      	b.n	8004024 <NMI_Handler+0x4>

08004026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004026:	b480      	push	{r7}
 8004028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800402a:	e7fe      	b.n	800402a <HardFault_Handler+0x4>

0800402c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004030:	e7fe      	b.n	8004030 <MemManage_Handler+0x4>

08004032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004036:	e7fe      	b.n	8004036 <BusFault_Handler+0x4>

08004038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800403c:	e7fe      	b.n	800403c <UsageFault_Handler+0x4>

0800403e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800403e:	b480      	push	{r7}
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800405e:	bf00      	nop
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800406c:	f000 fcae 	bl	80049cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004070:	bf00      	nop
 8004072:	bd80      	pop	{r7, pc}

08004074 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004078:	4802      	ldr	r0, [pc, #8]	; (8004084 <DMA1_Stream2_IRQHandler+0x10>)
 800407a:	f001 f9f7 	bl	800546c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200003a0 	.word	0x200003a0

08004088 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800408c:	4802      	ldr	r0, [pc, #8]	; (8004098 <DMA1_Stream4_IRQHandler+0x10>)
 800408e:	f001 f9ed 	bl	800546c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000548 	.word	0x20000548

0800409c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80040a0:	4802      	ldr	r0, [pc, #8]	; (80040ac <DMA1_Stream5_IRQHandler+0x10>)
 80040a2:	f001 f9e3 	bl	800546c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000400 	.word	0x20000400

080040b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80040b4:	4802      	ldr	r0, [pc, #8]	; (80040c0 <DMA1_Stream6_IRQHandler+0x10>)
 80040b6:	f001 f9d9 	bl	800546c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000460 	.word	0x20000460

080040c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040c8:	4802      	ldr	r0, [pc, #8]	; (80040d4 <USART2_IRQHandler+0x10>)
 80040ca:	f003 feb9 	bl	8007e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000504 	.word	0x20000504

080040d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80040dc:	4802      	ldr	r0, [pc, #8]	; (80040e8 <UART4_IRQHandler+0x10>)
 80040de:	f003 feaf 	bl	8007e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	200004c0 	.word	0x200004c0

080040ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <SystemInit+0x20>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	4a05      	ldr	r2, [pc, #20]	; (800410c <SystemInit+0x20>)
 80040f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08e      	sub	sp, #56	; 0x38
 8004114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	609a      	str	r2, [r3, #8]
 8004122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004124:	f107 0320 	add.w	r3, r7, #32
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800412e:	1d3b      	adds	r3, r7, #4
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	609a      	str	r2, [r3, #8]
 8004138:	60da      	str	r2, [r3, #12]
 800413a:	611a      	str	r2, [r3, #16]
 800413c:	615a      	str	r2, [r3, #20]
 800413e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004140:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <MX_TIM2_Init+0x128>)
 8004142:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004146:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004148:	4b3b      	ldr	r3, [pc, #236]	; (8004238 <MX_TIM2_Init+0x128>)
 800414a:	2200      	movs	r2, #0
 800414c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800414e:	4b3a      	ldr	r3, [pc, #232]	; (8004238 <MX_TIM2_Init+0x128>)
 8004150:	2200      	movs	r2, #0
 8004152:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 89;
 8004154:	4b38      	ldr	r3, [pc, #224]	; (8004238 <MX_TIM2_Init+0x128>)
 8004156:	2259      	movs	r2, #89	; 0x59
 8004158:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800415a:	4b37      	ldr	r3, [pc, #220]	; (8004238 <MX_TIM2_Init+0x128>)
 800415c:	2200      	movs	r2, #0
 800415e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004160:	4b35      	ldr	r3, [pc, #212]	; (8004238 <MX_TIM2_Init+0x128>)
 8004162:	2200      	movs	r2, #0
 8004164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004166:	4834      	ldr	r0, [pc, #208]	; (8004238 <MX_TIM2_Init+0x128>)
 8004168:	f002 ffd6 	bl	8007118 <HAL_TIM_Base_Init>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8004172:	f7ff fea9 	bl	8003ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800417a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800417c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004180:	4619      	mov	r1, r3
 8004182:	482d      	ldr	r0, [pc, #180]	; (8004238 <MX_TIM2_Init+0x128>)
 8004184:	f003 f932 	bl	80073ec <HAL_TIM_ConfigClockSource>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800418e:	f7ff fe9b 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004192:	4829      	ldr	r0, [pc, #164]	; (8004238 <MX_TIM2_Init+0x128>)
 8004194:	f003 f80f 	bl	80071b6 <HAL_TIM_PWM_Init>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800419e:	f7ff fe93 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041aa:	f107 0320 	add.w	r3, r7, #32
 80041ae:	4619      	mov	r1, r3
 80041b0:	4821      	ldr	r0, [pc, #132]	; (8004238 <MX_TIM2_Init+0x128>)
 80041b2:	f003 fccd 	bl	8007b50 <HAL_TIMEx_MasterConfigSynchronization>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80041bc:	f7ff fe84 	bl	8003ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041c0:	2360      	movs	r3, #96	; 0x60
 80041c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041d0:	1d3b      	adds	r3, r7, #4
 80041d2:	2200      	movs	r2, #0
 80041d4:	4619      	mov	r1, r3
 80041d6:	4818      	ldr	r0, [pc, #96]	; (8004238 <MX_TIM2_Init+0x128>)
 80041d8:	f003 f846 	bl	8007268 <HAL_TIM_PWM_ConfigChannel>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80041e2:	f7ff fe71 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	2204      	movs	r2, #4
 80041ea:	4619      	mov	r1, r3
 80041ec:	4812      	ldr	r0, [pc, #72]	; (8004238 <MX_TIM2_Init+0x128>)
 80041ee:	f003 f83b 	bl	8007268 <HAL_TIM_PWM_ConfigChannel>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80041f8:	f7ff fe66 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	2208      	movs	r2, #8
 8004200:	4619      	mov	r1, r3
 8004202:	480d      	ldr	r0, [pc, #52]	; (8004238 <MX_TIM2_Init+0x128>)
 8004204:	f003 f830 	bl	8007268 <HAL_TIM_PWM_ConfigChannel>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800420e:	f7ff fe5b 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004212:	1d3b      	adds	r3, r7, #4
 8004214:	220c      	movs	r2, #12
 8004216:	4619      	mov	r1, r3
 8004218:	4807      	ldr	r0, [pc, #28]	; (8004238 <MX_TIM2_Init+0x128>)
 800421a:	f003 f825 	bl	8007268 <HAL_TIM_PWM_ConfigChannel>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8004224:	f7ff fe50 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004228:	4803      	ldr	r0, [pc, #12]	; (8004238 <MX_TIM2_Init+0x128>)
 800422a:	f000 f923 	bl	8004474 <HAL_TIM_MspPostInit>

}
 800422e:	bf00      	nop
 8004230:	3738      	adds	r7, #56	; 0x38
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	200002c8 	.word	0x200002c8

0800423c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004242:	463b      	mov	r3, r7
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800424a:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <MX_TIM6_Init+0x64>)
 800424c:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <MX_TIM6_Init+0x68>)
 800424e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8004250:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <MX_TIM6_Init+0x64>)
 8004252:	2200      	movs	r2, #0
 8004254:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <MX_TIM6_Init+0x64>)
 8004258:	2200      	movs	r2, #0
 800425a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800425c:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <MX_TIM6_Init+0x64>)
 800425e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004262:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <MX_TIM6_Init+0x64>)
 8004266:	2200      	movs	r2, #0
 8004268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800426a:	480d      	ldr	r0, [pc, #52]	; (80042a0 <MX_TIM6_Init+0x64>)
 800426c:	f002 ff54 	bl	8007118 <HAL_TIM_Base_Init>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004276:	f7ff fe27 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004282:	463b      	mov	r3, r7
 8004284:	4619      	mov	r1, r3
 8004286:	4806      	ldr	r0, [pc, #24]	; (80042a0 <MX_TIM6_Init+0x64>)
 8004288:	f003 fc62 	bl	8007b50 <HAL_TIMEx_MasterConfigSynchronization>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004292:	f7ff fe19 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000280 	.word	0x20000280
 80042a4:	40001000 	.word	0x40001000

080042a8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042ae:	463b      	mov	r3, r7
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80042b6:	4b15      	ldr	r3, [pc, #84]	; (800430c <MX_TIM7_Init+0x64>)
 80042b8:	4a15      	ldr	r2, [pc, #84]	; (8004310 <MX_TIM7_Init+0x68>)
 80042ba:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80042bc:	4b13      	ldr	r3, [pc, #76]	; (800430c <MX_TIM7_Init+0x64>)
 80042be:	2200      	movs	r2, #0
 80042c0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <MX_TIM7_Init+0x64>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80042c8:	4b10      	ldr	r3, [pc, #64]	; (800430c <MX_TIM7_Init+0x64>)
 80042ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042ce:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <MX_TIM7_Init+0x64>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80042d6:	480d      	ldr	r0, [pc, #52]	; (800430c <MX_TIM7_Init+0x64>)
 80042d8:	f002 ff1e 	bl	8007118 <HAL_TIM_Base_Init>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80042e2:	f7ff fdf1 	bl	8003ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80042ee:	463b      	mov	r3, r7
 80042f0:	4619      	mov	r1, r3
 80042f2:	4806      	ldr	r0, [pc, #24]	; (800430c <MX_TIM7_Init+0x64>)
 80042f4:	f003 fc2c 	bl	8007b50 <HAL_TIMEx_MasterConfigSynchronization>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80042fe:	f7ff fde3 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000358 	.word	0x20000358
 8004310:	40001400 	.word	0x40001400

08004314 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800431a:	1d3b      	adds	r3, r7, #4
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	611a      	str	r2, [r3, #16]
 8004328:	615a      	str	r2, [r3, #20]
 800432a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800432c:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <MX_TIM14_Init+0x94>)
 800432e:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <MX_TIM14_Init+0x98>)
 8004330:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 720;
 8004332:	4b1d      	ldr	r3, [pc, #116]	; (80043a8 <MX_TIM14_Init+0x94>)
 8004334:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8004338:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <MX_TIM14_Init+0x94>)
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2000;
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <MX_TIM14_Init+0x94>)
 8004342:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004346:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004348:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <MX_TIM14_Init+0x94>)
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <MX_TIM14_Init+0x94>)
 8004350:	2200      	movs	r2, #0
 8004352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004354:	4814      	ldr	r0, [pc, #80]	; (80043a8 <MX_TIM14_Init+0x94>)
 8004356:	f002 fedf 	bl	8007118 <HAL_TIM_Base_Init>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8004360:	f7ff fdb2 	bl	8003ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004364:	4810      	ldr	r0, [pc, #64]	; (80043a8 <MX_TIM14_Init+0x94>)
 8004366:	f002 ff26 	bl	80071b6 <HAL_TIM_PWM_Init>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8004370:	f7ff fdaa 	bl	8003ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004374:	2360      	movs	r3, #96	; 0x60
 8004376:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8004378:	2332      	movs	r3, #50	; 0x32
 800437a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	2200      	movs	r2, #0
 8004388:	4619      	mov	r1, r3
 800438a:	4807      	ldr	r0, [pc, #28]	; (80043a8 <MX_TIM14_Init+0x94>)
 800438c:	f002 ff6c 	bl	8007268 <HAL_TIM_PWM_ConfigChannel>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8004396:	f7ff fd97 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800439a:	4803      	ldr	r0, [pc, #12]	; (80043a8 <MX_TIM14_Init+0x94>)
 800439c:	f000 f86a 	bl	8004474 <HAL_TIM_MspPostInit>

}
 80043a0:	bf00      	nop
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000310 	.word	0x20000310
 80043ac:	40002000 	.word	0x40002000

080043b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c0:	d10e      	bne.n	80043e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	4b27      	ldr	r3, [pc, #156]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	4a26      	ldr	r2, [pc, #152]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6413      	str	r3, [r2, #64]	; 0x40
 80043d2:	4b24      	ldr	r3, [pc, #144]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80043de:	e03a      	b.n	8004456 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM6)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a20      	ldr	r2, [pc, #128]	; (8004468 <HAL_TIM_Base_MspInit+0xb8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10e      	bne.n	8004408 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 80043f4:	f043 0310 	orr.w	r3, r3, #16
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]
}
 8004406:	e026      	b.n	8004456 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM7)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_TIM_Base_MspInit+0xbc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	4a12      	ldr	r2, [pc, #72]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 800441c:	f043 0320 	orr.w	r3, r3, #32
 8004420:	6413      	str	r3, [r2, #64]	; 0x40
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
}
 800442e:	e012      	b.n	8004456 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM14)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <HAL_TIM_Base_MspInit+0xc0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10d      	bne.n	8004456 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a08      	ldr	r2, [pc, #32]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_TIM_Base_MspInit+0xb4>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800
 8004468:	40001000 	.word	0x40001000
 800446c:	40001400 	.word	0x40001400
 8004470:	40002000 	.word	0x40002000

08004474 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004494:	d13e      	bne.n	8004514 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	4b32      	ldr	r3, [pc, #200]	; (8004564 <HAL_TIM_MspPostInit+0xf0>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	4a31      	ldr	r2, [pc, #196]	; (8004564 <HAL_TIM_MspPostInit+0xf0>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	6313      	str	r3, [r2, #48]	; 0x30
 80044a6:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <HAL_TIM_MspPostInit+0xf0>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_TIM_MspPostInit+0xf0>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4a2a      	ldr	r2, [pc, #168]	; (8004564 <HAL_TIM_MspPostInit+0xf0>)
 80044bc:	f043 0302 	orr.w	r3, r3, #2
 80044c0:	6313      	str	r3, [r2, #48]	; 0x30
 80044c2:	4b28      	ldr	r3, [pc, #160]	; (8004564 <HAL_TIM_MspPostInit+0xf0>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_2_Pin|LED_PWM_1_Pin;
 80044ce:	f248 0302 	movw	r3, #32770	; 0x8002
 80044d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d4:	2302      	movs	r3, #2
 80044d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044dc:	2300      	movs	r3, #0
 80044de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044e0:	2301      	movs	r3, #1
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e4:	f107 0314 	add.w	r3, r7, #20
 80044e8:	4619      	mov	r1, r3
 80044ea:	481f      	ldr	r0, [pc, #124]	; (8004568 <HAL_TIM_MspPostInit+0xf4>)
 80044ec:	f001 fa28 	bl	8005940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_PWM_3_Pin|LED_PWM_4_Pin;
 80044f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80044f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f6:	2302      	movs	r3, #2
 80044f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fe:	2300      	movs	r3, #0
 8004500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004502:	2301      	movs	r3, #1
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004506:	f107 0314 	add.w	r3, r7, #20
 800450a:	4619      	mov	r1, r3
 800450c:	4817      	ldr	r0, [pc, #92]	; (800456c <HAL_TIM_MspPostInit+0xf8>)
 800450e:	f001 fa17 	bl	8005940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004512:	e022      	b.n	800455a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM14)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a15      	ldr	r2, [pc, #84]	; (8004570 <HAL_TIM_MspPostInit+0xfc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d11d      	bne.n	800455a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <HAL_TIM_MspPostInit+0xf0>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	4a0f      	ldr	r2, [pc, #60]	; (8004564 <HAL_TIM_MspPostInit+0xf0>)
 8004528:	f043 0301 	orr.w	r3, r3, #1
 800452c:	6313      	str	r3, [r2, #48]	; 0x30
 800452e:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <HAL_TIM_MspPostInit+0xf0>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453e:	2302      	movs	r3, #2
 8004540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004546:	2300      	movs	r3, #0
 8004548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800454a:	2309      	movs	r3, #9
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 800454e:	f107 0314 	add.w	r3, r7, #20
 8004552:	4619      	mov	r1, r3
 8004554:	4804      	ldr	r0, [pc, #16]	; (8004568 <HAL_TIM_MspPostInit+0xf4>)
 8004556:	f001 f9f3 	bl	8005940 <HAL_GPIO_Init>
}
 800455a:	bf00      	nop
 800455c:	3728      	adds	r7, #40	; 0x28
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023800 	.word	0x40023800
 8004568:	40020000 	.word	0x40020000
 800456c:	40020400 	.word	0x40020400
 8004570:	40002000 	.word	0x40002000

08004574 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004578:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <MX_UART4_Init+0x4c>)
 800457a:	4a12      	ldr	r2, [pc, #72]	; (80045c4 <MX_UART4_Init+0x50>)
 800457c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <MX_UART4_Init+0x4c>)
 8004580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004584:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004586:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <MX_UART4_Init+0x4c>)
 8004588:	2200      	movs	r2, #0
 800458a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800458c:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <MX_UART4_Init+0x4c>)
 800458e:	2200      	movs	r2, #0
 8004590:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004592:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <MX_UART4_Init+0x4c>)
 8004594:	2200      	movs	r2, #0
 8004596:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <MX_UART4_Init+0x4c>)
 800459a:	220c      	movs	r2, #12
 800459c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <MX_UART4_Init+0x4c>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <MX_UART4_Init+0x4c>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80045aa:	4805      	ldr	r0, [pc, #20]	; (80045c0 <MX_UART4_Init+0x4c>)
 80045ac:	f003 fb4c 	bl	8007c48 <HAL_UART_Init>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80045b6:	f7ff fc87 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	200004c0 	.word	0x200004c0
 80045c4:	40004c00 	.word	0x40004c00

080045c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <MX_USART2_UART_Init+0x50>)
 80045d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045d4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80045d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045ee:	220c      	movs	r2, #12
 80045f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045fe:	4805      	ldr	r0, [pc, #20]	; (8004614 <MX_USART2_UART_Init+0x4c>)
 8004600:	f003 fb22 	bl	8007c48 <HAL_UART_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800460a:	f7ff fc5d 	bl	8003ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000504 	.word	0x20000504
 8004618:	40004400 	.word	0x40004400

0800461c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	; 0x30
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004624:	f107 031c 	add.w	r3, r7, #28
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a99      	ldr	r2, [pc, #612]	; (80048a0 <HAL_UART_MspInit+0x284>)
 800463a:	4293      	cmp	r3, r2
 800463c:	f040 8094 	bne.w	8004768 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004640:	2300      	movs	r3, #0
 8004642:	61bb      	str	r3, [r7, #24]
 8004644:	4b97      	ldr	r3, [pc, #604]	; (80048a4 <HAL_UART_MspInit+0x288>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	4a96      	ldr	r2, [pc, #600]	; (80048a4 <HAL_UART_MspInit+0x288>)
 800464a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800464e:	6413      	str	r3, [r2, #64]	; 0x40
 8004650:	4b94      	ldr	r3, [pc, #592]	; (80048a4 <HAL_UART_MspInit+0x288>)
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	4b90      	ldr	r3, [pc, #576]	; (80048a4 <HAL_UART_MspInit+0x288>)
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	4a8f      	ldr	r2, [pc, #572]	; (80048a4 <HAL_UART_MspInit+0x288>)
 8004666:	f043 0304 	orr.w	r3, r3, #4
 800466a:	6313      	str	r3, [r2, #48]	; 0x30
 800466c:	4b8d      	ldr	r3, [pc, #564]	; (80048a4 <HAL_UART_MspInit+0x288>)
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = JETSON_TX_Pin|JETSON_RX_Pin;
 8004678:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800467c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467e:	2302      	movs	r3, #2
 8004680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004686:	2303      	movs	r3, #3
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800468a:	2308      	movs	r3, #8
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468e:	f107 031c 	add.w	r3, r7, #28
 8004692:	4619      	mov	r1, r3
 8004694:	4884      	ldr	r0, [pc, #528]	; (80048a8 <HAL_UART_MspInit+0x28c>)
 8004696:	f001 f953 	bl	8005940 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800469a:	4b84      	ldr	r3, [pc, #528]	; (80048ac <HAL_UART_MspInit+0x290>)
 800469c:	4a84      	ldr	r2, [pc, #528]	; (80048b0 <HAL_UART_MspInit+0x294>)
 800469e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80046a0:	4b82      	ldr	r3, [pc, #520]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046a6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046a8:	4b80      	ldr	r3, [pc, #512]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046ae:	4b7f      	ldr	r3, [pc, #508]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046b4:	4b7d      	ldr	r3, [pc, #500]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046ba:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046bc:	4b7b      	ldr	r3, [pc, #492]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046be:	2200      	movs	r2, #0
 80046c0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046c2:	4b7a      	ldr	r3, [pc, #488]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80046c8:	4b78      	ldr	r3, [pc, #480]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80046ce:	4b77      	ldr	r3, [pc, #476]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046d4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046d6:	4b75      	ldr	r3, [pc, #468]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046d8:	2200      	movs	r2, #0
 80046da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80046dc:	4873      	ldr	r0, [pc, #460]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046de:	f000 fd2d 	bl	800513c <HAL_DMA_Init>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80046e8:	f7ff fbee 	bl	8003ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a6f      	ldr	r2, [pc, #444]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
 80046f2:	4a6e      	ldr	r2, [pc, #440]	; (80048ac <HAL_UART_MspInit+0x290>)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80046f8:	4b6e      	ldr	r3, [pc, #440]	; (80048b4 <HAL_UART_MspInit+0x298>)
 80046fa:	4a6f      	ldr	r2, [pc, #444]	; (80048b8 <HAL_UART_MspInit+0x29c>)
 80046fc:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80046fe:	4b6d      	ldr	r3, [pc, #436]	; (80048b4 <HAL_UART_MspInit+0x298>)
 8004700:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004704:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004706:	4b6b      	ldr	r3, [pc, #428]	; (80048b4 <HAL_UART_MspInit+0x298>)
 8004708:	2240      	movs	r2, #64	; 0x40
 800470a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800470c:	4b69      	ldr	r3, [pc, #420]	; (80048b4 <HAL_UART_MspInit+0x298>)
 800470e:	2200      	movs	r2, #0
 8004710:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004712:	4b68      	ldr	r3, [pc, #416]	; (80048b4 <HAL_UART_MspInit+0x298>)
 8004714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004718:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800471a:	4b66      	ldr	r3, [pc, #408]	; (80048b4 <HAL_UART_MspInit+0x298>)
 800471c:	2200      	movs	r2, #0
 800471e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004720:	4b64      	ldr	r3, [pc, #400]	; (80048b4 <HAL_UART_MspInit+0x298>)
 8004722:	2200      	movs	r2, #0
 8004724:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004726:	4b63      	ldr	r3, [pc, #396]	; (80048b4 <HAL_UART_MspInit+0x298>)
 8004728:	2200      	movs	r2, #0
 800472a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800472c:	4b61      	ldr	r3, [pc, #388]	; (80048b4 <HAL_UART_MspInit+0x298>)
 800472e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004732:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004734:	4b5f      	ldr	r3, [pc, #380]	; (80048b4 <HAL_UART_MspInit+0x298>)
 8004736:	2200      	movs	r2, #0
 8004738:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800473a:	485e      	ldr	r0, [pc, #376]	; (80048b4 <HAL_UART_MspInit+0x298>)
 800473c:	f000 fcfe 	bl	800513c <HAL_DMA_Init>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004746:	f7ff fbbf 	bl	8003ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a59      	ldr	r2, [pc, #356]	; (80048b4 <HAL_UART_MspInit+0x298>)
 800474e:	635a      	str	r2, [r3, #52]	; 0x34
 8004750:	4a58      	ldr	r2, [pc, #352]	; (80048b4 <HAL_UART_MspInit+0x298>)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004756:	2200      	movs	r2, #0
 8004758:	2100      	movs	r1, #0
 800475a:	2034      	movs	r0, #52	; 0x34
 800475c:	f000 fcb7 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004760:	2034      	movs	r0, #52	; 0x34
 8004762:	f000 fcd0 	bl	8005106 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004766:	e097      	b.n	8004898 <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a53      	ldr	r2, [pc, #332]	; (80048bc <HAL_UART_MspInit+0x2a0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	f040 8092 	bne.w	8004898 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004774:	2300      	movs	r3, #0
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	4b4a      	ldr	r3, [pc, #296]	; (80048a4 <HAL_UART_MspInit+0x288>)
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	4a49      	ldr	r2, [pc, #292]	; (80048a4 <HAL_UART_MspInit+0x288>)
 800477e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004782:	6413      	str	r3, [r2, #64]	; 0x40
 8004784:	4b47      	ldr	r3, [pc, #284]	; (80048a4 <HAL_UART_MspInit+0x288>)
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	4b43      	ldr	r3, [pc, #268]	; (80048a4 <HAL_UART_MspInit+0x288>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	4a42      	ldr	r2, [pc, #264]	; (80048a4 <HAL_UART_MspInit+0x288>)
 800479a:	f043 0308 	orr.w	r3, r3, #8
 800479e:	6313      	str	r3, [r2, #48]	; 0x30
 80047a0:	4b40      	ldr	r3, [pc, #256]	; (80048a4 <HAL_UART_MspInit+0x288>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GYROSCOOTER_TX_Pin|GYROSCOOTER_RX_Pin;
 80047ac:	2360      	movs	r3, #96	; 0x60
 80047ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b0:	2302      	movs	r3, #2
 80047b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b8:	2303      	movs	r3, #3
 80047ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047bc:	2307      	movs	r3, #7
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047c0:	f107 031c 	add.w	r3, r7, #28
 80047c4:	4619      	mov	r1, r3
 80047c6:	483e      	ldr	r0, [pc, #248]	; (80048c0 <HAL_UART_MspInit+0x2a4>)
 80047c8:	f001 f8ba 	bl	8005940 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80047cc:	4b3d      	ldr	r3, [pc, #244]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 80047ce:	4a3e      	ldr	r2, [pc, #248]	; (80048c8 <HAL_UART_MspInit+0x2ac>)
 80047d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80047d2:	4b3c      	ldr	r3, [pc, #240]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 80047d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047d8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047da:	4b3a      	ldr	r3, [pc, #232]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 80047dc:	2200      	movs	r2, #0
 80047de:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047e0:	4b38      	ldr	r3, [pc, #224]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047e6:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 80047e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047ee:	4b35      	ldr	r3, [pc, #212]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047f4:	4b33      	ldr	r3, [pc, #204]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80047fa:	4b32      	ldr	r3, [pc, #200]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004800:	4b30      	ldr	r3, [pc, #192]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 8004802:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004806:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004808:	4b2e      	ldr	r3, [pc, #184]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 800480a:	2200      	movs	r2, #0
 800480c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800480e:	482d      	ldr	r0, [pc, #180]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 8004810:	f000 fc94 	bl	800513c <HAL_DMA_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_UART_MspInit+0x202>
      Error_Handler();
 800481a:	f7ff fb55 	bl	8003ec8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a28      	ldr	r2, [pc, #160]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 8004822:	639a      	str	r2, [r3, #56]	; 0x38
 8004824:	4a27      	ldr	r2, [pc, #156]	; (80048c4 <HAL_UART_MspInit+0x2a8>)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800482a:	4b28      	ldr	r3, [pc, #160]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 800482c:	4a28      	ldr	r2, [pc, #160]	; (80048d0 <HAL_UART_MspInit+0x2b4>)
 800482e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004830:	4b26      	ldr	r3, [pc, #152]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 8004832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004836:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004838:	4b24      	ldr	r3, [pc, #144]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 800483a:	2240      	movs	r2, #64	; 0x40
 800483c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800483e:	4b23      	ldr	r3, [pc, #140]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 8004840:	2200      	movs	r2, #0
 8004842:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004844:	4b21      	ldr	r3, [pc, #132]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 8004846:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800484a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800484c:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 800484e:	2200      	movs	r2, #0
 8004850:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004852:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 8004854:	2200      	movs	r2, #0
 8004856:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004858:	4b1c      	ldr	r3, [pc, #112]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 800485a:	2200      	movs	r2, #0
 800485c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800485e:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 8004860:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004864:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004866:	4b19      	ldr	r3, [pc, #100]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 8004868:	2200      	movs	r2, #0
 800486a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800486c:	4817      	ldr	r0, [pc, #92]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 800486e:	f000 fc65 	bl	800513c <HAL_DMA_Init>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_UART_MspInit+0x260>
      Error_Handler();
 8004878:	f7ff fb26 	bl	8003ec8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a13      	ldr	r2, [pc, #76]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 8004880:	635a      	str	r2, [r3, #52]	; 0x34
 8004882:	4a12      	ldr	r2, [pc, #72]	; (80048cc <HAL_UART_MspInit+0x2b0>)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004888:	2200      	movs	r2, #0
 800488a:	2100      	movs	r1, #0
 800488c:	2026      	movs	r0, #38	; 0x26
 800488e:	f000 fc1e 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004892:	2026      	movs	r0, #38	; 0x26
 8004894:	f000 fc37 	bl	8005106 <HAL_NVIC_EnableIRQ>
}
 8004898:	bf00      	nop
 800489a:	3730      	adds	r7, #48	; 0x30
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40004c00 	.word	0x40004c00
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40020800 	.word	0x40020800
 80048ac:	200003a0 	.word	0x200003a0
 80048b0:	40026040 	.word	0x40026040
 80048b4:	20000548 	.word	0x20000548
 80048b8:	40026070 	.word	0x40026070
 80048bc:	40004400 	.word	0x40004400
 80048c0:	40020c00 	.word	0x40020c00
 80048c4:	20000400 	.word	0x20000400
 80048c8:	40026088 	.word	0x40026088
 80048cc:	20000460 	.word	0x20000460
 80048d0:	400260a0 	.word	0x400260a0

080048d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800490c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048d8:	480d      	ldr	r0, [pc, #52]	; (8004910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048da:	490e      	ldr	r1, [pc, #56]	; (8004914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048dc:	4a0e      	ldr	r2, [pc, #56]	; (8004918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048e0:	e002      	b.n	80048e8 <LoopCopyDataInit>

080048e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048e6:	3304      	adds	r3, #4

080048e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048ec:	d3f9      	bcc.n	80048e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048ee:	4a0b      	ldr	r2, [pc, #44]	; (800491c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80048f0:	4c0b      	ldr	r4, [pc, #44]	; (8004920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80048f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048f4:	e001      	b.n	80048fa <LoopFillZerobss>

080048f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048f8:	3204      	adds	r2, #4

080048fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048fc:	d3fb      	bcc.n	80048f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80048fe:	f7ff fbf5 	bl	80040ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004902:	f004 fd7d 	bl	8009400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004906:	f7ff f917 	bl	8003b38 <main>
  bx  lr    
 800490a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800490c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004914:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004918:	08009500 	.word	0x08009500
  ldr r2, =_sbss
 800491c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004920:	200005ac 	.word	0x200005ac

08004924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004924:	e7fe      	b.n	8004924 <ADC_IRQHandler>
	...

08004928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800492c:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <HAL_Init+0x40>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0d      	ldr	r2, [pc, #52]	; (8004968 <HAL_Init+0x40>)
 8004932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_Init+0x40>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <HAL_Init+0x40>)
 800493e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <HAL_Init+0x40>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a07      	ldr	r2, [pc, #28]	; (8004968 <HAL_Init+0x40>)
 800494a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004950:	2003      	movs	r0, #3
 8004952:	f000 fbb1 	bl	80050b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004956:	200f      	movs	r0, #15
 8004958:	f000 f808 	bl	800496c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800495c:	f7ff fb38 	bl	8003fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023c00 	.word	0x40023c00

0800496c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <HAL_InitTick+0x54>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_InitTick+0x58>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	4619      	mov	r1, r3
 800497e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004982:	fbb3 f3f1 	udiv	r3, r3, r1
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fbc9 	bl	8005122 <HAL_SYSTICK_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e00e      	b.n	80049b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b0f      	cmp	r3, #15
 800499e:	d80a      	bhi.n	80049b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049a0:	2200      	movs	r2, #0
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295
 80049a8:	f000 fb91 	bl	80050ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049ac:	4a06      	ldr	r2, [pc, #24]	; (80049c8 <HAL_InitTick+0x5c>)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000004 	.word	0x20000004
 80049c4:	2000000c 	.word	0x2000000c
 80049c8:	20000008 	.word	0x20000008

080049cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_IncTick+0x20>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_IncTick+0x24>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4413      	add	r3, r2
 80049dc:	4a04      	ldr	r2, [pc, #16]	; (80049f0 <HAL_IncTick+0x24>)
 80049de:	6013      	str	r3, [r2, #0]
}
 80049e0:	bf00      	nop
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	2000000c 	.word	0x2000000c
 80049f0:	200005a8 	.word	0x200005a8

080049f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return uwTick;
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <HAL_GetTick+0x14>)
 80049fa:	681b      	ldr	r3, [r3, #0]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	200005a8 	.word	0x200005a8

08004a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a14:	f7ff ffee 	bl	80049f4 <HAL_GetTick>
 8004a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d005      	beq.n	8004a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a26:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <HAL_Delay+0x44>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a32:	bf00      	nop
 8004a34:	f7ff ffde 	bl	80049f4 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d8f7      	bhi.n	8004a34 <HAL_Delay+0x28>
  {
  }
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	2000000c 	.word	0x2000000c

08004a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e033      	b.n	8004ad2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fd ffe8 	bl	8002a48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d118      	bne.n	8004ac4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a9a:	f023 0302 	bic.w	r3, r3, #2
 8004a9e:	f043 0202 	orr.w	r2, r3, #2
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f93a 	bl	8004d20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f023 0303 	bic.w	r3, r3, #3
 8004aba:	f043 0201 	orr.w	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ac2:	e001      	b.n	8004ac8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_ADC_ConfigChannel+0x1c>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e105      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x228>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b09      	cmp	r3, #9
 8004b06:	d925      	bls.n	8004b54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68d9      	ldr	r1, [r3, #12]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	4613      	mov	r3, r2
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3b1e      	subs	r3, #30
 8004b1e:	2207      	movs	r2, #7
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	43da      	mvns	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	400a      	ands	r2, r1
 8004b2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68d9      	ldr	r1, [r3, #12]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	4618      	mov	r0, r3
 8004b40:	4603      	mov	r3, r0
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4403      	add	r3, r0
 8004b46:	3b1e      	subs	r3, #30
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	e022      	b.n	8004b9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6919      	ldr	r1, [r3, #16]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	4613      	mov	r3, r2
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	4413      	add	r3, r2
 8004b68:	2207      	movs	r2, #7
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	400a      	ands	r2, r1
 8004b76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6919      	ldr	r1, [r3, #16]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	4618      	mov	r0, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	4403      	add	r3, r0
 8004b90:	409a      	lsls	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b06      	cmp	r3, #6
 8004ba0:	d824      	bhi.n	8004bec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3b05      	subs	r3, #5
 8004bb4:	221f      	movs	r2, #31
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	400a      	ands	r2, r1
 8004bc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	3b05      	subs	r3, #5
 8004bde:	fa00 f203 	lsl.w	r2, r0, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	635a      	str	r2, [r3, #52]	; 0x34
 8004bea:	e04c      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	d824      	bhi.n	8004c3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	3b23      	subs	r3, #35	; 0x23
 8004c06:	221f      	movs	r2, #31
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	43da      	mvns	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	400a      	ands	r2, r1
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	4618      	mov	r0, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3b23      	subs	r3, #35	; 0x23
 8004c30:	fa00 f203 	lsl.w	r2, r0, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c3c:	e023      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3b41      	subs	r3, #65	; 0x41
 8004c50:	221f      	movs	r2, #31
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43da      	mvns	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	3b41      	subs	r3, #65	; 0x41
 8004c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c86:	4b22      	ldr	r3, [pc, #136]	; (8004d10 <HAL_ADC_ConfigChannel+0x234>)
 8004c88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <HAL_ADC_ConfigChannel+0x238>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d109      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x1cc>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b12      	cmp	r3, #18
 8004c9a:	d105      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a19      	ldr	r2, [pc, #100]	; (8004d14 <HAL_ADC_ConfigChannel+0x238>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d123      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x21e>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	d003      	beq.n	8004cc2 <HAL_ADC_ConfigChannel+0x1e6>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b11      	cmp	r3, #17
 8004cc0:	d11b      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d111      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004cd6:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <HAL_ADC_ConfigChannel+0x23c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a10      	ldr	r2, [pc, #64]	; (8004d1c <HAL_ADC_ConfigChannel+0x240>)
 8004cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce0:	0c9a      	lsrs	r2, r3, #18
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004cec:	e002      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f9      	bne.n	8004cee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	40012300 	.word	0x40012300
 8004d14:	40012000 	.word	0x40012000
 8004d18:	20000004 	.word	0x20000004
 8004d1c:	431bde83 	.word	0x431bde83

08004d20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d28:	4b79      	ldr	r3, [pc, #484]	; (8004f10 <ADC_Init+0x1f0>)
 8004d2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	021a      	lsls	r2, r3, #8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6899      	ldr	r1, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	4a58      	ldr	r2, [pc, #352]	; (8004f14 <ADC_Init+0x1f4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d022      	beq.n	8004dfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6899      	ldr	r1, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004de8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6899      	ldr	r1, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	e00f      	b.n	8004e1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0202 	bic.w	r2, r2, #2
 8004e2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6899      	ldr	r1, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	7e1b      	ldrb	r3, [r3, #24]
 8004e38:	005a      	lsls	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01b      	beq.n	8004e84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	3b01      	subs	r3, #1
 8004e78:	035a      	lsls	r2, r3, #13
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	e007      	b.n	8004e94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	051a      	lsls	r2, r3, #20
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6899      	ldr	r1, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ed6:	025a      	lsls	r2, r3, #9
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6899      	ldr	r1, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	029a      	lsls	r2, r3, #10
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	609a      	str	r2, [r3, #8]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40012300 	.word	0x40012300
 8004f14:	0f000001 	.word	0x0f000001

08004f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <__NVIC_SetPriorityGrouping+0x44>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f34:	4013      	ands	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f4a:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <__NVIC_SetPriorityGrouping+0x44>)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	60d3      	str	r3, [r2, #12]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <__NVIC_GetPriorityGrouping+0x18>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	f003 0307 	and.w	r3, r3, #7
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	db0b      	blt.n	8004fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	f003 021f 	and.w	r2, r3, #31
 8004f94:	4907      	ldr	r1, [pc, #28]	; (8004fb4 <__NVIC_EnableIRQ+0x38>)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	e000e100 	.word	0xe000e100

08004fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	6039      	str	r1, [r7, #0]
 8004fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	db0a      	blt.n	8004fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	490c      	ldr	r1, [pc, #48]	; (8005004 <__NVIC_SetPriority+0x4c>)
 8004fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd6:	0112      	lsls	r2, r2, #4
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	440b      	add	r3, r1
 8004fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fe0:	e00a      	b.n	8004ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	4908      	ldr	r1, [pc, #32]	; (8005008 <__NVIC_SetPriority+0x50>)
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	3b04      	subs	r3, #4
 8004ff0:	0112      	lsls	r2, r2, #4
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	761a      	strb	r2, [r3, #24]
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	e000e100 	.word	0xe000e100
 8005008:	e000ed00 	.word	0xe000ed00

0800500c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f1c3 0307 	rsb	r3, r3, #7
 8005026:	2b04      	cmp	r3, #4
 8005028:	bf28      	it	cs
 800502a:	2304      	movcs	r3, #4
 800502c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3304      	adds	r3, #4
 8005032:	2b06      	cmp	r3, #6
 8005034:	d902      	bls.n	800503c <NVIC_EncodePriority+0x30>
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3b03      	subs	r3, #3
 800503a:	e000      	b.n	800503e <NVIC_EncodePriority+0x32>
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005040:	f04f 32ff 	mov.w	r2, #4294967295
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43da      	mvns	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	401a      	ands	r2, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005054:	f04f 31ff 	mov.w	r1, #4294967295
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	fa01 f303 	lsl.w	r3, r1, r3
 800505e:	43d9      	mvns	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005064:	4313      	orrs	r3, r2
         );
}
 8005066:	4618      	mov	r0, r3
 8005068:	3724      	adds	r7, #36	; 0x24
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3b01      	subs	r3, #1
 8005080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005084:	d301      	bcc.n	800508a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005086:	2301      	movs	r3, #1
 8005088:	e00f      	b.n	80050aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800508a:	4a0a      	ldr	r2, [pc, #40]	; (80050b4 <SysTick_Config+0x40>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005092:	210f      	movs	r1, #15
 8005094:	f04f 30ff 	mov.w	r0, #4294967295
 8005098:	f7ff ff8e 	bl	8004fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <SysTick_Config+0x40>)
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <SysTick_Config+0x40>)
 80050a4:	2207      	movs	r2, #7
 80050a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	e000e010 	.word	0xe000e010

080050b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff29 	bl	8004f18 <__NVIC_SetPriorityGrouping>
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	4603      	mov	r3, r0
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050e0:	f7ff ff3e 	bl	8004f60 <__NVIC_GetPriorityGrouping>
 80050e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	6978      	ldr	r0, [r7, #20]
 80050ec:	f7ff ff8e 	bl	800500c <NVIC_EncodePriority>
 80050f0:	4602      	mov	r2, r0
 80050f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff ff5d 	bl	8004fb8 <__NVIC_SetPriority>
}
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	4603      	mov	r3, r0
 800510e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff31 	bl	8004f7c <__NVIC_EnableIRQ>
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ffa2 	bl	8005074 <SysTick_Config>
 8005130:	4603      	mov	r3, r0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005148:	f7ff fc54 	bl	80049f4 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e099      	b.n	800528c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005178:	e00f      	b.n	800519a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800517a:	f7ff fc3b 	bl	80049f4 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b05      	cmp	r3, #5
 8005186:	d908      	bls.n	800519a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2203      	movs	r2, #3
 8005192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e078      	b.n	800528c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e8      	bne.n	800517a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4b38      	ldr	r3, [pc, #224]	; (8005294 <HAL_DMA_Init+0x158>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d107      	bne.n	8005204 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	4313      	orrs	r3, r2
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0307 	bic.w	r3, r3, #7
 800521a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	2b04      	cmp	r3, #4
 800522c:	d117      	bne.n	800525e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00e      	beq.n	800525e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fb01 	bl	8005848 <DMA_CheckFifoParam>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2240      	movs	r2, #64	; 0x40
 8005250:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800525a:	2301      	movs	r3, #1
 800525c:	e016      	b.n	800528c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fab8 	bl	80057dc <DMA_CalcBaseAndBitshift>
 800526c:	4603      	mov	r3, r0
 800526e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005274:	223f      	movs	r2, #63	; 0x3f
 8005276:	409a      	lsls	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	f010803f 	.word	0xf010803f

08005298 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_DMA_Start_IT+0x26>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e040      	b.n	8005340 <HAL_DMA_Start_IT+0xa8>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d12f      	bne.n	8005332 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fa4a 	bl	8005780 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f0:	223f      	movs	r2, #63	; 0x3f
 80052f2:	409a      	lsls	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0216 	orr.w	r2, r2, #22
 8005306:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d007      	beq.n	8005320 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0208 	orr.w	r2, r2, #8
 800531e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	e005      	b.n	800533e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800533a:	2302      	movs	r3, #2
 800533c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800533e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005354:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005356:	f7ff fb4d 	bl	80049f4 <HAL_GetTick>
 800535a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d008      	beq.n	800537a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2280      	movs	r2, #128	; 0x80
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e052      	b.n	8005420 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0216 	bic.w	r2, r2, #22
 8005388:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005398:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <HAL_DMA_Abort+0x62>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0208 	bic.w	r2, r2, #8
 80053b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0201 	bic.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053ca:	e013      	b.n	80053f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053cc:	f7ff fb12 	bl	80049f4 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d90c      	bls.n	80053f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2203      	movs	r2, #3
 80053e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e015      	b.n	8005420 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e4      	bne.n	80053cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005406:	223f      	movs	r2, #63	; 0x3f
 8005408:	409a      	lsls	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d004      	beq.n	8005446 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2280      	movs	r2, #128	; 0x80
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e00c      	b.n	8005460 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2205      	movs	r2, #5
 800544a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0201 	bic.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005478:	4b92      	ldr	r3, [pc, #584]	; (80056c4 <HAL_DMA_IRQHandler+0x258>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a92      	ldr	r2, [pc, #584]	; (80056c8 <HAL_DMA_IRQHandler+0x25c>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	0a9b      	lsrs	r3, r3, #10
 8005484:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005496:	2208      	movs	r2, #8
 8005498:	409a      	lsls	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4013      	ands	r3, r2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01a      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d013      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0204 	bic.w	r2, r2, #4
 80054be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c4:	2208      	movs	r2, #8
 80054c6:	409a      	lsls	r2, r3
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d0:	f043 0201 	orr.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054dc:	2201      	movs	r2, #1
 80054de:	409a      	lsls	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4013      	ands	r3, r2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d012      	beq.n	800550e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fa:	2201      	movs	r2, #1
 80054fc:	409a      	lsls	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	f043 0202 	orr.w	r2, r3, #2
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005512:	2204      	movs	r2, #4
 8005514:	409a      	lsls	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d012      	beq.n	8005544 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00b      	beq.n	8005544 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005530:	2204      	movs	r2, #4
 8005532:	409a      	lsls	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553c:	f043 0204 	orr.w	r2, r3, #4
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005548:	2210      	movs	r2, #16
 800554a:	409a      	lsls	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d043      	beq.n	80055dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d03c      	beq.n	80055dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005566:	2210      	movs	r2, #16
 8005568:	409a      	lsls	r2, r3
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d018      	beq.n	80055ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d108      	bne.n	800559c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d024      	beq.n	80055dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4798      	blx	r3
 800559a:	e01f      	b.n	80055dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01b      	beq.n	80055dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	4798      	blx	r3
 80055ac:	e016      	b.n	80055dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d107      	bne.n	80055cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0208 	bic.w	r2, r2, #8
 80055ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e0:	2220      	movs	r2, #32
 80055e2:	409a      	lsls	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 808e 	beq.w	800570a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8086 	beq.w	800570a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005602:	2220      	movs	r2, #32
 8005604:	409a      	lsls	r2, r3
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b05      	cmp	r3, #5
 8005614:	d136      	bne.n	8005684 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0216 	bic.w	r2, r2, #22
 8005624:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695a      	ldr	r2, [r3, #20]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005634:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <HAL_DMA_IRQHandler+0x1da>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0208 	bic.w	r2, r2, #8
 8005654:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565a:	223f      	movs	r2, #63	; 0x3f
 800565c:	409a      	lsls	r2, r3
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005676:	2b00      	cmp	r3, #0
 8005678:	d07d      	beq.n	8005776 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
        }
        return;
 8005682:	e078      	b.n	8005776 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01c      	beq.n	80056cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d108      	bne.n	80056b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d030      	beq.n	800570a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
 80056b0:	e02b      	b.n	800570a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d027      	beq.n	800570a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
 80056c2:	e022      	b.n	800570a <HAL_DMA_IRQHandler+0x29e>
 80056c4:	20000004 	.word	0x20000004
 80056c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10f      	bne.n	80056fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0210 	bic.w	r2, r2, #16
 80056e8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	2b00      	cmp	r3, #0
 8005710:	d032      	beq.n	8005778 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d022      	beq.n	8005764 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2205      	movs	r2, #5
 8005722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0201 	bic.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	3301      	adds	r3, #1
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	429a      	cmp	r2, r3
 8005740:	d307      	bcc.n	8005752 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f2      	bne.n	8005736 <HAL_DMA_IRQHandler+0x2ca>
 8005750:	e000      	b.n	8005754 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005752:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	4798      	blx	r3
 8005774:	e000      	b.n	8005778 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005776:	bf00      	nop
    }
  }
}
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop

08005780 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800579c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d108      	bne.n	80057c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80057be:	e007      	b.n	80057d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	60da      	str	r2, [r3, #12]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	3b10      	subs	r3, #16
 80057ec:	4a14      	ldr	r2, [pc, #80]	; (8005840 <DMA_CalcBaseAndBitshift+0x64>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057f6:	4a13      	ldr	r2, [pc, #76]	; (8005844 <DMA_CalcBaseAndBitshift+0x68>)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d909      	bls.n	800581e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	1d1a      	adds	r2, r3, #4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	659a      	str	r2, [r3, #88]	; 0x58
 800581c:	e007      	b.n	800582e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	aaaaaaab 	.word	0xaaaaaaab
 8005844:	080094ac 	.word	0x080094ac

08005848 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d11f      	bne.n	80058a2 <DMA_CheckFifoParam+0x5a>
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d856      	bhi.n	8005916 <DMA_CheckFifoParam+0xce>
 8005868:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <DMA_CheckFifoParam+0x28>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005881 	.word	0x08005881
 8005874:	08005893 	.word	0x08005893
 8005878:	08005881 	.word	0x08005881
 800587c:	08005917 	.word	0x08005917
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d046      	beq.n	800591a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005890:	e043      	b.n	800591a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800589a:	d140      	bne.n	800591e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a0:	e03d      	b.n	800591e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058aa:	d121      	bne.n	80058f0 <DMA_CheckFifoParam+0xa8>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d837      	bhi.n	8005922 <DMA_CheckFifoParam+0xda>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <DMA_CheckFifoParam+0x70>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058c9 	.word	0x080058c9
 80058bc:	080058cf 	.word	0x080058cf
 80058c0:	080058c9 	.word	0x080058c9
 80058c4:	080058e1 	.word	0x080058e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	73fb      	strb	r3, [r7, #15]
      break;
 80058cc:	e030      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d025      	beq.n	8005926 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058de:	e022      	b.n	8005926 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058e8:	d11f      	bne.n	800592a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058ee:	e01c      	b.n	800592a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d903      	bls.n	80058fe <DMA_CheckFifoParam+0xb6>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d003      	beq.n	8005904 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058fc:	e018      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
      break;
 8005902:	e015      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00e      	beq.n	800592e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
      break;
 8005914:	e00b      	b.n	800592e <DMA_CheckFifoParam+0xe6>
      break;
 8005916:	bf00      	nop
 8005918:	e00a      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;
 800591a:	bf00      	nop
 800591c:	e008      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;
 800591e:	bf00      	nop
 8005920:	e006      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;
 8005922:	bf00      	nop
 8005924:	e004      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;
 8005926:	bf00      	nop
 8005928:	e002      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;   
 800592a:	bf00      	nop
 800592c:	e000      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;
 800592e:	bf00      	nop
    }
  } 
  
  return status; 
 8005930:	7bfb      	ldrb	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop

08005940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800594e:	2300      	movs	r3, #0
 8005950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	e16b      	b.n	8005c34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800595c:	2201      	movs	r2, #1
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4013      	ands	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	429a      	cmp	r2, r3
 8005976:	f040 815a 	bne.w	8005c2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d005      	beq.n	8005992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800598e:	2b02      	cmp	r3, #2
 8005990:	d130      	bne.n	80059f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	2203      	movs	r2, #3
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059c8:	2201      	movs	r2, #1
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 0201 	and.w	r2, r3, #1
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d017      	beq.n	8005a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4013      	ands	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d123      	bne.n	8005a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	08da      	lsrs	r2, r3, #3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3208      	adds	r2, #8
 8005a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	220f      	movs	r2, #15
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	08da      	lsrs	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3208      	adds	r2, #8
 8005a7e:	69b9      	ldr	r1, [r7, #24]
 8005a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	2203      	movs	r2, #3
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f003 0203 	and.w	r2, r3, #3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80b4 	beq.w	8005c2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	4b60      	ldr	r3, [pc, #384]	; (8005c4c <HAL_GPIO_Init+0x30c>)
 8005acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ace:	4a5f      	ldr	r2, [pc, #380]	; (8005c4c <HAL_GPIO_Init+0x30c>)
 8005ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ad6:	4b5d      	ldr	r3, [pc, #372]	; (8005c4c <HAL_GPIO_Init+0x30c>)
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ae2:	4a5b      	ldr	r2, [pc, #364]	; (8005c50 <HAL_GPIO_Init+0x310>)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	089b      	lsrs	r3, r3, #2
 8005ae8:	3302      	adds	r3, #2
 8005aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	220f      	movs	r2, #15
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	43db      	mvns	r3, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4013      	ands	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a52      	ldr	r2, [pc, #328]	; (8005c54 <HAL_GPIO_Init+0x314>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d02b      	beq.n	8005b66 <HAL_GPIO_Init+0x226>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a51      	ldr	r2, [pc, #324]	; (8005c58 <HAL_GPIO_Init+0x318>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d025      	beq.n	8005b62 <HAL_GPIO_Init+0x222>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a50      	ldr	r2, [pc, #320]	; (8005c5c <HAL_GPIO_Init+0x31c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d01f      	beq.n	8005b5e <HAL_GPIO_Init+0x21e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a4f      	ldr	r2, [pc, #316]	; (8005c60 <HAL_GPIO_Init+0x320>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d019      	beq.n	8005b5a <HAL_GPIO_Init+0x21a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a4e      	ldr	r2, [pc, #312]	; (8005c64 <HAL_GPIO_Init+0x324>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <HAL_GPIO_Init+0x216>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a4d      	ldr	r2, [pc, #308]	; (8005c68 <HAL_GPIO_Init+0x328>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00d      	beq.n	8005b52 <HAL_GPIO_Init+0x212>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a4c      	ldr	r2, [pc, #304]	; (8005c6c <HAL_GPIO_Init+0x32c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <HAL_GPIO_Init+0x20e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a4b      	ldr	r2, [pc, #300]	; (8005c70 <HAL_GPIO_Init+0x330>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d101      	bne.n	8005b4a <HAL_GPIO_Init+0x20a>
 8005b46:	2307      	movs	r3, #7
 8005b48:	e00e      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	e00c      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b4e:	2306      	movs	r3, #6
 8005b50:	e00a      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b52:	2305      	movs	r3, #5
 8005b54:	e008      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b56:	2304      	movs	r3, #4
 8005b58:	e006      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e004      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e002      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b66:	2300      	movs	r3, #0
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	f002 0203 	and.w	r2, r2, #3
 8005b6e:	0092      	lsls	r2, r2, #2
 8005b70:	4093      	lsls	r3, r2
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b78:	4935      	ldr	r1, [pc, #212]	; (8005c50 <HAL_GPIO_Init+0x310>)
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	089b      	lsrs	r3, r3, #2
 8005b7e:	3302      	adds	r3, #2
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b86:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005baa:	4a32      	ldr	r2, [pc, #200]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005bb0:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bda:	4b26      	ldr	r3, [pc, #152]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bfe:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4013      	ands	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c28:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	3301      	adds	r3, #1
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	f67f ae90 	bls.w	800595c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	3724      	adds	r7, #36	; 0x24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	40013800 	.word	0x40013800
 8005c54:	40020000 	.word	0x40020000
 8005c58:	40020400 	.word	0x40020400
 8005c5c:	40020800 	.word	0x40020800
 8005c60:	40020c00 	.word	0x40020c00
 8005c64:	40021000 	.word	0x40021000
 8005c68:	40021400 	.word	0x40021400
 8005c6c:	40021800 	.word	0x40021800
 8005c70:	40021c00 	.word	0x40021c00
 8005c74:	40013c00 	.word	0x40013c00

08005c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	807b      	strh	r3, [r7, #2]
 8005c84:	4613      	mov	r3, r2
 8005c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c88:	787b      	ldrb	r3, [r7, #1]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c8e:	887a      	ldrh	r2, [r7, #2]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c94:	e003      	b.n	8005c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c96:	887b      	ldrh	r3, [r7, #2]
 8005c98:	041a      	lsls	r2, r3, #16
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	619a      	str	r2, [r3, #24]
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005cbc:	887a      	ldrh	r2, [r7, #2]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	041a      	lsls	r2, r3, #16
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	43d9      	mvns	r1, r3
 8005cc8:	887b      	ldrh	r3, [r7, #2]
 8005cca:	400b      	ands	r3, r1
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	619a      	str	r2, [r3, #24]
}
 8005cd2:	bf00      	nop
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
	...

08005ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e264      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d075      	beq.n	8005dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cfe:	4ba3      	ldr	r3, [pc, #652]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d00c      	beq.n	8005d24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d0a:	4ba0      	ldr	r3, [pc, #640]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d12:	2b08      	cmp	r3, #8
 8005d14:	d112      	bne.n	8005d3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d16:	4b9d      	ldr	r3, [pc, #628]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d22:	d10b      	bne.n	8005d3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d24:	4b99      	ldr	r3, [pc, #612]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d05b      	beq.n	8005de8 <HAL_RCC_OscConfig+0x108>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d157      	bne.n	8005de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e23f      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d44:	d106      	bne.n	8005d54 <HAL_RCC_OscConfig+0x74>
 8005d46:	4b91      	ldr	r3, [pc, #580]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a90      	ldr	r2, [pc, #576]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	e01d      	b.n	8005d90 <HAL_RCC_OscConfig+0xb0>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RCC_OscConfig+0x98>
 8005d5e:	4b8b      	ldr	r3, [pc, #556]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a8a      	ldr	r2, [pc, #552]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	4b88      	ldr	r3, [pc, #544]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a87      	ldr	r2, [pc, #540]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	e00b      	b.n	8005d90 <HAL_RCC_OscConfig+0xb0>
 8005d78:	4b84      	ldr	r3, [pc, #528]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a83      	ldr	r2, [pc, #524]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	4b81      	ldr	r3, [pc, #516]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a80      	ldr	r2, [pc, #512]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d013      	beq.n	8005dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d98:	f7fe fe2c 	bl	80049f4 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005da0:	f7fe fe28 	bl	80049f4 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b64      	cmp	r3, #100	; 0x64
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e204      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db2:	4b76      	ldr	r3, [pc, #472]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0xc0>
 8005dbe:	e014      	b.n	8005dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc0:	f7fe fe18 	bl	80049f4 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7fe fe14 	bl	80049f4 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	; 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e1f0      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dda:	4b6c      	ldr	r3, [pc, #432]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f0      	bne.n	8005dc8 <HAL_RCC_OscConfig+0xe8>
 8005de6:	e000      	b.n	8005dea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d063      	beq.n	8005ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005df6:	4b65      	ldr	r3, [pc, #404]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 030c 	and.w	r3, r3, #12
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00b      	beq.n	8005e1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e02:	4b62      	ldr	r3, [pc, #392]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d11c      	bne.n	8005e48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e0e:	4b5f      	ldr	r3, [pc, #380]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d116      	bne.n	8005e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e1a:	4b5c      	ldr	r3, [pc, #368]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d005      	beq.n	8005e32 <HAL_RCC_OscConfig+0x152>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d001      	beq.n	8005e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e1c4      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e32:	4b56      	ldr	r3, [pc, #344]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	4952      	ldr	r1, [pc, #328]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e46:	e03a      	b.n	8005ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d020      	beq.n	8005e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e50:	4b4f      	ldr	r3, [pc, #316]	; (8005f90 <HAL_RCC_OscConfig+0x2b0>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e56:	f7fe fdcd 	bl	80049f4 <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e5e:	f7fe fdc9 	bl	80049f4 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e1a5      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e70:	4b46      	ldr	r3, [pc, #280]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7c:	4b43      	ldr	r3, [pc, #268]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	4940      	ldr	r1, [pc, #256]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	600b      	str	r3, [r1, #0]
 8005e90:	e015      	b.n	8005ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e92:	4b3f      	ldr	r3, [pc, #252]	; (8005f90 <HAL_RCC_OscConfig+0x2b0>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fe fdac 	bl	80049f4 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ea0:	f7fe fda8 	bl	80049f4 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e184      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eb2:	4b36      	ldr	r3, [pc, #216]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d030      	beq.n	8005f2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d016      	beq.n	8005f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ed2:	4b30      	ldr	r3, [pc, #192]	; (8005f94 <HAL_RCC_OscConfig+0x2b4>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed8:	f7fe fd8c 	bl	80049f4 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ee0:	f7fe fd88 	bl	80049f4 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e164      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ef2:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f0      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x200>
 8005efe:	e015      	b.n	8005f2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f00:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <HAL_RCC_OscConfig+0x2b4>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f06:	f7fe fd75 	bl	80049f4 <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f0e:	f7fe fd71 	bl	80049f4 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e14d      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f20:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1f0      	bne.n	8005f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80a0 	beq.w	800607a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f3e:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10f      	bne.n	8005f6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	4a0e      	ldr	r2, [pc, #56]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f58:	6413      	str	r3, [r2, #64]	; 0x40
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <HAL_RCC_OscConfig+0x2ac>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6a:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <HAL_RCC_OscConfig+0x2b8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d121      	bne.n	8005fba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f76:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <HAL_RCC_OscConfig+0x2b8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a07      	ldr	r2, [pc, #28]	; (8005f98 <HAL_RCC_OscConfig+0x2b8>)
 8005f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f82:	f7fe fd37 	bl	80049f4 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f88:	e011      	b.n	8005fae <HAL_RCC_OscConfig+0x2ce>
 8005f8a:	bf00      	nop
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	42470000 	.word	0x42470000
 8005f94:	42470e80 	.word	0x42470e80
 8005f98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f9c:	f7fe fd2a 	bl	80049f4 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e106      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fae:	4b85      	ldr	r3, [pc, #532]	; (80061c4 <HAL_RCC_OscConfig+0x4e4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f0      	beq.n	8005f9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d106      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x2f0>
 8005fc2:	4b81      	ldr	r3, [pc, #516]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	4a80      	ldr	r2, [pc, #512]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fce:	e01c      	b.n	800600a <HAL_RCC_OscConfig+0x32a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2b05      	cmp	r3, #5
 8005fd6:	d10c      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x312>
 8005fd8:	4b7b      	ldr	r3, [pc, #492]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8005fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fdc:	4a7a      	ldr	r2, [pc, #488]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8005fde:	f043 0304 	orr.w	r3, r3, #4
 8005fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe4:	4b78      	ldr	r3, [pc, #480]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe8:	4a77      	ldr	r2, [pc, #476]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff0:	e00b      	b.n	800600a <HAL_RCC_OscConfig+0x32a>
 8005ff2:	4b75      	ldr	r3, [pc, #468]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	4a74      	ldr	r2, [pc, #464]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ffe:	4b72      	ldr	r3, [pc, #456]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	4a71      	ldr	r2, [pc, #452]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8006004:	f023 0304 	bic.w	r3, r3, #4
 8006008:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d015      	beq.n	800603e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006012:	f7fe fcef 	bl	80049f4 <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006018:	e00a      	b.n	8006030 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800601a:	f7fe fceb 	bl	80049f4 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	f241 3288 	movw	r2, #5000	; 0x1388
 8006028:	4293      	cmp	r3, r2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e0c5      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006030:	4b65      	ldr	r3, [pc, #404]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0ee      	beq.n	800601a <HAL_RCC_OscConfig+0x33a>
 800603c:	e014      	b.n	8006068 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800603e:	f7fe fcd9 	bl	80049f4 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006044:	e00a      	b.n	800605c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006046:	f7fe fcd5 	bl	80049f4 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	4293      	cmp	r3, r2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e0af      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800605c:	4b5a      	ldr	r3, [pc, #360]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 800605e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1ee      	bne.n	8006046 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006068:	7dfb      	ldrb	r3, [r7, #23]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d105      	bne.n	800607a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800606e:	4b56      	ldr	r3, [pc, #344]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	4a55      	ldr	r2, [pc, #340]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8006074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006078:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 809b 	beq.w	80061ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006084:	4b50      	ldr	r3, [pc, #320]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 030c 	and.w	r3, r3, #12
 800608c:	2b08      	cmp	r3, #8
 800608e:	d05c      	beq.n	800614a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b02      	cmp	r3, #2
 8006096:	d141      	bne.n	800611c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006098:	4b4c      	ldr	r3, [pc, #304]	; (80061cc <HAL_RCC_OscConfig+0x4ec>)
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800609e:	f7fe fca9 	bl	80049f4 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a6:	f7fe fca5 	bl	80049f4 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e081      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b8:	4b43      	ldr	r3, [pc, #268]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1f0      	bne.n	80060a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	019b      	lsls	r3, r3, #6
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	085b      	lsrs	r3, r3, #1
 80060dc:	3b01      	subs	r3, #1
 80060de:	041b      	lsls	r3, r3, #16
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	061b      	lsls	r3, r3, #24
 80060e8:	4937      	ldr	r1, [pc, #220]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060ee:	4b37      	ldr	r3, [pc, #220]	; (80061cc <HAL_RCC_OscConfig+0x4ec>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f4:	f7fe fc7e 	bl	80049f4 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060fc:	f7fe fc7a 	bl	80049f4 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e056      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800610e:	4b2e      	ldr	r3, [pc, #184]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f0      	beq.n	80060fc <HAL_RCC_OscConfig+0x41c>
 800611a:	e04e      	b.n	80061ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611c:	4b2b      	ldr	r3, [pc, #172]	; (80061cc <HAL_RCC_OscConfig+0x4ec>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006122:	f7fe fc67 	bl	80049f4 <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800612a:	f7fe fc63 	bl	80049f4 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e03f      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613c:	4b22      	ldr	r3, [pc, #136]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <HAL_RCC_OscConfig+0x44a>
 8006148:	e037      	b.n	80061ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e032      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006156:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <HAL_RCC_OscConfig+0x4e8>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d028      	beq.n	80061b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800616e:	429a      	cmp	r2, r3
 8006170:	d121      	bne.n	80061b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800617c:	429a      	cmp	r2, r3
 800617e:	d11a      	bne.n	80061b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006186:	4013      	ands	r3, r2
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800618c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800618e:	4293      	cmp	r3, r2
 8006190:	d111      	bne.n	80061b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619c:	085b      	lsrs	r3, r3, #1
 800619e:	3b01      	subs	r3, #1
 80061a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d107      	bne.n	80061b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d001      	beq.n	80061ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40007000 	.word	0x40007000
 80061c8:	40023800 	.word	0x40023800
 80061cc:	42470060 	.word	0x42470060

080061d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0cc      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061e4:	4b68      	ldr	r3, [pc, #416]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d90c      	bls.n	800620c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061f2:	4b65      	ldr	r3, [pc, #404]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061fa:	4b63      	ldr	r3, [pc, #396]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	429a      	cmp	r2, r3
 8006206:	d001      	beq.n	800620c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0b8      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d020      	beq.n	800625a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006224:	4b59      	ldr	r3, [pc, #356]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	4a58      	ldr	r2, [pc, #352]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800622e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800623c:	4b53      	ldr	r3, [pc, #332]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	4a52      	ldr	r2, [pc, #328]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006248:	4b50      	ldr	r3, [pc, #320]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	494d      	ldr	r1, [pc, #308]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	4313      	orrs	r3, r2
 8006258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d044      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d107      	bne.n	800627e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626e:	4b47      	ldr	r3, [pc, #284]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d119      	bne.n	80062ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e07f      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d003      	beq.n	800628e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800628a:	2b03      	cmp	r3, #3
 800628c:	d107      	bne.n	800629e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628e:	4b3f      	ldr	r3, [pc, #252]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d109      	bne.n	80062ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e06f      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800629e:	4b3b      	ldr	r3, [pc, #236]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e067      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ae:	4b37      	ldr	r3, [pc, #220]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f023 0203 	bic.w	r2, r3, #3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	4934      	ldr	r1, [pc, #208]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062c0:	f7fe fb98 	bl	80049f4 <HAL_GetTick>
 80062c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062c6:	e00a      	b.n	80062de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c8:	f7fe fb94 	bl	80049f4 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e04f      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062de:	4b2b      	ldr	r3, [pc, #172]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 020c 	and.w	r2, r3, #12
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d1eb      	bne.n	80062c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062f0:	4b25      	ldr	r3, [pc, #148]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d20c      	bcs.n	8006318 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fe:	4b22      	ldr	r3, [pc, #136]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006306:	4b20      	ldr	r3, [pc, #128]	; (8006388 <HAL_RCC_ClockConfig+0x1b8>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	683a      	ldr	r2, [r7, #0]
 8006310:	429a      	cmp	r2, r3
 8006312:	d001      	beq.n	8006318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e032      	b.n	800637e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d008      	beq.n	8006336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006324:	4b19      	ldr	r3, [pc, #100]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	4916      	ldr	r1, [pc, #88]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	4313      	orrs	r3, r2
 8006334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d009      	beq.n	8006356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	490e      	ldr	r1, [pc, #56]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	4313      	orrs	r3, r2
 8006354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006356:	f000 f821 	bl	800639c <HAL_RCC_GetSysClockFreq>
 800635a:	4602      	mov	r2, r0
 800635c:	4b0b      	ldr	r3, [pc, #44]	; (800638c <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	490a      	ldr	r1, [pc, #40]	; (8006390 <HAL_RCC_ClockConfig+0x1c0>)
 8006368:	5ccb      	ldrb	r3, [r1, r3]
 800636a:	fa22 f303 	lsr.w	r3, r2, r3
 800636e:	4a09      	ldr	r2, [pc, #36]	; (8006394 <HAL_RCC_ClockConfig+0x1c4>)
 8006370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <HAL_RCC_ClockConfig+0x1c8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe faf8 	bl	800496c <HAL_InitTick>

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40023c00 	.word	0x40023c00
 800638c:	40023800 	.word	0x40023800
 8006390:	08009494 	.word	0x08009494
 8006394:	20000004 	.word	0x20000004
 8006398:	20000008 	.word	0x20000008

0800639c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800639c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	607b      	str	r3, [r7, #4]
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]
 80063ac:	2300      	movs	r3, #0
 80063ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063b4:	4b67      	ldr	r3, [pc, #412]	; (8006554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 030c 	and.w	r3, r3, #12
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d00d      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0x40>
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	f200 80bd 	bhi.w	8006540 <HAL_RCC_GetSysClockFreq+0x1a4>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <HAL_RCC_GetSysClockFreq+0x34>
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d003      	beq.n	80063d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80063ce:	e0b7      	b.n	8006540 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063d0:	4b61      	ldr	r3, [pc, #388]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80063d2:	60bb      	str	r3, [r7, #8]
       break;
 80063d4:	e0b7      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063d6:	4b61      	ldr	r3, [pc, #388]	; (800655c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80063d8:	60bb      	str	r3, [r7, #8]
      break;
 80063da:	e0b4      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063dc:	4b5d      	ldr	r3, [pc, #372]	; (8006554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063e6:	4b5b      	ldr	r3, [pc, #364]	; (8006554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d04d      	beq.n	800648e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063f2:	4b58      	ldr	r3, [pc, #352]	; (8006554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	099b      	lsrs	r3, r3, #6
 80063f8:	461a      	mov	r2, r3
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006402:	f04f 0100 	mov.w	r1, #0
 8006406:	ea02 0800 	and.w	r8, r2, r0
 800640a:	ea03 0901 	and.w	r9, r3, r1
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	014b      	lsls	r3, r1, #5
 800641c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006420:	0142      	lsls	r2, r0, #5
 8006422:	4610      	mov	r0, r2
 8006424:	4619      	mov	r1, r3
 8006426:	ebb0 0008 	subs.w	r0, r0, r8
 800642a:	eb61 0109 	sbc.w	r1, r1, r9
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	018b      	lsls	r3, r1, #6
 8006438:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800643c:	0182      	lsls	r2, r0, #6
 800643e:	1a12      	subs	r2, r2, r0
 8006440:	eb63 0301 	sbc.w	r3, r3, r1
 8006444:	f04f 0000 	mov.w	r0, #0
 8006448:	f04f 0100 	mov.w	r1, #0
 800644c:	00d9      	lsls	r1, r3, #3
 800644e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006452:	00d0      	lsls	r0, r2, #3
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	eb12 0208 	adds.w	r2, r2, r8
 800645c:	eb43 0309 	adc.w	r3, r3, r9
 8006460:	f04f 0000 	mov.w	r0, #0
 8006464:	f04f 0100 	mov.w	r1, #0
 8006468:	0259      	lsls	r1, r3, #9
 800646a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800646e:	0250      	lsls	r0, r2, #9
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4610      	mov	r0, r2
 8006476:	4619      	mov	r1, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	461a      	mov	r2, r3
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	f7fa f9d8 	bl	8000834 <__aeabi_uldivmod>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4613      	mov	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e04a      	b.n	8006524 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800648e:	4b31      	ldr	r3, [pc, #196]	; (8006554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	099b      	lsrs	r3, r3, #6
 8006494:	461a      	mov	r2, r3
 8006496:	f04f 0300 	mov.w	r3, #0
 800649a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800649e:	f04f 0100 	mov.w	r1, #0
 80064a2:	ea02 0400 	and.w	r4, r2, r0
 80064a6:	ea03 0501 	and.w	r5, r3, r1
 80064aa:	4620      	mov	r0, r4
 80064ac:	4629      	mov	r1, r5
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	014b      	lsls	r3, r1, #5
 80064b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064bc:	0142      	lsls	r2, r0, #5
 80064be:	4610      	mov	r0, r2
 80064c0:	4619      	mov	r1, r3
 80064c2:	1b00      	subs	r0, r0, r4
 80064c4:	eb61 0105 	sbc.w	r1, r1, r5
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	018b      	lsls	r3, r1, #6
 80064d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064d6:	0182      	lsls	r2, r0, #6
 80064d8:	1a12      	subs	r2, r2, r0
 80064da:	eb63 0301 	sbc.w	r3, r3, r1
 80064de:	f04f 0000 	mov.w	r0, #0
 80064e2:	f04f 0100 	mov.w	r1, #0
 80064e6:	00d9      	lsls	r1, r3, #3
 80064e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064ec:	00d0      	lsls	r0, r2, #3
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	1912      	adds	r2, r2, r4
 80064f4:	eb45 0303 	adc.w	r3, r5, r3
 80064f8:	f04f 0000 	mov.w	r0, #0
 80064fc:	f04f 0100 	mov.w	r1, #0
 8006500:	0299      	lsls	r1, r3, #10
 8006502:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006506:	0290      	lsls	r0, r2, #10
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	461a      	mov	r2, r3
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	f7fa f98c 	bl	8000834 <__aeabi_uldivmod>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4613      	mov	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006524:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	3301      	adds	r3, #1
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	fbb2 f3f3 	udiv	r3, r2, r3
 800653c:	60bb      	str	r3, [r7, #8]
      break;
 800653e:	e002      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006540:	4b05      	ldr	r3, [pc, #20]	; (8006558 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006542:	60bb      	str	r3, [r7, #8]
      break;
 8006544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006546:	68bb      	ldr	r3, [r7, #8]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006552:	bf00      	nop
 8006554:	40023800 	.word	0x40023800
 8006558:	00f42400 	.word	0x00f42400
 800655c:	007a1200 	.word	0x007a1200

08006560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006564:	4b03      	ldr	r3, [pc, #12]	; (8006574 <HAL_RCC_GetHCLKFreq+0x14>)
 8006566:	681b      	ldr	r3, [r3, #0]
}
 8006568:	4618      	mov	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000004 	.word	0x20000004

08006578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800657c:	f7ff fff0 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 8006580:	4602      	mov	r2, r0
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	0a9b      	lsrs	r3, r3, #10
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	4903      	ldr	r1, [pc, #12]	; (800659c <HAL_RCC_GetPCLK1Freq+0x24>)
 800658e:	5ccb      	ldrb	r3, [r1, r3]
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006594:	4618      	mov	r0, r3
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40023800 	.word	0x40023800
 800659c:	080094a4 	.word	0x080094a4

080065a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065a4:	f7ff ffdc 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 80065a8:	4602      	mov	r2, r0
 80065aa:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	0b5b      	lsrs	r3, r3, #13
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	4903      	ldr	r1, [pc, #12]	; (80065c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065b6:	5ccb      	ldrb	r3, [r1, r3]
 80065b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065bc:	4618      	mov	r0, r3
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	40023800 	.word	0x40023800
 80065c4:	080094a4 	.word	0x080094a4

080065c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e07b      	b.n	80066d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ea:	d009      	beq.n	8006600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	61da      	str	r2, [r3, #28]
 80065f2:	e005      	b.n	8006600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fd fc90 	bl	8003f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006636:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006684:	ea42 0103 	orr.w	r1, r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	0c1b      	lsrs	r3, r3, #16
 800669e:	f003 0104 	and.w	r1, r3, #4
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	f003 0210 	and.w	r2, r3, #16
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69da      	ldr	r2, [r3, #28]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b088      	sub	sp, #32
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	603b      	str	r3, [r7, #0]
 80066e6:	4613      	mov	r3, r2
 80066e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_SPI_Transmit+0x22>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e126      	b.n	800694a <HAL_SPI_Transmit+0x270>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006704:	f7fe f976 	bl	80049f4 <HAL_GetTick>
 8006708:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b01      	cmp	r3, #1
 8006718:	d002      	beq.n	8006720 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800671a:	2302      	movs	r3, #2
 800671c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800671e:	e10b      	b.n	8006938 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_SPI_Transmit+0x52>
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d102      	bne.n	8006732 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006730:	e102      	b.n	8006938 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2203      	movs	r2, #3
 8006736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	88fa      	ldrh	r2, [r7, #6]
 800674a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	88fa      	ldrh	r2, [r7, #6]
 8006750:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006778:	d10f      	bne.n	800679a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006788:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006798:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	d007      	beq.n	80067b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c0:	d14b      	bne.n	800685a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_SPI_Transmit+0xf6>
 80067ca:	8afb      	ldrh	r3, [r7, #22]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d13e      	bne.n	800684e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d4:	881a      	ldrh	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	1c9a      	adds	r2, r3, #2
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067f4:	e02b      	b.n	800684e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b02      	cmp	r3, #2
 8006802:	d112      	bne.n	800682a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006808:	881a      	ldrh	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	1c9a      	adds	r2, r3, #2
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	86da      	strh	r2, [r3, #54]	; 0x36
 8006828:	e011      	b.n	800684e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800682a:	f7fe f8e3 	bl	80049f4 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d803      	bhi.n	8006842 <HAL_SPI_Transmit+0x168>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006840:	d102      	bne.n	8006848 <HAL_SPI_Transmit+0x16e>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800684c:	e074      	b.n	8006938 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006852:	b29b      	uxth	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1ce      	bne.n	80067f6 <HAL_SPI_Transmit+0x11c>
 8006858:	e04c      	b.n	80068f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_SPI_Transmit+0x18e>
 8006862:	8afb      	ldrh	r3, [r7, #22]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d140      	bne.n	80068ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	330c      	adds	r3, #12
 8006872:	7812      	ldrb	r2, [r2, #0]
 8006874:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800688e:	e02c      	b.n	80068ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b02      	cmp	r3, #2
 800689c:	d113      	bne.n	80068c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	330c      	adds	r3, #12
 80068a8:	7812      	ldrb	r2, [r2, #0]
 80068aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80068c4:	e011      	b.n	80068ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068c6:	f7fe f895 	bl	80049f4 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d803      	bhi.n	80068de <HAL_SPI_Transmit+0x204>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068dc:	d102      	bne.n	80068e4 <HAL_SPI_Transmit+0x20a>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d102      	bne.n	80068ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068e8:	e026      	b.n	8006938 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1cd      	bne.n	8006890 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fbcb 	bl	8007094 <SPI_EndRxTxTransaction>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	613b      	str	r3, [r7, #16]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e000      	b.n	8006938 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006936:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006948:	7ffb      	ldrb	r3, [r7, #31]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3720      	adds	r7, #32
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b088      	sub	sp, #32
 8006956:	af02      	add	r7, sp, #8
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4613      	mov	r3, r2
 8006960:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800696e:	d112      	bne.n	8006996 <HAL_SPI_Receive+0x44>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10e      	bne.n	8006996 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2204      	movs	r2, #4
 800697c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006980:	88fa      	ldrh	r2, [r7, #6]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	4613      	mov	r3, r2
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 f8f1 	bl	8006b74 <HAL_SPI_TransmitReceive>
 8006992:	4603      	mov	r3, r0
 8006994:	e0ea      	b.n	8006b6c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_SPI_Receive+0x52>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e0e3      	b.n	8006b6c <HAL_SPI_Receive+0x21a>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069ac:	f7fe f822 	bl	80049f4 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d002      	beq.n	80069c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80069be:	2302      	movs	r3, #2
 80069c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069c2:	e0ca      	b.n	8006b5a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <HAL_SPI_Receive+0x7e>
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d102      	bne.n	80069d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069d4:	e0c1      	b.n	8006b5a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2204      	movs	r2, #4
 80069da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	88fa      	ldrh	r2, [r7, #6]
 80069ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1c:	d10f      	bne.n	8006a3e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	d007      	beq.n	8006a5c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d162      	bne.n	8006b2a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006a64:	e02e      	b.n	8006ac4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d115      	bne.n	8006aa0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f103 020c 	add.w	r2, r3, #12
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	7812      	ldrb	r2, [r2, #0]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a9e:	e011      	b.n	8006ac4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aa0:	f7fd ffa8 	bl	80049f4 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d803      	bhi.n	8006ab8 <HAL_SPI_Receive+0x166>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab6:	d102      	bne.n	8006abe <HAL_SPI_Receive+0x16c>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006ac2:	e04a      	b.n	8006b5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1cb      	bne.n	8006a66 <HAL_SPI_Receive+0x114>
 8006ace:	e031      	b.n	8006b34 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d113      	bne.n	8006b06 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae8:	b292      	uxth	r2, r2
 8006aea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	1c9a      	adds	r2, r3, #2
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b04:	e011      	b.n	8006b2a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b06:	f7fd ff75 	bl	80049f4 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d803      	bhi.n	8006b1e <HAL_SPI_Receive+0x1cc>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d102      	bne.n	8006b24 <HAL_SPI_Receive+0x1d2>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d102      	bne.n	8006b2a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b28:	e017      	b.n	8006b5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1cd      	bne.n	8006ad0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fa45 	bl	8006fc8 <SPI_EndRxTransaction>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	75fb      	strb	r3, [r7, #23]
 8006b56:	e000      	b.n	8006b5a <HAL_SPI_Receive+0x208>
  }

error :
 8006b58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08c      	sub	sp, #48	; 0x30
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
 8006b80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b82:	2301      	movs	r3, #1
 8006b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_SPI_TransmitReceive+0x26>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e18a      	b.n	8006eb0 <HAL_SPI_TransmitReceive+0x33c>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ba2:	f7fd ff27 	bl	80049f4 <HAL_GetTick>
 8006ba6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006bb8:	887b      	ldrh	r3, [r7, #2]
 8006bba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d00f      	beq.n	8006be4 <HAL_SPI_TransmitReceive+0x70>
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bca:	d107      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d103      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x68>
 8006bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d003      	beq.n	8006be4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006be2:	e15b      	b.n	8006e9c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <HAL_SPI_TransmitReceive+0x82>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <HAL_SPI_TransmitReceive+0x82>
 8006bf0:	887b      	ldrh	r3, [r7, #2]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006bfc:	e14e      	b.n	8006e9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d003      	beq.n	8006c12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2205      	movs	r2, #5
 8006c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	887a      	ldrh	r2, [r7, #2]
 8006c22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	887a      	ldrh	r2, [r7, #2]
 8006c28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	887a      	ldrh	r2, [r7, #2]
 8006c34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	887a      	ldrh	r2, [r7, #2]
 8006c3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c52:	2b40      	cmp	r3, #64	; 0x40
 8006c54:	d007      	beq.n	8006c66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c6e:	d178      	bne.n	8006d62 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <HAL_SPI_TransmitReceive+0x10a>
 8006c78:	8b7b      	ldrh	r3, [r7, #26]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d166      	bne.n	8006d4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	881a      	ldrh	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	1c9a      	adds	r2, r3, #2
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ca2:	e053      	b.n	8006d4c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d11b      	bne.n	8006cea <HAL_SPI_TransmitReceive+0x176>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d016      	beq.n	8006cea <HAL_SPI_TransmitReceive+0x176>
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d113      	bne.n	8006cea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	881a      	ldrh	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	1c9a      	adds	r2, r3, #2
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d119      	bne.n	8006d2c <HAL_SPI_TransmitReceive+0x1b8>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d014      	beq.n	8006d2c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	b292      	uxth	r2, r2
 8006d0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d14:	1c9a      	adds	r2, r3, #2
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d2c:	f7fd fe62 	bl	80049f4 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d807      	bhi.n	8006d4c <HAL_SPI_TransmitReceive+0x1d8>
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d42:	d003      	beq.n	8006d4c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d4a:	e0a7      	b.n	8006e9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1a6      	bne.n	8006ca4 <HAL_SPI_TransmitReceive+0x130>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1a1      	bne.n	8006ca4 <HAL_SPI_TransmitReceive+0x130>
 8006d60:	e07c      	b.n	8006e5c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <HAL_SPI_TransmitReceive+0x1fc>
 8006d6a:	8b7b      	ldrh	r3, [r7, #26]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d16b      	bne.n	8006e48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	7812      	ldrb	r2, [r2, #0]
 8006d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d96:	e057      	b.n	8006e48 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d11c      	bne.n	8006de0 <HAL_SPI_TransmitReceive+0x26c>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d017      	beq.n	8006de0 <HAL_SPI_TransmitReceive+0x26c>
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d114      	bne.n	8006de0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	330c      	adds	r3, #12
 8006dc0:	7812      	ldrb	r2, [r2, #0]
 8006dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d119      	bne.n	8006e22 <HAL_SPI_TransmitReceive+0x2ae>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d014      	beq.n	8006e22 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	3b01      	subs	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e22:	f7fd fde7 	bl	80049f4 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d803      	bhi.n	8006e3a <HAL_SPI_TransmitReceive+0x2c6>
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e38:	d102      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0x2cc>
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d103      	bne.n	8006e48 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006e46:	e029      	b.n	8006e9c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1a2      	bne.n	8006d98 <HAL_SPI_TransmitReceive+0x224>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d19d      	bne.n	8006d98 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f917 	bl	8007094 <SPI_EndRxTxTransaction>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d006      	beq.n	8006e7a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006e78:	e010      	b.n	8006e9c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10b      	bne.n	8006e9a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e82:	2300      	movs	r3, #0
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	e000      	b.n	8006e9c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006e9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006eac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3730      	adds	r7, #48	; 0x30
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ec8:	f7fd fd94 	bl	80049f4 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed0:	1a9b      	subs	r3, r3, r2
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ed8:	f7fd fd8c 	bl	80049f4 <HAL_GetTick>
 8006edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ede:	4b39      	ldr	r3, [pc, #228]	; (8006fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	015b      	lsls	r3, r3, #5
 8006ee4:	0d1b      	lsrs	r3, r3, #20
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eee:	e054      	b.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d050      	beq.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ef8:	f7fd fd7c 	bl	80049f4 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d902      	bls.n	8006f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d13d      	bne.n	8006f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f26:	d111      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f30:	d004      	beq.n	8006f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3a:	d107      	bne.n	8006f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f54:	d10f      	bne.n	8006f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e017      	b.n	8006fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	bf0c      	ite	eq
 8006faa:	2301      	moveq	r3, #1
 8006fac:	2300      	movne	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d19b      	bne.n	8006ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3720      	adds	r7, #32
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000004 	.word	0x20000004

08006fc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fdc:	d111      	bne.n	8007002 <SPI_EndRxTransaction+0x3a>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe6:	d004      	beq.n	8006ff2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff0:	d107      	bne.n	8007002 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007000:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800700a:	d12a      	bne.n	8007062 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007014:	d012      	beq.n	800703c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2200      	movs	r2, #0
 800701e:	2180      	movs	r1, #128	; 0x80
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f7ff ff49 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d02d      	beq.n	8007088 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007030:	f043 0220 	orr.w	r2, r3, #32
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e026      	b.n	800708a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2200      	movs	r2, #0
 8007044:	2101      	movs	r1, #1
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff ff36 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d01a      	beq.n	8007088 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e013      	b.n	800708a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2200      	movs	r2, #0
 800706a:	2101      	movs	r1, #1
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff ff23 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d007      	beq.n	8007088 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707c:	f043 0220 	orr.w	r2, r3, #32
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e000      	b.n	800708a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af02      	add	r7, sp, #8
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070a0:	4b1b      	ldr	r3, [pc, #108]	; (8007110 <SPI_EndRxTxTransaction+0x7c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1b      	ldr	r2, [pc, #108]	; (8007114 <SPI_EndRxTxTransaction+0x80>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	0d5b      	lsrs	r3, r3, #21
 80070ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070b0:	fb02 f303 	mul.w	r3, r2, r3
 80070b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070be:	d112      	bne.n	80070e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2200      	movs	r2, #0
 80070c8:	2180      	movs	r1, #128	; 0x80
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7ff fef4 	bl	8006eb8 <SPI_WaitFlagStateUntilTimeout>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d016      	beq.n	8007104 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	f043 0220 	orr.w	r2, r3, #32
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e00f      	b.n	8007106 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fc:	2b80      	cmp	r3, #128	; 0x80
 80070fe:	d0f2      	beq.n	80070e6 <SPI_EndRxTxTransaction+0x52>
 8007100:	e000      	b.n	8007104 <SPI_EndRxTxTransaction+0x70>
        break;
 8007102:	bf00      	nop
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000004 	.word	0x20000004
 8007114:	165e9f81 	.word	0x165e9f81

08007118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e041      	b.n	80071ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fd f936 	bl	80043b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	4619      	mov	r1, r3
 8007156:	4610      	mov	r0, r2
 8007158:	f000 fa10 	bl	800757c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e041      	b.n	800724c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f839 	bl	8007254 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4619      	mov	r1, r3
 80071f4:	4610      	mov	r0, r2
 80071f6:	f000 f9c1 	bl	800757c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800727e:	2b01      	cmp	r3, #1
 8007280:	d101      	bne.n	8007286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007282:	2302      	movs	r3, #2
 8007284:	e0ae      	b.n	80073e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b0c      	cmp	r3, #12
 8007292:	f200 809f 	bhi.w	80073d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007296:	a201      	add	r2, pc, #4	; (adr r2, 800729c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072d1 	.word	0x080072d1
 80072a0:	080073d5 	.word	0x080073d5
 80072a4:	080073d5 	.word	0x080073d5
 80072a8:	080073d5 	.word	0x080073d5
 80072ac:	08007311 	.word	0x08007311
 80072b0:	080073d5 	.word	0x080073d5
 80072b4:	080073d5 	.word	0x080073d5
 80072b8:	080073d5 	.word	0x080073d5
 80072bc:	08007353 	.word	0x08007353
 80072c0:	080073d5 	.word	0x080073d5
 80072c4:	080073d5 	.word	0x080073d5
 80072c8:	080073d5 	.word	0x080073d5
 80072cc:	08007393 	.word	0x08007393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 f9f0 	bl	80076bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699a      	ldr	r2, [r3, #24]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0208 	orr.w	r2, r2, #8
 80072ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0204 	bic.w	r2, r2, #4
 80072fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6999      	ldr	r1, [r3, #24]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	619a      	str	r2, [r3, #24]
      break;
 800730e:	e064      	b.n	80073da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68b9      	ldr	r1, [r7, #8]
 8007316:	4618      	mov	r0, r3
 8007318:	f000 fa40 	bl	800779c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699a      	ldr	r2, [r3, #24]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800732a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699a      	ldr	r2, [r3, #24]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6999      	ldr	r1, [r3, #24]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	021a      	lsls	r2, r3, #8
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	619a      	str	r2, [r3, #24]
      break;
 8007350:	e043      	b.n	80073da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	4618      	mov	r0, r3
 800735a:	f000 fa95 	bl	8007888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f042 0208 	orr.w	r2, r2, #8
 800736c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	69da      	ldr	r2, [r3, #28]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 0204 	bic.w	r2, r2, #4
 800737c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69d9      	ldr	r1, [r3, #28]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	691a      	ldr	r2, [r3, #16]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	61da      	str	r2, [r3, #28]
      break;
 8007390:	e023      	b.n	80073da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fae9 	bl	8007970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69da      	ldr	r2, [r3, #28]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69da      	ldr	r2, [r3, #28]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69d9      	ldr	r1, [r3, #28]
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	021a      	lsls	r2, r3, #8
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	61da      	str	r2, [r3, #28]
      break;
 80073d2:	e002      	b.n	80073da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	75fb      	strb	r3, [r7, #23]
      break;
 80073d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_TIM_ConfigClockSource+0x1c>
 8007404:	2302      	movs	r3, #2
 8007406:	e0b4      	b.n	8007572 <HAL_TIM_ConfigClockSource+0x186>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800742e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007440:	d03e      	beq.n	80074c0 <HAL_TIM_ConfigClockSource+0xd4>
 8007442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007446:	f200 8087 	bhi.w	8007558 <HAL_TIM_ConfigClockSource+0x16c>
 800744a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744e:	f000 8086 	beq.w	800755e <HAL_TIM_ConfigClockSource+0x172>
 8007452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007456:	d87f      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x16c>
 8007458:	2b70      	cmp	r3, #112	; 0x70
 800745a:	d01a      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0xa6>
 800745c:	2b70      	cmp	r3, #112	; 0x70
 800745e:	d87b      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x16c>
 8007460:	2b60      	cmp	r3, #96	; 0x60
 8007462:	d050      	beq.n	8007506 <HAL_TIM_ConfigClockSource+0x11a>
 8007464:	2b60      	cmp	r3, #96	; 0x60
 8007466:	d877      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x16c>
 8007468:	2b50      	cmp	r3, #80	; 0x50
 800746a:	d03c      	beq.n	80074e6 <HAL_TIM_ConfigClockSource+0xfa>
 800746c:	2b50      	cmp	r3, #80	; 0x50
 800746e:	d873      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x16c>
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	d058      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0x13a>
 8007474:	2b40      	cmp	r3, #64	; 0x40
 8007476:	d86f      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x16c>
 8007478:	2b30      	cmp	r3, #48	; 0x30
 800747a:	d064      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x15a>
 800747c:	2b30      	cmp	r3, #48	; 0x30
 800747e:	d86b      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x16c>
 8007480:	2b20      	cmp	r3, #32
 8007482:	d060      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x15a>
 8007484:	2b20      	cmp	r3, #32
 8007486:	d867      	bhi.n	8007558 <HAL_TIM_ConfigClockSource+0x16c>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d05c      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x15a>
 800748c:	2b10      	cmp	r3, #16
 800748e:	d05a      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0x15a>
 8007490:	e062      	b.n	8007558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6899      	ldr	r1, [r3, #8]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f000 fb35 	bl	8007b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	609a      	str	r2, [r3, #8]
      break;
 80074be:	e04f      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6818      	ldr	r0, [r3, #0]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	6899      	ldr	r1, [r3, #8]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685a      	ldr	r2, [r3, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f000 fb1e 	bl	8007b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074e2:	609a      	str	r2, [r3, #8]
      break;
 80074e4:	e03c      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6859      	ldr	r1, [r3, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f000 fa92 	bl	8007a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2150      	movs	r1, #80	; 0x50
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 faeb 	bl	8007ada <TIM_ITRx_SetConfig>
      break;
 8007504:	e02c      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	6859      	ldr	r1, [r3, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	461a      	mov	r2, r3
 8007514:	f000 fab1 	bl	8007a7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2160      	movs	r1, #96	; 0x60
 800751e:	4618      	mov	r0, r3
 8007520:	f000 fadb 	bl	8007ada <TIM_ITRx_SetConfig>
      break;
 8007524:	e01c      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6859      	ldr	r1, [r3, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	461a      	mov	r2, r3
 8007534:	f000 fa72 	bl	8007a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2140      	movs	r1, #64	; 0x40
 800753e:	4618      	mov	r0, r3
 8007540:	f000 facb 	bl	8007ada <TIM_ITRx_SetConfig>
      break;
 8007544:	e00c      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f000 fac2 	bl	8007ada <TIM_ITRx_SetConfig>
      break;
 8007556:	e003      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
      break;
 800755c:	e000      	b.n	8007560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800755e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a40      	ldr	r2, [pc, #256]	; (8007690 <TIM_Base_SetConfig+0x114>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d013      	beq.n	80075bc <TIM_Base_SetConfig+0x40>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759a:	d00f      	beq.n	80075bc <TIM_Base_SetConfig+0x40>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a3d      	ldr	r2, [pc, #244]	; (8007694 <TIM_Base_SetConfig+0x118>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00b      	beq.n	80075bc <TIM_Base_SetConfig+0x40>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a3c      	ldr	r2, [pc, #240]	; (8007698 <TIM_Base_SetConfig+0x11c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d007      	beq.n	80075bc <TIM_Base_SetConfig+0x40>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a3b      	ldr	r2, [pc, #236]	; (800769c <TIM_Base_SetConfig+0x120>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d003      	beq.n	80075bc <TIM_Base_SetConfig+0x40>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a3a      	ldr	r2, [pc, #232]	; (80076a0 <TIM_Base_SetConfig+0x124>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d108      	bne.n	80075ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a2f      	ldr	r2, [pc, #188]	; (8007690 <TIM_Base_SetConfig+0x114>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d02b      	beq.n	800762e <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075dc:	d027      	beq.n	800762e <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a2c      	ldr	r2, [pc, #176]	; (8007694 <TIM_Base_SetConfig+0x118>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d023      	beq.n	800762e <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a2b      	ldr	r2, [pc, #172]	; (8007698 <TIM_Base_SetConfig+0x11c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d01f      	beq.n	800762e <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a2a      	ldr	r2, [pc, #168]	; (800769c <TIM_Base_SetConfig+0x120>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d01b      	beq.n	800762e <TIM_Base_SetConfig+0xb2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a29      	ldr	r2, [pc, #164]	; (80076a0 <TIM_Base_SetConfig+0x124>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d017      	beq.n	800762e <TIM_Base_SetConfig+0xb2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a28      	ldr	r2, [pc, #160]	; (80076a4 <TIM_Base_SetConfig+0x128>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d013      	beq.n	800762e <TIM_Base_SetConfig+0xb2>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a27      	ldr	r2, [pc, #156]	; (80076a8 <TIM_Base_SetConfig+0x12c>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00f      	beq.n	800762e <TIM_Base_SetConfig+0xb2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a26      	ldr	r2, [pc, #152]	; (80076ac <TIM_Base_SetConfig+0x130>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00b      	beq.n	800762e <TIM_Base_SetConfig+0xb2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a25      	ldr	r2, [pc, #148]	; (80076b0 <TIM_Base_SetConfig+0x134>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d007      	beq.n	800762e <TIM_Base_SetConfig+0xb2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a24      	ldr	r2, [pc, #144]	; (80076b4 <TIM_Base_SetConfig+0x138>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d003      	beq.n	800762e <TIM_Base_SetConfig+0xb2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a23      	ldr	r2, [pc, #140]	; (80076b8 <TIM_Base_SetConfig+0x13c>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d108      	bne.n	8007640 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4313      	orrs	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a0a      	ldr	r2, [pc, #40]	; (8007690 <TIM_Base_SetConfig+0x114>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d003      	beq.n	8007674 <TIM_Base_SetConfig+0xf8>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a0c      	ldr	r2, [pc, #48]	; (80076a0 <TIM_Base_SetConfig+0x124>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d103      	bne.n	800767c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	615a      	str	r2, [r3, #20]
}
 8007682:	bf00      	nop
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	40010000 	.word	0x40010000
 8007694:	40000400 	.word	0x40000400
 8007698:	40000800 	.word	0x40000800
 800769c:	40000c00 	.word	0x40000c00
 80076a0:	40010400 	.word	0x40010400
 80076a4:	40014000 	.word	0x40014000
 80076a8:	40014400 	.word	0x40014400
 80076ac:	40014800 	.word	0x40014800
 80076b0:	40001800 	.word	0x40001800
 80076b4:	40001c00 	.word	0x40001c00
 80076b8:	40002000 	.word	0x40002000

080076bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	f023 0201 	bic.w	r2, r3, #1
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0303 	bic.w	r3, r3, #3
 80076f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f023 0302 	bic.w	r3, r3, #2
 8007704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4313      	orrs	r3, r2
 800770e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a20      	ldr	r2, [pc, #128]	; (8007794 <TIM_OC1_SetConfig+0xd8>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d003      	beq.n	8007720 <TIM_OC1_SetConfig+0x64>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a1f      	ldr	r2, [pc, #124]	; (8007798 <TIM_OC1_SetConfig+0xdc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d10c      	bne.n	800773a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f023 0308 	bic.w	r3, r3, #8
 8007726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	4313      	orrs	r3, r2
 8007730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f023 0304 	bic.w	r3, r3, #4
 8007738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a15      	ldr	r2, [pc, #84]	; (8007794 <TIM_OC1_SetConfig+0xd8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d003      	beq.n	800774a <TIM_OC1_SetConfig+0x8e>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a14      	ldr	r2, [pc, #80]	; (8007798 <TIM_OC1_SetConfig+0xdc>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d111      	bne.n	800776e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	621a      	str	r2, [r3, #32]
}
 8007788:	bf00      	nop
 800778a:	371c      	adds	r7, #28
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	40010000 	.word	0x40010000
 8007798:	40010400 	.word	0x40010400

0800779c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	f023 0210 	bic.w	r2, r3, #16
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f023 0320 	bic.w	r3, r3, #32
 80077e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a22      	ldr	r2, [pc, #136]	; (8007880 <TIM_OC2_SetConfig+0xe4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_OC2_SetConfig+0x68>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a21      	ldr	r2, [pc, #132]	; (8007884 <TIM_OC2_SetConfig+0xe8>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d10d      	bne.n	8007820 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800780a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	011b      	lsls	r3, r3, #4
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800781e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a17      	ldr	r2, [pc, #92]	; (8007880 <TIM_OC2_SetConfig+0xe4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d003      	beq.n	8007830 <TIM_OC2_SetConfig+0x94>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a16      	ldr	r2, [pc, #88]	; (8007884 <TIM_OC2_SetConfig+0xe8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d113      	bne.n	8007858 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800783e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4313      	orrs	r3, r2
 8007856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685a      	ldr	r2, [r3, #4]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	621a      	str	r2, [r3, #32]
}
 8007872:	bf00      	nop
 8007874:	371c      	adds	r7, #28
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	40010000 	.word	0x40010000
 8007884:	40010400 	.word	0x40010400

08007888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0303 	bic.w	r3, r3, #3
 80078be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a21      	ldr	r2, [pc, #132]	; (8007968 <TIM_OC3_SetConfig+0xe0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d003      	beq.n	80078ee <TIM_OC3_SetConfig+0x66>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a20      	ldr	r2, [pc, #128]	; (800796c <TIM_OC3_SetConfig+0xe4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d10d      	bne.n	800790a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	021b      	lsls	r3, r3, #8
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	4313      	orrs	r3, r2
 8007900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a16      	ldr	r2, [pc, #88]	; (8007968 <TIM_OC3_SetConfig+0xe0>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d003      	beq.n	800791a <TIM_OC3_SetConfig+0x92>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a15      	ldr	r2, [pc, #84]	; (800796c <TIM_OC3_SetConfig+0xe4>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d113      	bne.n	8007942 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	011b      	lsls	r3, r3, #4
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	621a      	str	r2, [r3, #32]
}
 800795c:	bf00      	nop
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	40010000 	.word	0x40010000
 800796c:	40010400 	.word	0x40010400

08007970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	031b      	lsls	r3, r3, #12
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a12      	ldr	r2, [pc, #72]	; (8007a14 <TIM_OC4_SetConfig+0xa4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d003      	beq.n	80079d8 <TIM_OC4_SetConfig+0x68>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a11      	ldr	r2, [pc, #68]	; (8007a18 <TIM_OC4_SetConfig+0xa8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d109      	bne.n	80079ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	019b      	lsls	r3, r3, #6
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	bf00      	nop
 8007a08:	371c      	adds	r7, #28
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40010400 	.word	0x40010400

08007a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	f023 0201 	bic.w	r2, r3, #1
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f023 030a 	bic.w	r3, r3, #10
 8007a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	621a      	str	r2, [r3, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b087      	sub	sp, #28
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f023 0210 	bic.w	r2, r3, #16
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	031b      	lsls	r3, r3, #12
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	621a      	str	r2, [r3, #32]
}
 8007ace:	bf00      	nop
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	f043 0307 	orr.w	r3, r3, #7
 8007afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	609a      	str	r2, [r3, #8]
}
 8007b04:	bf00      	nop
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b087      	sub	sp, #28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	021a      	lsls	r2, r3, #8
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	609a      	str	r2, [r3, #8]
}
 8007b44:	bf00      	nop
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e05a      	b.n	8007c1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a21      	ldr	r2, [pc, #132]	; (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d022      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb4:	d01d      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a1d      	ldr	r2, [pc, #116]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d018      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a1b      	ldr	r2, [pc, #108]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d013      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a1a      	ldr	r2, [pc, #104]	; (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00e      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a18      	ldr	r2, [pc, #96]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d009      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a17      	ldr	r2, [pc, #92]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d004      	beq.n	8007bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a15      	ldr	r2, [pc, #84]	; (8007c44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d10c      	bne.n	8007c0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	40010000 	.word	0x40010000
 8007c30:	40000400 	.word	0x40000400
 8007c34:	40000800 	.word	0x40000800
 8007c38:	40000c00 	.word	0x40000c00
 8007c3c:	40010400 	.word	0x40010400
 8007c40:	40014000 	.word	0x40014000
 8007c44:	40001800 	.word	0x40001800

08007c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e03f      	b.n	8007cda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d106      	bne.n	8007c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7fc fcd4 	bl	800461c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2224      	movs	r2, #36	; 0x24
 8007c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 ff49 	bl	8008b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	691a      	ldr	r2, [r3, #16]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	695a      	ldr	r2, [r3, #20]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08c      	sub	sp, #48	; 0x30
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d165      	bne.n	8007dca <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <HAL_UART_Transmit_DMA+0x26>
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e05e      	b.n	8007dcc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_UART_Transmit_DMA+0x38>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e057      	b.n	8007dcc <HAL_UART_Transmit_DMA+0xe8>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	88fa      	ldrh	r2, [r7, #6]
 8007d2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	88fa      	ldrh	r2, [r7, #6]
 8007d34:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2221      	movs	r2, #33	; 0x21
 8007d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d48:	4a22      	ldr	r2, [pc, #136]	; (8007dd4 <HAL_UART_Transmit_DMA+0xf0>)
 8007d4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d50:	4a21      	ldr	r2, [pc, #132]	; (8007dd8 <HAL_UART_Transmit_DMA+0xf4>)
 8007d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d58:	4a20      	ldr	r2, [pc, #128]	; (8007ddc <HAL_UART_Transmit_DMA+0xf8>)
 8007d5a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d60:	2200      	movs	r2, #0
 8007d62:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007d64:	f107 0308 	add.w	r3, r7, #8
 8007d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	6819      	ldr	r1, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3304      	adds	r3, #4
 8007d78:	461a      	mov	r2, r3
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	f7fd fa8c 	bl	8005298 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d88:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3314      	adds	r3, #20
 8007d98:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	617b      	str	r3, [r7, #20]
   return(result);
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3314      	adds	r3, #20
 8007db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db2:	627a      	str	r2, [r7, #36]	; 0x24
 8007db4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6a39      	ldr	r1, [r7, #32]
 8007db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e5      	bne.n	8007d92 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e000      	b.n	8007dcc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007dca:	2302      	movs	r3, #2
  }
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3730      	adds	r7, #48	; 0x30
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	080083c5 	.word	0x080083c5
 8007dd8:	0800845f 	.word	0x0800845f
 8007ddc:	080085d7 	.word	0x080085d7

08007de0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	4613      	mov	r3, r2
 8007dec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b20      	cmp	r3, #32
 8007df8:	d11d      	bne.n	8007e36 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <HAL_UART_Receive_DMA+0x26>
 8007e00:	88fb      	ldrh	r3, [r7, #6]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e016      	b.n	8007e38 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d101      	bne.n	8007e18 <HAL_UART_Receive_DMA+0x38>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e00f      	b.n	8007e38 <HAL_UART_Receive_DMA+0x58>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e26:	88fb      	ldrh	r3, [r7, #6]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	68b9      	ldr	r1, [r7, #8]
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 fc1d 	bl	800866c <UART_Start_Receive_DMA>
 8007e32:	4603      	mov	r3, r0
 8007e34:	e000      	b.n	8007e38 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e36:	2302      	movs	r3, #2
  }
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b0ba      	sub	sp, #232	; 0xe8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e76:	f003 030f 	and.w	r3, r3, #15
 8007e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10f      	bne.n	8007ea6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d009      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x66>
 8007e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fd85 	bl	80089ae <UART_Receive_IT>
      return;
 8007ea4:	e256      	b.n	8008354 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 80de 	beq.w	800806c <HAL_UART_IRQHandler+0x22c>
 8007eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d106      	bne.n	8007eca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 80d1 	beq.w	800806c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00b      	beq.n	8007eee <HAL_UART_IRQHandler+0xae>
 8007ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	f043 0201 	orr.w	r2, r3, #1
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef2:	f003 0304 	and.w	r3, r3, #4
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00b      	beq.n	8007f12 <HAL_UART_IRQHandler+0xd2>
 8007efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0a:	f043 0202 	orr.w	r2, r3, #2
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <HAL_UART_IRQHandler+0xf6>
 8007f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d005      	beq.n	8007f36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	f043 0204 	orr.w	r2, r3, #4
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3a:	f003 0308 	and.w	r3, r3, #8
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d011      	beq.n	8007f66 <HAL_UART_IRQHandler+0x126>
 8007f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d105      	bne.n	8007f5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5e:	f043 0208 	orr.w	r2, r3, #8
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 81ed 	beq.w	800834a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f74:	f003 0320 	and.w	r3, r3, #32
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d008      	beq.n	8007f8e <HAL_UART_IRQHandler+0x14e>
 8007f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fd10 	bl	80089ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f98:	2b40      	cmp	r3, #64	; 0x40
 8007f9a:	bf0c      	ite	eq
 8007f9c:	2301      	moveq	r3, #1
 8007f9e:	2300      	movne	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d103      	bne.n	8007fba <HAL_UART_IRQHandler+0x17a>
 8007fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d04f      	beq.n	800805a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fc18 	bl	80087f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fca:	2b40      	cmp	r3, #64	; 0x40
 8007fcc:	d141      	bne.n	8008052 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3314      	adds	r3, #20
 8007fd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3314      	adds	r3, #20
 8007ff6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ffa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008006:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800800a:	e841 2300 	strex	r3, r2, [r1]
 800800e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1d9      	bne.n	8007fce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801e:	2b00      	cmp	r3, #0
 8008020:	d013      	beq.n	800804a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008026:	4a7d      	ldr	r2, [pc, #500]	; (800821c <HAL_UART_IRQHandler+0x3dc>)
 8008028:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	4618      	mov	r0, r3
 8008030:	f7fd f9fa 	bl	8005428 <HAL_DMA_Abort_IT>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d016      	beq.n	8008068 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008044:	4610      	mov	r0, r2
 8008046:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008048:	e00e      	b.n	8008068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f9a4 	bl	8008398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008050:	e00a      	b.n	8008068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f9a0 	bl	8008398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008058:	e006      	b.n	8008068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f99c 	bl	8008398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008066:	e170      	b.n	800834a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008068:	bf00      	nop
    return;
 800806a:	e16e      	b.n	800834a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008070:	2b01      	cmp	r3, #1
 8008072:	f040 814a 	bne.w	800830a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 8143 	beq.w	800830a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008088:	f003 0310 	and.w	r3, r3, #16
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 813c 	beq.w	800830a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008092:	2300      	movs	r3, #0
 8008094:	60bb      	str	r3, [r7, #8]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60bb      	str	r3, [r7, #8]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b2:	2b40      	cmp	r3, #64	; 0x40
 80080b4:	f040 80b4 	bne.w	8008220 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 8140 	beq.w	800834e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080d6:	429a      	cmp	r2, r3
 80080d8:	f080 8139 	bcs.w	800834e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ee:	f000 8088 	beq.w	8008202 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	330c      	adds	r3, #12
 80080f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800810c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800811e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800812a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1d9      	bne.n	80080f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3314      	adds	r3, #20
 8008144:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800814e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008150:	f023 0301 	bic.w	r3, r3, #1
 8008154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3314      	adds	r3, #20
 800815e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008162:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008166:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008168:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800816a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e1      	bne.n	800813e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3314      	adds	r3, #20
 8008180:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800818a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800818c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3314      	adds	r3, #20
 800819a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800819e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e3      	bne.n	800817a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	330c      	adds	r3, #12
 80081c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081d2:	f023 0310 	bic.w	r3, r3, #16
 80081d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	330c      	adds	r3, #12
 80081e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80081e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80081e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e3      	bne.n	80081c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fd f8a3 	bl	8005348 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800820a:	b29b      	uxth	r3, r3
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	b29b      	uxth	r3, r3
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f8ca 	bl	80083ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008218:	e099      	b.n	800834e <HAL_UART_IRQHandler+0x50e>
 800821a:	bf00      	nop
 800821c:	080088b7 	.word	0x080088b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008228:	b29b      	uxth	r3, r3
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 808b 	beq.w	8008352 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800823c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 8086 	beq.w	8008352 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	330c      	adds	r3, #12
 800824c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800825c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	330c      	adds	r3, #12
 8008266:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800826a:	647a      	str	r2, [r7, #68]	; 0x44
 800826c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008270:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e3      	bne.n	8008246 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3314      	adds	r3, #20
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	623b      	str	r3, [r7, #32]
   return(result);
 800828e:	6a3b      	ldr	r3, [r7, #32]
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3314      	adds	r3, #20
 800829e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082a2:	633a      	str	r2, [r7, #48]	; 0x30
 80082a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e3      	bne.n	800827e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	330c      	adds	r3, #12
 80082ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f023 0310 	bic.w	r3, r3, #16
 80082da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	330c      	adds	r3, #12
 80082e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80082e8:	61fa      	str	r2, [r7, #28]
 80082ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	69b9      	ldr	r1, [r7, #24]
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	617b      	str	r3, [r7, #20]
   return(result);
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e3      	bne.n	80082c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f852 	bl	80083ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008308:	e023      	b.n	8008352 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800830a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	2b00      	cmp	r3, #0
 8008314:	d009      	beq.n	800832a <HAL_UART_IRQHandler+0x4ea>
 8008316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800831a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fadb 	bl	80088de <UART_Transmit_IT>
    return;
 8008328:	e014      	b.n	8008354 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800832a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00e      	beq.n	8008354 <HAL_UART_IRQHandler+0x514>
 8008336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d008      	beq.n	8008354 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fb1b 	bl	800897e <UART_EndTransmit_IT>
    return;
 8008348:	e004      	b.n	8008354 <HAL_UART_IRQHandler+0x514>
    return;
 800834a:	bf00      	nop
 800834c:	e002      	b.n	8008354 <HAL_UART_IRQHandler+0x514>
      return;
 800834e:	bf00      	nop
 8008350:	e000      	b.n	8008354 <HAL_UART_IRQHandler+0x514>
      return;
 8008352:	bf00      	nop
  }
}
 8008354:	37e8      	adds	r7, #232	; 0xe8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop

0800835c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b090      	sub	sp, #64	; 0x40
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d137      	bne.n	8008450 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80083e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e2:	2200      	movs	r2, #0
 80083e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3314      	adds	r3, #20
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	623b      	str	r3, [r7, #32]
   return(result);
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80083fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3314      	adds	r3, #20
 8008404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008406:	633a      	str	r2, [r7, #48]	; 0x30
 8008408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800840c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e5      	bne.n	80083e6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800841a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	330c      	adds	r3, #12
 8008420:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	60fb      	str	r3, [r7, #12]
   return(result);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008430:	637b      	str	r3, [r7, #52]	; 0x34
 8008432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	330c      	adds	r3, #12
 8008438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800843a:	61fa      	str	r2, [r7, #28]
 800843c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	69b9      	ldr	r1, [r7, #24]
 8008440:	69fa      	ldr	r2, [r7, #28]
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	617b      	str	r3, [r7, #20]
   return(result);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1e5      	bne.n	800841a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800844e:	e002      	b.n	8008456 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008450:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008452:	f7ff ff83 	bl	800835c <HAL_UART_TxCpltCallback>
}
 8008456:	bf00      	nop
 8008458:	3740      	adds	r7, #64	; 0x40
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f7ff ff7f 	bl	8008370 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008472:	bf00      	nop
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b09c      	sub	sp, #112	; 0x70
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008486:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008492:	2b00      	cmp	r3, #0
 8008494:	d172      	bne.n	800857c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008498:	2200      	movs	r2, #0
 800849a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800849c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	330c      	adds	r3, #12
 80084a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80084b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	330c      	adds	r3, #12
 80084ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80084be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084c4:	e841 2300 	strex	r3, r2, [r1]
 80084c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e5      	bne.n	800849c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3314      	adds	r3, #20
 80084d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	e853 3f00 	ldrex	r3, [r3]
 80084de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e2:	f023 0301 	bic.w	r3, r3, #1
 80084e6:	667b      	str	r3, [r7, #100]	; 0x64
 80084e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3314      	adds	r3, #20
 80084ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80084f0:	647a      	str	r2, [r7, #68]	; 0x44
 80084f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084f8:	e841 2300 	strex	r3, r2, [r1]
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1e5      	bne.n	80084d0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3314      	adds	r3, #20
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850e:	e853 3f00 	ldrex	r3, [r3]
 8008512:	623b      	str	r3, [r7, #32]
   return(result);
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800851a:	663b      	str	r3, [r7, #96]	; 0x60
 800851c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3314      	adds	r3, #20
 8008522:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008524:	633a      	str	r2, [r7, #48]	; 0x30
 8008526:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008528:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800852a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800852c:	e841 2300 	strex	r3, r2, [r1]
 8008530:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e5      	bne.n	8008504 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800853a:	2220      	movs	r2, #32
 800853c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	2b01      	cmp	r3, #1
 8008546:	d119      	bne.n	800857c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	330c      	adds	r3, #12
 800854e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	60fb      	str	r3, [r7, #12]
   return(result);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0310 	bic.w	r3, r3, #16
 800855e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	330c      	adds	r3, #12
 8008566:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008568:	61fa      	str	r2, [r7, #28]
 800856a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856c:	69b9      	ldr	r1, [r7, #24]
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	e841 2300 	strex	r3, r2, [r1]
 8008574:	617b      	str	r3, [r7, #20]
   return(result);
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1e5      	bne.n	8008548 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800857c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800857e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008580:	2b01      	cmp	r3, #1
 8008582:	d106      	bne.n	8008592 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008586:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008588:	4619      	mov	r1, r3
 800858a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800858c:	f7ff ff0e 	bl	80083ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008590:	e002      	b.n	8008598 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008592:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008594:	f7fa fbb2 	bl	8002cfc <HAL_UART_RxCpltCallback>
}
 8008598:	bf00      	nop
 800859a:	3770      	adds	r7, #112	; 0x70
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d108      	bne.n	80085c8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085ba:	085b      	lsrs	r3, r3, #1
 80085bc:	b29b      	uxth	r3, r3
 80085be:	4619      	mov	r1, r3
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7ff fef3 	bl	80083ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085c6:	e002      	b.n	80085ce <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff fedb 	bl	8008384 <HAL_UART_RxHalfCpltCallback>
}
 80085ce:	bf00      	nop
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f2:	2b80      	cmp	r3, #128	; 0x80
 80085f4:	bf0c      	ite	eq
 80085f6:	2301      	moveq	r3, #1
 80085f8:	2300      	movne	r3, #0
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b21      	cmp	r3, #33	; 0x21
 8008608:	d108      	bne.n	800861c <UART_DMAError+0x46>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2200      	movs	r2, #0
 8008614:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008616:	68b8      	ldr	r0, [r7, #8]
 8008618:	f000 f8c2 	bl	80087a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008626:	2b40      	cmp	r3, #64	; 0x40
 8008628:	bf0c      	ite	eq
 800862a:	2301      	moveq	r3, #1
 800862c:	2300      	movne	r3, #0
 800862e:	b2db      	uxtb	r3, r3
 8008630:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b22      	cmp	r3, #34	; 0x22
 800863c:	d108      	bne.n	8008650 <UART_DMAError+0x7a>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d005      	beq.n	8008650 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2200      	movs	r2, #0
 8008648:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800864a:	68b8      	ldr	r0, [r7, #8]
 800864c:	f000 f8d0 	bl	80087f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	f043 0210 	orr.w	r2, r3, #16
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800865c:	68b8      	ldr	r0, [r7, #8]
 800865e:	f7ff fe9b 	bl	8008398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008662:	bf00      	nop
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b098      	sub	sp, #96	; 0x60
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	88fa      	ldrh	r2, [r7, #6]
 8008684:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2222      	movs	r2, #34	; 0x22
 8008690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008698:	4a3e      	ldr	r2, [pc, #248]	; (8008794 <UART_Start_Receive_DMA+0x128>)
 800869a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	4a3d      	ldr	r2, [pc, #244]	; (8008798 <UART_Start_Receive_DMA+0x12c>)
 80086a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	4a3c      	ldr	r2, [pc, #240]	; (800879c <UART_Start_Receive_DMA+0x130>)
 80086aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	2200      	movs	r2, #0
 80086b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	88fb      	ldrh	r3, [r7, #6]
 80086cc:	f7fc fde4 	bl	8005298 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80086d0:	2300      	movs	r3, #0
 80086d2:	613b      	str	r3, [r7, #16]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	613b      	str	r3, [r7, #16]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	330c      	adds	r3, #12
 80086f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008704:	65bb      	str	r3, [r7, #88]	; 0x58
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	330c      	adds	r3, #12
 800870c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800870e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008710:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800871c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1e5      	bne.n	80086ee <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3314      	adds	r3, #20
 8008728:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	f043 0301 	orr.w	r3, r3, #1
 8008738:	657b      	str	r3, [r7, #84]	; 0x54
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3314      	adds	r3, #20
 8008740:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008742:	63ba      	str	r2, [r7, #56]	; 0x38
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e5      	bne.n	8008722 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3314      	adds	r3, #20
 800875c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	617b      	str	r3, [r7, #20]
   return(result);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800876c:	653b      	str	r3, [r7, #80]	; 0x50
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3314      	adds	r3, #20
 8008774:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008776:	627a      	str	r2, [r7, #36]	; 0x24
 8008778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6a39      	ldr	r1, [r7, #32]
 800877c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	61fb      	str	r3, [r7, #28]
   return(result);
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e5      	bne.n	8008756 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3760      	adds	r7, #96	; 0x60
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	0800847b 	.word	0x0800847b
 8008798:	080085a1 	.word	0x080085a1
 800879c:	080085d7 	.word	0x080085d7

080087a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b089      	sub	sp, #36	; 0x24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	330c      	adds	r3, #12
 80087ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	330c      	adds	r3, #12
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	61ba      	str	r2, [r7, #24]
 80087ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6979      	ldr	r1, [r7, #20]
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	613b      	str	r3, [r7, #16]
   return(result);
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80087e4:	bf00      	nop
 80087e6:	3724      	adds	r7, #36	; 0x24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b095      	sub	sp, #84	; 0x54
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	330c      	adds	r3, #12
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008802:	e853 3f00 	ldrex	r3, [r3]
 8008806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800880e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	330c      	adds	r3, #12
 8008816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008818:	643a      	str	r2, [r7, #64]	; 0x40
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800881e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008820:	e841 2300 	strex	r3, r2, [r1]
 8008824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e5      	bne.n	80087f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3314      	adds	r3, #20
 8008832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	61fb      	str	r3, [r7, #28]
   return(result);
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	f023 0301 	bic.w	r3, r3, #1
 8008842:	64bb      	str	r3, [r7, #72]	; 0x48
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3314      	adds	r3, #20
 800884a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800884c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800884e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e5      	bne.n	800882c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008864:	2b01      	cmp	r3, #1
 8008866:	d119      	bne.n	800889c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	60bb      	str	r3, [r7, #8]
   return(result);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f023 0310 	bic.w	r3, r3, #16
 800887e:	647b      	str	r3, [r7, #68]	; 0x44
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	330c      	adds	r3, #12
 8008886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008888:	61ba      	str	r2, [r7, #24]
 800888a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6979      	ldr	r1, [r7, #20]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	613b      	str	r3, [r7, #16]
   return(result);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e5      	bne.n	8008868 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088aa:	bf00      	nop
 80088ac:	3754      	adds	r7, #84	; 0x54
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff fd61 	bl	8008398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088de:	b480      	push	{r7}
 80088e0:	b085      	sub	sp, #20
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b21      	cmp	r3, #33	; 0x21
 80088f0:	d13e      	bne.n	8008970 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fa:	d114      	bne.n	8008926 <UART_Transmit_IT+0x48>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d110      	bne.n	8008926 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008918:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	1c9a      	adds	r2, r3, #2
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	621a      	str	r2, [r3, #32]
 8008924:	e008      	b.n	8008938 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	1c59      	adds	r1, r3, #1
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	6211      	str	r1, [r2, #32]
 8008930:	781a      	ldrb	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800893c:	b29b      	uxth	r3, r3
 800893e:	3b01      	subs	r3, #1
 8008940:	b29b      	uxth	r3, r3
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	4619      	mov	r1, r3
 8008946:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10f      	bne.n	800896c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68da      	ldr	r2, [r3, #12]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800895a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800896a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	e000      	b.n	8008972 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008970:	2302      	movs	r3, #2
  }
}
 8008972:	4618      	mov	r0, r3
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008994:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2220      	movs	r2, #32
 800899a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff fcdc 	bl	800835c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b08c      	sub	sp, #48	; 0x30
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b22      	cmp	r3, #34	; 0x22
 80089c0:	f040 80ab 	bne.w	8008b1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089cc:	d117      	bne.n	80089fe <UART_Receive_IT+0x50>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d113      	bne.n	80089fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	1c9a      	adds	r2, r3, #2
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	629a      	str	r2, [r3, #40]	; 0x28
 80089fc:	e026      	b.n	8008a4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a10:	d007      	beq.n	8008a22 <UART_Receive_IT+0x74>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10a      	bne.n	8008a30 <UART_Receive_IT+0x82>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d106      	bne.n	8008a30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	e008      	b.n	8008a42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	3b01      	subs	r3, #1
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d15a      	bne.n	8008b16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0220 	bic.w	r2, r2, #32
 8008a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695a      	ldr	r2, [r3, #20]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0201 	bic.w	r2, r2, #1
 8008a8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d135      	bne.n	8008b0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	330c      	adds	r3, #12
 8008aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	f023 0310 	bic.w	r3, r3, #16
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac6:	623a      	str	r2, [r7, #32]
 8008ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	69f9      	ldr	r1, [r7, #28]
 8008acc:	6a3a      	ldr	r2, [r7, #32]
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e5      	bne.n	8008aa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0310 	and.w	r3, r3, #16
 8008ae4:	2b10      	cmp	r3, #16
 8008ae6:	d10a      	bne.n	8008afe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff fc51 	bl	80083ac <HAL_UARTEx_RxEventCallback>
 8008b0a:	e002      	b.n	8008b12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7fa f8f5 	bl	8002cfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	e002      	b.n	8008b1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e000      	b.n	8008b1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b1a:	2302      	movs	r3, #2
  }
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3730      	adds	r7, #48	; 0x30
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b28:	b09f      	sub	sp, #124	; 0x7c
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b3a:	68d9      	ldr	r1, [r3, #12]
 8008b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	ea40 0301 	orr.w	r3, r0, r1
 8008b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b48:	689a      	ldr	r2, [r3, #8]
 8008b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	431a      	orrs	r2, r3
 8008b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b68:	f021 010c 	bic.w	r1, r1, #12
 8008b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b72:	430b      	orrs	r3, r1
 8008b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b82:	6999      	ldr	r1, [r3, #24]
 8008b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	ea40 0301 	orr.w	r3, r0, r1
 8008b8c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4bc5      	ldr	r3, [pc, #788]	; (8008ea8 <UART_SetConfig+0x384>)
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d004      	beq.n	8008ba2 <UART_SetConfig+0x7e>
 8008b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	4bc3      	ldr	r3, [pc, #780]	; (8008eac <UART_SetConfig+0x388>)
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d103      	bne.n	8008baa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ba2:	f7fd fcfd 	bl	80065a0 <HAL_RCC_GetPCLK2Freq>
 8008ba6:	6778      	str	r0, [r7, #116]	; 0x74
 8008ba8:	e002      	b.n	8008bb0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008baa:	f7fd fce5 	bl	8006578 <HAL_RCC_GetPCLK1Freq>
 8008bae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb8:	f040 80b6 	bne.w	8008d28 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bbe:	461c      	mov	r4, r3
 8008bc0:	f04f 0500 	mov.w	r5, #0
 8008bc4:	4622      	mov	r2, r4
 8008bc6:	462b      	mov	r3, r5
 8008bc8:	1891      	adds	r1, r2, r2
 8008bca:	6439      	str	r1, [r7, #64]	; 0x40
 8008bcc:	415b      	adcs	r3, r3
 8008bce:	647b      	str	r3, [r7, #68]	; 0x44
 8008bd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008bd4:	1912      	adds	r2, r2, r4
 8008bd6:	eb45 0303 	adc.w	r3, r5, r3
 8008bda:	f04f 0000 	mov.w	r0, #0
 8008bde:	f04f 0100 	mov.w	r1, #0
 8008be2:	00d9      	lsls	r1, r3, #3
 8008be4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008be8:	00d0      	lsls	r0, r2, #3
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	1911      	adds	r1, r2, r4
 8008bf0:	6639      	str	r1, [r7, #96]	; 0x60
 8008bf2:	416b      	adcs	r3, r5
 8008bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8008bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	f04f 0300 	mov.w	r3, #0
 8008c00:	1891      	adds	r1, r2, r2
 8008c02:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c04:	415b      	adcs	r3, r3
 8008c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008c10:	f7f7 fe10 	bl	8000834 <__aeabi_uldivmod>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4ba5      	ldr	r3, [pc, #660]	; (8008eb0 <UART_SetConfig+0x38c>)
 8008c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c1e:	095b      	lsrs	r3, r3, #5
 8008c20:	011e      	lsls	r6, r3, #4
 8008c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c24:	461c      	mov	r4, r3
 8008c26:	f04f 0500 	mov.w	r5, #0
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	462b      	mov	r3, r5
 8008c2e:	1891      	adds	r1, r2, r2
 8008c30:	6339      	str	r1, [r7, #48]	; 0x30
 8008c32:	415b      	adcs	r3, r3
 8008c34:	637b      	str	r3, [r7, #52]	; 0x34
 8008c36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c3a:	1912      	adds	r2, r2, r4
 8008c3c:	eb45 0303 	adc.w	r3, r5, r3
 8008c40:	f04f 0000 	mov.w	r0, #0
 8008c44:	f04f 0100 	mov.w	r1, #0
 8008c48:	00d9      	lsls	r1, r3, #3
 8008c4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c4e:	00d0      	lsls	r0, r2, #3
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	1911      	adds	r1, r2, r4
 8008c56:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c58:	416b      	adcs	r3, r5
 8008c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	461a      	mov	r2, r3
 8008c62:	f04f 0300 	mov.w	r3, #0
 8008c66:	1891      	adds	r1, r2, r2
 8008c68:	62b9      	str	r1, [r7, #40]	; 0x28
 8008c6a:	415b      	adcs	r3, r3
 8008c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008c76:	f7f7 fddd 	bl	8000834 <__aeabi_uldivmod>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	4b8c      	ldr	r3, [pc, #560]	; (8008eb0 <UART_SetConfig+0x38c>)
 8008c80:	fba3 1302 	umull	r1, r3, r3, r2
 8008c84:	095b      	lsrs	r3, r3, #5
 8008c86:	2164      	movs	r1, #100	; 0x64
 8008c88:	fb01 f303 	mul.w	r3, r1, r3
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	00db      	lsls	r3, r3, #3
 8008c90:	3332      	adds	r3, #50	; 0x32
 8008c92:	4a87      	ldr	r2, [pc, #540]	; (8008eb0 <UART_SetConfig+0x38c>)
 8008c94:	fba2 2303 	umull	r2, r3, r2, r3
 8008c98:	095b      	lsrs	r3, r3, #5
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ca0:	441e      	add	r6, r3
 8008ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f04f 0100 	mov.w	r1, #0
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	1894      	adds	r4, r2, r2
 8008cb0:	623c      	str	r4, [r7, #32]
 8008cb2:	415b      	adcs	r3, r3
 8008cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cba:	1812      	adds	r2, r2, r0
 8008cbc:	eb41 0303 	adc.w	r3, r1, r3
 8008cc0:	f04f 0400 	mov.w	r4, #0
 8008cc4:	f04f 0500 	mov.w	r5, #0
 8008cc8:	00dd      	lsls	r5, r3, #3
 8008cca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008cce:	00d4      	lsls	r4, r2, #3
 8008cd0:	4622      	mov	r2, r4
 8008cd2:	462b      	mov	r3, r5
 8008cd4:	1814      	adds	r4, r2, r0
 8008cd6:	653c      	str	r4, [r7, #80]	; 0x50
 8008cd8:	414b      	adcs	r3, r1
 8008cda:	657b      	str	r3, [r7, #84]	; 0x54
 8008cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f04f 0300 	mov.w	r3, #0
 8008ce6:	1891      	adds	r1, r2, r2
 8008ce8:	61b9      	str	r1, [r7, #24]
 8008cea:	415b      	adcs	r3, r3
 8008cec:	61fb      	str	r3, [r7, #28]
 8008cee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cf2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008cf6:	f7f7 fd9d 	bl	8000834 <__aeabi_uldivmod>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4b6c      	ldr	r3, [pc, #432]	; (8008eb0 <UART_SetConfig+0x38c>)
 8008d00:	fba3 1302 	umull	r1, r3, r3, r2
 8008d04:	095b      	lsrs	r3, r3, #5
 8008d06:	2164      	movs	r1, #100	; 0x64
 8008d08:	fb01 f303 	mul.w	r3, r1, r3
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	3332      	adds	r3, #50	; 0x32
 8008d12:	4a67      	ldr	r2, [pc, #412]	; (8008eb0 <UART_SetConfig+0x38c>)
 8008d14:	fba2 2303 	umull	r2, r3, r2, r3
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	f003 0207 	and.w	r2, r3, #7
 8008d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4432      	add	r2, r6
 8008d24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d26:	e0b9      	b.n	8008e9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d2a:	461c      	mov	r4, r3
 8008d2c:	f04f 0500 	mov.w	r5, #0
 8008d30:	4622      	mov	r2, r4
 8008d32:	462b      	mov	r3, r5
 8008d34:	1891      	adds	r1, r2, r2
 8008d36:	6139      	str	r1, [r7, #16]
 8008d38:	415b      	adcs	r3, r3
 8008d3a:	617b      	str	r3, [r7, #20]
 8008d3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d40:	1912      	adds	r2, r2, r4
 8008d42:	eb45 0303 	adc.w	r3, r5, r3
 8008d46:	f04f 0000 	mov.w	r0, #0
 8008d4a:	f04f 0100 	mov.w	r1, #0
 8008d4e:	00d9      	lsls	r1, r3, #3
 8008d50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d54:	00d0      	lsls	r0, r2, #3
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	eb12 0804 	adds.w	r8, r2, r4
 8008d5e:	eb43 0905 	adc.w	r9, r3, r5
 8008d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f04f 0100 	mov.w	r1, #0
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	f04f 0300 	mov.w	r3, #0
 8008d74:	008b      	lsls	r3, r1, #2
 8008d76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d7a:	0082      	lsls	r2, r0, #2
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	4649      	mov	r1, r9
 8008d80:	f7f7 fd58 	bl	8000834 <__aeabi_uldivmod>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4b49      	ldr	r3, [pc, #292]	; (8008eb0 <UART_SetConfig+0x38c>)
 8008d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d8e:	095b      	lsrs	r3, r3, #5
 8008d90:	011e      	lsls	r6, r3, #4
 8008d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d94:	4618      	mov	r0, r3
 8008d96:	f04f 0100 	mov.w	r1, #0
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	1894      	adds	r4, r2, r2
 8008da0:	60bc      	str	r4, [r7, #8]
 8008da2:	415b      	adcs	r3, r3
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008daa:	1812      	adds	r2, r2, r0
 8008dac:	eb41 0303 	adc.w	r3, r1, r3
 8008db0:	f04f 0400 	mov.w	r4, #0
 8008db4:	f04f 0500 	mov.w	r5, #0
 8008db8:	00dd      	lsls	r5, r3, #3
 8008dba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008dbe:	00d4      	lsls	r4, r2, #3
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	462b      	mov	r3, r5
 8008dc4:	1814      	adds	r4, r2, r0
 8008dc6:	64bc      	str	r4, [r7, #72]	; 0x48
 8008dc8:	414b      	adcs	r3, r1
 8008dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f04f 0100 	mov.w	r1, #0
 8008dd6:	f04f 0200 	mov.w	r2, #0
 8008dda:	f04f 0300 	mov.w	r3, #0
 8008dde:	008b      	lsls	r3, r1, #2
 8008de0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008de4:	0082      	lsls	r2, r0, #2
 8008de6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008dea:	f7f7 fd23 	bl	8000834 <__aeabi_uldivmod>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4b2f      	ldr	r3, [pc, #188]	; (8008eb0 <UART_SetConfig+0x38c>)
 8008df4:	fba3 1302 	umull	r1, r3, r3, r2
 8008df8:	095b      	lsrs	r3, r3, #5
 8008dfa:	2164      	movs	r1, #100	; 0x64
 8008dfc:	fb01 f303 	mul.w	r3, r1, r3
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	011b      	lsls	r3, r3, #4
 8008e04:	3332      	adds	r3, #50	; 0x32
 8008e06:	4a2a      	ldr	r2, [pc, #168]	; (8008eb0 <UART_SetConfig+0x38c>)
 8008e08:	fba2 2303 	umull	r2, r3, r2, r3
 8008e0c:	095b      	lsrs	r3, r3, #5
 8008e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e12:	441e      	add	r6, r3
 8008e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e16:	4618      	mov	r0, r3
 8008e18:	f04f 0100 	mov.w	r1, #0
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	1894      	adds	r4, r2, r2
 8008e22:	603c      	str	r4, [r7, #0]
 8008e24:	415b      	adcs	r3, r3
 8008e26:	607b      	str	r3, [r7, #4]
 8008e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e2c:	1812      	adds	r2, r2, r0
 8008e2e:	eb41 0303 	adc.w	r3, r1, r3
 8008e32:	f04f 0400 	mov.w	r4, #0
 8008e36:	f04f 0500 	mov.w	r5, #0
 8008e3a:	00dd      	lsls	r5, r3, #3
 8008e3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e40:	00d4      	lsls	r4, r2, #3
 8008e42:	4622      	mov	r2, r4
 8008e44:	462b      	mov	r3, r5
 8008e46:	eb12 0a00 	adds.w	sl, r2, r0
 8008e4a:	eb43 0b01 	adc.w	fp, r3, r1
 8008e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f04f 0100 	mov.w	r1, #0
 8008e58:	f04f 0200 	mov.w	r2, #0
 8008e5c:	f04f 0300 	mov.w	r3, #0
 8008e60:	008b      	lsls	r3, r1, #2
 8008e62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e66:	0082      	lsls	r2, r0, #2
 8008e68:	4650      	mov	r0, sl
 8008e6a:	4659      	mov	r1, fp
 8008e6c:	f7f7 fce2 	bl	8000834 <__aeabi_uldivmod>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4b0e      	ldr	r3, [pc, #56]	; (8008eb0 <UART_SetConfig+0x38c>)
 8008e76:	fba3 1302 	umull	r1, r3, r3, r2
 8008e7a:	095b      	lsrs	r3, r3, #5
 8008e7c:	2164      	movs	r1, #100	; 0x64
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	3332      	adds	r3, #50	; 0x32
 8008e88:	4a09      	ldr	r2, [pc, #36]	; (8008eb0 <UART_SetConfig+0x38c>)
 8008e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8e:	095b      	lsrs	r3, r3, #5
 8008e90:	f003 020f 	and.w	r2, r3, #15
 8008e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4432      	add	r2, r6
 8008e9a:	609a      	str	r2, [r3, #8]
}
 8008e9c:	bf00      	nop
 8008e9e:	377c      	adds	r7, #124	; 0x7c
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea6:	bf00      	nop
 8008ea8:	40011000 	.word	0x40011000
 8008eac:	40011400 	.word	0x40011400
 8008eb0:	51eb851f 	.word	0x51eb851f

08008eb4 <asinf>:
 8008eb4:	b508      	push	{r3, lr}
 8008eb6:	ed2d 8b02 	vpush	{d8}
 8008eba:	eeb0 8a40 	vmov.f32	s16, s0
 8008ebe:	f000 f82d 	bl	8008f1c <__ieee754_asinf>
 8008ec2:	4b13      	ldr	r3, [pc, #76]	; (8008f10 <asinf+0x5c>)
 8008ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	eef0 8a40 	vmov.f32	s17, s0
 8008ece:	d01a      	beq.n	8008f06 <asinf+0x52>
 8008ed0:	eeb4 8a48 	vcmp.f32	s16, s16
 8008ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed8:	d615      	bvs.n	8008f06 <asinf+0x52>
 8008eda:	eeb0 0a48 	vmov.f32	s0, s16
 8008ede:	f000 fa7b 	bl	80093d8 <fabsf>
 8008ee2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008ee6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eee:	dd0a      	ble.n	8008f06 <asinf+0x52>
 8008ef0:	f000 fa80 	bl	80093f4 <__errno>
 8008ef4:	ecbd 8b02 	vpop	{d8}
 8008ef8:	2321      	movs	r3, #33	; 0x21
 8008efa:	6003      	str	r3, [r0, #0]
 8008efc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008f00:	4804      	ldr	r0, [pc, #16]	; (8008f14 <asinf+0x60>)
 8008f02:	f000 ba71 	b.w	80093e8 <nanf>
 8008f06:	eeb0 0a68 	vmov.f32	s0, s17
 8008f0a:	ecbd 8b02 	vpop	{d8}
 8008f0e:	bd08      	pop	{r3, pc}
 8008f10:	2000000d 	.word	0x2000000d
 8008f14:	080094b4 	.word	0x080094b4

08008f18 <atan2f>:
 8008f18:	f000 b8e6 	b.w	80090e8 <__ieee754_atan2f>

08008f1c <__ieee754_asinf>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	ee10 5a10 	vmov	r5, s0
 8008f22:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008f26:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008f2a:	ed2d 8b04 	vpush	{d8-d9}
 8008f2e:	d10c      	bne.n	8008f4a <__ieee754_asinf+0x2e>
 8008f30:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80090a8 <__ieee754_asinf+0x18c>
 8008f34:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80090ac <__ieee754_asinf+0x190>
 8008f38:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008f3c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008f40:	eeb0 0a67 	vmov.f32	s0, s15
 8008f44:	ecbd 8b04 	vpop	{d8-d9}
 8008f48:	bd38      	pop	{r3, r4, r5, pc}
 8008f4a:	dd04      	ble.n	8008f56 <__ieee754_asinf+0x3a>
 8008f4c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008f50:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008f54:	e7f6      	b.n	8008f44 <__ieee754_asinf+0x28>
 8008f56:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008f5a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8008f5e:	da0b      	bge.n	8008f78 <__ieee754_asinf+0x5c>
 8008f60:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8008f64:	da52      	bge.n	800900c <__ieee754_asinf+0xf0>
 8008f66:	eddf 7a52 	vldr	s15, [pc, #328]	; 80090b0 <__ieee754_asinf+0x194>
 8008f6a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008f6e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f76:	dce5      	bgt.n	8008f44 <__ieee754_asinf+0x28>
 8008f78:	f000 fa2e 	bl	80093d8 <fabsf>
 8008f7c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8008f80:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008f84:	ee20 8a08 	vmul.f32	s16, s0, s16
 8008f88:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80090b4 <__ieee754_asinf+0x198>
 8008f8c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80090b8 <__ieee754_asinf+0x19c>
 8008f90:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80090bc <__ieee754_asinf+0x1a0>
 8008f94:	eea8 7a27 	vfma.f32	s14, s16, s15
 8008f98:	eddf 7a49 	vldr	s15, [pc, #292]	; 80090c0 <__ieee754_asinf+0x1a4>
 8008f9c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008fa0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80090c4 <__ieee754_asinf+0x1a8>
 8008fa4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008fa8:	eddf 7a47 	vldr	s15, [pc, #284]	; 80090c8 <__ieee754_asinf+0x1ac>
 8008fac:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008fb0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80090cc <__ieee754_asinf+0x1b0>
 8008fb4:	eea7 9a88 	vfma.f32	s18, s15, s16
 8008fb8:	eddf 7a45 	vldr	s15, [pc, #276]	; 80090d0 <__ieee754_asinf+0x1b4>
 8008fbc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8008fc0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80090d4 <__ieee754_asinf+0x1b8>
 8008fc4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008fc8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80090d8 <__ieee754_asinf+0x1bc>
 8008fcc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008fd0:	eeb0 0a48 	vmov.f32	s0, s16
 8008fd4:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008fd8:	f000 f926 	bl	8009228 <__ieee754_sqrtf>
 8008fdc:	4b3f      	ldr	r3, [pc, #252]	; (80090dc <__ieee754_asinf+0x1c0>)
 8008fde:	ee29 9a08 	vmul.f32	s18, s18, s16
 8008fe2:	429c      	cmp	r4, r3
 8008fe4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008fe8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008fec:	dd3d      	ble.n	800906a <__ieee754_asinf+0x14e>
 8008fee:	eea0 0a06 	vfma.f32	s0, s0, s12
 8008ff2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80090e0 <__ieee754_asinf+0x1c4>
 8008ff6:	eee0 7a26 	vfma.f32	s15, s0, s13
 8008ffa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80090ac <__ieee754_asinf+0x190>
 8008ffe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009002:	2d00      	cmp	r5, #0
 8009004:	bfd8      	it	le
 8009006:	eeb1 0a40 	vnegle.f32	s0, s0
 800900a:	e79b      	b.n	8008f44 <__ieee754_asinf+0x28>
 800900c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8009010:	eddf 6a28 	vldr	s13, [pc, #160]	; 80090b4 <__ieee754_asinf+0x198>
 8009014:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80090b8 <__ieee754_asinf+0x19c>
 8009018:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80090cc <__ieee754_asinf+0x1b0>
 800901c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8009020:	eddf 6a27 	vldr	s13, [pc, #156]	; 80090c0 <__ieee754_asinf+0x1a4>
 8009024:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009028:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80090c4 <__ieee754_asinf+0x1a8>
 800902c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009030:	eddf 6a25 	vldr	s13, [pc, #148]	; 80090c8 <__ieee754_asinf+0x1ac>
 8009034:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009038:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80090bc <__ieee754_asinf+0x1a0>
 800903c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009040:	eddf 6a23 	vldr	s13, [pc, #140]	; 80090d0 <__ieee754_asinf+0x1b4>
 8009044:	eee7 6a86 	vfma.f32	s13, s15, s12
 8009048:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80090d4 <__ieee754_asinf+0x1b8>
 800904c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8009050:	eddf 6a21 	vldr	s13, [pc, #132]	; 80090d8 <__ieee754_asinf+0x1bc>
 8009054:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800905c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8009060:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8009064:	eea0 0a27 	vfma.f32	s0, s0, s15
 8009068:	e76c      	b.n	8008f44 <__ieee754_asinf+0x28>
 800906a:	ee10 3a10 	vmov	r3, s0
 800906e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009072:	f023 030f 	bic.w	r3, r3, #15
 8009076:	ee07 3a10 	vmov	s14, r3
 800907a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800907e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009082:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009086:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800908a:	eddf 7a07 	vldr	s15, [pc, #28]	; 80090a8 <__ieee754_asinf+0x18c>
 800908e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8009092:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8009096:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80090e4 <__ieee754_asinf+0x1c8>
 800909a:	eeb0 6a40 	vmov.f32	s12, s0
 800909e:	eea7 6a66 	vfms.f32	s12, s14, s13
 80090a2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80090a6:	e7aa      	b.n	8008ffe <__ieee754_asinf+0xe2>
 80090a8:	b33bbd2e 	.word	0xb33bbd2e
 80090ac:	3fc90fdb 	.word	0x3fc90fdb
 80090b0:	7149f2ca 	.word	0x7149f2ca
 80090b4:	3811ef08 	.word	0x3811ef08
 80090b8:	3a4f7f04 	.word	0x3a4f7f04
 80090bc:	3e2aaaab 	.word	0x3e2aaaab
 80090c0:	bd241146 	.word	0xbd241146
 80090c4:	3e4e0aa8 	.word	0x3e4e0aa8
 80090c8:	bea6b090 	.word	0xbea6b090
 80090cc:	3d9dc62e 	.word	0x3d9dc62e
 80090d0:	bf303361 	.word	0xbf303361
 80090d4:	4001572d 	.word	0x4001572d
 80090d8:	c019d139 	.word	0xc019d139
 80090dc:	3f799999 	.word	0x3f799999
 80090e0:	333bbd2e 	.word	0x333bbd2e
 80090e4:	3f490fdb 	.word	0x3f490fdb

080090e8 <__ieee754_atan2f>:
 80090e8:	ee10 2a90 	vmov	r2, s1
 80090ec:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80090f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80090f4:	b510      	push	{r4, lr}
 80090f6:	eef0 7a40 	vmov.f32	s15, s0
 80090fa:	dc06      	bgt.n	800910a <__ieee754_atan2f+0x22>
 80090fc:	ee10 0a10 	vmov	r0, s0
 8009100:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8009104:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009108:	dd04      	ble.n	8009114 <__ieee754_atan2f+0x2c>
 800910a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800910e:	eeb0 0a67 	vmov.f32	s0, s15
 8009112:	bd10      	pop	{r4, pc}
 8009114:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8009118:	d103      	bne.n	8009122 <__ieee754_atan2f+0x3a>
 800911a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800911e:	f000 b887 	b.w	8009230 <atanf>
 8009122:	1794      	asrs	r4, r2, #30
 8009124:	f004 0402 	and.w	r4, r4, #2
 8009128:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800912c:	b943      	cbnz	r3, 8009140 <__ieee754_atan2f+0x58>
 800912e:	2c02      	cmp	r4, #2
 8009130:	d05e      	beq.n	80091f0 <__ieee754_atan2f+0x108>
 8009132:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009204 <__ieee754_atan2f+0x11c>
 8009136:	2c03      	cmp	r4, #3
 8009138:	bf08      	it	eq
 800913a:	eef0 7a47 	vmoveq.f32	s15, s14
 800913e:	e7e6      	b.n	800910e <__ieee754_atan2f+0x26>
 8009140:	b941      	cbnz	r1, 8009154 <__ieee754_atan2f+0x6c>
 8009142:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009208 <__ieee754_atan2f+0x120>
 8009146:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800920c <__ieee754_atan2f+0x124>
 800914a:	2800      	cmp	r0, #0
 800914c:	bfb8      	it	lt
 800914e:	eef0 7a40 	vmovlt.f32	s15, s0
 8009152:	e7dc      	b.n	800910e <__ieee754_atan2f+0x26>
 8009154:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009158:	d110      	bne.n	800917c <__ieee754_atan2f+0x94>
 800915a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800915e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009162:	d107      	bne.n	8009174 <__ieee754_atan2f+0x8c>
 8009164:	2c02      	cmp	r4, #2
 8009166:	d846      	bhi.n	80091f6 <__ieee754_atan2f+0x10e>
 8009168:	4b29      	ldr	r3, [pc, #164]	; (8009210 <__ieee754_atan2f+0x128>)
 800916a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800916e:	edd4 7a00 	vldr	s15, [r4]
 8009172:	e7cc      	b.n	800910e <__ieee754_atan2f+0x26>
 8009174:	2c02      	cmp	r4, #2
 8009176:	d841      	bhi.n	80091fc <__ieee754_atan2f+0x114>
 8009178:	4b26      	ldr	r3, [pc, #152]	; (8009214 <__ieee754_atan2f+0x12c>)
 800917a:	e7f6      	b.n	800916a <__ieee754_atan2f+0x82>
 800917c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009180:	d0df      	beq.n	8009142 <__ieee754_atan2f+0x5a>
 8009182:	1a5b      	subs	r3, r3, r1
 8009184:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8009188:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800918c:	da1a      	bge.n	80091c4 <__ieee754_atan2f+0xdc>
 800918e:	2a00      	cmp	r2, #0
 8009190:	da01      	bge.n	8009196 <__ieee754_atan2f+0xae>
 8009192:	313c      	adds	r1, #60	; 0x3c
 8009194:	db19      	blt.n	80091ca <__ieee754_atan2f+0xe2>
 8009196:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800919a:	f000 f91d 	bl	80093d8 <fabsf>
 800919e:	f000 f847 	bl	8009230 <atanf>
 80091a2:	eef0 7a40 	vmov.f32	s15, s0
 80091a6:	2c01      	cmp	r4, #1
 80091a8:	d012      	beq.n	80091d0 <__ieee754_atan2f+0xe8>
 80091aa:	2c02      	cmp	r4, #2
 80091ac:	d017      	beq.n	80091de <__ieee754_atan2f+0xf6>
 80091ae:	2c00      	cmp	r4, #0
 80091b0:	d0ad      	beq.n	800910e <__ieee754_atan2f+0x26>
 80091b2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009218 <__ieee754_atan2f+0x130>
 80091b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80091ba:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800921c <__ieee754_atan2f+0x134>
 80091be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80091c2:	e7a4      	b.n	800910e <__ieee754_atan2f+0x26>
 80091c4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009208 <__ieee754_atan2f+0x120>
 80091c8:	e7ed      	b.n	80091a6 <__ieee754_atan2f+0xbe>
 80091ca:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009220 <__ieee754_atan2f+0x138>
 80091ce:	e7ea      	b.n	80091a6 <__ieee754_atan2f+0xbe>
 80091d0:	ee17 3a90 	vmov	r3, s15
 80091d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80091d8:	ee07 3a90 	vmov	s15, r3
 80091dc:	e797      	b.n	800910e <__ieee754_atan2f+0x26>
 80091de:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009218 <__ieee754_atan2f+0x130>
 80091e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80091e6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800921c <__ieee754_atan2f+0x134>
 80091ea:	ee70 7a67 	vsub.f32	s15, s0, s15
 80091ee:	e78e      	b.n	800910e <__ieee754_atan2f+0x26>
 80091f0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800921c <__ieee754_atan2f+0x134>
 80091f4:	e78b      	b.n	800910e <__ieee754_atan2f+0x26>
 80091f6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009224 <__ieee754_atan2f+0x13c>
 80091fa:	e788      	b.n	800910e <__ieee754_atan2f+0x26>
 80091fc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009220 <__ieee754_atan2f+0x138>
 8009200:	e785      	b.n	800910e <__ieee754_atan2f+0x26>
 8009202:	bf00      	nop
 8009204:	c0490fdb 	.word	0xc0490fdb
 8009208:	3fc90fdb 	.word	0x3fc90fdb
 800920c:	bfc90fdb 	.word	0xbfc90fdb
 8009210:	080094b8 	.word	0x080094b8
 8009214:	080094c4 	.word	0x080094c4
 8009218:	33bbbd2e 	.word	0x33bbbd2e
 800921c:	40490fdb 	.word	0x40490fdb
 8009220:	00000000 	.word	0x00000000
 8009224:	3f490fdb 	.word	0x3f490fdb

08009228 <__ieee754_sqrtf>:
 8009228:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800922c:	4770      	bx	lr
	...

08009230 <atanf>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	ee10 5a10 	vmov	r5, s0
 8009236:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800923a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800923e:	eef0 7a40 	vmov.f32	s15, s0
 8009242:	db10      	blt.n	8009266 <atanf+0x36>
 8009244:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009248:	dd04      	ble.n	8009254 <atanf+0x24>
 800924a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800924e:	eeb0 0a67 	vmov.f32	s0, s15
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800938c <atanf+0x15c>
 8009258:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009390 <atanf+0x160>
 800925c:	2d00      	cmp	r5, #0
 800925e:	bfd8      	it	le
 8009260:	eef0 7a40 	vmovle.f32	s15, s0
 8009264:	e7f3      	b.n	800924e <atanf+0x1e>
 8009266:	4b4b      	ldr	r3, [pc, #300]	; (8009394 <atanf+0x164>)
 8009268:	429c      	cmp	r4, r3
 800926a:	dc10      	bgt.n	800928e <atanf+0x5e>
 800926c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009270:	da0a      	bge.n	8009288 <atanf+0x58>
 8009272:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009398 <atanf+0x168>
 8009276:	ee30 7a07 	vadd.f32	s14, s0, s14
 800927a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800927e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009286:	dce2      	bgt.n	800924e <atanf+0x1e>
 8009288:	f04f 33ff 	mov.w	r3, #4294967295
 800928c:	e013      	b.n	80092b6 <atanf+0x86>
 800928e:	f000 f8a3 	bl	80093d8 <fabsf>
 8009292:	4b42      	ldr	r3, [pc, #264]	; (800939c <atanf+0x16c>)
 8009294:	429c      	cmp	r4, r3
 8009296:	dc4f      	bgt.n	8009338 <atanf+0x108>
 8009298:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800929c:	429c      	cmp	r4, r3
 800929e:	dc41      	bgt.n	8009324 <atanf+0xf4>
 80092a0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80092a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80092a8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80092ac:	2300      	movs	r3, #0
 80092ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80092b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80092bc:	eddf 5a38 	vldr	s11, [pc, #224]	; 80093a0 <atanf+0x170>
 80092c0:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80093a4 <atanf+0x174>
 80092c4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80093a8 <atanf+0x178>
 80092c8:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80093ac <atanf+0x17c>
 80092cc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80092d0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80092d4:	eddf 5a36 	vldr	s11, [pc, #216]	; 80093b0 <atanf+0x180>
 80092d8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80092dc:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80093b4 <atanf+0x184>
 80092e0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80092e4:	eddf 5a34 	vldr	s11, [pc, #208]	; 80093b8 <atanf+0x188>
 80092e8:	eee6 5a07 	vfma.f32	s11, s12, s14
 80092ec:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80093bc <atanf+0x18c>
 80092f0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80092f4:	eddf 5a32 	vldr	s11, [pc, #200]	; 80093c0 <atanf+0x190>
 80092f8:	eee7 5a05 	vfma.f32	s11, s14, s10
 80092fc:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80093c4 <atanf+0x194>
 8009300:	eea5 5a87 	vfma.f32	s10, s11, s14
 8009304:	eddf 5a30 	vldr	s11, [pc, #192]	; 80093c8 <atanf+0x198>
 8009308:	eee5 5a07 	vfma.f32	s11, s10, s14
 800930c:	eea5 0a87 	vfma.f32	s0, s11, s14
 8009310:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009314:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009318:	ee27 0a80 	vmul.f32	s0, s15, s0
 800931c:	d121      	bne.n	8009362 <atanf+0x132>
 800931e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009322:	e794      	b.n	800924e <atanf+0x1e>
 8009324:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009328:	ee30 7a67 	vsub.f32	s14, s0, s15
 800932c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009330:	2301      	movs	r3, #1
 8009332:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009336:	e7be      	b.n	80092b6 <atanf+0x86>
 8009338:	4b24      	ldr	r3, [pc, #144]	; (80093cc <atanf+0x19c>)
 800933a:	429c      	cmp	r4, r3
 800933c:	dc0b      	bgt.n	8009356 <atanf+0x126>
 800933e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009346:	eea0 7a27 	vfma.f32	s14, s0, s15
 800934a:	2302      	movs	r3, #2
 800934c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009354:	e7af      	b.n	80092b6 <atanf+0x86>
 8009356:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800935a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800935e:	2303      	movs	r3, #3
 8009360:	e7a9      	b.n	80092b6 <atanf+0x86>
 8009362:	4a1b      	ldr	r2, [pc, #108]	; (80093d0 <atanf+0x1a0>)
 8009364:	491b      	ldr	r1, [pc, #108]	; (80093d4 <atanf+0x1a4>)
 8009366:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800936a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800936e:	ed93 7a00 	vldr	s14, [r3]
 8009372:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009376:	2d00      	cmp	r5, #0
 8009378:	ee70 7a67 	vsub.f32	s15, s0, s15
 800937c:	ed92 0a00 	vldr	s0, [r2]
 8009380:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009384:	bfb8      	it	lt
 8009386:	eef1 7a67 	vneglt.f32	s15, s15
 800938a:	e760      	b.n	800924e <atanf+0x1e>
 800938c:	3fc90fdb 	.word	0x3fc90fdb
 8009390:	bfc90fdb 	.word	0xbfc90fdb
 8009394:	3edfffff 	.word	0x3edfffff
 8009398:	7149f2ca 	.word	0x7149f2ca
 800939c:	3f97ffff 	.word	0x3f97ffff
 80093a0:	3c8569d7 	.word	0x3c8569d7
 80093a4:	3d4bda59 	.word	0x3d4bda59
 80093a8:	bd15a221 	.word	0xbd15a221
 80093ac:	be4ccccd 	.word	0xbe4ccccd
 80093b0:	3d886b35 	.word	0x3d886b35
 80093b4:	3dba2e6e 	.word	0x3dba2e6e
 80093b8:	3e124925 	.word	0x3e124925
 80093bc:	3eaaaaab 	.word	0x3eaaaaab
 80093c0:	bd6ef16b 	.word	0xbd6ef16b
 80093c4:	bd9d8795 	.word	0xbd9d8795
 80093c8:	bde38e38 	.word	0xbde38e38
 80093cc:	401bffff 	.word	0x401bffff
 80093d0:	080094d0 	.word	0x080094d0
 80093d4:	080094e0 	.word	0x080094e0

080093d8 <fabsf>:
 80093d8:	ee10 3a10 	vmov	r3, s0
 80093dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093e0:	ee00 3a10 	vmov	s0, r3
 80093e4:	4770      	bx	lr
	...

080093e8 <nanf>:
 80093e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80093f0 <nanf+0x8>
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	7fc00000 	.word	0x7fc00000

080093f4 <__errno>:
 80093f4:	4b01      	ldr	r3, [pc, #4]	; (80093fc <__errno+0x8>)
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop
 80093fc:	20000010 	.word	0x20000010

08009400 <__libc_init_array>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	4d0d      	ldr	r5, [pc, #52]	; (8009438 <__libc_init_array+0x38>)
 8009404:	4c0d      	ldr	r4, [pc, #52]	; (800943c <__libc_init_array+0x3c>)
 8009406:	1b64      	subs	r4, r4, r5
 8009408:	10a4      	asrs	r4, r4, #2
 800940a:	2600      	movs	r6, #0
 800940c:	42a6      	cmp	r6, r4
 800940e:	d109      	bne.n	8009424 <__libc_init_array+0x24>
 8009410:	4d0b      	ldr	r5, [pc, #44]	; (8009440 <__libc_init_array+0x40>)
 8009412:	4c0c      	ldr	r4, [pc, #48]	; (8009444 <__libc_init_array+0x44>)
 8009414:	f000 f820 	bl	8009458 <_init>
 8009418:	1b64      	subs	r4, r4, r5
 800941a:	10a4      	asrs	r4, r4, #2
 800941c:	2600      	movs	r6, #0
 800941e:	42a6      	cmp	r6, r4
 8009420:	d105      	bne.n	800942e <__libc_init_array+0x2e>
 8009422:	bd70      	pop	{r4, r5, r6, pc}
 8009424:	f855 3b04 	ldr.w	r3, [r5], #4
 8009428:	4798      	blx	r3
 800942a:	3601      	adds	r6, #1
 800942c:	e7ee      	b.n	800940c <__libc_init_array+0xc>
 800942e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009432:	4798      	blx	r3
 8009434:	3601      	adds	r6, #1
 8009436:	e7f2      	b.n	800941e <__libc_init_array+0x1e>
 8009438:	080094f8 	.word	0x080094f8
 800943c:	080094f8 	.word	0x080094f8
 8009440:	080094f8 	.word	0x080094f8
 8009444:	080094fc 	.word	0x080094fc

08009448 <memset>:
 8009448:	4402      	add	r2, r0
 800944a:	4603      	mov	r3, r0
 800944c:	4293      	cmp	r3, r2
 800944e:	d100      	bne.n	8009452 <memset+0xa>
 8009450:	4770      	bx	lr
 8009452:	f803 1b01 	strb.w	r1, [r3], #1
 8009456:	e7f9      	b.n	800944c <memset+0x4>

08009458 <_init>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	bf00      	nop
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr

08009464 <_fini>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	bf00      	nop
 8009468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946a:	bc08      	pop	{r3}
 800946c:	469e      	mov	lr, r3
 800946e:	4770      	bx	lr
